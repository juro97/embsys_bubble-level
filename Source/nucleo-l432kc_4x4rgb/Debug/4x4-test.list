
4x4-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007578  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800782c  0800782c  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007834  08007834  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800783c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa0  20000190  080079cc  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c30  080079cc  00021c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c83c  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ba  00000000  00000000  0003c9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  000403b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  00041b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022868  00000000  00000000  000431b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194ab  00000000  00000000  00065a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d485e  00000000  00000000  0007eec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153721  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006334  00000000  00000000  00153774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  00159aa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000190 	.word	0x20000190
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076f0 	.word	0x080076f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000194 	.word	0x20000194
 80001cc:	080076f0 	.word	0x080076f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <printDataOnMatrix>:
 * s = strong shift r4c4
 * z = off
 */

void printDataOnMatrix()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
			break;
		case 'z':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c1;
			break;
		default:
			ptr_Rgb4x4Click = &rgb4x4click_all_on;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <printDataOnMatrix+0x20>)
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <printDataOnMatrix+0x24>)
 80004dc:	601a      	str	r2, [r3, #0]
			break;
 80004de:	bf00      	nop
	}

	// not necessary
	// Get Semaphore
	// Enter Critical Section
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *) ptr_Rgb4x4Click, PWM_STREAM_LENGTH);
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <printDataOnMatrix+0x20>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80004e8:	2100      	movs	r1, #0
 80004ea:	4804      	ldr	r0, [pc, #16]	; (80004fc <printDataOnMatrix+0x28>)
 80004ec:	f002 fbde 	bl	8002cac <HAL_TIM_PWM_Start_DMA>
	// Exit Critical Section
	// Return Semaphore happens in the Transmission Complete Callback

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200001ac 	.word	0x200001ac
 80004f8:	20000000 	.word	0x20000000
 80004fc:	200001b0 	.word	0x200001b0

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fc19 	bl	8000d3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f842 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f97e 	bl	800080c <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 f95e 	bl	80007d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f92c 	bl	8000770 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000518:	f000 f89c 	bl	8000654 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f004 fa50 	bl	80049c0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_printPermission */
  mutex_printPermissionHandle = osMutexNew(&mutex_printPermission_attributes);
 8000520:	4810      	ldr	r0, [pc, #64]	; (8000564 <main+0x64>)
 8000522:	f004 fb44 	bl	8004bae <osMutexNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <main+0x68>)
 800052a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ConServerTask */
  ConServerTaskHandle = osThreadNew(StartConServerTask, NULL, &ConServerTask_attributes);
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <main+0x6c>)
 800052e:	2100      	movs	r1, #0
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x70>)
 8000532:	f004 fa8f 	bl	8004a54 <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <main+0x74>)
 800053a:	6013      	str	r3, [r2, #0]

  /* creation of checkRGBTask */
  checkRGBTaskHandle = osThreadNew(StartCheckRGBTask, NULL, &checkRGBTask_attributes);
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <main+0x78>)
 800053e:	2100      	movs	r1, #0
 8000540:	480e      	ldr	r0, [pc, #56]	; (800057c <main+0x7c>)
 8000542:	f004 fa87 	bl	8004a54 <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <main+0x80>)
 800054a:	6013      	str	r3, [r2, #0]

  /* creation of getValuesTask */
  getValuesTaskHandle = osThreadNew(StartGetValuesTask, NULL, &getValuesTask_attributes);
 800054c:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <main+0x84>)
 800054e:	2100      	movs	r1, #0
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <main+0x88>)
 8000552:	f004 fa7f 	bl	8004a54 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a0c      	ldr	r2, [pc, #48]	; (800058c <main+0x8c>)
 800055a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055c:	f004 fa54 	bl	8004a08 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x60>
 8000562:	bf00      	nop
 8000564:	080077d4 	.word	0x080077d4
 8000568:	200002d4 	.word	0x200002d4
 800056c:	08007768 	.word	0x08007768
 8000570:	080008bd 	.word	0x080008bd
 8000574:	200002c8 	.word	0x200002c8
 8000578:	0800778c 	.word	0x0800778c
 800057c:	080008cf 	.word	0x080008cf
 8000580:	200002cc 	.word	0x200002cc
 8000584:	080077b0 	.word	0x080077b0
 8000588:	080008e1 	.word	0x080008e1
 800058c:	200002d0 	.word	0x200002d0

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b096      	sub	sp, #88	; 0x58
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2244      	movs	r2, #68	; 0x44
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f007 f89e 	bl	80076e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	463b      	mov	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b6:	f001 f8b3 	bl	8001720 <HAL_PWREx_ControlVoltageScaling>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c0:	f000 f9ae 	bl	8000920 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005c4:	f001 f88e 	bl	80016e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <SystemClock_Config+0xc0>)
 80005ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ce:	4a20      	ldr	r2, [pc, #128]	; (8000650 <SystemClock_Config+0xc0>)
 80005d0:	f023 0318 	bic.w	r3, r3, #24
 80005d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005d8:	2314      	movs	r3, #20
 80005da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e8:	2360      	movs	r3, #96	; 0x60
 80005ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005f0:	2301      	movs	r3, #1
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005f8:	2328      	movs	r3, #40	; 0x28
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fc:	2307      	movs	r3, #7
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4618      	mov	r0, r3
 800060e:	f001 f8dd 	bl	80017cc <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000618:	f000 f982 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2303      	movs	r3, #3
 8000622:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	2104      	movs	r1, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fcdd 	bl	8001ff4 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000640:	f000 f96e 	bl	8000920 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000644:	f002 f922 	bl	800288c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000648:	bf00      	nop
 800064a:	3758      	adds	r7, #88	; 0x58
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000

08000654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	222c      	movs	r2, #44	; 0x2c
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f007 f82d 	bl	80076e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000686:	4b38      	ldr	r3, [pc, #224]	; (8000768 <MX_TIM1_Init+0x114>)
 8000688:	4a38      	ldr	r2, [pc, #224]	; (800076c <MX_TIM1_Init+0x118>)
 800068a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800068c:	4b36      	ldr	r3, [pc, #216]	; (8000768 <MX_TIM1_Init+0x114>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b35      	ldr	r3, [pc, #212]	; (8000768 <MX_TIM1_Init+0x114>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <MX_TIM1_Init+0x114>)
 800069a:	2264      	movs	r2, #100	; 0x64
 800069c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b32      	ldr	r3, [pc, #200]	; (8000768 <MX_TIM1_Init+0x114>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <MX_TIM1_Init+0x114>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <MX_TIM1_Init+0x114>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006b0:	482d      	ldr	r0, [pc, #180]	; (8000768 <MX_TIM1_Init+0x114>)
 80006b2:	f002 faa3 	bl	8002bfc <HAL_TIM_PWM_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80006bc:	f000 f930 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006c4:	2300      	movs	r3, #0
 80006c6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006d0:	4619      	mov	r1, r3
 80006d2:	4825      	ldr	r0, [pc, #148]	; (8000768 <MX_TIM1_Init+0x114>)
 80006d4:	f003 fc0a 	bl	8003eec <HAL_TIMEx_MasterConfigSynchronization>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80006de:	f000 f91f 	bl	8000920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e2:	2360      	movs	r3, #96	; 0x60
 80006e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ea:	2300      	movs	r3, #0
 80006ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ee:	2300      	movs	r3, #0
 80006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000702:	2200      	movs	r2, #0
 8000704:	4619      	mov	r1, r3
 8000706:	4818      	ldr	r0, [pc, #96]	; (8000768 <MX_TIM1_Init+0x114>)
 8000708:	f002 fed0 	bl	80034ac <HAL_TIM_PWM_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000712:	f000 f905 	bl	8000920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000738:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <MX_TIM1_Init+0x114>)
 800074c:	f003 fc34 	bl	8003fb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000756:	f000 f8e3 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <MX_TIM1_Init+0x114>)
 800075c:	f000 f96a 	bl	8000a34 <HAL_TIM_MspPostInit>

}
 8000760:	bf00      	nop
 8000762:	3758      	adds	r7, #88	; 0x58
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200001b0 	.word	0x200001b0
 800076c:	40012c00 	.word	0x40012c00

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_USART2_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007b4:	f003 fc96 	bl	80040e4 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f8af 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000244 	.word	0x20000244
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_DMA_Init+0x38>)
 80007d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <MX_DMA_Init+0x38>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6493      	str	r3, [r2, #72]	; 0x48
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_DMA_Init+0x38>)
 80007e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2105      	movs	r1, #5
 80007f2:	200c      	movs	r0, #12
 80007f4:	f000 fb92 	bl	8000f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007f8:	200c      	movs	r0, #12
 80007fa:	f000 fbab 	bl	8000f54 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_GPIO_Init+0x8c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a10      	ldr	r2, [pc, #64]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2108      	movs	r1, #8
 800086e:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_GPIO_Init+0x90>)
 8000870:	f000 ff20 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000874:	2308      	movs	r3, #8
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_GPIO_Init+0x90>)
 800088c:	f000 fda8 	bl	80013e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400

080008a0 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80008a8:	2100      	movs	r1, #0
 80008aa:	4803      	ldr	r0, [pc, #12]	; (80008b8 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 80008ac:	f002 fbf6 	bl	800309c <HAL_TIM_PWM_Stop_DMA>
	// Give Back Semaphore
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200001b0 	.word	0x200001b0

080008bc <StartConServerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartConServerTask */
void StartConServerTask(void *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(3000);
 80008c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008c8:	f004 f956 	bl	8004b78 <osDelay>
 80008cc:	e7fa      	b.n	80008c4 <StartConServerTask+0x8>

080008ce <StartCheckRGBTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCheckRGBTask */
void StartCheckRGBTask(void *argument)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCheckRGBTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(3000);
 80008d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008da:	f004 f94d 	bl	8004b78 <osDelay>
 80008de:	e7fa      	b.n	80008d6 <StartCheckRGBTask+0x8>

080008e0 <StartGetValuesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetValuesTask */
void StartGetValuesTask(void *argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetValuesTask */
	printDataOnMatrix();
 80008e8:	f7ff fdf4 	bl	80004d4 <printDataOnMatrix>
  /* Infinite loop */
  for(;;)
  {
	printDataOnMatrix();
 80008ec:	f7ff fdf2 	bl	80004d4 <printDataOnMatrix>
	//printDataOnMatrix();
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
    osDelay(3000);
 80008f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008f4:	f004 f940 	bl	8004b78 <osDelay>
	printDataOnMatrix();
 80008f8:	e7f8      	b.n	80008ec <StartGetValuesTask+0xc>
	...

080008fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d101      	bne.n	8000912 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090e:	f000 fa2d 	bl	8000d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40014400 	.word	0x40014400

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_MspInit+0x4c>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6613      	str	r3, [r2, #96]	; 0x60
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_MspInit+0x4c>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_MspInit+0x4c>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6593      	str	r3, [r2, #88]	; 0x58
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	210f      	movs	r1, #15
 8000966:	f06f 0001 	mvn.w	r0, #1
 800096a:	f000 fad7 	bl	8000f1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <HAL_TIM_PWM_MspInit+0xa8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d145      	bne.n	8000a1a <HAL_TIM_PWM_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <HAL_TIM_PWM_MspInit+0xac>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	4a25      	ldr	r2, [pc, #148]	; (8000a28 <HAL_TIM_PWM_MspInit+0xac>)
 8000994:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000998:	6613      	str	r3, [r2, #96]	; 0x60
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <HAL_TIM_PWM_MspInit+0xac>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009a8:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb4>)
 80009aa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009ae:	2207      	movs	r2, #7
 80009b0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009b4:	2210      	movs	r2, #16
 80009b6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ca:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80009de:	4813      	ldr	r0, [pc, #76]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009e0:	f000 fac6 	bl	8000f70 <HAL_DMA_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 80009ea:	f7ff ff99 	bl	8000920 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <HAL_TIM_PWM_MspInit+0xb0>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	210f      	movs	r1, #15
 80009fe:	2019      	movs	r0, #25
 8000a00:	f000 fa8c 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a04:	2019      	movs	r0, #25
 8000a06:	f000 faa5 	bl	8000f54 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	201b      	movs	r0, #27
 8000a10:	f000 fa84 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a14:	201b      	movs	r0, #27
 8000a16:	f000 fa9d 	bl	8000f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40012c00 	.word	0x40012c00
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	200001fc 	.word	0x200001fc
 8000a30:	4002001c 	.word	0x4002001c

08000a34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_TIM_MspPostInit+0x68>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d11d      	bne.n	8000a92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_TIM_MspPostInit+0x6c>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <HAL_TIM_MspPostInit+0x6c>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_TIM_MspPostInit+0x6c>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f000 fca7 	bl	80013e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40012c00 	.word	0x40012c00
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09e      	sub	sp, #120	; 0x78
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2254      	movs	r2, #84	; 0x54
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f006 fe0b 	bl	80076e0 <memset>
  if(huart->Instance==USART2)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <HAL_UART_MspInit+0xcc>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d148      	bne.n	8000b66 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fcdd 	bl	80024a0 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aec:	f7ff ff18 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_UART_MspInit+0xd0>)
 8000af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af4:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <HAL_UART_MspInit+0xd0>)
 8000af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afa:	6593      	str	r3, [r2, #88]	; 0x58
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <HAL_UART_MspInit+0xd0>)
 8000afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_UART_MspInit+0xd0>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0xd0>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0xd0>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b20:	2304      	movs	r3, #4
 8000b22:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b30:	2307      	movs	r3, #7
 8000b32:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f000 fc4f 	bl	80013e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b54:	2303      	movs	r3, #3
 8000b56:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f000 fc3d 	bl	80013e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3778      	adds	r7, #120	; 0x78
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <HAL_InitTick+0xc8>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	4a2d      	ldr	r2, [pc, #180]	; (8000c40 <HAL_InitTick+0xc8>)
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	6613      	str	r3, [r2, #96]	; 0x60
 8000b92:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <HAL_InitTick+0xc8>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b9e:	f107 020c 	add.w	r2, r7, #12
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 fbe7 	bl	800237c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bae:	f001 fbcf 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 8000bb2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <HAL_InitTick+0xcc>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0c9b      	lsrs	r3, r3, #18
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <HAL_InitTick+0xd0>)
 8000bc4:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <HAL_InitTick+0xd4>)
 8000bc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <HAL_InitTick+0xd0>)
 8000bca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bce:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <HAL_InitTick+0xd0>)
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_InitTick+0xd0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_InitTick+0xd0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_InitTick+0xd0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8000be8:	4817      	ldr	r0, [pc, #92]	; (8000c48 <HAL_InitTick+0xd0>)
 8000bea:	f001 ff51 	bl	8002a90 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d11b      	bne.n	8000c34 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000bfc:	4812      	ldr	r0, [pc, #72]	; (8000c48 <HAL_InitTick+0xd0>)
 8000bfe:	f001 ffa9 	bl	8002b54 <HAL_TIM_Base_Start_IT>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d111      	bne.n	8000c34 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c10:	2019      	movs	r0, #25
 8000c12:	f000 f99f 	bl	8000f54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d808      	bhi.n	8000c2e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2019      	movs	r0, #25
 8000c22:	f000 f97b 	bl	8000f1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_InitTick+0xd8>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e002      	b.n	8000c34 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3730      	adds	r7, #48	; 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000
 8000c44:	431bde83 	.word	0x431bde83
 8000c48:	200002d8 	.word	0x200002d8
 8000c4c:	40014400 	.word	0x40014400
 8000c50:	20000184 	.word	0x20000184

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <DMA1_Channel2_IRQHandler+0x10>)
 8000c86:	f000 facc 	bl	8001222 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200001fc 	.word	0x200001fc

08000c94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000c9a:	f002 fae7 	bl	800326c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000c9e:	4803      	ldr	r0, [pc, #12]	; (8000cac <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000ca0:	f002 fae4 	bl	800326c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200001b0 	.word	0x200001b0
 8000cac:	200002d8 	.word	0x200002d8

08000cb0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <TIM1_CC_IRQHandler+0x10>)
 8000cb6:	f002 fad9 	bl	800326c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200001b0 	.word	0x200001b0

08000cc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cec:	f7ff ffea 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	; (8000d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <LoopForever+0xe>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	; (8000d34 <LoopForever+0x16>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d16:	f006 fcb1 	bl	800767c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d1a:	f7ff fbf1 	bl	8000500 <main>

08000d1e <LoopForever>:

LoopForever:
    b LoopForever
 8000d1e:	e7fe      	b.n	8000d1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000d2c:	0800783c 	.word	0x0800783c
  ldr r2, =_sbss
 8000d30:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000d34:	20001c30 	.word	0x20001c30

08000d38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC1_IRQHandler>

08000d3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f8de 	bl	8000f06 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f7ff ff14 	bl	8000b78 <HAL_InitTick>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	e001      	b.n	8000d60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d5c:	f7ff fde6 	bl	800092c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d60:	79fb      	ldrb	r3, [r7, #7]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000188 	.word	0x20000188
 8000d90:	20000324 	.word	0x20000324

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000324 	.word	0x20000324

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff4c 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2e:	f7ff ff61 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	6978      	ldr	r0, [r7, #20]
 8000f3a:	f7ff ffb1 	bl	8000ea0 <NVIC_EncodePriority>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff80 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff54 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e098      	b.n	80010b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <HAL_DMA_Init+0x150>)
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d80f      	bhi.n	8000fae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b4b      	ldr	r3, [pc, #300]	; (80010c4 <HAL_DMA_Init+0x154>)
 8000f96:	4413      	add	r3, r2
 8000f98:	4a4b      	ldr	r2, [pc, #300]	; (80010c8 <HAL_DMA_Init+0x158>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	009a      	lsls	r2, r3, #2
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a48      	ldr	r2, [pc, #288]	; (80010cc <HAL_DMA_Init+0x15c>)
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
 8000fac:	e00e      	b.n	8000fcc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b46      	ldr	r3, [pc, #280]	; (80010d0 <HAL_DMA_Init+0x160>)
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a43      	ldr	r2, [pc, #268]	; (80010c8 <HAL_DMA_Init+0x158>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	009a      	lsls	r2, r3, #2
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a42      	ldr	r2, [pc, #264]	; (80010d4 <HAL_DMA_Init+0x164>)
 8000fca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fe6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001026:	d039      	beq.n	800109c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a27      	ldr	r2, [pc, #156]	; (80010cc <HAL_DMA_Init+0x15c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d11a      	bne.n	8001068 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <HAL_DMA_Init+0x168>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f003 031c 	and.w	r3, r3, #28
 800103e:	210f      	movs	r1, #15
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	4924      	ldr	r1, [pc, #144]	; (80010d8 <HAL_DMA_Init+0x168>)
 8001048:	4013      	ands	r3, r2
 800104a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <HAL_DMA_Init+0x168>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6859      	ldr	r1, [r3, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	f003 031c 	and.w	r3, r3, #28
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	491d      	ldr	r1, [pc, #116]	; (80010d8 <HAL_DMA_Init+0x168>)
 8001062:	4313      	orrs	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
 8001066:	e019      	b.n	800109c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_DMA_Init+0x16c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	f003 031c 	and.w	r3, r3, #28
 8001074:	210f      	movs	r1, #15
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	4917      	ldr	r1, [pc, #92]	; (80010dc <HAL_DMA_Init+0x16c>)
 800107e:	4013      	ands	r3, r2
 8001080:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_DMA_Init+0x16c>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6859      	ldr	r1, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f003 031c 	and.w	r3, r3, #28
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	4911      	ldr	r1, [pc, #68]	; (80010dc <HAL_DMA_Init+0x16c>)
 8001098:	4313      	orrs	r3, r2
 800109a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40020407 	.word	0x40020407
 80010c4:	bffdfff8 	.word	0xbffdfff8
 80010c8:	cccccccd 	.word	0xcccccccd
 80010cc:	40020000 	.word	0x40020000
 80010d0:	bffdfbf8 	.word	0xbffdfbf8
 80010d4:	40020400 	.word	0x40020400
 80010d8:	400200a8 	.word	0x400200a8
 80010dc:	400204a8 	.word	0x400204a8

080010e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_DMA_Start_IT+0x20>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e04b      	b.n	8001198 <HAL_DMA_Start_IT+0xb8>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d13a      	bne.n	800118a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2202      	movs	r2, #2
 8001118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0201 	bic.w	r2, r2, #1
 8001130:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 f921 	bl	8001380 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	2b00      	cmp	r3, #0
 8001144:	d008      	beq.n	8001158 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 020e 	orr.w	r2, r2, #14
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e00f      	b.n	8001178 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0204 	bic.w	r2, r2, #4
 8001166:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 020a 	orr.w	r2, r2, #10
 8001176:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e005      	b.n	8001196 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001192:	2302      	movs	r3, #2
 8001194:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001196:	7dfb      	ldrb	r3, [r7, #23]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d005      	beq.n	80011c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2204      	movs	r2, #4
 80011bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e029      	b.n	8001218 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 020e 	bic.w	r2, r2, #14
 80011d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f003 021c 	and.w	r2, r3, #28
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	2101      	movs	r1, #1
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	4798      	blx	r3
    }
  }
  return status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f003 031c 	and.w	r3, r3, #28
 8001242:	2204      	movs	r2, #4
 8001244:	409a      	lsls	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d026      	beq.n	800129c <HAL_DMA_IRQHandler+0x7a>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d021      	beq.n	800129c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	2b00      	cmp	r3, #0
 8001264:	d107      	bne.n	8001276 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0204 	bic.w	r2, r2, #4
 8001274:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f003 021c 	and.w	r2, r3, #28
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	2104      	movs	r1, #4
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	2b00      	cmp	r3, #0
 8001290:	d071      	beq.n	8001376 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800129a:	e06c      	b.n	8001376 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	f003 031c 	and.w	r3, r3, #28
 80012a4:	2202      	movs	r2, #2
 80012a6:	409a      	lsls	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d02e      	beq.n	800130e <HAL_DMA_IRQHandler+0xec>
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d029      	beq.n	800130e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10b      	bne.n	80012e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 020a 	bic.w	r2, r2, #10
 80012d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f003 021c 	and.w	r2, r3, #28
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2102      	movs	r1, #2
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	2b00      	cmp	r3, #0
 8001302:	d038      	beq.n	8001376 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800130c:	e033      	b.n	8001376 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f003 031c 	and.w	r3, r3, #28
 8001316:	2208      	movs	r2, #8
 8001318:	409a      	lsls	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d02a      	beq.n	8001378 <HAL_DMA_IRQHandler+0x156>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	d025      	beq.n	8001378 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 020e 	bic.w	r2, r2, #14
 800133a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	f003 021c 	and.w	r2, r3, #28
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2101      	movs	r1, #1
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136a:	2b00      	cmp	r3, #0
 800136c:	d004      	beq.n	8001378 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001376:	bf00      	nop
 8001378:	bf00      	nop
}
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f003 021c 	and.w	r2, r3, #28
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	d108      	bne.n	80013c4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013c2:	e007      	b.n	80013d4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ee:	e148      	b.n	8001682 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 813a 	beq.w	800167c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d005      	beq.n	8001420 <HAL_GPIO_Init+0x40>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d130      	bne.n	8001482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001456:	2201      	movs	r2, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	f003 0201 	and.w	r2, r3, #1
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b03      	cmp	r3, #3
 800148c:	d017      	beq.n	80014be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d123      	bne.n	8001512 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	220f      	movs	r2, #15
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	6939      	ldr	r1, [r7, #16]
 800150e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0203 	and.w	r2, r3, #3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 8094 	beq.w	800167c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001554:	4b52      	ldr	r3, [pc, #328]	; (80016a0 <HAL_GPIO_Init+0x2c0>)
 8001556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001558:	4a51      	ldr	r2, [pc, #324]	; (80016a0 <HAL_GPIO_Init+0x2c0>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6613      	str	r3, [r2, #96]	; 0x60
 8001560:	4b4f      	ldr	r3, [pc, #316]	; (80016a0 <HAL_GPIO_Init+0x2c0>)
 8001562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800156c:	4a4d      	ldr	r2, [pc, #308]	; (80016a4 <HAL_GPIO_Init+0x2c4>)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	220f      	movs	r2, #15
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001596:	d00d      	beq.n	80015b4 <HAL_GPIO_Init+0x1d4>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a43      	ldr	r2, [pc, #268]	; (80016a8 <HAL_GPIO_Init+0x2c8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d007      	beq.n	80015b0 <HAL_GPIO_Init+0x1d0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a42      	ldr	r2, [pc, #264]	; (80016ac <HAL_GPIO_Init+0x2cc>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d101      	bne.n	80015ac <HAL_GPIO_Init+0x1cc>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e004      	b.n	80015b6 <HAL_GPIO_Init+0x1d6>
 80015ac:	2307      	movs	r3, #7
 80015ae:	e002      	b.n	80015b6 <HAL_GPIO_Init+0x1d6>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <HAL_GPIO_Init+0x1d6>
 80015b4:	2300      	movs	r3, #0
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	f002 0203 	and.w	r2, r2, #3
 80015bc:	0092      	lsls	r2, r2, #2
 80015be:	4093      	lsls	r3, r2
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c6:	4937      	ldr	r1, [pc, #220]	; (80016a4 <HAL_GPIO_Init+0x2c4>)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	3302      	adds	r3, #2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015f8:	4a2d      	ldr	r2, [pc, #180]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001622:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800164c:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	f47f aeaf 	bne.w	80013f0 <HAL_GPIO_Init+0x10>
  }
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000
 80016a8:	48000400 	.word	0x48000400
 80016ac:	48000800 	.word	0x48000800
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40007000 	.word	0x40007000

08001704 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <HAL_PWREx_GetVoltageRange+0x18>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40007000 	.word	0x40007000

08001720 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172e:	d130      	bne.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800173c:	d038      	beq.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001748:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2232      	movs	r2, #50	; 0x32
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0c9b      	lsrs	r3, r3, #18
 8001760:	3301      	adds	r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001764:	e002      	b.n	800176c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3b01      	subs	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001778:	d102      	bne.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x60>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f2      	bne.n	8001766 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178c:	d110      	bne.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e00f      	b.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800179a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179e:	d007      	beq.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a8:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40007000 	.word	0x40007000
 80017c4:	20000180 	.word	0x20000180
 80017c8:	431bde83 	.word	0x431bde83

080017cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	f000 bc02 	b.w	8001fe4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e0:	4b96      	ldr	r3, [pc, #600]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ea:	4b94      	ldr	r3, [pc, #592]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80e4 	beq.w	80019ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d007      	beq.n	8001818 <HAL_RCC_OscConfig+0x4c>
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b0c      	cmp	r3, #12
 800180c:	f040 808b 	bne.w	8001926 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b01      	cmp	r3, #1
 8001814:	f040 8087 	bne.w	8001926 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001818:	4b88      	ldr	r3, [pc, #544]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_OscConfig+0x64>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e3d9      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	4b81      	ldr	r3, [pc, #516]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_RCC_OscConfig+0x7e>
 8001840:	4b7e      	ldr	r3, [pc, #504]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001848:	e005      	b.n	8001856 <HAL_RCC_OscConfig+0x8a>
 800184a:	4b7c      	ldr	r3, [pc, #496]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 800184c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001856:	4293      	cmp	r3, r2
 8001858:	d223      	bcs.n	80018a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 fdbe 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e3ba      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186e:	4b73      	ldr	r3, [pc, #460]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a72      	ldr	r2, [pc, #456]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b70      	ldr	r3, [pc, #448]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	496d      	ldr	r1, [pc, #436]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188c:	4b6b      	ldr	r3, [pc, #428]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	4968      	ldr	r1, [pc, #416]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
 80018a0:	e025      	b.n	80018ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a2:	4b66      	ldr	r3, [pc, #408]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a65      	ldr	r2, [pc, #404]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b63      	ldr	r3, [pc, #396]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4960      	ldr	r1, [pc, #384]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018c0:	4b5e      	ldr	r3, [pc, #376]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	495b      	ldr	r1, [pc, #364]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d109      	bne.n	80018ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fd7e 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e37a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ee:	f000 fc81 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	4950      	ldr	r1, [pc, #320]	; (8001a40 <HAL_RCC_OscConfig+0x274>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	fa22 f303 	lsr.w	r3, r2, r3
 800190a:	4a4e      	ldr	r2, [pc, #312]	; (8001a44 <HAL_RCC_OscConfig+0x278>)
 800190c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800190e:	4b4e      	ldr	r3, [pc, #312]	; (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f930 	bl	8000b78 <HAL_InitTick>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d052      	beq.n	80019c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	e35e      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d032      	beq.n	8001994 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800192e:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a42      	ldr	r2, [pc, #264]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800193a:	f7ff fa2b 	bl	8000d94 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001942:	f7ff fa27 	bl	8000d94 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e347      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4930      	ldr	r1, [pc, #192]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	492b      	ldr	r1, [pc, #172]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
 8001992:	e01a      	b.n	80019ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a28      	ldr	r2, [pc, #160]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019a0:	f7ff f9f8 	bl	8000d94 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019a8:	f7ff f9f4 	bl	8000d94 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e314      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x1dc>
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d073      	beq.n	8001abe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_OscConfig+0x21c>
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d10e      	bne.n	8001a00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d10b      	bne.n	8001a00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d063      	beq.n	8001abc <HAL_RCC_OscConfig+0x2f0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d15f      	bne.n	8001abc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e2f1      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d106      	bne.n	8001a18 <HAL_RCC_OscConfig+0x24c>
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e025      	b.n	8001a64 <HAL_RCC_OscConfig+0x298>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d114      	bne.n	8001a4c <HAL_RCC_OscConfig+0x280>
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a02      	ldr	r2, [pc, #8]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e013      	b.n	8001a64 <HAL_RCC_OscConfig+0x298>
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	080077e4 	.word	0x080077e4
 8001a44:	20000180 	.word	0x20000180
 8001a48:	20000184 	.word	0x20000184
 8001a4c:	4ba0      	ldr	r3, [pc, #640]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a9f      	ldr	r2, [pc, #636]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b9d      	ldr	r3, [pc, #628]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a9c      	ldr	r2, [pc, #624]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f992 	bl	8000d94 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff f98e 	bl	8000d94 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e2ae      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a86:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x2a8>
 8001a92:	e014      	b.n	8001abe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f97e 	bl	8000d94 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff f97a 	bl	8000d94 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e29a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aae:	4b88      	ldr	r3, [pc, #544]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2d0>
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d060      	beq.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_OscConfig+0x310>
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d119      	bne.n	8001b0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d116      	bne.n	8001b0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001adc:	4b7c      	ldr	r3, [pc, #496]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_OscConfig+0x328>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e277      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	061b      	lsls	r3, r3, #24
 8001b02:	4973      	ldr	r1, [pc, #460]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b08:	e040      	b.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d023      	beq.n	8001b5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f939 	bl	8000d94 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff f935 	bl	8000d94 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e255      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b38:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b62      	ldr	r3, [pc, #392]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	495f      	ldr	r1, [pc, #380]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
 8001b58:	e018      	b.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a5c      	ldr	r2, [pc, #368]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7ff f915 	bl	8000d94 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7ff f911 	bl	8000d94 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e231      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d03c      	beq.n	8001c12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01c      	beq.n	8001bda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba0:	4b4b      	ldr	r3, [pc, #300]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba6:	4a4a      	ldr	r2, [pc, #296]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f8f0 	bl	8000d94 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff f8ec 	bl	8000d94 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e20c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0ef      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x3ec>
 8001bd8:	e01b      	b.n	8001c12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be0:	4a3b      	ldr	r2, [pc, #236]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff f8d3 	bl	8000d94 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f8cf 	bl	8000d94 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e1ef      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ef      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80a6 	beq.w	8001d6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10d      	bne.n	8001c4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_RCC_OscConfig+0x508>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d118      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <HAL_RCC_OscConfig+0x508>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_RCC_OscConfig+0x508>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c64:	f7ff f896 	bl	8000d94 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6c:	f7ff f892 	bl	8000d94 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e1b2      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_RCC_OscConfig+0x508>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4d8>
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e029      	b.n	8001cf8 <HAL_RCC_OscConfig+0x52c>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d115      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x50c>
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ccc:	e014      	b.n	8001cf8 <HAL_RCC_OscConfig+0x52c>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	4b9a      	ldr	r3, [pc, #616]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cde:	4a99      	ldr	r2, [pc, #612]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce8:	4b96      	ldr	r3, [pc, #600]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cee:	4a95      	ldr	r2, [pc, #596]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d016      	beq.n	8001d2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7ff f848 	bl	8000d94 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7ff f844 	bl	8000d94 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e162      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1e:	4b89      	ldr	r3, [pc, #548]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ed      	beq.n	8001d08 <HAL_RCC_OscConfig+0x53c>
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2e:	f7ff f831 	bl	8000d94 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7ff f82d 	bl	8000d94 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e14b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d4c:	4b7d      	ldr	r3, [pc, #500]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1ed      	bne.n	8001d36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d5a:	7ffb      	ldrb	r3, [r7, #31]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d60:	4b78      	ldr	r3, [pc, #480]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	4a77      	ldr	r2, [pc, #476]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d03c      	beq.n	8001df2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01c      	beq.n	8001dba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d80:	4b70      	ldr	r3, [pc, #448]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d86:	4a6f      	ldr	r2, [pc, #444]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7ff f800 	bl	8000d94 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d98:	f7fe fffc 	bl	8000d94 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e11c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001daa:	4b66      	ldr	r3, [pc, #408]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ef      	beq.n	8001d98 <HAL_RCC_OscConfig+0x5cc>
 8001db8:	e01b      	b.n	8001df2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dba:	4b62      	ldr	r3, [pc, #392]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dc0:	4a60      	ldr	r2, [pc, #384]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dca:	f7fe ffe3 	bl	8000d94 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dd2:	f7fe ffdf 	bl	8000d94 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0ff      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001de4:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001de6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ef      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80f3 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	f040 80c9 	bne.w	8001f98 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e06:	4b4f      	ldr	r3, [pc, #316]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 0203 	and.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d12c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	3b01      	subs	r3, #1
 8001e26:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d123      	bne.n	8001e74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d11b      	bne.n	8001e74 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e46:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d113      	bne.n	8001e74 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d109      	bne.n	8001e74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d06b      	beq.n	8001f4c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d062      	beq.n	8001f40 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e7a:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0ac      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001e90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e96:	f7fe ff7d 	bl	8000d94 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7fe ff79 	bl	8000d94 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e099      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	4311      	orrs	r1, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ed6:	0212      	lsls	r2, r2, #8
 8001ed8:	4311      	orrs	r1, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ede:	0852      	lsrs	r2, r2, #1
 8001ee0:	3a01      	subs	r2, #1
 8001ee2:	0552      	lsls	r2, r2, #21
 8001ee4:	4311      	orrs	r1, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eea:	0852      	lsrs	r2, r2, #1
 8001eec:	3a01      	subs	r2, #1
 8001eee:	0652      	lsls	r2, r2, #25
 8001ef0:	4311      	orrs	r1, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ef6:	06d2      	lsls	r2, r2, #27
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	4912      	ldr	r1, [pc, #72]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f18:	f7fe ff3c 	bl	8000d94 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe ff38 	bl	8000d94 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e058      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f3e:	e050      	b.n	8001fe2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e04f      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
 8001f44:	40021000 	.word	0x40021000
 8001f48:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_OscConfig+0x820>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d144      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCC_OscConfig+0x820>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_RCC_OscConfig+0x820>)
 8001f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_RCC_OscConfig+0x820>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4a20      	ldr	r2, [pc, #128]	; (8001fec <HAL_RCC_OscConfig+0x820>)
 8001f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f70:	f7fe ff10 	bl	8000d94 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe ff0c 	bl	8000d94 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e02c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_RCC_OscConfig+0x820>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x7ac>
 8001f96:	e024      	b.n	8001fe2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d01f      	beq.n	8001fde <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_RCC_OscConfig+0x820>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <HAL_RCC_OscConfig+0x820>)
 8001fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7fe fef3 	bl	8000d94 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7fe feef 	bl	8000d94 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e00f      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_OscConfig+0x820>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_RCC_OscConfig+0x820>)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	4905      	ldr	r1, [pc, #20]	; (8001fec <HAL_RCC_OscConfig+0x820>)
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_RCC_OscConfig+0x824>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
 8001fdc:	e001      	b.n	8001fe2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	feeefffc 	.word	0xfeeefffc

08001ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0e7      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b75      	ldr	r3, [pc, #468]	; (80021e0 <HAL_RCC_ClockConfig+0x1ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d910      	bls.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4970      	ldr	r1, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b6e      	ldr	r3, [pc, #440]	; (80021e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0cf      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d010      	beq.n	8002066 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4b66      	ldr	r3, [pc, #408]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002050:	429a      	cmp	r2, r3
 8002052:	d908      	bls.n	8002066 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4960      	ldr	r1, [pc, #384]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d04c      	beq.n	800210c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207a:	4b5a      	ldr	r3, [pc, #360]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d121      	bne.n	80020ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0a6      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002092:	4b54      	ldr	r3, [pc, #336]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d115      	bne.n	80020ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e09a      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020aa:	4b4e      	ldr	r3, [pc, #312]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e08e      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ba:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e086      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	4b46      	ldr	r3, [pc, #280]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f023 0203 	bic.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4943      	ldr	r1, [pc, #268]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020dc:	f7fe fe5a 	bl	8000d94 <HAL_GetTick>
 80020e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e4:	f7fe fe56 	bl	8000d94 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e06e      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 020c 	and.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	429a      	cmp	r2, r3
 800210a:	d1eb      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d010      	beq.n	800213a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002124:	429a      	cmp	r2, r3
 8002126:	d208      	bcs.n	800213a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	492b      	ldr	r1, [pc, #172]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_RCC_ClockConfig+0x1ec>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d210      	bcs.n	800216a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_RCC_ClockConfig+0x1ec>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 0207 	bic.w	r2, r3, #7
 8002150:	4923      	ldr	r1, [pc, #140]	; (80021e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <HAL_RCC_ClockConfig+0x1ec>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e036      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4918      	ldr	r1, [pc, #96]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4910      	ldr	r1, [pc, #64]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a8:	f000 f824 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_RCC_ClockConfig+0x1f0>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	490b      	ldr	r1, [pc, #44]	; (80021e8 <HAL_RCC_ClockConfig+0x1f4>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
 80021c4:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_RCC_ClockConfig+0x1f8>)
 80021c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021c8:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1fc>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe fcd3 	bl	8000b78 <HAL_InitTick>
 80021d2:	4603      	mov	r3, r0
 80021d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80021d6:	7afb      	ldrb	r3, [r7, #11]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40022000 	.word	0x40022000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	080077e4 	.word	0x080077e4
 80021ec:	20000180 	.word	0x20000180
 80021f0:	20000184 	.word	0x20000184

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800220c:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x34>
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d121      	bne.n	8002266 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d11e      	bne.n	8002266 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002228:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d107      	bne.n	8002244 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002234:	4b31      	ldr	r3, [pc, #196]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e005      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002250:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002258:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10d      	bne.n	800227c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002264:	e00a      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b04      	cmp	r3, #4
 800226a:	d102      	bne.n	8002272 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800226c:	4b25      	ldr	r3, [pc, #148]	; (8002304 <HAL_RCC_GetSysClockFreq+0x110>)
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	e004      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d101      	bne.n	800227c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002278:	4b23      	ldr	r3, [pc, #140]	; (8002308 <HAL_RCC_GetSysClockFreq+0x114>)
 800227a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d134      	bne.n	80022ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002282:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d003      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0xa6>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d003      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0xac>
 8002298:	e005      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_RCC_GetSysClockFreq+0x110>)
 800229c:	617b      	str	r3, [r7, #20]
      break;
 800229e:	e005      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_RCC_GetSysClockFreq+0x114>)
 80022a2:	617b      	str	r3, [r7, #20]
      break;
 80022a4:	e002      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	617b      	str	r3, [r7, #20]
      break;
 80022aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	3301      	adds	r3, #1
 80022b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	fb03 f202 	mul.w	r2, r3, r2
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	0e5b      	lsrs	r3, r3, #25
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	3301      	adds	r3, #1
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022ec:	69bb      	ldr	r3, [r7, #24]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	080077fc 	.word	0x080077fc
 8002304:	00f42400 	.word	0x00f42400
 8002308:	007a1200 	.word	0x007a1200

0800230c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_GetHCLKFreq+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000180 	.word	0x20000180

08002324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002328:	f7ff fff0 	bl	800230c <HAL_RCC_GetHCLKFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4904      	ldr	r1, [pc, #16]	; (800234c <HAL_RCC_GetPCLK1Freq+0x28>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	080077f4 	.word	0x080077f4

08002350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002354:	f7ff ffda 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0adb      	lsrs	r3, r3, #11
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4904      	ldr	r1, [pc, #16]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	080077f4 	.word	0x080077f4

0800237c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	220f      	movs	r2, #15
 800238a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	08db      	lsrs	r3, r3, #3
 80023b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_RCC_GetClockConfig+0x60>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0207 	and.w	r2, r3, #7
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40022000 	.word	0x40022000

080023e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023f8:	f7ff f984 	bl	8001704 <HAL_PWREx_GetVoltageRange>
 80023fc:	6178      	str	r0, [r7, #20]
 80023fe:	e014      	b.n	800242a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a24      	ldr	r2, [pc, #144]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b22      	ldr	r3, [pc, #136]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002418:	f7ff f974 	bl	8001704 <HAL_PWREx_GetVoltageRange>
 800241c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002430:	d10b      	bne.n	800244a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b80      	cmp	r3, #128	; 0x80
 8002436:	d919      	bls.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2ba0      	cmp	r3, #160	; 0xa0
 800243c:	d902      	bls.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800243e:	2302      	movs	r3, #2
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e013      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002444:	2301      	movs	r3, #1
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	e010      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b80      	cmp	r3, #128	; 0x80
 800244e:	d902      	bls.n	8002456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002450:	2303      	movs	r3, #3
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e00a      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d102      	bne.n	8002462 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800245c:	2302      	movs	r3, #2
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	e004      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b70      	cmp	r3, #112	; 0x70
 8002466:	d101      	bne.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002468:	2301      	movs	r3, #1
 800246a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 0207 	bic.w	r2, r3, #7
 8002474:	4909      	ldr	r1, [pc, #36]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	40022000 	.word	0x40022000

080024a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024a8:	2300      	movs	r3, #0
 80024aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024ac:	2300      	movs	r3, #0
 80024ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d031      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024c4:	d01a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80024c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024ca:	d814      	bhi.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d009      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024d4:	d10f      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80024d6:	4b5d      	ldr	r3, [pc, #372]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	4a5c      	ldr	r2, [pc, #368]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024e2:	e00c      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f9de 	bl	80028ac <RCCEx_PLLSAI1_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024f4:	e003      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	74fb      	strb	r3, [r7, #19]
      break;
 80024fa:	e000      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80024fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10b      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002504:	4b51      	ldr	r3, [pc, #324]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	494e      	ldr	r1, [pc, #312]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800251a:	e001      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 809e 	beq.w	800266a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002532:	4b46      	ldr	r3, [pc, #280]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002542:	2300      	movs	r3, #0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00d      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	4b40      	ldr	r3, [pc, #256]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	4a3f      	ldr	r2, [pc, #252]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002552:	6593      	str	r3, [r2, #88]	; 0x58
 8002554:	4b3d      	ldr	r3, [pc, #244]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002560:	2301      	movs	r3, #1
 8002562:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002564:	4b3a      	ldr	r3, [pc, #232]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a39      	ldr	r2, [pc, #228]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800256a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002570:	f7fe fc10 	bl	8000d94 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002576:	e009      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002578:	f7fe fc0c 	bl	8000d94 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d902      	bls.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	74fb      	strb	r3, [r7, #19]
        break;
 800258a:	e005      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800258c:	4b30      	ldr	r3, [pc, #192]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ef      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d15a      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01e      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d019      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025c6:	4b21      	ldr	r3, [pc, #132]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	4a1b      	ldr	r2, [pc, #108]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025e6:	4a19      	ldr	r2, [pc, #100]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d016      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fbcc 	bl	8000d94 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fe:	e00b      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002600:	f7fe fbc8 	bl	8000d94 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d902      	bls.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	74fb      	strb	r3, [r7, #19]
            break;
 8002616:	e006      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0ec      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262c:	4b07      	ldr	r3, [pc, #28]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263a:	4904      	ldr	r1, [pc, #16]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002642:	e009      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	74bb      	strb	r3, [r7, #18]
 8002648:	e006      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002658:	7c7b      	ldrb	r3, [r7, #17]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d105      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265e:	4b8a      	ldr	r3, [pc, #552]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a89      	ldr	r2, [pc, #548]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002676:	4b84      	ldr	r3, [pc, #528]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	f023 0203 	bic.w	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4980      	ldr	r1, [pc, #512]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002698:	4b7b      	ldr	r3, [pc, #492]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	f023 020c 	bic.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	4978      	ldr	r1, [pc, #480]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ba:	4b73      	ldr	r3, [pc, #460]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	496f      	ldr	r1, [pc, #444]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026dc:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	4967      	ldr	r1, [pc, #412]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026fe:	4b62      	ldr	r3, [pc, #392]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	495e      	ldr	r1, [pc, #376]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002720:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	4956      	ldr	r1, [pc, #344]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002742:	4b51      	ldr	r3, [pc, #324]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	494d      	ldr	r1, [pc, #308]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d028      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002764:	4b48      	ldr	r3, [pc, #288]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4945      	ldr	r1, [pc, #276]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d106      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b40      	ldr	r3, [pc, #256]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a3f      	ldr	r2, [pc, #252]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
 8002790:	e011      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800279a:	d10c      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3304      	adds	r3, #4
 80027a0:	2101      	movs	r1, #1
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f882 	bl	80028ac <RCCEx_PLLSAI1_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80027b2:	7cfb      	ldrb	r3, [r7, #19]
 80027b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d028      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	492d      	ldr	r1, [pc, #180]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e0:	d106      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4a28      	ldr	r2, [pc, #160]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ec:	60d3      	str	r3, [r2, #12]
 80027ee:	e011      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f8:	d10c      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2101      	movs	r1, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f853 	bl	80028ac <RCCEx_PLLSAI1_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01c      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282e:	4916      	ldr	r1, [pc, #88]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800283e:	d10c      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	2102      	movs	r1, #2
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f830 	bl	80028ac <RCCEx_PLLSAI1_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002874:	4904      	ldr	r1, [pc, #16]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800287c:	7cbb      	ldrb	r3, [r7, #18]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000

0800288c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000

080028ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ba:	4b74      	ldr	r3, [pc, #464]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d018      	beq.n	80028f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028c6:	4b71      	ldr	r3, [pc, #452]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f003 0203 	and.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d10d      	bne.n	80028f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
       ||
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028de:	4b6b      	ldr	r3, [pc, #428]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
       ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d047      	beq.n	8002982 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	e044      	b.n	8002982 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d018      	beq.n	8002932 <RCCEx_PLLSAI1_Config+0x86>
 8002900:	2b03      	cmp	r3, #3
 8002902:	d825      	bhi.n	8002950 <RCCEx_PLLSAI1_Config+0xa4>
 8002904:	2b01      	cmp	r3, #1
 8002906:	d002      	beq.n	800290e <RCCEx_PLLSAI1_Config+0x62>
 8002908:	2b02      	cmp	r3, #2
 800290a:	d009      	beq.n	8002920 <RCCEx_PLLSAI1_Config+0x74>
 800290c:	e020      	b.n	8002950 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800290e:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d11d      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291e:	e01a      	b.n	8002956 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002920:	4b5a      	ldr	r3, [pc, #360]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d116      	bne.n	800295a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002930:	e013      	b.n	800295a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002932:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800293e:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800294e:	e006      	b.n	800295e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
      break;
 8002954:	e004      	b.n	8002960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002956:	bf00      	nop
 8002958:	e002      	b.n	8002960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800295a:	bf00      	nop
 800295c:	e000      	b.n	8002960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800295e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10d      	bne.n	8002982 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002966:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6819      	ldr	r1, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	430b      	orrs	r3, r1
 800297c:	4943      	ldr	r1, [pc, #268]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 800297e:	4313      	orrs	r3, r2
 8002980:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d17c      	bne.n	8002a82 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002988:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a3f      	ldr	r2, [pc, #252]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 800298e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002994:	f7fe f9fe 	bl	8000d94 <HAL_GetTick>
 8002998:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800299a:	e009      	b.n	80029b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800299c:	f7fe f9fa 	bl	8000d94 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d902      	bls.n	80029b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	73fb      	strb	r3, [r7, #15]
        break;
 80029ae:	e005      	b.n	80029bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029b0:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ef      	bne.n	800299c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d15f      	bne.n	8002a82 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d110      	bne.n	80029ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c8:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80029d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6892      	ldr	r2, [r2, #8]
 80029d8:	0211      	lsls	r1, r2, #8
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68d2      	ldr	r2, [r2, #12]
 80029de:	06d2      	lsls	r2, r2, #27
 80029e0:	430a      	orrs	r2, r1
 80029e2:	492a      	ldr	r1, [pc, #168]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	610b      	str	r3, [r1, #16]
 80029e8:	e027      	b.n	8002a3a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d112      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f0:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6892      	ldr	r2, [r2, #8]
 8002a00:	0211      	lsls	r1, r2, #8
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6912      	ldr	r2, [r2, #16]
 8002a06:	0852      	lsrs	r2, r2, #1
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	0552      	lsls	r2, r2, #21
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	491f      	ldr	r1, [pc, #124]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	610b      	str	r3, [r1, #16]
 8002a14:	e011      	b.n	8002a3a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a16:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6892      	ldr	r2, [r2, #8]
 8002a26:	0211      	lsls	r1, r2, #8
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6952      	ldr	r2, [r2, #20]
 8002a2c:	0852      	lsrs	r2, r2, #1
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	0652      	lsls	r2, r2, #25
 8002a32:	430a      	orrs	r2, r1
 8002a34:	4915      	ldr	r1, [pc, #84]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a3a:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe f9a5 	bl	8000d94 <HAL_GetTick>
 8002a4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a4c:	e009      	b.n	8002a62 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a4e:	f7fe f9a1 	bl	8000d94 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d902      	bls.n	8002a62 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	73fb      	strb	r3, [r7, #15]
          break;
 8002a60:	e005      	b.n	8002a6e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0ef      	beq.n	8002a4e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d106      	bne.n	8002a82 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e049      	b.n	8002b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f841 	bl	8002b3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f000 ff04 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d001      	beq.n	8002b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e03b      	b.n	8002be4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_TIM_Base_Start_IT+0x4e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b96:	d004      	beq.n	8002ba2 <HAL_TIM_Base_Start_IT+0x4e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d115      	bne.n	8002bce <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <HAL_TIM_Base_Start_IT+0xa4>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b06      	cmp	r3, #6
 8002bb2:	d015      	beq.n	8002be0 <HAL_TIM_Base_Start_IT+0x8c>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bba:	d011      	beq.n	8002be0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bcc:	e008      	b.n	8002be0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e000      	b.n	8002be2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40014000 	.word	0x40014000
 8002bf8:	00010007 	.word	0x00010007

08002bfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e049      	b.n	8002ca2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fd feaa 	bl	800097c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f000 fe4e 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e03c      	b.n	8002d52 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d109      	bne.n	8002cf2 <HAL_TIM_PWM_Start_DMA+0x46>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	e02f      	b.n	8002d52 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d109      	bne.n	8002d0c <HAL_TIM_PWM_Start_DMA+0x60>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	bf0c      	ite	eq
 8002d04:	2301      	moveq	r3, #1
 8002d06:	2300      	movne	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e022      	b.n	8002d52 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	d109      	bne.n	8002d26 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	e015      	b.n	8002d52 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d109      	bne.n	8002d40 <HAL_TIM_PWM_Start_DMA+0x94>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	e008      	b.n	8002d52 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
 8002d58:	e18d      	b.n	8003076 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e03c      	b.n	8002dee <HAL_TIM_PWM_Start_DMA+0x142>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d109      	bne.n	8002d8e <HAL_TIM_PWM_Start_DMA+0xe2>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	bf0c      	ite	eq
 8002d86:	2301      	moveq	r3, #1
 8002d88:	2300      	movne	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	e02f      	b.n	8002dee <HAL_TIM_PWM_Start_DMA+0x142>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d109      	bne.n	8002da8 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e022      	b.n	8002dee <HAL_TIM_PWM_Start_DMA+0x142>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d109      	bne.n	8002dc2 <HAL_TIM_PWM_Start_DMA+0x116>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	e015      	b.n	8002dee <HAL_TIM_PWM_Start_DMA+0x142>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d109      	bne.n	8002ddc <HAL_TIM_PWM_Start_DMA+0x130>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e008      	b.n	8002dee <HAL_TIM_PWM_Start_DMA+0x142>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d034      	beq.n	8002e5c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_TIM_PWM_Start_DMA+0x152>
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e139      	b.n	8003076 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <HAL_TIM_PWM_Start_DMA+0x166>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e10:	e026      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_PWM_Start_DMA+0x176>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e20:	e01e      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_PWM_Start_DMA+0x186>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e30:	e016      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start_DMA+0x196>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e40:	e00e      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	e006      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e5a:	e001      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e10a      	b.n	8003076 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	f200 80ae 	bhi.w	8002fc4 <HAL_TIM_PWM_Start_DMA+0x318>
 8002e68:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002ea5 	.word	0x08002ea5
 8002e74:	08002fc5 	.word	0x08002fc5
 8002e78:	08002fc5 	.word	0x08002fc5
 8002e7c:	08002fc5 	.word	0x08002fc5
 8002e80:	08002eed 	.word	0x08002eed
 8002e84:	08002fc5 	.word	0x08002fc5
 8002e88:	08002fc5 	.word	0x08002fc5
 8002e8c:	08002fc5 	.word	0x08002fc5
 8002e90:	08002f35 	.word	0x08002f35
 8002e94:	08002fc5 	.word	0x08002fc5
 8002e98:	08002fc5 	.word	0x08002fc5
 8002e9c:	08002fc5 	.word	0x08002fc5
 8002ea0:	08002f7d 	.word	0x08002f7d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	4a75      	ldr	r2, [pc, #468]	; (8003080 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002eaa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	4a74      	ldr	r2, [pc, #464]	; (8003084 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	4a73      	ldr	r2, [pc, #460]	; (8003088 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8002eba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3334      	adds	r3, #52	; 0x34
 8002ec8:	461a      	mov	r2, r3
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	f7fe f908 	bl	80010e0 <HAL_DMA_Start_IT>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0cd      	b.n	8003076 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee8:	60da      	str	r2, [r3, #12]
      break;
 8002eea:	e06e      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	4a63      	ldr	r2, [pc, #396]	; (8003080 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	4a62      	ldr	r2, [pc, #392]	; (8003084 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	4a61      	ldr	r2, [pc, #388]	; (8003088 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8002f02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3338      	adds	r3, #56	; 0x38
 8002f10:	461a      	mov	r2, r3
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	f7fe f8e4 	bl	80010e0 <HAL_DMA_Start_IT>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0a9      	b.n	8003076 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f30:	60da      	str	r2, [r3, #12]
      break;
 8002f32:	e04a      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	4a51      	ldr	r2, [pc, #324]	; (8003080 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	4a50      	ldr	r2, [pc, #320]	; (8003084 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	4a4f      	ldr	r2, [pc, #316]	; (8003088 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8002f4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	333c      	adds	r3, #60	; 0x3c
 8002f58:	461a      	mov	r2, r3
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	f7fe f8c0 	bl	80010e0 <HAL_DMA_Start_IT>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e085      	b.n	8003076 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f78:	60da      	str	r2, [r3, #12]
      break;
 8002f7a:	e026      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	4a3f      	ldr	r2, [pc, #252]	; (8003080 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	4a3e      	ldr	r2, [pc, #248]	; (8003084 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4a3d      	ldr	r2, [pc, #244]	; (8003088 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8002f92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3340      	adds	r3, #64	; 0x40
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	f7fe f89c 	bl	80010e0 <HAL_DMA_Start_IT>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e061      	b.n	8003076 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fc0:	60da      	str	r2, [r3, #12]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d151      	bne.n	8003074 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 ff61 	bl	8003ea0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_TIM_PWM_Start_DMA+0x350>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a28      	ldr	r2, [pc, #160]	; (8003090 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_TIM_PWM_Start_DMA+0x350>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_TIM_PWM_Start_DMA+0x354>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_TIM_PWM_Start_DMA+0x356>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d009      	beq.n	8003034 <HAL_TIM_PWM_Start_DMA+0x388>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d004      	beq.n	8003034 <HAL_TIM_PWM_Start_DMA+0x388>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a18      	ldr	r2, [pc, #96]	; (8003090 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d115      	bne.n	8003060 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b06      	cmp	r3, #6
 8003044:	d015      	beq.n	8003072 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304c:	d011      	beq.n	8003072 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305e:	e008      	b.n	8003072 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	e000      	b.n	8003074 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003072:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003074:	7dfb      	ldrb	r3, [r7, #23]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	080037cb 	.word	0x080037cb
 8003084:	08003873 	.word	0x08003873
 8003088:	08003739 	.word	0x08003739
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40014000 	.word	0x40014000
 8003094:	40014400 	.word	0x40014400
 8003098:	00010007 	.word	0x00010007

0800309c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b0c      	cmp	r3, #12
 80030ae:	d855      	bhi.n	800315c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030ed 	.word	0x080030ed
 80030bc:	0800315d 	.word	0x0800315d
 80030c0:	0800315d 	.word	0x0800315d
 80030c4:	0800315d 	.word	0x0800315d
 80030c8:	08003109 	.word	0x08003109
 80030cc:	0800315d 	.word	0x0800315d
 80030d0:	0800315d 	.word	0x0800315d
 80030d4:	0800315d 	.word	0x0800315d
 80030d8:	08003125 	.word	0x08003125
 80030dc:	0800315d 	.word	0x0800315d
 80030e0:	0800315d 	.word	0x0800315d
 80030e4:	0800315d 	.word	0x0800315d
 80030e8:	08003141 	.word	0x08003141
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe f84d 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8003106:	e02c      	b.n	8003162 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003116:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe f83f 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 8003122:	e01e      	b.n	8003162 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003132:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe f831 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 800313e:	e010      	b.n	8003162 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800314e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe f823 	bl	80011a0 <HAL_DMA_Abort_IT>
      break;
 800315a:	e002      	b.n	8003162 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	bf00      	nop
  }

  if (status == HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d176      	bne.n	8003256 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	6839      	ldr	r1, [r7, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fe95 	bl	8003ea0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a39      	ldr	r2, [pc, #228]	; (8003260 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a37      	ldr	r2, [pc, #220]	; (8003264 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a36      	ldr	r2, [pc, #216]	; (8003268 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8003198:	2300      	movs	r3, #0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d017      	beq.n	80031ce <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <HAL_TIM_PWM_Stop_DMA+0x132>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6a1a      	ldr	r2, [r3, #32]
 80031b4:	f240 4344 	movw	r3, #1092	; 0x444
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_TIM_PWM_Stop_DMA+0x132>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a1a      	ldr	r2, [r3, #32]
 80031d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <HAL_TIM_PWM_Stop_DMA+0x162>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a1a      	ldr	r2, [r3, #32]
 80031e4:	f240 4344 	movw	r3, #1092	; 0x444
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <HAL_TIM_PWM_Stop_DMA+0x162>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0201 	bic.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <HAL_TIM_PWM_Stop_DMA+0x172>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	e023      	b.n	8003256 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b04      	cmp	r3, #4
 8003212:	d104      	bne.n	800321e <HAL_TIM_PWM_Stop_DMA+0x182>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800321c:	e01b      	b.n	8003256 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d104      	bne.n	800322e <HAL_TIM_PWM_Stop_DMA+0x192>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800322c:	e013      	b.n	8003256 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b0c      	cmp	r3, #12
 8003232:	d104      	bne.n	800323e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800323c:	e00b      	b.n	8003256 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b10      	cmp	r3, #16
 8003242:	d104      	bne.n	800324e <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324c:	e003      	b.n	8003256 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400

0800326c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b02      	cmp	r3, #2
 8003280:	d122      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b02      	cmp	r3, #2
 800328e:	d11b      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0202 	mvn.w	r2, #2
 8003298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fa1a 	bl	80036e8 <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fa0c 	bl	80036d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fd faef 	bl	80008a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d122      	bne.n	800331c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d11b      	bne.n	800331c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0204 	mvn.w	r2, #4
 80032ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f9f0 	bl	80036e8 <HAL_TIM_IC_CaptureCallback>
 8003308:	e005      	b.n	8003316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f9e2 	bl	80036d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fd fac5 	bl	80008a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b08      	cmp	r3, #8
 8003328:	d122      	bne.n	8003370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b08      	cmp	r3, #8
 8003336:	d11b      	bne.n	8003370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0208 	mvn.w	r2, #8
 8003340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2204      	movs	r2, #4
 8003346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f9c6 	bl	80036e8 <HAL_TIM_IC_CaptureCallback>
 800335c:	e005      	b.n	800336a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f9b8 	bl	80036d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7fd fa9b 	bl	80008a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b10      	cmp	r3, #16
 800337c:	d122      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b10      	cmp	r3, #16
 800338a:	d11b      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0210 	mvn.w	r2, #16
 8003394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2208      	movs	r2, #8
 800339a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f99c 	bl	80036e8 <HAL_TIM_IC_CaptureCallback>
 80033b0:	e005      	b.n	80033be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f98e 	bl	80036d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7fd fa71 	bl	80008a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10e      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d107      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0201 	mvn.w	r2, #1
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd fa86 	bl	80008fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b80      	cmp	r3, #128	; 0x80
 80033fc:	d10e      	bne.n	800341c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	2b80      	cmp	r3, #128	; 0x80
 800340a:	d107      	bne.n	800341c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fe50 	bl	80040bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342a:	d10e      	bne.n	800344a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003436:	2b80      	cmp	r3, #128	; 0x80
 8003438:	d107      	bne.n	800344a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fe43 	bl	80040d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d10e      	bne.n	8003476 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d107      	bne.n	8003476 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800346e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f94d 	bl	8003710 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b20      	cmp	r3, #32
 8003482:	d10e      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b20      	cmp	r3, #32
 8003490:	d107      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f06f 0220 	mvn.w	r2, #32
 800349a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fe03 	bl	80040a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e0ff      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b14      	cmp	r3, #20
 80034d6:	f200 80f0 	bhi.w	80036ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034da:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	08003535 	.word	0x08003535
 80034e4:	080036bb 	.word	0x080036bb
 80034e8:	080036bb 	.word	0x080036bb
 80034ec:	080036bb 	.word	0x080036bb
 80034f0:	08003575 	.word	0x08003575
 80034f4:	080036bb 	.word	0x080036bb
 80034f8:	080036bb 	.word	0x080036bb
 80034fc:	080036bb 	.word	0x080036bb
 8003500:	080035b7 	.word	0x080035b7
 8003504:	080036bb 	.word	0x080036bb
 8003508:	080036bb 	.word	0x080036bb
 800350c:	080036bb 	.word	0x080036bb
 8003510:	080035f7 	.word	0x080035f7
 8003514:	080036bb 	.word	0x080036bb
 8003518:	080036bb 	.word	0x080036bb
 800351c:	080036bb 	.word	0x080036bb
 8003520:	08003639 	.word	0x08003639
 8003524:	080036bb 	.word	0x080036bb
 8003528:	080036bb 	.word	0x080036bb
 800352c:	080036bb 	.word	0x080036bb
 8003530:	08003679 	.word	0x08003679
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fa32 	bl	80039a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0208 	orr.w	r2, r2, #8
 800354e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0204 	bic.w	r2, r2, #4
 800355e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6999      	ldr	r1, [r3, #24]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	619a      	str	r2, [r3, #24]
      break;
 8003572:	e0a5      	b.n	80036c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fa8e 	bl	8003a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6999      	ldr	r1, [r3, #24]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	021a      	lsls	r2, r3, #8
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	619a      	str	r2, [r3, #24]
      break;
 80035b4:	e084      	b.n	80036c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fae7 	bl	8003b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0208 	orr.w	r2, r2, #8
 80035d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0204 	bic.w	r2, r2, #4
 80035e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69d9      	ldr	r1, [r3, #28]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	61da      	str	r2, [r3, #28]
      break;
 80035f4:	e064      	b.n	80036c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fb3f 	bl	8003c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69d9      	ldr	r1, [r3, #28]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	021a      	lsls	r2, r3, #8
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	61da      	str	r2, [r3, #28]
      break;
 8003636:	e043      	b.n	80036c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fb7c 	bl	8003d3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0208 	orr.w	r2, r2, #8
 8003652:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0204 	bic.w	r2, r2, #4
 8003662:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003676:	e023      	b.n	80036c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fbb4 	bl	8003dec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003692:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	021a      	lsls	r2, r3, #8
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036b8:	e002      	b.n	80036c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
      break;
 80036be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop

080036d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	429a      	cmp	r2, r3
 800374e:	d107      	bne.n	8003760 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800375e:	e02a      	b.n	80037b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	429a      	cmp	r2, r3
 8003768:	d107      	bne.n	800377a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2202      	movs	r2, #2
 800376e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003778:	e01d      	b.n	80037b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	d107      	bne.n	8003794 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2204      	movs	r2, #4
 8003788:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003792:	e010      	b.n	80037b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	429a      	cmp	r2, r3
 800379c:	d107      	bne.n	80037ae <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2208      	movs	r2, #8
 80037a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037ac:	e003      	b.n	80037b6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff ffb4 	bl	8003724 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	771a      	strb	r2, [r3, #28]
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d10b      	bne.n	80037fa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d136      	bne.n	800385e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f8:	e031      	b.n	800385e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d10b      	bne.n	800381c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2202      	movs	r2, #2
 8003808:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d125      	bne.n	800385e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800381a:	e020      	b.n	800385e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	429a      	cmp	r2, r3
 8003824:	d10b      	bne.n	800383e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2204      	movs	r2, #4
 800382a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d114      	bne.n	800385e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800383c:	e00f      	b.n	800385e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	429a      	cmp	r2, r3
 8003846:	d10a      	bne.n	800385e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2208      	movs	r2, #8
 800384c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f7fd f81e 	bl	80008a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	771a      	strb	r2, [r3, #28]
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	d103      	bne.n	8003892 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	771a      	strb	r2, [r3, #28]
 8003890:	e019      	b.n	80038c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	d103      	bne.n	80038a4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2202      	movs	r2, #2
 80038a0:	771a      	strb	r2, [r3, #28]
 80038a2:	e010      	b.n	80038c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d103      	bne.n	80038b6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2204      	movs	r2, #4
 80038b2:	771a      	strb	r2, [r3, #28]
 80038b4:	e007      	b.n	80038c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d102      	bne.n	80038c6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2208      	movs	r2, #8
 80038c4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff ff18 	bl	80036fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	771a      	strb	r2, [r3, #28]
}
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <TIM_Base_SetConfig+0xbc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0x20>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fa:	d108      	bne.n	800390e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a21      	ldr	r2, [pc, #132]	; (8003998 <TIM_Base_SetConfig+0xbc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00b      	beq.n	800392e <TIM_Base_SetConfig+0x52>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d007      	beq.n	800392e <TIM_Base_SetConfig+0x52>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1e      	ldr	r2, [pc, #120]	; (800399c <TIM_Base_SetConfig+0xc0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_Base_SetConfig+0x52>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <TIM_Base_SetConfig+0xc4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <TIM_Base_SetConfig+0xbc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d007      	beq.n	800397c <TIM_Base_SetConfig+0xa0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a0b      	ldr	r2, [pc, #44]	; (800399c <TIM_Base_SetConfig+0xc0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_Base_SetConfig+0xa0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <TIM_Base_SetConfig+0xc4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d103      	bne.n	8003984 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	615a      	str	r2, [r3, #20]
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40014000 	.word	0x40014000
 80039a0:	40014400 	.word	0x40014400

080039a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0201 	bic.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f023 0302 	bic.w	r3, r3, #2
 80039f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a24      	ldr	r2, [pc, #144]	; (8003a90 <TIM_OC1_SetConfig+0xec>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d007      	beq.n	8003a14 <TIM_OC1_SetConfig+0x70>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <TIM_OC1_SetConfig+0xf0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_OC1_SetConfig+0x70>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a22      	ldr	r2, [pc, #136]	; (8003a98 <TIM_OC1_SetConfig+0xf4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d10c      	bne.n	8003a2e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0308 	bic.w	r3, r3, #8
 8003a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 0304 	bic.w	r3, r3, #4
 8003a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <TIM_OC1_SetConfig+0xec>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <TIM_OC1_SetConfig+0xa2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <TIM_OC1_SetConfig+0xf0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_OC1_SetConfig+0xa2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <TIM_OC1_SetConfig+0xf4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d111      	bne.n	8003a6a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	621a      	str	r2, [r3, #32]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	40012c00 	.word	0x40012c00
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40014400 	.word	0x40014400

08003a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f023 0210 	bic.w	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f023 0320 	bic.w	r3, r3, #32
 8003aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <TIM_OC2_SetConfig+0xe8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d10d      	bne.n	8003b1c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <TIM_OC2_SetConfig+0xe8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <TIM_OC2_SetConfig+0x98>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <TIM_OC2_SetConfig+0xec>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_OC2_SetConfig+0x98>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a17      	ldr	r2, [pc, #92]	; (8003b8c <TIM_OC2_SetConfig+0xf0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d113      	bne.n	8003b5c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40014000 	.word	0x40014000
 8003b8c:	40014400 	.word	0x40014400

08003b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <TIM_OC3_SetConfig+0xe4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10d      	bne.n	8003c0e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <TIM_OC3_SetConfig+0xe4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <TIM_OC3_SetConfig+0x96>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a17      	ldr	r2, [pc, #92]	; (8003c78 <TIM_OC3_SetConfig+0xe8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_OC3_SetConfig+0x96>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a16      	ldr	r2, [pc, #88]	; (8003c7c <TIM_OC3_SetConfig+0xec>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d113      	bne.n	8003c4e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	621a      	str	r2, [r3, #32]
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40014400 	.word	0x40014400

08003c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	031b      	lsls	r3, r3, #12
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a14      	ldr	r2, [pc, #80]	; (8003d30 <TIM_OC4_SetConfig+0xb0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <TIM_OC4_SetConfig+0x74>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <TIM_OC4_SetConfig+0xb4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_OC4_SetConfig+0x74>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <TIM_OC4_SetConfig+0xb8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d109      	bne.n	8003d08 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40014000 	.word	0x40014000
 8003d38:	40014400 	.word	0x40014400

08003d3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	041b      	lsls	r3, r3, #16
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <TIM_OC5_SetConfig+0xa4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <TIM_OC5_SetConfig+0x6a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a12      	ldr	r2, [pc, #72]	; (8003de4 <TIM_OC5_SetConfig+0xa8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_OC5_SetConfig+0x6a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a11      	ldr	r2, [pc, #68]	; (8003de8 <TIM_OC5_SetConfig+0xac>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d109      	bne.n	8003dba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	621a      	str	r2, [r3, #32]
}
 8003dd4:	bf00      	nop
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40014000 	.word	0x40014000
 8003de8:	40014400 	.word	0x40014400

08003dec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	051b      	lsls	r3, r3, #20
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <TIM_OC6_SetConfig+0xa8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_OC6_SetConfig+0x6c>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <TIM_OC6_SetConfig+0xac>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_OC6_SetConfig+0x6c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <TIM_OC6_SetConfig+0xb0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d109      	bne.n	8003e6c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	029b      	lsls	r3, r3, #10
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40014400 	.word	0x40014400

08003ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1a      	ldr	r2, [r3, #32]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a1a      	ldr	r2, [r3, #32]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e04f      	b.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6c:	d004      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a10      	ldr	r2, [pc, #64]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d10c      	bne.n	8003f92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40014000 	.word	0x40014000

08003fb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e060      	b.n	8004096 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d115      	bne.n	8004084 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	051b      	lsls	r3, r3, #20
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40012c00 	.word	0x40012c00

080040a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e040      	b.n	8004178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fc fccc 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	; 0x24
 8004110:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f82c 	bl	8004180 <UART_SetConfig>
 8004128:	4603      	mov	r3, r0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e022      	b.n	8004178 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fa4c 	bl	80045d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800414e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800415e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fad3 	bl	800471c <UART_CheckIdleState>
 8004176:	4603      	mov	r3, r0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004184:	b08a      	sub	sp, #40	; 0x28
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	431a      	orrs	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	431a      	orrs	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4bb4      	ldr	r3, [pc, #720]	; (8004480 <UART_SetConfig+0x300>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4aa9      	ldr	r2, [pc, #676]	; (8004484 <UART_SetConfig+0x304>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e8:	4313      	orrs	r3, r2
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fc:	430a      	orrs	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4aa0      	ldr	r2, [pc, #640]	; (8004488 <UART_SetConfig+0x308>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d126      	bne.n	8004258 <UART_SetConfig+0xd8>
 800420a:	4ba0      	ldr	r3, [pc, #640]	; (800448c <UART_SetConfig+0x30c>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b03      	cmp	r3, #3
 8004216:	d81b      	bhi.n	8004250 <UART_SetConfig+0xd0>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <UART_SetConfig+0xa0>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004231 	.word	0x08004231
 8004224:	08004241 	.word	0x08004241
 8004228:	08004239 	.word	0x08004239
 800422c:	08004249 	.word	0x08004249
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004236:	e080      	b.n	800433a <UART_SetConfig+0x1ba>
 8004238:	2302      	movs	r3, #2
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423e:	e07c      	b.n	800433a <UART_SetConfig+0x1ba>
 8004240:	2304      	movs	r3, #4
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004246:	e078      	b.n	800433a <UART_SetConfig+0x1ba>
 8004248:	2308      	movs	r3, #8
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	e074      	b.n	800433a <UART_SetConfig+0x1ba>
 8004250:	2310      	movs	r3, #16
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004256:	e070      	b.n	800433a <UART_SetConfig+0x1ba>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a8c      	ldr	r2, [pc, #560]	; (8004490 <UART_SetConfig+0x310>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d138      	bne.n	80042d4 <UART_SetConfig+0x154>
 8004262:	4b8a      	ldr	r3, [pc, #552]	; (800448c <UART_SetConfig+0x30c>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b0c      	cmp	r3, #12
 800426e:	d82d      	bhi.n	80042cc <UART_SetConfig+0x14c>
 8004270:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <UART_SetConfig+0xf8>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	080042ad 	.word	0x080042ad
 800427c:	080042cd 	.word	0x080042cd
 8004280:	080042cd 	.word	0x080042cd
 8004284:	080042cd 	.word	0x080042cd
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080042cd 	.word	0x080042cd
 8004290:	080042cd 	.word	0x080042cd
 8004294:	080042cd 	.word	0x080042cd
 8004298:	080042b5 	.word	0x080042b5
 800429c:	080042cd 	.word	0x080042cd
 80042a0:	080042cd 	.word	0x080042cd
 80042a4:	080042cd 	.word	0x080042cd
 80042a8:	080042c5 	.word	0x080042c5
 80042ac:	2300      	movs	r3, #0
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b2:	e042      	b.n	800433a <UART_SetConfig+0x1ba>
 80042b4:	2302      	movs	r3, #2
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ba:	e03e      	b.n	800433a <UART_SetConfig+0x1ba>
 80042bc:	2304      	movs	r3, #4
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e03a      	b.n	800433a <UART_SetConfig+0x1ba>
 80042c4:	2308      	movs	r3, #8
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ca:	e036      	b.n	800433a <UART_SetConfig+0x1ba>
 80042cc:	2310      	movs	r3, #16
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d2:	e032      	b.n	800433a <UART_SetConfig+0x1ba>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6a      	ldr	r2, [pc, #424]	; (8004484 <UART_SetConfig+0x304>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d12a      	bne.n	8004334 <UART_SetConfig+0x1b4>
 80042de:	4b6b      	ldr	r3, [pc, #428]	; (800448c <UART_SetConfig+0x30c>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ec:	d01a      	beq.n	8004324 <UART_SetConfig+0x1a4>
 80042ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042f2:	d81b      	bhi.n	800432c <UART_SetConfig+0x1ac>
 80042f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f8:	d00c      	beq.n	8004314 <UART_SetConfig+0x194>
 80042fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fe:	d815      	bhi.n	800432c <UART_SetConfig+0x1ac>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <UART_SetConfig+0x18c>
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004308:	d008      	beq.n	800431c <UART_SetConfig+0x19c>
 800430a:	e00f      	b.n	800432c <UART_SetConfig+0x1ac>
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e012      	b.n	800433a <UART_SetConfig+0x1ba>
 8004314:	2302      	movs	r3, #2
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	e00e      	b.n	800433a <UART_SetConfig+0x1ba>
 800431c:	2304      	movs	r3, #4
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004322:	e00a      	b.n	800433a <UART_SetConfig+0x1ba>
 8004324:	2308      	movs	r3, #8
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432a:	e006      	b.n	800433a <UART_SetConfig+0x1ba>
 800432c:	2310      	movs	r3, #16
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e002      	b.n	800433a <UART_SetConfig+0x1ba>
 8004334:	2310      	movs	r3, #16
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a51      	ldr	r2, [pc, #324]	; (8004484 <UART_SetConfig+0x304>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d17a      	bne.n	800443a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004344:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004348:	2b08      	cmp	r3, #8
 800434a:	d824      	bhi.n	8004396 <UART_SetConfig+0x216>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <UART_SetConfig+0x1d4>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004379 	.word	0x08004379
 8004358:	08004397 	.word	0x08004397
 800435c:	08004381 	.word	0x08004381
 8004360:	08004397 	.word	0x08004397
 8004364:	08004387 	.word	0x08004387
 8004368:	08004397 	.word	0x08004397
 800436c:	08004397 	.word	0x08004397
 8004370:	08004397 	.word	0x08004397
 8004374:	0800438f 	.word	0x0800438f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004378:	f7fd ffd4 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 800437c:	61f8      	str	r0, [r7, #28]
        break;
 800437e:	e010      	b.n	80043a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004380:	4b44      	ldr	r3, [pc, #272]	; (8004494 <UART_SetConfig+0x314>)
 8004382:	61fb      	str	r3, [r7, #28]
        break;
 8004384:	e00d      	b.n	80043a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004386:	f7fd ff35 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800438a:	61f8      	str	r0, [r7, #28]
        break;
 800438c:	e009      	b.n	80043a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004392:	61fb      	str	r3, [r7, #28]
        break;
 8004394:	e005      	b.n	80043a2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8107 	beq.w	80045b8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	69fa      	ldr	r2, [r7, #28]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d305      	bcc.n	80043c6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d903      	bls.n	80043ce <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043cc:	e0f4      	b.n	80045b8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	2200      	movs	r2, #0
 80043d2:	461c      	mov	r4, r3
 80043d4:	4615      	mov	r5, r2
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	022b      	lsls	r3, r5, #8
 80043e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043e4:	0222      	lsls	r2, r4, #8
 80043e6:	68f9      	ldr	r1, [r7, #12]
 80043e8:	6849      	ldr	r1, [r1, #4]
 80043ea:	0849      	lsrs	r1, r1, #1
 80043ec:	2000      	movs	r0, #0
 80043ee:	4688      	mov	r8, r1
 80043f0:	4681      	mov	r9, r0
 80043f2:	eb12 0a08 	adds.w	sl, r2, r8
 80043f6:	eb43 0b09 	adc.w	fp, r3, r9
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004408:	4650      	mov	r0, sl
 800440a:	4659      	mov	r1, fp
 800440c:	f7fb fee0 	bl	80001d0 <__aeabi_uldivmod>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4613      	mov	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441e:	d308      	bcc.n	8004432 <UART_SetConfig+0x2b2>
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004426:	d204      	bcs.n	8004432 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	60da      	str	r2, [r3, #12]
 8004430:	e0c2      	b.n	80045b8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004438:	e0be      	b.n	80045b8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004442:	d16a      	bne.n	800451a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004448:	2b08      	cmp	r3, #8
 800444a:	d834      	bhi.n	80044b6 <UART_SetConfig+0x336>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0x2d4>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004479 	.word	0x08004479
 8004458:	08004499 	.word	0x08004499
 800445c:	080044a1 	.word	0x080044a1
 8004460:	080044b7 	.word	0x080044b7
 8004464:	080044a7 	.word	0x080044a7
 8004468:	080044b7 	.word	0x080044b7
 800446c:	080044b7 	.word	0x080044b7
 8004470:	080044b7 	.word	0x080044b7
 8004474:	080044af 	.word	0x080044af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004478:	f7fd ff54 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 800447c:	61f8      	str	r0, [r7, #28]
        break;
 800447e:	e020      	b.n	80044c2 <UART_SetConfig+0x342>
 8004480:	efff69f3 	.word	0xefff69f3
 8004484:	40008000 	.word	0x40008000
 8004488:	40013800 	.word	0x40013800
 800448c:	40021000 	.word	0x40021000
 8004490:	40004400 	.word	0x40004400
 8004494:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004498:	f7fd ff5a 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 800449c:	61f8      	str	r0, [r7, #28]
        break;
 800449e:	e010      	b.n	80044c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a0:	4b4c      	ldr	r3, [pc, #304]	; (80045d4 <UART_SetConfig+0x454>)
 80044a2:	61fb      	str	r3, [r7, #28]
        break;
 80044a4:	e00d      	b.n	80044c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a6:	f7fd fea5 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80044aa:	61f8      	str	r0, [r7, #28]
        break;
 80044ac:	e009      	b.n	80044c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b2:	61fb      	str	r3, [r7, #28]
        break;
 80044b4:	e005      	b.n	80044c2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d077      	beq.n	80045b8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	005a      	lsls	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	441a      	add	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b0f      	cmp	r3, #15
 80044e2:	d916      	bls.n	8004512 <UART_SetConfig+0x392>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ea:	d212      	bcs.n	8004512 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f023 030f 	bic.w	r3, r3, #15
 80044f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	085b      	lsrs	r3, r3, #1
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	b29a      	uxth	r2, r3
 8004502:	8afb      	ldrh	r3, [r7, #22]
 8004504:	4313      	orrs	r3, r2
 8004506:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	8afa      	ldrh	r2, [r7, #22]
 800450e:	60da      	str	r2, [r3, #12]
 8004510:	e052      	b.n	80045b8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004518:	e04e      	b.n	80045b8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800451a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800451e:	2b08      	cmp	r3, #8
 8004520:	d827      	bhi.n	8004572 <UART_SetConfig+0x3f2>
 8004522:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <UART_SetConfig+0x3a8>)
 8004524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004528:	0800454d 	.word	0x0800454d
 800452c:	08004555 	.word	0x08004555
 8004530:	0800455d 	.word	0x0800455d
 8004534:	08004573 	.word	0x08004573
 8004538:	08004563 	.word	0x08004563
 800453c:	08004573 	.word	0x08004573
 8004540:	08004573 	.word	0x08004573
 8004544:	08004573 	.word	0x08004573
 8004548:	0800456b 	.word	0x0800456b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800454c:	f7fd feea 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 8004550:	61f8      	str	r0, [r7, #28]
        break;
 8004552:	e014      	b.n	800457e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004554:	f7fd fefc 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 8004558:	61f8      	str	r0, [r7, #28]
        break;
 800455a:	e010      	b.n	800457e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <UART_SetConfig+0x454>)
 800455e:	61fb      	str	r3, [r7, #28]
        break;
 8004560:	e00d      	b.n	800457e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004562:	f7fd fe47 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8004566:	61f8      	str	r0, [r7, #28]
        break;
 8004568:	e009      	b.n	800457e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456e:	61fb      	str	r3, [r7, #28]
        break;
 8004570:	e005      	b.n	800457e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800457c:	bf00      	nop
    }

    if (pclk != 0U)
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d019      	beq.n	80045b8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	085a      	lsrs	r2, r3, #1
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	441a      	add	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b0f      	cmp	r3, #15
 800459c:	d909      	bls.n	80045b2 <UART_SetConfig+0x432>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a4:	d205      	bcs.n	80045b2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	e002      	b.n	80045b8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3728      	adds	r7, #40	; 0x28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d2:	bf00      	nop
 80045d4:	00f42400 	.word	0x00f42400

080045d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01a      	beq.n	80046ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d6:	d10a      	bne.n	80046ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  }
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af02      	add	r7, sp, #8
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800472c:	f7fc fb32 	bl	8000d94 <HAL_GetTick>
 8004730:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b08      	cmp	r3, #8
 800473e:	d10e      	bne.n	800475e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f82d 	bl	80047ae <UART_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e023      	b.n	80047a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b04      	cmp	r3, #4
 800476a:	d10e      	bne.n	800478a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800476c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f817 	bl	80047ae <UART_WaitOnFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e00d      	b.n	80047a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b09c      	sub	sp, #112	; 0x70
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	603b      	str	r3, [r7, #0]
 80047ba:	4613      	mov	r3, r2
 80047bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047be:	e0a5      	b.n	800490c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c6:	f000 80a1 	beq.w	800490c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7fc fae3 	bl	8000d94 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80047da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d13e      	bne.n	800485e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f4:	667b      	str	r3, [r7, #100]	; 0x64
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004800:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004804:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800480c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e6      	bne.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	663b      	str	r3, [r7, #96]	; 0x60
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3308      	adds	r3, #8
 8004830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004832:	64ba      	str	r2, [r7, #72]	; 0x48
 8004834:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e5      	bne.n	8004812 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e067      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d04f      	beq.n	800490c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487a:	d147      	bne.n	800490c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004884:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800489a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
 80048a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e6      	bne.n	8004886 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3308      	adds	r3, #8
 80048be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	613b      	str	r3, [r7, #16]
   return(result);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f023 0301 	bic.w	r3, r3, #1
 80048ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3308      	adds	r3, #8
 80048d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048d8:	623a      	str	r2, [r7, #32]
 80048da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	69f9      	ldr	r1, [r7, #28]
 80048de:	6a3a      	ldr	r2, [r7, #32]
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e5      	bne.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2220      	movs	r2, #32
 80048f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e010      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4013      	ands	r3, r2
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	429a      	cmp	r2, r3
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	429a      	cmp	r2, r3
 8004928:	f43f af4a 	beq.w	80047c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3770      	adds	r7, #112	; 0x70
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <__NVIC_SetPriority>:
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	6039      	str	r1, [r7, #0]
 8004942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004948:	2b00      	cmp	r3, #0
 800494a:	db0a      	blt.n	8004962 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	b2da      	uxtb	r2, r3
 8004950:	490c      	ldr	r1, [pc, #48]	; (8004984 <__NVIC_SetPriority+0x4c>)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	0112      	lsls	r2, r2, #4
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	440b      	add	r3, r1
 800495c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004960:	e00a      	b.n	8004978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	4908      	ldr	r1, [pc, #32]	; (8004988 <__NVIC_SetPriority+0x50>)
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	3b04      	subs	r3, #4
 8004970:	0112      	lsls	r2, r2, #4
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	440b      	add	r3, r1
 8004976:	761a      	strb	r2, [r3, #24]
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	e000e100 	.word	0xe000e100
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <SysTick_Handler+0x1c>)
 8004992:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004994:	f001 fe0a 	bl	80065ac <xTaskGetSchedulerState>
 8004998:	4603      	mov	r3, r0
 800499a:	2b01      	cmp	r3, #1
 800499c:	d001      	beq.n	80049a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800499e:	f002 fbf3 	bl	8007188 <xPortSysTickHandler>
  }
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	e000e010 	.word	0xe000e010

080049ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80049b0:	2100      	movs	r1, #0
 80049b2:	f06f 0004 	mvn.w	r0, #4
 80049b6:	f7ff ffbf 	bl	8004938 <__NVIC_SetPriority>
#endif
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c6:	f3ef 8305 	mrs	r3, IPSR
 80049ca:	603b      	str	r3, [r7, #0]
  return(result);
 80049cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80049d2:	f06f 0305 	mvn.w	r3, #5
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	e00c      	b.n	80049f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <osKernelInitialize+0x44>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d105      	bne.n	80049ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <osKernelInitialize+0x44>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	e002      	b.n	80049f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80049ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049f4:	687b      	ldr	r3, [r7, #4]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000328 	.word	0x20000328

08004a08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a0e:	f3ef 8305 	mrs	r3, IPSR
 8004a12:	603b      	str	r3, [r7, #0]
  return(result);
 8004a14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004a1a:	f06f 0305 	mvn.w	r3, #5
 8004a1e:	607b      	str	r3, [r7, #4]
 8004a20:	e010      	b.n	8004a44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <osKernelStart+0x48>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d109      	bne.n	8004a3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a2a:	f7ff ffbf 	bl	80049ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <osKernelStart+0x48>)
 8004a30:	2202      	movs	r2, #2
 8004a32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a34:	f001 f972 	bl	8005d1c <vTaskStartScheduler>
      stat = osOK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	e002      	b.n	8004a44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a44:	687b      	ldr	r3, [r7, #4]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000328 	.word	0x20000328

08004a54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08e      	sub	sp, #56	; 0x38
 8004a58:	af04      	add	r7, sp, #16
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a64:	f3ef 8305 	mrs	r3, IPSR
 8004a68:	617b      	str	r3, [r7, #20]
  return(result);
 8004a6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d17e      	bne.n	8004b6e <osThreadNew+0x11a>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d07b      	beq.n	8004b6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004a7a:	2318      	movs	r3, #24
 8004a7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d045      	beq.n	8004b1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <osThreadNew+0x48>
        name = attr->name;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <osThreadNew+0x6e>
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2b38      	cmp	r3, #56	; 0x38
 8004ab4:	d805      	bhi.n	8004ac2 <osThreadNew+0x6e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <osThreadNew+0x72>
        return (NULL);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e054      	b.n	8004b70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	089b      	lsrs	r3, r3, #2
 8004ad4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00e      	beq.n	8004afc <osThreadNew+0xa8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	2b5b      	cmp	r3, #91	; 0x5b
 8004ae4:	d90a      	bls.n	8004afc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d006      	beq.n	8004afc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <osThreadNew+0xa8>
        mem = 1;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	e010      	b.n	8004b1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10c      	bne.n	8004b1e <osThreadNew+0xca>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d108      	bne.n	8004b1e <osThreadNew+0xca>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <osThreadNew+0xca>
          mem = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	e001      	b.n	8004b1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d110      	bne.n	8004b46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b2c:	9202      	str	r2, [sp, #8]
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6a3a      	ldr	r2, [r7, #32]
 8004b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 ff18 	bl	8005970 <xTaskCreateStatic>
 8004b40:	4603      	mov	r3, r0
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	e013      	b.n	8004b6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d110      	bne.n	8004b6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	f107 0310 	add.w	r3, r7, #16
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 ff63 	bl	8005a2a <xTaskCreate>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d001      	beq.n	8004b6e <osThreadNew+0x11a>
            hTask = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b6e:	693b      	ldr	r3, [r7, #16]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3728      	adds	r7, #40	; 0x28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b80:	f3ef 8305 	mrs	r3, IPSR
 8004b84:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <osDelay+0x1c>
    stat = osErrorISR;
 8004b8c:	f06f 0305 	mvn.w	r3, #5
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	e007      	b.n	8004ba4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f001 f888 	bl	8005cb4 <vTaskDelay>
    }
  }

  return (stat);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b088      	sub	sp, #32
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bba:	f3ef 8305 	mrs	r3, IPSR
 8004bbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bc0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d174      	bne.n	8004cb0 <osMutexNew+0x102>
    if (attr != NULL) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	e001      	b.n	8004bd8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <osMutexNew+0x3a>
      rmtx = 1U;
 8004be2:	2301      	movs	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	e001      	b.n	8004bec <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d15c      	bne.n	8004cb0 <osMutexNew+0x102>
      mem = -1;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bfa:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d015      	beq.n	8004c2e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d006      	beq.n	8004c18 <osMutexNew+0x6a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b4f      	cmp	r3, #79	; 0x4f
 8004c10:	d902      	bls.n	8004c18 <osMutexNew+0x6a>
          mem = 1;
 8004c12:	2301      	movs	r3, #1
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	e00c      	b.n	8004c32 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d108      	bne.n	8004c32 <osMutexNew+0x84>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <osMutexNew+0x84>
            mem = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	e001      	b.n	8004c32 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d112      	bne.n	8004c5e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	4619      	mov	r1, r3
 8004c44:	2004      	movs	r0, #4
 8004c46:	f000 fa90 	bl	800516a <xQueueCreateMutexStatic>
 8004c4a:	61f8      	str	r0, [r7, #28]
 8004c4c:	e016      	b.n	8004c7c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4619      	mov	r1, r3
 8004c54:	2001      	movs	r0, #1
 8004c56:	f000 fa88 	bl	800516a <xQueueCreateMutexStatic>
 8004c5a:	61f8      	str	r0, [r7, #28]
 8004c5c:	e00e      	b.n	8004c7c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004c6a:	2004      	movs	r0, #4
 8004c6c:	f000 fa65 	bl	800513a <xQueueCreateMutex>
 8004c70:	61f8      	str	r0, [r7, #28]
 8004c72:	e003      	b.n	8004c7c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004c74:	2001      	movs	r0, #1
 8004c76:	f000 fa60 	bl	800513a <xQueueCreateMutex>
 8004c7a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00c      	beq.n	8004c9c <osMutexNew+0xee>
        if (attr != NULL) {
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <osMutexNew+0xe2>
          name = attr->name;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	e001      	b.n	8004c94 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004c94:	68f9      	ldr	r1, [r7, #12]
 8004c96:	69f8      	ldr	r0, [r7, #28]
 8004c98:	f000 fe0c 	bl	80058b4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d006      	beq.n	8004cb0 <osMutexNew+0x102>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004cb0:	69fb      	ldr	r3, [r7, #28]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a07      	ldr	r2, [pc, #28]	; (8004ce8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ccc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4a06      	ldr	r2, [pc, #24]	; (8004cec <vApplicationGetIdleTaskMemory+0x30>)
 8004cd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	601a      	str	r2, [r3, #0]
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	2000032c 	.word	0x2000032c
 8004cec:	20000388 	.word	0x20000388

08004cf0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <vApplicationGetTimerTaskMemory+0x2c>)
 8004d00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4a06      	ldr	r2, [pc, #24]	; (8004d20 <vApplicationGetTimerTaskMemory+0x30>)
 8004d06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d0e:	601a      	str	r2, [r3, #0]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	20000588 	.word	0x20000588
 8004d20:	200005e4 	.word	0x200005e4

08004d24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f103 0208 	add.w	r2, r3, #8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f103 0208 	add.w	r2, r3, #8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f103 0208 	add.w	r2, r3, #8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ddc:	d103      	bne.n	8004de6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	e00c      	b.n	8004e00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3308      	adds	r3, #8
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e002      	b.n	8004df4 <vListInsert+0x2e>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d2f6      	bcs.n	8004dee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	601a      	str	r2, [r3, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6892      	ldr	r2, [r2, #8]
 8004e4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6852      	ldr	r2, [r2, #4]
 8004e58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d103      	bne.n	8004e6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	1e5a      	subs	r2, r3, #1
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004eb6:	f002 f8d5 	bl	8007064 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	441a      	add	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	68f9      	ldr	r1, [r7, #12]
 8004eea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004eec:	fb01 f303 	mul.w	r3, r1, r3
 8004ef0:	441a      	add	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	22ff      	movs	r2, #255	; 0xff
 8004efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	22ff      	movs	r2, #255	; 0xff
 8004f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d114      	bne.n	8004f36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01a      	beq.n	8004f4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3310      	adds	r3, #16
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 f989 	bl	8006230 <xTaskRemoveFromEventList>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d012      	beq.n	8004f4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <xQueueGenericReset+0xcc>)
 8004f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	e009      	b.n	8004f4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3310      	adds	r3, #16
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fef2 	bl	8004d24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3324      	adds	r3, #36	; 0x24
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff feed 	bl	8004d24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f4a:	f002 f8bb 	bl	80070c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f4e:	2301      	movs	r3, #1
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08e      	sub	sp, #56	; 0x38
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <xQueueGenericCreateStatic+0x52>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <xQueueGenericCreateStatic+0x56>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <xQueueGenericCreateStatic+0x58>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	623b      	str	r3, [r7, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d102      	bne.n	8004fda <xQueueGenericCreateStatic+0x7e>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <xQueueGenericCreateStatic+0x82>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <xQueueGenericCreateStatic+0x84>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	61fb      	str	r3, [r7, #28]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ffa:	2350      	movs	r3, #80	; 0x50
 8004ffc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b50      	cmp	r3, #80	; 0x50
 8005002:	d00a      	beq.n	800501a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	61bb      	str	r3, [r7, #24]
}
 8005016:	bf00      	nop
 8005018:	e7fe      	b.n	8005018 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800501a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00d      	beq.n	8005042 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800502e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	4613      	mov	r3, r2
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f83f 	bl	80050c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005044:	4618      	mov	r0, r3
 8005046:	3730      	adds	r7, #48	; 0x30
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08a      	sub	sp, #40	; 0x28
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	4613      	mov	r3, r2
 8005058:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	613b      	str	r3, [r7, #16]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	fb02 f303 	mul.w	r3, r2, r3
 800507e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	3350      	adds	r3, #80	; 0x50
 8005084:	4618      	mov	r0, r3
 8005086:	f002 f90f 	bl	80072a8 <pvPortMalloc>
 800508a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d011      	beq.n	80050b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	3350      	adds	r3, #80	; 0x50
 800509a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050a4:	79fa      	ldrb	r2, [r7, #7]
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	4613      	mov	r3, r2
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f805 	bl	80050c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050b6:	69bb      	ldr	r3, [r7, #24]
	}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d103      	bne.n	80050dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e002      	b.n	80050e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050ee:	2101      	movs	r1, #1
 80050f0:	69b8      	ldr	r0, [r7, #24]
 80050f2:	f7ff fecb 	bl	8004e8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00e      	beq.n	8005132 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005126:	2300      	movs	r3, #0
 8005128:	2200      	movs	r2, #0
 800512a:	2100      	movs	r1, #0
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f837 	bl	80051a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800513a:	b580      	push	{r7, lr}
 800513c:	b086      	sub	sp, #24
 800513e:	af00      	add	r7, sp, #0
 8005140:	4603      	mov	r3, r0
 8005142:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005144:	2301      	movs	r3, #1
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	461a      	mov	r2, r3
 8005150:	6939      	ldr	r1, [r7, #16]
 8005152:	6978      	ldr	r0, [r7, #20]
 8005154:	f7ff ff7a 	bl	800504c <xQueueGenericCreate>
 8005158:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff ffd3 	bl	8005106 <prvInitialiseMutex>

		return xNewQueue;
 8005160:	68fb      	ldr	r3, [r7, #12]
	}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800516a:	b580      	push	{r7, lr}
 800516c:	b088      	sub	sp, #32
 800516e:	af02      	add	r7, sp, #8
 8005170:	4603      	mov	r3, r0
 8005172:	6039      	str	r1, [r7, #0]
 8005174:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005176:	2301      	movs	r3, #1
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	2300      	movs	r3, #0
 800517c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2200      	movs	r2, #0
 8005186:	6939      	ldr	r1, [r7, #16]
 8005188:	6978      	ldr	r0, [r7, #20]
 800518a:	f7ff fee7 	bl	8004f5c <xQueueGenericCreateStatic>
 800518e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff ffb8 	bl	8005106 <prvInitialiseMutex>

		return xNewQueue;
 8005196:	68fb      	ldr	r3, [r7, #12]
	}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08e      	sub	sp, #56	; 0x38
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051ae:	2300      	movs	r3, #0
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <xQueueGenericSend+0x32>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d103      	bne.n	80051e0 <xQueueGenericSend+0x40>
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <xQueueGenericSend+0x44>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <xQueueGenericSend+0x46>
 80051e4:	2300      	movs	r3, #0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <xQueueGenericSend+0x60>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d103      	bne.n	800520e <xQueueGenericSend+0x6e>
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <xQueueGenericSend+0x72>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <xQueueGenericSend+0x74>
 8005212:	2300      	movs	r3, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10a      	bne.n	800522e <xQueueGenericSend+0x8e>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	623b      	str	r3, [r7, #32]
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800522e:	f001 f9bd 	bl	80065ac <xTaskGetSchedulerState>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <xQueueGenericSend+0x9e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <xQueueGenericSend+0xa2>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <xQueueGenericSend+0xa4>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <xQueueGenericSend+0xbe>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	61fb      	str	r3, [r7, #28]
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800525e:	f001 ff01 	bl	8007064 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	429a      	cmp	r2, r3
 800526c:	d302      	bcc.n	8005274 <xQueueGenericSend+0xd4>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d129      	bne.n	80052c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800527a:	f000 fa0b 	bl	8005694 <prvCopyDataToQueue>
 800527e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	2b00      	cmp	r3, #0
 8005286:	d010      	beq.n	80052aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	3324      	adds	r3, #36	; 0x24
 800528c:	4618      	mov	r0, r3
 800528e:	f000 ffcf 	bl	8006230 <xTaskRemoveFromEventList>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d013      	beq.n	80052c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005298:	4b3f      	ldr	r3, [pc, #252]	; (8005398 <xQueueGenericSend+0x1f8>)
 800529a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	e00a      	b.n	80052c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d007      	beq.n	80052c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052b0:	4b39      	ldr	r3, [pc, #228]	; (8005398 <xQueueGenericSend+0x1f8>)
 80052b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052c0:	f001 ff00 	bl	80070c4 <vPortExitCritical>
				return pdPASS;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e063      	b.n	8005390 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052ce:	f001 fef9 	bl	80070c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e05c      	b.n	8005390 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052dc:	f107 0314 	add.w	r3, r7, #20
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 f809 	bl	80062f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052e6:	2301      	movs	r3, #1
 80052e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052ea:	f001 feeb 	bl	80070c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052ee:	f000 fd7b 	bl	8005de8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052f2:	f001 feb7 	bl	8007064 <vPortEnterCritical>
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052fc:	b25b      	sxtb	r3, r3
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005302:	d103      	bne.n	800530c <xQueueGenericSend+0x16c>
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005312:	b25b      	sxtb	r3, r3
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005318:	d103      	bne.n	8005322 <xQueueGenericSend+0x182>
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005322:	f001 fecf 	bl	80070c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005326:	1d3a      	adds	r2, r7, #4
 8005328:	f107 0314 	add.w	r3, r7, #20
 800532c:	4611      	mov	r1, r2
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fff8 	bl	8006324 <xTaskCheckForTimeOut>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d124      	bne.n	8005384 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800533a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800533c:	f000 faa2 	bl	8005884 <prvIsQueueFull>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d018      	beq.n	8005378 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	3310      	adds	r3, #16
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	4611      	mov	r1, r2
 800534e:	4618      	mov	r0, r3
 8005350:	f000 ff1e 	bl	8006190 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005356:	f000 fa2d 	bl	80057b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800535a:	f000 fd53 	bl	8005e04 <xTaskResumeAll>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	f47f af7c 	bne.w	800525e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005366:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <xQueueGenericSend+0x1f8>)
 8005368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	e772      	b.n	800525e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800537a:	f000 fa1b 	bl	80057b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800537e:	f000 fd41 	bl	8005e04 <xTaskResumeAll>
 8005382:	e76c      	b.n	800525e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005386:	f000 fa15 	bl	80057b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800538a:	f000 fd3b 	bl	8005e04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800538e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005390:	4618      	mov	r0, r3
 8005392:	3738      	adds	r7, #56	; 0x38
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b090      	sub	sp, #64	; 0x40
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d103      	bne.n	80053d8 <xQueueGenericSendFromISR+0x3c>
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <xQueueGenericSendFromISR+0x40>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <xQueueGenericSendFromISR+0x42>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053f4:	bf00      	nop
 80053f6:	e7fe      	b.n	80053f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d103      	bne.n	8005406 <xQueueGenericSendFromISR+0x6a>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <xQueueGenericSendFromISR+0x6e>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <xQueueGenericSendFromISR+0x70>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	623b      	str	r3, [r7, #32]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005426:	f001 feff 	bl	8007228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800542a:	f3ef 8211 	mrs	r2, BASEPRI
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	61fa      	str	r2, [r7, #28]
 8005440:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005442:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005444:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <xQueueGenericSendFromISR+0xbc>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d12f      	bne.n	80054b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800545e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800546e:	f000 f911 	bl	8005694 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005472:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800547a:	d112      	bne.n	80054a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d016      	beq.n	80054b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	3324      	adds	r3, #36	; 0x24
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fed1 	bl	8006230 <xTaskRemoveFromEventList>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00e      	beq.n	80054b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	e007      	b.n	80054b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054a6:	3301      	adds	r3, #1
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	b25a      	sxtb	r2, r3
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054b2:	2301      	movs	r3, #1
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80054b6:	e001      	b.n	80054bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3740      	adds	r7, #64	; 0x40
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08c      	sub	sp, #48	; 0x30
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <xQueueReceive+0x30>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	623b      	str	r3, [r7, #32]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d103      	bne.n	8005512 <xQueueReceive+0x3e>
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <xQueueReceive+0x42>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <xQueueReceive+0x44>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <xQueueReceive+0x5e>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	61fb      	str	r3, [r7, #28]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005532:	f001 f83b 	bl	80065ac <xTaskGetSchedulerState>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <xQueueReceive+0x6e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <xQueueReceive+0x72>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <xQueueReceive+0x74>
 8005546:	2300      	movs	r3, #0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <xQueueReceive+0x8e>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	61bb      	str	r3, [r7, #24]
}
 800555e:	bf00      	nop
 8005560:	e7fe      	b.n	8005560 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005562:	f001 fd7f 	bl	8007064 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01f      	beq.n	80055b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005576:	f000 f8f7 	bl	8005768 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	1e5a      	subs	r2, r3, #1
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00f      	beq.n	80055aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	3310      	adds	r3, #16
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fe4e 	bl	8006230 <xTaskRemoveFromEventList>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800559a:	4b3d      	ldr	r3, [pc, #244]	; (8005690 <xQueueReceive+0x1bc>)
 800559c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055aa:	f001 fd8b 	bl	80070c4 <vPortExitCritical>
				return pdPASS;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e069      	b.n	8005686 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d103      	bne.n	80055c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055b8:	f001 fd84 	bl	80070c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055bc:	2300      	movs	r3, #0
 80055be:	e062      	b.n	8005686 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055c6:	f107 0310 	add.w	r3, r7, #16
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fe94 	bl	80062f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055d0:	2301      	movs	r3, #1
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055d4:	f001 fd76 	bl	80070c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055d8:	f000 fc06 	bl	8005de8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055dc:	f001 fd42 	bl	8007064 <vPortEnterCritical>
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ec:	d103      	bne.n	80055f6 <xQueueReceive+0x122>
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055fc:	b25b      	sxtb	r3, r3
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005602:	d103      	bne.n	800560c <xQueueReceive+0x138>
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800560c:	f001 fd5a 	bl	80070c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005610:	1d3a      	adds	r2, r7, #4
 8005612:	f107 0310 	add.w	r3, r7, #16
 8005616:	4611      	mov	r1, r2
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fe83 	bl	8006324 <xTaskCheckForTimeOut>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d123      	bne.n	800566c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005626:	f000 f917 	bl	8005858 <prvIsQueueEmpty>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d017      	beq.n	8005660 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	3324      	adds	r3, #36	; 0x24
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fda9 	bl	8006190 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800563e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005640:	f000 f8b8 	bl	80057b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005644:	f000 fbde 	bl	8005e04 <xTaskResumeAll>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d189      	bne.n	8005562 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800564e:	4b10      	ldr	r3, [pc, #64]	; (8005690 <xQueueReceive+0x1bc>)
 8005650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	e780      	b.n	8005562 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005662:	f000 f8a7 	bl	80057b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005666:	f000 fbcd 	bl	8005e04 <xTaskResumeAll>
 800566a:	e77a      	b.n	8005562 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800566c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800566e:	f000 f8a1 	bl	80057b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005672:	f000 fbc7 	bl	8005e04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005678:	f000 f8ee 	bl	8005858 <prvIsQueueEmpty>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	f43f af6f 	beq.w	8005562 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005684:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005686:	4618      	mov	r0, r3
 8005688:	3730      	adds	r7, #48	; 0x30
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10d      	bne.n	80056ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d14d      	bne.n	8005756 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 ff92 	bl	80065e8 <xTaskPriorityDisinherit>
 80056c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	609a      	str	r2, [r3, #8]
 80056cc:	e043      	b.n	8005756 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d119      	bne.n	8005708 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6858      	ldr	r0, [r3, #4]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	461a      	mov	r2, r3
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	f001 fff0 	bl	80076c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	441a      	add	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d32b      	bcc.n	8005756 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	e026      	b.n	8005756 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	68d8      	ldr	r0, [r3, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	461a      	mov	r2, r3
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	f001 ffd6 	bl	80076c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	425b      	negs	r3, r3
 8005722:	441a      	add	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d207      	bcs.n	8005744 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	425b      	negs	r3, r3
 800573e:	441a      	add	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d105      	bne.n	8005756 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	3b01      	subs	r3, #1
 8005754:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800575e:	697b      	ldr	r3, [r7, #20]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d018      	beq.n	80057ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	441a      	add	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	429a      	cmp	r2, r3
 8005792:	d303      	bcc.n	800579c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68d9      	ldr	r1, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	461a      	mov	r2, r3
 80057a6:	6838      	ldr	r0, [r7, #0]
 80057a8:	f001 ff8c 	bl	80076c4 <memcpy>
	}
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057bc:	f001 fc52 	bl	8007064 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057c8:	e011      	b.n	80057ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d012      	beq.n	80057f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3324      	adds	r3, #36	; 0x24
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fd2a 	bl	8006230 <xTaskRemoveFromEventList>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057e2:	f000 fe01 	bl	80063e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	dce9      	bgt.n	80057ca <prvUnlockQueue+0x16>
 80057f6:	e000      	b.n	80057fa <prvUnlockQueue+0x46>
					break;
 80057f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	22ff      	movs	r2, #255	; 0xff
 80057fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005802:	f001 fc5f 	bl	80070c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005806:	f001 fc2d 	bl	8007064 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005810:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005812:	e011      	b.n	8005838 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d012      	beq.n	8005842 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3310      	adds	r3, #16
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fd05 	bl	8006230 <xTaskRemoveFromEventList>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800582c:	f000 fddc 	bl	80063e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005830:	7bbb      	ldrb	r3, [r7, #14]
 8005832:	3b01      	subs	r3, #1
 8005834:	b2db      	uxtb	r3, r3
 8005836:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800583c:	2b00      	cmp	r3, #0
 800583e:	dce9      	bgt.n	8005814 <prvUnlockQueue+0x60>
 8005840:	e000      	b.n	8005844 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005842:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	22ff      	movs	r2, #255	; 0xff
 8005848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800584c:	f001 fc3a 	bl	80070c4 <vPortExitCritical>
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005860:	f001 fc00 	bl	8007064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800586c:	2301      	movs	r3, #1
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e001      	b.n	8005876 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005876:	f001 fc25 	bl	80070c4 <vPortExitCritical>

	return xReturn;
 800587a:	68fb      	ldr	r3, [r7, #12]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800588c:	f001 fbea 	bl	8007064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005898:	429a      	cmp	r2, r3
 800589a:	d102      	bne.n	80058a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800589c:	2301      	movs	r3, #1
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	e001      	b.n	80058a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058a6:	f001 fc0d 	bl	80070c4 <vPortExitCritical>

	return xReturn;
 80058aa:	68fb      	ldr	r3, [r7, #12]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	e014      	b.n	80058ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058c4:	4a0f      	ldr	r2, [pc, #60]	; (8005904 <vQueueAddToRegistry+0x50>)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10b      	bne.n	80058e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058d0:	490c      	ldr	r1, [pc, #48]	; (8005904 <vQueueAddToRegistry+0x50>)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058da:	4a0a      	ldr	r2, [pc, #40]	; (8005904 <vQueueAddToRegistry+0x50>)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4413      	add	r3, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058e6:	e006      	b.n	80058f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3301      	adds	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b07      	cmp	r3, #7
 80058f2:	d9e7      	bls.n	80058c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	200009e4 	.word	0x200009e4

08005908 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005918:	f001 fba4 	bl	8007064 <vPortEnterCritical>
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005922:	b25b      	sxtb	r3, r3
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005928:	d103      	bne.n	8005932 <vQueueWaitForMessageRestricted+0x2a>
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005938:	b25b      	sxtb	r3, r3
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800593e:	d103      	bne.n	8005948 <vQueueWaitForMessageRestricted+0x40>
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005948:	f001 fbbc 	bl	80070c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	3324      	adds	r3, #36	; 0x24
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fc3b 	bl	80061d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005962:	6978      	ldr	r0, [r7, #20]
 8005964:	f7ff ff26 	bl	80057b4 <prvUnlockQueue>
	}
 8005968:	bf00      	nop
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08e      	sub	sp, #56	; 0x38
 8005974:	af04      	add	r7, sp, #16
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	623b      	str	r3, [r7, #32]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	61fb      	str	r3, [r7, #28]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059b6:	235c      	movs	r3, #92	; 0x5c
 80059b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b5c      	cmp	r3, #92	; 0x5c
 80059be:	d00a      	beq.n	80059d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	61bb      	str	r3, [r7, #24]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01e      	beq.n	8005a1c <xTaskCreateStatic+0xac>
 80059de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01b      	beq.n	8005a1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059f6:	2300      	movs	r3, #0
 80059f8:	9303      	str	r3, [sp, #12]
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	9302      	str	r3, [sp, #8]
 80059fe:	f107 0314 	add.w	r3, r7, #20
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f850 	bl	8005ab4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a16:	f000 f8dd 	bl	8005bd4 <prvAddNewTaskToReadyList>
 8005a1a:	e001      	b.n	8005a20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a20:	697b      	ldr	r3, [r7, #20]
	}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3728      	adds	r7, #40	; 0x28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b08c      	sub	sp, #48	; 0x30
 8005a2e:	af04      	add	r7, sp, #16
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 fc32 	bl	80072a8 <pvPortMalloc>
 8005a44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00e      	beq.n	8005a6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a4c:	205c      	movs	r0, #92	; 0x5c
 8005a4e:	f001 fc2b 	bl	80072a8 <pvPortMalloc>
 8005a52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8005a60:	e005      	b.n	8005a6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a62:	6978      	ldr	r0, [r7, #20]
 8005a64:	f001 fcec 	bl	8007440 <vPortFree>
 8005a68:	e001      	b.n	8005a6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d017      	beq.n	8005aa4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a7c:	88fa      	ldrh	r2, [r7, #6]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9303      	str	r3, [sp, #12]
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	9302      	str	r3, [sp, #8]
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f80e 	bl	8005ab4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a98:	69f8      	ldr	r0, [r7, #28]
 8005a9a:	f000 f89b 	bl	8005bd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	e002      	b.n	8005aaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aa8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
	}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	461a      	mov	r2, r3
 8005acc:	21a5      	movs	r1, #165	; 0xa5
 8005ace:	f001 fe07 	bl	80076e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005adc:	3b01      	subs	r3, #1
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	f023 0307 	bic.w	r3, r3, #7
 8005aea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	617b      	str	r3, [r7, #20]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d01f      	beq.n	8005b52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
 8005b16:	e012      	b.n	8005b3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	7819      	ldrb	r1, [r3, #0]
 8005b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	3334      	adds	r3, #52	; 0x34
 8005b28:	460a      	mov	r2, r1
 8005b2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4413      	add	r3, r2
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d006      	beq.n	8005b46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	2b0f      	cmp	r3, #15
 8005b42:	d9e9      	bls.n	8005b18 <prvInitialiseNewTask+0x64>
 8005b44:	e000      	b.n	8005b48 <prvInitialiseNewTask+0x94>
			{
				break;
 8005b46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b50:	e003      	b.n	8005b5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	2b37      	cmp	r3, #55	; 0x37
 8005b5e:	d901      	bls.n	8005b64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b60:	2337      	movs	r3, #55	; 0x37
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	2200      	movs	r2, #0
 8005b74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff f8f2 	bl	8004d64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	3318      	adds	r3, #24
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff f8ed 	bl	8004d64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	68f9      	ldr	r1, [r7, #12]
 8005bb2:	69b8      	ldr	r0, [r7, #24]
 8005bb4:	f001 f928 	bl	8006e08 <pxPortInitialiseStack>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bca:	bf00      	nop
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bdc:	f001 fa42 	bl	8007064 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005be0:	4b2d      	ldr	r3, [pc, #180]	; (8005c98 <prvAddNewTaskToReadyList+0xc4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3301      	adds	r3, #1
 8005be6:	4a2c      	ldr	r2, [pc, #176]	; (8005c98 <prvAddNewTaskToReadyList+0xc4>)
 8005be8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bea:	4b2c      	ldr	r3, [pc, #176]	; (8005c9c <prvAddNewTaskToReadyList+0xc8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bf2:	4a2a      	ldr	r2, [pc, #168]	; (8005c9c <prvAddNewTaskToReadyList+0xc8>)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bf8:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <prvAddNewTaskToReadyList+0xc4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d110      	bne.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c00:	f000 fc16 	bl	8006430 <prvInitialiseTaskLists>
 8005c04:	e00d      	b.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c06:	4b26      	ldr	r3, [pc, #152]	; (8005ca0 <prvAddNewTaskToReadyList+0xcc>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c0e:	4b23      	ldr	r3, [pc, #140]	; (8005c9c <prvAddNewTaskToReadyList+0xc8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d802      	bhi.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c1c:	4a1f      	ldr	r2, [pc, #124]	; (8005c9c <prvAddNewTaskToReadyList+0xc8>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c22:	4b20      	ldr	r3, [pc, #128]	; (8005ca4 <prvAddNewTaskToReadyList+0xd0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	4a1e      	ldr	r2, [pc, #120]	; (8005ca4 <prvAddNewTaskToReadyList+0xd0>)
 8005c2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ca4 <prvAddNewTaskToReadyList+0xd0>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c38:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <prvAddNewTaskToReadyList+0xd4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d903      	bls.n	8005c48 <prvAddNewTaskToReadyList+0x74>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <prvAddNewTaskToReadyList+0xd4>)
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4a15      	ldr	r2, [pc, #84]	; (8005cac <prvAddNewTaskToReadyList+0xd8>)
 8005c56:	441a      	add	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7ff f88d 	bl	8004d7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c64:	f001 fa2e 	bl	80070c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <prvAddNewTaskToReadyList+0xcc>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <prvAddNewTaskToReadyList+0xc8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d207      	bcs.n	8005c8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <prvAddNewTaskToReadyList+0xdc>)
 8005c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000ef8 	.word	0x20000ef8
 8005c9c:	20000a24 	.word	0x20000a24
 8005ca0:	20000f04 	.word	0x20000f04
 8005ca4:	20000f14 	.word	0x20000f14
 8005ca8:	20000f00 	.word	0x20000f00
 8005cac:	20000a28 	.word	0x20000a28
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d017      	beq.n	8005cf6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cc6:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <vTaskDelay+0x60>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <vTaskDelay+0x30>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60bb      	str	r3, [r7, #8]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ce4:	f000 f880 	bl	8005de8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ce8:	2100      	movs	r1, #0
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fcea 	bl	80066c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cf0:	f000 f888 	bl	8005e04 <xTaskResumeAll>
 8005cf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d107      	bne.n	8005d0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <vTaskDelay+0x64>)
 8005cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000f20 	.word	0x20000f20
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	; 0x28
 8005d20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d2a:	463a      	mov	r2, r7
 8005d2c:	1d39      	adds	r1, r7, #4
 8005d2e:	f107 0308 	add.w	r3, r7, #8
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe ffc2 	bl	8004cbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	9202      	str	r2, [sp, #8]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	2300      	movs	r3, #0
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	2300      	movs	r3, #0
 8005d48:	460a      	mov	r2, r1
 8005d4a:	4921      	ldr	r1, [pc, #132]	; (8005dd0 <vTaskStartScheduler+0xb4>)
 8005d4c:	4821      	ldr	r0, [pc, #132]	; (8005dd4 <vTaskStartScheduler+0xb8>)
 8005d4e:	f7ff fe0f 	bl	8005970 <xTaskCreateStatic>
 8005d52:	4603      	mov	r3, r0
 8005d54:	4a20      	ldr	r2, [pc, #128]	; (8005dd8 <vTaskStartScheduler+0xbc>)
 8005d56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d58:	4b1f      	ldr	r3, [pc, #124]	; (8005dd8 <vTaskStartScheduler+0xbc>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d60:	2301      	movs	r3, #1
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e001      	b.n	8005d6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d102      	bne.n	8005d76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d70:	f000 fcfc 	bl	800676c <xTimerCreateTimerTask>
 8005d74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d116      	bne.n	8005daa <vTaskStartScheduler+0x8e>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	613b      	str	r3, [r7, #16]
}
 8005d8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d90:	4b12      	ldr	r3, [pc, #72]	; (8005ddc <vTaskStartScheduler+0xc0>)
 8005d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d98:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <vTaskStartScheduler+0xc4>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d9e:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <vTaskStartScheduler+0xc8>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005da4:	f001 f8bc 	bl	8006f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005da8:	e00e      	b.n	8005dc8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db0:	d10a      	bne.n	8005dc8 <vTaskStartScheduler+0xac>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	60fb      	str	r3, [r7, #12]
}
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <vTaskStartScheduler+0xaa>
}
 8005dc8:	bf00      	nop
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	08007750 	.word	0x08007750
 8005dd4:	08006401 	.word	0x08006401
 8005dd8:	20000f1c 	.word	0x20000f1c
 8005ddc:	20000f18 	.word	0x20000f18
 8005de0:	20000f04 	.word	0x20000f04
 8005de4:	20000efc 	.word	0x20000efc

08005de8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005dec:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <vTaskSuspendAll+0x18>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	4a03      	ldr	r2, [pc, #12]	; (8005e00 <vTaskSuspendAll+0x18>)
 8005df4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005df6:	bf00      	nop
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000f20 	.word	0x20000f20

08005e04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e12:	4b42      	ldr	r3, [pc, #264]	; (8005f1c <xTaskResumeAll+0x118>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	603b      	str	r3, [r7, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	e7fe      	b.n	8005e2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e30:	f001 f918 	bl	8007064 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e34:	4b39      	ldr	r3, [pc, #228]	; (8005f1c <xTaskResumeAll+0x118>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	4a38      	ldr	r2, [pc, #224]	; (8005f1c <xTaskResumeAll+0x118>)
 8005e3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e3e:	4b37      	ldr	r3, [pc, #220]	; (8005f1c <xTaskResumeAll+0x118>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d162      	bne.n	8005f0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e46:	4b36      	ldr	r3, [pc, #216]	; (8005f20 <xTaskResumeAll+0x11c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d05e      	beq.n	8005f0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e4e:	e02f      	b.n	8005eb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e50:	4b34      	ldr	r3, [pc, #208]	; (8005f24 <xTaskResumeAll+0x120>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3318      	adds	r3, #24
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe ffeb 	bl	8004e38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe ffe6 	bl	8004e38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e70:	4b2d      	ldr	r3, [pc, #180]	; (8005f28 <xTaskResumeAll+0x124>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d903      	bls.n	8005e80 <xTaskResumeAll+0x7c>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	4a2a      	ldr	r2, [pc, #168]	; (8005f28 <xTaskResumeAll+0x124>)
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4a27      	ldr	r2, [pc, #156]	; (8005f2c <xTaskResumeAll+0x128>)
 8005e8e:	441a      	add	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4619      	mov	r1, r3
 8005e96:	4610      	mov	r0, r2
 8005e98:	f7fe ff71 	bl	8004d7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	4b23      	ldr	r3, [pc, #140]	; (8005f30 <xTaskResumeAll+0x12c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d302      	bcc.n	8005eb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005eaa:	4b22      	ldr	r3, [pc, #136]	; (8005f34 <xTaskResumeAll+0x130>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eb0:	4b1c      	ldr	r3, [pc, #112]	; (8005f24 <xTaskResumeAll+0x120>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1cb      	bne.n	8005e50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ebe:	f000 fb55 	bl	800656c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ec2:	4b1d      	ldr	r3, [pc, #116]	; (8005f38 <xTaskResumeAll+0x134>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d010      	beq.n	8005ef0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ece:	f000 f847 	bl	8005f60 <xTaskIncrementTick>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ed8:	4b16      	ldr	r3, [pc, #88]	; (8005f34 <xTaskResumeAll+0x130>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f1      	bne.n	8005ece <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005eea:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <xTaskResumeAll+0x134>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ef0:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <xTaskResumeAll+0x130>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <xTaskResumeAll+0x138>)
 8005efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f0c:	f001 f8da 	bl	80070c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005f10:	68bb      	ldr	r3, [r7, #8]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000f20 	.word	0x20000f20
 8005f20:	20000ef8 	.word	0x20000ef8
 8005f24:	20000eb8 	.word	0x20000eb8
 8005f28:	20000f00 	.word	0x20000f00
 8005f2c:	20000a28 	.word	0x20000a28
 8005f30:	20000a24 	.word	0x20000a24
 8005f34:	20000f0c 	.word	0x20000f0c
 8005f38:	20000f08 	.word	0x20000f08
 8005f3c:	e000ed04 	.word	0xe000ed04

08005f40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f46:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <xTaskGetTickCount+0x1c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f4c:	687b      	ldr	r3, [r7, #4]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	20000efc 	.word	0x20000efc

08005f60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f6a:	4b4f      	ldr	r3, [pc, #316]	; (80060a8 <xTaskIncrementTick+0x148>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f040 808f 	bne.w	8006092 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f74:	4b4d      	ldr	r3, [pc, #308]	; (80060ac <xTaskIncrementTick+0x14c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f7c:	4a4b      	ldr	r2, [pc, #300]	; (80060ac <xTaskIncrementTick+0x14c>)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d120      	bne.n	8005fca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f88:	4b49      	ldr	r3, [pc, #292]	; (80060b0 <xTaskIncrementTick+0x150>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	603b      	str	r3, [r7, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <xTaskIncrementTick+0x46>
 8005fa8:	4b41      	ldr	r3, [pc, #260]	; (80060b0 <xTaskIncrementTick+0x150>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	4b41      	ldr	r3, [pc, #260]	; (80060b4 <xTaskIncrementTick+0x154>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a3f      	ldr	r2, [pc, #252]	; (80060b0 <xTaskIncrementTick+0x150>)
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	4a3f      	ldr	r2, [pc, #252]	; (80060b4 <xTaskIncrementTick+0x154>)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4b3e      	ldr	r3, [pc, #248]	; (80060b8 <xTaskIncrementTick+0x158>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	4a3d      	ldr	r2, [pc, #244]	; (80060b8 <xTaskIncrementTick+0x158>)
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	f000 fad1 	bl	800656c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fca:	4b3c      	ldr	r3, [pc, #240]	; (80060bc <xTaskIncrementTick+0x15c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d349      	bcc.n	8006068 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fd4:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <xTaskIncrementTick+0x150>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d104      	bne.n	8005fe8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fde:	4b37      	ldr	r3, [pc, #220]	; (80060bc <xTaskIncrementTick+0x15c>)
 8005fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fe4:	601a      	str	r2, [r3, #0]
					break;
 8005fe6:	e03f      	b.n	8006068 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe8:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <xTaskIncrementTick+0x150>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d203      	bcs.n	8006008 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006000:	4a2e      	ldr	r2, [pc, #184]	; (80060bc <xTaskIncrementTick+0x15c>)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006006:	e02f      	b.n	8006068 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	3304      	adds	r3, #4
 800600c:	4618      	mov	r0, r3
 800600e:	f7fe ff13 	bl	8004e38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	2b00      	cmp	r3, #0
 8006018:	d004      	beq.n	8006024 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	3318      	adds	r3, #24
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe ff0a 	bl	8004e38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006028:	4b25      	ldr	r3, [pc, #148]	; (80060c0 <xTaskIncrementTick+0x160>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d903      	bls.n	8006038 <xTaskIncrementTick+0xd8>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <xTaskIncrementTick+0x160>)
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4a1f      	ldr	r2, [pc, #124]	; (80060c4 <xTaskIncrementTick+0x164>)
 8006046:	441a      	add	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f7fe fe95 	bl	8004d7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <xTaskIncrementTick+0x168>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	429a      	cmp	r2, r3
 8006060:	d3b8      	bcc.n	8005fd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006062:	2301      	movs	r3, #1
 8006064:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006066:	e7b5      	b.n	8005fd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006068:	4b17      	ldr	r3, [pc, #92]	; (80060c8 <xTaskIncrementTick+0x168>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606e:	4915      	ldr	r1, [pc, #84]	; (80060c4 <xTaskIncrementTick+0x164>)
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d901      	bls.n	8006084 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006080:	2301      	movs	r3, #1
 8006082:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006084:	4b11      	ldr	r3, [pc, #68]	; (80060cc <xTaskIncrementTick+0x16c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800608c:	2301      	movs	r3, #1
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	e004      	b.n	800609c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006092:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <xTaskIncrementTick+0x170>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3301      	adds	r3, #1
 8006098:	4a0d      	ldr	r2, [pc, #52]	; (80060d0 <xTaskIncrementTick+0x170>)
 800609a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800609c:	697b      	ldr	r3, [r7, #20]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000f20 	.word	0x20000f20
 80060ac:	20000efc 	.word	0x20000efc
 80060b0:	20000eb0 	.word	0x20000eb0
 80060b4:	20000eb4 	.word	0x20000eb4
 80060b8:	20000f10 	.word	0x20000f10
 80060bc:	20000f18 	.word	0x20000f18
 80060c0:	20000f00 	.word	0x20000f00
 80060c4:	20000a28 	.word	0x20000a28
 80060c8:	20000a24 	.word	0x20000a24
 80060cc:	20000f0c 	.word	0x20000f0c
 80060d0:	20000f08 	.word	0x20000f08

080060d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060da:	4b28      	ldr	r3, [pc, #160]	; (800617c <vTaskSwitchContext+0xa8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060e2:	4b27      	ldr	r3, [pc, #156]	; (8006180 <vTaskSwitchContext+0xac>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060e8:	e041      	b.n	800616e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80060ea:	4b25      	ldr	r3, [pc, #148]	; (8006180 <vTaskSwitchContext+0xac>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f0:	4b24      	ldr	r3, [pc, #144]	; (8006184 <vTaskSwitchContext+0xb0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	e010      	b.n	800611a <vTaskSwitchContext+0x46>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <vTaskSwitchContext+0x40>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	607b      	str	r3, [r7, #4]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <vTaskSwitchContext+0x3e>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3b01      	subs	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	491b      	ldr	r1, [pc, #108]	; (8006188 <vTaskSwitchContext+0xb4>)
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0e4      	beq.n	80060f8 <vTaskSwitchContext+0x24>
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4a13      	ldr	r2, [pc, #76]	; (8006188 <vTaskSwitchContext+0xb4>)
 800613a:	4413      	add	r3, r2
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	605a      	str	r2, [r3, #4]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	3308      	adds	r3, #8
 8006150:	429a      	cmp	r2, r3
 8006152:	d104      	bne.n	800615e <vTaskSwitchContext+0x8a>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	4a09      	ldr	r2, [pc, #36]	; (800618c <vTaskSwitchContext+0xb8>)
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	4a06      	ldr	r2, [pc, #24]	; (8006184 <vTaskSwitchContext+0xb0>)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6013      	str	r3, [r2, #0]
}
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000f20 	.word	0x20000f20
 8006180:	20000f0c 	.word	0x20000f0c
 8006184:	20000f00 	.word	0x20000f00
 8006188:	20000a28 	.word	0x20000a28
 800618c:	20000a24 	.word	0x20000a24

08006190 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	60fb      	str	r3, [r7, #12]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061b6:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <vTaskPlaceOnEventList+0x44>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3318      	adds	r3, #24
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fe fe01 	bl	8004dc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061c4:	2101      	movs	r1, #1
 80061c6:	6838      	ldr	r0, [r7, #0]
 80061c8:	f000 fa7c 	bl	80066c4 <prvAddCurrentTaskToDelayedList>
}
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20000a24 	.word	0x20000a24

080061d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	617b      	str	r3, [r7, #20]
}
 80061fc:	bf00      	nop
 80061fe:	e7fe      	b.n	80061fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <vTaskPlaceOnEventListRestricted+0x54>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3318      	adds	r3, #24
 8006206:	4619      	mov	r1, r3
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7fe fdb8 	bl	8004d7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006218:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	68b8      	ldr	r0, [r7, #8]
 800621e:	f000 fa51 	bl	80066c4 <prvAddCurrentTaskToDelayedList>
	}
 8006222:	bf00      	nop
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000a24 	.word	0x20000a24

08006230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10a      	bne.n	800625c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	60fb      	str	r3, [r7, #12]
}
 8006258:	bf00      	nop
 800625a:	e7fe      	b.n	800625a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	3318      	adds	r3, #24
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe fde9 	bl	8004e38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006266:	4b1e      	ldr	r3, [pc, #120]	; (80062e0 <xTaskRemoveFromEventList+0xb0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d11d      	bne.n	80062aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	3304      	adds	r3, #4
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fde0 	bl	8004e38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627c:	4b19      	ldr	r3, [pc, #100]	; (80062e4 <xTaskRemoveFromEventList+0xb4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d903      	bls.n	800628c <xTaskRemoveFromEventList+0x5c>
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <xTaskRemoveFromEventList+0xb4>)
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4a13      	ldr	r2, [pc, #76]	; (80062e8 <xTaskRemoveFromEventList+0xb8>)
 800629a:	441a      	add	r2, r3
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	3304      	adds	r3, #4
 80062a0:	4619      	mov	r1, r3
 80062a2:	4610      	mov	r0, r2
 80062a4:	f7fe fd6b 	bl	8004d7e <vListInsertEnd>
 80062a8:	e005      	b.n	80062b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3318      	adds	r3, #24
 80062ae:	4619      	mov	r1, r3
 80062b0:	480e      	ldr	r0, [pc, #56]	; (80062ec <xTaskRemoveFromEventList+0xbc>)
 80062b2:	f7fe fd64 	bl	8004d7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ba:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <xTaskRemoveFromEventList+0xc0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d905      	bls.n	80062d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062c4:	2301      	movs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062c8:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <xTaskRemoveFromEventList+0xc4>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e001      	b.n	80062d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80062d4:	697b      	ldr	r3, [r7, #20]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000f20 	.word	0x20000f20
 80062e4:	20000f00 	.word	0x20000f00
 80062e8:	20000a28 	.word	0x20000a28
 80062ec:	20000eb8 	.word	0x20000eb8
 80062f0:	20000a24 	.word	0x20000a24
 80062f4:	20000f0c 	.word	0x20000f0c

080062f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006300:	4b06      	ldr	r3, [pc, #24]	; (800631c <vTaskInternalSetTimeOutState+0x24>)
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006308:	4b05      	ldr	r3, [pc, #20]	; (8006320 <vTaskInternalSetTimeOutState+0x28>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	605a      	str	r2, [r3, #4]
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	20000f10 	.word	0x20000f10
 8006320:	20000efc 	.word	0x20000efc

08006324 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	613b      	str	r3, [r7, #16]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	60fb      	str	r3, [r7, #12]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006366:	f000 fe7d 	bl	8007064 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800636a:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <xTaskCheckForTimeOut+0xbc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006382:	d102      	bne.n	800638a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006384:	2300      	movs	r3, #0
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	e023      	b.n	80063d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <xTaskCheckForTimeOut+0xc0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d007      	beq.n	80063a6 <xTaskCheckForTimeOut+0x82>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	429a      	cmp	r2, r3
 800639e:	d302      	bcc.n	80063a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063a0:	2301      	movs	r3, #1
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	e015      	b.n	80063d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d20b      	bcs.n	80063c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	1ad2      	subs	r2, r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff ff9b 	bl	80062f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	e004      	b.n	80063d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063ce:	2301      	movs	r3, #1
 80063d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063d2:	f000 fe77 	bl	80070c4 <vPortExitCritical>

	return xReturn;
 80063d6:	69fb      	ldr	r3, [r7, #28]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20000efc 	.word	0x20000efc
 80063e4:	20000f10 	.word	0x20000f10

080063e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <vTaskMissedYield+0x14>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	601a      	str	r2, [r3, #0]
}
 80063f2:	bf00      	nop
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	20000f0c 	.word	0x20000f0c

08006400 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006408:	f000 f852 	bl	80064b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <prvIdleTask+0x28>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d9f9      	bls.n	8006408 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006414:	4b05      	ldr	r3, [pc, #20]	; (800642c <prvIdleTask+0x2c>)
 8006416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006424:	e7f0      	b.n	8006408 <prvIdleTask+0x8>
 8006426:	bf00      	nop
 8006428:	20000a28 	.word	0x20000a28
 800642c:	e000ed04 	.word	0xe000ed04

08006430 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006436:	2300      	movs	r3, #0
 8006438:	607b      	str	r3, [r7, #4]
 800643a:	e00c      	b.n	8006456 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4a12      	ldr	r2, [pc, #72]	; (8006490 <prvInitialiseTaskLists+0x60>)
 8006448:	4413      	add	r3, r2
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fc6a 	bl	8004d24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3301      	adds	r3, #1
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b37      	cmp	r3, #55	; 0x37
 800645a:	d9ef      	bls.n	800643c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800645c:	480d      	ldr	r0, [pc, #52]	; (8006494 <prvInitialiseTaskLists+0x64>)
 800645e:	f7fe fc61 	bl	8004d24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006462:	480d      	ldr	r0, [pc, #52]	; (8006498 <prvInitialiseTaskLists+0x68>)
 8006464:	f7fe fc5e 	bl	8004d24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006468:	480c      	ldr	r0, [pc, #48]	; (800649c <prvInitialiseTaskLists+0x6c>)
 800646a:	f7fe fc5b 	bl	8004d24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800646e:	480c      	ldr	r0, [pc, #48]	; (80064a0 <prvInitialiseTaskLists+0x70>)
 8006470:	f7fe fc58 	bl	8004d24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006474:	480b      	ldr	r0, [pc, #44]	; (80064a4 <prvInitialiseTaskLists+0x74>)
 8006476:	f7fe fc55 	bl	8004d24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800647a:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <prvInitialiseTaskLists+0x78>)
 800647c:	4a05      	ldr	r2, [pc, #20]	; (8006494 <prvInitialiseTaskLists+0x64>)
 800647e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006480:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <prvInitialiseTaskLists+0x7c>)
 8006482:	4a05      	ldr	r2, [pc, #20]	; (8006498 <prvInitialiseTaskLists+0x68>)
 8006484:	601a      	str	r2, [r3, #0]
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000a28 	.word	0x20000a28
 8006494:	20000e88 	.word	0x20000e88
 8006498:	20000e9c 	.word	0x20000e9c
 800649c:	20000eb8 	.word	0x20000eb8
 80064a0:	20000ecc 	.word	0x20000ecc
 80064a4:	20000ee4 	.word	0x20000ee4
 80064a8:	20000eb0 	.word	0x20000eb0
 80064ac:	20000eb4 	.word	0x20000eb4

080064b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064b6:	e019      	b.n	80064ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064b8:	f000 fdd4 	bl	8007064 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064bc:	4b10      	ldr	r3, [pc, #64]	; (8006500 <prvCheckTasksWaitingTermination+0x50>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe fcb5 	bl	8004e38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064ce:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <prvCheckTasksWaitingTermination+0x54>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	4a0b      	ldr	r2, [pc, #44]	; (8006504 <prvCheckTasksWaitingTermination+0x54>)
 80064d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064d8:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <prvCheckTasksWaitingTermination+0x58>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3b01      	subs	r3, #1
 80064de:	4a0a      	ldr	r2, [pc, #40]	; (8006508 <prvCheckTasksWaitingTermination+0x58>)
 80064e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064e2:	f000 fdef 	bl	80070c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f810 	bl	800650c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064ec:	4b06      	ldr	r3, [pc, #24]	; (8006508 <prvCheckTasksWaitingTermination+0x58>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e1      	bne.n	80064b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000ecc 	.word	0x20000ecc
 8006504:	20000ef8 	.word	0x20000ef8
 8006508:	20000ee0 	.word	0x20000ee0

0800650c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800651a:	2b00      	cmp	r3, #0
 800651c:	d108      	bne.n	8006530 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	4618      	mov	r0, r3
 8006524:	f000 ff8c 	bl	8007440 <vPortFree>
				vPortFree( pxTCB );
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 ff89 	bl	8007440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800652e:	e018      	b.n	8006562 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006536:	2b01      	cmp	r3, #1
 8006538:	d103      	bne.n	8006542 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 ff80 	bl	8007440 <vPortFree>
	}
 8006540:	e00f      	b.n	8006562 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006548:	2b02      	cmp	r3, #2
 800654a:	d00a      	beq.n	8006562 <prvDeleteTCB+0x56>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	60fb      	str	r3, [r7, #12]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <prvDeleteTCB+0x54>
	}
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006572:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <prvResetNextTaskUnblockTime+0x38>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <prvResetNextTaskUnblockTime+0x3c>)
 800657e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006582:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006584:	e008      	b.n	8006598 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006586:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <prvResetNextTaskUnblockTime+0x38>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <prvResetNextTaskUnblockTime+0x3c>)
 8006596:	6013      	str	r3, [r2, #0]
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	20000eb0 	.word	0x20000eb0
 80065a8:	20000f18 	.word	0x20000f18

080065ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <xTaskGetSchedulerState+0x34>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065ba:	2301      	movs	r3, #1
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	e008      	b.n	80065d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c0:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <xTaskGetSchedulerState+0x38>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065c8:	2302      	movs	r3, #2
 80065ca:	607b      	str	r3, [r7, #4]
 80065cc:	e001      	b.n	80065d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065ce:	2300      	movs	r3, #0
 80065d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065d2:	687b      	ldr	r3, [r7, #4]
	}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	20000f04 	.word	0x20000f04
 80065e4:	20000f20 	.word	0x20000f20

080065e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d056      	beq.n	80066ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065fe:	4b2e      	ldr	r3, [pc, #184]	; (80066b8 <xTaskPriorityDisinherit+0xd0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	429a      	cmp	r2, r3
 8006606:	d00a      	beq.n	800661e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	60fb      	str	r3, [r7, #12]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10a      	bne.n	800663c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	60bb      	str	r3, [r7, #8]
}
 8006638:	bf00      	nop
 800663a:	e7fe      	b.n	800663a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006640:	1e5a      	subs	r2, r3, #1
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664e:	429a      	cmp	r2, r3
 8006650:	d02c      	beq.n	80066ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006656:	2b00      	cmp	r3, #0
 8006658:	d128      	bne.n	80066ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	3304      	adds	r3, #4
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fbea 	bl	8004e38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	4b0f      	ldr	r3, [pc, #60]	; (80066bc <xTaskPriorityDisinherit+0xd4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d903      	bls.n	800668c <xTaskPriorityDisinherit+0xa4>
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	4a0c      	ldr	r2, [pc, #48]	; (80066bc <xTaskPriorityDisinherit+0xd4>)
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4a09      	ldr	r2, [pc, #36]	; (80066c0 <xTaskPriorityDisinherit+0xd8>)
 800669a:	441a      	add	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3304      	adds	r3, #4
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	f7fe fb6b 	bl	8004d7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066a8:	2301      	movs	r3, #1
 80066aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066ac:	697b      	ldr	r3, [r7, #20]
	}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000a24 	.word	0x20000a24
 80066bc:	20000f00 	.word	0x20000f00
 80066c0:	20000a28 	.word	0x20000a28

080066c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066ce:	4b21      	ldr	r3, [pc, #132]	; (8006754 <prvAddCurrentTaskToDelayedList+0x90>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066d4:	4b20      	ldr	r3, [pc, #128]	; (8006758 <prvAddCurrentTaskToDelayedList+0x94>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3304      	adds	r3, #4
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fbac 	bl	8004e38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e6:	d10a      	bne.n	80066fe <prvAddCurrentTaskToDelayedList+0x3a>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ee:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <prvAddCurrentTaskToDelayedList+0x94>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4619      	mov	r1, r3
 80066f6:	4819      	ldr	r0, [pc, #100]	; (800675c <prvAddCurrentTaskToDelayedList+0x98>)
 80066f8:	f7fe fb41 	bl	8004d7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066fc:	e026      	b.n	800674c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <prvAddCurrentTaskToDelayedList+0x94>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	429a      	cmp	r2, r3
 8006714:	d209      	bcs.n	800672a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006716:	4b12      	ldr	r3, [pc, #72]	; (8006760 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4b0f      	ldr	r3, [pc, #60]	; (8006758 <prvAddCurrentTaskToDelayedList+0x94>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7fe fb4f 	bl	8004dc6 <vListInsert>
}
 8006728:	e010      	b.n	800674c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800672a:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <prvAddCurrentTaskToDelayedList+0xa0>)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <prvAddCurrentTaskToDelayedList+0x94>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3304      	adds	r3, #4
 8006734:	4619      	mov	r1, r3
 8006736:	4610      	mov	r0, r2
 8006738:	f7fe fb45 	bl	8004dc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <prvAddCurrentTaskToDelayedList+0xa4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	429a      	cmp	r2, r3
 8006744:	d202      	bcs.n	800674c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6013      	str	r3, [r2, #0]
}
 800674c:	bf00      	nop
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000efc 	.word	0x20000efc
 8006758:	20000a24 	.word	0x20000a24
 800675c:	20000ee4 	.word	0x20000ee4
 8006760:	20000eb4 	.word	0x20000eb4
 8006764:	20000eb0 	.word	0x20000eb0
 8006768:	20000f18 	.word	0x20000f18

0800676c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08a      	sub	sp, #40	; 0x28
 8006770:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006776:	f000 fb07 	bl	8006d88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800677a:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <xTimerCreateTimerTask+0x80>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d021      	beq.n	80067c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800678a:	1d3a      	adds	r2, r7, #4
 800678c:	f107 0108 	add.w	r1, r7, #8
 8006790:	f107 030c 	add.w	r3, r7, #12
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe faab 	bl	8004cf0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	9202      	str	r2, [sp, #8]
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	2302      	movs	r3, #2
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	2300      	movs	r3, #0
 80067aa:	460a      	mov	r2, r1
 80067ac:	4910      	ldr	r1, [pc, #64]	; (80067f0 <xTimerCreateTimerTask+0x84>)
 80067ae:	4811      	ldr	r0, [pc, #68]	; (80067f4 <xTimerCreateTimerTask+0x88>)
 80067b0:	f7ff f8de 	bl	8005970 <xTaskCreateStatic>
 80067b4:	4603      	mov	r3, r0
 80067b6:	4a10      	ldr	r2, [pc, #64]	; (80067f8 <xTimerCreateTimerTask+0x8c>)
 80067b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80067ba:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <xTimerCreateTimerTask+0x8c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80067c2:	2301      	movs	r3, #1
 80067c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	613b      	str	r3, [r7, #16]
}
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80067e2:	697b      	ldr	r3, [r7, #20]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000f54 	.word	0x20000f54
 80067f0:	08007758 	.word	0x08007758
 80067f4:	08006931 	.word	0x08006931
 80067f8:	20000f58 	.word	0x20000f58

080067fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	; 0x28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800680a:	2300      	movs	r3, #0
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	623b      	str	r3, [r7, #32]
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800682a:	4b1a      	ldr	r3, [pc, #104]	; (8006894 <xTimerGenericCommand+0x98>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d02a      	beq.n	8006888 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b05      	cmp	r3, #5
 8006842:	dc18      	bgt.n	8006876 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006844:	f7ff feb2 	bl	80065ac <xTaskGetSchedulerState>
 8006848:	4603      	mov	r3, r0
 800684a:	2b02      	cmp	r3, #2
 800684c:	d109      	bne.n	8006862 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800684e:	4b11      	ldr	r3, [pc, #68]	; (8006894 <xTimerGenericCommand+0x98>)
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	f107 0110 	add.w	r1, r7, #16
 8006856:	2300      	movs	r3, #0
 8006858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685a:	f7fe fca1 	bl	80051a0 <xQueueGenericSend>
 800685e:	6278      	str	r0, [r7, #36]	; 0x24
 8006860:	e012      	b.n	8006888 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006862:	4b0c      	ldr	r3, [pc, #48]	; (8006894 <xTimerGenericCommand+0x98>)
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	f107 0110 	add.w	r1, r7, #16
 800686a:	2300      	movs	r3, #0
 800686c:	2200      	movs	r2, #0
 800686e:	f7fe fc97 	bl	80051a0 <xQueueGenericSend>
 8006872:	6278      	str	r0, [r7, #36]	; 0x24
 8006874:	e008      	b.n	8006888 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006876:	4b07      	ldr	r3, [pc, #28]	; (8006894 <xTimerGenericCommand+0x98>)
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	f107 0110 	add.w	r1, r7, #16
 800687e:	2300      	movs	r3, #0
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	f7fe fd8b 	bl	800539c <xQueueGenericSendFromISR>
 8006886:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800688a:	4618      	mov	r0, r3
 800688c:	3728      	adds	r7, #40	; 0x28
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000f54 	.word	0x20000f54

08006898 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af02      	add	r7, sp, #8
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a2:	4b22      	ldr	r3, [pc, #136]	; (800692c <prvProcessExpiredTimer+0x94>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe fac1 	bl	8004e38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d022      	beq.n	800690a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	18d1      	adds	r1, r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	6978      	ldr	r0, [r7, #20]
 80068d2:	f000 f8d1 	bl	8006a78 <prvInsertTimerInActiveList>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01f      	beq.n	800691c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068dc:	2300      	movs	r3, #0
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	2300      	movs	r3, #0
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	2100      	movs	r1, #0
 80068e6:	6978      	ldr	r0, [r7, #20]
 80068e8:	f7ff ff88 	bl	80067fc <xTimerGenericCommand>
 80068ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d113      	bne.n	800691c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	60fb      	str	r3, [r7, #12]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	b2da      	uxtb	r2, r3
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	6978      	ldr	r0, [r7, #20]
 8006922:	4798      	blx	r3
}
 8006924:	bf00      	nop
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000f4c 	.word	0x20000f4c

08006930 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006938:	f107 0308 	add.w	r3, r7, #8
 800693c:	4618      	mov	r0, r3
 800693e:	f000 f857 	bl	80069f0 <prvGetNextExpireTime>
 8006942:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4619      	mov	r1, r3
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 f803 	bl	8006954 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800694e:	f000 f8d5 	bl	8006afc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006952:	e7f1      	b.n	8006938 <prvTimerTask+0x8>

08006954 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800695e:	f7ff fa43 	bl	8005de8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006962:	f107 0308 	add.w	r3, r7, #8
 8006966:	4618      	mov	r0, r3
 8006968:	f000 f866 	bl	8006a38 <prvSampleTimeNow>
 800696c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d130      	bne.n	80069d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <prvProcessTimerOrBlockTask+0x3c>
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	429a      	cmp	r2, r3
 8006980:	d806      	bhi.n	8006990 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006982:	f7ff fa3f 	bl	8005e04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff ff85 	bl	8006898 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800698e:	e024      	b.n	80069da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d008      	beq.n	80069a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006996:	4b13      	ldr	r3, [pc, #76]	; (80069e4 <prvProcessTimerOrBlockTask+0x90>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <prvProcessTimerOrBlockTask+0x50>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <prvProcessTimerOrBlockTask+0x52>
 80069a4:	2300      	movs	r3, #0
 80069a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069a8:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <prvProcessTimerOrBlockTask+0x94>)
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	4619      	mov	r1, r3
 80069b6:	f7fe ffa7 	bl	8005908 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80069ba:	f7ff fa23 	bl	8005e04 <xTaskResumeAll>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80069c4:	4b09      	ldr	r3, [pc, #36]	; (80069ec <prvProcessTimerOrBlockTask+0x98>)
 80069c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	f3bf 8f6f 	isb	sy
}
 80069d4:	e001      	b.n	80069da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80069d6:	f7ff fa15 	bl	8005e04 <xTaskResumeAll>
}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000f50 	.word	0x20000f50
 80069e8:	20000f54 	.word	0x20000f54
 80069ec:	e000ed04 	.word	0xe000ed04

080069f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069f8:	4b0e      	ldr	r3, [pc, #56]	; (8006a34 <prvGetNextExpireTime+0x44>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <prvGetNextExpireTime+0x16>
 8006a02:	2201      	movs	r2, #1
 8006a04:	e000      	b.n	8006a08 <prvGetNextExpireTime+0x18>
 8006a06:	2200      	movs	r2, #0
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a14:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <prvGetNextExpireTime+0x44>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e001      	b.n	8006a24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a24:	68fb      	ldr	r3, [r7, #12]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	20000f4c 	.word	0x20000f4c

08006a38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a40:	f7ff fa7e 	bl	8005f40 <xTaskGetTickCount>
 8006a44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <prvSampleTimeNow+0x3c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d205      	bcs.n	8006a5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a50:	f000 f936 	bl	8006cc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e002      	b.n	8006a62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a62:	4a04      	ldr	r2, [pc, #16]	; (8006a74 <prvSampleTimeNow+0x3c>)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a68:	68fb      	ldr	r3, [r7, #12]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000f5c 	.word	0x20000f5c

08006a78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d812      	bhi.n	8006ac4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	1ad2      	subs	r2, r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d302      	bcc.n	8006ab2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	e01b      	b.n	8006aea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <prvInsertTimerInActiveList+0x7c>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4619      	mov	r1, r3
 8006abc:	4610      	mov	r0, r2
 8006abe:	f7fe f982 	bl	8004dc6 <vListInsert>
 8006ac2:	e012      	b.n	8006aea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d206      	bcs.n	8006ada <prvInsertTimerInActiveList+0x62>
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d302      	bcc.n	8006ada <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e007      	b.n	8006aea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ada:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <prvInsertTimerInActiveList+0x80>)
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f7fe f96e 	bl	8004dc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006aea:	697b      	ldr	r3, [r7, #20]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20000f50 	.word	0x20000f50
 8006af8:	20000f4c 	.word	0x20000f4c

08006afc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08e      	sub	sp, #56	; 0x38
 8006b00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b02:	e0ca      	b.n	8006c9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	da18      	bge.n	8006b3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b0a:	1d3b      	adds	r3, r7, #4
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	61fb      	str	r3, [r7, #28]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b32:	6850      	ldr	r0, [r2, #4]
 8006b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b36:	6892      	ldr	r2, [r2, #8]
 8006b38:	4611      	mov	r1, r2
 8006b3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f2c0 80aa 	blt.w	8006c98 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d004      	beq.n	8006b5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	3304      	adds	r3, #4
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fe f96f 	bl	8004e38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b5a:	463b      	mov	r3, r7
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff ff6b 	bl	8006a38 <prvSampleTimeNow>
 8006b62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b09      	cmp	r3, #9
 8006b68:	f200 8097 	bhi.w	8006c9a <prvProcessReceivedCommands+0x19e>
 8006b6c:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <prvProcessReceivedCommands+0x78>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006b9d 	.word	0x08006b9d
 8006b78:	08006b9d 	.word	0x08006b9d
 8006b7c:	08006b9d 	.word	0x08006b9d
 8006b80:	08006c11 	.word	0x08006c11
 8006b84:	08006c25 	.word	0x08006c25
 8006b88:	08006c6f 	.word	0x08006c6f
 8006b8c:	08006b9d 	.word	0x08006b9d
 8006b90:	08006b9d 	.word	0x08006b9d
 8006b94:	08006c11 	.word	0x08006c11
 8006b98:	08006c25 	.word	0x08006c25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	18d1      	adds	r1, r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bbc:	f7ff ff5c 	bl	8006a78 <prvInsertTimerInActiveList>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d069      	beq.n	8006c9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d05e      	beq.n	8006c9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	441a      	add	r2, r3
 8006be4:	2300      	movs	r3, #0
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	2300      	movs	r3, #0
 8006bea:	2100      	movs	r1, #0
 8006bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bee:	f7ff fe05 	bl	80067fc <xTimerGenericCommand>
 8006bf2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d14f      	bne.n	8006c9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	61bb      	str	r3, [r7, #24]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c16:	f023 0301 	bic.w	r3, r3, #1
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006c22:	e03a      	b.n	8006c9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c2a:	f043 0301 	orr.w	r3, r3, #1
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10a      	bne.n	8006c5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	617b      	str	r3, [r7, #20]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	18d1      	adds	r1, r2, r3
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c68:	f7ff ff06 	bl	8006a78 <prvInsertTimerInActiveList>
					break;
 8006c6c:	e015      	b.n	8006c9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d103      	bne.n	8006c84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c7e:	f000 fbdf 	bl	8007440 <vPortFree>
 8006c82:	e00a      	b.n	8006c9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c8a:	f023 0301 	bic.w	r3, r3, #1
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c96:	e000      	b.n	8006c9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c9a:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <prvProcessReceivedCommands+0x1c0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	1d39      	adds	r1, r7, #4
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe fc16 	bl	80054d4 <xQueueReceive>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f47f af2a 	bne.w	8006b04 <prvProcessReceivedCommands+0x8>
	}
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	3730      	adds	r7, #48	; 0x30
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000f54 	.word	0x20000f54

08006cc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cc6:	e048      	b.n	8006d5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cc8:	4b2d      	ldr	r3, [pc, #180]	; (8006d80 <prvSwitchTimerLists+0xc0>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cd2:	4b2b      	ldr	r3, [pc, #172]	; (8006d80 <prvSwitchTimerLists+0xc0>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fe f8a9 	bl	8004e38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d02e      	beq.n	8006d5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4413      	add	r3, r2
 8006d04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d90e      	bls.n	8006d2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d1a:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <prvSwitchTimerLists+0xc0>)
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4619      	mov	r1, r3
 8006d24:	4610      	mov	r0, r2
 8006d26:	f7fe f84e 	bl	8004dc6 <vListInsert>
 8006d2a:	e016      	b.n	8006d5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	2300      	movs	r3, #0
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	2100      	movs	r1, #0
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff fd60 	bl	80067fc <xTimerGenericCommand>
 8006d3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	603b      	str	r3, [r7, #0]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d5a:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <prvSwitchTimerLists+0xc0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1b1      	bne.n	8006cc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d64:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <prvSwitchTimerLists+0xc0>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d6a:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <prvSwitchTimerLists+0xc4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a04      	ldr	r2, [pc, #16]	; (8006d80 <prvSwitchTimerLists+0xc0>)
 8006d70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d72:	4a04      	ldr	r2, [pc, #16]	; (8006d84 <prvSwitchTimerLists+0xc4>)
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	6013      	str	r3, [r2, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20000f4c 	.word	0x20000f4c
 8006d84:	20000f50 	.word	0x20000f50

08006d88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d8e:	f000 f969 	bl	8007064 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d92:	4b15      	ldr	r3, [pc, #84]	; (8006de8 <prvCheckForValidListAndQueue+0x60>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d120      	bne.n	8006ddc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d9a:	4814      	ldr	r0, [pc, #80]	; (8006dec <prvCheckForValidListAndQueue+0x64>)
 8006d9c:	f7fd ffc2 	bl	8004d24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006da0:	4813      	ldr	r0, [pc, #76]	; (8006df0 <prvCheckForValidListAndQueue+0x68>)
 8006da2:	f7fd ffbf 	bl	8004d24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006da6:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <prvCheckForValidListAndQueue+0x6c>)
 8006da8:	4a10      	ldr	r2, [pc, #64]	; (8006dec <prvCheckForValidListAndQueue+0x64>)
 8006daa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006dac:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <prvCheckForValidListAndQueue+0x70>)
 8006dae:	4a10      	ldr	r2, [pc, #64]	; (8006df0 <prvCheckForValidListAndQueue+0x68>)
 8006db0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006db2:	2300      	movs	r3, #0
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <prvCheckForValidListAndQueue+0x74>)
 8006db8:	4a11      	ldr	r2, [pc, #68]	; (8006e00 <prvCheckForValidListAndQueue+0x78>)
 8006dba:	2110      	movs	r1, #16
 8006dbc:	200a      	movs	r0, #10
 8006dbe:	f7fe f8cd 	bl	8004f5c <xQueueGenericCreateStatic>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <prvCheckForValidListAndQueue+0x60>)
 8006dc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006dc8:	4b07      	ldr	r3, [pc, #28]	; (8006de8 <prvCheckForValidListAndQueue+0x60>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006dd0:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <prvCheckForValidListAndQueue+0x60>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	490b      	ldr	r1, [pc, #44]	; (8006e04 <prvCheckForValidListAndQueue+0x7c>)
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fd6c 	bl	80058b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ddc:	f000 f972 	bl	80070c4 <vPortExitCritical>
}
 8006de0:	bf00      	nop
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000f54 	.word	0x20000f54
 8006dec:	20000f24 	.word	0x20000f24
 8006df0:	20000f38 	.word	0x20000f38
 8006df4:	20000f4c 	.word	0x20000f4c
 8006df8:	20000f50 	.word	0x20000f50
 8006dfc:	20001000 	.word	0x20001000
 8006e00:	20000f60 	.word	0x20000f60
 8006e04:	08007760 	.word	0x08007760

08006e08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3b04      	subs	r3, #4
 8006e18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3b04      	subs	r3, #4
 8006e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f023 0201 	bic.w	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3b04      	subs	r3, #4
 8006e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e38:	4a0c      	ldr	r2, [pc, #48]	; (8006e6c <pxPortInitialiseStack+0x64>)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3b14      	subs	r3, #20
 8006e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3b04      	subs	r3, #4
 8006e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f06f 0202 	mvn.w	r2, #2
 8006e56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3b20      	subs	r3, #32
 8006e5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	08006e71 	.word	0x08006e71

08006e70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e7a:	4b12      	ldr	r3, [pc, #72]	; (8006ec4 <prvTaskExitError+0x54>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e82:	d00a      	beq.n	8006e9a <prvTaskExitError+0x2a>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	60fb      	str	r3, [r7, #12]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <prvTaskExitError+0x28>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	60bb      	str	r3, [r7, #8]
}
 8006eac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006eae:	bf00      	nop
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0fc      	beq.n	8006eb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	2000018c 	.word	0x2000018c
	...

08006ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ed0:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <pxCurrentTCBConst2>)
 8006ed2:	6819      	ldr	r1, [r3, #0]
 8006ed4:	6808      	ldr	r0, [r1, #0]
 8006ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eda:	f380 8809 	msr	PSP, r0
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f04f 0000 	mov.w	r0, #0
 8006ee6:	f380 8811 	msr	BASEPRI, r0
 8006eea:	4770      	bx	lr
 8006eec:	f3af 8000 	nop.w

08006ef0 <pxCurrentTCBConst2>:
 8006ef0:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop

08006ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ef8:	4808      	ldr	r0, [pc, #32]	; (8006f1c <prvPortStartFirstTask+0x24>)
 8006efa:	6800      	ldr	r0, [r0, #0]
 8006efc:	6800      	ldr	r0, [r0, #0]
 8006efe:	f380 8808 	msr	MSP, r0
 8006f02:	f04f 0000 	mov.w	r0, #0
 8006f06:	f380 8814 	msr	CONTROL, r0
 8006f0a:	b662      	cpsie	i
 8006f0c:	b661      	cpsie	f
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	df00      	svc	0
 8006f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f1a:	bf00      	nop
 8006f1c:	e000ed08 	.word	0xe000ed08

08006f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f26:	4b46      	ldr	r3, [pc, #280]	; (8007040 <xPortStartScheduler+0x120>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a46      	ldr	r2, [pc, #280]	; (8007044 <xPortStartScheduler+0x124>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d10a      	bne.n	8006f46 <xPortStartScheduler+0x26>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	613b      	str	r3, [r7, #16]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f46:	4b3e      	ldr	r3, [pc, #248]	; (8007040 <xPortStartScheduler+0x120>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a3f      	ldr	r2, [pc, #252]	; (8007048 <xPortStartScheduler+0x128>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d10a      	bne.n	8006f66 <xPortStartScheduler+0x46>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	60fb      	str	r3, [r7, #12]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f66:	4b39      	ldr	r3, [pc, #228]	; (800704c <xPortStartScheduler+0x12c>)
 8006f68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	22ff      	movs	r2, #255	; 0xff
 8006f76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	4b31      	ldr	r3, [pc, #196]	; (8007050 <xPortStartScheduler+0x130>)
 8006f8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f8e:	4b31      	ldr	r3, [pc, #196]	; (8007054 <xPortStartScheduler+0x134>)
 8006f90:	2207      	movs	r2, #7
 8006f92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f94:	e009      	b.n	8006faa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f96:	4b2f      	ldr	r3, [pc, #188]	; (8007054 <xPortStartScheduler+0x134>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	4a2d      	ldr	r2, [pc, #180]	; (8007054 <xPortStartScheduler+0x134>)
 8006f9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006faa:	78fb      	ldrb	r3, [r7, #3]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb2:	2b80      	cmp	r3, #128	; 0x80
 8006fb4:	d0ef      	beq.n	8006f96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fb6:	4b27      	ldr	r3, [pc, #156]	; (8007054 <xPortStartScheduler+0x134>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1c3 0307 	rsb	r3, r3, #7
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d00a      	beq.n	8006fd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	60bb      	str	r3, [r7, #8]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fd8:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <xPortStartScheduler+0x134>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	021b      	lsls	r3, r3, #8
 8006fde:	4a1d      	ldr	r2, [pc, #116]	; (8007054 <xPortStartScheduler+0x134>)
 8006fe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fe2:	4b1c      	ldr	r3, [pc, #112]	; (8007054 <xPortStartScheduler+0x134>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fea:	4a1a      	ldr	r2, [pc, #104]	; (8007054 <xPortStartScheduler+0x134>)
 8006fec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ff6:	4b18      	ldr	r3, [pc, #96]	; (8007058 <xPortStartScheduler+0x138>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a17      	ldr	r2, [pc, #92]	; (8007058 <xPortStartScheduler+0x138>)
 8006ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <xPortStartScheduler+0x138>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a14      	ldr	r2, [pc, #80]	; (8007058 <xPortStartScheduler+0x138>)
 8007008:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800700c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800700e:	f000 f8dd 	bl	80071cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007012:	4b12      	ldr	r3, [pc, #72]	; (800705c <xPortStartScheduler+0x13c>)
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007018:	f000 f8fc 	bl	8007214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800701c:	4b10      	ldr	r3, [pc, #64]	; (8007060 <xPortStartScheduler+0x140>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a0f      	ldr	r2, [pc, #60]	; (8007060 <xPortStartScheduler+0x140>)
 8007022:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007026:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007028:	f7ff ff66 	bl	8006ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800702c:	f7ff f852 	bl	80060d4 <vTaskSwitchContext>
	prvTaskExitError();
 8007030:	f7ff ff1e 	bl	8006e70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	e000ed00 	.word	0xe000ed00
 8007044:	410fc271 	.word	0x410fc271
 8007048:	410fc270 	.word	0x410fc270
 800704c:	e000e400 	.word	0xe000e400
 8007050:	20001050 	.word	0x20001050
 8007054:	20001054 	.word	0x20001054
 8007058:	e000ed20 	.word	0xe000ed20
 800705c:	2000018c 	.word	0x2000018c
 8007060:	e000ef34 	.word	0xe000ef34

08007064 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	607b      	str	r3, [r7, #4]
}
 800707c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800707e:	4b0f      	ldr	r3, [pc, #60]	; (80070bc <vPortEnterCritical+0x58>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3301      	adds	r3, #1
 8007084:	4a0d      	ldr	r2, [pc, #52]	; (80070bc <vPortEnterCritical+0x58>)
 8007086:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007088:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <vPortEnterCritical+0x58>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d10f      	bne.n	80070b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007090:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <vPortEnterCritical+0x5c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	603b      	str	r3, [r7, #0]
}
 80070ac:	bf00      	nop
 80070ae:	e7fe      	b.n	80070ae <vPortEnterCritical+0x4a>
	}
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	2000018c 	.word	0x2000018c
 80070c0:	e000ed04 	.word	0xe000ed04

080070c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070ca:	4b12      	ldr	r3, [pc, #72]	; (8007114 <vPortExitCritical+0x50>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <vPortExitCritical+0x24>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	607b      	str	r3, [r7, #4]
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070e8:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <vPortExitCritical+0x50>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	4a09      	ldr	r2, [pc, #36]	; (8007114 <vPortExitCritical+0x50>)
 80070f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070f2:	4b08      	ldr	r3, [pc, #32]	; (8007114 <vPortExitCritical+0x50>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d105      	bne.n	8007106 <vPortExitCritical+0x42>
 80070fa:	2300      	movs	r3, #0
 80070fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	f383 8811 	msr	BASEPRI, r3
}
 8007104:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	2000018c 	.word	0x2000018c
	...

08007120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007120:	f3ef 8009 	mrs	r0, PSP
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	4b15      	ldr	r3, [pc, #84]	; (8007180 <pxCurrentTCBConst>)
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	f01e 0f10 	tst.w	lr, #16
 8007130:	bf08      	it	eq
 8007132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713a:	6010      	str	r0, [r2, #0]
 800713c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007144:	f380 8811 	msr	BASEPRI, r0
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f7fe ffc0 	bl	80060d4 <vTaskSwitchContext>
 8007154:	f04f 0000 	mov.w	r0, #0
 8007158:	f380 8811 	msr	BASEPRI, r0
 800715c:	bc09      	pop	{r0, r3}
 800715e:	6819      	ldr	r1, [r3, #0]
 8007160:	6808      	ldr	r0, [r1, #0]
 8007162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007166:	f01e 0f10 	tst.w	lr, #16
 800716a:	bf08      	it	eq
 800716c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007170:	f380 8809 	msr	PSP, r0
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	f3af 8000 	nop.w

08007180 <pxCurrentTCBConst>:
 8007180:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop

08007188 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	607b      	str	r3, [r7, #4]
}
 80071a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071a2:	f7fe fedd 	bl	8005f60 <xTaskIncrementTick>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <xPortSysTickHandler+0x40>)
 80071ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	2300      	movs	r3, #0
 80071b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f383 8811 	msr	BASEPRI, r3
}
 80071be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	e000ed04 	.word	0xe000ed04

080071cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071d0:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <vPortSetupTimerInterrupt+0x34>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071d6:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <vPortSetupTimerInterrupt+0x38>)
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071dc:	4b0a      	ldr	r3, [pc, #40]	; (8007208 <vPortSetupTimerInterrupt+0x3c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a0a      	ldr	r2, [pc, #40]	; (800720c <vPortSetupTimerInterrupt+0x40>)
 80071e2:	fba2 2303 	umull	r2, r3, r2, r3
 80071e6:	099b      	lsrs	r3, r3, #6
 80071e8:	4a09      	ldr	r2, [pc, #36]	; (8007210 <vPortSetupTimerInterrupt+0x44>)
 80071ea:	3b01      	subs	r3, #1
 80071ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071ee:	4b04      	ldr	r3, [pc, #16]	; (8007200 <vPortSetupTimerInterrupt+0x34>)
 80071f0:	2207      	movs	r2, #7
 80071f2:	601a      	str	r2, [r3, #0]
}
 80071f4:	bf00      	nop
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	e000e010 	.word	0xe000e010
 8007204:	e000e018 	.word	0xe000e018
 8007208:	20000180 	.word	0x20000180
 800720c:	10624dd3 	.word	0x10624dd3
 8007210:	e000e014 	.word	0xe000e014

08007214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007214:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007224 <vPortEnableVFP+0x10>
 8007218:	6801      	ldr	r1, [r0, #0]
 800721a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800721e:	6001      	str	r1, [r0, #0]
 8007220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007222:	bf00      	nop
 8007224:	e000ed88 	.word	0xe000ed88

08007228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800722e:	f3ef 8305 	mrs	r3, IPSR
 8007232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b0f      	cmp	r3, #15
 8007238:	d914      	bls.n	8007264 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800723a:	4a17      	ldr	r2, [pc, #92]	; (8007298 <vPortValidateInterruptPriority+0x70>)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007244:	4b15      	ldr	r3, [pc, #84]	; (800729c <vPortValidateInterruptPriority+0x74>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	7afa      	ldrb	r2, [r7, #11]
 800724a:	429a      	cmp	r2, r3
 800724c:	d20a      	bcs.n	8007264 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	607b      	str	r3, [r7, #4]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007264:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <vPortValidateInterruptPriority+0x78>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800726c:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <vPortValidateInterruptPriority+0x7c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d90a      	bls.n	800728a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	603b      	str	r3, [r7, #0]
}
 8007286:	bf00      	nop
 8007288:	e7fe      	b.n	8007288 <vPortValidateInterruptPriority+0x60>
	}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	e000e3f0 	.word	0xe000e3f0
 800729c:	20001050 	.word	0x20001050
 80072a0:	e000ed0c 	.word	0xe000ed0c
 80072a4:	20001054 	.word	0x20001054

080072a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08a      	sub	sp, #40	; 0x28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072b4:	f7fe fd98 	bl	8005de8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072b8:	4b5b      	ldr	r3, [pc, #364]	; (8007428 <pvPortMalloc+0x180>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072c0:	f000 f920 	bl	8007504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072c4:	4b59      	ldr	r3, [pc, #356]	; (800742c <pvPortMalloc+0x184>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f040 8093 	bne.w	80073f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01d      	beq.n	8007314 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80072d8:	2208      	movs	r2, #8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4413      	add	r3, r2
 80072de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d014      	beq.n	8007314 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f023 0307 	bic.w	r3, r3, #7
 80072f0:	3308      	adds	r3, #8
 80072f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <pvPortMalloc+0x6c>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	617b      	str	r3, [r7, #20]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d06e      	beq.n	80073f8 <pvPortMalloc+0x150>
 800731a:	4b45      	ldr	r3, [pc, #276]	; (8007430 <pvPortMalloc+0x188>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	429a      	cmp	r2, r3
 8007322:	d869      	bhi.n	80073f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007324:	4b43      	ldr	r3, [pc, #268]	; (8007434 <pvPortMalloc+0x18c>)
 8007326:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007328:	4b42      	ldr	r3, [pc, #264]	; (8007434 <pvPortMalloc+0x18c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800732e:	e004      	b.n	800733a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d903      	bls.n	800734c <pvPortMalloc+0xa4>
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f1      	bne.n	8007330 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800734c:	4b36      	ldr	r3, [pc, #216]	; (8007428 <pvPortMalloc+0x180>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007352:	429a      	cmp	r2, r3
 8007354:	d050      	beq.n	80073f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2208      	movs	r2, #8
 800735c:	4413      	add	r3, r2
 800735e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	2308      	movs	r3, #8
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	429a      	cmp	r2, r3
 8007376:	d91f      	bls.n	80073b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4413      	add	r3, r2
 800737e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <pvPortMalloc+0xf8>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	613b      	str	r3, [r7, #16]
}
 800739c:	bf00      	nop
 800739e:	e7fe      	b.n	800739e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073b2:	69b8      	ldr	r0, [r7, #24]
 80073b4:	f000 f908 	bl	80075c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073b8:	4b1d      	ldr	r3, [pc, #116]	; (8007430 <pvPortMalloc+0x188>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <pvPortMalloc+0x188>)
 80073c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <pvPortMalloc+0x188>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4b1b      	ldr	r3, [pc, #108]	; (8007438 <pvPortMalloc+0x190>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d203      	bcs.n	80073da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073d2:	4b17      	ldr	r3, [pc, #92]	; (8007430 <pvPortMalloc+0x188>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a18      	ldr	r2, [pc, #96]	; (8007438 <pvPortMalloc+0x190>)
 80073d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	4b13      	ldr	r3, [pc, #76]	; (800742c <pvPortMalloc+0x184>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073ee:	4b13      	ldr	r3, [pc, #76]	; (800743c <pvPortMalloc+0x194>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3301      	adds	r3, #1
 80073f4:	4a11      	ldr	r2, [pc, #68]	; (800743c <pvPortMalloc+0x194>)
 80073f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073f8:	f7fe fd04 	bl	8005e04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <pvPortMalloc+0x174>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60fb      	str	r3, [r7, #12]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <pvPortMalloc+0x172>
	return pvReturn;
 800741c:	69fb      	ldr	r3, [r7, #28]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3728      	adds	r7, #40	; 0x28
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20001c18 	.word	0x20001c18
 800742c:	20001c2c 	.word	0x20001c2c
 8007430:	20001c1c 	.word	0x20001c1c
 8007434:	20001c10 	.word	0x20001c10
 8007438:	20001c20 	.word	0x20001c20
 800743c:	20001c24 	.word	0x20001c24

08007440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d04d      	beq.n	80074ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007452:	2308      	movs	r3, #8
 8007454:	425b      	negs	r3, r3
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4413      	add	r3, r2
 800745a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	4b24      	ldr	r3, [pc, #144]	; (80074f8 <vPortFree+0xb8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4013      	ands	r3, r2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <vPortFree+0x44>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	60fb      	str	r3, [r7, #12]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <vPortFree+0x62>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	60bb      	str	r3, [r7, #8]
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <vPortFree+0xb8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4013      	ands	r3, r2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01e      	beq.n	80074ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d11a      	bne.n	80074ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <vPortFree+0xb8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	43db      	mvns	r3, r3
 80074c2:	401a      	ands	r2, r3
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074c8:	f7fe fc8e 	bl	8005de8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <vPortFree+0xbc>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	4a09      	ldr	r2, [pc, #36]	; (80074fc <vPortFree+0xbc>)
 80074d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074da:	6938      	ldr	r0, [r7, #16]
 80074dc:	f000 f874 	bl	80075c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <vPortFree+0xc0>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	4a06      	ldr	r2, [pc, #24]	; (8007500 <vPortFree+0xc0>)
 80074e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074ea:	f7fe fc8b 	bl	8005e04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074ee:	bf00      	nop
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20001c2c 	.word	0x20001c2c
 80074fc:	20001c1c 	.word	0x20001c1c
 8007500:	20001c28 	.word	0x20001c28

08007504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800750a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800750e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007510:	4b27      	ldr	r3, [pc, #156]	; (80075b0 <prvHeapInit+0xac>)
 8007512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00c      	beq.n	8007538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3307      	adds	r3, #7
 8007522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0307 	bic.w	r3, r3, #7
 800752a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <prvHeapInit+0xac>)
 8007534:	4413      	add	r3, r2
 8007536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800753c:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <prvHeapInit+0xb0>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007542:	4b1c      	ldr	r3, [pc, #112]	; (80075b4 <prvHeapInit+0xb0>)
 8007544:	2200      	movs	r2, #0
 8007546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	4413      	add	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007550:	2208      	movs	r2, #8
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0307 	bic.w	r3, r3, #7
 800755e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4a15      	ldr	r2, [pc, #84]	; (80075b8 <prvHeapInit+0xb4>)
 8007564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <prvHeapInit+0xb4>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2200      	movs	r2, #0
 800756c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800756e:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <prvHeapInit+0xb4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007584:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <prvHeapInit+0xb4>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <prvHeapInit+0xb8>)
 8007592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <prvHeapInit+0xbc>)
 800759a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800759c:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <prvHeapInit+0xc0>)
 800759e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	20001058 	.word	0x20001058
 80075b4:	20001c10 	.word	0x20001c10
 80075b8:	20001c18 	.word	0x20001c18
 80075bc:	20001c20 	.word	0x20001c20
 80075c0:	20001c1c 	.word	0x20001c1c
 80075c4:	20001c2c 	.word	0x20001c2c

080075c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075d0:	4b28      	ldr	r3, [pc, #160]	; (8007674 <prvInsertBlockIntoFreeList+0xac>)
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	e002      	b.n	80075dc <prvInsertBlockIntoFreeList+0x14>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d8f7      	bhi.n	80075d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4413      	add	r3, r2
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d108      	bne.n	800760a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	441a      	add	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d118      	bne.n	8007650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b15      	ldr	r3, [pc, #84]	; (8007678 <prvInsertBlockIntoFreeList+0xb0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d00d      	beq.n	8007646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	441a      	add	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	e008      	b.n	8007658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007646:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <prvInsertBlockIntoFreeList+0xb0>)
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e003      	b.n	8007658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d002      	beq.n	8007666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	20001c10 	.word	0x20001c10
 8007678:	20001c18 	.word	0x20001c18

0800767c <__libc_init_array>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	4d0d      	ldr	r5, [pc, #52]	; (80076b4 <__libc_init_array+0x38>)
 8007680:	4c0d      	ldr	r4, [pc, #52]	; (80076b8 <__libc_init_array+0x3c>)
 8007682:	1b64      	subs	r4, r4, r5
 8007684:	10a4      	asrs	r4, r4, #2
 8007686:	2600      	movs	r6, #0
 8007688:	42a6      	cmp	r6, r4
 800768a:	d109      	bne.n	80076a0 <__libc_init_array+0x24>
 800768c:	4d0b      	ldr	r5, [pc, #44]	; (80076bc <__libc_init_array+0x40>)
 800768e:	4c0c      	ldr	r4, [pc, #48]	; (80076c0 <__libc_init_array+0x44>)
 8007690:	f000 f82e 	bl	80076f0 <_init>
 8007694:	1b64      	subs	r4, r4, r5
 8007696:	10a4      	asrs	r4, r4, #2
 8007698:	2600      	movs	r6, #0
 800769a:	42a6      	cmp	r6, r4
 800769c:	d105      	bne.n	80076aa <__libc_init_array+0x2e>
 800769e:	bd70      	pop	{r4, r5, r6, pc}
 80076a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a4:	4798      	blx	r3
 80076a6:	3601      	adds	r6, #1
 80076a8:	e7ee      	b.n	8007688 <__libc_init_array+0xc>
 80076aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ae:	4798      	blx	r3
 80076b0:	3601      	adds	r6, #1
 80076b2:	e7f2      	b.n	800769a <__libc_init_array+0x1e>
 80076b4:	08007834 	.word	0x08007834
 80076b8:	08007834 	.word	0x08007834
 80076bc:	08007834 	.word	0x08007834
 80076c0:	08007838 	.word	0x08007838

080076c4 <memcpy>:
 80076c4:	440a      	add	r2, r1
 80076c6:	4291      	cmp	r1, r2
 80076c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076cc:	d100      	bne.n	80076d0 <memcpy+0xc>
 80076ce:	4770      	bx	lr
 80076d0:	b510      	push	{r4, lr}
 80076d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076da:	4291      	cmp	r1, r2
 80076dc:	d1f9      	bne.n	80076d2 <memcpy+0xe>
 80076de:	bd10      	pop	{r4, pc}

080076e0 <memset>:
 80076e0:	4402      	add	r2, r0
 80076e2:	4603      	mov	r3, r0
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d100      	bne.n	80076ea <memset+0xa>
 80076e8:	4770      	bx	lr
 80076ea:	f803 1b01 	strb.w	r1, [r3], #1
 80076ee:	e7f9      	b.n	80076e4 <memset+0x4>

080076f0 <_init>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr

080076fc <_fini>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr
