
nucleo-l432kc_4x4rgb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008308  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008574  08008574  00022110  2**0
                  CONTENTS
  4 .ARM          00000008  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800857c  0800857c  00022110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800857c  0800857c  0001857c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002110  20000000  08008584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002658  20002110  0800a694  00022110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004768  0800a694  00024768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9f1  00000000  00000000  00022140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d6  00000000  00000000  0003eb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00042508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001648  00000000  00000000  00043ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023183  00000000  00000000  000452f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019674  00000000  00000000  00068473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d48a2  00000000  00000000  00081ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006328  00000000  00000000  001563dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  0015c704  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002110 	.word	0x20002110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008480 	.word	0x08008480

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002114 	.word	0x20002114
 80001cc:	08008480 	.word	0x08008480

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <printDataOnMatrix>:

/**
 * takes a pointer to a character as argument and prints the pattern
 */
void printDataOnMatrix(char *ch)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	switch(*ch)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	3b31      	subs	r3, #49	; 0x31
 80004e2:	2b49      	cmp	r3, #73	; 0x49
 80004e4:	f200 80f4 	bhi.w	80006d0 <printDataOnMatrix+0x1fc>
 80004e8:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <printDataOnMatrix+0x1c>)
 80004ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ee:	bf00      	nop
 80004f0:	080006b9 	.word	0x080006b9
 80004f4:	080006d1 	.word	0x080006d1
 80004f8:	080006d1 	.word	0x080006d1
 80004fc:	080006c1 	.word	0x080006c1
 8000500:	080006d1 	.word	0x080006d1
 8000504:	080006d1 	.word	0x080006d1
 8000508:	080006d1 	.word	0x080006d1
 800050c:	080006d1 	.word	0x080006d1
 8000510:	080006d1 	.word	0x080006d1
 8000514:	080006d1 	.word	0x080006d1
 8000518:	080006d1 	.word	0x080006d1
 800051c:	080006d1 	.word	0x080006d1
 8000520:	080006d1 	.word	0x080006d1
 8000524:	080006d1 	.word	0x080006d1
 8000528:	080006d1 	.word	0x080006d1
 800052c:	080006d1 	.word	0x080006d1
 8000530:	080006d1 	.word	0x080006d1
 8000534:	080006d1 	.word	0x080006d1
 8000538:	080006d1 	.word	0x080006d1
 800053c:	080006d1 	.word	0x080006d1
 8000540:	080006d1 	.word	0x080006d1
 8000544:	080006c9 	.word	0x080006c9
 8000548:	080006d1 	.word	0x080006d1
 800054c:	080006d1 	.word	0x080006d1
 8000550:	080006d1 	.word	0x080006d1
 8000554:	080006d1 	.word	0x080006d1
 8000558:	080006d1 	.word	0x080006d1
 800055c:	080006d1 	.word	0x080006d1
 8000560:	080006d1 	.word	0x080006d1
 8000564:	080006d1 	.word	0x080006d1
 8000568:	080006d1 	.word	0x080006d1
 800056c:	080006d1 	.word	0x080006d1
 8000570:	080006d1 	.word	0x080006d1
 8000574:	080006d1 	.word	0x080006d1
 8000578:	080006d1 	.word	0x080006d1
 800057c:	080006d1 	.word	0x080006d1
 8000580:	080006d1 	.word	0x080006d1
 8000584:	080006d1 	.word	0x080006d1
 8000588:	080006d1 	.word	0x080006d1
 800058c:	080006d1 	.word	0x080006d1
 8000590:	080006d1 	.word	0x080006d1
 8000594:	080006d1 	.word	0x080006d1
 8000598:	080006d1 	.word	0x080006d1
 800059c:	080006d1 	.word	0x080006d1
 80005a0:	080006d1 	.word	0x080006d1
 80005a4:	080006d1 	.word	0x080006d1
 80005a8:	080006d1 	.word	0x080006d1
 80005ac:	080006d1 	.word	0x080006d1
 80005b0:	08000619 	.word	0x08000619
 80005b4:	08000621 	.word	0x08000621
 80005b8:	08000629 	.word	0x08000629
 80005bc:	08000631 	.word	0x08000631
 80005c0:	08000639 	.word	0x08000639
 80005c4:	08000641 	.word	0x08000641
 80005c8:	08000649 	.word	0x08000649
 80005cc:	08000651 	.word	0x08000651
 80005d0:	08000659 	.word	0x08000659
 80005d4:	08000661 	.word	0x08000661
 80005d8:	08000669 	.word	0x08000669
 80005dc:	08000671 	.word	0x08000671
 80005e0:	08000679 	.word	0x08000679
 80005e4:	08000681 	.word	0x08000681
 80005e8:	08000689 	.word	0x08000689
 80005ec:	08000691 	.word	0x08000691
 80005f0:	08000699 	.word	0x08000699
 80005f4:	080006a1 	.word	0x080006a1
 80005f8:	080006a9 	.word	0x080006a9
 80005fc:	080006d1 	.word	0x080006d1
 8000600:	080006d1 	.word	0x080006d1
 8000604:	080006d1 	.word	0x080006d1
 8000608:	080006d1 	.word	0x080006d1
 800060c:	080006d1 	.word	0x080006d1
 8000610:	080006d1 	.word	0x080006d1
 8000614:	080006b1 	.word	0x080006b1
	{
		case 'a':
			ptr_Rgb4x4Click = &rgb4x4click_centered;
 8000618:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <printDataOnMatrix+0x234>)
 800061a:	4a3c      	ldr	r2, [pc, #240]	; (800070c <printDataOnMatrix+0x238>)
 800061c:	601a      	str	r2, [r3, #0]
			break;
 800061e:	e05b      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'b':
			ptr_Rgb4x4Click = &rgb4x4click_outOfScope;
 8000620:	4b39      	ldr	r3, [pc, #228]	; (8000708 <printDataOnMatrix+0x234>)
 8000622:	4a3b      	ldr	r2, [pc, #236]	; (8000710 <printDataOnMatrix+0x23c>)
 8000624:	601a      	str	r2, [r3, #0]
			break;
 8000626:	e057      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'c':
			ptr_Rgb4x4Click = &rgb4x4click_shakeDetection;
 8000628:	4b37      	ldr	r3, [pc, #220]	; (8000708 <printDataOnMatrix+0x234>)
 800062a:	4a3a      	ldr	r2, [pc, #232]	; (8000714 <printDataOnMatrix+0x240>)
 800062c:	601a      	str	r2, [r3, #0]
			break;
 800062e:	e053      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'd':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_lo;
 8000630:	4b35      	ldr	r3, [pc, #212]	; (8000708 <printDataOnMatrix+0x234>)
 8000632:	4a39      	ldr	r2, [pc, #228]	; (8000718 <printDataOnMatrix+0x244>)
 8000634:	601a      	str	r2, [r3, #0]
			break;
 8000636:	e04f      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'e':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_lu;
 8000638:	4b33      	ldr	r3, [pc, #204]	; (8000708 <printDataOnMatrix+0x234>)
 800063a:	4a38      	ldr	r2, [pc, #224]	; (800071c <printDataOnMatrix+0x248>)
 800063c:	601a      	str	r2, [r3, #0]
			break;
 800063e:	e04b      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'f':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_ro;
 8000640:	4b31      	ldr	r3, [pc, #196]	; (8000708 <printDataOnMatrix+0x234>)
 8000642:	4a37      	ldr	r2, [pc, #220]	; (8000720 <printDataOnMatrix+0x24c>)
 8000644:	601a      	str	r2, [r3, #0]
			break;
 8000646:	e047      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'g':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_ru;
 8000648:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <printDataOnMatrix+0x234>)
 800064a:	4a36      	ldr	r2, [pc, #216]	; (8000724 <printDataOnMatrix+0x250>)
 800064c:	601a      	str	r2, [r3, #0]
			break;
 800064e:	e043      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'h':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c1;
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <printDataOnMatrix+0x234>)
 8000652:	4a35      	ldr	r2, [pc, #212]	; (8000728 <printDataOnMatrix+0x254>)
 8000654:	601a      	str	r2, [r3, #0]
			break;
 8000656:	e03f      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'i':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c2;
 8000658:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <printDataOnMatrix+0x234>)
 800065a:	4a34      	ldr	r2, [pc, #208]	; (800072c <printDataOnMatrix+0x258>)
 800065c:	601a      	str	r2, [r3, #0]
			break;
 800065e:	e03b      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'j':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c3;
 8000660:	4b29      	ldr	r3, [pc, #164]	; (8000708 <printDataOnMatrix+0x234>)
 8000662:	4a33      	ldr	r2, [pc, #204]	; (8000730 <printDataOnMatrix+0x25c>)
 8000664:	601a      	str	r2, [r3, #0]
			break;
 8000666:	e037      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'k':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c4;
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <printDataOnMatrix+0x234>)
 800066a:	4a32      	ldr	r2, [pc, #200]	; (8000734 <printDataOnMatrix+0x260>)
 800066c:	601a      	str	r2, [r3, #0]
			break;
 800066e:	e033      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'l':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r2c1;
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <printDataOnMatrix+0x234>)
 8000672:	4a31      	ldr	r2, [pc, #196]	; (8000738 <printDataOnMatrix+0x264>)
 8000674:	601a      	str	r2, [r3, #0]
			break;
 8000676:	e02f      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'm':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r2c4;
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <printDataOnMatrix+0x234>)
 800067a:	4a30      	ldr	r2, [pc, #192]	; (800073c <printDataOnMatrix+0x268>)
 800067c:	601a      	str	r2, [r3, #0]
			break;
 800067e:	e02b      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'n':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r3c1;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <printDataOnMatrix+0x234>)
 8000682:	4a2f      	ldr	r2, [pc, #188]	; (8000740 <printDataOnMatrix+0x26c>)
 8000684:	601a      	str	r2, [r3, #0]
			break;
 8000686:	e027      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'o':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r3c4;
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <printDataOnMatrix+0x234>)
 800068a:	4a2e      	ldr	r2, [pc, #184]	; (8000744 <printDataOnMatrix+0x270>)
 800068c:	601a      	str	r2, [r3, #0]
			break;
 800068e:	e023      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'p':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c1;
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <printDataOnMatrix+0x234>)
 8000692:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <printDataOnMatrix+0x274>)
 8000694:	601a      	str	r2, [r3, #0]
			break;
 8000696:	e01f      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'q':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c2;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <printDataOnMatrix+0x234>)
 800069a:	4a2c      	ldr	r2, [pc, #176]	; (800074c <printDataOnMatrix+0x278>)
 800069c:	601a      	str	r2, [r3, #0]
			break;
 800069e:	e01b      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'r':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c3;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <printDataOnMatrix+0x234>)
 80006a2:	4a2b      	ldr	r2, [pc, #172]	; (8000750 <printDataOnMatrix+0x27c>)
 80006a4:	601a      	str	r2, [r3, #0]
			break;
 80006a6:	e017      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 's':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c4;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <printDataOnMatrix+0x234>)
 80006aa:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <printDataOnMatrix+0x280>)
 80006ac:	601a      	str	r2, [r3, #0]
			break;
 80006ae:	e013      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'z':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c1;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <printDataOnMatrix+0x234>)
 80006b2:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <printDataOnMatrix+0x254>)
 80006b4:	601a      	str	r2, [r3, #0]
			break;
 80006b6:	e00f      	b.n	80006d8 <printDataOnMatrix+0x204>
		case '1':
			ptr_Rgb4x4Click = &rgb4x4click_onlyOneLed;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <printDataOnMatrix+0x234>)
 80006ba:	4a27      	ldr	r2, [pc, #156]	; (8000758 <printDataOnMatrix+0x284>)
 80006bc:	601a      	str	r2, [r3, #0]
			break;
 80006be:	e00b      	b.n	80006d8 <printDataOnMatrix+0x204>
		case '4':
			ptr_Rgb4x4Click = &rgb4x4click_oneRow;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <printDataOnMatrix+0x234>)
 80006c2:	4a26      	ldr	r2, [pc, #152]	; (800075c <printDataOnMatrix+0x288>)
 80006c4:	601a      	str	r2, [r3, #0]
			break;
 80006c6:	e007      	b.n	80006d8 <printDataOnMatrix+0x204>
		case 'F':
			ptr_Rgb4x4Click = &rgb4x4click_all_on;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <printDataOnMatrix+0x234>)
 80006ca:	4a25      	ldr	r2, [pc, #148]	; (8000760 <printDataOnMatrix+0x28c>)
 80006cc:	601a      	str	r2, [r3, #0]
			break;
 80006ce:	e003      	b.n	80006d8 <printDataOnMatrix+0x204>
		default:
			/* You should not be here, might code error handling later */
			ptr_Rgb4x4Click = &rgb4x4click_shakeDetection;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <printDataOnMatrix+0x234>)
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <printDataOnMatrix+0x240>)
 80006d4:	601a      	str	r2, [r3, #0]
			break;
 80006d6:	bf00      	nop

	}


	osSemaphoreAcquire(sem_printPermissionHandle, osWaitForever);
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <printDataOnMatrix+0x290>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006e0:	4618      	mov	r0, r3
 80006e2:	f004 fccd 	bl	8005080 <osSemaphoreAcquire>

	/* actually not really necessary and quite useless, just to be 101% sure*/
	taskENTER_CRITICAL();
 80006e6:	f007 fb85 	bl	8007df4 <vPortEnterCritical>

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *) ptr_Rgb4x4Click, PWM_STREAM_LENGTH_FULL_DISPLAY);
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <printDataOnMatrix+0x234>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006f2:	2100      	movs	r1, #0
 80006f4:	481c      	ldr	r0, [pc, #112]	; (8000768 <printDataOnMatrix+0x294>)
 80006f6:	f002 fc27 	bl	8002f48 <HAL_TIM_PWM_Start_DMA>

	taskEXIT_CRITICAL();
 80006fa:	f007 fbab 	bl	8007e54 <vPortExitCritical>

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000212c 	.word	0x2000212c
 800070c:	20000180 	.word	0x20000180
 8000710:	20000300 	.word	0x20000300
 8000714:	20000480 	.word	0x20000480
 8000718:	20000780 	.word	0x20000780
 800071c:	20000600 	.word	0x20000600
 8000720:	20000a80 	.word	0x20000a80
 8000724:	20000900 	.word	0x20000900
 8000728:	20000c00 	.word	0x20000c00
 800072c:	20000d80 	.word	0x20000d80
 8000730:	20000f00 	.word	0x20000f00
 8000734:	20001080 	.word	0x20001080
 8000738:	20001200 	.word	0x20001200
 800073c:	20001380 	.word	0x20001380
 8000740:	20001500 	.word	0x20001500
 8000744:	20001680 	.word	0x20001680
 8000748:	20001800 	.word	0x20001800
 800074c:	20001980 	.word	0x20001980
 8000750:	20001b00 	.word	0x20001b00
 8000754:	20001c80 	.word	0x20001c80
 8000758:	20001e00 	.word	0x20001e00
 800075c:	20001f80 	.word	0x20001f80
 8000760:	20000000 	.word	0x20000000
 8000764:	20002250 	.word	0x20002250
 8000768:	20002130 	.word	0x20002130

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 fc31 	bl	8000fd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f836 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f000 f972 	bl	8000a60 <MX_GPIO_Init>
  MX_DMA_Init();
 800077c:	f000 f952 	bl	8000a24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000780:	f000 f920 	bl	80009c4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000784:	f000 f890 	bl	80008a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000788:	f004 fa68 	bl	8004c5c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sem_printPermission */
  sem_printPermissionHandle = osSemaphoreNew(1, 1, &sem_printPermission_attributes);
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <main+0x58>)
 800078e:	2101      	movs	r1, #1
 8000790:	2001      	movs	r0, #1
 8000792:	f004 fbeb 	bl	8004f6c <osSemaphoreNew>
 8000796:	4603      	mov	r3, r0
 8000798:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <main+0x5c>)
 800079a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of newDataTimer */
  newDataTimerHandle = osTimerNew(newDataTimerCallback, osTimerPeriodic, NULL, &newDataTimer_attributes);
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <main+0x60>)
 800079e:	2200      	movs	r2, #0
 80007a0:	2101      	movs	r1, #1
 80007a2:	480b      	ldr	r0, [pc, #44]	; (80007d0 <main+0x64>)
 80007a4:	f004 fb66 	bl	8004e74 <osTimerNew>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <main+0x68>)
 80007ac:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ConServerTask */
  ConServerTaskHandle = osThreadNew(StartConServerTask, NULL, &ConServerTask_attributes);
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <main+0x6c>)
 80007b0:	2100      	movs	r1, #0
 80007b2:	480a      	ldr	r0, [pc, #40]	; (80007dc <main+0x70>)
 80007b4:	f004 fa9c 	bl	8004cf0 <osThreadNew>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <main+0x74>)
 80007bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007be:	f004 fa71 	bl	8004ca4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <main+0x56>
 80007c4:	0800851c 	.word	0x0800851c
 80007c8:	20002250 	.word	0x20002250
 80007cc:	0800850c 	.word	0x0800850c
 80007d0:	08000b79 	.word	0x08000b79
 80007d4:	2000224c 	.word	0x2000224c
 80007d8:	080084e8 	.word	0x080084e8
 80007dc:	08000b21 	.word	0x08000b21
 80007e0:	20002248 	.word	0x20002248

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b096      	sub	sp, #88	; 0x58
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2244      	movs	r2, #68	; 0x44
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 fe3c 	bl	8008470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000806:	f44f 7000 	mov.w	r0, #512	; 0x200
 800080a:	f001 f8d7 	bl	80019bc <HAL_PWREx_ControlVoltageScaling>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000814:	f000 f9d2 	bl	8000bbc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000818:	f001 f8b2 	bl	8001980 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <SystemClock_Config+0xc0>)
 800081e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000822:	4a20      	ldr	r2, [pc, #128]	; (80008a4 <SystemClock_Config+0xc0>)
 8000824:	f023 0318 	bic.w	r3, r3, #24
 8000828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800082c:	2314      	movs	r3, #20
 800082e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800083c:	2360      	movs	r3, #96	; 0x60
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000844:	2301      	movs	r3, #1
 8000846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000848:	2301      	movs	r3, #1
 800084a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800084c:	2328      	movs	r3, #40	; 0x28
 800084e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000850:	2307      	movs	r3, #7
 8000852:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4618      	mov	r0, r3
 8000862:	f001 f901 	bl	8001a68 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800086c:	f000 f9a6 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	2303      	movs	r3, #3
 8000876:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	2104      	movs	r1, #4
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fd01 	bl	8002290 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000894:	f000 f992 	bl	8000bbc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000898:	f002 f946 	bl	8002b28 <HAL_RCCEx_EnableMSIPLLMode>
}
 800089c:	bf00      	nop
 800089e:	3758      	adds	r7, #88	; 0x58
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000

080008a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b096      	sub	sp, #88	; 0x58
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	222c      	movs	r2, #44	; 0x2c
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f007 fdcb 	bl	8008470 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <MX_TIM1_Init+0x114>)
 80008dc:	4a38      	ldr	r2, [pc, #224]	; (80009c0 <MX_TIM1_Init+0x118>)
 80008de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008e0:	4b36      	ldr	r3, [pc, #216]	; (80009bc <MX_TIM1_Init+0x114>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b35      	ldr	r3, [pc, #212]	; (80009bc <MX_TIM1_Init+0x114>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80008ec:	4b33      	ldr	r3, [pc, #204]	; (80009bc <MX_TIM1_Init+0x114>)
 80008ee:	2264      	movs	r2, #100	; 0x64
 80008f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b32      	ldr	r3, [pc, #200]	; (80009bc <MX_TIM1_Init+0x114>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f8:	4b30      	ldr	r3, [pc, #192]	; (80009bc <MX_TIM1_Init+0x114>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <MX_TIM1_Init+0x114>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000904:	482d      	ldr	r0, [pc, #180]	; (80009bc <MX_TIM1_Init+0x114>)
 8000906:	f002 fac7 	bl	8002e98 <HAL_TIM_PWM_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000910:	f000 f954 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000920:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000924:	4619      	mov	r1, r3
 8000926:	4825      	ldr	r0, [pc, #148]	; (80009bc <MX_TIM1_Init+0x114>)
 8000928:	f003 fc2e 	bl	8004188 <HAL_TIMEx_MasterConfigSynchronization>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000932:	f000 f943 	bl	8000bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000936:	2360      	movs	r3, #96	; 0x60
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 800093a:	2364      	movs	r3, #100	; 0x64
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800093e:	2302      	movs	r3, #2
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000942:	2300      	movs	r3, #0
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000952:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000956:	2200      	movs	r2, #0
 8000958:	4619      	mov	r1, r3
 800095a:	4818      	ldr	r0, [pc, #96]	; (80009bc <MX_TIM1_Init+0x114>)
 800095c:	f002 fef4 	bl	8003748 <HAL_TIM_PWM_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000966:	f000 f929 	bl	8000bbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800097e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000982:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800098c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	4619      	mov	r1, r3
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <MX_TIM1_Init+0x114>)
 80009a0:	f003 fc58 	bl	8004254 <HAL_TIMEx_ConfigBreakDeadTime>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80009aa:	f000 f907 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <MX_TIM1_Init+0x114>)
 80009b0:	f000 f98e 	bl	8000cd0 <HAL_TIM_MspPostInit>

}
 80009b4:	bf00      	nop
 80009b6:	3758      	adds	r7, #88	; 0x58
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20002130 	.word	0x20002130
 80009c0:	40012c00 	.word	0x40012c00

080009c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_USART2_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a08:	f003 fcba 	bl	8004380 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a12:	f000 f8d3 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200021c4 	.word	0x200021c4
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_DMA_Init+0x38>)
 8000a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <MX_DMA_Init+0x38>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6493      	str	r3, [r2, #72]	; 0x48
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_DMA_Init+0x38>)
 8000a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2105      	movs	r1, #5
 8000a46:	200c      	movs	r0, #12
 8000a48:	f000 fbb6 	bl	80011b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a4c:	200c      	movs	r0, #12
 8000a4e:	f000 fbcf 	bl	80011f0 <HAL_NVIC_EnableIRQ>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <MX_GPIO_Init+0x8c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <MX_GPIO_Init+0x8c>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_GPIO_Init+0x8c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_GPIO_Init+0x8c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a16      	ldr	r2, [pc, #88]	; (8000aec <MX_GPIO_Init+0x8c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_GPIO_Init+0x8c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_GPIO_Init+0x8c>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a10      	ldr	r2, [pc, #64]	; (8000aec <MX_GPIO_Init+0x8c>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_GPIO_Init+0x8c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <MX_GPIO_Init+0x90>)
 8000ac4:	f000 ff44 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_GPIO_Init+0x90>)
 8000ae0:	f000 fdcc 	bl	800167c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000
 8000af0:	48000400 	.word	0x48000400

08000af4 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	// Stop DMA
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000afc:	2100      	movs	r1, #0
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000b00:	f002 fc1a 	bl	8003338 <HAL_TIM_PWM_Stop_DMA>

	// Give Back Semaphore
	osSemaphoreRelease(sem_printPermissionHandle);
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 fb0b 	bl	8005124 <osSemaphoreRelease>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20002130 	.word	0x20002130
 8000b1c:	20002250 	.word	0x20002250

08000b20 <StartConServerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartConServerTask */
void StartConServerTask(void *argument)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char ch[] = {'1', '4', 'F'};
 8000b28:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <StartConServerTask+0x50>)
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	4611      	mov	r1, r2
 8000b32:	8019      	strh	r1, [r3, #0]
 8000b34:	3302      	adds	r3, #2
 8000b36:	0c12      	lsrs	r2, r2, #16
 8000b38:	701a      	strb	r2, [r3, #0]
	int i = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  printDataOnMatrix(&ch[i%3]);
 8000b3e:	68f9      	ldr	r1, [r7, #12]
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <StartConServerTask+0x54>)
 8000b42:	fb83 3201 	smull	r3, r2, r3, r1
 8000b46:	17cb      	asrs	r3, r1, #31
 8000b48:	1ad2      	subs	r2, r2, r3
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	1aca      	subs	r2, r1, r3
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	4413      	add	r3, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fcbb 	bl	80004d4 <printDataOnMatrix>
	  ++i;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	3301      	adds	r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]

    osDelay(1000);
 8000b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b68:	f004 f954 	bl	8004e14 <osDelay>
	  printDataOnMatrix(&ch[i%3]);
 8000b6c:	e7e7      	b.n	8000b3e <StartConServerTask+0x1e>
 8000b6e:	bf00      	nop
 8000b70:	080084cc 	.word	0x080084cc
 8000b74:	55555556 	.word	0x55555556

08000b78 <newDataTimerCallback>:
  /* USER CODE END 5 */
}

/* newDataTimerCallback function */
void newDataTimerCallback(void *argument)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN newDataTimerCallback */
	g_getNewData = true;
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <newDataTimerCallback+0x1c>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
  /* USER CODE END newDataTimerCallback */
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20002254 	.word	0x20002254

08000b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000baa:	f000 fa2d 	bl	8001008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40014400 	.word	0x40014400

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_MspInit+0x4c>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	210f      	movs	r1, #15
 8000c02:	f06f 0001 	mvn.w	r0, #1
 8000c06:	f000 fad7 	bl	80011b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a26      	ldr	r2, [pc, #152]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xa8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d146      	bne.n	8000cb8 <HAL_TIM_PWM_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <HAL_TIM_PWM_MspInit+0xac>)
 8000c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2e:	4a25      	ldr	r2, [pc, #148]	; (8000cc4 <HAL_TIM_PWM_MspInit+0xac>)
 8000c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c34:	6613      	str	r3, [r2, #96]	; 0x60
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <HAL_TIM_PWM_MspInit+0xac>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c44:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <HAL_TIM_PWM_MspInit+0xb4>)
 8000c46:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c50:	2210      	movs	r2, #16
 8000c52:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c5c:	2280      	movs	r2, #128	; 0x80
 8000c5e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c66:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c76:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000c7c:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c7e:	f000 fac5 	bl	800120c <HAL_DMA_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8000c88:	f7ff ff98 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
 8000c92:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	2019      	movs	r0, #25
 8000c9e:	f000 fa8b 	bl	80011b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ca2:	2019      	movs	r0, #25
 8000ca4:	f000 faa4 	bl	80011f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2105      	movs	r1, #5
 8000cac:	201b      	movs	r0, #27
 8000cae:	f000 fa83 	bl	80011b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000cb2:	201b      	movs	r0, #27
 8000cb4:	f000 fa9c 	bl	80011f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40012c00 	.word	0x40012c00
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	2000217c 	.word	0x2000217c
 8000ccc:	4002001c 	.word	0x4002001c

08000cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_TIM_MspPostInit+0x68>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d11d      	bne.n	8000d2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_TIM_MspPostInit+0x6c>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <HAL_TIM_MspPostInit+0x6c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_TIM_MspPostInit+0x6c>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d14:	2302      	movs	r3, #2
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2a:	f000 fca7 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b09e      	sub	sp, #120	; 0x78
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2254      	movs	r2, #84	; 0x54
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f007 fb85 	bl	8008470 <memset>
  if(huart->Instance==USART2)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a28      	ldr	r2, [pc, #160]	; (8000e0c <HAL_UART_MspInit+0xcc>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d148      	bne.n	8000e02 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 fcdd 	bl	800273c <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d88:	f7ff ff18 	bl	8000bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8c:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <HAL_UART_MspInit+0xd0>)
 8000d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <HAL_UART_MspInit+0xd0>)
 8000d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d96:	6593      	str	r3, [r2, #88]	; 0x58
 8000d98:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <HAL_UART_MspInit+0xd0>)
 8000d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <HAL_UART_MspInit+0xd0>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_UART_MspInit+0xd0>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_UART_MspInit+0xd0>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dda:	f000 fc4f 	bl	800167c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000de2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000df0:	2303      	movs	r3, #3
 8000df2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfe:	f000 fc3d 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3778      	adds	r7, #120	; 0x78
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <HAL_InitTick+0xc8>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	4a2d      	ldr	r2, [pc, #180]	; (8000edc <HAL_InitTick+0xc8>)
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2e:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <HAL_InitTick+0xc8>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e3a:	f107 020c 	add.w	r2, r7, #12
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fbe7 	bl	8002618 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e4a:	f001 fbcf 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 8000e4e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <HAL_InitTick+0xcc>)
 8000e54:	fba2 2303 	umull	r2, r3, r2, r3
 8000e58:	0c9b      	lsrs	r3, r3, #18
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <HAL_InitTick+0xd0>)
 8000e60:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <HAL_InitTick+0xd4>)
 8000e62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <HAL_InitTick+0xd0>)
 8000e66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e6a:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000e6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <HAL_InitTick+0xd0>)
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_InitTick+0xd0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_InitTick+0xd0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_InitTick+0xd0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <HAL_InitTick+0xd0>)
 8000e86:	f001 ff51 	bl	8002d2c <HAL_TIM_Base_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d11b      	bne.n	8000ed0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000e98:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <HAL_InitTick+0xd0>)
 8000e9a:	f001 ffa9 	bl	8002df0 <HAL_TIM_Base_Start_IT>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d111      	bne.n	8000ed0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000eac:	2019      	movs	r0, #25
 8000eae:	f000 f99f 	bl	80011f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d808      	bhi.n	8000eca <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	2019      	movs	r0, #25
 8000ebe:	f000 f97b 	bl	80011b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_InitTick+0xd8>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e002      	b.n	8000ed0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3730      	adds	r7, #48	; 0x30
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	431bde83 	.word	0x431bde83
 8000ee4:	20002258 	.word	0x20002258
 8000ee8:	40014400 	.word	0x40014400
 8000eec:	20002104 	.word	0x20002104

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <DMA1_Channel2_IRQHandler+0x10>)
 8000f22:	f000 facc 	bl	80014be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000217c 	.word	0x2000217c

08000f30 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000f36:	f002 fae7 	bl	8003508 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000f3a:	4803      	ldr	r0, [pc, #12]	; (8000f48 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000f3c:	f002 fae4 	bl	8003508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20002130 	.word	0x20002130
 8000f48:	20002258 	.word	0x20002258

08000f4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <TIM1_CC_IRQHandler+0x10>)
 8000f52:	f002 fad9 	bl	8003508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20002130 	.word	0x20002130

08000f60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <SystemInit+0x20>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <SystemInit+0x20>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f88:	f7ff ffea 	bl	8000f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8e:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <LoopForever+0xe>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <LoopForever+0x16>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f007 fa2b 	bl	800840c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fb6:	f7ff fbd9 	bl	800076c <main>

08000fba <LoopForever>:

LoopForever:
    b LoopForever
 8000fba:	e7fe      	b.n	8000fba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	20002110 	.word	0x20002110
  ldr r2, =_sidata
 8000fc8:	08008584 	.word	0x08008584
  ldr r2, =_sbss
 8000fcc:	20002110 	.word	0x20002110
  ldr r4, =_ebss
 8000fd0:	20004768 	.word	0x20004768

08000fd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC1_IRQHandler>

08000fd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f8de 	bl	80011a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f7ff ff14 	bl	8000e14 <HAL_InitTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	e001      	b.n	8000ffc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ff8:	f7ff fde6 	bl	8000bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20002108 	.word	0x20002108
 800102c:	200022a4 	.word	0x200022a4

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200022a4 	.word	0x200022a4

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff4c 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ca:	f7ff ff61 	bl	8001090 <__NVIC_GetPriorityGrouping>
 80011ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	68b9      	ldr	r1, [r7, #8]
 80011d4:	6978      	ldr	r0, [r7, #20]
 80011d6:	f7ff ffb1 	bl	800113c <NVIC_EncodePriority>
 80011da:	4602      	mov	r2, r0
 80011dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff80 	bl	80010e8 <__NVIC_SetPriority>
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff54 	bl	80010ac <__NVIC_EnableIRQ>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e098      	b.n	8001350 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b4d      	ldr	r3, [pc, #308]	; (800135c <HAL_DMA_Init+0x150>)
 8001226:	429a      	cmp	r2, r3
 8001228:	d80f      	bhi.n	800124a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <HAL_DMA_Init+0x154>)
 8001232:	4413      	add	r3, r2
 8001234:	4a4b      	ldr	r2, [pc, #300]	; (8001364 <HAL_DMA_Init+0x158>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	009a      	lsls	r2, r3, #2
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a48      	ldr	r2, [pc, #288]	; (8001368 <HAL_DMA_Init+0x15c>)
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
 8001248:	e00e      	b.n	8001268 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	4b46      	ldr	r3, [pc, #280]	; (800136c <HAL_DMA_Init+0x160>)
 8001252:	4413      	add	r3, r2
 8001254:	4a43      	ldr	r2, [pc, #268]	; (8001364 <HAL_DMA_Init+0x158>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	009a      	lsls	r2, r3, #2
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a42      	ldr	r2, [pc, #264]	; (8001370 <HAL_DMA_Init+0x164>)
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2202      	movs	r2, #2
 800126c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800127e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001282:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800128c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012c2:	d039      	beq.n	8001338 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	4a27      	ldr	r2, [pc, #156]	; (8001368 <HAL_DMA_Init+0x15c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d11a      	bne.n	8001304 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <HAL_DMA_Init+0x168>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f003 031c 	and.w	r3, r3, #28
 80012da:	210f      	movs	r1, #15
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4924      	ldr	r1, [pc, #144]	; (8001374 <HAL_DMA_Init+0x168>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <HAL_DMA_Init+0x168>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f4:	f003 031c 	and.w	r3, r3, #28
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	491d      	ldr	r1, [pc, #116]	; (8001374 <HAL_DMA_Init+0x168>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
 8001302:	e019      	b.n	8001338 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <HAL_DMA_Init+0x16c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	f003 031c 	and.w	r3, r3, #28
 8001310:	210f      	movs	r1, #15
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	4917      	ldr	r1, [pc, #92]	; (8001378 <HAL_DMA_Init+0x16c>)
 800131a:	4013      	ands	r3, r2
 800131c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_DMA_Init+0x16c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6859      	ldr	r1, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f003 031c 	and.w	r3, r3, #28
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	4911      	ldr	r1, [pc, #68]	; (8001378 <HAL_DMA_Init+0x16c>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40020407 	.word	0x40020407
 8001360:	bffdfff8 	.word	0xbffdfff8
 8001364:	cccccccd 	.word	0xcccccccd
 8001368:	40020000 	.word	0x40020000
 800136c:	bffdfbf8 	.word	0xbffdfbf8
 8001370:	40020400 	.word	0x40020400
 8001374:	400200a8 	.word	0x400200a8
 8001378:	400204a8 	.word	0x400204a8

0800137c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_DMA_Start_IT+0x20>
 8001398:	2302      	movs	r3, #2
 800139a:	e04b      	b.n	8001434 <HAL_DMA_Start_IT+0xb8>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d13a      	bne.n	8001426 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2202      	movs	r2, #2
 80013b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	68b9      	ldr	r1, [r7, #8]
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f000 f921 	bl	800161c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d008      	beq.n	80013f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f042 020e 	orr.w	r2, r2, #14
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e00f      	b.n	8001414 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0204 	bic.w	r2, r2, #4
 8001402:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 020a 	orr.w	r2, r2, #10
 8001412:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e005      	b.n	8001432 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800142e:	2302      	movs	r3, #2
 8001430:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001432:	7dfb      	ldrb	r3, [r7, #23]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d005      	beq.n	8001460 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2204      	movs	r2, #4
 8001458:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e029      	b.n	80014b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 020e 	bic.w	r2, r2, #14
 800146e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001484:	f003 021c 	and.w	r2, r3, #28
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	2101      	movs	r1, #1
 800148e:	fa01 f202 	lsl.w	r2, r1, r2
 8001492:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	4798      	blx	r3
    }
  }
  return status;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f003 031c 	and.w	r3, r3, #28
 80014de:	2204      	movs	r2, #4
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d026      	beq.n	8001538 <HAL_DMA_IRQHandler+0x7a>
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d021      	beq.n	8001538 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d107      	bne.n	8001512 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0204 	bic.w	r2, r2, #4
 8001510:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f003 021c 	and.w	r2, r3, #28
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	2104      	movs	r1, #4
 8001520:	fa01 f202 	lsl.w	r2, r1, r2
 8001524:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	2b00      	cmp	r3, #0
 800152c:	d071      	beq.n	8001612 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001536:	e06c      	b.n	8001612 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153c:	f003 031c 	and.w	r3, r3, #28
 8001540:	2202      	movs	r2, #2
 8001542:	409a      	lsls	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d02e      	beq.n	80015aa <HAL_DMA_IRQHandler+0xec>
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d029      	beq.n	80015aa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10b      	bne.n	800157c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 020a 	bic.w	r2, r2, #10
 8001572:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	f003 021c 	and.w	r2, r3, #28
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	2102      	movs	r1, #2
 800158a:	fa01 f202 	lsl.w	r2, r1, r2
 800158e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	2b00      	cmp	r3, #0
 800159e:	d038      	beq.n	8001612 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015a8:	e033      	b.n	8001612 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f003 031c 	and.w	r3, r3, #28
 80015b2:	2208      	movs	r2, #8
 80015b4:	409a      	lsls	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d02a      	beq.n	8001614 <HAL_DMA_IRQHandler+0x156>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d025      	beq.n	8001614 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 020e 	bic.w	r2, r2, #14
 80015d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	f003 021c 	and.w	r2, r3, #28
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001606:	2b00      	cmp	r3, #0
 8001608:	d004      	beq.n	8001614 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001612:	bf00      	nop
 8001614:	bf00      	nop
}
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 021c 	and.w	r2, r3, #28
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	2101      	movs	r1, #1
 8001638:	fa01 f202 	lsl.w	r2, r1, r2
 800163c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b10      	cmp	r3, #16
 800164c:	d108      	bne.n	8001660 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800165e:	e007      	b.n	8001670 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	60da      	str	r2, [r3, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168a:	e148      	b.n	800191e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 813a 	beq.w	8001918 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d005      	beq.n	80016bc <HAL_GPIO_Init+0x40>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d130      	bne.n	800171e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016f2:	2201      	movs	r2, #1
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	f003 0201 	and.w	r2, r3, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b03      	cmp	r3, #3
 8001728:	d017      	beq.n	800175a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2203      	movs	r2, #3
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d123      	bne.n	80017ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	08da      	lsrs	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3208      	adds	r2, #8
 800176e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	691a      	ldr	r2, [r3, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	08da      	lsrs	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3208      	adds	r2, #8
 80017a8:	6939      	ldr	r1, [r7, #16]
 80017aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0203 	and.w	r2, r3, #3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8094 	beq.w	8001918 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f0:	4b52      	ldr	r3, [pc, #328]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80017f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f4:	4a51      	ldr	r2, [pc, #324]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6613      	str	r3, [r2, #96]	; 0x60
 80017fc:	4b4f      	ldr	r3, [pc, #316]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80017fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001808:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <HAL_GPIO_Init+0x2c4>)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001832:	d00d      	beq.n	8001850 <HAL_GPIO_Init+0x1d4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a43      	ldr	r2, [pc, #268]	; (8001944 <HAL_GPIO_Init+0x2c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <HAL_GPIO_Init+0x1d0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a42      	ldr	r2, [pc, #264]	; (8001948 <HAL_GPIO_Init+0x2cc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_GPIO_Init+0x1cc>
 8001844:	2302      	movs	r3, #2
 8001846:	e004      	b.n	8001852 <HAL_GPIO_Init+0x1d6>
 8001848:	2307      	movs	r3, #7
 800184a:	e002      	b.n	8001852 <HAL_GPIO_Init+0x1d6>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_GPIO_Init+0x1d6>
 8001850:	2300      	movs	r3, #0
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	f002 0203 	and.w	r2, r2, #3
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	4093      	lsls	r3, r2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001862:	4937      	ldr	r1, [pc, #220]	; (8001940 <HAL_GPIO_Init+0x2c4>)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001870:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_GPIO_Init+0x2d0>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001894:	4a2d      	ldr	r2, [pc, #180]	; (800194c <HAL_GPIO_Init+0x2d0>)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800189a:	4b2c      	ldr	r3, [pc, #176]	; (800194c <HAL_GPIO_Init+0x2d0>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018be:	4a23      	ldr	r2, [pc, #140]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018e8:	4a18      	ldr	r2, [pc, #96]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_GPIO_Init+0x2d0>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	f47f aeaf 	bne.w	800168c <HAL_GPIO_Init+0x10>
  }
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	48000400 	.word	0x48000400
 8001948:	48000800 	.word	0x48000800
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800196c:	e002      	b.n	8001974 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40007000 	.word	0x40007000

080019a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40007000 	.word	0x40007000

080019bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ca:	d130      	bne.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d8:	d038      	beq.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2232      	movs	r2, #50	; 0x32
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0c9b      	lsrs	r3, r3, #18
 80019fc:	3301      	adds	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a00:	e002      	b.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a14:	d102      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f2      	bne.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a28:	d110      	bne.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e00f      	b.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3a:	d007      	beq.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a44:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	20002100 	.word	0x20002100
 8001a64:	431bde83 	.word	0x431bde83

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f000 bc02 	b.w	8002280 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7c:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a86:	4b94      	ldr	r3, [pc, #592]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80e4 	beq.w	8001c66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4c>
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b0c      	cmp	r3, #12
 8001aa8:	f040 808b 	bne.w	8001bc2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	f040 8087 	bne.w	8001bc2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab4:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_OscConfig+0x64>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e3d9      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1a      	ldr	r2, [r3, #32]
 8001ad0:	4b81      	ldr	r3, [pc, #516]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d004      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x7e>
 8001adc:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae4:	e005      	b.n	8001af2 <HAL_RCC_OscConfig+0x8a>
 8001ae6:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d223      	bcs.n	8001b3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fdbe 	bl	800267c <RCC_SetFlashLatencyFromMSIRange>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e3ba      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0a:	4b73      	ldr	r3, [pc, #460]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a72      	ldr	r2, [pc, #456]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	496d      	ldr	r1, [pc, #436]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b28:	4b6b      	ldr	r3, [pc, #428]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	4968      	ldr	r1, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	e025      	b.n	8001b8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3e:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4960      	ldr	r1, [pc, #384]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5c:	4b5e      	ldr	r3, [pc, #376]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	495b      	ldr	r1, [pc, #364]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fd7e 	bl	800267c <RCC_SetFlashLatencyFromMSIRange>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e37a      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b8a:	f000 fc81 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	4950      	ldr	r1, [pc, #320]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b9c:	5ccb      	ldrb	r3, [r1, r3]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	4a4e      	ldr	r2, [pc, #312]	; (8001ce0 <HAL_RCC_OscConfig+0x278>)
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001baa:	4b4e      	ldr	r3, [pc, #312]	; (8001ce4 <HAL_RCC_OscConfig+0x27c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f930 	bl	8000e14 <HAL_InitTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d052      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	e35e      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d032      	beq.n	8001c30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a42      	ldr	r2, [pc, #264]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fa2b 	bl	8001030 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bde:	f7ff fa27 	bl	8001030 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e347      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a35      	ldr	r2, [pc, #212]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c02:	f043 0308 	orr.w	r3, r3, #8
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4930      	ldr	r1, [pc, #192]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	492b      	ldr	r1, [pc, #172]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
 8001c2e:	e01a      	b.n	8001c66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a28      	ldr	r2, [pc, #160]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f9f8 	bl	8001030 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c44:	f7ff f9f4 	bl	8001030 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e314      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1dc>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d073      	beq.n	8001d5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x21c>
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d10e      	bne.n	8001c9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d10b      	bne.n	8001c9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d063      	beq.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d15f      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e2f1      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d106      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x24c>
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e025      	b.n	8001d00 <HAL_RCC_OscConfig+0x298>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cbc:	d114      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x280>
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a02      	ldr	r2, [pc, #8]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e013      	b.n	8001d00 <HAL_RCC_OscConfig+0x298>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	0800852c 	.word	0x0800852c
 8001ce0:	20002100 	.word	0x20002100
 8001ce4:	20002104 	.word	0x20002104
 8001ce8:	4ba0      	ldr	r3, [pc, #640]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a9f      	ldr	r2, [pc, #636]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b9d      	ldr	r3, [pc, #628]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a9c      	ldr	r2, [pc, #624]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f992 	bl	8001030 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f98e 	bl	8001030 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e2ae      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d22:	4b92      	ldr	r3, [pc, #584]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2a8>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff f97e 	bl	8001030 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff f97a 	bl	8001030 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e29a      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d4a:	4b88      	ldr	r3, [pc, #544]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2d0>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d060      	beq.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_OscConfig+0x310>
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d119      	bne.n	8001da6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d116      	bne.n	8001da6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d78:	4b7c      	ldr	r3, [pc, #496]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_OscConfig+0x328>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e277      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b76      	ldr	r3, [pc, #472]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	4973      	ldr	r1, [pc, #460]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da4:	e040      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d023      	beq.n	8001df6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dae:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a6e      	ldr	r2, [pc, #440]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff f939 	bl	8001030 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff f935 	bl	8001030 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e255      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd4:	4b65      	ldr	r3, [pc, #404]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	495f      	ldr	r1, [pc, #380]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
 8001df4:	e018      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5c      	ldr	r2, [pc, #368]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7ff f915 	bl	8001030 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7ff f911 	bl	8001030 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e231      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e1c:	4b53      	ldr	r3, [pc, #332]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d03c      	beq.n	8001eae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01c      	beq.n	8001e76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3c:	4b4b      	ldr	r3, [pc, #300]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e42:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff f8f0 	bl	8001030 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff f8ec 	bl	8001030 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e20c      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e66:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ef      	beq.n	8001e54 <HAL_RCC_OscConfig+0x3ec>
 8001e74:	e01b      	b.n	8001eae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7c:	4a3b      	ldr	r2, [pc, #236]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e86:	f7ff f8d3 	bl	8001030 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f8cf 	bl	8001030 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e1ef      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea0:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ef      	bne.n	8001e8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80a6 	beq.w	8002008 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	4a26      	ldr	r2, [pc, #152]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed8:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee8:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <HAL_RCC_OscConfig+0x508>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d118      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_OscConfig+0x508>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_RCC_OscConfig+0x508>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f00:	f7ff f896 	bl	8001030 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f08:	f7ff f892 	bl	8001030 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1b2      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_RCC_OscConfig+0x508>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d108      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4d8>
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3e:	e029      	b.n	8001f94 <HAL_RCC_OscConfig+0x52c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d115      	bne.n	8001f74 <HAL_RCC_OscConfig+0x50c>
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	4a03      	ldr	r2, [pc, #12]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f68:	e014      	b.n	8001f94 <HAL_RCC_OscConfig+0x52c>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40007000 	.word	0x40007000
 8001f74:	4b9a      	ldr	r3, [pc, #616]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	4a99      	ldr	r2, [pc, #612]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f84:	4b96      	ldr	r3, [pc, #600]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	4a95      	ldr	r2, [pc, #596]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8001f8c:	f023 0304 	bic.w	r3, r3, #4
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d016      	beq.n	8001fca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7ff f848 	bl	8001030 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f844 	bl	8001030 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e162      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fba:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ed      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x53c>
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7ff f831 	bl	8001030 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff f82d 	bl	8001030 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e14b      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe8:	4b7d      	ldr	r3, [pc, #500]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1ed      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	4a77      	ldr	r2, [pc, #476]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8002002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002006:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b00      	cmp	r3, #0
 8002012:	d03c      	beq.n	800208e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01c      	beq.n	8002056 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800201c:	4b70      	ldr	r3, [pc, #448]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 800201e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002022:	4a6f      	ldr	r2, [pc, #444]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7ff f800 	bl	8001030 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002034:	f7fe fffc 	bl	8001030 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e11c      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002046:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8002048:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ef      	beq.n	8002034 <HAL_RCC_OscConfig+0x5cc>
 8002054:	e01b      	b.n	800208e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002056:	4b62      	ldr	r3, [pc, #392]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8002058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800205c:	4a60      	ldr	r2, [pc, #384]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7fe ffe3 	bl	8001030 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206e:	f7fe ffdf 	bl	8001030 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e0ff      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002080:	4b57      	ldr	r3, [pc, #348]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8002082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ef      	bne.n	800206e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80f3 	beq.w	800227e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	2b02      	cmp	r3, #2
 800209e:	f040 80c9 	bne.w	8002234 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020a2:	4b4f      	ldr	r3, [pc, #316]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0203 	and.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d12c      	bne.n	8002110 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	3b01      	subs	r3, #1
 80020c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d123      	bne.n	8002110 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d11b      	bne.n	8002110 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d113      	bne.n	8002110 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	3b01      	subs	r3, #1
 80020f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d109      	bne.n	8002110 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	085b      	lsrs	r3, r3, #1
 8002108:	3b01      	subs	r3, #1
 800210a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d06b      	beq.n	80021e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d062      	beq.n	80021dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002116:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0ac      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002126:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2d      	ldr	r2, [pc, #180]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 800212c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002130:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002132:	f7fe ff7d 	bl	8001030 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213a:	f7fe ff79 	bl	8001030 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e099      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f0      	bne.n	800213a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCC_OscConfig+0x77c>)
 800215e:	4013      	ands	r3, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002168:	3a01      	subs	r2, #1
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	4311      	orrs	r1, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002172:	0212      	lsls	r2, r2, #8
 8002174:	4311      	orrs	r1, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800217a:	0852      	lsrs	r2, r2, #1
 800217c:	3a01      	subs	r2, #1
 800217e:	0552      	lsls	r2, r2, #21
 8002180:	4311      	orrs	r1, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002186:	0852      	lsrs	r2, r2, #1
 8002188:	3a01      	subs	r2, #1
 800218a:	0652      	lsls	r2, r2, #25
 800218c:	4311      	orrs	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002192:	06d2      	lsls	r2, r2, #27
 8002194:	430a      	orrs	r2, r1
 8002196:	4912      	ldr	r1, [pc, #72]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 8002198:	4313      	orrs	r3, r2
 800219a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0f      	ldr	r2, [pc, #60]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021b4:	f7fe ff3c 	bl	8001030 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe ff38 	bl	8001030 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e058      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <HAL_RCC_OscConfig+0x778>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021da:	e050      	b.n	800227e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e04f      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
 80021e0:	40021000 	.word	0x40021000
 80021e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e8:	4b27      	ldr	r3, [pc, #156]	; (8002288 <HAL_RCC_OscConfig+0x820>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d144      	bne.n	800227e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCC_OscConfig+0x820>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a23      	ldr	r2, [pc, #140]	; (8002288 <HAL_RCC_OscConfig+0x820>)
 80021fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002200:	4b21      	ldr	r3, [pc, #132]	; (8002288 <HAL_RCC_OscConfig+0x820>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <HAL_RCC_OscConfig+0x820>)
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800220c:	f7fe ff10 	bl	8001030 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe ff0c 	bl	8001030 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e02c      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_RCC_OscConfig+0x820>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x7ac>
 8002232:	e024      	b.n	800227e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d01f      	beq.n	800227a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_RCC_OscConfig+0x820>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <HAL_RCC_OscConfig+0x820>)
 8002240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe fef3 	bl	8001030 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7fe feef 	bl	8001030 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e00f      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_OscConfig+0x820>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_OscConfig+0x820>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4905      	ldr	r1, [pc, #20]	; (8002288 <HAL_RCC_OscConfig+0x820>)
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_OscConfig+0x824>)
 8002274:	4013      	ands	r3, r2
 8002276:	60cb      	str	r3, [r1, #12]
 8002278:	e001      	b.n	800227e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	feeefffc 	.word	0xfeeefffc

08002290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0e7      	b.n	8002474 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b75      	ldr	r3, [pc, #468]	; (800247c <HAL_RCC_ClockConfig+0x1ec>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d910      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b72      	ldr	r3, [pc, #456]	; (800247c <HAL_RCC_ClockConfig+0x1ec>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4970      	ldr	r1, [pc, #448]	; (800247c <HAL_RCC_ClockConfig+0x1ec>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b6e      	ldr	r3, [pc, #440]	; (800247c <HAL_RCC_ClockConfig+0x1ec>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0cf      	b.n	8002474 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d010      	beq.n	8002302 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	4b66      	ldr	r3, [pc, #408]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d908      	bls.n	8002302 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f0:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4960      	ldr	r1, [pc, #384]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d04c      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002316:	4b5a      	ldr	r3, [pc, #360]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d121      	bne.n	8002366 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0a6      	b.n	8002474 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800232e:	4b54      	ldr	r3, [pc, #336]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d115      	bne.n	8002366 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e09a      	b.n	8002474 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002346:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e08e      	b.n	8002474 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002356:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e086      	b.n	8002474 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002366:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f023 0203 	bic.w	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4943      	ldr	r1, [pc, #268]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 8002374:	4313      	orrs	r3, r2
 8002376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002378:	f7fe fe5a 	bl	8001030 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	e00a      	b.n	8002396 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002380:	f7fe fe56 	bl	8001030 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e06e      	b.n	8002474 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	4b3a      	ldr	r3, [pc, #232]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 020c 	and.w	r2, r3, #12
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d1eb      	bne.n	8002380 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d010      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	4b31      	ldr	r3, [pc, #196]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d208      	bcs.n	80023d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	492b      	ldr	r1, [pc, #172]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <HAL_RCC_ClockConfig+0x1ec>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d210      	bcs.n	8002406 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <HAL_RCC_ClockConfig+0x1ec>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 0207 	bic.w	r2, r3, #7
 80023ec:	4923      	ldr	r1, [pc, #140]	; (800247c <HAL_RCC_ClockConfig+0x1ec>)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <HAL_RCC_ClockConfig+0x1ec>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d001      	beq.n	8002406 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e036      	b.n	8002474 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4918      	ldr	r1, [pc, #96]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d009      	beq.n	8002444 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4910      	ldr	r1, [pc, #64]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002444:	f000 f824 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	490b      	ldr	r1, [pc, #44]	; (8002484 <HAL_RCC_ClockConfig+0x1f4>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
 8002460:	4a09      	ldr	r2, [pc, #36]	; (8002488 <HAL_RCC_ClockConfig+0x1f8>)
 8002462:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1fc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fcd3 	bl	8000e14 <HAL_InitTick>
 800246e:	4603      	mov	r3, r0
 8002470:	72fb      	strb	r3, [r7, #11]

  return status;
 8002472:	7afb      	ldrb	r3, [r7, #11]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40022000 	.word	0x40022000
 8002480:	40021000 	.word	0x40021000
 8002484:	0800852c 	.word	0x0800852c
 8002488:	20002100 	.word	0x20002100
 800248c:	20002104 	.word	0x20002104

08002490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249e:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a8:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_GetSysClockFreq+0x108>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x34>
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d121      	bne.n	8002502 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d11e      	bne.n	8002502 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024d0:	4b31      	ldr	r3, [pc, #196]	; (8002598 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e005      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024e0:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024ec:	4a2b      	ldr	r2, [pc, #172]	; (800259c <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10d      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d102      	bne.n	800250e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	e004      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b08      	cmp	r3, #8
 8002512:	d101      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002516:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d134      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <HAL_RCC_GetSysClockFreq+0x108>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d003      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0xa6>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d003      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0xac>
 8002534:	e005      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002538:	617b      	str	r3, [r7, #20]
      break;
 800253a:	e005      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800253e:	617b      	str	r3, [r7, #20]
      break;
 8002540:	e002      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	617b      	str	r3, [r7, #20]
      break;
 8002546:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_RCC_GetSysClockFreq+0x108>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	3301      	adds	r3, #1
 8002554:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_GetSysClockFreq+0x108>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	fb03 f202 	mul.w	r2, r3, r2
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_RCC_GetSysClockFreq+0x108>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	0e5b      	lsrs	r3, r3, #25
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	3301      	adds	r3, #1
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	fbb2 f3f3 	udiv	r3, r2, r3
 8002586:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002588:	69bb      	ldr	r3, [r7, #24]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	08008544 	.word	0x08008544
 80025a0:	00f42400 	.word	0x00f42400
 80025a4:	007a1200 	.word	0x007a1200

080025a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20002100 	.word	0x20002100

080025c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025c4:	f7ff fff0 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4904      	ldr	r1, [pc, #16]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	0800853c 	.word	0x0800853c

080025ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025f0:	f7ff ffda 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0adb      	lsrs	r3, r3, #11
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4904      	ldr	r1, [pc, #16]	; (8002614 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	0800853c 	.word	0x0800853c

08002618 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	220f      	movs	r2, #15
 8002626:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_RCC_GetClockConfig+0x5c>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0203 	and.w	r2, r3, #3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_RCC_GetClockConfig+0x5c>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <HAL_RCC_GetClockConfig+0x5c>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_GetClockConfig+0x5c>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <HAL_RCC_GetClockConfig+0x60>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0207 	and.w	r2, r3, #7
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	601a      	str	r2, [r3, #0]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	40022000 	.word	0x40022000

0800267c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002694:	f7ff f984 	bl	80019a0 <HAL_PWREx_GetVoltageRange>
 8002698:	6178      	str	r0, [r7, #20]
 800269a:	e014      	b.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	4a24      	ldr	r2, [pc, #144]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6593      	str	r3, [r2, #88]	; 0x58
 80026a8:	4b22      	ldr	r3, [pc, #136]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026b4:	f7ff f974 	bl	80019a0 <HAL_PWREx_GetVoltageRange>
 80026b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	4a1d      	ldr	r2, [pc, #116]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026cc:	d10b      	bne.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b80      	cmp	r3, #128	; 0x80
 80026d2:	d919      	bls.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2ba0      	cmp	r3, #160	; 0xa0
 80026d8:	d902      	bls.n	80026e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026da:	2302      	movs	r3, #2
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	e013      	b.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026e0:	2301      	movs	r3, #1
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	e010      	b.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b80      	cmp	r3, #128	; 0x80
 80026ea:	d902      	bls.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026ec:	2303      	movs	r3, #3
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	e00a      	b.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b80      	cmp	r3, #128	; 0x80
 80026f6:	d102      	bne.n	80026fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026f8:	2302      	movs	r3, #2
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	e004      	b.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b70      	cmp	r3, #112	; 0x70
 8002702:	d101      	bne.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002704:	2301      	movs	r3, #1
 8002706:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 0207 	bic.w	r2, r3, #7
 8002710:	4909      	ldr	r1, [pc, #36]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	40022000 	.word	0x40022000

0800273c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002744:	2300      	movs	r3, #0
 8002746:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002748:	2300      	movs	r3, #0
 800274a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002754:	2b00      	cmp	r3, #0
 8002756:	d031      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002760:	d01a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002762:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002766:	d814      	bhi.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d009      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800276c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002770:	d10f      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002772:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	4a5c      	ldr	r2, [pc, #368]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800277e:	e00c      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f9de 	bl	8002b48 <RCCEx_PLLSAI1_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002790:	e003      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	74fb      	strb	r3, [r7, #19]
      break;
 8002796:	e000      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027a0:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ae:	494e      	ldr	r1, [pc, #312]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b6:	e001      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 809e 	beq.w	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	4a3f      	ldr	r2, [pc, #252]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6593      	str	r3, [r2, #88]	; 0x58
 80027f0:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fc:	2301      	movs	r3, #1
 80027fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002800:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a39      	ldr	r2, [pc, #228]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800280c:	f7fe fc10 	bl	8001030 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002812:	e009      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002814:	f7fe fc0c 	bl	8001030 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d902      	bls.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	74fb      	strb	r3, [r7, #19]
        break;
 8002826:	e005      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002828:	4b30      	ldr	r3, [pc, #192]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ef      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d15a      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800283a:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002844:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01e      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	429a      	cmp	r2, r3
 8002854:	d019      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002860:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002878:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800287a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002882:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d016      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fbcc 	bl	8001030 <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289a:	e00b      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe fbc8 	bl	8001030 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d902      	bls.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	74fb      	strb	r3, [r7, #19]
            break;
 80028b2:	e006      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0ec      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c8:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d6:	4904      	ldr	r1, [pc, #16]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028de:	e009      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	74bb      	strb	r3, [r7, #18]
 80028e4:	e006      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f4:	7c7b      	ldrb	r3, [r7, #17]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d105      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fa:	4b8a      	ldr	r3, [pc, #552]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	4a89      	ldr	r2, [pc, #548]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002904:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002912:	4b84      	ldr	r3, [pc, #528]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f023 0203 	bic.w	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4980      	ldr	r1, [pc, #512]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002934:	4b7b      	ldr	r3, [pc, #492]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 020c 	bic.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	4978      	ldr	r1, [pc, #480]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002956:	4b73      	ldr	r3, [pc, #460]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	496f      	ldr	r1, [pc, #444]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002978:	4b6a      	ldr	r3, [pc, #424]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	4967      	ldr	r1, [pc, #412]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800299a:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	495e      	ldr	r1, [pc, #376]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029bc:	4b59      	ldr	r3, [pc, #356]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	4956      	ldr	r1, [pc, #344]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029de:	4b51      	ldr	r3, [pc, #324]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	494d      	ldr	r1, [pc, #308]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d028      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a00:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4945      	ldr	r1, [pc, #276]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a20:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a3f      	ldr	r2, [pc, #252]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a2a:	60d3      	str	r3, [r2, #12]
 8002a2c:	e011      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f882 	bl	8002b48 <RCCEx_PLLSAI1_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d028      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a5e:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	492d      	ldr	r1, [pc, #180]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7e:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a88:	60d3      	str	r3, [r2, #12]
 8002a8a:	e011      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f853 	bl	8002b48 <RCCEx_PLLSAI1_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01c      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aca:	4916      	ldr	r1, [pc, #88]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f830 	bl	8002b48 <RCCEx_PLLSAI1_Config>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002af2:	7cfb      	ldrb	r3, [r7, #19]
 8002af4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	4904      	ldr	r1, [pc, #16]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b18:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6013      	str	r3, [r2, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000

08002b48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b56:	4b74      	ldr	r3, [pc, #464]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d018      	beq.n	8002b94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b62:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0203 	and.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d10d      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
       ||
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b7a:	4b6b      	ldr	r3, [pc, #428]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
       ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d047      	beq.n	8002c1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
 8002b92:	e044      	b.n	8002c1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d018      	beq.n	8002bce <RCCEx_PLLSAI1_Config+0x86>
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d825      	bhi.n	8002bec <RCCEx_PLLSAI1_Config+0xa4>
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d002      	beq.n	8002baa <RCCEx_PLLSAI1_Config+0x62>
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d009      	beq.n	8002bbc <RCCEx_PLLSAI1_Config+0x74>
 8002ba8:	e020      	b.n	8002bec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002baa:	4b5f      	ldr	r3, [pc, #380]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11d      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bba:	e01a      	b.n	8002bf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bbc:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d116      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bcc:	e013      	b.n	8002bf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bce:	4b56      	ldr	r3, [pc, #344]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10f      	bne.n	8002bfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bda:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bea:	e006      	b.n	8002bfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf0:	e004      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e002      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c02:	4b49      	ldr	r3, [pc, #292]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	430b      	orrs	r3, r1
 8002c18:	4943      	ldr	r1, [pc, #268]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d17c      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a3f      	ldr	r2, [pc, #252]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c30:	f7fe f9fe 	bl	8001030 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c36:	e009      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c38:	f7fe f9fa 	bl	8001030 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d902      	bls.n	8002c4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	73fb      	strb	r3, [r7, #15]
        break;
 8002c4a:	e005      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c4c:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ef      	bne.n	8002c38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d15f      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d110      	bne.n	8002c86 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c64:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6892      	ldr	r2, [r2, #8]
 8002c74:	0211      	lsls	r1, r2, #8
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68d2      	ldr	r2, [r2, #12]
 8002c7a:	06d2      	lsls	r2, r2, #27
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	492a      	ldr	r1, [pc, #168]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	610b      	str	r3, [r1, #16]
 8002c84:	e027      	b.n	8002cd6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d112      	bne.n	8002cb2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6892      	ldr	r2, [r2, #8]
 8002c9c:	0211      	lsls	r1, r2, #8
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6912      	ldr	r2, [r2, #16]
 8002ca2:	0852      	lsrs	r2, r2, #1
 8002ca4:	3a01      	subs	r2, #1
 8002ca6:	0552      	lsls	r2, r2, #21
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	491f      	ldr	r1, [pc, #124]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	610b      	str	r3, [r1, #16]
 8002cb0:	e011      	b.n	8002cd6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6892      	ldr	r2, [r2, #8]
 8002cc2:	0211      	lsls	r1, r2, #8
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6952      	ldr	r2, [r2, #20]
 8002cc8:	0852      	lsrs	r2, r2, #1
 8002cca:	3a01      	subs	r2, #1
 8002ccc:	0652      	lsls	r2, r2, #25
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	4915      	ldr	r1, [pc, #84]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe f9a5 	bl	8001030 <HAL_GetTick>
 8002ce6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ce8:	e009      	b.n	8002cfe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cea:	f7fe f9a1 	bl	8001030 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d902      	bls.n	8002cfe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	73fb      	strb	r3, [r7, #15]
          break;
 8002cfc:	e005      	b.n	8002d0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0ef      	beq.n	8002cea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4903      	ldr	r1, [pc, #12]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000

08002d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e049      	b.n	8002dd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f841 	bl	8002dda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f000 ff04 	bl	8003b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d001      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e03b      	b.n	8002e80 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a19      	ldr	r2, [pc, #100]	; (8002e8c <HAL_TIM_Base_Start_IT+0x9c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_TIM_Base_Start_IT+0x4e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e32:	d004      	beq.n	8002e3e <HAL_TIM_Base_Start_IT+0x4e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d115      	bne.n	8002e6a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <HAL_TIM_Base_Start_IT+0xa4>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b06      	cmp	r3, #6
 8002e4e:	d015      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x8c>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e56:	d011      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e68:	e008      	b.n	8002e7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e000      	b.n	8002e7e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40012c00 	.word	0x40012c00
 8002e90:	40014000 	.word	0x40014000
 8002e94:	00010007 	.word	0x00010007

08002e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e049      	b.n	8002f3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd feaa 	bl	8000c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f000 fe4e 	bl	8003b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e03c      	b.n	8002fee <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d109      	bne.n	8002f8e <HAL_TIM_PWM_Start_DMA+0x46>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e02f      	b.n	8002fee <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d109      	bne.n	8002fa8 <HAL_TIM_PWM_Start_DMA+0x60>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e022      	b.n	8002fee <HAL_TIM_PWM_Start_DMA+0xa6>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d109      	bne.n	8002fc2 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e015      	b.n	8002fee <HAL_TIM_PWM_Start_DMA+0xa6>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d109      	bne.n	8002fdc <HAL_TIM_PWM_Start_DMA+0x94>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e008      	b.n	8002fee <HAL_TIM_PWM_Start_DMA+0xa6>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e18d      	b.n	8003312 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e03c      	b.n	800308a <HAL_TIM_PWM_Start_DMA+0x142>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b04      	cmp	r3, #4
 8003014:	d109      	bne.n	800302a <HAL_TIM_PWM_Start_DMA+0xe2>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	e02f      	b.n	800308a <HAL_TIM_PWM_Start_DMA+0x142>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d109      	bne.n	8003044 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e022      	b.n	800308a <HAL_TIM_PWM_Start_DMA+0x142>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d109      	bne.n	800305e <HAL_TIM_PWM_Start_DMA+0x116>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	e015      	b.n	800308a <HAL_TIM_PWM_Start_DMA+0x142>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b10      	cmp	r3, #16
 8003062:	d109      	bne.n	8003078 <HAL_TIM_PWM_Start_DMA+0x130>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e008      	b.n	800308a <HAL_TIM_PWM_Start_DMA+0x142>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d034      	beq.n	80030f8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_TIM_PWM_Start_DMA+0x152>
 8003094:	887b      	ldrh	r3, [r7, #2]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e139      	b.n	8003312 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d104      	bne.n	80030ae <HAL_TIM_PWM_Start_DMA+0x166>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ac:	e026      	b.n	80030fc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d104      	bne.n	80030be <HAL_TIM_PWM_Start_DMA+0x176>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030bc:	e01e      	b.n	80030fc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d104      	bne.n	80030ce <HAL_TIM_PWM_Start_DMA+0x186>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030cc:	e016      	b.n	80030fc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	d104      	bne.n	80030de <HAL_TIM_PWM_Start_DMA+0x196>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030dc:	e00e      	b.n	80030fc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d104      	bne.n	80030ee <HAL_TIM_PWM_Start_DMA+0x1a6>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ec:	e006      	b.n	80030fc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2202      	movs	r2, #2
 80030f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f6:	e001      	b.n	80030fc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e10a      	b.n	8003312 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	f200 80ae 	bhi.w	8003260 <HAL_TIM_PWM_Start_DMA+0x318>
 8003104:	a201      	add	r2, pc, #4	; (adr r2, 800310c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	08003141 	.word	0x08003141
 8003110:	08003261 	.word	0x08003261
 8003114:	08003261 	.word	0x08003261
 8003118:	08003261 	.word	0x08003261
 800311c:	08003189 	.word	0x08003189
 8003120:	08003261 	.word	0x08003261
 8003124:	08003261 	.word	0x08003261
 8003128:	08003261 	.word	0x08003261
 800312c:	080031d1 	.word	0x080031d1
 8003130:	08003261 	.word	0x08003261
 8003134:	08003261 	.word	0x08003261
 8003138:	08003261 	.word	0x08003261
 800313c:	08003219 	.word	0x08003219
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	4a75      	ldr	r2, [pc, #468]	; (800331c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	4a74      	ldr	r2, [pc, #464]	; (8003320 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800314e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	4a73      	ldr	r2, [pc, #460]	; (8003324 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3334      	adds	r3, #52	; 0x34
 8003164:	461a      	mov	r2, r3
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	f7fe f908 	bl	800137c <HAL_DMA_Start_IT>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0cd      	b.n	8003312 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003184:	60da      	str	r2, [r3, #12]
      break;
 8003186:	e06e      	b.n	8003266 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	4a63      	ldr	r2, [pc, #396]	; (800331c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	4a62      	ldr	r2, [pc, #392]	; (8003320 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003196:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	4a61      	ldr	r2, [pc, #388]	; (8003324 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800319e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3338      	adds	r3, #56	; 0x38
 80031ac:	461a      	mov	r2, r3
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	f7fe f8e4 	bl	800137c <HAL_DMA_Start_IT>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0a9      	b.n	8003312 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031cc:	60da      	str	r2, [r3, #12]
      break;
 80031ce:	e04a      	b.n	8003266 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	4a51      	ldr	r2, [pc, #324]	; (800331c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	4a50      	ldr	r2, [pc, #320]	; (8003320 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80031de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	4a4f      	ldr	r2, [pc, #316]	; (8003324 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80031e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	333c      	adds	r3, #60	; 0x3c
 80031f4:	461a      	mov	r2, r3
 80031f6:	887b      	ldrh	r3, [r7, #2]
 80031f8:	f7fe f8c0 	bl	800137c <HAL_DMA_Start_IT>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e085      	b.n	8003312 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003214:	60da      	str	r2, [r3, #12]
      break;
 8003216:	e026      	b.n	8003266 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	4a3f      	ldr	r2, [pc, #252]	; (800331c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	4a3e      	ldr	r2, [pc, #248]	; (8003320 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003226:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	4a3d      	ldr	r2, [pc, #244]	; (8003324 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800322e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3340      	adds	r3, #64	; 0x40
 800323c:	461a      	mov	r2, r3
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	f7fe f89c 	bl	800137c <HAL_DMA_Start_IT>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e061      	b.n	8003312 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800325c:	60da      	str	r2, [r3, #12]
      break;
 800325e:	e002      	b.n	8003266 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
      break;
 8003264:	bf00      	nop
  }

  if (status == HAL_OK)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d151      	bne.n	8003310 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2201      	movs	r2, #1
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 ff61 	bl	800413c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_TIM_PWM_Start_DMA+0x350>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a28      	ldr	r2, [pc, #160]	; (800332c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_TIM_PWM_Start_DMA+0x350>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a27      	ldr	r2, [pc, #156]	; (8003330 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_TIM_PWM_Start_DMA+0x354>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_TIM_PWM_Start_DMA+0x356>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d009      	beq.n	80032d0 <HAL_TIM_PWM_Start_DMA+0x388>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d004      	beq.n	80032d0 <HAL_TIM_PWM_Start_DMA+0x388>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d115      	bne.n	80032fc <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d015      	beq.n	800330e <HAL_TIM_PWM_Start_DMA+0x3c6>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d011      	beq.n	800330e <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fa:	e008      	b.n	800330e <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e000      	b.n	8003310 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003310:	7dfb      	ldrb	r3, [r7, #23]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	08003a67 	.word	0x08003a67
 8003320:	08003b0f 	.word	0x08003b0f
 8003324:	080039d5 	.word	0x080039d5
 8003328:	40012c00 	.word	0x40012c00
 800332c:	40014000 	.word	0x40014000
 8003330:	40014400 	.word	0x40014400
 8003334:	00010007 	.word	0x00010007

08003338 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	d855      	bhi.n	80033f8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800334c:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	08003389 	.word	0x08003389
 8003358:	080033f9 	.word	0x080033f9
 800335c:	080033f9 	.word	0x080033f9
 8003360:	080033f9 	.word	0x080033f9
 8003364:	080033a5 	.word	0x080033a5
 8003368:	080033f9 	.word	0x080033f9
 800336c:	080033f9 	.word	0x080033f9
 8003370:	080033f9 	.word	0x080033f9
 8003374:	080033c1 	.word	0x080033c1
 8003378:	080033f9 	.word	0x080033f9
 800337c:	080033f9 	.word	0x080033f9
 8003380:	080033f9 	.word	0x080033f9
 8003384:	080033dd 	.word	0x080033dd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003396:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe f84d 	bl	800143c <HAL_DMA_Abort_IT>
      break;
 80033a2:	e02c      	b.n	80033fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe f83f 	bl	800143c <HAL_DMA_Abort_IT>
      break;
 80033be:	e01e      	b.n	80033fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe f831 	bl	800143c <HAL_DMA_Abort_IT>
      break;
 80033da:	e010      	b.n	80033fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe f823 	bl	800143c <HAL_DMA_Abort_IT>
      break;
 80033f6:	e002      	b.n	80033fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      break;
 80033fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d176      	bne.n	80034f2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2200      	movs	r2, #0
 800340a:	6839      	ldr	r1, [r7, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fe95 	bl	800413c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a39      	ldr	r2, [pc, #228]	; (80034fc <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d009      	beq.n	8003430 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a37      	ldr	r2, [pc, #220]	; (8003500 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a36      	ldr	r2, [pc, #216]	; (8003504 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d101      	bne.n	8003434 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8003434:	2300      	movs	r3, #0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d017      	beq.n	800346a <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a1a      	ldr	r2, [r3, #32]
 8003440:	f241 1311 	movw	r3, #4369	; 0x1111
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <HAL_TIM_PWM_Stop_DMA+0x132>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6a1a      	ldr	r2, [r3, #32]
 8003450:	f240 4344 	movw	r3, #1092	; 0x444
 8003454:	4013      	ands	r3, r2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <HAL_TIM_PWM_Stop_DMA+0x132>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a1a      	ldr	r2, [r3, #32]
 8003470:	f241 1311 	movw	r3, #4369	; 0x1111
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_TIM_PWM_Stop_DMA+0x162>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a1a      	ldr	r2, [r3, #32]
 8003480:	f240 4344 	movw	r3, #1092	; 0x444
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d107      	bne.n	800349a <HAL_TIM_PWM_Stop_DMA+0x162>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d104      	bne.n	80034aa <HAL_TIM_PWM_Stop_DMA+0x172>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a8:	e023      	b.n	80034f2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d104      	bne.n	80034ba <HAL_TIM_PWM_Stop_DMA+0x182>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b8:	e01b      	b.n	80034f2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d104      	bne.n	80034ca <HAL_TIM_PWM_Stop_DMA+0x192>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c8:	e013      	b.n	80034f2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d104      	bne.n	80034da <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034d8:	e00b      	b.n	80034f2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e8:	e003      	b.n	80034f2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	40014000 	.word	0x40014000
 8003504:	40014400 	.word	0x40014400

08003508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b02      	cmp	r3, #2
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0202 	mvn.w	r2, #2
 8003534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa1a 	bl	8003984 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa0c 	bl	8003970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fd facb 	bl	8000af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b04      	cmp	r3, #4
 8003570:	d122      	bne.n	80035b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0204 	mvn.w	r2, #4
 8003588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9f0 	bl	8003984 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f9e2 	bl	8003970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7fd faa1 	bl	8000af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d122      	bne.n	800360c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d11b      	bne.n	800360c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0208 	mvn.w	r2, #8
 80035dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2204      	movs	r2, #4
 80035e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f9c6 	bl	8003984 <HAL_TIM_IC_CaptureCallback>
 80035f8:	e005      	b.n	8003606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f9b8 	bl	8003970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7fd fa77 	bl	8000af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b10      	cmp	r3, #16
 8003618:	d122      	bne.n	8003660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b10      	cmp	r3, #16
 8003626:	d11b      	bne.n	8003660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0210 	mvn.w	r2, #16
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2208      	movs	r2, #8
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f99c 	bl	8003984 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f98e 	bl	8003970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7fd fa4d 	bl	8000af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b01      	cmp	r3, #1
 800366c:	d10e      	bne.n	800368c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d107      	bne.n	800368c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0201 	mvn.w	r2, #1
 8003684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fa86 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b80      	cmp	r3, #128	; 0x80
 8003698:	d10e      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b80      	cmp	r3, #128	; 0x80
 80036a6:	d107      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fe50 	bl	8004358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c6:	d10e      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d107      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fe43 	bl	800436c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d10e      	bne.n	8003712 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d107      	bne.n	8003712 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800370a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f94d 	bl	80039ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d10e      	bne.n	800373e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b20      	cmp	r3, #32
 800372c:	d107      	bne.n	800373e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f06f 0220 	mvn.w	r2, #32
 8003736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fe03 	bl	8004344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003762:	2302      	movs	r3, #2
 8003764:	e0ff      	b.n	8003966 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b14      	cmp	r3, #20
 8003772:	f200 80f0 	bhi.w	8003956 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	080037d1 	.word	0x080037d1
 8003780:	08003957 	.word	0x08003957
 8003784:	08003957 	.word	0x08003957
 8003788:	08003957 	.word	0x08003957
 800378c:	08003811 	.word	0x08003811
 8003790:	08003957 	.word	0x08003957
 8003794:	08003957 	.word	0x08003957
 8003798:	08003957 	.word	0x08003957
 800379c:	08003853 	.word	0x08003853
 80037a0:	08003957 	.word	0x08003957
 80037a4:	08003957 	.word	0x08003957
 80037a8:	08003957 	.word	0x08003957
 80037ac:	08003893 	.word	0x08003893
 80037b0:	08003957 	.word	0x08003957
 80037b4:	08003957 	.word	0x08003957
 80037b8:	08003957 	.word	0x08003957
 80037bc:	080038d5 	.word	0x080038d5
 80037c0:	08003957 	.word	0x08003957
 80037c4:	08003957 	.word	0x08003957
 80037c8:	08003957 	.word	0x08003957
 80037cc:	08003915 	.word	0x08003915
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fa32 	bl	8003c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0208 	orr.w	r2, r2, #8
 80037ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0204 	bic.w	r2, r2, #4
 80037fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6999      	ldr	r1, [r3, #24]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	619a      	str	r2, [r3, #24]
      break;
 800380e:	e0a5      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fa8e 	bl	8003d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800382a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6999      	ldr	r1, [r3, #24]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	021a      	lsls	r2, r3, #8
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	619a      	str	r2, [r3, #24]
      break;
 8003850:	e084      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fae7 	bl	8003e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0208 	orr.w	r2, r2, #8
 800386c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0204 	bic.w	r2, r2, #4
 800387c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69d9      	ldr	r1, [r3, #28]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	61da      	str	r2, [r3, #28]
      break;
 8003890:	e064      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fb3f 	bl	8003f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69d9      	ldr	r1, [r3, #28]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	021a      	lsls	r2, r3, #8
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	61da      	str	r2, [r3, #28]
      break;
 80038d2:	e043      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fb7c 	bl	8003fd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0208 	orr.w	r2, r2, #8
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0204 	bic.w	r2, r2, #4
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003912:	e023      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fbb4 	bl	8004088 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800392e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	021a      	lsls	r2, r3, #8
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003954:	e002      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
      break;
 800395a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop

08003970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d107      	bne.n	80039fc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039fa:	e02a      	b.n	8003a52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d107      	bne.n	8003a16 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a14:	e01d      	b.n	8003a52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d107      	bne.n	8003a30 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2204      	movs	r2, #4
 8003a24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a2e:	e010      	b.n	8003a52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d107      	bne.n	8003a4a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a48:	e003      	b.n	8003a52 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f7ff ffb4 	bl	80039c0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	771a      	strb	r2, [r3, #28]
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d10b      	bne.n	8003a96 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d136      	bne.n	8003afa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a94:	e031      	b.n	8003afa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d10b      	bne.n	8003ab8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d125      	bne.n	8003afa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab6:	e020      	b.n	8003afa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d10b      	bne.n	8003ada <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d114      	bne.n	8003afa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ad8:	e00f      	b.n	8003afa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d10a      	bne.n	8003afa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7fc fffa 	bl	8000af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	771a      	strb	r2, [r3, #28]
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d103      	bne.n	8003b2e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	771a      	strb	r2, [r3, #28]
 8003b2c:	e019      	b.n	8003b62 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d103      	bne.n	8003b40 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	771a      	strb	r2, [r3, #28]
 8003b3e:	e010      	b.n	8003b62 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d103      	bne.n	8003b52 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	771a      	strb	r2, [r3, #28]
 8003b50:	e007      	b.n	8003b62 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d102      	bne.n	8003b62 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2208      	movs	r2, #8
 8003b60:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff ff18 	bl	8003998 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	771a      	strb	r2, [r3, #28]
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a2a      	ldr	r2, [pc, #168]	; (8003c34 <TIM_Base_SetConfig+0xbc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_Base_SetConfig+0x20>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b96:	d108      	bne.n	8003baa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a21      	ldr	r2, [pc, #132]	; (8003c34 <TIM_Base_SetConfig+0xbc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00b      	beq.n	8003bca <TIM_Base_SetConfig+0x52>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb8:	d007      	beq.n	8003bca <TIM_Base_SetConfig+0x52>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a1e      	ldr	r2, [pc, #120]	; (8003c38 <TIM_Base_SetConfig+0xc0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d003      	beq.n	8003bca <TIM_Base_SetConfig+0x52>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <TIM_Base_SetConfig+0xc4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d108      	bne.n	8003bdc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <TIM_Base_SetConfig+0xbc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d007      	beq.n	8003c18 <TIM_Base_SetConfig+0xa0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a0b      	ldr	r2, [pc, #44]	; (8003c38 <TIM_Base_SetConfig+0xc0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <TIM_Base_SetConfig+0xa0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <TIM_Base_SetConfig+0xc4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d103      	bne.n	8003c20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	615a      	str	r2, [r3, #20]
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400

08003c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0201 	bic.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 0302 	bic.w	r3, r3, #2
 8003c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a24      	ldr	r2, [pc, #144]	; (8003d2c <TIM_OC1_SetConfig+0xec>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <TIM_OC1_SetConfig+0x70>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a23      	ldr	r2, [pc, #140]	; (8003d30 <TIM_OC1_SetConfig+0xf0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_OC1_SetConfig+0x70>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <TIM_OC1_SetConfig+0xf4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10c      	bne.n	8003cca <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f023 0308 	bic.w	r3, r3, #8
 8003cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f023 0304 	bic.w	r3, r3, #4
 8003cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <TIM_OC1_SetConfig+0xec>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <TIM_OC1_SetConfig+0xa2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <TIM_OC1_SetConfig+0xf0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d003      	beq.n	8003ce2 <TIM_OC1_SetConfig+0xa2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <TIM_OC1_SetConfig+0xf4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d111      	bne.n	8003d06 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	621a      	str	r2, [r3, #32]
}
 8003d20:	bf00      	nop
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400

08003d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0210 	bic.w	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0320 	bic.w	r3, r3, #32
 8003d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a22      	ldr	r2, [pc, #136]	; (8003e20 <TIM_OC2_SetConfig+0xe8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d10d      	bne.n	8003db8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <TIM_OC2_SetConfig+0xe8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <TIM_OC2_SetConfig+0x98>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <TIM_OC2_SetConfig+0xec>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_OC2_SetConfig+0x98>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <TIM_OC2_SetConfig+0xf0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d113      	bne.n	8003df8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400

08003e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <TIM_OC3_SetConfig+0xe4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10d      	bne.n	8003eaa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <TIM_OC3_SetConfig+0xe4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <TIM_OC3_SetConfig+0x96>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <TIM_OC3_SetConfig+0xe8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_OC3_SetConfig+0x96>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	; (8003f18 <TIM_OC3_SetConfig+0xec>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d113      	bne.n	8003eea <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	621a      	str	r2, [r3, #32]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40014400 	.word	0x40014400

08003f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	031b      	lsls	r3, r3, #12
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <TIM_OC4_SetConfig+0xb0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <TIM_OC4_SetConfig+0x74>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <TIM_OC4_SetConfig+0xb4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_OC4_SetConfig+0x74>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <TIM_OC4_SetConfig+0xb8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d109      	bne.n	8003fa4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	019b      	lsls	r3, r3, #6
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40014400 	.word	0x40014400

08003fd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800401c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a13      	ldr	r2, [pc, #76]	; (800407c <TIM_OC5_SetConfig+0xa4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <TIM_OC5_SetConfig+0x6a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a12      	ldr	r2, [pc, #72]	; (8004080 <TIM_OC5_SetConfig+0xa8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_OC5_SetConfig+0x6a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a11      	ldr	r2, [pc, #68]	; (8004084 <TIM_OC5_SetConfig+0xac>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d109      	bne.n	8004056 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004048:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	621a      	str	r2, [r3, #32]
}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40014000 	.word	0x40014000
 8004084:	40014400 	.word	0x40014400

08004088 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	051b      	lsls	r3, r3, #20
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a14      	ldr	r2, [pc, #80]	; (8004130 <TIM_OC6_SetConfig+0xa8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d007      	beq.n	80040f4 <TIM_OC6_SetConfig+0x6c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <TIM_OC6_SetConfig+0xac>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_OC6_SetConfig+0x6c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a12      	ldr	r2, [pc, #72]	; (8004138 <TIM_OC6_SetConfig+0xb0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d109      	bne.n	8004108 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	029b      	lsls	r3, r3, #10
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40014000 	.word	0x40014000
 8004138:	40014400 	.word	0x40014400

0800413c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	2201      	movs	r2, #1
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1a      	ldr	r2, [r3, #32]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	43db      	mvns	r3, r3
 800415e:	401a      	ands	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1a      	ldr	r2, [r3, #32]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	fa01 f303 	lsl.w	r3, r1, r3
 8004174:	431a      	orrs	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800419c:	2302      	movs	r3, #2
 800419e:	e04f      	b.n	8004240 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a21      	ldr	r2, [pc, #132]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d108      	bne.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a14      	ldr	r2, [pc, #80]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004208:	d004      	beq.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a10      	ldr	r2, [pc, #64]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10c      	bne.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	4313      	orrs	r3, r2
 8004224:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40014000 	.word	0x40014000

08004254 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800426c:	2302      	movs	r3, #2
 800426e:	e060      	b.n	8004332 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	041b      	lsls	r3, r3, #16
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a14      	ldr	r2, [pc, #80]	; (8004340 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d115      	bne.n	8004320 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	051b      	lsls	r3, r3, #20
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40012c00 	.word	0x40012c00

08004344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e040      	b.n	8004414 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc fccc 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2224      	movs	r2, #36	; 0x24
 80043ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0201 	bic.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f82c 	bl	800441c <UART_SetConfig>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e022      	b.n	8004414 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa4c 	bl	8004874 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fad3 	bl	80049b8 <UART_CheckIdleState>
 8004412:	4603      	mov	r3, r0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800441c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004420:	b08a      	sub	sp, #40	; 0x28
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	431a      	orrs	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	431a      	orrs	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	4313      	orrs	r3, r2
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4bb4      	ldr	r3, [pc, #720]	; (800471c <UART_SetConfig+0x300>)
 800444c:	4013      	ands	r3, r2
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004454:	430b      	orrs	r3, r1
 8004456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4aa9      	ldr	r2, [pc, #676]	; (8004720 <UART_SetConfig+0x304>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	4313      	orrs	r3, r2
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004498:	430a      	orrs	r2, r1
 800449a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4aa0      	ldr	r2, [pc, #640]	; (8004724 <UART_SetConfig+0x308>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d126      	bne.n	80044f4 <UART_SetConfig+0xd8>
 80044a6:	4ba0      	ldr	r3, [pc, #640]	; (8004728 <UART_SetConfig+0x30c>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d81b      	bhi.n	80044ec <UART_SetConfig+0xd0>
 80044b4:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <UART_SetConfig+0xa0>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044cd 	.word	0x080044cd
 80044c0:	080044dd 	.word	0x080044dd
 80044c4:	080044d5 	.word	0x080044d5
 80044c8:	080044e5 	.word	0x080044e5
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e080      	b.n	80045d6 <UART_SetConfig+0x1ba>
 80044d4:	2302      	movs	r3, #2
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e07c      	b.n	80045d6 <UART_SetConfig+0x1ba>
 80044dc:	2304      	movs	r3, #4
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e078      	b.n	80045d6 <UART_SetConfig+0x1ba>
 80044e4:	2308      	movs	r3, #8
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e074      	b.n	80045d6 <UART_SetConfig+0x1ba>
 80044ec:	2310      	movs	r3, #16
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e070      	b.n	80045d6 <UART_SetConfig+0x1ba>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a8c      	ldr	r2, [pc, #560]	; (800472c <UART_SetConfig+0x310>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d138      	bne.n	8004570 <UART_SetConfig+0x154>
 80044fe:	4b8a      	ldr	r3, [pc, #552]	; (8004728 <UART_SetConfig+0x30c>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f003 030c 	and.w	r3, r3, #12
 8004508:	2b0c      	cmp	r3, #12
 800450a:	d82d      	bhi.n	8004568 <UART_SetConfig+0x14c>
 800450c:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <UART_SetConfig+0xf8>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004549 	.word	0x08004549
 8004518:	08004569 	.word	0x08004569
 800451c:	08004569 	.word	0x08004569
 8004520:	08004569 	.word	0x08004569
 8004524:	08004559 	.word	0x08004559
 8004528:	08004569 	.word	0x08004569
 800452c:	08004569 	.word	0x08004569
 8004530:	08004569 	.word	0x08004569
 8004534:	08004551 	.word	0x08004551
 8004538:	08004569 	.word	0x08004569
 800453c:	08004569 	.word	0x08004569
 8004540:	08004569 	.word	0x08004569
 8004544:	08004561 	.word	0x08004561
 8004548:	2300      	movs	r3, #0
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454e:	e042      	b.n	80045d6 <UART_SetConfig+0x1ba>
 8004550:	2302      	movs	r3, #2
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004556:	e03e      	b.n	80045d6 <UART_SetConfig+0x1ba>
 8004558:	2304      	movs	r3, #4
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455e:	e03a      	b.n	80045d6 <UART_SetConfig+0x1ba>
 8004560:	2308      	movs	r3, #8
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004566:	e036      	b.n	80045d6 <UART_SetConfig+0x1ba>
 8004568:	2310      	movs	r3, #16
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456e:	e032      	b.n	80045d6 <UART_SetConfig+0x1ba>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a6a      	ldr	r2, [pc, #424]	; (8004720 <UART_SetConfig+0x304>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d12a      	bne.n	80045d0 <UART_SetConfig+0x1b4>
 800457a:	4b6b      	ldr	r3, [pc, #428]	; (8004728 <UART_SetConfig+0x30c>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004588:	d01a      	beq.n	80045c0 <UART_SetConfig+0x1a4>
 800458a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800458e:	d81b      	bhi.n	80045c8 <UART_SetConfig+0x1ac>
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004594:	d00c      	beq.n	80045b0 <UART_SetConfig+0x194>
 8004596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459a:	d815      	bhi.n	80045c8 <UART_SetConfig+0x1ac>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <UART_SetConfig+0x18c>
 80045a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a4:	d008      	beq.n	80045b8 <UART_SetConfig+0x19c>
 80045a6:	e00f      	b.n	80045c8 <UART_SetConfig+0x1ac>
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e012      	b.n	80045d6 <UART_SetConfig+0x1ba>
 80045b0:	2302      	movs	r3, #2
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b6:	e00e      	b.n	80045d6 <UART_SetConfig+0x1ba>
 80045b8:	2304      	movs	r3, #4
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045be:	e00a      	b.n	80045d6 <UART_SetConfig+0x1ba>
 80045c0:	2308      	movs	r3, #8
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c6:	e006      	b.n	80045d6 <UART_SetConfig+0x1ba>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ce:	e002      	b.n	80045d6 <UART_SetConfig+0x1ba>
 80045d0:	2310      	movs	r3, #16
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a51      	ldr	r2, [pc, #324]	; (8004720 <UART_SetConfig+0x304>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d17a      	bne.n	80046d6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d824      	bhi.n	8004632 <UART_SetConfig+0x216>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0x1d4>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004615 	.word	0x08004615
 80045f4:	08004633 	.word	0x08004633
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	08004633 	.word	0x08004633
 8004600:	08004623 	.word	0x08004623
 8004604:	08004633 	.word	0x08004633
 8004608:	08004633 	.word	0x08004633
 800460c:	08004633 	.word	0x08004633
 8004610:	0800462b 	.word	0x0800462b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004614:	f7fd ffd4 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8004618:	61f8      	str	r0, [r7, #28]
        break;
 800461a:	e010      	b.n	800463e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800461c:	4b44      	ldr	r3, [pc, #272]	; (8004730 <UART_SetConfig+0x314>)
 800461e:	61fb      	str	r3, [r7, #28]
        break;
 8004620:	e00d      	b.n	800463e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004622:	f7fd ff35 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8004626:	61f8      	str	r0, [r7, #28]
        break;
 8004628:	e009      	b.n	800463e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462e:	61fb      	str	r3, [r7, #28]
        break;
 8004630:	e005      	b.n	800463e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800463c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8107 	beq.w	8004854 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	4413      	add	r3, r2
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	429a      	cmp	r2, r3
 8004654:	d305      	bcc.n	8004662 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	429a      	cmp	r2, r3
 8004660:	d903      	bls.n	800466a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004668:	e0f4      	b.n	8004854 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	2200      	movs	r2, #0
 800466e:	461c      	mov	r4, r3
 8004670:	4615      	mov	r5, r2
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	022b      	lsls	r3, r5, #8
 800467c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004680:	0222      	lsls	r2, r4, #8
 8004682:	68f9      	ldr	r1, [r7, #12]
 8004684:	6849      	ldr	r1, [r1, #4]
 8004686:	0849      	lsrs	r1, r1, #1
 8004688:	2000      	movs	r0, #0
 800468a:	4688      	mov	r8, r1
 800468c:	4681      	mov	r9, r0
 800468e:	eb12 0a08 	adds.w	sl, r2, r8
 8004692:	eb43 0b09 	adc.w	fp, r3, r9
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a4:	4650      	mov	r0, sl
 80046a6:	4659      	mov	r1, fp
 80046a8:	f7fb fd92 	bl	80001d0 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4613      	mov	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ba:	d308      	bcc.n	80046ce <UART_SetConfig+0x2b2>
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c2:	d204      	bcs.n	80046ce <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	e0c2      	b.n	8004854 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046d4:	e0be      	b.n	8004854 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046de:	d16a      	bne.n	80047b6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80046e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d834      	bhi.n	8004752 <UART_SetConfig+0x336>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0x2d4>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004715 	.word	0x08004715
 80046f4:	08004735 	.word	0x08004735
 80046f8:	0800473d 	.word	0x0800473d
 80046fc:	08004753 	.word	0x08004753
 8004700:	08004743 	.word	0x08004743
 8004704:	08004753 	.word	0x08004753
 8004708:	08004753 	.word	0x08004753
 800470c:	08004753 	.word	0x08004753
 8004710:	0800474b 	.word	0x0800474b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004714:	f7fd ff54 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8004718:	61f8      	str	r0, [r7, #28]
        break;
 800471a:	e020      	b.n	800475e <UART_SetConfig+0x342>
 800471c:	efff69f3 	.word	0xefff69f3
 8004720:	40008000 	.word	0x40008000
 8004724:	40013800 	.word	0x40013800
 8004728:	40021000 	.word	0x40021000
 800472c:	40004400 	.word	0x40004400
 8004730:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004734:	f7fd ff5a 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 8004738:	61f8      	str	r0, [r7, #28]
        break;
 800473a:	e010      	b.n	800475e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800473c:	4b4c      	ldr	r3, [pc, #304]	; (8004870 <UART_SetConfig+0x454>)
 800473e:	61fb      	str	r3, [r7, #28]
        break;
 8004740:	e00d      	b.n	800475e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004742:	f7fd fea5 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8004746:	61f8      	str	r0, [r7, #28]
        break;
 8004748:	e009      	b.n	800475e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474e:	61fb      	str	r3, [r7, #28]
        break;
 8004750:	e005      	b.n	800475e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800475c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d077      	beq.n	8004854 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	005a      	lsls	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	441a      	add	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b0f      	cmp	r3, #15
 800477e:	d916      	bls.n	80047ae <UART_SetConfig+0x392>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004786:	d212      	bcs.n	80047ae <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f023 030f 	bic.w	r3, r3, #15
 8004790:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	b29b      	uxth	r3, r3
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	b29a      	uxth	r2, r3
 800479e:	8afb      	ldrh	r3, [r7, #22]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	8afa      	ldrh	r2, [r7, #22]
 80047aa:	60da      	str	r2, [r3, #12]
 80047ac:	e052      	b.n	8004854 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047b4:	e04e      	b.n	8004854 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d827      	bhi.n	800480e <UART_SetConfig+0x3f2>
 80047be:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0x3a8>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	080047f1 	.word	0x080047f1
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	0800480f 	.word	0x0800480f
 80047d4:	080047ff 	.word	0x080047ff
 80047d8:	0800480f 	.word	0x0800480f
 80047dc:	0800480f 	.word	0x0800480f
 80047e0:	0800480f 	.word	0x0800480f
 80047e4:	08004807 	.word	0x08004807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e8:	f7fd feea 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 80047ec:	61f8      	str	r0, [r7, #28]
        break;
 80047ee:	e014      	b.n	800481a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f0:	f7fd fefc 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 80047f4:	61f8      	str	r0, [r7, #28]
        break;
 80047f6:	e010      	b.n	800481a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f8:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <UART_SetConfig+0x454>)
 80047fa:	61fb      	str	r3, [r7, #28]
        break;
 80047fc:	e00d      	b.n	800481a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fe:	f7fd fe47 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8004802:	61f8      	str	r0, [r7, #28]
        break;
 8004804:	e009      	b.n	800481a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480a:	61fb      	str	r3, [r7, #28]
        break;
 800480c:	e005      	b.n	800481a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004818:	bf00      	nop
    }

    if (pclk != 0U)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d019      	beq.n	8004854 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	085a      	lsrs	r2, r3, #1
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	441a      	add	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004832:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b0f      	cmp	r3, #15
 8004838:	d909      	bls.n	800484e <UART_SetConfig+0x432>
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004840:	d205      	bcs.n	800484e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60da      	str	r2, [r3, #12]
 800484c:	e002      	b.n	8004854 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004860:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004864:	4618      	mov	r0, r3
 8004866:	3728      	adds	r7, #40	; 0x28
 8004868:	46bd      	mov	sp, r7
 800486a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486e:	bf00      	nop
 8004870:	00f42400 	.word	0x00f42400

08004874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01a      	beq.n	800498a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004972:	d10a      	bne.n	800498a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af02      	add	r7, sp, #8
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c8:	f7fc fb32 	bl	8001030 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d10e      	bne.n	80049fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f82d 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e023      	b.n	8004a42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d10e      	bne.n	8004a26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f817 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e00d      	b.n	8004a42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b09c      	sub	sp, #112	; 0x70
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5a:	e0a5      	b.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a62:	f000 80a1 	beq.w	8004ba8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fc fae3 	bl	8001030 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x32>
 8004a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d13e      	bne.n	8004afa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a90:	667b      	str	r3, [r7, #100]	; 0x64
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004aa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e6      	bne.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3308      	adds	r3, #8
 8004acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ace:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ad0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e5      	bne.n	8004aae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e067      	b.n	8004bca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d04f      	beq.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b16:	d147      	bne.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b20:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
 8004b42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e6      	bne.n	8004b22 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3308      	adds	r3, #8
 8004b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	613b      	str	r3, [r7, #16]
   return(result);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f023 0301 	bic.w	r3, r3, #1
 8004b6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3308      	adds	r3, #8
 8004b72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b74:	623a      	str	r2, [r7, #32]
 8004b76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	69f9      	ldr	r1, [r7, #28]
 8004b7a:	6a3a      	ldr	r2, [r7, #32]
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e5      	bne.n	8004b54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e010      	b.n	8004bca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69da      	ldr	r2, [r3, #28]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	f43f af4a 	beq.w	8004a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3770      	adds	r7, #112	; 0x70
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <__NVIC_SetPriority>:
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	6039      	str	r1, [r7, #0]
 8004bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	db0a      	blt.n	8004bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	490c      	ldr	r1, [pc, #48]	; (8004c20 <__NVIC_SetPriority+0x4c>)
 8004bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf2:	0112      	lsls	r2, r2, #4
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bfc:	e00a      	b.n	8004c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	4908      	ldr	r1, [pc, #32]	; (8004c24 <__NVIC_SetPriority+0x50>)
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	3b04      	subs	r3, #4
 8004c0c:	0112      	lsls	r2, r2, #4
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	440b      	add	r3, r1
 8004c12:	761a      	strb	r2, [r3, #24]
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	e000e100 	.word	0xe000e100
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <SysTick_Handler+0x1c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c30:	f002 f9d0 	bl	8006fd4 <xTaskGetSchedulerState>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d001      	beq.n	8004c3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c3a:	f003 f96d 	bl	8007f18 <xPortSysTickHandler>
  }
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	e000e010 	.word	0xe000e010

08004c48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f06f 0004 	mvn.w	r0, #4
 8004c52:	f7ff ffbf 	bl	8004bd4 <__NVIC_SetPriority>
#endif
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c62:	f3ef 8305 	mrs	r3, IPSR
 8004c66:	603b      	str	r3, [r7, #0]
  return(result);
 8004c68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c6e:	f06f 0305 	mvn.w	r3, #5
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	e00c      	b.n	8004c90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <osKernelInitialize+0x44>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <osKernelInitialize+0x44>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	e002      	b.n	8004c90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c90:	687b      	ldr	r3, [r7, #4]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	200022a8 	.word	0x200022a8

08004ca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004caa:	f3ef 8305 	mrs	r3, IPSR
 8004cae:	603b      	str	r3, [r7, #0]
  return(result);
 8004cb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8004cb6:	f06f 0305 	mvn.w	r3, #5
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	e010      	b.n	8004ce0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <osKernelStart+0x48>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d109      	bne.n	8004cda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004cc6:	f7ff ffbf 	bl	8004c48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004cca:	4b08      	ldr	r3, [pc, #32]	; (8004cec <osKernelStart+0x48>)
 8004ccc:	2202      	movs	r2, #2
 8004cce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004cd0:	f001 fd38 	bl	8006744 <vTaskStartScheduler>
      stat = osOK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	607b      	str	r3, [r7, #4]
 8004cd8:	e002      	b.n	8004ce0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ce0:	687b      	ldr	r3, [r7, #4]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	200022a8 	.word	0x200022a8

08004cf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08e      	sub	sp, #56	; 0x38
 8004cf4:	af04      	add	r7, sp, #16
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d00:	f3ef 8305 	mrs	r3, IPSR
 8004d04:	617b      	str	r3, [r7, #20]
  return(result);
 8004d06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d17e      	bne.n	8004e0a <osThreadNew+0x11a>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d07b      	beq.n	8004e0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d16:	2318      	movs	r3, #24
 8004d18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d045      	beq.n	8004db6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <osThreadNew+0x48>
        name = attr->name;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <osThreadNew+0x6e>
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	2b38      	cmp	r3, #56	; 0x38
 8004d50:	d805      	bhi.n	8004d5e <osThreadNew+0x6e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <osThreadNew+0x72>
        return (NULL);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e054      	b.n	8004e0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00e      	beq.n	8004d98 <osThreadNew+0xa8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	2b5b      	cmp	r3, #91	; 0x5b
 8004d80:	d90a      	bls.n	8004d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d006      	beq.n	8004d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <osThreadNew+0xa8>
        mem = 1;
 8004d92:	2301      	movs	r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	e010      	b.n	8004dba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10c      	bne.n	8004dba <osThreadNew+0xca>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d108      	bne.n	8004dba <osThreadNew+0xca>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <osThreadNew+0xca>
          mem = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	e001      	b.n	8004dba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d110      	bne.n	8004de2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dc8:	9202      	str	r2, [sp, #8]
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6a3a      	ldr	r2, [r7, #32]
 8004dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f001 fade 	bl	8006398 <xTaskCreateStatic>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	e013      	b.n	8004e0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d110      	bne.n	8004e0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	f107 0310 	add.w	r3, r7, #16
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f001 fb29 	bl	8006452 <xTaskCreate>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d001      	beq.n	8004e0a <osThreadNew+0x11a>
            hTask = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e0a:	693b      	ldr	r3, [r7, #16]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3728      	adds	r7, #40	; 0x28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e1c:	f3ef 8305 	mrs	r3, IPSR
 8004e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <osDelay+0x1c>
    stat = osErrorISR;
 8004e28:	f06f 0305 	mvn.w	r3, #5
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e007      	b.n	8004e40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 fc4e 	bl	80066dc <vTaskDelay>
    }
  }

  return (stat);
 8004e40:	68fb      	ldr	r3, [r7, #12]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f002 fe84 	bl	8007b60 <pvTimerGetTimerID>
 8004e58:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <TimerCallback+0x22>
    callb->func (callb->arg);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	6852      	ldr	r2, [r2, #4]
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4798      	blx	r3
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08c      	sub	sp, #48	; 0x30
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	460b      	mov	r3, r1
 8004e82:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e88:	f3ef 8305 	mrs	r3, IPSR
 8004e8c:	613b      	str	r3, [r7, #16]
  return(result);
 8004e8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d163      	bne.n	8004f5c <osTimerNew+0xe8>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d060      	beq.n	8004f5c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004e9a:	2008      	movs	r0, #8
 8004e9c:	f003 f8cc 	bl	8008038 <pvPortMalloc>
 8004ea0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d059      	beq.n	8004f5c <osTimerNew+0xe8>
      callb->func = func;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004eb4:	7afb      	ldrb	r3, [r7, #11]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <osTimerNew+0x4c>
        reload = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	e001      	b.n	8004ec4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ec8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01c      	beq.n	8004f0e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <osTimerNew+0x6e>
          name = attr->name;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d006      	beq.n	8004ef8 <osTimerNew+0x84>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b2b      	cmp	r3, #43	; 0x2b
 8004ef0:	d902      	bls.n	8004ef8 <osTimerNew+0x84>
          mem = 1;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	e00c      	b.n	8004f12 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d108      	bne.n	8004f12 <osTimerNew+0x9e>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d104      	bne.n	8004f12 <osTimerNew+0x9e>
            mem = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	e001      	b.n	8004f12 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d10c      	bne.n	8004f32 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	9301      	str	r3, [sp, #4]
 8004f1e:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <osTimerNew+0xf4>)
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	2101      	movs	r1, #1
 8004f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f2a:	f002 fa9a 	bl	8007462 <xTimerCreateStatic>
 8004f2e:	6238      	str	r0, [r7, #32]
 8004f30:	e00b      	b.n	8004f4a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d108      	bne.n	8004f4a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <osTimerNew+0xf4>)
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	2101      	movs	r1, #1
 8004f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f44:	f002 fa6c 	bl	8007420 <xTimerCreate>
 8004f48:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d105      	bne.n	8004f5c <osTimerNew+0xe8>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <osTimerNew+0xe8>
        vPortFree (callb);
 8004f56:	6978      	ldr	r0, [r7, #20]
 8004f58:	f003 f93a 	bl	80081d0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3728      	adds	r7, #40	; 0x28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	08004e4b 	.word	0x08004e4b

08004f6c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08a      	sub	sp, #40	; 0x28
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f7c:	f3ef 8305 	mrs	r3, IPSR
 8004f80:	613b      	str	r3, [r7, #16]
  return(result);
 8004f82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d175      	bne.n	8005074 <osSemaphoreNew+0x108>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d072      	beq.n	8005074 <osSemaphoreNew+0x108>
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d86e      	bhi.n	8005074 <osSemaphoreNew+0x108>
    mem = -1;
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d015      	beq.n	8004fce <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d006      	beq.n	8004fb8 <osSemaphoreNew+0x4c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b4f      	cmp	r3, #79	; 0x4f
 8004fb0:	d902      	bls.n	8004fb8 <osSemaphoreNew+0x4c>
        mem = 1;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	e00c      	b.n	8004fd2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d108      	bne.n	8004fd2 <osSemaphoreNew+0x66>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <osSemaphoreNew+0x66>
          mem = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	e001      	b.n	8004fd2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd8:	d04c      	beq.n	8005074 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d128      	bne.n	8005032 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10a      	bne.n	8004ffc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2203      	movs	r2, #3
 8004fec:	9200      	str	r2, [sp, #0]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	f000 fa2a 	bl	800544c <xQueueGenericCreateStatic>
 8004ff8:	61f8      	str	r0, [r7, #28]
 8004ffa:	e005      	b.n	8005008 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	2100      	movs	r1, #0
 8005000:	2001      	movs	r0, #1
 8005002:	f000 fa9b 	bl	800553c <xQueueGenericCreate>
 8005006:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d022      	beq.n	8005054 <osSemaphoreNew+0xe8>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01f      	beq.n	8005054 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005014:	2300      	movs	r3, #0
 8005016:	2200      	movs	r2, #0
 8005018:	2100      	movs	r1, #0
 800501a:	69f8      	ldr	r0, [r7, #28]
 800501c:	f000 fb56 	bl	80056cc <xQueueGenericSend>
 8005020:	4603      	mov	r3, r0
 8005022:	2b01      	cmp	r3, #1
 8005024:	d016      	beq.n	8005054 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005026:	69f8      	ldr	r0, [r7, #28]
 8005028:	f000 ffe2 	bl	8005ff0 <vQueueDelete>
            hSemaphore = NULL;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	e010      	b.n	8005054 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d108      	bne.n	800504a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	461a      	mov	r2, r3
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 fad8 	bl	80055f6 <xQueueCreateCountingSemaphoreStatic>
 8005046:	61f8      	str	r0, [r7, #28]
 8005048:	e004      	b.n	8005054 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fb09 	bl	8005664 <xQueueCreateCountingSemaphore>
 8005052:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	e001      	b.n	800506c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800506c:	6979      	ldr	r1, [r7, #20]
 800506e:	69f8      	ldr	r0, [r7, #28]
 8005070:	f001 f90a 	bl	8006288 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005074:	69fb      	ldr	r3, [r7, #28]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d103      	bne.n	80050a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005098:	f06f 0303 	mvn.w	r3, #3
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e039      	b.n	8005114 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050a0:	f3ef 8305 	mrs	r3, IPSR
 80050a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80050a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d022      	beq.n	80050f2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80050b2:	f06f 0303 	mvn.w	r3, #3
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e02c      	b.n	8005114 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80050be:	f107 0308 	add.w	r3, r7, #8
 80050c2:	461a      	mov	r2, r3
 80050c4:	2100      	movs	r1, #0
 80050c6:	6938      	ldr	r0, [r7, #16]
 80050c8:	f000 ff12 	bl	8005ef0 <xQueueReceiveFromISR>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d003      	beq.n	80050da <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80050d2:	f06f 0302 	mvn.w	r3, #2
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e01c      	b.n	8005114 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d019      	beq.n	8005114 <osSemaphoreAcquire+0x94>
 80050e0:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <osSemaphoreAcquire+0xa0>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	e010      	b.n	8005114 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80050f2:	6839      	ldr	r1, [r7, #0]
 80050f4:	6938      	ldr	r0, [r7, #16]
 80050f6:	f000 fdef 	bl	8005cd8 <xQueueSemaphoreTake>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d009      	beq.n	8005114 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005106:	f06f 0301 	mvn.w	r3, #1
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e002      	b.n	8005114 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800510e:	f06f 0302 	mvn.w	r3, #2
 8005112:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005114:	697b      	ldr	r3, [r7, #20]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	e000ed04 	.word	0xe000ed04

08005124 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800513a:	f06f 0303 	mvn.w	r3, #3
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	e02c      	b.n	800519c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005142:	f3ef 8305 	mrs	r3, IPSR
 8005146:	60fb      	str	r3, [r7, #12]
  return(result);
 8005148:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01a      	beq.n	8005184 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800514e:	2300      	movs	r3, #0
 8005150:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	4619      	mov	r1, r3
 8005158:	6938      	ldr	r0, [r7, #16]
 800515a:	f000 fc50 	bl	80059fe <xQueueGiveFromISR>
 800515e:	4603      	mov	r3, r0
 8005160:	2b01      	cmp	r3, #1
 8005162:	d003      	beq.n	800516c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005164:	f06f 0302 	mvn.w	r3, #2
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	e017      	b.n	800519c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d014      	beq.n	800519c <osSemaphoreRelease+0x78>
 8005172:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <osSemaphoreRelease+0x84>)
 8005174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	e00b      	b.n	800519c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005184:	2300      	movs	r3, #0
 8005186:	2200      	movs	r2, #0
 8005188:	2100      	movs	r1, #0
 800518a:	6938      	ldr	r0, [r7, #16]
 800518c:	f000 fa9e 	bl	80056cc <xQueueGenericSend>
 8005190:	4603      	mov	r3, r0
 8005192:	2b01      	cmp	r3, #1
 8005194:	d002      	beq.n	800519c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005196:	f06f 0302 	mvn.w	r3, #2
 800519a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800519c:	697b      	ldr	r3, [r7, #20]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a07      	ldr	r2, [pc, #28]	; (80051d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80051bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4a06      	ldr	r2, [pc, #24]	; (80051dc <vApplicationGetIdleTaskMemory+0x30>)
 80051c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	601a      	str	r2, [r3, #0]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	200022ac 	.word	0x200022ac
 80051dc:	20002308 	.word	0x20002308

080051e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4a07      	ldr	r2, [pc, #28]	; (800520c <vApplicationGetTimerTaskMemory+0x2c>)
 80051f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4a06      	ldr	r2, [pc, #24]	; (8005210 <vApplicationGetTimerTaskMemory+0x30>)
 80051f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051fe:	601a      	str	r2, [r3, #0]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	20002508 	.word	0x20002508
 8005210:	20002564 	.word	0x20002564

08005214 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f103 0208 	add.w	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800522c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f103 0208 	add.w	r2, r3, #8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f103 0208 	add.w	r2, r3, #8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800526e:	b480      	push	{r7}
 8005270:	b085      	sub	sp, #20
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052cc:	d103      	bne.n	80052d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e00c      	b.n	80052f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3308      	adds	r3, #8
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e002      	b.n	80052e4 <vListInsert+0x2e>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d2f6      	bcs.n	80052de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	601a      	str	r2, [r3, #0]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6892      	ldr	r2, [r2, #8]
 800533e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6852      	ldr	r2, [r2, #4]
 8005348:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d103      	bne.n	800535c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	1e5a      	subs	r2, r3, #1
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053a6:	f002 fd25 	bl	8007df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053b6:	fb01 f303 	mul.w	r3, r1, r3
 80053ba:	441a      	add	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	3b01      	subs	r3, #1
 80053d8:	68f9      	ldr	r1, [r7, #12]
 80053da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	441a      	add	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	22ff      	movs	r2, #255	; 0xff
 80053ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	22ff      	movs	r2, #255	; 0xff
 80053f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d114      	bne.n	8005426 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01a      	beq.n	800543a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3310      	adds	r3, #16
 8005408:	4618      	mov	r0, r3
 800540a:	f001 fc25 	bl	8006c58 <xTaskRemoveFromEventList>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d012      	beq.n	800543a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <xQueueGenericReset+0xcc>)
 8005416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	e009      	b.n	800543a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3310      	adds	r3, #16
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fef2 	bl	8005214 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3324      	adds	r3, #36	; 0x24
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff feed 	bl	8005214 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800543a:	f002 fd0b 	bl	8007e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800543e:	2301      	movs	r3, #1
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08e      	sub	sp, #56	; 0x38
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <xQueueGenericCreateStatic+0x52>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <xQueueGenericCreateStatic+0x56>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <xQueueGenericCreateStatic+0x58>
 80054a2:	2300      	movs	r3, #0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	623b      	str	r3, [r7, #32]
}
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <xQueueGenericCreateStatic+0x7e>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <xQueueGenericCreateStatic+0x82>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <xQueueGenericCreateStatic+0x84>
 80054ce:	2300      	movs	r3, #0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	61fb      	str	r3, [r7, #28]
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054ea:	2350      	movs	r3, #80	; 0x50
 80054ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b50      	cmp	r3, #80	; 0x50
 80054f2:	d00a      	beq.n	800550a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	61bb      	str	r3, [r7, #24]
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800550a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00d      	beq.n	8005532 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800551e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	4613      	mov	r3, r2
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f83f 	bl	80055b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005534:	4618      	mov	r0, r3
 8005536:	3730      	adds	r7, #48	; 0x30
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	; 0x28
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	613b      	str	r3, [r7, #16]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	3350      	adds	r3, #80	; 0x50
 8005574:	4618      	mov	r0, r3
 8005576:	f002 fd5f 	bl	8008038 <pvPortMalloc>
 800557a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d011      	beq.n	80055a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	3350      	adds	r3, #80	; 0x50
 800558a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005594:	79fa      	ldrb	r2, [r7, #7]
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	4613      	mov	r3, r2
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f805 	bl	80055b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055a6:	69bb      	ldr	r3, [r7, #24]
	}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d103      	bne.n	80055cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e002      	b.n	80055d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055de:	2101      	movs	r1, #1
 80055e0:	69b8      	ldr	r0, [r7, #24]
 80055e2:	f7ff fecb 	bl	800537c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	78fa      	ldrb	r2, [r7, #3]
 80055ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b08a      	sub	sp, #40	; 0x28
 80055fa:	af02      	add	r7, sp, #8
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	61bb      	str	r3, [r7, #24]
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	429a      	cmp	r2, r3
 8005624:	d90a      	bls.n	800563c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	617b      	str	r3, [r7, #20]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800563c:	2302      	movs	r3, #2
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	2100      	movs	r1, #0
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff ff00 	bl	800544c <xQueueGenericCreateStatic>
 800564c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800565a:	69fb      	ldr	r3, [r7, #28]
	}
 800565c:	4618      	mov	r0, r3
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	613b      	str	r3, [r7, #16]
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	d90a      	bls.n	80056a8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	60fb      	str	r3, [r7, #12]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80056a8:	2202      	movs	r2, #2
 80056aa:	2100      	movs	r1, #0
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff ff45 	bl	800553c <xQueueGenericCreate>
 80056b2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80056c0:	697b      	ldr	r3, [r7, #20]
	}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08e      	sub	sp, #56	; 0x38
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056da:	2300      	movs	r3, #0
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueGenericSend+0x32>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d103      	bne.n	800570c <xQueueGenericSend+0x40>
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <xQueueGenericSend+0x44>
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <xQueueGenericSend+0x46>
 8005710:	2300      	movs	r3, #0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <xQueueGenericSend+0x60>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005728:	bf00      	nop
 800572a:	e7fe      	b.n	800572a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d103      	bne.n	800573a <xQueueGenericSend+0x6e>
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <xQueueGenericSend+0x72>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <xQueueGenericSend+0x74>
 800573e:	2300      	movs	r3, #0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <xQueueGenericSend+0x8e>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	623b      	str	r3, [r7, #32]
}
 8005756:	bf00      	nop
 8005758:	e7fe      	b.n	8005758 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800575a:	f001 fc3b 	bl	8006fd4 <xTaskGetSchedulerState>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <xQueueGenericSend+0x9e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <xQueueGenericSend+0xa2>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <xQueueGenericSend+0xa4>
 800576e:	2300      	movs	r3, #0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <xQueueGenericSend+0xbe>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	61fb      	str	r3, [r7, #28]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800578a:	f002 fb33 	bl	8007df4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005796:	429a      	cmp	r2, r3
 8005798:	d302      	bcc.n	80057a0 <xQueueGenericSend+0xd4>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d129      	bne.n	80057f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a6:	f000 fc5e 	bl	8006066 <prvCopyDataToQueue>
 80057aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d010      	beq.n	80057d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	3324      	adds	r3, #36	; 0x24
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 fa4d 	bl	8006c58 <xTaskRemoveFromEventList>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d013      	beq.n	80057ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057c4:	4b3f      	ldr	r3, [pc, #252]	; (80058c4 <xQueueGenericSend+0x1f8>)
 80057c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	e00a      	b.n	80057ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057dc:	4b39      	ldr	r3, [pc, #228]	; (80058c4 <xQueueGenericSend+0x1f8>)
 80057de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057ec:	f002 fb32 	bl	8007e54 <vPortExitCritical>
				return pdPASS;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e063      	b.n	80058bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d103      	bne.n	8005802 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057fa:	f002 fb2b 	bl	8007e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	e05c      	b.n	80058bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005804:	2b00      	cmp	r3, #0
 8005806:	d106      	bne.n	8005816 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005808:	f107 0314 	add.w	r3, r7, #20
 800580c:	4618      	mov	r0, r3
 800580e:	f001 fa87 	bl	8006d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005812:	2301      	movs	r3, #1
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005816:	f002 fb1d 	bl	8007e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800581a:	f000 fff9 	bl	8006810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800581e:	f002 fae9 	bl	8007df4 <vPortEnterCritical>
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005828:	b25b      	sxtb	r3, r3
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800582e:	d103      	bne.n	8005838 <xQueueGenericSend+0x16c>
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800583e:	b25b      	sxtb	r3, r3
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005844:	d103      	bne.n	800584e <xQueueGenericSend+0x182>
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800584e:	f002 fb01 	bl	8007e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005852:	1d3a      	adds	r2, r7, #4
 8005854:	f107 0314 	add.w	r3, r7, #20
 8005858:	4611      	mov	r1, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f001 fa76 	bl	8006d4c <xTaskCheckForTimeOut>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d124      	bne.n	80058b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005868:	f000 fcf5 	bl	8006256 <prvIsQueueFull>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d018      	beq.n	80058a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	3310      	adds	r3, #16
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	4611      	mov	r1, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f001 f99c 	bl	8006bb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005882:	f000 fc80 	bl	8006186 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005886:	f000 ffd1 	bl	800682c <xTaskResumeAll>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	f47f af7c 	bne.w	800578a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005892:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <xQueueGenericSend+0x1f8>)
 8005894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	e772      	b.n	800578a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058a6:	f000 fc6e 	bl	8006186 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058aa:	f000 ffbf 	bl	800682c <xTaskResumeAll>
 80058ae:	e76c      	b.n	800578a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b2:	f000 fc68 	bl	8006186 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058b6:	f000 ffb9 	bl	800682c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3738      	adds	r7, #56	; 0x38
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	e000ed04 	.word	0xe000ed04

080058c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b090      	sub	sp, #64	; 0x40
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d103      	bne.n	8005904 <xQueueGenericSendFromISR+0x3c>
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <xQueueGenericSendFromISR+0x40>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <xQueueGenericSendFromISR+0x42>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d103      	bne.n	8005932 <xQueueGenericSendFromISR+0x6a>
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <xQueueGenericSendFromISR+0x6e>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <xQueueGenericSendFromISR+0x70>
 8005936:	2300      	movs	r3, #0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	623b      	str	r3, [r7, #32]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005952:	f002 fb31 	bl	8007fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005956:	f3ef 8211 	mrs	r2, BASEPRI
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	61fa      	str	r2, [r7, #28]
 800596c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800596e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	429a      	cmp	r2, r3
 800597c:	d302      	bcc.n	8005984 <xQueueGenericSendFromISR+0xbc>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d12f      	bne.n	80059e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800598a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800599a:	f000 fb64 	bl	8006066 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800599e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a6:	d112      	bne.n	80059ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d016      	beq.n	80059de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	3324      	adds	r3, #36	; 0x24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 f94f 	bl	8006c58 <xTaskRemoveFromEventList>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00e      	beq.n	80059de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00b      	beq.n	80059de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	e007      	b.n	80059de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059d2:	3301      	adds	r3, #1
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	b25a      	sxtb	r2, r3
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059de:	2301      	movs	r3, #1
 80059e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059e2:	e001      	b.n	80059e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3740      	adds	r7, #64	; 0x40
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b08e      	sub	sp, #56	; 0x38
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	623b      	str	r3, [r7, #32]
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	61fb      	str	r3, [r7, #28]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <xQueueGiveFromISR+0x58>
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <xQueueGiveFromISR+0x5c>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <xQueueGiveFromISR+0x5e>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	61bb      	str	r3, [r7, #24]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a76:	f002 fa9f 	bl	8007fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8005a7a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	617a      	str	r2, [r7, #20]
 8005a90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005a92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d22b      	bcs.n	8005afe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac0:	d112      	bne.n	8005ae8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d016      	beq.n	8005af8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	3324      	adds	r3, #36	; 0x24
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 f8c2 	bl	8006c58 <xTaskRemoveFromEventList>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00e      	beq.n	8005af8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	e007      	b.n	8005af8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aec:	3301      	adds	r3, #1
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	b25a      	sxtb	r2, r3
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005af8:	2301      	movs	r3, #1
 8005afa:	637b      	str	r3, [r7, #52]	; 0x34
 8005afc:	e001      	b.n	8005b02 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f383 8811 	msr	BASEPRI, r3
}
 8005b0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3738      	adds	r7, #56	; 0x38
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08c      	sub	sp, #48	; 0x30
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <xQueueReceive+0x30>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	623b      	str	r3, [r7, #32]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <xQueueReceive+0x3e>
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <xQueueReceive+0x42>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <xQueueReceive+0x44>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <xQueueReceive+0x5e>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	61fb      	str	r3, [r7, #28]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b76:	f001 fa2d 	bl	8006fd4 <xTaskGetSchedulerState>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d102      	bne.n	8005b86 <xQueueReceive+0x6e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <xQueueReceive+0x72>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <xQueueReceive+0x74>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <xQueueReceive+0x8e>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	61bb      	str	r3, [r7, #24]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ba6:	f002 f925 	bl	8007df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01f      	beq.n	8005bf6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bba:	f000 fabe 	bl	800613a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	1e5a      	subs	r2, r3, #1
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00f      	beq.n	8005bee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	3310      	adds	r3, #16
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 f840 	bl	8006c58 <xTaskRemoveFromEventList>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bde:	4b3d      	ldr	r3, [pc, #244]	; (8005cd4 <xQueueReceive+0x1bc>)
 8005be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bee:	f002 f931 	bl	8007e54 <vPortExitCritical>
				return pdPASS;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e069      	b.n	8005cca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bfc:	f002 f92a 	bl	8007e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e062      	b.n	8005cca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c0a:	f107 0310 	add.w	r3, r7, #16
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 f886 	bl	8006d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c18:	f002 f91c 	bl	8007e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c1c:	f000 fdf8 	bl	8006810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c20:	f002 f8e8 	bl	8007df4 <vPortEnterCritical>
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c2a:	b25b      	sxtb	r3, r3
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c30:	d103      	bne.n	8005c3a <xQueueReceive+0x122>
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c40:	b25b      	sxtb	r3, r3
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c46:	d103      	bne.n	8005c50 <xQueueReceive+0x138>
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c50:	f002 f900 	bl	8007e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c54:	1d3a      	adds	r2, r7, #4
 8005c56:	f107 0310 	add.w	r3, r7, #16
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 f875 	bl	8006d4c <xTaskCheckForTimeOut>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d123      	bne.n	8005cb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c6a:	f000 fade 	bl	800622a <prvIsQueueEmpty>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d017      	beq.n	8005ca4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	3324      	adds	r3, #36	; 0x24
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 ff9b 	bl	8006bb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c84:	f000 fa7f 	bl	8006186 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c88:	f000 fdd0 	bl	800682c <xTaskResumeAll>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d189      	bne.n	8005ba6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c92:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <xQueueReceive+0x1bc>)
 8005c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	e780      	b.n	8005ba6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca6:	f000 fa6e 	bl	8006186 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005caa:	f000 fdbf 	bl	800682c <xTaskResumeAll>
 8005cae:	e77a      	b.n	8005ba6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb2:	f000 fa68 	bl	8006186 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cb6:	f000 fdb9 	bl	800682c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cbc:	f000 fab5 	bl	800622a <prvIsQueueEmpty>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f43f af6f 	beq.w	8005ba6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3730      	adds	r7, #48	; 0x30
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08e      	sub	sp, #56	; 0x38
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	623b      	str	r3, [r7, #32]
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	61fb      	str	r3, [r7, #28]
}
 8005d24:	bf00      	nop
 8005d26:	e7fe      	b.n	8005d26 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d28:	f001 f954 	bl	8006fd4 <xTaskGetSchedulerState>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <xQueueSemaphoreTake+0x60>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <xQueueSemaphoreTake+0x64>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <xQueueSemaphoreTake+0x66>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	61bb      	str	r3, [r7, #24]
}
 8005d54:	bf00      	nop
 8005d56:	e7fe      	b.n	8005d56 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d58:	f002 f84c 	bl	8007df4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d024      	beq.n	8005db2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	1e5a      	subs	r2, r3, #1
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005d78:	f001 faa2 	bl	80072c0 <pvTaskIncrementMutexHeldCount>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00f      	beq.n	8005daa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	3310      	adds	r3, #16
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 ff62 	bl	8006c58 <xTaskRemoveFromEventList>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d9a:	4b54      	ldr	r3, [pc, #336]	; (8005eec <xQueueSemaphoreTake+0x214>)
 8005d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005daa:	f002 f853 	bl	8007e54 <vPortExitCritical>
				return pdPASS;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e097      	b.n	8005ee2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d111      	bne.n	8005ddc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	617b      	str	r3, [r7, #20]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005dd4:	f002 f83e 	bl	8007e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e082      	b.n	8005ee2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005de2:	f107 030c 	add.w	r3, r7, #12
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 ff9a 	bl	8006d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005df0:	f002 f830 	bl	8007e54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005df4:	f000 fd0c 	bl	8006810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005df8:	f001 fffc 	bl	8007df4 <vPortEnterCritical>
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e08:	d103      	bne.n	8005e12 <xQueueSemaphoreTake+0x13a>
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e18:	b25b      	sxtb	r3, r3
 8005e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e1e:	d103      	bne.n	8005e28 <xQueueSemaphoreTake+0x150>
 8005e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e28:	f002 f814 	bl	8007e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e2c:	463a      	mov	r2, r7
 8005e2e:	f107 030c 	add.w	r3, r7, #12
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 ff89 	bl	8006d4c <xTaskCheckForTimeOut>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d132      	bne.n	8005ea6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e42:	f000 f9f2 	bl	800622a <prvIsQueueEmpty>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d026      	beq.n	8005e9a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d109      	bne.n	8005e68 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005e54:	f001 ffce 	bl	8007df4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 f8d7 	bl	8007010 <xTaskPriorityInherit>
 8005e62:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005e64:	f001 fff6 	bl	8007e54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	3324      	adds	r3, #36	; 0x24
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fea1 	bl	8006bb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e78:	f000 f985 	bl	8006186 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e7c:	f000 fcd6 	bl	800682c <xTaskResumeAll>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f47f af68 	bne.w	8005d58 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005e88:	4b18      	ldr	r3, [pc, #96]	; (8005eec <xQueueSemaphoreTake+0x214>)
 8005e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	e75e      	b.n	8005d58 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e9c:	f000 f973 	bl	8006186 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ea0:	f000 fcc4 	bl	800682c <xTaskResumeAll>
 8005ea4:	e758      	b.n	8005d58 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ea8:	f000 f96d 	bl	8006186 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eac:	f000 fcbe 	bl	800682c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005eb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eb2:	f000 f9ba 	bl	800622a <prvIsQueueEmpty>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f43f af4d 	beq.w	8005d58 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005ec4:	f001 ff96 	bl	8007df4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eca:	f000 f8b4 	bl	8006036 <prvGetDisinheritPriorityAfterTimeout>
 8005ece:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 f970 	bl	80071bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005edc:	f001 ffba 	bl	8007e54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ee0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3738      	adds	r7, #56	; 0x38
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	e000ed04 	.word	0xe000ed04

08005ef0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08e      	sub	sp, #56	; 0x38
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	623b      	str	r3, [r7, #32]
}
 8005f18:	bf00      	nop
 8005f1a:	e7fe      	b.n	8005f1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d103      	bne.n	8005f2a <xQueueReceiveFromISR+0x3a>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <xQueueReceiveFromISR+0x3e>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <xQueueReceiveFromISR+0x40>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	61fb      	str	r3, [r7, #28]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f4a:	f002 f835 	bl	8007fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8005f4e:	f3ef 8211 	mrs	r2, BASEPRI
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	61ba      	str	r2, [r7, #24]
 8005f64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d02f      	beq.n	8005fd6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f84:	f000 f8d9 	bl	800613a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	1e5a      	subs	r2, r3, #1
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f98:	d112      	bne.n	8005fc0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d016      	beq.n	8005fd0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	3310      	adds	r3, #16
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fe56 	bl	8006c58 <xTaskRemoveFromEventList>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00e      	beq.n	8005fd0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e007      	b.n	8005fd0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	b25a      	sxtb	r2, r3
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd4:	e001      	b.n	8005fda <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f383 8811 	msr	BASEPRI, r3
}
 8005fe4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3738      	adds	r7, #56	; 0x38
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <vQueueDelete+0x28>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	60bb      	str	r3, [r7, #8]
}
 8006014:	bf00      	nop
 8006016:	e7fe      	b.n	8006016 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f95f 	bl	80062dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006024:	2b00      	cmp	r3, #0
 8006026:	d102      	bne.n	800602e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f002 f8d1 	bl	80081d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	2b00      	cmp	r3, #0
 8006044:	d006      	beq.n	8006054 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	e001      	b.n	8006058 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006058:	68fb      	ldr	r3, [r7, #12]
	}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b086      	sub	sp, #24
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10d      	bne.n	80060a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d14d      	bne.n	8006128 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	4618      	mov	r0, r3
 8006092:	f001 f825 	bl	80070e0 <xTaskPriorityDisinherit>
 8006096:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	609a      	str	r2, [r3, #8]
 800609e:	e043      	b.n	8006128 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d119      	bne.n	80060da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6858      	ldr	r0, [r3, #4]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	461a      	mov	r2, r3
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	f002 f9cf 	bl	8008454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	441a      	add	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d32b      	bcc.n	8006128 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	605a      	str	r2, [r3, #4]
 80060d8:	e026      	b.n	8006128 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	68d8      	ldr	r0, [r3, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	461a      	mov	r2, r3
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	f002 f9b5 	bl	8008454 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	425b      	negs	r3, r3
 80060f4:	441a      	add	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d207      	bcs.n	8006116 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	425b      	negs	r3, r3
 8006110:	441a      	add	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d105      	bne.n	8006128 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3b01      	subs	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006130:	697b      	ldr	r3, [r7, #20]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d018      	beq.n	800617e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	441a      	add	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	429a      	cmp	r2, r3
 8006164:	d303      	bcc.n	800616e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68d9      	ldr	r1, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	461a      	mov	r2, r3
 8006178:	6838      	ldr	r0, [r7, #0]
 800617a:	f002 f96b 	bl	8008454 <memcpy>
	}
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800618e:	f001 fe31 	bl	8007df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006198:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800619a:	e011      	b.n	80061c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d012      	beq.n	80061ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3324      	adds	r3, #36	; 0x24
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fd55 	bl	8006c58 <xTaskRemoveFromEventList>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061b4:	f000 fe2c 	bl	8006e10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dce9      	bgt.n	800619c <prvUnlockQueue+0x16>
 80061c8:	e000      	b.n	80061cc <prvUnlockQueue+0x46>
					break;
 80061ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	22ff      	movs	r2, #255	; 0xff
 80061d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061d4:	f001 fe3e 	bl	8007e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061d8:	f001 fe0c 	bl	8007df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061e4:	e011      	b.n	800620a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d012      	beq.n	8006214 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3310      	adds	r3, #16
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fd30 	bl	8006c58 <xTaskRemoveFromEventList>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061fe:	f000 fe07 	bl	8006e10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	3b01      	subs	r3, #1
 8006206:	b2db      	uxtb	r3, r3
 8006208:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800620a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800620e:	2b00      	cmp	r3, #0
 8006210:	dce9      	bgt.n	80061e6 <prvUnlockQueue+0x60>
 8006212:	e000      	b.n	8006216 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006214:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	22ff      	movs	r2, #255	; 0xff
 800621a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800621e:	f001 fe19 	bl	8007e54 <vPortExitCritical>
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006232:	f001 fddf 	bl	8007df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800623e:	2301      	movs	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	e001      	b.n	8006248 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006248:	f001 fe04 	bl	8007e54 <vPortExitCritical>

	return xReturn;
 800624c:	68fb      	ldr	r3, [r7, #12]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800625e:	f001 fdc9 	bl	8007df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	429a      	cmp	r2, r3
 800626c:	d102      	bne.n	8006274 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800626e:	2301      	movs	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e001      	b.n	8006278 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006278:	f001 fdec 	bl	8007e54 <vPortExitCritical>

	return xReturn;
 800627c:	68fb      	ldr	r3, [r7, #12]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e014      	b.n	80062c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006298:	4a0f      	ldr	r2, [pc, #60]	; (80062d8 <vQueueAddToRegistry+0x50>)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062a4:	490c      	ldr	r1, [pc, #48]	; (80062d8 <vQueueAddToRegistry+0x50>)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062ae:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <vQueueAddToRegistry+0x50>)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	4413      	add	r3, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062ba:	e006      	b.n	80062ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3301      	adds	r3, #1
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b07      	cmp	r3, #7
 80062c6:	d9e7      	bls.n	8006298 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20002964 	.word	0x20002964

080062dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e016      	b.n	8006318 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80062ea:	4a10      	ldr	r2, [pc, #64]	; (800632c <vQueueUnregisterQueue+0x50>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4413      	add	r3, r2
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d10b      	bne.n	8006312 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80062fa:	4a0c      	ldr	r2, [pc, #48]	; (800632c <vQueueUnregisterQueue+0x50>)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2100      	movs	r1, #0
 8006300:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006304:	4a09      	ldr	r2, [pc, #36]	; (800632c <vQueueUnregisterQueue+0x50>)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	4413      	add	r3, r2
 800630c:	2200      	movs	r2, #0
 800630e:	605a      	str	r2, [r3, #4]
				break;
 8006310:	e006      	b.n	8006320 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3301      	adds	r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b07      	cmp	r3, #7
 800631c:	d9e5      	bls.n	80062ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	20002964 	.word	0x20002964

08006330 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006340:	f001 fd58 	bl	8007df4 <vPortEnterCritical>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800634a:	b25b      	sxtb	r3, r3
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006350:	d103      	bne.n	800635a <vQueueWaitForMessageRestricted+0x2a>
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006360:	b25b      	sxtb	r3, r3
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006366:	d103      	bne.n	8006370 <vQueueWaitForMessageRestricted+0x40>
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006370:	f001 fd70 	bl	8007e54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	3324      	adds	r3, #36	; 0x24
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fc3b 	bl	8006c00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800638a:	6978      	ldr	r0, [r7, #20]
 800638c:	f7ff fefb 	bl	8006186 <prvUnlockQueue>
	}
 8006390:	bf00      	nop
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08e      	sub	sp, #56	; 0x38
 800639c:	af04      	add	r7, sp, #16
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	623b      	str	r3, [r7, #32]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <xTaskCreateStatic+0x46>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	61fb      	str	r3, [r7, #28]
}
 80063da:	bf00      	nop
 80063dc:	e7fe      	b.n	80063dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063de:	235c      	movs	r3, #92	; 0x5c
 80063e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b5c      	cmp	r3, #92	; 0x5c
 80063e6:	d00a      	beq.n	80063fe <xTaskCreateStatic+0x66>
	__asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	61bb      	str	r3, [r7, #24]
}
 80063fa:	bf00      	nop
 80063fc:	e7fe      	b.n	80063fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01e      	beq.n	8006444 <xTaskCreateStatic+0xac>
 8006406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01b      	beq.n	8006444 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006414:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	2202      	movs	r2, #2
 800641a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800641e:	2300      	movs	r3, #0
 8006420:	9303      	str	r3, [sp, #12]
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	9302      	str	r3, [sp, #8]
 8006426:	f107 0314 	add.w	r3, r7, #20
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 f850 	bl	80064dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800643c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800643e:	f000 f8dd 	bl	80065fc <prvAddNewTaskToReadyList>
 8006442:	e001      	b.n	8006448 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006448:	697b      	ldr	r3, [r7, #20]
	}
 800644a:	4618      	mov	r0, r3
 800644c:	3728      	adds	r7, #40	; 0x28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006452:	b580      	push	{r7, lr}
 8006454:	b08c      	sub	sp, #48	; 0x30
 8006456:	af04      	add	r7, sp, #16
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4618      	mov	r0, r3
 8006468:	f001 fde6 	bl	8008038 <pvPortMalloc>
 800646c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006474:	205c      	movs	r0, #92	; 0x5c
 8006476:	f001 fddf 	bl	8008038 <pvPortMalloc>
 800647a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
 8006488:	e005      	b.n	8006496 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800648a:	6978      	ldr	r0, [r7, #20]
 800648c:	f001 fea0 	bl	80081d0 <vPortFree>
 8006490:	e001      	b.n	8006496 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d017      	beq.n	80064cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064a4:	88fa      	ldrh	r2, [r7, #6]
 80064a6:	2300      	movs	r3, #0
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	9302      	str	r3, [sp, #8]
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 f80e 	bl	80064dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064c0:	69f8      	ldr	r0, [r7, #28]
 80064c2:	f000 f89b 	bl	80065fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064c6:	2301      	movs	r3, #1
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	e002      	b.n	80064d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064d2:	69bb      	ldr	r3, [r7, #24]
	}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	461a      	mov	r2, r3
 80064f4:	21a5      	movs	r1, #165	; 0xa5
 80064f6:	f001 ffbb 	bl	8008470 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006504:	3b01      	subs	r3, #1
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	f023 0307 	bic.w	r3, r3, #7
 8006512:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <prvInitialiseNewTask+0x58>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	617b      	str	r3, [r7, #20]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01f      	beq.n	800657a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800653a:	2300      	movs	r3, #0
 800653c:	61fb      	str	r3, [r7, #28]
 800653e:	e012      	b.n	8006566 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	7819      	ldrb	r1, [r3, #0]
 8006548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	4413      	add	r3, r2
 800654e:	3334      	adds	r3, #52	; 0x34
 8006550:	460a      	mov	r2, r1
 8006552:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d006      	beq.n	800656e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	3301      	adds	r3, #1
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	2b0f      	cmp	r3, #15
 800656a:	d9e9      	bls.n	8006540 <prvInitialiseNewTask+0x64>
 800656c:	e000      	b.n	8006570 <prvInitialiseNewTask+0x94>
			{
				break;
 800656e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006578:	e003      	b.n	8006582 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	2b37      	cmp	r3, #55	; 0x37
 8006586:	d901      	bls.n	800658c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006588:	2337      	movs	r3, #55	; 0x37
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006590:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006596:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	2200      	movs	r2, #0
 800659c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	3304      	adds	r3, #4
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fe56 	bl	8005254 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	3318      	adds	r3, #24
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe fe51 	bl	8005254 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	2200      	movs	r2, #0
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	68f9      	ldr	r1, [r7, #12]
 80065da:	69b8      	ldr	r0, [r7, #24]
 80065dc:	f001 fae0 	bl	8007ba0 <pxPortInitialiseStack>
 80065e0:	4602      	mov	r2, r0
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065f2:	bf00      	nop
 80065f4:	3720      	adds	r7, #32
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006604:	f001 fbf6 	bl	8007df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006608:	4b2d      	ldr	r3, [pc, #180]	; (80066c0 <prvAddNewTaskToReadyList+0xc4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	4a2c      	ldr	r2, [pc, #176]	; (80066c0 <prvAddNewTaskToReadyList+0xc4>)
 8006610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006612:	4b2c      	ldr	r3, [pc, #176]	; (80066c4 <prvAddNewTaskToReadyList+0xc8>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800661a:	4a2a      	ldr	r2, [pc, #168]	; (80066c4 <prvAddNewTaskToReadyList+0xc8>)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006620:	4b27      	ldr	r3, [pc, #156]	; (80066c0 <prvAddNewTaskToReadyList+0xc4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d110      	bne.n	800664a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006628:	f000 fc16 	bl	8006e58 <prvInitialiseTaskLists>
 800662c:	e00d      	b.n	800664a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800662e:	4b26      	ldr	r3, [pc, #152]	; (80066c8 <prvAddNewTaskToReadyList+0xcc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006636:	4b23      	ldr	r3, [pc, #140]	; (80066c4 <prvAddNewTaskToReadyList+0xc8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	429a      	cmp	r2, r3
 8006642:	d802      	bhi.n	800664a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006644:	4a1f      	ldr	r2, [pc, #124]	; (80066c4 <prvAddNewTaskToReadyList+0xc8>)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800664a:	4b20      	ldr	r3, [pc, #128]	; (80066cc <prvAddNewTaskToReadyList+0xd0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3301      	adds	r3, #1
 8006650:	4a1e      	ldr	r2, [pc, #120]	; (80066cc <prvAddNewTaskToReadyList+0xd0>)
 8006652:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006654:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <prvAddNewTaskToReadyList+0xd0>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	4b1b      	ldr	r3, [pc, #108]	; (80066d0 <prvAddNewTaskToReadyList+0xd4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d903      	bls.n	8006670 <prvAddNewTaskToReadyList+0x74>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	4a18      	ldr	r2, [pc, #96]	; (80066d0 <prvAddNewTaskToReadyList+0xd4>)
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006674:	4613      	mov	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <prvAddNewTaskToReadyList+0xd8>)
 800667e:	441a      	add	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3304      	adds	r3, #4
 8006684:	4619      	mov	r1, r3
 8006686:	4610      	mov	r0, r2
 8006688:	f7fe fdf1 	bl	800526e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800668c:	f001 fbe2 	bl	8007e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006690:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <prvAddNewTaskToReadyList+0xcc>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00e      	beq.n	80066b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006698:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <prvAddNewTaskToReadyList+0xc8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d207      	bcs.n	80066b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066a6:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <prvAddNewTaskToReadyList+0xdc>)
 80066a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20002e78 	.word	0x20002e78
 80066c4:	200029a4 	.word	0x200029a4
 80066c8:	20002e84 	.word	0x20002e84
 80066cc:	20002e94 	.word	0x20002e94
 80066d0:	20002e80 	.word	0x20002e80
 80066d4:	200029a8 	.word	0x200029a8
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d017      	beq.n	800671e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066ee:	4b13      	ldr	r3, [pc, #76]	; (800673c <vTaskDelay+0x60>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <vTaskDelay+0x30>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	60bb      	str	r3, [r7, #8]
}
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800670c:	f000 f880 	bl	8006810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006710:	2100      	movs	r1, #0
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fde8 	bl	80072e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006718:	f000 f888 	bl	800682c <xTaskResumeAll>
 800671c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d107      	bne.n	8006734 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <vTaskDelay+0x64>)
 8006726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20002ea0 	.word	0x20002ea0
 8006740:	e000ed04 	.word	0xe000ed04

08006744 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	; 0x28
 8006748:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006752:	463a      	mov	r2, r7
 8006754:	1d39      	adds	r1, r7, #4
 8006756:	f107 0308 	add.w	r3, r7, #8
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fd26 	bl	80051ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	9202      	str	r2, [sp, #8]
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	2300      	movs	r3, #0
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	2300      	movs	r3, #0
 8006770:	460a      	mov	r2, r1
 8006772:	4921      	ldr	r1, [pc, #132]	; (80067f8 <vTaskStartScheduler+0xb4>)
 8006774:	4821      	ldr	r0, [pc, #132]	; (80067fc <vTaskStartScheduler+0xb8>)
 8006776:	f7ff fe0f 	bl	8006398 <xTaskCreateStatic>
 800677a:	4603      	mov	r3, r0
 800677c:	4a20      	ldr	r2, [pc, #128]	; (8006800 <vTaskStartScheduler+0xbc>)
 800677e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006780:	4b1f      	ldr	r3, [pc, #124]	; (8006800 <vTaskStartScheduler+0xbc>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006788:	2301      	movs	r3, #1
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	e001      	b.n	8006792 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d102      	bne.n	800679e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006798:	f000 fdfa 	bl	8007390 <xTimerCreateTimerTask>
 800679c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d116      	bne.n	80067d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	613b      	str	r3, [r7, #16]
}
 80067b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067b8:	4b12      	ldr	r3, [pc, #72]	; (8006804 <vTaskStartScheduler+0xc0>)
 80067ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <vTaskStartScheduler+0xc4>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <vTaskStartScheduler+0xc8>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067cc:	f001 fa70 	bl	8007cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067d0:	e00e      	b.n	80067f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d8:	d10a      	bne.n	80067f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	60fb      	str	r3, [r7, #12]
}
 80067ec:	bf00      	nop
 80067ee:	e7fe      	b.n	80067ee <vTaskStartScheduler+0xaa>
}
 80067f0:	bf00      	nop
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	080084d0 	.word	0x080084d0
 80067fc:	08006e29 	.word	0x08006e29
 8006800:	20002e9c 	.word	0x20002e9c
 8006804:	20002e98 	.word	0x20002e98
 8006808:	20002e84 	.word	0x20002e84
 800680c:	20002e7c 	.word	0x20002e7c

08006810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006814:	4b04      	ldr	r3, [pc, #16]	; (8006828 <vTaskSuspendAll+0x18>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	4a03      	ldr	r2, [pc, #12]	; (8006828 <vTaskSuspendAll+0x18>)
 800681c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800681e:	bf00      	nop
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	20002ea0 	.word	0x20002ea0

0800682c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006836:	2300      	movs	r3, #0
 8006838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800683a:	4b42      	ldr	r3, [pc, #264]	; (8006944 <xTaskResumeAll+0x118>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10a      	bne.n	8006858 <xTaskResumeAll+0x2c>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	603b      	str	r3, [r7, #0]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006858:	f001 facc 	bl	8007df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800685c:	4b39      	ldr	r3, [pc, #228]	; (8006944 <xTaskResumeAll+0x118>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3b01      	subs	r3, #1
 8006862:	4a38      	ldr	r2, [pc, #224]	; (8006944 <xTaskResumeAll+0x118>)
 8006864:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006866:	4b37      	ldr	r3, [pc, #220]	; (8006944 <xTaskResumeAll+0x118>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d162      	bne.n	8006934 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800686e:	4b36      	ldr	r3, [pc, #216]	; (8006948 <xTaskResumeAll+0x11c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d05e      	beq.n	8006934 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006876:	e02f      	b.n	80068d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006878:	4b34      	ldr	r3, [pc, #208]	; (800694c <xTaskResumeAll+0x120>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3318      	adds	r3, #24
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fd4f 	bl	8005328 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3304      	adds	r3, #4
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe fd4a 	bl	8005328 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	4b2d      	ldr	r3, [pc, #180]	; (8006950 <xTaskResumeAll+0x124>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d903      	bls.n	80068a8 <xTaskResumeAll+0x7c>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	4a2a      	ldr	r2, [pc, #168]	; (8006950 <xTaskResumeAll+0x124>)
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4a27      	ldr	r2, [pc, #156]	; (8006954 <xTaskResumeAll+0x128>)
 80068b6:	441a      	add	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3304      	adds	r3, #4
 80068bc:	4619      	mov	r1, r3
 80068be:	4610      	mov	r0, r2
 80068c0:	f7fe fcd5 	bl	800526e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c8:	4b23      	ldr	r3, [pc, #140]	; (8006958 <xTaskResumeAll+0x12c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d302      	bcc.n	80068d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80068d2:	4b22      	ldr	r3, [pc, #136]	; (800695c <xTaskResumeAll+0x130>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068d8:	4b1c      	ldr	r3, [pc, #112]	; (800694c <xTaskResumeAll+0x120>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1cb      	bne.n	8006878 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068e6:	f000 fb55 	bl	8006f94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068ea:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <xTaskResumeAll+0x134>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d010      	beq.n	8006918 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068f6:	f000 f847 	bl	8006988 <xTaskIncrementTick>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006900:	4b16      	ldr	r3, [pc, #88]	; (800695c <xTaskResumeAll+0x130>)
 8006902:	2201      	movs	r2, #1
 8006904:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3b01      	subs	r3, #1
 800690a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1f1      	bne.n	80068f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006912:	4b13      	ldr	r3, [pc, #76]	; (8006960 <xTaskResumeAll+0x134>)
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006918:	4b10      	ldr	r3, [pc, #64]	; (800695c <xTaskResumeAll+0x130>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d009      	beq.n	8006934 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006920:	2301      	movs	r3, #1
 8006922:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006924:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <xTaskResumeAll+0x138>)
 8006926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006934:	f001 fa8e 	bl	8007e54 <vPortExitCritical>

	return xAlreadyYielded;
 8006938:	68bb      	ldr	r3, [r7, #8]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20002ea0 	.word	0x20002ea0
 8006948:	20002e78 	.word	0x20002e78
 800694c:	20002e38 	.word	0x20002e38
 8006950:	20002e80 	.word	0x20002e80
 8006954:	200029a8 	.word	0x200029a8
 8006958:	200029a4 	.word	0x200029a4
 800695c:	20002e8c 	.word	0x20002e8c
 8006960:	20002e88 	.word	0x20002e88
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800696e:	4b05      	ldr	r3, [pc, #20]	; (8006984 <xTaskGetTickCount+0x1c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006974:	687b      	ldr	r3, [r7, #4]
}
 8006976:	4618      	mov	r0, r3
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20002e7c 	.word	0x20002e7c

08006988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006992:	4b4f      	ldr	r3, [pc, #316]	; (8006ad0 <xTaskIncrementTick+0x148>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f040 808f 	bne.w	8006aba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800699c:	4b4d      	ldr	r3, [pc, #308]	; (8006ad4 <xTaskIncrementTick+0x14c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3301      	adds	r3, #1
 80069a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069a4:	4a4b      	ldr	r2, [pc, #300]	; (8006ad4 <xTaskIncrementTick+0x14c>)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d120      	bne.n	80069f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80069b0:	4b49      	ldr	r3, [pc, #292]	; (8006ad8 <xTaskIncrementTick+0x150>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	603b      	str	r3, [r7, #0]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <xTaskIncrementTick+0x46>
 80069d0:	4b41      	ldr	r3, [pc, #260]	; (8006ad8 <xTaskIncrementTick+0x150>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	4b41      	ldr	r3, [pc, #260]	; (8006adc <xTaskIncrementTick+0x154>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a3f      	ldr	r2, [pc, #252]	; (8006ad8 <xTaskIncrementTick+0x150>)
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	4a3f      	ldr	r2, [pc, #252]	; (8006adc <xTaskIncrementTick+0x154>)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	4b3e      	ldr	r3, [pc, #248]	; (8006ae0 <xTaskIncrementTick+0x158>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3301      	adds	r3, #1
 80069ea:	4a3d      	ldr	r2, [pc, #244]	; (8006ae0 <xTaskIncrementTick+0x158>)
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	f000 fad1 	bl	8006f94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069f2:	4b3c      	ldr	r3, [pc, #240]	; (8006ae4 <xTaskIncrementTick+0x15c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d349      	bcc.n	8006a90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069fc:	4b36      	ldr	r3, [pc, #216]	; (8006ad8 <xTaskIncrementTick+0x150>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a06:	4b37      	ldr	r3, [pc, #220]	; (8006ae4 <xTaskIncrementTick+0x15c>)
 8006a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a0c:	601a      	str	r2, [r3, #0]
					break;
 8006a0e:	e03f      	b.n	8006a90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a10:	4b31      	ldr	r3, [pc, #196]	; (8006ad8 <xTaskIncrementTick+0x150>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d203      	bcs.n	8006a30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a28:	4a2e      	ldr	r2, [pc, #184]	; (8006ae4 <xTaskIncrementTick+0x15c>)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a2e:	e02f      	b.n	8006a90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fe fc77 	bl	8005328 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d004      	beq.n	8006a4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	3318      	adds	r3, #24
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fe fc6e 	bl	8005328 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a50:	4b25      	ldr	r3, [pc, #148]	; (8006ae8 <xTaskIncrementTick+0x160>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d903      	bls.n	8006a60 <xTaskIncrementTick+0xd8>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	4a22      	ldr	r2, [pc, #136]	; (8006ae8 <xTaskIncrementTick+0x160>)
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4a1f      	ldr	r2, [pc, #124]	; (8006aec <xTaskIncrementTick+0x164>)
 8006a6e:	441a      	add	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	3304      	adds	r3, #4
 8006a74:	4619      	mov	r1, r3
 8006a76:	4610      	mov	r0, r2
 8006a78:	f7fe fbf9 	bl	800526e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a80:	4b1b      	ldr	r3, [pc, #108]	; (8006af0 <xTaskIncrementTick+0x168>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d3b8      	bcc.n	80069fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a8e:	e7b5      	b.n	80069fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a90:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <xTaskIncrementTick+0x168>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	4915      	ldr	r1, [pc, #84]	; (8006aec <xTaskIncrementTick+0x164>)
 8006a98:	4613      	mov	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d901      	bls.n	8006aac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006aac:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <xTaskIncrementTick+0x16c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	e004      	b.n	8006ac4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006aba:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <xTaskIncrementTick+0x170>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	4a0d      	ldr	r2, [pc, #52]	; (8006af8 <xTaskIncrementTick+0x170>)
 8006ac2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ac4:	697b      	ldr	r3, [r7, #20]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20002ea0 	.word	0x20002ea0
 8006ad4:	20002e7c 	.word	0x20002e7c
 8006ad8:	20002e30 	.word	0x20002e30
 8006adc:	20002e34 	.word	0x20002e34
 8006ae0:	20002e90 	.word	0x20002e90
 8006ae4:	20002e98 	.word	0x20002e98
 8006ae8:	20002e80 	.word	0x20002e80
 8006aec:	200029a8 	.word	0x200029a8
 8006af0:	200029a4 	.word	0x200029a4
 8006af4:	20002e8c 	.word	0x20002e8c
 8006af8:	20002e88 	.word	0x20002e88

08006afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b02:	4b28      	ldr	r3, [pc, #160]	; (8006ba4 <vTaskSwitchContext+0xa8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b0a:	4b27      	ldr	r3, [pc, #156]	; (8006ba8 <vTaskSwitchContext+0xac>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b10:	e041      	b.n	8006b96 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006b12:	4b25      	ldr	r3, [pc, #148]	; (8006ba8 <vTaskSwitchContext+0xac>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b18:	4b24      	ldr	r3, [pc, #144]	; (8006bac <vTaskSwitchContext+0xb0>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	e010      	b.n	8006b42 <vTaskSwitchContext+0x46>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <vTaskSwitchContext+0x40>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	607b      	str	r3, [r7, #4]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <vTaskSwitchContext+0x3e>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	491b      	ldr	r1, [pc, #108]	; (8006bb0 <vTaskSwitchContext+0xb4>)
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	440b      	add	r3, r1
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0e4      	beq.n	8006b20 <vTaskSwitchContext+0x24>
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4a13      	ldr	r2, [pc, #76]	; (8006bb0 <vTaskSwitchContext+0xb4>)
 8006b62:	4413      	add	r3, r2
 8006b64:	60bb      	str	r3, [r7, #8]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	605a      	str	r2, [r3, #4]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	3308      	adds	r3, #8
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d104      	bne.n	8006b86 <vTaskSwitchContext+0x8a>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	605a      	str	r2, [r3, #4]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <vTaskSwitchContext+0xb8>)
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	4a06      	ldr	r2, [pc, #24]	; (8006bac <vTaskSwitchContext+0xb0>)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6013      	str	r3, [r2, #0]
}
 8006b96:	bf00      	nop
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	20002ea0 	.word	0x20002ea0
 8006ba8:	20002e8c 	.word	0x20002e8c
 8006bac:	20002e80 	.word	0x20002e80
 8006bb0:	200029a8 	.word	0x200029a8
 8006bb4:	200029a4 	.word	0x200029a4

08006bb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	60fb      	str	r3, [r7, #12]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bde:	4b07      	ldr	r3, [pc, #28]	; (8006bfc <vTaskPlaceOnEventList+0x44>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3318      	adds	r3, #24
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fe fb65 	bl	80052b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bec:	2101      	movs	r1, #1
 8006bee:	6838      	ldr	r0, [r7, #0]
 8006bf0:	f000 fb7a 	bl	80072e8 <prvAddCurrentTaskToDelayedList>
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	200029a4 	.word	0x200029a4

08006c00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	617b      	str	r3, [r7, #20]
}
 8006c24:	bf00      	nop
 8006c26:	e7fe      	b.n	8006c26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c28:	4b0a      	ldr	r3, [pc, #40]	; (8006c54 <vTaskPlaceOnEventListRestricted+0x54>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3318      	adds	r3, #24
 8006c2e:	4619      	mov	r1, r3
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7fe fb1c 	bl	800526e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	68b8      	ldr	r0, [r7, #8]
 8006c46:	f000 fb4f 	bl	80072e8 <prvAddCurrentTaskToDelayedList>
	}
 8006c4a:	bf00      	nop
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	200029a4 	.word	0x200029a4

08006c58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	60fb      	str	r3, [r7, #12]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	3318      	adds	r3, #24
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fe fb4d 	bl	8005328 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c8e:	4b1e      	ldr	r3, [pc, #120]	; (8006d08 <xTaskRemoveFromEventList+0xb0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d11d      	bne.n	8006cd2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fb44 	bl	8005328 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca4:	4b19      	ldr	r3, [pc, #100]	; (8006d0c <xTaskRemoveFromEventList+0xb4>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d903      	bls.n	8006cb4 <xTaskRemoveFromEventList+0x5c>
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	4a16      	ldr	r2, [pc, #88]	; (8006d0c <xTaskRemoveFromEventList+0xb4>)
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4a13      	ldr	r2, [pc, #76]	; (8006d10 <xTaskRemoveFromEventList+0xb8>)
 8006cc2:	441a      	add	r2, r3
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f7fe facf 	bl	800526e <vListInsertEnd>
 8006cd0:	e005      	b.n	8006cde <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	3318      	adds	r3, #24
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	480e      	ldr	r0, [pc, #56]	; (8006d14 <xTaskRemoveFromEventList+0xbc>)
 8006cda:	f7fe fac8 	bl	800526e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <xTaskRemoveFromEventList+0xc0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d905      	bls.n	8006cf8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cec:	2301      	movs	r3, #1
 8006cee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <xTaskRemoveFromEventList+0xc4>)
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	e001      	b.n	8006cfc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cfc:	697b      	ldr	r3, [r7, #20]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20002ea0 	.word	0x20002ea0
 8006d0c:	20002e80 	.word	0x20002e80
 8006d10:	200029a8 	.word	0x200029a8
 8006d14:	20002e38 	.word	0x20002e38
 8006d18:	200029a4 	.word	0x200029a4
 8006d1c:	20002e8c 	.word	0x20002e8c

08006d20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d28:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <vTaskInternalSetTimeOutState+0x24>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d30:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <vTaskInternalSetTimeOutState+0x28>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	605a      	str	r2, [r3, #4]
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	20002e90 	.word	0x20002e90
 8006d48:	20002e7c 	.word	0x20002e7c

08006d4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	613b      	str	r3, [r7, #16]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	60fb      	str	r3, [r7, #12]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d8e:	f001 f831 	bl	8007df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d92:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <xTaskCheckForTimeOut+0xbc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006daa:	d102      	bne.n	8006db2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	e023      	b.n	8006dfa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4b15      	ldr	r3, [pc, #84]	; (8006e0c <xTaskCheckForTimeOut+0xc0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d007      	beq.n	8006dce <xTaskCheckForTimeOut+0x82>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d302      	bcc.n	8006dce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	e015      	b.n	8006dfa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d20b      	bcs.n	8006df0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	1ad2      	subs	r2, r2, r3
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff ff9b 	bl	8006d20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	e004      	b.n	8006dfa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006df6:	2301      	movs	r3, #1
 8006df8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dfa:	f001 f82b 	bl	8007e54 <vPortExitCritical>

	return xReturn;
 8006dfe:	69fb      	ldr	r3, [r7, #28]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3720      	adds	r7, #32
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20002e7c 	.word	0x20002e7c
 8006e0c:	20002e90 	.word	0x20002e90

08006e10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e14:	4b03      	ldr	r3, [pc, #12]	; (8006e24 <vTaskMissedYield+0x14>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
}
 8006e1a:	bf00      	nop
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	20002e8c 	.word	0x20002e8c

08006e28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e30:	f000 f852 	bl	8006ed8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e34:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <prvIdleTask+0x28>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d9f9      	bls.n	8006e30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e3c:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <prvIdleTask+0x2c>)
 8006e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e4c:	e7f0      	b.n	8006e30 <prvIdleTask+0x8>
 8006e4e:	bf00      	nop
 8006e50:	200029a8 	.word	0x200029a8
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e5e:	2300      	movs	r3, #0
 8006e60:	607b      	str	r3, [r7, #4]
 8006e62:	e00c      	b.n	8006e7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4a12      	ldr	r2, [pc, #72]	; (8006eb8 <prvInitialiseTaskLists+0x60>)
 8006e70:	4413      	add	r3, r2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe f9ce 	bl	8005214 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	607b      	str	r3, [r7, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b37      	cmp	r3, #55	; 0x37
 8006e82:	d9ef      	bls.n	8006e64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e84:	480d      	ldr	r0, [pc, #52]	; (8006ebc <prvInitialiseTaskLists+0x64>)
 8006e86:	f7fe f9c5 	bl	8005214 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e8a:	480d      	ldr	r0, [pc, #52]	; (8006ec0 <prvInitialiseTaskLists+0x68>)
 8006e8c:	f7fe f9c2 	bl	8005214 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e90:	480c      	ldr	r0, [pc, #48]	; (8006ec4 <prvInitialiseTaskLists+0x6c>)
 8006e92:	f7fe f9bf 	bl	8005214 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e96:	480c      	ldr	r0, [pc, #48]	; (8006ec8 <prvInitialiseTaskLists+0x70>)
 8006e98:	f7fe f9bc 	bl	8005214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e9c:	480b      	ldr	r0, [pc, #44]	; (8006ecc <prvInitialiseTaskLists+0x74>)
 8006e9e:	f7fe f9b9 	bl	8005214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ea2:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <prvInitialiseTaskLists+0x78>)
 8006ea4:	4a05      	ldr	r2, [pc, #20]	; (8006ebc <prvInitialiseTaskLists+0x64>)
 8006ea6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <prvInitialiseTaskLists+0x7c>)
 8006eaa:	4a05      	ldr	r2, [pc, #20]	; (8006ec0 <prvInitialiseTaskLists+0x68>)
 8006eac:	601a      	str	r2, [r3, #0]
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	200029a8 	.word	0x200029a8
 8006ebc:	20002e08 	.word	0x20002e08
 8006ec0:	20002e1c 	.word	0x20002e1c
 8006ec4:	20002e38 	.word	0x20002e38
 8006ec8:	20002e4c 	.word	0x20002e4c
 8006ecc:	20002e64 	.word	0x20002e64
 8006ed0:	20002e30 	.word	0x20002e30
 8006ed4:	20002e34 	.word	0x20002e34

08006ed8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ede:	e019      	b.n	8006f14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ee0:	f000 ff88 	bl	8007df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee4:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <prvCheckTasksWaitingTermination+0x50>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3304      	adds	r3, #4
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fe fa19 	bl	8005328 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <prvCheckTasksWaitingTermination+0x54>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	4a0b      	ldr	r2, [pc, #44]	; (8006f2c <prvCheckTasksWaitingTermination+0x54>)
 8006efe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <prvCheckTasksWaitingTermination+0x58>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	4a0a      	ldr	r2, [pc, #40]	; (8006f30 <prvCheckTasksWaitingTermination+0x58>)
 8006f08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f0a:	f000 ffa3 	bl	8007e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f810 	bl	8006f34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f14:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <prvCheckTasksWaitingTermination+0x58>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e1      	bne.n	8006ee0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20002e4c 	.word	0x20002e4c
 8006f2c:	20002e78 	.word	0x20002e78
 8006f30:	20002e60 	.word	0x20002e60

08006f34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d108      	bne.n	8006f58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f001 f940 	bl	80081d0 <vPortFree>
				vPortFree( pxTCB );
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 f93d 	bl	80081d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f56:	e018      	b.n	8006f8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d103      	bne.n	8006f6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 f934 	bl	80081d0 <vPortFree>
	}
 8006f68:	e00f      	b.n	8006f8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d00a      	beq.n	8006f8a <prvDeleteTCB+0x56>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	60fb      	str	r3, [r7, #12]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <prvDeleteTCB+0x54>
	}
 8006f8a:	bf00      	nop
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <prvResetNextTaskUnblockTime+0x38>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fa4:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8006fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006faa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fac:	e008      	b.n	8006fc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fae:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <prvResetNextTaskUnblockTime+0x38>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	4a04      	ldr	r2, [pc, #16]	; (8006fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8006fbe:	6013      	str	r3, [r2, #0]
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20002e30 	.word	0x20002e30
 8006fd0:	20002e98 	.word	0x20002e98

08006fd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fda:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <xTaskGetSchedulerState+0x34>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d102      	bne.n	8006fe8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	607b      	str	r3, [r7, #4]
 8006fe6:	e008      	b.n	8006ffa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe8:	4b08      	ldr	r3, [pc, #32]	; (800700c <xTaskGetSchedulerState+0x38>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	607b      	str	r3, [r7, #4]
 8006ff4:	e001      	b.n	8006ffa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ffa:	687b      	ldr	r3, [r7, #4]
	}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	20002e84 	.word	0x20002e84
 800700c:	20002ea0 	.word	0x20002ea0

08007010 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d051      	beq.n	80070ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	4b2a      	ldr	r3, [pc, #168]	; (80070d4 <xTaskPriorityInherit+0xc4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	429a      	cmp	r2, r3
 8007032:	d241      	bcs.n	80070b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	2b00      	cmp	r3, #0
 800703a:	db06      	blt.n	800704a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703c:	4b25      	ldr	r3, [pc, #148]	; (80070d4 <xTaskPriorityInherit+0xc4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6959      	ldr	r1, [r3, #20]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4a1f      	ldr	r2, [pc, #124]	; (80070d8 <xTaskPriorityInherit+0xc8>)
 800705c:	4413      	add	r3, r2
 800705e:	4299      	cmp	r1, r3
 8007060:	d122      	bne.n	80070a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	3304      	adds	r3, #4
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe f95e 	bl	8005328 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800706c:	4b19      	ldr	r3, [pc, #100]	; (80070d4 <xTaskPriorityInherit+0xc4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707a:	4b18      	ldr	r3, [pc, #96]	; (80070dc <xTaskPriorityInherit+0xcc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d903      	bls.n	800708a <xTaskPriorityInherit+0x7a>
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007086:	4a15      	ldr	r2, [pc, #84]	; (80070dc <xTaskPriorityInherit+0xcc>)
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4a10      	ldr	r2, [pc, #64]	; (80070d8 <xTaskPriorityInherit+0xc8>)
 8007098:	441a      	add	r2, r3
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	3304      	adds	r3, #4
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f7fe f8e4 	bl	800526e <vListInsertEnd>
 80070a6:	e004      	b.n	80070b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <xTaskPriorityInherit+0xc4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070b2:	2301      	movs	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e008      	b.n	80070ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <xTaskPriorityInherit+0xc4>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d201      	bcs.n	80070ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070c6:	2301      	movs	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070ca:	68fb      	ldr	r3, [r7, #12]
	}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	200029a4 	.word	0x200029a4
 80070d8:	200029a8 	.word	0x200029a8
 80070dc:	20002e80 	.word	0x20002e80

080070e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d056      	beq.n	80071a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070f6:	4b2e      	ldr	r3, [pc, #184]	; (80071b0 <xTaskPriorityDisinherit+0xd0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d00a      	beq.n	8007116 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	60fb      	str	r3, [r7, #12]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10a      	bne.n	8007134 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	60bb      	str	r3, [r7, #8]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007138:	1e5a      	subs	r2, r3, #1
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007146:	429a      	cmp	r2, r3
 8007148:	d02c      	beq.n	80071a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714e:	2b00      	cmp	r3, #0
 8007150:	d128      	bne.n	80071a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	3304      	adds	r3, #4
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe f8e6 	bl	8005328 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007174:	4b0f      	ldr	r3, [pc, #60]	; (80071b4 <xTaskPriorityDisinherit+0xd4>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d903      	bls.n	8007184 <xTaskPriorityDisinherit+0xa4>
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	4a0c      	ldr	r2, [pc, #48]	; (80071b4 <xTaskPriorityDisinherit+0xd4>)
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4a09      	ldr	r2, [pc, #36]	; (80071b8 <xTaskPriorityDisinherit+0xd8>)
 8007192:	441a      	add	r2, r3
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	3304      	adds	r3, #4
 8007198:	4619      	mov	r1, r3
 800719a:	4610      	mov	r0, r2
 800719c:	f7fe f867 	bl	800526e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071a0:	2301      	movs	r3, #1
 80071a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071a4:	697b      	ldr	r3, [r7, #20]
	}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	200029a4 	.word	0x200029a4
 80071b4:	20002e80 	.word	0x20002e80
 80071b8:	200029a8 	.word	0x200029a8

080071bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071ca:	2301      	movs	r3, #1
 80071cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d06a      	beq.n	80072aa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	60fb      	str	r3, [r7, #12]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d902      	bls.n	8007202 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	e002      	b.n	8007208 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007206:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	429a      	cmp	r2, r3
 8007210:	d04b      	beq.n	80072aa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	429a      	cmp	r2, r3
 800721a:	d146      	bne.n	80072aa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800721c:	4b25      	ldr	r3, [pc, #148]	; (80072b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	429a      	cmp	r2, r3
 8007224:	d10a      	bne.n	800723c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60bb      	str	r3, [r7, #8]
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	2b00      	cmp	r3, #0
 800724e:	db04      	blt.n	800725a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	6959      	ldr	r1, [r3, #20]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800726a:	4413      	add	r3, r2
 800726c:	4299      	cmp	r1, r3
 800726e:	d11c      	bne.n	80072aa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	3304      	adds	r3, #4
 8007274:	4618      	mov	r0, r3
 8007276:	f7fe f857 	bl	8005328 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	4b0f      	ldr	r3, [pc, #60]	; (80072bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d903      	bls.n	800728e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	4a0c      	ldr	r2, [pc, #48]	; (80072bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4a07      	ldr	r2, [pc, #28]	; (80072b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800729c:	441a      	add	r2, r3
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	3304      	adds	r3, #4
 80072a2:	4619      	mov	r1, r3
 80072a4:	4610      	mov	r0, r2
 80072a6:	f7fd ffe2 	bl	800526e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072aa:	bf00      	nop
 80072ac:	3720      	adds	r7, #32
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	200029a4 	.word	0x200029a4
 80072b8:	200029a8 	.word	0x200029a8
 80072bc:	20002e80 	.word	0x20002e80

080072c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072c4:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d004      	beq.n	80072d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072d2:	3201      	adds	r2, #1
 80072d4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80072d6:	4b03      	ldr	r3, [pc, #12]	; (80072e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80072d8:	681b      	ldr	r3, [r3, #0]
	}
 80072da:	4618      	mov	r0, r3
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	200029a4 	.word	0x200029a4

080072e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072f2:	4b21      	ldr	r3, [pc, #132]	; (8007378 <prvAddCurrentTaskToDelayedList+0x90>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072f8:	4b20      	ldr	r3, [pc, #128]	; (800737c <prvAddCurrentTaskToDelayedList+0x94>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3304      	adds	r3, #4
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe f812 	bl	8005328 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800730a:	d10a      	bne.n	8007322 <prvAddCurrentTaskToDelayedList+0x3a>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d007      	beq.n	8007322 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007312:	4b1a      	ldr	r3, [pc, #104]	; (800737c <prvAddCurrentTaskToDelayedList+0x94>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3304      	adds	r3, #4
 8007318:	4619      	mov	r1, r3
 800731a:	4819      	ldr	r0, [pc, #100]	; (8007380 <prvAddCurrentTaskToDelayedList+0x98>)
 800731c:	f7fd ffa7 	bl	800526e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007320:	e026      	b.n	8007370 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4413      	add	r3, r2
 8007328:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800732a:	4b14      	ldr	r3, [pc, #80]	; (800737c <prvAddCurrentTaskToDelayedList+0x94>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	429a      	cmp	r2, r3
 8007338:	d209      	bcs.n	800734e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800733a:	4b12      	ldr	r3, [pc, #72]	; (8007384 <prvAddCurrentTaskToDelayedList+0x9c>)
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4b0f      	ldr	r3, [pc, #60]	; (800737c <prvAddCurrentTaskToDelayedList+0x94>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3304      	adds	r3, #4
 8007344:	4619      	mov	r1, r3
 8007346:	4610      	mov	r0, r2
 8007348:	f7fd ffb5 	bl	80052b6 <vListInsert>
}
 800734c:	e010      	b.n	8007370 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800734e:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <prvAddCurrentTaskToDelayedList+0x94>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3304      	adds	r3, #4
 8007358:	4619      	mov	r1, r3
 800735a:	4610      	mov	r0, r2
 800735c:	f7fd ffab 	bl	80052b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007360:	4b0a      	ldr	r3, [pc, #40]	; (800738c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	d202      	bcs.n	8007370 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800736a:	4a08      	ldr	r2, [pc, #32]	; (800738c <prvAddCurrentTaskToDelayedList+0xa4>)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	6013      	str	r3, [r2, #0]
}
 8007370:	bf00      	nop
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	20002e7c 	.word	0x20002e7c
 800737c:	200029a4 	.word	0x200029a4
 8007380:	20002e64 	.word	0x20002e64
 8007384:	20002e34 	.word	0x20002e34
 8007388:	20002e30 	.word	0x20002e30
 800738c:	20002e98 	.word	0x20002e98

08007390 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08a      	sub	sp, #40	; 0x28
 8007394:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800739a:	f000 fba1 	bl	8007ae0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800739e:	4b1c      	ldr	r3, [pc, #112]	; (8007410 <xTimerCreateTimerTask+0x80>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d021      	beq.n	80073ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073ae:	1d3a      	adds	r2, r7, #4
 80073b0:	f107 0108 	add.w	r1, r7, #8
 80073b4:	f107 030c 	add.w	r3, r7, #12
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fd ff11 	bl	80051e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	9202      	str	r2, [sp, #8]
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	2302      	movs	r3, #2
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	2300      	movs	r3, #0
 80073ce:	460a      	mov	r2, r1
 80073d0:	4910      	ldr	r1, [pc, #64]	; (8007414 <xTimerCreateTimerTask+0x84>)
 80073d2:	4811      	ldr	r0, [pc, #68]	; (8007418 <xTimerCreateTimerTask+0x88>)
 80073d4:	f7fe ffe0 	bl	8006398 <xTaskCreateStatic>
 80073d8:	4603      	mov	r3, r0
 80073da:	4a10      	ldr	r2, [pc, #64]	; (800741c <xTimerCreateTimerTask+0x8c>)
 80073dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073de:	4b0f      	ldr	r3, [pc, #60]	; (800741c <xTimerCreateTimerTask+0x8c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073e6:	2301      	movs	r3, #1
 80073e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10a      	bne.n	8007406 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	613b      	str	r3, [r7, #16]
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007406:	697b      	ldr	r3, [r7, #20]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	20002ed4 	.word	0x20002ed4
 8007414:	080084d8 	.word	0x080084d8
 8007418:	08007689 	.word	0x08007689
 800741c:	20002ed8 	.word	0x20002ed8

08007420 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af02      	add	r7, sp, #8
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800742e:	202c      	movs	r0, #44	; 0x2c
 8007430:	f000 fe02 	bl	8008038 <pvPortMalloc>
 8007434:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00d      	beq.n	8007458 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f843 	bl	80074de <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007458:	697b      	ldr	r3, [r7, #20]
	}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007462:	b580      	push	{r7, lr}
 8007464:	b08a      	sub	sp, #40	; 0x28
 8007466:	af02      	add	r7, sp, #8
 8007468:	60f8      	str	r0, [r7, #12]
 800746a:	60b9      	str	r1, [r7, #8]
 800746c:	607a      	str	r2, [r7, #4]
 800746e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007470:	232c      	movs	r3, #44	; 0x2c
 8007472:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2b2c      	cmp	r3, #44	; 0x2c
 8007478:	d00a      	beq.n	8007490 <xTimerCreateStatic+0x2e>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	61bb      	str	r3, [r7, #24]
}
 800748c:	bf00      	nop
 800748e:	e7fe      	b.n	800748e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007490:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <xTimerCreateStatic+0x4c>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	617b      	str	r3, [r7, #20]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00d      	beq.n	80074d4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	9301      	str	r3, [sp, #4]
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 f805 	bl	80074de <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80074d4:	69fb      	ldr	r3, [r7, #28]
	}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3720      	adds	r7, #32
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b086      	sub	sp, #24
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	617b      	str	r3, [r7, #20]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	2b00      	cmp	r3, #0
 800750c:	d01e      	beq.n	800754c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800750e:	f000 fae7 	bl	8007ae0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	6a3a      	ldr	r2, [r7, #32]
 8007528:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	3304      	adds	r3, #4
 800752e:	4618      	mov	r0, r3
 8007530:	f7fd fe90 	bl	8005254 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d008      	beq.n	800754c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007540:	f043 0304 	orr.w	r3, r3, #4
 8007544:	b2da      	uxtb	r2, r3
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800754c:	bf00      	nop
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08a      	sub	sp, #40	; 0x28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007562:	2300      	movs	r3, #0
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <xTimerGenericCommand+0x2e>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	623b      	str	r3, [r7, #32]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007582:	4b1a      	ldr	r3, [pc, #104]	; (80075ec <xTimerGenericCommand+0x98>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d02a      	beq.n	80075e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b05      	cmp	r3, #5
 800759a:	dc18      	bgt.n	80075ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800759c:	f7ff fd1a 	bl	8006fd4 <xTaskGetSchedulerState>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d109      	bne.n	80075ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80075a6:	4b11      	ldr	r3, [pc, #68]	; (80075ec <xTimerGenericCommand+0x98>)
 80075a8:	6818      	ldr	r0, [r3, #0]
 80075aa:	f107 0110 	add.w	r1, r7, #16
 80075ae:	2300      	movs	r3, #0
 80075b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b2:	f7fe f88b 	bl	80056cc <xQueueGenericSend>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24
 80075b8:	e012      	b.n	80075e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075ba:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <xTimerGenericCommand+0x98>)
 80075bc:	6818      	ldr	r0, [r3, #0]
 80075be:	f107 0110 	add.w	r1, r7, #16
 80075c2:	2300      	movs	r3, #0
 80075c4:	2200      	movs	r2, #0
 80075c6:	f7fe f881 	bl	80056cc <xQueueGenericSend>
 80075ca:	6278      	str	r0, [r7, #36]	; 0x24
 80075cc:	e008      	b.n	80075e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075ce:	4b07      	ldr	r3, [pc, #28]	; (80075ec <xTimerGenericCommand+0x98>)
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	f107 0110 	add.w	r1, r7, #16
 80075d6:	2300      	movs	r3, #0
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	f7fe f975 	bl	80058c8 <xQueueGenericSendFromISR>
 80075de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3728      	adds	r7, #40	; 0x28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20002ed4 	.word	0x20002ed4

080075f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075fa:	4b22      	ldr	r3, [pc, #136]	; (8007684 <prvProcessExpiredTimer+0x94>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	3304      	adds	r3, #4
 8007608:	4618      	mov	r0, r3
 800760a:	f7fd fe8d 	bl	8005328 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d022      	beq.n	8007662 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	699a      	ldr	r2, [r3, #24]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	18d1      	adds	r1, r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	6978      	ldr	r0, [r7, #20]
 800762a:	f000 f8d1 	bl	80077d0 <prvInsertTimerInActiveList>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01f      	beq.n	8007674 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007634:	2300      	movs	r3, #0
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	2300      	movs	r3, #0
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	2100      	movs	r1, #0
 800763e:	6978      	ldr	r0, [r7, #20]
 8007640:	f7ff ff88 	bl	8007554 <xTimerGenericCommand>
 8007644:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d113      	bne.n	8007674 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	60fb      	str	r3, [r7, #12]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007668:	f023 0301 	bic.w	r3, r3, #1
 800766c:	b2da      	uxtb	r2, r3
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	6978      	ldr	r0, [r7, #20]
 800767a:	4798      	blx	r3
}
 800767c:	bf00      	nop
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20002ecc 	.word	0x20002ecc

08007688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007690:	f107 0308 	add.w	r3, r7, #8
 8007694:	4618      	mov	r0, r3
 8007696:	f000 f857 	bl	8007748 <prvGetNextExpireTime>
 800769a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4619      	mov	r1, r3
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f803 	bl	80076ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80076a6:	f000 f8d5 	bl	8007854 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076aa:	e7f1      	b.n	8007690 <prvTimerTask+0x8>

080076ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076b6:	f7ff f8ab 	bl	8006810 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076ba:	f107 0308 	add.w	r3, r7, #8
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 f866 	bl	8007790 <prvSampleTimeNow>
 80076c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d130      	bne.n	800772e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <prvProcessTimerOrBlockTask+0x3c>
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d806      	bhi.n	80076e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076da:	f7ff f8a7 	bl	800682c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076de:	68f9      	ldr	r1, [r7, #12]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff ff85 	bl	80075f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076e6:	e024      	b.n	8007732 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d008      	beq.n	8007700 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076ee:	4b13      	ldr	r3, [pc, #76]	; (800773c <prvProcessTimerOrBlockTask+0x90>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <prvProcessTimerOrBlockTask+0x50>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e000      	b.n	80076fe <prvProcessTimerOrBlockTask+0x52>
 80076fc:	2300      	movs	r3, #0
 80076fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007700:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <prvProcessTimerOrBlockTask+0x94>)
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	4619      	mov	r1, r3
 800770e:	f7fe fe0f 	bl	8006330 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007712:	f7ff f88b 	bl	800682c <xTaskResumeAll>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800771c:	4b09      	ldr	r3, [pc, #36]	; (8007744 <prvProcessTimerOrBlockTask+0x98>)
 800771e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	f3bf 8f6f 	isb	sy
}
 800772c:	e001      	b.n	8007732 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800772e:	f7ff f87d 	bl	800682c <xTaskResumeAll>
}
 8007732:	bf00      	nop
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20002ed0 	.word	0x20002ed0
 8007740:	20002ed4 	.word	0x20002ed4
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007750:	4b0e      	ldr	r3, [pc, #56]	; (800778c <prvGetNextExpireTime+0x44>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <prvGetNextExpireTime+0x16>
 800775a:	2201      	movs	r2, #1
 800775c:	e000      	b.n	8007760 <prvGetNextExpireTime+0x18>
 800775e:	2200      	movs	r2, #0
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d105      	bne.n	8007778 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800776c:	4b07      	ldr	r3, [pc, #28]	; (800778c <prvGetNextExpireTime+0x44>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	e001      	b.n	800777c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800777c:	68fb      	ldr	r3, [r7, #12]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	20002ecc 	.word	0x20002ecc

08007790 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007798:	f7ff f8e6 	bl	8006968 <xTaskGetTickCount>
 800779c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800779e:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <prvSampleTimeNow+0x3c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d205      	bcs.n	80077b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077a8:	f000 f936 	bl	8007a18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	e002      	b.n	80077ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077ba:	4a04      	ldr	r2, [pc, #16]	; (80077cc <prvSampleTimeNow+0x3c>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077c0:	68fb      	ldr	r3, [r7, #12]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20002edc 	.word	0x20002edc

080077d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077de:	2300      	movs	r3, #0
 80077e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d812      	bhi.n	800781c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	1ad2      	subs	r2, r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	429a      	cmp	r2, r3
 8007802:	d302      	bcc.n	800780a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007804:	2301      	movs	r3, #1
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	e01b      	b.n	8007842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800780a:	4b10      	ldr	r3, [pc, #64]	; (800784c <prvInsertTimerInActiveList+0x7c>)
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3304      	adds	r3, #4
 8007812:	4619      	mov	r1, r3
 8007814:	4610      	mov	r0, r2
 8007816:	f7fd fd4e 	bl	80052b6 <vListInsert>
 800781a:	e012      	b.n	8007842 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d206      	bcs.n	8007832 <prvInsertTimerInActiveList+0x62>
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	d302      	bcc.n	8007832 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800782c:	2301      	movs	r3, #1
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	e007      	b.n	8007842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007832:	4b07      	ldr	r3, [pc, #28]	; (8007850 <prvInsertTimerInActiveList+0x80>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3304      	adds	r3, #4
 800783a:	4619      	mov	r1, r3
 800783c:	4610      	mov	r0, r2
 800783e:	f7fd fd3a 	bl	80052b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007842:	697b      	ldr	r3, [r7, #20]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20002ed0 	.word	0x20002ed0
 8007850:	20002ecc 	.word	0x20002ecc

08007854 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08e      	sub	sp, #56	; 0x38
 8007858:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800785a:	e0ca      	b.n	80079f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	da18      	bge.n	8007894 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007862:	1d3b      	adds	r3, r7, #4
 8007864:	3304      	adds	r3, #4
 8007866:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	61fb      	str	r3, [r7, #28]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800788a:	6850      	ldr	r0, [r2, #4]
 800788c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800788e:	6892      	ldr	r2, [r2, #8]
 8007890:	4611      	mov	r1, r2
 8007892:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	f2c0 80aa 	blt.w	80079f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d004      	beq.n	80078b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	3304      	adds	r3, #4
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fd fd3b 	bl	8005328 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078b2:	463b      	mov	r3, r7
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff ff6b 	bl	8007790 <prvSampleTimeNow>
 80078ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b09      	cmp	r3, #9
 80078c0:	f200 8097 	bhi.w	80079f2 <prvProcessReceivedCommands+0x19e>
 80078c4:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <prvProcessReceivedCommands+0x78>)
 80078c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ca:	bf00      	nop
 80078cc:	080078f5 	.word	0x080078f5
 80078d0:	080078f5 	.word	0x080078f5
 80078d4:	080078f5 	.word	0x080078f5
 80078d8:	08007969 	.word	0x08007969
 80078dc:	0800797d 	.word	0x0800797d
 80078e0:	080079c7 	.word	0x080079c7
 80078e4:	080078f5 	.word	0x080078f5
 80078e8:	080078f5 	.word	0x080078f5
 80078ec:	08007969 	.word	0x08007969
 80078f0:	0800797d 	.word	0x0800797d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078fa:	f043 0301 	orr.w	r3, r3, #1
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	18d1      	adds	r1, r2, r3
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007914:	f7ff ff5c 	bl	80077d0 <prvInsertTimerInActiveList>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d069      	beq.n	80079f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007924:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d05e      	beq.n	80079f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	441a      	add	r2, r3
 800793c:	2300      	movs	r3, #0
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	2300      	movs	r3, #0
 8007942:	2100      	movs	r1, #0
 8007944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007946:	f7ff fe05 	bl	8007554 <xTimerGenericCommand>
 800794a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d14f      	bne.n	80079f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	61bb      	str	r3, [r7, #24]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800796e:	f023 0301 	bic.w	r3, r3, #1
 8007972:	b2da      	uxtb	r2, r3
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800797a:	e03a      	b.n	80079f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10a      	bne.n	80079b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	617b      	str	r3, [r7, #20]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	18d1      	adds	r1, r2, r3
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079c0:	f7ff ff06 	bl	80077d0 <prvInsertTimerInActiveList>
					break;
 80079c4:	e015      	b.n	80079f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d103      	bne.n	80079dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80079d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079d6:	f000 fbfb 	bl	80081d0 <vPortFree>
 80079da:	e00a      	b.n	80079f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079e2:	f023 0301 	bic.w	r3, r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079ee:	e000      	b.n	80079f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079f2:	4b08      	ldr	r3, [pc, #32]	; (8007a14 <prvProcessReceivedCommands+0x1c0>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	1d39      	adds	r1, r7, #4
 80079f8:	2200      	movs	r2, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fe f88c 	bl	8005b18 <xQueueReceive>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f47f af2a 	bne.w	800785c <prvProcessReceivedCommands+0x8>
	}
}
 8007a08:	bf00      	nop
 8007a0a:	bf00      	nop
 8007a0c:	3730      	adds	r7, #48	; 0x30
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20002ed4 	.word	0x20002ed4

08007a18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a1e:	e048      	b.n	8007ab2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a20:	4b2d      	ldr	r3, [pc, #180]	; (8007ad8 <prvSwitchTimerLists+0xc0>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a2a:	4b2b      	ldr	r3, [pc, #172]	; (8007ad8 <prvSwitchTimerLists+0xc0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3304      	adds	r3, #4
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fd fc75 	bl	8005328 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d02e      	beq.n	8007ab2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d90e      	bls.n	8007a84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a72:	4b19      	ldr	r3, [pc, #100]	; (8007ad8 <prvSwitchTimerLists+0xc0>)
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	f7fd fc1a 	bl	80052b6 <vListInsert>
 8007a82:	e016      	b.n	8007ab2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a84:	2300      	movs	r3, #0
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7ff fd60 	bl	8007554 <xTimerGenericCommand>
 8007a94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10a      	bne.n	8007ab2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	603b      	str	r3, [r7, #0]
}
 8007aae:	bf00      	nop
 8007ab0:	e7fe      	b.n	8007ab0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ab2:	4b09      	ldr	r3, [pc, #36]	; (8007ad8 <prvSwitchTimerLists+0xc0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1b1      	bne.n	8007a20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <prvSwitchTimerLists+0xc0>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ac2:	4b06      	ldr	r3, [pc, #24]	; (8007adc <prvSwitchTimerLists+0xc4>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a04      	ldr	r2, [pc, #16]	; (8007ad8 <prvSwitchTimerLists+0xc0>)
 8007ac8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007aca:	4a04      	ldr	r2, [pc, #16]	; (8007adc <prvSwitchTimerLists+0xc4>)
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	6013      	str	r3, [r2, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20002ecc 	.word	0x20002ecc
 8007adc:	20002ed0 	.word	0x20002ed0

08007ae0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ae6:	f000 f985 	bl	8007df4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007aea:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <prvCheckForValidListAndQueue+0x60>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d120      	bne.n	8007b34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007af2:	4814      	ldr	r0, [pc, #80]	; (8007b44 <prvCheckForValidListAndQueue+0x64>)
 8007af4:	f7fd fb8e 	bl	8005214 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007af8:	4813      	ldr	r0, [pc, #76]	; (8007b48 <prvCheckForValidListAndQueue+0x68>)
 8007afa:	f7fd fb8b 	bl	8005214 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007afe:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <prvCheckForValidListAndQueue+0x6c>)
 8007b00:	4a10      	ldr	r2, [pc, #64]	; (8007b44 <prvCheckForValidListAndQueue+0x64>)
 8007b02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b04:	4b12      	ldr	r3, [pc, #72]	; (8007b50 <prvCheckForValidListAndQueue+0x70>)
 8007b06:	4a10      	ldr	r2, [pc, #64]	; (8007b48 <prvCheckForValidListAndQueue+0x68>)
 8007b08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <prvCheckForValidListAndQueue+0x74>)
 8007b10:	4a11      	ldr	r2, [pc, #68]	; (8007b58 <prvCheckForValidListAndQueue+0x78>)
 8007b12:	2110      	movs	r1, #16
 8007b14:	200a      	movs	r0, #10
 8007b16:	f7fd fc99 	bl	800544c <xQueueGenericCreateStatic>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4a08      	ldr	r2, [pc, #32]	; (8007b40 <prvCheckForValidListAndQueue+0x60>)
 8007b1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <prvCheckForValidListAndQueue+0x60>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d005      	beq.n	8007b34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <prvCheckForValidListAndQueue+0x60>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	490b      	ldr	r1, [pc, #44]	; (8007b5c <prvCheckForValidListAndQueue+0x7c>)
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fe fbaa 	bl	8006288 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b34:	f000 f98e 	bl	8007e54 <vPortExitCritical>
}
 8007b38:	bf00      	nop
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20002ed4 	.word	0x20002ed4
 8007b44:	20002ea4 	.word	0x20002ea4
 8007b48:	20002eb8 	.word	0x20002eb8
 8007b4c:	20002ecc 	.word	0x20002ecc
 8007b50:	20002ed0 	.word	0x20002ed0
 8007b54:	20002f80 	.word	0x20002f80
 8007b58:	20002ee0 	.word	0x20002ee0
 8007b5c:	080084e0 	.word	0x080084e0

08007b60 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <pvTimerGetTimerID+0x28>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	60fb      	str	r3, [r7, #12]
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007b88:	f000 f934 	bl	8007df4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007b92:	f000 f95f 	bl	8007e54 <vPortExitCritical>

	return pvReturn;
 8007b96:	693b      	ldr	r3, [r7, #16]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3b04      	subs	r3, #4
 8007bb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3b04      	subs	r3, #4
 8007bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3b04      	subs	r3, #4
 8007bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bd0:	4a0c      	ldr	r2, [pc, #48]	; (8007c04 <pxPortInitialiseStack+0x64>)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3b14      	subs	r3, #20
 8007bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3b04      	subs	r3, #4
 8007be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f06f 0202 	mvn.w	r2, #2
 8007bee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3b20      	subs	r3, #32
 8007bf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	08007c09 	.word	0x08007c09

08007c08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c12:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <prvTaskExitError+0x54>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c1a:	d00a      	beq.n	8007c32 <prvTaskExitError+0x2a>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	60fb      	str	r3, [r7, #12]
}
 8007c2e:	bf00      	nop
 8007c30:	e7fe      	b.n	8007c30 <prvTaskExitError+0x28>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	60bb      	str	r3, [r7, #8]
}
 8007c44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c46:	bf00      	nop
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0fc      	beq.n	8007c48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c4e:	bf00      	nop
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	2000210c 	.word	0x2000210c

08007c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c60:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <pxCurrentTCBConst2>)
 8007c62:	6819      	ldr	r1, [r3, #0]
 8007c64:	6808      	ldr	r0, [r1, #0]
 8007c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6a:	f380 8809 	msr	PSP, r0
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f04f 0000 	mov.w	r0, #0
 8007c76:	f380 8811 	msr	BASEPRI, r0
 8007c7a:	4770      	bx	lr
 8007c7c:	f3af 8000 	nop.w

08007c80 <pxCurrentTCBConst2>:
 8007c80:	200029a4 	.word	0x200029a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop

08007c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c88:	4808      	ldr	r0, [pc, #32]	; (8007cac <prvPortStartFirstTask+0x24>)
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	6800      	ldr	r0, [r0, #0]
 8007c8e:	f380 8808 	msr	MSP, r0
 8007c92:	f04f 0000 	mov.w	r0, #0
 8007c96:	f380 8814 	msr	CONTROL, r0
 8007c9a:	b662      	cpsie	i
 8007c9c:	b661      	cpsie	f
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	df00      	svc	0
 8007ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007caa:	bf00      	nop
 8007cac:	e000ed08 	.word	0xe000ed08

08007cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cb6:	4b46      	ldr	r3, [pc, #280]	; (8007dd0 <xPortStartScheduler+0x120>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a46      	ldr	r2, [pc, #280]	; (8007dd4 <xPortStartScheduler+0x124>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d10a      	bne.n	8007cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	613b      	str	r3, [r7, #16]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cd6:	4b3e      	ldr	r3, [pc, #248]	; (8007dd0 <xPortStartScheduler+0x120>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a3f      	ldr	r2, [pc, #252]	; (8007dd8 <xPortStartScheduler+0x128>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d10a      	bne.n	8007cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	60fb      	str	r3, [r7, #12]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cf6:	4b39      	ldr	r3, [pc, #228]	; (8007ddc <xPortStartScheduler+0x12c>)
 8007cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	22ff      	movs	r2, #255	; 0xff
 8007d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	4b31      	ldr	r3, [pc, #196]	; (8007de0 <xPortStartScheduler+0x130>)
 8007d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d1e:	4b31      	ldr	r3, [pc, #196]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d20:	2207      	movs	r2, #7
 8007d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d24:	e009      	b.n	8007d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007d26:	4b2f      	ldr	r3, [pc, #188]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	4a2d      	ldr	r2, [pc, #180]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d3a:	78fb      	ldrb	r3, [r7, #3]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d42:	2b80      	cmp	r3, #128	; 0x80
 8007d44:	d0ef      	beq.n	8007d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d46:	4b27      	ldr	r3, [pc, #156]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f1c3 0307 	rsb	r3, r3, #7
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d00a      	beq.n	8007d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	60bb      	str	r3, [r7, #8]
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d68:	4b1e      	ldr	r3, [pc, #120]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	4a1d      	ldr	r2, [pc, #116]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d72:	4b1c      	ldr	r3, [pc, #112]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d7a:	4a1a      	ldr	r2, [pc, #104]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d86:	4b18      	ldr	r3, [pc, #96]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a17      	ldr	r2, [pc, #92]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d92:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a14      	ldr	r2, [pc, #80]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d9e:	f000 f8dd 	bl	8007f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007da2:	4b12      	ldr	r3, [pc, #72]	; (8007dec <xPortStartScheduler+0x13c>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007da8:	f000 f8fc 	bl	8007fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007dac:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <xPortStartScheduler+0x140>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0f      	ldr	r2, [pc, #60]	; (8007df0 <xPortStartScheduler+0x140>)
 8007db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007db8:	f7ff ff66 	bl	8007c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007dbc:	f7fe fe9e 	bl	8006afc <vTaskSwitchContext>
	prvTaskExitError();
 8007dc0:	f7ff ff22 	bl	8007c08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	e000ed00 	.word	0xe000ed00
 8007dd4:	410fc271 	.word	0x410fc271
 8007dd8:	410fc270 	.word	0x410fc270
 8007ddc:	e000e400 	.word	0xe000e400
 8007de0:	20002fd0 	.word	0x20002fd0
 8007de4:	20002fd4 	.word	0x20002fd4
 8007de8:	e000ed20 	.word	0xe000ed20
 8007dec:	2000210c 	.word	0x2000210c
 8007df0:	e000ef34 	.word	0xe000ef34

08007df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	607b      	str	r3, [r7, #4]
}
 8007e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <vPortEnterCritical+0x58>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3301      	adds	r3, #1
 8007e14:	4a0d      	ldr	r2, [pc, #52]	; (8007e4c <vPortEnterCritical+0x58>)
 8007e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e18:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <vPortEnterCritical+0x58>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d10f      	bne.n	8007e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e20:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <vPortEnterCritical+0x5c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	603b      	str	r3, [r7, #0]
}
 8007e3c:	bf00      	nop
 8007e3e:	e7fe      	b.n	8007e3e <vPortEnterCritical+0x4a>
	}
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	2000210c 	.word	0x2000210c
 8007e50:	e000ed04 	.word	0xe000ed04

08007e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e5a:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10a      	bne.n	8007e78 <vPortExitCritical+0x24>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	607b      	str	r3, [r7, #4]
}
 8007e74:	bf00      	nop
 8007e76:	e7fe      	b.n	8007e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e78:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	4a09      	ldr	r2, [pc, #36]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e82:	4b08      	ldr	r3, [pc, #32]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d105      	bne.n	8007e96 <vPortExitCritical+0x42>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	f383 8811 	msr	BASEPRI, r3
}
 8007e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	2000210c 	.word	0x2000210c
	...

08007eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007eb0:	f3ef 8009 	mrs	r0, PSP
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	4b15      	ldr	r3, [pc, #84]	; (8007f10 <pxCurrentTCBConst>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	f01e 0f10 	tst.w	lr, #16
 8007ec0:	bf08      	it	eq
 8007ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eca:	6010      	str	r0, [r2, #0]
 8007ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ed4:	f380 8811 	msr	BASEPRI, r0
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f7fe fe0c 	bl	8006afc <vTaskSwitchContext>
 8007ee4:	f04f 0000 	mov.w	r0, #0
 8007ee8:	f380 8811 	msr	BASEPRI, r0
 8007eec:	bc09      	pop	{r0, r3}
 8007eee:	6819      	ldr	r1, [r3, #0]
 8007ef0:	6808      	ldr	r0, [r1, #0]
 8007ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef6:	f01e 0f10 	tst.w	lr, #16
 8007efa:	bf08      	it	eq
 8007efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f00:	f380 8809 	msr	PSP, r0
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	f3af 8000 	nop.w

08007f10 <pxCurrentTCBConst>:
 8007f10:	200029a4 	.word	0x200029a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop

08007f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	607b      	str	r3, [r7, #4]
}
 8007f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f32:	f7fe fd29 	bl	8006988 <xTaskIncrementTick>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f3c:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <xPortSysTickHandler+0x40>)
 8007f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	2300      	movs	r3, #0
 8007f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	f383 8811 	msr	BASEPRI, r3
}
 8007f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f60:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <vPortSetupTimerInterrupt+0x34>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f66:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <vPortSetupTimerInterrupt+0x38>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f6c:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <vPortSetupTimerInterrupt+0x3c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a0a      	ldr	r2, [pc, #40]	; (8007f9c <vPortSetupTimerInterrupt+0x40>)
 8007f72:	fba2 2303 	umull	r2, r3, r2, r3
 8007f76:	099b      	lsrs	r3, r3, #6
 8007f78:	4a09      	ldr	r2, [pc, #36]	; (8007fa0 <vPortSetupTimerInterrupt+0x44>)
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f7e:	4b04      	ldr	r3, [pc, #16]	; (8007f90 <vPortSetupTimerInterrupt+0x34>)
 8007f80:	2207      	movs	r2, #7
 8007f82:	601a      	str	r2, [r3, #0]
}
 8007f84:	bf00      	nop
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	e000e010 	.word	0xe000e010
 8007f94:	e000e018 	.word	0xe000e018
 8007f98:	20002100 	.word	0x20002100
 8007f9c:	10624dd3 	.word	0x10624dd3
 8007fa0:	e000e014 	.word	0xe000e014

08007fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fb4 <vPortEnableVFP+0x10>
 8007fa8:	6801      	ldr	r1, [r0, #0]
 8007faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fae:	6001      	str	r1, [r0, #0]
 8007fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fb2:	bf00      	nop
 8007fb4:	e000ed88 	.word	0xe000ed88

08007fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fbe:	f3ef 8305 	mrs	r3, IPSR
 8007fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b0f      	cmp	r3, #15
 8007fc8:	d914      	bls.n	8007ff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007fca:	4a17      	ldr	r2, [pc, #92]	; (8008028 <vPortValidateInterruptPriority+0x70>)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fd4:	4b15      	ldr	r3, [pc, #84]	; (800802c <vPortValidateInterruptPriority+0x74>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	7afa      	ldrb	r2, [r7, #11]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d20a      	bcs.n	8007ff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	607b      	str	r3, [r7, #4]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ff4:	4b0e      	ldr	r3, [pc, #56]	; (8008030 <vPortValidateInterruptPriority+0x78>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ffc:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <vPortValidateInterruptPriority+0x7c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d90a      	bls.n	800801a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	603b      	str	r3, [r7, #0]
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <vPortValidateInterruptPriority+0x60>
	}
 800801a:	bf00      	nop
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	e000e3f0 	.word	0xe000e3f0
 800802c:	20002fd0 	.word	0x20002fd0
 8008030:	e000ed0c 	.word	0xe000ed0c
 8008034:	20002fd4 	.word	0x20002fd4

08008038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	; 0x28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008044:	f7fe fbe4 	bl	8006810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008048:	4b5b      	ldr	r3, [pc, #364]	; (80081b8 <pvPortMalloc+0x180>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008050:	f000 f920 	bl	8008294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008054:	4b59      	ldr	r3, [pc, #356]	; (80081bc <pvPortMalloc+0x184>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	f040 8093 	bne.w	8008188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01d      	beq.n	80080a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008068:	2208      	movs	r2, #8
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b00      	cmp	r3, #0
 8008078:	d014      	beq.n	80080a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f023 0307 	bic.w	r3, r3, #7
 8008080:	3308      	adds	r3, #8
 8008082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <pvPortMalloc+0x6c>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	617b      	str	r3, [r7, #20]
}
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d06e      	beq.n	8008188 <pvPortMalloc+0x150>
 80080aa:	4b45      	ldr	r3, [pc, #276]	; (80081c0 <pvPortMalloc+0x188>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d869      	bhi.n	8008188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080b4:	4b43      	ldr	r3, [pc, #268]	; (80081c4 <pvPortMalloc+0x18c>)
 80080b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080b8:	4b42      	ldr	r3, [pc, #264]	; (80081c4 <pvPortMalloc+0x18c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080be:	e004      	b.n	80080ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d903      	bls.n	80080dc <pvPortMalloc+0xa4>
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f1      	bne.n	80080c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080dc:	4b36      	ldr	r3, [pc, #216]	; (80081b8 <pvPortMalloc+0x180>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d050      	beq.n	8008188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2208      	movs	r2, #8
 80080ec:	4413      	add	r3, r2
 80080ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	2308      	movs	r3, #8
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	429a      	cmp	r2, r3
 8008106:	d91f      	bls.n	8008148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4413      	add	r3, r2
 800810e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <pvPortMalloc+0xf8>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	613b      	str	r3, [r7, #16]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	1ad2      	subs	r2, r2, r3
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008142:	69b8      	ldr	r0, [r7, #24]
 8008144:	f000 f908 	bl	8008358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008148:	4b1d      	ldr	r3, [pc, #116]	; (80081c0 <pvPortMalloc+0x188>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <pvPortMalloc+0x188>)
 8008154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008156:	4b1a      	ldr	r3, [pc, #104]	; (80081c0 <pvPortMalloc+0x188>)
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <pvPortMalloc+0x190>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d203      	bcs.n	800816a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008162:	4b17      	ldr	r3, [pc, #92]	; (80081c0 <pvPortMalloc+0x188>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a18      	ldr	r2, [pc, #96]	; (80081c8 <pvPortMalloc+0x190>)
 8008168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	4b13      	ldr	r3, [pc, #76]	; (80081bc <pvPortMalloc+0x184>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	431a      	orrs	r2, r3
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800817e:	4b13      	ldr	r3, [pc, #76]	; (80081cc <pvPortMalloc+0x194>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3301      	adds	r3, #1
 8008184:	4a11      	ldr	r2, [pc, #68]	; (80081cc <pvPortMalloc+0x194>)
 8008186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008188:	f7fe fb50 	bl	800682c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <pvPortMalloc+0x174>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60fb      	str	r3, [r7, #12]
}
 80081a8:	bf00      	nop
 80081aa:	e7fe      	b.n	80081aa <pvPortMalloc+0x172>
	return pvReturn;
 80081ac:	69fb      	ldr	r3, [r7, #28]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3728      	adds	r7, #40	; 0x28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20004750 	.word	0x20004750
 80081bc:	20004764 	.word	0x20004764
 80081c0:	20004754 	.word	0x20004754
 80081c4:	20004748 	.word	0x20004748
 80081c8:	20004758 	.word	0x20004758
 80081cc:	2000475c 	.word	0x2000475c

080081d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d04d      	beq.n	800827e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081e2:	2308      	movs	r3, #8
 80081e4:	425b      	negs	r3, r3
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4413      	add	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	4b24      	ldr	r3, [pc, #144]	; (8008288 <vPortFree+0xb8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4013      	ands	r3, r2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10a      	bne.n	8008214 <vPortFree+0x44>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	60fb      	str	r3, [r7, #12]
}
 8008210:	bf00      	nop
 8008212:	e7fe      	b.n	8008212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00a      	beq.n	8008232 <vPortFree+0x62>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	60bb      	str	r3, [r7, #8]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	4b14      	ldr	r3, [pc, #80]	; (8008288 <vPortFree+0xb8>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01e      	beq.n	800827e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d11a      	bne.n	800827e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	4b0e      	ldr	r3, [pc, #56]	; (8008288 <vPortFree+0xb8>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	43db      	mvns	r3, r3
 8008252:	401a      	ands	r2, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008258:	f7fe fada 	bl	8006810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	4b0a      	ldr	r3, [pc, #40]	; (800828c <vPortFree+0xbc>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4413      	add	r3, r2
 8008266:	4a09      	ldr	r2, [pc, #36]	; (800828c <vPortFree+0xbc>)
 8008268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800826a:	6938      	ldr	r0, [r7, #16]
 800826c:	f000 f874 	bl	8008358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <vPortFree+0xc0>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3301      	adds	r3, #1
 8008276:	4a06      	ldr	r2, [pc, #24]	; (8008290 <vPortFree+0xc0>)
 8008278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800827a:	f7fe fad7 	bl	800682c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800827e:	bf00      	nop
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20004764 	.word	0x20004764
 800828c:	20004754 	.word	0x20004754
 8008290:	20004760 	.word	0x20004760

08008294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800829a:	f241 7370 	movw	r3, #6000	; 0x1770
 800829e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082a0:	4b27      	ldr	r3, [pc, #156]	; (8008340 <prvHeapInit+0xac>)
 80082a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00c      	beq.n	80082c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3307      	adds	r3, #7
 80082b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0307 	bic.w	r3, r3, #7
 80082ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	4a1f      	ldr	r2, [pc, #124]	; (8008340 <prvHeapInit+0xac>)
 80082c4:	4413      	add	r3, r2
 80082c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082cc:	4a1d      	ldr	r2, [pc, #116]	; (8008344 <prvHeapInit+0xb0>)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082d2:	4b1c      	ldr	r3, [pc, #112]	; (8008344 <prvHeapInit+0xb0>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	4413      	add	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082e0:	2208      	movs	r2, #8
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	1a9b      	subs	r3, r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f023 0307 	bic.w	r3, r3, #7
 80082ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4a15      	ldr	r2, [pc, #84]	; (8008348 <prvHeapInit+0xb4>)
 80082f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082f6:	4b14      	ldr	r3, [pc, #80]	; (8008348 <prvHeapInit+0xb4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082fe:	4b12      	ldr	r3, [pc, #72]	; (8008348 <prvHeapInit+0xb4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008314:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <prvHeapInit+0xb4>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	4a0a      	ldr	r2, [pc, #40]	; (800834c <prvHeapInit+0xb8>)
 8008322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	4a09      	ldr	r2, [pc, #36]	; (8008350 <prvHeapInit+0xbc>)
 800832a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800832c:	4b09      	ldr	r3, [pc, #36]	; (8008354 <prvHeapInit+0xc0>)
 800832e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008332:	601a      	str	r2, [r3, #0]
}
 8008334:	bf00      	nop
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	20002fd8 	.word	0x20002fd8
 8008344:	20004748 	.word	0x20004748
 8008348:	20004750 	.word	0x20004750
 800834c:	20004758 	.word	0x20004758
 8008350:	20004754 	.word	0x20004754
 8008354:	20004764 	.word	0x20004764

08008358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008360:	4b28      	ldr	r3, [pc, #160]	; (8008404 <prvInsertBlockIntoFreeList+0xac>)
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e002      	b.n	800836c <prvInsertBlockIntoFreeList+0x14>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	429a      	cmp	r2, r3
 8008374:	d8f7      	bhi.n	8008366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	4413      	add	r3, r2
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	429a      	cmp	r2, r3
 8008386:	d108      	bne.n	800839a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	441a      	add	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	441a      	add	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d118      	bne.n	80083e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <prvInsertBlockIntoFreeList+0xb0>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d00d      	beq.n	80083d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	441a      	add	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	e008      	b.n	80083e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083d6:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <prvInsertBlockIntoFreeList+0xb0>)
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	e003      	b.n	80083e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d002      	beq.n	80083f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	20004748 	.word	0x20004748
 8008408:	20004750 	.word	0x20004750

0800840c <__libc_init_array>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4d0d      	ldr	r5, [pc, #52]	; (8008444 <__libc_init_array+0x38>)
 8008410:	4c0d      	ldr	r4, [pc, #52]	; (8008448 <__libc_init_array+0x3c>)
 8008412:	1b64      	subs	r4, r4, r5
 8008414:	10a4      	asrs	r4, r4, #2
 8008416:	2600      	movs	r6, #0
 8008418:	42a6      	cmp	r6, r4
 800841a:	d109      	bne.n	8008430 <__libc_init_array+0x24>
 800841c:	4d0b      	ldr	r5, [pc, #44]	; (800844c <__libc_init_array+0x40>)
 800841e:	4c0c      	ldr	r4, [pc, #48]	; (8008450 <__libc_init_array+0x44>)
 8008420:	f000 f82e 	bl	8008480 <_init>
 8008424:	1b64      	subs	r4, r4, r5
 8008426:	10a4      	asrs	r4, r4, #2
 8008428:	2600      	movs	r6, #0
 800842a:	42a6      	cmp	r6, r4
 800842c:	d105      	bne.n	800843a <__libc_init_array+0x2e>
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	f855 3b04 	ldr.w	r3, [r5], #4
 8008434:	4798      	blx	r3
 8008436:	3601      	adds	r6, #1
 8008438:	e7ee      	b.n	8008418 <__libc_init_array+0xc>
 800843a:	f855 3b04 	ldr.w	r3, [r5], #4
 800843e:	4798      	blx	r3
 8008440:	3601      	adds	r6, #1
 8008442:	e7f2      	b.n	800842a <__libc_init_array+0x1e>
 8008444:	0800857c 	.word	0x0800857c
 8008448:	0800857c 	.word	0x0800857c
 800844c:	0800857c 	.word	0x0800857c
 8008450:	08008580 	.word	0x08008580

08008454 <memcpy>:
 8008454:	440a      	add	r2, r1
 8008456:	4291      	cmp	r1, r2
 8008458:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800845c:	d100      	bne.n	8008460 <memcpy+0xc>
 800845e:	4770      	bx	lr
 8008460:	b510      	push	{r4, lr}
 8008462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800846a:	4291      	cmp	r1, r2
 800846c:	d1f9      	bne.n	8008462 <memcpy+0xe>
 800846e:	bd10      	pop	{r4, pc}

08008470 <memset>:
 8008470:	4402      	add	r2, r0
 8008472:	4603      	mov	r3, r0
 8008474:	4293      	cmp	r3, r2
 8008476:	d100      	bne.n	800847a <memset+0xa>
 8008478:	4770      	bx	lr
 800847a:	f803 1b01 	strb.w	r1, [r3], #1
 800847e:	e7f9      	b.n	8008474 <memset+0x4>

08008480 <_init>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr

0800848c <_fini>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	bf00      	nop
 8008490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008492:	bc08      	pop	{r3}
 8008494:	469e      	mov	lr, r3
 8008496:	4770      	bx	lr
