
nucleo-l432kc_4x4rgb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008100  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000223c  08008290  08008290  00018290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4cc  0800a4cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4d4  0800a4d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4d4  0800a4d4  0001a4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a4dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d44  20000074  0800a550  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003db8  0800a550  00023db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f091  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040df  00000000  00000000  0003f135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00043218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00044a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254c6  00000000  00000000  000460b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e14b  00000000  00000000  0006b57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4b3c  00000000  00000000  000896c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e205  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000667c  00000000  00000000  0015e258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008278 	.word	0x08008278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008278 	.word	0x08008278

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <printDataOnMatrix>:
/**
 * @brief	Prints the received Data from the Broker and prints it on the 4x4 Matrix
 * @param	ch - Pointer to a Char holding the Information to print
 */
void printDataOnMatrix(const char * const ch)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	switch(*ch)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	3b58      	subs	r3, #88	; 0x58
 80004e2:	2b1b      	cmp	r3, #27
 80004e4:	f200 8093 	bhi.w	800060e <printDataOnMatrix+0x13a>
 80004e8:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <printDataOnMatrix+0x1c>)
 80004ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ee:	bf00      	nop
 80004f0:	080005f9 	.word	0x080005f9
 80004f4:	080005ff 	.word	0x080005ff
 80004f8:	08000607 	.word	0x08000607
 80004fc:	0800060f 	.word	0x0800060f
 8000500:	0800060f 	.word	0x0800060f
 8000504:	0800060f 	.word	0x0800060f
 8000508:	0800060f 	.word	0x0800060f
 800050c:	0800060f 	.word	0x0800060f
 8000510:	0800060f 	.word	0x0800060f
 8000514:	08000561 	.word	0x08000561
 8000518:	08000569 	.word	0x08000569
 800051c:	08000571 	.word	0x08000571
 8000520:	08000579 	.word	0x08000579
 8000524:	08000581 	.word	0x08000581
 8000528:	08000589 	.word	0x08000589
 800052c:	08000591 	.word	0x08000591
 8000530:	08000599 	.word	0x08000599
 8000534:	080005a1 	.word	0x080005a1
 8000538:	080005a9 	.word	0x080005a9
 800053c:	080005b1 	.word	0x080005b1
 8000540:	080005b9 	.word	0x080005b9
 8000544:	080005c1 	.word	0x080005c1
 8000548:	080005c9 	.word	0x080005c9
 800054c:	080005d1 	.word	0x080005d1
 8000550:	080005d9 	.word	0x080005d9
 8000554:	080005e1 	.word	0x080005e1
 8000558:	080005e9 	.word	0x080005e9
 800055c:	080005f1 	.word	0x080005f1
	{
		case 'a':
			ptr_Rgb4x4Click = &rgb4x4click_centered;
 8000560:	4b38      	ldr	r3, [pc, #224]	; (8000644 <printDataOnMatrix+0x170>)
 8000562:	4a39      	ldr	r2, [pc, #228]	; (8000648 <printDataOnMatrix+0x174>)
 8000564:	601a      	str	r2, [r3, #0]
			break;
 8000566:	e056      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'b':
			ptr_Rgb4x4Click = &rgb4x4click_outOfScope;
 8000568:	4b36      	ldr	r3, [pc, #216]	; (8000644 <printDataOnMatrix+0x170>)
 800056a:	4a38      	ldr	r2, [pc, #224]	; (800064c <printDataOnMatrix+0x178>)
 800056c:	601a      	str	r2, [r3, #0]
			break;
 800056e:	e052      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'c':
			ptr_Rgb4x4Click = &rgb4x4click_shakeDetection;
 8000570:	4b34      	ldr	r3, [pc, #208]	; (8000644 <printDataOnMatrix+0x170>)
 8000572:	4a37      	ldr	r2, [pc, #220]	; (8000650 <printDataOnMatrix+0x17c>)
 8000574:	601a      	str	r2, [r3, #0]
			break;
 8000576:	e04e      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'd':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_lo;
 8000578:	4b32      	ldr	r3, [pc, #200]	; (8000644 <printDataOnMatrix+0x170>)
 800057a:	4a36      	ldr	r2, [pc, #216]	; (8000654 <printDataOnMatrix+0x180>)
 800057c:	601a      	str	r2, [r3, #0]
			break;
 800057e:	e04a      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'e':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_lu;
 8000580:	4b30      	ldr	r3, [pc, #192]	; (8000644 <printDataOnMatrix+0x170>)
 8000582:	4a35      	ldr	r2, [pc, #212]	; (8000658 <printDataOnMatrix+0x184>)
 8000584:	601a      	str	r2, [r3, #0]
			break;
 8000586:	e046      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'f':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_ro;
 8000588:	4b2e      	ldr	r3, [pc, #184]	; (8000644 <printDataOnMatrix+0x170>)
 800058a:	4a34      	ldr	r2, [pc, #208]	; (800065c <printDataOnMatrix+0x188>)
 800058c:	601a      	str	r2, [r3, #0]
			break;
 800058e:	e042      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'g':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_ru;
 8000590:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <printDataOnMatrix+0x170>)
 8000592:	4a33      	ldr	r2, [pc, #204]	; (8000660 <printDataOnMatrix+0x18c>)
 8000594:	601a      	str	r2, [r3, #0]
			break;
 8000596:	e03e      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'h':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c1;
 8000598:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <printDataOnMatrix+0x170>)
 800059a:	4a32      	ldr	r2, [pc, #200]	; (8000664 <printDataOnMatrix+0x190>)
 800059c:	601a      	str	r2, [r3, #0]
			break;
 800059e:	e03a      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'i':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c2;
 80005a0:	4b28      	ldr	r3, [pc, #160]	; (8000644 <printDataOnMatrix+0x170>)
 80005a2:	4a31      	ldr	r2, [pc, #196]	; (8000668 <printDataOnMatrix+0x194>)
 80005a4:	601a      	str	r2, [r3, #0]
			break;
 80005a6:	e036      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'j':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c3;
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <printDataOnMatrix+0x170>)
 80005aa:	4a30      	ldr	r2, [pc, #192]	; (800066c <printDataOnMatrix+0x198>)
 80005ac:	601a      	str	r2, [r3, #0]
			break;
 80005ae:	e032      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'k':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c4;
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <printDataOnMatrix+0x170>)
 80005b2:	4a2f      	ldr	r2, [pc, #188]	; (8000670 <printDataOnMatrix+0x19c>)
 80005b4:	601a      	str	r2, [r3, #0]
			break;
 80005b6:	e02e      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'l':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r2c1;
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <printDataOnMatrix+0x170>)
 80005ba:	4a2e      	ldr	r2, [pc, #184]	; (8000674 <printDataOnMatrix+0x1a0>)
 80005bc:	601a      	str	r2, [r3, #0]
			break;
 80005be:	e02a      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'm':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r2c4;
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <printDataOnMatrix+0x170>)
 80005c2:	4a2d      	ldr	r2, [pc, #180]	; (8000678 <printDataOnMatrix+0x1a4>)
 80005c4:	601a      	str	r2, [r3, #0]
			break;
 80005c6:	e026      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'n':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r3c1;
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <printDataOnMatrix+0x170>)
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <printDataOnMatrix+0x1a8>)
 80005cc:	601a      	str	r2, [r3, #0]
			break;
 80005ce:	e022      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'o':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r3c4;
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <printDataOnMatrix+0x170>)
 80005d2:	4a2b      	ldr	r2, [pc, #172]	; (8000680 <printDataOnMatrix+0x1ac>)
 80005d4:	601a      	str	r2, [r3, #0]
			break;
 80005d6:	e01e      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'p':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c1;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <printDataOnMatrix+0x170>)
 80005da:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <printDataOnMatrix+0x1b0>)
 80005dc:	601a      	str	r2, [r3, #0]
			break;
 80005de:	e01a      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'q':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c2;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <printDataOnMatrix+0x170>)
 80005e2:	4a29      	ldr	r2, [pc, #164]	; (8000688 <printDataOnMatrix+0x1b4>)
 80005e4:	601a      	str	r2, [r3, #0]
			break;
 80005e6:	e016      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'r':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c3;
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <printDataOnMatrix+0x170>)
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <printDataOnMatrix+0x1b8>)
 80005ec:	601a      	str	r2, [r3, #0]
			break;
 80005ee:	e012      	b.n	8000616 <printDataOnMatrix+0x142>
		case 's':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c4;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <printDataOnMatrix+0x170>)
 80005f2:	4a27      	ldr	r2, [pc, #156]	; (8000690 <printDataOnMatrix+0x1bc>)
 80005f4:	601a      	str	r2, [r3, #0]
			break;
 80005f6:	e00e      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'X':
			ptr_Rgb4x4Click = &rgb4x4click_error;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <printDataOnMatrix+0x170>)
 80005fa:	4a26      	ldr	r2, [pc, #152]	; (8000694 <printDataOnMatrix+0x1c0>)
 80005fc:	601a      	str	r2, [r3, #0]
		case 'Y':
			ptr_Rgb4x4Click = &rgb4x4click_pairing;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <printDataOnMatrix+0x170>)
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <printDataOnMatrix+0x1c4>)
 8000602:	601a      	str	r2, [r3, #0]
			break;
 8000604:	e007      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'Z':
			ptr_Rgb4x4Click = &rgb4x4click_all_off;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <printDataOnMatrix+0x170>)
 8000608:	4a24      	ldr	r2, [pc, #144]	; (800069c <printDataOnMatrix+0x1c8>)
 800060a:	601a      	str	r2, [r3, #0]
			break;
 800060c:	e003      	b.n	8000616 <printDataOnMatrix+0x142>
		default:
			/* You should not be here */
			ptr_Rgb4x4Click = &rgb4x4click_error;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <printDataOnMatrix+0x170>)
 8000610:	4a20      	ldr	r2, [pc, #128]	; (8000694 <printDataOnMatrix+0x1c0>)
 8000612:	601a      	str	r2, [r3, #0]
			break;
 8000614:	bf00      	nop
	}

	/* Wait until previous DMA Transfer is Completed */
	osSemaphoreAcquire(sem_printPermissionHandle, osWaitForever);
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <printDataOnMatrix+0x1cc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f04f 31ff 	mov.w	r1, #4294967295
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fc08 	bl	8004e34 <osSemaphoreAcquire>

	/* Actually not really necessary and quite useless, just to be 101% sure*/
	taskENTER_CRITICAL();
 8000624:	f007 fa1e 	bl	8007a64 <vPortEnterCritical>

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *) ptr_Rgb4x4Click, PWM_STREAM_LENGTH_FULL_DISPLAY);
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <printDataOnMatrix+0x170>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000630:	2100      	movs	r1, #0
 8000632:	481c      	ldr	r0, [pc, #112]	; (80006a4 <printDataOnMatrix+0x1d0>)
 8000634:	f002 fc3e 	bl	8002eb4 <HAL_TIM_PWM_Start_DMA>

	taskEXIT_CRITICAL();
 8000638:	f007 fa44 	bl	8007ac4 <vPortExitCritical>

}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000090 	.word	0x20000090
 8000648:	08008324 	.word	0x08008324
 800064c:	080084a4 	.word	0x080084a4
 8000650:	08008624 	.word	0x08008624
 8000654:	08008924 	.word	0x08008924
 8000658:	080087a4 	.word	0x080087a4
 800065c:	08008c24 	.word	0x08008c24
 8000660:	08008aa4 	.word	0x08008aa4
 8000664:	08008da4 	.word	0x08008da4
 8000668:	08008f24 	.word	0x08008f24
 800066c:	080090a4 	.word	0x080090a4
 8000670:	08009224 	.word	0x08009224
 8000674:	080093a4 	.word	0x080093a4
 8000678:	08009524 	.word	0x08009524
 800067c:	080096a4 	.word	0x080096a4
 8000680:	08009824 	.word	0x08009824
 8000684:	080099a4 	.word	0x080099a4
 8000688:	08009b24 	.word	0x08009b24
 800068c:	08009ca4 	.word	0x08009ca4
 8000690:	08009e24 	.word	0x08009e24
 8000694:	08009fa4 	.word	0x08009fa4
 8000698:	0800a124 	.word	0x0800a124
 800069c:	0800a2a4 	.word	0x0800a2a4
 80006a0:	200000a0 	.word	0x200000a0
 80006a4:	200000f0 	.word	0x200000f0

080006a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_DMA_Init+0x38>)
 80006b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <MX_DMA_Init+0x38>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6493      	str	r3, [r2, #72]	; 0x48
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_DMA_Init+0x38>)
 80006bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2105      	movs	r1, #5
 80006ca:	200c      	movs	r0, #12
 80006cc:	f000 fd6a 	bl	80011a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006d0:	200c      	movs	r0, #12
 80006d2:	f000 fd83 	bl	80011dc <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000

080006e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sem_printPermission */
  sem_printPermissionHandle = osSemaphoreNew(1, 1, &sem_printPermission_attributes);
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <MX_FREERTOS_Init+0x3c>)
 80006ea:	2101      	movs	r1, #1
 80006ec:	2001      	movs	r0, #1
 80006ee:	f004 fb17 	bl	8004d20 <osSemaphoreNew>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <MX_FREERTOS_Init+0x40>)
 80006f6:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of updateScreenTimer */
  updateScreenTimerHandle = osTimerNew(updateScreenTimerCallback, osTimerPeriodic, NULL, &updateScreenTimer_attributes);
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_FREERTOS_Init+0x44>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	2101      	movs	r1, #1
 80006fe:	480b      	ldr	r0, [pc, #44]	; (800072c <MX_FREERTOS_Init+0x48>)
 8000700:	f004 fa92 	bl	8004c28 <osTimerNew>
 8000704:	4603      	mov	r3, r0
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <MX_FREERTOS_Init+0x4c>)
 8000708:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of receiverTask */
  receiverTaskHandle = osThreadNew(StartReceiverTask, NULL, &receiverTask_attributes);
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <MX_FREERTOS_Init+0x50>)
 800070c:	2100      	movs	r1, #0
 800070e:	480a      	ldr	r0, [pc, #40]	; (8000738 <MX_FREERTOS_Init+0x54>)
 8000710:	f004 f9c6 	bl	8004aa0 <osThreadNew>
 8000714:	4603      	mov	r3, r0
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <MX_FREERTOS_Init+0x58>)
 8000718:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08008314 	.word	0x08008314
 8000724:	200000a0 	.word	0x200000a0
 8000728:	08008304 	.word	0x08008304
 800072c:	08000781 	.word	0x08000781
 8000730:	2000009c 	.word	0x2000009c
 8000734:	080082e0 	.word	0x080082e0
 8000738:	08000741 	.word	0x08000741
 800073c:	20000098 	.word	0x20000098

08000740 <StartReceiverTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiverTask */
void StartReceiverTask(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

	/* TODO: Init the WiFi */
  for(;;)
  {
	  /* TODO Process WiFi Data */
	  if(updateLedMatrix && newDataAvailable)
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <StartReceiverTask+0x34>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00c      	beq.n	800076a <StartReceiverTask+0x2a>
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <StartReceiverTask+0x38>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <StartReceiverTask+0x2a>
	  {
		  updateLedMatrix = 0;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <StartReceiverTask+0x34>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
		  newDataAvailable = 1;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <StartReceiverTask+0x38>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]

		  printDataOnMatrix(&dataToPrint);
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <StartReceiverTask+0x3c>)
 8000766:	f7ff feb5 	bl	80004d4 <printDataOnMatrix>
	  }

    osDelay(1);
 800076a:	2001      	movs	r0, #1
 800076c:	f004 fa2b 	bl	8004bc6 <osDelay>
	  if(updateLedMatrix && newDataAvailable)
 8000770:	e7ea      	b.n	8000748 <StartReceiverTask+0x8>
 8000772:	bf00      	nop
 8000774:	20000094 	.word	0x20000094
 8000778:	20000095 	.word	0x20000095
 800077c:	20000096 	.word	0x20000096

08000780 <updateScreenTimerCallback>:
  /* USER CODE END StartReceiverTask */
}

/* updateScreenTimerCallback function */
void updateScreenTimerCallback(void *argument)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateScreenTimerCallback */
	updateLedMatrix = 1;
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <updateScreenTimerCallback+0x1c>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END updateScreenTimerCallback */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000094 	.word	0x20000094

080007a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_GPIO_Init+0x8c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_GPIO_Init+0x8c>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_GPIO_Init+0x8c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_GPIO_Init+0x8c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a16      	ldr	r2, [pc, #88]	; (800082c <MX_GPIO_Init+0x8c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_GPIO_Init+0x8c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_GPIO_Init+0x8c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <MX_GPIO_Init+0x8c>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_GPIO_Init+0x8c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2108      	movs	r1, #8
 8000802:	480b      	ldr	r0, [pc, #44]	; (8000830 <MX_GPIO_Init+0x90>)
 8000804:	f001 f85a 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000808:	2308      	movs	r3, #8
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_GPIO_Init+0x90>)
 8000820:	f000 fee2 	bl	80015e8 <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	48000400 	.word	0x48000400

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 fbc3 	bl	8000fc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f812 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f7ff ffae 	bl	80007a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000844:	f7ff ff30 	bl	80006a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000848:	f000 fab8 	bl	8000dbc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800084c:	f000 f964 	bl	8000b18 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000850:	f000 fa84 	bl	8000d5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000854:	f004 f8da 	bl	8004a0c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000858:	f7ff ff44 	bl	80006e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800085c:	f004 f8fa 	bl	8004a54 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000860:	e7fe      	b.n	8000860 <main+0x2c>
	...

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b096      	sub	sp, #88	; 0x58
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2244      	movs	r2, #68	; 0x44
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f007 fc36 	bl	80080e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000886:	f44f 7000 	mov.w	r0, #512	; 0x200
 800088a:	f001 f84d 	bl	8001928 <HAL_PWREx_ControlVoltageScaling>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000894:	f000 f85a 	bl	800094c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000898:	f001 f828 	bl	80018ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <SystemClock_Config+0xc0>)
 800089e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008a2:	4a20      	ldr	r2, [pc, #128]	; (8000924 <SystemClock_Config+0xc0>)
 80008a4:	f023 0318 	bic.w	r3, r3, #24
 80008a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008ac:	2314      	movs	r3, #20
 80008ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008bc:	2360      	movs	r3, #96	; 0x60
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008c4:	2301      	movs	r3, #1
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008cc:	2328      	movs	r3, #40	; 0x28
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008d0:	2307      	movs	r3, #7
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d8:	2302      	movs	r3, #2
 80008da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 f877 	bl	80019d4 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f82e 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2303      	movs	r3, #3
 80008f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	2104      	movs	r1, #4
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fc77 	bl	80021fc <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000914:	f000 f81a 	bl	800094c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000918:	f002 f8bc 	bl	8002a94 <HAL_RCCEx_EnableMSIPLLMode>
}
 800091c:	bf00      	nop
 800091e:	3758      	adds	r7, #88	; 0x58
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 fb5b 	bl	8000ff4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40014400 	.word	0x40014400

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_MspInit+0x4c>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6613      	str	r3, [r2, #96]	; 0x60
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_MspInit+0x4c>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_MspInit+0x4c>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6593      	str	r3, [r2, #88]	; 0x58
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	210f      	movs	r1, #15
 8000992:	f06f 0001 	mvn.w	r0, #1
 8000996:	f000 fc05 	bl	80011a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80009b6:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <HAL_InitTick+0xc8>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	4a2d      	ldr	r2, [pc, #180]	; (8000a70 <HAL_InitTick+0xc8>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	6613      	str	r3, [r2, #96]	; 0x60
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <HAL_InitTick+0xc8>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ce:	f107 020c 	add.w	r2, r7, #12
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fdd3 	bl	8002584 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009de:	f001 fdbb 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 80009e2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e6:	4a23      	ldr	r2, [pc, #140]	; (8000a74 <HAL_InitTick+0xcc>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	0c9b      	lsrs	r3, r3, #18
 80009ee:	3b01      	subs	r3, #1
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <HAL_InitTick+0xd0>)
 80009f4:	4a21      	ldr	r2, [pc, #132]	; (8000a7c <HAL_InitTick+0xd4>)
 80009f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <HAL_InitTick+0xd0>)
 80009fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009fe:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <HAL_InitTick+0xd0>)
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_InitTick+0xd0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_InitTick+0xd0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_InitTick+0xd0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8000a18:	4817      	ldr	r0, [pc, #92]	; (8000a78 <HAL_InitTick+0xd0>)
 8000a1a:	f002 f93d 	bl	8002c98 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d11b      	bne.n	8000a64 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000a2c:	4812      	ldr	r0, [pc, #72]	; (8000a78 <HAL_InitTick+0xd0>)
 8000a2e:	f002 f995 	bl	8002d5c <HAL_TIM_Base_Start_IT>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d111      	bne.n	8000a64 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a40:	2019      	movs	r0, #25
 8000a42:	f000 fbcb 	bl	80011dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d808      	bhi.n	8000a5e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	2019      	movs	r0, #25
 8000a52:	f000 fba7 	bl	80011a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <HAL_InitTick+0xd8>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	e002      	b.n	8000a64 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3730      	adds	r7, #48	; 0x30
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000
 8000a74:	431bde83 	.word	0x431bde83
 8000a78:	200000a4 	.word	0x200000a4
 8000a7c:	40014400 	.word	0x40014400
 8000a80:	20000004 	.word	0x20000004

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <DMA1_Channel2_IRQHandler+0x10>)
 8000ab6:	f000 fcb7 	bl	8001428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000013c 	.word	0x2000013c

08000ac4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac8:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000aca:	f002 fbeb 	bl	80032a4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000ad0:	f002 fbe8 	bl	80032a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000f0 	.word	0x200000f0
 8000adc:	200000a4 	.word	0x200000a4

08000ae0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <TIM1_CC_IRQHandler+0x10>)
 8000ae6:	f002 fbdd 	bl	80032a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000f0 	.word	0x200000f0

08000af4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b096      	sub	sp, #88	; 0x58
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
 8000b3a:	615a      	str	r2, [r3, #20]
 8000b3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	222c      	movs	r2, #44	; 0x2c
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f007 facd 	bl	80080e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b4a:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000b4c:	4a38      	ldr	r2, [pc, #224]	; (8000c30 <MX_TIM1_Init+0x118>)
 8000b4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b50:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000b5c:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000b5e:	2264      	movs	r2, #100	; 0x64
 8000b60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b62:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000b70:	2280      	movs	r2, #128	; 0x80
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b74:	482d      	ldr	r0, [pc, #180]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000b76:	f002 f945 	bl	8002e04 <HAL_TIM_PWM_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000b80:	f7ff fee4 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b94:	4619      	mov	r1, r3
 8000b96:	4825      	ldr	r0, [pc, #148]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000b98:	f003 f9ce 	bl	8003f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ba2:	f7ff fed3 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba6:	2360      	movs	r3, #96	; 0x60
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8000baa:	2364      	movs	r3, #100	; 0x64
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4818      	ldr	r0, [pc, #96]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000bcc:	f002 fc8a 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000bd6:	f7ff feb9 	bl	800094c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000c10:	f003 f9f8 	bl	8004004 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000c1a:	f7ff fe97 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <MX_TIM1_Init+0x114>)
 8000c20:	f000 f864 	bl	8000cec <HAL_TIM_MspPostInit>

}
 8000c24:	bf00      	nop
 8000c26:	3758      	adds	r7, #88	; 0x58
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200000f0 	.word	0x200000f0
 8000c30:	40012c00 	.word	0x40012c00

08000c34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a26      	ldr	r2, [pc, #152]	; (8000cdc <HAL_TIM_PWM_MspInit+0xa8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d146      	bne.n	8000cd4 <HAL_TIM_PWM_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <HAL_TIM_PWM_MspInit+0xac>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	4a25      	ldr	r2, [pc, #148]	; (8000ce0 <HAL_TIM_PWM_MspInit+0xac>)
 8000c4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c50:	6613      	str	r3, [r2, #96]	; 0x60
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <HAL_TIM_PWM_MspInit+0xac>)
 8000c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000c62:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c66:	2207      	movs	r2, #7
 8000c68:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c6c:	2210      	movs	r2, #16
 8000c6e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c82:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c92:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000c98:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c9a:	f000 faad 	bl	80011f8 <HAL_DMA_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8000ca4:	f7ff fe52 	bl	800094c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
 8000cae:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	2019      	movs	r0, #25
 8000cba:	f000 fa73 	bl	80011a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cbe:	2019      	movs	r0, #25
 8000cc0:	f000 fa8c 	bl	80011dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2105      	movs	r1, #5
 8000cc8:	201b      	movs	r0, #27
 8000cca:	f000 fa6b 	bl	80011a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000cce:	201b      	movs	r0, #27
 8000cd0:	f000 fa84 	bl	80011dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40012c00 	.word	0x40012c00
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	2000013c 	.word	0x2000013c
 8000ce8:	4002001c 	.word	0x4002001c

08000cec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <HAL_TIM_MspPostInit+0x68>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d11d      	bne.n	8000d4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d30:	2302      	movs	r3, #2
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d46:	f000 fc4f 	bl	80015e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40012c00 	.word	0x40012c00
 8000d58:	40021000 	.word	0x40021000

08000d5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_USART1_UART_Init+0x58>)
 8000d62:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <MX_USART1_UART_Init+0x5c>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_USART1_UART_Init+0x58>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_USART1_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_USART1_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_USART1_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_USART1_UART_Init+0x58>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_USART1_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_USART1_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_USART1_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_USART1_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_USART1_UART_Init+0x58>)
 8000da0:	f003 f9c6 	bl	8004130 <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000daa:	f7ff fdcf 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000184 	.word	0x20000184
 8000db8:	40013800 	.word	0x40013800

08000dbc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc2:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <MX_USART2_UART_Init+0x5c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_USART2_UART_Init+0x58>)
 8000e00:	f003 f996 	bl	8004130 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e0a:	f7ff fd9f 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000208 	.word	0x20000208
 8000e18:	40004400 	.word	0x40004400

08000e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0a0      	sub	sp, #128	; 0x80
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e34:	f107 0318 	add.w	r3, r7, #24
 8000e38:	2254      	movs	r2, #84	; 0x54
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f007 f951 	bl	80080e4 <memset>
  if(uartHandle->Instance==USART1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a47      	ldr	r2, [pc, #284]	; (8000f64 <HAL_UART_MspInit+0x148>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d138      	bne.n	8000ebe <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fc25 	bl	80026a8 <HAL_RCCEx_PeriphCLKConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e64:	f7ff fd72 	bl	800094c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e68:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6c:	4a3e      	ldr	r2, [pc, #248]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e72:	6613      	str	r3, [r2, #96]	; 0x60
 8000e74:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e84:	4a38      	ldr	r2, [pc, #224]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8c:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e98:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f000 fb96 	bl	80015e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ebc:	e04d      	b.n	8000f5a <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a2a      	ldr	r2, [pc, #168]	; (8000f6c <HAL_UART_MspInit+0x150>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d148      	bne.n	8000f5a <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed0:	f107 0318 	add.w	r3, r7, #24
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fbe7 	bl	80026a8 <HAL_RCCEx_PeriphCLKConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000ee0:	f7ff fd34 	bl	800094c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee8:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eee:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0x14c>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f14:	2304      	movs	r3, #4
 8000f16:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f24:	2307      	movs	r3, #7
 8000f26:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f32:	f000 fb59 	bl	80015e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f000 fb47 	bl	80015e8 <HAL_GPIO_Init>
}
 8000f5a:	bf00      	nop
 8000f5c:	3780      	adds	r7, #128	; 0x80
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40013800 	.word	0x40013800
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40004400 	.word	0x40004400

08000f70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f74:	f7ff fdbe 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	; (8000fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <LoopForever+0xe>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	; (8000fbc <LoopForever+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f007 f86d 	bl	800807c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa2:	f7ff fc47 	bl	8000834 <main>

08000fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fa6:	e7fe      	b.n	8000fa6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fb4:	0800a4dc 	.word	0x0800a4dc
  ldr r2, =_sbss
 8000fb8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fbc:	20003db8 	.word	0x20003db8

08000fc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_IRQHandler>

08000fc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f8de 	bl	800118e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f7ff fce8 	bl	80009a8 <HAL_InitTick>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	e001      	b.n	8000fe8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fe4:	f7ff fcb8 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	2000028c 	.word	0x2000028c

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2000028c 	.word	0x2000028c

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4907      	ldr	r1, [pc, #28]	; (80010d0 <__NVIC_EnableIRQ+0x38>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff4c 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b6:	f7ff ff61 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	6978      	ldr	r0, [r7, #20]
 80011c2:	f7ff ffb1 	bl	8001128 <NVIC_EncodePriority>
 80011c6:	4602      	mov	r2, r0
 80011c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff80 	bl	80010d4 <__NVIC_SetPriority>
}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff54 	bl	8001098 <__NVIC_EnableIRQ>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e098      	b.n	800133c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <HAL_DMA_Init+0x150>)
 8001212:	429a      	cmp	r2, r3
 8001214:	d80f      	bhi.n	8001236 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	4b4b      	ldr	r3, [pc, #300]	; (800134c <HAL_DMA_Init+0x154>)
 800121e:	4413      	add	r3, r2
 8001220:	4a4b      	ldr	r2, [pc, #300]	; (8001350 <HAL_DMA_Init+0x158>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	009a      	lsls	r2, r3, #2
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a48      	ldr	r2, [pc, #288]	; (8001354 <HAL_DMA_Init+0x15c>)
 8001232:	641a      	str	r2, [r3, #64]	; 0x40
 8001234:	e00e      	b.n	8001254 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	4b46      	ldr	r3, [pc, #280]	; (8001358 <HAL_DMA_Init+0x160>)
 800123e:	4413      	add	r3, r2
 8001240:	4a43      	ldr	r2, [pc, #268]	; (8001350 <HAL_DMA_Init+0x158>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	009a      	lsls	r2, r3, #2
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a42      	ldr	r2, [pc, #264]	; (800135c <HAL_DMA_Init+0x164>)
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800126a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800126e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012ae:	d039      	beq.n	8001324 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <HAL_DMA_Init+0x15c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d11a      	bne.n	80012f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012ba:	4b29      	ldr	r3, [pc, #164]	; (8001360 <HAL_DMA_Init+0x168>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f003 031c 	and.w	r3, r3, #28
 80012c6:	210f      	movs	r1, #15
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4924      	ldr	r1, [pc, #144]	; (8001360 <HAL_DMA_Init+0x168>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <HAL_DMA_Init+0x168>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6859      	ldr	r1, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	f003 031c 	and.w	r3, r3, #28
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	491d      	ldr	r1, [pc, #116]	; (8001360 <HAL_DMA_Init+0x168>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
 80012ee:	e019      	b.n	8001324 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <HAL_DMA_Init+0x16c>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	f003 031c 	and.w	r3, r3, #28
 80012fc:	210f      	movs	r1, #15
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	4917      	ldr	r1, [pc, #92]	; (8001364 <HAL_DMA_Init+0x16c>)
 8001306:	4013      	ands	r3, r2
 8001308:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_DMA_Init+0x16c>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6859      	ldr	r1, [r3, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f003 031c 	and.w	r3, r3, #28
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	4911      	ldr	r1, [pc, #68]	; (8001364 <HAL_DMA_Init+0x16c>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40020407 	.word	0x40020407
 800134c:	bffdfff8 	.word	0xbffdfff8
 8001350:	cccccccd 	.word	0xcccccccd
 8001354:	40020000 	.word	0x40020000
 8001358:	bffdfbf8 	.word	0xbffdfbf8
 800135c:	40020400 	.word	0x40020400
 8001360:	400200a8 	.word	0x400200a8
 8001364:	400204a8 	.word	0x400204a8

08001368 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_DMA_Start_IT+0x20>
 8001384:	2302      	movs	r3, #2
 8001386:	e04b      	b.n	8001420 <HAL_DMA_Start_IT+0xb8>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d13a      	bne.n	8001412 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0201 	bic.w	r2, r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f8e0 	bl	8001586 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 020e 	orr.w	r2, r2, #14
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e00f      	b.n	8001400 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0204 	bic.w	r2, r2, #4
 80013ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 020a 	orr.w	r2, r2, #10
 80013fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e005      	b.n	800141e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800141a:	2302      	movs	r3, #2
 800141c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800141e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001444:	f003 031c 	and.w	r3, r3, #28
 8001448:	2204      	movs	r2, #4
 800144a:	409a      	lsls	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4013      	ands	r3, r2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d026      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x7a>
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	2b00      	cmp	r3, #0
 800145c:	d021      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0320 	and.w	r3, r3, #32
 8001468:	2b00      	cmp	r3, #0
 800146a:	d107      	bne.n	800147c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0204 	bic.w	r2, r2, #4
 800147a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	f003 021c 	and.w	r2, r3, #28
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	2104      	movs	r1, #4
 800148a:	fa01 f202 	lsl.w	r2, r1, r2
 800148e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	2b00      	cmp	r3, #0
 8001496:	d071      	beq.n	800157c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80014a0:	e06c      	b.n	800157c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f003 031c 	and.w	r3, r3, #28
 80014aa:	2202      	movs	r2, #2
 80014ac:	409a      	lsls	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d02e      	beq.n	8001514 <HAL_DMA_IRQHandler+0xec>
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d029      	beq.n	8001514 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10b      	bne.n	80014e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 020a 	bic.w	r2, r2, #10
 80014dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f003 021c 	and.w	r2, r3, #28
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	2102      	movs	r1, #2
 80014f4:	fa01 f202 	lsl.w	r2, r1, r2
 80014f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	2b00      	cmp	r3, #0
 8001508:	d038      	beq.n	800157c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001512:	e033      	b.n	800157c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	f003 031c 	and.w	r3, r3, #28
 800151c:	2208      	movs	r2, #8
 800151e:	409a      	lsls	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d02a      	beq.n	800157e <HAL_DMA_IRQHandler+0x156>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d025      	beq.n	800157e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 020e 	bic.w	r2, r2, #14
 8001540:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f003 021c 	and.w	r2, r3, #28
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800157c:	bf00      	nop
 800157e:	bf00      	nop
}
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001586:	b480      	push	{r7}
 8001588:	b085      	sub	sp, #20
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	f003 021c 	and.w	r2, r3, #28
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	2101      	movs	r1, #1
 80015a2:	fa01 f202 	lsl.w	r2, r1, r2
 80015a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b10      	cmp	r3, #16
 80015b6:	d108      	bne.n	80015ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015c8:	e007      	b.n	80015da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	60da      	str	r2, [r3, #12]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f6:	e148      	b.n	800188a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	4013      	ands	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 813a 	beq.w	8001884 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d005      	beq.n	8001628 <HAL_GPIO_Init+0x40>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d130      	bne.n	800168a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800165e:	2201      	movs	r2, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	f003 0201 	and.w	r2, r3, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b03      	cmp	r3, #3
 8001694:	d017      	beq.n	80016c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	2203      	movs	r2, #3
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d123      	bne.n	800171a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	08da      	lsrs	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3208      	adds	r2, #8
 80016da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	220f      	movs	r2, #15
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	08da      	lsrs	r2, r3, #3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3208      	adds	r2, #8
 8001714:	6939      	ldr	r1, [r7, #16]
 8001716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0203 	and.w	r2, r3, #3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8094 	beq.w	8001884 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175c:	4b52      	ldr	r3, [pc, #328]	; (80018a8 <HAL_GPIO_Init+0x2c0>)
 800175e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001760:	4a51      	ldr	r2, [pc, #324]	; (80018a8 <HAL_GPIO_Init+0x2c0>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6613      	str	r3, [r2, #96]	; 0x60
 8001768:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <HAL_GPIO_Init+0x2c0>)
 800176a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001774:	4a4d      	ldr	r2, [pc, #308]	; (80018ac <HAL_GPIO_Init+0x2c4>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800179e:	d00d      	beq.n	80017bc <HAL_GPIO_Init+0x1d4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a43      	ldr	r2, [pc, #268]	; (80018b0 <HAL_GPIO_Init+0x2c8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d007      	beq.n	80017b8 <HAL_GPIO_Init+0x1d0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <HAL_GPIO_Init+0x2cc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d101      	bne.n	80017b4 <HAL_GPIO_Init+0x1cc>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e004      	b.n	80017be <HAL_GPIO_Init+0x1d6>
 80017b4:	2307      	movs	r3, #7
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x1d6>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_GPIO_Init+0x1d6>
 80017bc:	2300      	movs	r3, #0
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	f002 0203 	and.w	r2, r2, #3
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	4093      	lsls	r3, r2
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ce:	4937      	ldr	r1, [pc, #220]	; (80018ac <HAL_GPIO_Init+0x2c4>)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001800:	4a2d      	ldr	r2, [pc, #180]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800182a:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001854:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	f47f aeaf 	bne.w	80015f8 <HAL_GPIO_Init+0x10>
  }
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000800 	.word	0x48000800
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40007000 	.word	0x40007000

0800190c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <HAL_PWREx_GetVoltageRange+0x18>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40007000 	.word	0x40007000

08001928 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001936:	d130      	bne.n	800199a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001944:	d038      	beq.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2232      	movs	r2, #50	; 0x32
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0c9b      	lsrs	r3, r3, #18
 8001968:	3301      	adds	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196c:	e002      	b.n	8001974 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3b01      	subs	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001980:	d102      	bne.n	8001988 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f2      	bne.n	800196e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001994:	d110      	bne.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e00f      	b.n	80019ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a6:	d007      	beq.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b0:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40007000 	.word	0x40007000
 80019cc:	20000000 	.word	0x20000000
 80019d0:	431bde83 	.word	0x431bde83

080019d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	f000 bc02 	b.w	80021ec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e8:	4b96      	ldr	r3, [pc, #600]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f2:	4b94      	ldr	r3, [pc, #592]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80e4 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_RCC_OscConfig+0x4c>
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	f040 808b 	bne.w	8001b2e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	f040 8087 	bne.w	8001b2e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a20:	4b88      	ldr	r3, [pc, #544]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_OscConfig+0x64>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e3d9      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	4b81      	ldr	r3, [pc, #516]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d004      	beq.n	8001a52 <HAL_RCC_OscConfig+0x7e>
 8001a48:	4b7e      	ldr	r3, [pc, #504]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a50:	e005      	b.n	8001a5e <HAL_RCC_OscConfig+0x8a>
 8001a52:	4b7c      	ldr	r3, [pc, #496]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d223      	bcs.n	8001aaa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 fdbe 	bl	80025e8 <RCC_SetFlashLatencyFromMSIRange>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e3ba      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a76:	4b73      	ldr	r3, [pc, #460]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a72      	ldr	r2, [pc, #456]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b70      	ldr	r3, [pc, #448]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	496d      	ldr	r1, [pc, #436]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a94:	4b6b      	ldr	r3, [pc, #428]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	4968      	ldr	r1, [pc, #416]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e025      	b.n	8001af6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aaa:	4b66      	ldr	r3, [pc, #408]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a65      	ldr	r2, [pc, #404]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b63      	ldr	r3, [pc, #396]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4960      	ldr	r1, [pc, #384]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac8:	4b5e      	ldr	r3, [pc, #376]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	495b      	ldr	r1, [pc, #364]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fd7e 	bl	80025e8 <RCC_SetFlashLatencyFromMSIRange>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e37a      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001af6:	f000 fc81 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8001afa:	4602      	mov	r2, r0
 8001afc:	4b51      	ldr	r3, [pc, #324]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	4950      	ldr	r1, [pc, #320]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	4a4e      	ldr	r2, [pc, #312]	; (8001c4c <HAL_RCC_OscConfig+0x278>)
 8001b14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b16:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <HAL_RCC_OscConfig+0x27c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe ff44 	bl	80009a8 <HAL_InitTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d052      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	e35e      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d032      	beq.n	8001b9c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a42      	ldr	r2, [pc, #264]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fa6b 	bl	800101c <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fa67 	bl	800101c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e347      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b5c:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b68:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a35      	ldr	r2, [pc, #212]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	f043 0308 	orr.w	r3, r3, #8
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4930      	ldr	r1, [pc, #192]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	492b      	ldr	r1, [pc, #172]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
 8001b9a:	e01a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fa38 	bl	800101c <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fa34 	bl	800101c <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e314      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x1dc>
 8001bce:	e000      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d073      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x21c>
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d10e      	bne.n	8001c08 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d10b      	bne.n	8001c08 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d063      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x2f0>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d15f      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e2f1      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c10:	d106      	bne.n	8001c20 <HAL_RCC_OscConfig+0x24c>
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e025      	b.n	8001c6c <HAL_RCC_OscConfig+0x298>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c28:	d114      	bne.n	8001c54 <HAL_RCC_OscConfig+0x280>
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a02      	ldr	r2, [pc, #8]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e013      	b.n	8001c6c <HAL_RCC_OscConfig+0x298>
 8001c44:	40021000 	.word	0x40021000
 8001c48:	0800a424 	.word	0x0800a424
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000004 	.word	0x20000004
 8001c54:	4ba0      	ldr	r3, [pc, #640]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a9f      	ldr	r2, [pc, #636]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b9d      	ldr	r3, [pc, #628]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a9c      	ldr	r2, [pc, #624]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff f9d2 	bl	800101c <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff f9ce 	bl	800101c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e2ae      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8e:	4b92      	ldr	r3, [pc, #584]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x2a8>
 8001c9a:	e014      	b.n	8001cc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f9be 	bl	800101c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff f9ba 	bl	800101c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e29a      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cb6:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x2d0>
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d060      	beq.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x310>
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b0c      	cmp	r3, #12
 8001cdc:	d119      	bne.n	8001d12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d116      	bne.n	8001d12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce4:	4b7c      	ldr	r3, [pc, #496]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_OscConfig+0x328>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e277      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	061b      	lsls	r3, r3, #24
 8001d0a:	4973      	ldr	r1, [pc, #460]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d10:	e040      	b.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d023      	beq.n	8001d62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d1a:	4b6f      	ldr	r3, [pc, #444]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6e      	ldr	r2, [pc, #440]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff f979 	bl	800101c <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff f975 	bl	800101c <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e255      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d40:	4b65      	ldr	r3, [pc, #404]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4c:	4b62      	ldr	r3, [pc, #392]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	061b      	lsls	r3, r3, #24
 8001d5a:	495f      	ldr	r1, [pc, #380]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
 8001d60:	e018      	b.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d62:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a5c      	ldr	r2, [pc, #368]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f955 	bl	800101c <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff f951 	bl	800101c <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e231      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d88:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f0      	bne.n	8001d76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d03c      	beq.n	8001e1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01c      	beq.n	8001de2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dae:	4a4a      	ldr	r2, [pc, #296]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff f930 	bl	800101c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f92c 	bl	800101c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e20c      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dd2:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0ef      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x3ec>
 8001de0:	e01b      	b.n	8001e1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de8:	4a3b      	ldr	r2, [pc, #236]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001dea:	f023 0301 	bic.w	r3, r3, #1
 8001dee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df2:	f7ff f913 	bl	800101c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfa:	f7ff f90f 	bl	800101c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e1ef      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1ef      	bne.n	8001dfa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80a6 	beq.w	8001f74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10d      	bne.n	8001e54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	4a26      	ldr	r2, [pc, #152]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e42:	6593      	str	r3, [r2, #88]	; 0x58
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e50:	2301      	movs	r3, #1
 8001e52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_RCC_OscConfig+0x508>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d118      	bne.n	8001e92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCC_OscConfig+0x508>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_RCC_OscConfig+0x508>)
 8001e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f8d6 	bl	800101c <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e74:	f7ff f8d2 	bl	800101c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1b2      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_RCC_OscConfig+0x508>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d108      	bne.n	8001eac <HAL_RCC_OscConfig+0x4d8>
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eaa:	e029      	b.n	8001f00 <HAL_RCC_OscConfig+0x52c>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	d115      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x50c>
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eba:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eca:	4a03      	ldr	r2, [pc, #12]	; (8001ed8 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ed4:	e014      	b.n	8001f00 <HAL_RCC_OscConfig+0x52c>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	4b9a      	ldr	r3, [pc, #616]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee6:	4a99      	ldr	r2, [pc, #612]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef0:	4b96      	ldr	r3, [pc, #600]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	4a95      	ldr	r2, [pc, #596]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d016      	beq.n	8001f36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff f888 	bl	800101c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	f7ff f884 	bl	800101c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e162      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f26:	4b89      	ldr	r3, [pc, #548]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ed      	beq.n	8001f10 <HAL_RCC_OscConfig+0x53c>
 8001f34:	e015      	b.n	8001f62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7ff f871 	bl	800101c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7ff f86d 	bl	800101c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e14b      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f54:	4b7d      	ldr	r3, [pc, #500]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ed      	bne.n	8001f3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f62:	7ffb      	ldrb	r3, [r7, #31]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f68:	4b78      	ldr	r3, [pc, #480]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	4a77      	ldr	r2, [pc, #476]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d03c      	beq.n	8001ffa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01c      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f88:	4b70      	ldr	r3, [pc, #448]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f8e:	4a6f      	ldr	r2, [pc, #444]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff f840 	bl	800101c <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fa0:	f7ff f83c 	bl	800101c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e11c      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fb2:	4b66      	ldr	r3, [pc, #408]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ef      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x5cc>
 8001fc0:	e01b      	b.n	8001ffa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fc2:	4b62      	ldr	r3, [pc, #392]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fc8:	4a60      	ldr	r2, [pc, #384]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd2:	f7ff f823 	bl	800101c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fda:	f7ff f81f 	bl	800101c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0ff      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fec:	4b57      	ldr	r3, [pc, #348]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8001fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ef      	bne.n	8001fda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80f3 	beq.w	80021ea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	2b02      	cmp	r3, #2
 800200a:	f040 80c9 	bne.w	80021a0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800200e:	4b4f      	ldr	r3, [pc, #316]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0203 	and.w	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	429a      	cmp	r2, r3
 8002020:	d12c      	bne.n	800207c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	3b01      	subs	r3, #1
 800202e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d123      	bne.n	800207c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d11b      	bne.n	800207c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d113      	bne.n	800207c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	3b01      	subs	r3, #1
 8002062:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d109      	bne.n	800207c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	085b      	lsrs	r3, r3, #1
 8002074:	3b01      	subs	r3, #1
 8002076:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d06b      	beq.n	8002154 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d062      	beq.n	8002148 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002082:	4b32      	ldr	r3, [pc, #200]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0ac      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002092:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a2d      	ldr	r2, [pc, #180]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8002098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800209e:	f7fe ffbd 	bl	800101c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe ffb9 	bl	800101c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e099      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b8:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_RCC_OscConfig+0x778>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_RCC_OscConfig+0x778>)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4b21      	ldr	r3, [pc, #132]	; (8002150 <HAL_RCC_OscConfig+0x77c>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020d4:	3a01      	subs	r2, #1
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	4311      	orrs	r1, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020de:	0212      	lsls	r2, r2, #8
 80020e0:	4311      	orrs	r1, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020e6:	0852      	lsrs	r2, r2, #1
 80020e8:	3a01      	subs	r2, #1
 80020ea:	0552      	lsls	r2, r2, #21
 80020ec:	4311      	orrs	r1, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020f2:	0852      	lsrs	r2, r2, #1
 80020f4:	3a01      	subs	r2, #1
 80020f6:	0652      	lsls	r2, r2, #25
 80020f8:	4311      	orrs	r1, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020fe:	06d2      	lsls	r2, r2, #27
 8002100:	430a      	orrs	r2, r1
 8002102:	4912      	ldr	r1, [pc, #72]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8002104:	4313      	orrs	r3, r2
 8002106:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_RCC_OscConfig+0x778>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <HAL_RCC_OscConfig+0x778>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_RCC_OscConfig+0x778>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a0c      	ldr	r2, [pc, #48]	; (800214c <HAL_RCC_OscConfig+0x778>)
 800211a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002120:	f7fe ff7c 	bl	800101c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7fe ff78 	bl	800101c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e058      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <HAL_RCC_OscConfig+0x778>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002146:	e050      	b.n	80021ea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e04f      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
 800214c:	40021000 	.word	0x40021000
 8002150:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x820>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d144      	bne.n	80021ea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002160:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_RCC_OscConfig+0x820>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <HAL_RCC_OscConfig+0x820>)
 8002166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800216c:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <HAL_RCC_OscConfig+0x820>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a20      	ldr	r2, [pc, #128]	; (80021f4 <HAL_RCC_OscConfig+0x820>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002176:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002178:	f7fe ff50 	bl	800101c <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002180:	f7fe ff4c 	bl	800101c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e02c      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_RCC_OscConfig+0x820>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x7ac>
 800219e:	e024      	b.n	80021ea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	d01f      	beq.n	80021e6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_RCC_OscConfig+0x820>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_RCC_OscConfig+0x820>)
 80021ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe ff33 	bl	800101c <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe ff2f 	bl	800101c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e00f      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_OscConfig+0x820>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_RCC_OscConfig+0x820>)
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	4905      	ldr	r1, [pc, #20]	; (80021f4 <HAL_RCC_OscConfig+0x820>)
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_OscConfig+0x824>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	60cb      	str	r3, [r1, #12]
 80021e4:	e001      	b.n	80021ea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	feeefffc 	.word	0xfeeefffc

080021fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0e7      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002210:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d910      	bls.n	8002240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b72      	ldr	r3, [pc, #456]	; (80023e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 0207 	bic.w	r2, r3, #7
 8002226:	4970      	ldr	r1, [pc, #448]	; (80023e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b6e      	ldr	r3, [pc, #440]	; (80023e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0cf      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d010      	beq.n	800226e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b66      	ldr	r3, [pc, #408]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002258:	429a      	cmp	r2, r3
 800225a:	d908      	bls.n	800226e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225c:	4b63      	ldr	r3, [pc, #396]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4960      	ldr	r1, [pc, #384]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d04c      	beq.n	8002314 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002282:	4b5a      	ldr	r3, [pc, #360]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d121      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0a6      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d107      	bne.n	80022aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229a:	4b54      	ldr	r3, [pc, #336]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d115      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e09a      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022b2:	4b4e      	ldr	r3, [pc, #312]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e08e      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c2:	4b4a      	ldr	r3, [pc, #296]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e086      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b46      	ldr	r3, [pc, #280]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4943      	ldr	r1, [pc, #268]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e4:	f7fe fe9a 	bl	800101c <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7fe fe96 	bl	800101c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e06e      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	429a      	cmp	r2, r3
 8002312:	d1eb      	bne.n	80022ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	4b31      	ldr	r3, [pc, #196]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800232c:	429a      	cmp	r2, r3
 800232e:	d208      	bcs.n	8002342 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	492b      	ldr	r1, [pc, #172]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d210      	bcs.n	8002372 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 0207 	bic.w	r2, r3, #7
 8002358:	4923      	ldr	r1, [pc, #140]	; (80023e8 <HAL_RCC_ClockConfig+0x1ec>)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	4313      	orrs	r3, r2
 800235e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e036      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	4918      	ldr	r1, [pc, #96]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 800238c:	4313      	orrs	r3, r2
 800238e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4910      	ldr	r1, [pc, #64]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023b0:	f000 f824 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	490b      	ldr	r1, [pc, #44]	; (80023f0 <HAL_RCC_ClockConfig+0x1f4>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_ClockConfig+0x1fc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fae7 	bl	80009a8 <HAL_InitTick>
 80023da:	4603      	mov	r3, r0
 80023dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80023de:	7afb      	ldrb	r3, [r7, #11]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40021000 	.word	0x40021000
 80023f0:	0800a424 	.word	0x0800a424
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240a:	4b3e      	ldr	r3, [pc, #248]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002414:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x34>
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d121      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d11e      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002430:	4b34      	ldr	r3, [pc, #208]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800243c:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e005      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002458:	4a2b      	ldr	r2, [pc, #172]	; (8002508 <HAL_RCC_GetSysClockFreq+0x10c>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002460:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10d      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b04      	cmp	r3, #4
 8002472:	d102      	bne.n	800247a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002474:	4b25      	ldr	r3, [pc, #148]	; (800250c <HAL_RCC_GetSysClockFreq+0x110>)
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	e004      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b08      	cmp	r3, #8
 800247e:	d101      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <HAL_RCC_GetSysClockFreq+0x114>)
 8002482:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d134      	bne.n	80024f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800248a:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d003      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0xac>
 80024a0:	e005      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_RCC_GetSysClockFreq+0x110>)
 80024a4:	617b      	str	r3, [r7, #20]
      break;
 80024a6:	e005      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_RCC_GetSysClockFreq+0x114>)
 80024aa:	617b      	str	r3, [r7, #20]
      break;
 80024ac:	e002      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	617b      	str	r3, [r7, #20]
      break;
 80024b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	3301      	adds	r3, #1
 80024c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	fb03 f202 	mul.w	r2, r3, r2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	0e5b      	lsrs	r3, r3, #25
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	3301      	adds	r3, #1
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024f4:	69bb      	ldr	r3, [r7, #24]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	0800a43c 	.word	0x0800a43c
 800250c:	00f42400 	.word	0x00f42400
 8002510:	007a1200 	.word	0x007a1200

08002514 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_RCC_GetHCLKFreq+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000

0800252c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002530:	f7ff fff0 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4904      	ldr	r1, [pc, #16]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	0800a434 	.word	0x0800a434

08002558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800255c:	f7ff ffda 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002560:	4602      	mov	r2, r0
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	0adb      	lsrs	r3, r3, #11
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	4904      	ldr	r1, [pc, #16]	; (8002580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800256e:	5ccb      	ldrb	r3, [r1, r3]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	0800a434 	.word	0x0800a434

08002584 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	220f      	movs	r2, #15
 8002592:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0203 	and.w	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_RCC_GetClockConfig+0x5c>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCC_GetClockConfig+0x5c>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_GetClockConfig+0x5c>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	08db      	lsrs	r3, r3, #3
 80025be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <HAL_RCC_GetClockConfig+0x60>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0207 	and.w	r2, r3, #7
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	601a      	str	r2, [r3, #0]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40022000 	.word	0x40022000

080025e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025f4:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002600:	f7ff f984 	bl	800190c <HAL_PWREx_GetVoltageRange>
 8002604:	6178      	str	r0, [r7, #20]
 8002606:	e014      	b.n	8002632 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	4a24      	ldr	r2, [pc, #144]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	6593      	str	r3, [r2, #88]	; 0x58
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002620:	f7ff f974 	bl	800190c <HAL_PWREx_GetVoltageRange>
 8002624:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002630:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002638:	d10b      	bne.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b80      	cmp	r3, #128	; 0x80
 800263e:	d919      	bls.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2ba0      	cmp	r3, #160	; 0xa0
 8002644:	d902      	bls.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002646:	2302      	movs	r3, #2
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	e013      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800264c:	2301      	movs	r3, #1
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	e010      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b80      	cmp	r3, #128	; 0x80
 8002656:	d902      	bls.n	800265e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002658:	2303      	movs	r3, #3
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	e00a      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d102      	bne.n	800266a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002664:	2302      	movs	r3, #2
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	e004      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b70      	cmp	r3, #112	; 0x70
 800266e:	d101      	bne.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002670:	2301      	movs	r3, #1
 8002672:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 0207 	bic.w	r2, r3, #7
 800267c:	4909      	ldr	r1, [pc, #36]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40022000 	.word	0x40022000

080026a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026b0:	2300      	movs	r3, #0
 80026b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b4:	2300      	movs	r3, #0
 80026b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d031      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026cc:	d01a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80026ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026d2:	d814      	bhi.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026dc:	d10f      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4a5c      	ldr	r2, [pc, #368]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ea:	e00c      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3304      	adds	r3, #4
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f9de 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 80026f8:	4603      	mov	r3, r0
 80026fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026fc:	e003      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	74fb      	strb	r3, [r7, #19]
      break;
 8002702:	e000      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800270c:	4b51      	ldr	r3, [pc, #324]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	494e      	ldr	r1, [pc, #312]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002722:	e001      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 809e 	beq.w	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800273a:	4b46      	ldr	r3, [pc, #280]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800274a:	2300      	movs	r3, #0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00d      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	4b40      	ldr	r3, [pc, #256]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	4a3f      	ldr	r2, [pc, #252]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275a:	6593      	str	r3, [r2, #88]	; 0x58
 800275c:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002768:	2301      	movs	r3, #1
 800276a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a39      	ldr	r2, [pc, #228]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002776:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002778:	f7fe fc50 	bl	800101c <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800277e:	e009      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002780:	f7fe fc4c 	bl	800101c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d902      	bls.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	74fb      	strb	r3, [r7, #19]
        break;
 8002792:	e005      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ef      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d15a      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a6:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01e      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d019      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ee:	4a19      	ldr	r2, [pc, #100]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d016      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fc0c 	bl	800101c <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002806:	e00b      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fc08 	bl	800101c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d902      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	74fb      	strb	r3, [r7, #19]
            break;
 800281e:	e006      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ec      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10b      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002842:	4904      	ldr	r1, [pc, #16]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800284a:	e009      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800284c:	7cfb      	ldrb	r3, [r7, #19]
 800284e:	74bb      	strb	r3, [r7, #18]
 8002850:	e006      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002860:	7c7b      	ldrb	r3, [r7, #17]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d105      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002866:	4b8a      	ldr	r3, [pc, #552]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	4a89      	ldr	r2, [pc, #548]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800286c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002870:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287e:	4b84      	ldr	r3, [pc, #528]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f023 0203 	bic.w	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4980      	ldr	r1, [pc, #512]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028a0:	4b7b      	ldr	r3, [pc, #492]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f023 020c 	bic.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	4978      	ldr	r1, [pc, #480]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c2:	4b73      	ldr	r3, [pc, #460]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	496f      	ldr	r1, [pc, #444]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	4967      	ldr	r1, [pc, #412]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002906:	4b62      	ldr	r3, [pc, #392]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	495e      	ldr	r1, [pc, #376]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	4956      	ldr	r1, [pc, #344]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800294a:	4b51      	ldr	r3, [pc, #324]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	494d      	ldr	r1, [pc, #308]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d028      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800296c:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4945      	ldr	r1, [pc, #276]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800298a:	d106      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298c:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a3f      	ldr	r2, [pc, #252]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002996:	60d3      	str	r3, [r2, #12]
 8002998:	e011      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029a2:	d10c      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	2101      	movs	r1, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f882 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d028      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029ca:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	492d      	ldr	r1, [pc, #180]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029e8:	d106      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ea:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4a28      	ldr	r2, [pc, #160]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f4:	60d3      	str	r3, [r2, #12]
 80029f6:	e011      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2101      	movs	r1, #1
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f853 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01c      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	4916      	ldr	r1, [pc, #88]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f830 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	4904      	ldr	r1, [pc, #16]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a84:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000

08002a94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a9e:	f043 0304 	orr.w	r3, r3, #4
 8002aa2:	6013      	str	r3, [r2, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ac2:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d018      	beq.n	8002b00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ace:	4b71      	ldr	r3, [pc, #452]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0203 	and.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d10d      	bne.n	8002afa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ae6:	4b6b      	ldr	r3, [pc, #428]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
       ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d047      	beq.n	8002b8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	e044      	b.n	8002b8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d018      	beq.n	8002b3a <RCCEx_PLLSAI1_Config+0x86>
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d825      	bhi.n	8002b58 <RCCEx_PLLSAI1_Config+0xa4>
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d002      	beq.n	8002b16 <RCCEx_PLLSAI1_Config+0x62>
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d009      	beq.n	8002b28 <RCCEx_PLLSAI1_Config+0x74>
 8002b14:	e020      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b16:	4b5f      	ldr	r3, [pc, #380]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11d      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b26:	e01a      	b.n	8002b5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b28:	4b5a      	ldr	r3, [pc, #360]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d116      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b38:	e013      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b3a:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10f      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b46:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b56:	e006      	b.n	8002b66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5c:	e004      	b.n	8002b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e002      	b.n	8002b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10d      	bne.n	8002b8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b6e:	4b49      	ldr	r3, [pc, #292]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	430b      	orrs	r3, r1
 8002b84:	4943      	ldr	r1, [pc, #268]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d17c      	bne.n	8002c8a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b90:	4b40      	ldr	r3, [pc, #256]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a3f      	ldr	r2, [pc, #252]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fe fa3e 	bl	800101c <HAL_GetTick>
 8002ba0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ba2:	e009      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba4:	f7fe fa3a 	bl	800101c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d902      	bls.n	8002bb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	73fb      	strb	r3, [r7, #15]
        break;
 8002bb6:	e005      	b.n	8002bc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bb8:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ef      	bne.n	8002ba4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d15f      	bne.n	8002c8a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d110      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd0:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002bd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6892      	ldr	r2, [r2, #8]
 8002be0:	0211      	lsls	r1, r2, #8
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68d2      	ldr	r2, [r2, #12]
 8002be6:	06d2      	lsls	r2, r2, #27
 8002be8:	430a      	orrs	r2, r1
 8002bea:	492a      	ldr	r1, [pc, #168]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	610b      	str	r3, [r1, #16]
 8002bf0:	e027      	b.n	8002c42 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d112      	bne.n	8002c1e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf8:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6892      	ldr	r2, [r2, #8]
 8002c08:	0211      	lsls	r1, r2, #8
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6912      	ldr	r2, [r2, #16]
 8002c0e:	0852      	lsrs	r2, r2, #1
 8002c10:	3a01      	subs	r2, #1
 8002c12:	0552      	lsls	r2, r2, #21
 8002c14:	430a      	orrs	r2, r1
 8002c16:	491f      	ldr	r1, [pc, #124]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	610b      	str	r3, [r1, #16]
 8002c1c:	e011      	b.n	8002c42 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6892      	ldr	r2, [r2, #8]
 8002c2e:	0211      	lsls	r1, r2, #8
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6952      	ldr	r2, [r2, #20]
 8002c34:	0852      	lsrs	r2, r2, #1
 8002c36:	3a01      	subs	r2, #1
 8002c38:	0652      	lsls	r2, r2, #25
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	4915      	ldr	r1, [pc, #84]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a13      	ldr	r2, [pc, #76]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7fe f9e5 	bl	800101c <HAL_GetTick>
 8002c52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c54:	e009      	b.n	8002c6a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c56:	f7fe f9e1 	bl	800101c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d902      	bls.n	8002c6a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	73fb      	strb	r3, [r7, #15]
          break;
 8002c68:	e005      	b.n	8002c76 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0ef      	beq.n	8002c56 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4903      	ldr	r1, [pc, #12]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000

08002c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e049      	b.n	8002d3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f841 	bl	8002d46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f000 fe26 	bl	8003928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d001      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e03b      	b.n	8002dec <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d009      	beq.n	8002daa <HAL_TIM_Base_Start_IT+0x4e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9e:	d004      	beq.n	8002daa <HAL_TIM_Base_Start_IT+0x4e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <HAL_TIM_Base_Start_IT+0xa0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d115      	bne.n	8002dd6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <HAL_TIM_Base_Start_IT+0xa4>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b06      	cmp	r3, #6
 8002dba:	d015      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0x8c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc2:	d011      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd4:	e008      	b.n	8002de8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0201 	orr.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e000      	b.n	8002dea <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	00010007 	.word	0x00010007

08002e04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e049      	b.n	8002eaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd ff02 	bl	8000c34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f000 fd70 	bl	8003928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	e03c      	b.n	8002f5a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d109      	bne.n	8002efa <HAL_TIM_PWM_Start_DMA+0x46>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	2300      	movne	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	e02f      	b.n	8002f5a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d109      	bne.n	8002f14 <HAL_TIM_PWM_Start_DMA+0x60>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	e022      	b.n	8002f5a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d109      	bne.n	8002f2e <HAL_TIM_PWM_Start_DMA+0x7a>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	bf0c      	ite	eq
 8002f26:	2301      	moveq	r3, #1
 8002f28:	2300      	movne	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	e015      	b.n	8002f5a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d109      	bne.n	8002f48 <HAL_TIM_PWM_Start_DMA+0x94>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e008      	b.n	8002f5a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e18d      	b.n	800327e <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e03c      	b.n	8002ff6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d109      	bne.n	8002f96 <HAL_TIM_PWM_Start_DMA+0xe2>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	e02f      	b.n	8002ff6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d109      	bne.n	8002fb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e022      	b.n	8002ff6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d109      	bne.n	8002fca <HAL_TIM_PWM_Start_DMA+0x116>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	e015      	b.n	8002ff6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d109      	bne.n	8002fe4 <HAL_TIM_PWM_Start_DMA+0x130>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e008      	b.n	8002ff6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d034      	beq.n	8003064 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_TIM_PWM_Start_DMA+0x152>
 8003000:	887b      	ldrh	r3, [r7, #2]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e139      	b.n	800327e <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <HAL_TIM_PWM_Start_DMA+0x166>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003018:	e026      	b.n	8003068 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d104      	bne.n	800302a <HAL_TIM_PWM_Start_DMA+0x176>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003028:	e01e      	b.n	8003068 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d104      	bne.n	800303a <HAL_TIM_PWM_Start_DMA+0x186>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003038:	e016      	b.n	8003068 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d104      	bne.n	800304a <HAL_TIM_PWM_Start_DMA+0x196>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003048:	e00e      	b.n	8003068 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b10      	cmp	r3, #16
 800304e:	d104      	bne.n	800305a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003058:	e006      	b.n	8003068 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003062:	e001      	b.n	8003068 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e10a      	b.n	800327e <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	f200 80ae 	bhi.w	80031cc <HAL_TIM_PWM_Start_DMA+0x318>
 8003070:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	080030ad 	.word	0x080030ad
 800307c:	080031cd 	.word	0x080031cd
 8003080:	080031cd 	.word	0x080031cd
 8003084:	080031cd 	.word	0x080031cd
 8003088:	080030f5 	.word	0x080030f5
 800308c:	080031cd 	.word	0x080031cd
 8003090:	080031cd 	.word	0x080031cd
 8003094:	080031cd 	.word	0x080031cd
 8003098:	0800313d 	.word	0x0800313d
 800309c:	080031cd 	.word	0x080031cd
 80030a0:	080031cd 	.word	0x080031cd
 80030a4:	080031cd 	.word	0x080031cd
 80030a8:	08003185 	.word	0x08003185
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	4a75      	ldr	r2, [pc, #468]	; (8003288 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	4a74      	ldr	r2, [pc, #464]	; (800328c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	4a73      	ldr	r2, [pc, #460]	; (8003290 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80030c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3334      	adds	r3, #52	; 0x34
 80030d0:	461a      	mov	r2, r3
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	f7fe f948 	bl	8001368 <HAL_DMA_Start_IT>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e0cd      	b.n	800327e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f0:	60da      	str	r2, [r3, #12]
      break;
 80030f2:	e06e      	b.n	80031d2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	4a63      	ldr	r2, [pc, #396]	; (8003288 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	4a62      	ldr	r2, [pc, #392]	; (800328c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003102:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	4a61      	ldr	r2, [pc, #388]	; (8003290 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800310a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3338      	adds	r3, #56	; 0x38
 8003118:	461a      	mov	r2, r3
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	f7fe f924 	bl	8001368 <HAL_DMA_Start_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0a9      	b.n	800327e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003138:	60da      	str	r2, [r3, #12]
      break;
 800313a:	e04a      	b.n	80031d2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	4a51      	ldr	r2, [pc, #324]	; (8003288 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	4a50      	ldr	r2, [pc, #320]	; (800328c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800314a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	4a4f      	ldr	r2, [pc, #316]	; (8003290 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003152:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	333c      	adds	r3, #60	; 0x3c
 8003160:	461a      	mov	r2, r3
 8003162:	887b      	ldrh	r3, [r7, #2]
 8003164:	f7fe f900 	bl	8001368 <HAL_DMA_Start_IT>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e085      	b.n	800327e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003180:	60da      	str	r2, [r3, #12]
      break;
 8003182:	e026      	b.n	80031d2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	4a3f      	ldr	r2, [pc, #252]	; (8003288 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800318a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	4a3e      	ldr	r2, [pc, #248]	; (800328c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003192:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	4a3d      	ldr	r2, [pc, #244]	; (8003290 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800319a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3340      	adds	r3, #64	; 0x40
 80031a8:	461a      	mov	r2, r3
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	f7fe f8dc 	bl	8001368 <HAL_DMA_Start_IT>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e061      	b.n	800327e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031c8:	60da      	str	r2, [r3, #12]
      break;
 80031ca:	e002      	b.n	80031d2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	75fb      	strb	r3, [r7, #23]
      break;
 80031d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d151      	bne.n	800327c <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2201      	movs	r2, #1
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fe83 	bl	8003eec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2a      	ldr	r2, [pc, #168]	; (8003294 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_TIM_PWM_Start_DMA+0x350>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a28      	ldr	r2, [pc, #160]	; (8003298 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_TIM_PWM_Start_DMA+0x350>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a27      	ldr	r2, [pc, #156]	; (800329c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d101      	bne.n	8003208 <HAL_TIM_PWM_Start_DMA+0x354>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <HAL_TIM_PWM_Start_DMA+0x356>
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_TIM_PWM_Start_DMA+0x388>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d004      	beq.n	800323c <HAL_TIM_PWM_Start_DMA+0x388>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a18      	ldr	r2, [pc, #96]	; (8003298 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d115      	bne.n	8003268 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b06      	cmp	r3, #6
 800324c:	d015      	beq.n	800327a <HAL_TIM_PWM_Start_DMA+0x3c6>
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003254:	d011      	beq.n	800327a <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003266:	e008      	b.n	800327a <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e000      	b.n	800327c <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800327c:	7dfb      	ldrb	r3, [r7, #23]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	08003817 	.word	0x08003817
 800328c:	080038bf 	.word	0x080038bf
 8003290:	08003785 	.word	0x08003785
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40014000 	.word	0x40014000
 800329c:	40014400 	.word	0x40014400
 80032a0:	00010007 	.word	0x00010007

080032a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d122      	bne.n	8003300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d11b      	bne.n	8003300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0202 	mvn.w	r2, #2
 80032d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fa1a 	bl	8003720 <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fa0c 	bl	800370c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fa1d 	bl	8003734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d122      	bne.n	8003354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d11b      	bne.n	8003354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0204 	mvn.w	r2, #4
 8003324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f9f0 	bl	8003720 <HAL_TIM_IC_CaptureCallback>
 8003340:	e005      	b.n	800334e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f9e2 	bl	800370c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f9f3 	bl	8003734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b08      	cmp	r3, #8
 8003360:	d122      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b08      	cmp	r3, #8
 800336e:	d11b      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0208 	mvn.w	r2, #8
 8003378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2204      	movs	r2, #4
 800337e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f9c6 	bl	8003720 <HAL_TIM_IC_CaptureCallback>
 8003394:	e005      	b.n	80033a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9b8 	bl	800370c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f9c9 	bl	8003734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d122      	bne.n	80033fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d11b      	bne.n	80033fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0210 	mvn.w	r2, #16
 80033cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2208      	movs	r2, #8
 80033d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f99c 	bl	8003720 <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f98e 	bl	800370c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f99f 	bl	8003734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10e      	bne.n	8003428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0201 	mvn.w	r2, #1
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fa80 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b80      	cmp	r3, #128	; 0x80
 8003434:	d10e      	bne.n	8003454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b80      	cmp	r3, #128	; 0x80
 8003442:	d107      	bne.n	8003454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fe5a 	bl	8004108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003462:	d10e      	bne.n	8003482 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b80      	cmp	r3, #128	; 0x80
 8003470:	d107      	bne.n	8003482 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800347a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fe4d 	bl	800411c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d10e      	bne.n	80034ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d107      	bne.n	80034ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f957 	bl	800375c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d10e      	bne.n	80034da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d107      	bne.n	80034da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f06f 0220 	mvn.w	r2, #32
 80034d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fe0d 	bl	80040f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034fe:	2302      	movs	r3, #2
 8003500:	e0ff      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b14      	cmp	r3, #20
 800350e:	f200 80f0 	bhi.w	80036f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003512:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	0800356d 	.word	0x0800356d
 800351c:	080036f3 	.word	0x080036f3
 8003520:	080036f3 	.word	0x080036f3
 8003524:	080036f3 	.word	0x080036f3
 8003528:	080035ad 	.word	0x080035ad
 800352c:	080036f3 	.word	0x080036f3
 8003530:	080036f3 	.word	0x080036f3
 8003534:	080036f3 	.word	0x080036f3
 8003538:	080035ef 	.word	0x080035ef
 800353c:	080036f3 	.word	0x080036f3
 8003540:	080036f3 	.word	0x080036f3
 8003544:	080036f3 	.word	0x080036f3
 8003548:	0800362f 	.word	0x0800362f
 800354c:	080036f3 	.word	0x080036f3
 8003550:	080036f3 	.word	0x080036f3
 8003554:	080036f3 	.word	0x080036f3
 8003558:	08003671 	.word	0x08003671
 800355c:	080036f3 	.word	0x080036f3
 8003560:	080036f3 	.word	0x080036f3
 8003564:	080036f3 	.word	0x080036f3
 8003568:	080036b1 	.word	0x080036b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fa3c 	bl	80039f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0208 	orr.w	r2, r2, #8
 8003586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0204 	bic.w	r2, r2, #4
 8003596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	619a      	str	r2, [r3, #24]
      break;
 80035aa:	e0a5      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fa98 	bl	8003ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	021a      	lsls	r2, r3, #8
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	619a      	str	r2, [r3, #24]
      break;
 80035ec:	e084      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 faf1 	bl	8003bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0208 	orr.w	r2, r2, #8
 8003608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0204 	bic.w	r2, r2, #4
 8003618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	61da      	str	r2, [r3, #28]
      break;
 800362c:	e064      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fb49 	bl	8003ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	021a      	lsls	r2, r3, #8
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	61da      	str	r2, [r3, #28]
      break;
 800366e:	e043      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fb86 	bl	8003d88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0208 	orr.w	r2, r2, #8
 800368a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0204 	bic.w	r2, r2, #4
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036ae:	e023      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fbbe 	bl	8003e38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036f0:	e002      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
      break;
 80036f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop

0800370c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	d107      	bne.n	80037ac <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037aa:	e02a      	b.n	8003802 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d107      	bne.n	80037c6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2202      	movs	r2, #2
 80037ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c4:	e01d      	b.n	8003802 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d107      	bne.n	80037e0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2204      	movs	r2, #4
 80037d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037de:	e010      	b.n	8003802 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d107      	bne.n	80037fa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2208      	movs	r2, #8
 80037ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037f8:	e003      	b.n	8003802 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f7ff ffb4 	bl	8003770 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	771a      	strb	r2, [r3, #28]
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	429a      	cmp	r2, r3
 800382c:	d10b      	bne.n	8003846 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d136      	bne.n	80038aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003844:	e031      	b.n	80038aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d10b      	bne.n	8003868 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2202      	movs	r2, #2
 8003854:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d125      	bne.n	80038aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003866:	e020      	b.n	80038aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d10b      	bne.n	800388a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2204      	movs	r2, #4
 8003876:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d114      	bne.n	80038aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003888:	e00f      	b.n	80038aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d10a      	bne.n	80038aa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2208      	movs	r2, #8
 8003898:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f7ff ff42 	bl	8003734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	771a      	strb	r2, [r3, #28]
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d103      	bne.n	80038de <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	771a      	strb	r2, [r3, #28]
 80038dc:	e019      	b.n	8003912 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d103      	bne.n	80038f0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2202      	movs	r2, #2
 80038ec:	771a      	strb	r2, [r3, #28]
 80038ee:	e010      	b.n	8003912 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d103      	bne.n	8003902 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2204      	movs	r2, #4
 80038fe:	771a      	strb	r2, [r3, #28]
 8003900:	e007      	b.n	8003912 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	d102      	bne.n	8003912 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2208      	movs	r2, #8
 8003910:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7ff ff18 	bl	8003748 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	771a      	strb	r2, [r3, #28]
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a2a      	ldr	r2, [pc, #168]	; (80039e4 <TIM_Base_SetConfig+0xbc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <TIM_Base_SetConfig+0x20>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003946:	d108      	bne.n	800395a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a21      	ldr	r2, [pc, #132]	; (80039e4 <TIM_Base_SetConfig+0xbc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00b      	beq.n	800397a <TIM_Base_SetConfig+0x52>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003968:	d007      	beq.n	800397a <TIM_Base_SetConfig+0x52>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a1e      	ldr	r2, [pc, #120]	; (80039e8 <TIM_Base_SetConfig+0xc0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_Base_SetConfig+0x52>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <TIM_Base_SetConfig+0xc4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d108      	bne.n	800398c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <TIM_Base_SetConfig+0xbc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d007      	beq.n	80039c8 <TIM_Base_SetConfig+0xa0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <TIM_Base_SetConfig+0xc0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_Base_SetConfig+0xa0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <TIM_Base_SetConfig+0xc4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d103      	bne.n	80039d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	615a      	str	r2, [r3, #20]
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40014400 	.word	0x40014400

080039f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0302 	bic.w	r3, r3, #2
 8003a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a24      	ldr	r2, [pc, #144]	; (8003adc <TIM_OC1_SetConfig+0xec>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_OC1_SetConfig+0x70>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a23      	ldr	r2, [pc, #140]	; (8003ae0 <TIM_OC1_SetConfig+0xf0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_OC1_SetConfig+0x70>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <TIM_OC1_SetConfig+0xf4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d10c      	bne.n	8003a7a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0308 	bic.w	r3, r3, #8
 8003a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f023 0304 	bic.w	r3, r3, #4
 8003a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a17      	ldr	r2, [pc, #92]	; (8003adc <TIM_OC1_SetConfig+0xec>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_OC1_SetConfig+0xa2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a16      	ldr	r2, [pc, #88]	; (8003ae0 <TIM_OC1_SetConfig+0xf0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_OC1_SetConfig+0xa2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <TIM_OC1_SetConfig+0xf4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d111      	bne.n	8003ab6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	621a      	str	r2, [r3, #32]
}
 8003ad0:	bf00      	nop
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40014000 	.word	0x40014000
 8003ae4:	40014400 	.word	0x40014400

08003ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f023 0210 	bic.w	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0320 	bic.w	r3, r3, #32
 8003b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <TIM_OC2_SetConfig+0xe8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10d      	bne.n	8003b68 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <TIM_OC2_SetConfig+0xe8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_OC2_SetConfig+0x98>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <TIM_OC2_SetConfig+0xec>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_OC2_SetConfig+0x98>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <TIM_OC2_SetConfig+0xf0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d113      	bne.n	8003ba8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	621a      	str	r2, [r3, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400

08003bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0303 	bic.w	r3, r3, #3
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a21      	ldr	r2, [pc, #132]	; (8003cc0 <TIM_OC3_SetConfig+0xe4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d10d      	bne.n	8003c5a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <TIM_OC3_SetConfig+0xe4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <TIM_OC3_SetConfig+0x96>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <TIM_OC3_SetConfig+0xe8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_OC3_SetConfig+0x96>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <TIM_OC3_SetConfig+0xec>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d113      	bne.n	8003c9a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	621a      	str	r2, [r3, #32]
}
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40014400 	.word	0x40014400

08003ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	031b      	lsls	r3, r3, #12
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <TIM_OC4_SetConfig+0xb0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d007      	beq.n	8003d40 <TIM_OC4_SetConfig+0x74>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <TIM_OC4_SetConfig+0xb4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <TIM_OC4_SetConfig+0x74>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a12      	ldr	r2, [pc, #72]	; (8003d84 <TIM_OC4_SetConfig+0xb8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d109      	bne.n	8003d54 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400

08003d88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003dcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <TIM_OC5_SetConfig+0xa4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <TIM_OC5_SetConfig+0x6a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a12      	ldr	r2, [pc, #72]	; (8003e30 <TIM_OC5_SetConfig+0xa8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_OC5_SetConfig+0x6a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <TIM_OC5_SetConfig+0xac>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d109      	bne.n	8003e06 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	621a      	str	r2, [r3, #32]
}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40014400 	.word	0x40014400

08003e38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	051b      	lsls	r3, r3, #20
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <TIM_OC6_SetConfig+0xa8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_OC6_SetConfig+0x6c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <TIM_OC6_SetConfig+0xac>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_OC6_SetConfig+0x6c>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <TIM_OC6_SetConfig+0xb0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d109      	bne.n	8003eb8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	029b      	lsls	r3, r3, #10
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	621a      	str	r2, [r3, #32]
}
 8003ed2:	bf00      	nop
 8003ed4:	371c      	adds	r7, #28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40014400 	.word	0x40014400

08003eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	2201      	movs	r2, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1a      	ldr	r2, [r3, #32]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	401a      	ands	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a1a      	ldr	r2, [r3, #32]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e04f      	b.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d108      	bne.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a10      	ldr	r2, [pc, #64]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10c      	bne.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40014000 	.word	0x40014000

08004004 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800401c:	2302      	movs	r3, #2
 800401e:	e060      	b.n	80040e2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d115      	bne.n	80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	051b      	lsls	r3, r3, #20
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40012c00 	.word	0x40012c00

080040f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e040      	b.n	80041c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fc fe62 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2224      	movs	r2, #36	; 0x24
 800415c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f82c 	bl	80041cc <UART_SetConfig>
 8004174:	4603      	mov	r3, r0
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e022      	b.n	80041c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fa4c 	bl	8004624 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800419a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fad3 	bl	8004768 <UART_CheckIdleState>
 80041c2:	4603      	mov	r3, r0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d0:	b08a      	sub	sp, #40	; 0x28
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4bb4      	ldr	r3, [pc, #720]	; (80044cc <UART_SetConfig+0x300>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004204:	430b      	orrs	r3, r1
 8004206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4aa9      	ldr	r2, [pc, #676]	; (80044d0 <UART_SetConfig+0x304>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	4313      	orrs	r3, r2
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004248:	430a      	orrs	r2, r1
 800424a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4aa0      	ldr	r2, [pc, #640]	; (80044d4 <UART_SetConfig+0x308>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d126      	bne.n	80042a4 <UART_SetConfig+0xd8>
 8004256:	4ba0      	ldr	r3, [pc, #640]	; (80044d8 <UART_SetConfig+0x30c>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b03      	cmp	r3, #3
 8004262:	d81b      	bhi.n	800429c <UART_SetConfig+0xd0>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0xa0>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	0800427d 	.word	0x0800427d
 8004270:	0800428d 	.word	0x0800428d
 8004274:	08004285 	.word	0x08004285
 8004278:	08004295 	.word	0x08004295
 800427c:	2301      	movs	r3, #1
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004282:	e080      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004284:	2302      	movs	r3, #2
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e07c      	b.n	8004386 <UART_SetConfig+0x1ba>
 800428c:	2304      	movs	r3, #4
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004292:	e078      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004294:	2308      	movs	r3, #8
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429a:	e074      	b.n	8004386 <UART_SetConfig+0x1ba>
 800429c:	2310      	movs	r3, #16
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e070      	b.n	8004386 <UART_SetConfig+0x1ba>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a8c      	ldr	r2, [pc, #560]	; (80044dc <UART_SetConfig+0x310>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d138      	bne.n	8004320 <UART_SetConfig+0x154>
 80042ae:	4b8a      	ldr	r3, [pc, #552]	; (80044d8 <UART_SetConfig+0x30c>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	d82d      	bhi.n	8004318 <UART_SetConfig+0x14c>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <UART_SetConfig+0xf8>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	08004319 	.word	0x08004319
 80042cc:	08004319 	.word	0x08004319
 80042d0:	08004319 	.word	0x08004319
 80042d4:	08004309 	.word	0x08004309
 80042d8:	08004319 	.word	0x08004319
 80042dc:	08004319 	.word	0x08004319
 80042e0:	08004319 	.word	0x08004319
 80042e4:	08004301 	.word	0x08004301
 80042e8:	08004319 	.word	0x08004319
 80042ec:	08004319 	.word	0x08004319
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004311 	.word	0x08004311
 80042f8:	2300      	movs	r3, #0
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e042      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004300:	2302      	movs	r3, #2
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e03e      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004308:	2304      	movs	r3, #4
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e03a      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004310:	2308      	movs	r3, #8
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e036      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004318:	2310      	movs	r3, #16
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e032      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6a      	ldr	r2, [pc, #424]	; (80044d0 <UART_SetConfig+0x304>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d12a      	bne.n	8004380 <UART_SetConfig+0x1b4>
 800432a:	4b6b      	ldr	r3, [pc, #428]	; (80044d8 <UART_SetConfig+0x30c>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004338:	d01a      	beq.n	8004370 <UART_SetConfig+0x1a4>
 800433a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800433e:	d81b      	bhi.n	8004378 <UART_SetConfig+0x1ac>
 8004340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004344:	d00c      	beq.n	8004360 <UART_SetConfig+0x194>
 8004346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434a:	d815      	bhi.n	8004378 <UART_SetConfig+0x1ac>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <UART_SetConfig+0x18c>
 8004350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004354:	d008      	beq.n	8004368 <UART_SetConfig+0x19c>
 8004356:	e00f      	b.n	8004378 <UART_SetConfig+0x1ac>
 8004358:	2300      	movs	r3, #0
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e012      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004360:	2302      	movs	r3, #2
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004366:	e00e      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004368:	2304      	movs	r3, #4
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436e:	e00a      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004370:	2308      	movs	r3, #8
 8004372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004376:	e006      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004378:	2310      	movs	r3, #16
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e002      	b.n	8004386 <UART_SetConfig+0x1ba>
 8004380:	2310      	movs	r3, #16
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a51      	ldr	r2, [pc, #324]	; (80044d0 <UART_SetConfig+0x304>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d17a      	bne.n	8004486 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004394:	2b08      	cmp	r3, #8
 8004396:	d824      	bhi.n	80043e2 <UART_SetConfig+0x216>
 8004398:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <UART_SetConfig+0x1d4>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043e3 	.word	0x080043e3
 80043a8:	080043cd 	.word	0x080043cd
 80043ac:	080043e3 	.word	0x080043e3
 80043b0:	080043d3 	.word	0x080043d3
 80043b4:	080043e3 	.word	0x080043e3
 80043b8:	080043e3 	.word	0x080043e3
 80043bc:	080043e3 	.word	0x080043e3
 80043c0:	080043db 	.word	0x080043db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7fe f8b2 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 80043c8:	61f8      	str	r0, [r7, #28]
        break;
 80043ca:	e010      	b.n	80043ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043cc:	4b44      	ldr	r3, [pc, #272]	; (80044e0 <UART_SetConfig+0x314>)
 80043ce:	61fb      	str	r3, [r7, #28]
        break;
 80043d0:	e00d      	b.n	80043ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043d2:	f7fe f813 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80043d6:	61f8      	str	r0, [r7, #28]
        break;
 80043d8:	e009      	b.n	80043ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043de:	61fb      	str	r3, [r7, #28]
        break;
 80043e0:	e005      	b.n	80043ee <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8107 	beq.w	8004604 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	429a      	cmp	r2, r3
 8004404:	d305      	bcc.n	8004412 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	429a      	cmp	r2, r3
 8004410:	d903      	bls.n	800441a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004418:	e0f4      	b.n	8004604 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	2200      	movs	r2, #0
 800441e:	461c      	mov	r4, r3
 8004420:	4615      	mov	r5, r2
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	022b      	lsls	r3, r5, #8
 800442c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004430:	0222      	lsls	r2, r4, #8
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	6849      	ldr	r1, [r1, #4]
 8004436:	0849      	lsrs	r1, r1, #1
 8004438:	2000      	movs	r0, #0
 800443a:	4688      	mov	r8, r1
 800443c:	4681      	mov	r9, r0
 800443e:	eb12 0a08 	adds.w	sl, r2, r8
 8004442:	eb43 0b09 	adc.w	fp, r3, r9
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004454:	4650      	mov	r0, sl
 8004456:	4659      	mov	r1, fp
 8004458:	f7fb feba 	bl	80001d0 <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4613      	mov	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800446a:	d308      	bcc.n	800447e <UART_SetConfig+0x2b2>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004472:	d204      	bcs.n	800447e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	60da      	str	r2, [r3, #12]
 800447c:	e0c2      	b.n	8004604 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004484:	e0be      	b.n	8004604 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448e:	d16a      	bne.n	8004566 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004490:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004494:	2b08      	cmp	r3, #8
 8004496:	d834      	bhi.n	8004502 <UART_SetConfig+0x336>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0x2d4>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	080044e5 	.word	0x080044e5
 80044a8:	080044ed 	.word	0x080044ed
 80044ac:	08004503 	.word	0x08004503
 80044b0:	080044f3 	.word	0x080044f3
 80044b4:	08004503 	.word	0x08004503
 80044b8:	08004503 	.word	0x08004503
 80044bc:	08004503 	.word	0x08004503
 80044c0:	080044fb 	.word	0x080044fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7fe f832 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 80044c8:	61f8      	str	r0, [r7, #28]
        break;
 80044ca:	e020      	b.n	800450e <UART_SetConfig+0x342>
 80044cc:	efff69f3 	.word	0xefff69f3
 80044d0:	40008000 	.word	0x40008000
 80044d4:	40013800 	.word	0x40013800
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40004400 	.word	0x40004400
 80044e0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044e4:	f7fe f838 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 80044e8:	61f8      	str	r0, [r7, #28]
        break;
 80044ea:	e010      	b.n	800450e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ec:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <UART_SetConfig+0x454>)
 80044ee:	61fb      	str	r3, [r7, #28]
        break;
 80044f0:	e00d      	b.n	800450e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044f2:	f7fd ff83 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80044f6:	61f8      	str	r0, [r7, #28]
        break;
 80044f8:	e009      	b.n	800450e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fe:	61fb      	str	r3, [r7, #28]
        break;
 8004500:	e005      	b.n	800450e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800450c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d077      	beq.n	8004604 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	005a      	lsls	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	441a      	add	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b0f      	cmp	r3, #15
 800452e:	d916      	bls.n	800455e <UART_SetConfig+0x392>
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004536:	d212      	bcs.n	800455e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f023 030f 	bic.w	r3, r3, #15
 8004540:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	b29b      	uxth	r3, r3
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	b29a      	uxth	r2, r3
 800454e:	8afb      	ldrh	r3, [r7, #22]
 8004550:	4313      	orrs	r3, r2
 8004552:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	8afa      	ldrh	r2, [r7, #22]
 800455a:	60da      	str	r2, [r3, #12]
 800455c:	e052      	b.n	8004604 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004564:	e04e      	b.n	8004604 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800456a:	2b08      	cmp	r3, #8
 800456c:	d827      	bhi.n	80045be <UART_SetConfig+0x3f2>
 800456e:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <UART_SetConfig+0x3a8>)
 8004570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004574:	08004599 	.word	0x08004599
 8004578:	080045a1 	.word	0x080045a1
 800457c:	080045a9 	.word	0x080045a9
 8004580:	080045bf 	.word	0x080045bf
 8004584:	080045af 	.word	0x080045af
 8004588:	080045bf 	.word	0x080045bf
 800458c:	080045bf 	.word	0x080045bf
 8004590:	080045bf 	.word	0x080045bf
 8004594:	080045b7 	.word	0x080045b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004598:	f7fd ffc8 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 800459c:	61f8      	str	r0, [r7, #28]
        break;
 800459e:	e014      	b.n	80045ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045a0:	f7fd ffda 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 80045a4:	61f8      	str	r0, [r7, #28]
        break;
 80045a6:	e010      	b.n	80045ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <UART_SetConfig+0x454>)
 80045aa:	61fb      	str	r3, [r7, #28]
        break;
 80045ac:	e00d      	b.n	80045ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ae:	f7fd ff25 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80045b2:	61f8      	str	r0, [r7, #28]
        break;
 80045b4:	e009      	b.n	80045ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ba:	61fb      	str	r3, [r7, #28]
        break;
 80045bc:	e005      	b.n	80045ca <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045c8:	bf00      	nop
    }

    if (pclk != 0U)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d019      	beq.n	8004604 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	085a      	lsrs	r2, r3, #1
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	441a      	add	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b0f      	cmp	r3, #15
 80045e8:	d909      	bls.n	80045fe <UART_SetConfig+0x432>
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f0:	d205      	bcs.n	80045fe <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60da      	str	r2, [r3, #12]
 80045fc:	e002      	b.n	8004604 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004610:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004614:	4618      	mov	r0, r3
 8004616:	3728      	adds	r7, #40	; 0x28
 8004618:	46bd      	mov	sp, r7
 800461a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461e:	bf00      	nop
 8004620:	00f42400 	.word	0x00f42400

08004624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01a      	beq.n	800473a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004722:	d10a      	bne.n	800473a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	605a      	str	r2, [r3, #4]
  }
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af02      	add	r7, sp, #8
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004778:	f7fc fc50 	bl	800101c <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b08      	cmp	r3, #8
 800478a:	d10e      	bne.n	80047aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800478c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f82d 	bl	80047fa <UART_WaitOnFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e023      	b.n	80047f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d10e      	bne.n	80047d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f817 	bl	80047fa <UART_WaitOnFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e00d      	b.n	80047f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b09c      	sub	sp, #112	; 0x70
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	4613      	mov	r3, r2
 8004808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480a:	e0a5      	b.n	8004958 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	f000 80a1 	beq.w	8004958 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004816:	f7fc fc01 	bl	800101c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004822:	429a      	cmp	r2, r3
 8004824:	d302      	bcc.n	800482c <UART_WaitOnFlagUntilTimeout+0x32>
 8004826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004828:	2b00      	cmp	r3, #0
 800482a:	d13e      	bne.n	80048aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800483a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004840:	667b      	str	r3, [r7, #100]	; 0x64
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800484a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800484c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004850:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e6      	bne.n	800482c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3308      	adds	r3, #8
 8004864:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	663b      	str	r3, [r7, #96]	; 0x60
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800487e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004880:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800488c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e5      	bne.n	800485e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e067      	b.n	800497a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d04f      	beq.n	8004958 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c6:	d147      	bne.n	8004958 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f0:	637b      	str	r3, [r7, #52]	; 0x34
 80048f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e6      	bne.n	80048d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	613b      	str	r3, [r7, #16]
   return(result);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f023 0301 	bic.w	r3, r3, #1
 800491a:	66bb      	str	r3, [r7, #104]	; 0x68
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3308      	adds	r3, #8
 8004922:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004924:	623a      	str	r2, [r7, #32]
 8004926:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	69f9      	ldr	r1, [r7, #28]
 800492a:	6a3a      	ldr	r2, [r7, #32]
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	61bb      	str	r3, [r7, #24]
   return(result);
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e5      	bne.n	8004904 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e010      	b.n	800497a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69da      	ldr	r2, [r3, #28]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4013      	ands	r3, r2
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	429a      	cmp	r2, r3
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	429a      	cmp	r2, r3
 8004974:	f43f af4a 	beq.w	800480c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3770      	adds	r7, #112	; 0x70
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <__NVIC_SetPriority>:
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	6039      	str	r1, [r7, #0]
 800498e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004994:	2b00      	cmp	r3, #0
 8004996:	db0a      	blt.n	80049ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	b2da      	uxtb	r2, r3
 800499c:	490c      	ldr	r1, [pc, #48]	; (80049d0 <__NVIC_SetPriority+0x4c>)
 800499e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a2:	0112      	lsls	r2, r2, #4
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	440b      	add	r3, r1
 80049a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049ac:	e00a      	b.n	80049c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	4908      	ldr	r1, [pc, #32]	; (80049d4 <__NVIC_SetPriority+0x50>)
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	3b04      	subs	r3, #4
 80049bc:	0112      	lsls	r2, r2, #4
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	440b      	add	r3, r1
 80049c2:	761a      	strb	r2, [r3, #24]
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000e100 	.word	0xe000e100
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <SysTick_Handler+0x1c>)
 80049de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80049e0:	f002 f92c 	bl	8006c3c <xTaskGetSchedulerState>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d001      	beq.n	80049ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80049ea:	f003 f8cd 	bl	8007b88 <xPortSysTickHandler>
  }
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	e000e010 	.word	0xe000e010

080049f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80049fc:	2100      	movs	r1, #0
 80049fe:	f06f 0004 	mvn.w	r0, #4
 8004a02:	f7ff ffbf 	bl	8004984 <__NVIC_SetPriority>
#endif
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a12:	f3ef 8305 	mrs	r3, IPSR
 8004a16:	603b      	str	r3, [r7, #0]
  return(result);
 8004a18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a1e:	f06f 0305 	mvn.w	r3, #5
 8004a22:	607b      	str	r3, [r7, #4]
 8004a24:	e00c      	b.n	8004a40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a26:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <osKernelInitialize+0x44>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d105      	bne.n	8004a3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <osKernelInitialize+0x44>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	e002      	b.n	8004a40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a40:	687b      	ldr	r3, [r7, #4]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000290 	.word	0x20000290

08004a54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a5a:	f3ef 8305 	mrs	r3, IPSR
 8004a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8004a60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004a66:	f06f 0305 	mvn.w	r3, #5
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	e010      	b.n	8004a90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <osKernelStart+0x48>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d109      	bne.n	8004a8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a76:	f7ff ffbf 	bl	80049f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a7a:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <osKernelStart+0x48>)
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a80:	f001 fc80 	bl	8006384 <vTaskStartScheduler>
      stat = osOK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	607b      	str	r3, [r7, #4]
 8004a88:	e002      	b.n	8004a90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a90:	687b      	ldr	r3, [r7, #4]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000290 	.word	0x20000290

08004aa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08e      	sub	sp, #56	; 0x38
 8004aa4:	af04      	add	r7, sp, #16
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ab0:	f3ef 8305 	mrs	r3, IPSR
 8004ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8004ab6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d17f      	bne.n	8004bbc <osThreadNew+0x11c>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d07c      	beq.n	8004bbc <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8004ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ac6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004ac8:	2318      	movs	r3, #24
 8004aca:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d045      	beq.n	8004b68 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <osThreadNew+0x4a>
        name = attr->name;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <osThreadNew+0x70>
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b38      	cmp	r3, #56	; 0x38
 8004b02:	d805      	bhi.n	8004b10 <osThreadNew+0x70>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <osThreadNew+0x74>
        return (NULL);
 8004b10:	2300      	movs	r3, #0
 8004b12:	e054      	b.n	8004bbe <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	089b      	lsrs	r3, r3, #2
 8004b22:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00e      	beq.n	8004b4a <osThreadNew+0xaa>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2bbb      	cmp	r3, #187	; 0xbb
 8004b32:	d90a      	bls.n	8004b4a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d006      	beq.n	8004b4a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <osThreadNew+0xaa>
        mem = 1;
 8004b44:	2301      	movs	r3, #1
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	e010      	b.n	8004b6c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10c      	bne.n	8004b6c <osThreadNew+0xcc>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d108      	bne.n	8004b6c <osThreadNew+0xcc>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <osThreadNew+0xcc>
          mem = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e001      	b.n	8004b6c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d110      	bne.n	8004b94 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b7a:	9202      	str	r2, [sp, #8]
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f001 fa0f 	bl	8005fac <xTaskCreateStatic>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	e013      	b.n	8004bbc <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d110      	bne.n	8004bbc <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	f107 0310 	add.w	r3, r7, #16
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f001 fa5a 	bl	8006066 <xTaskCreate>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d001      	beq.n	8004bbc <osThreadNew+0x11c>
            hTask = NULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004bbc:	693b      	ldr	r3, [r7, #16]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3728      	adds	r7, #40	; 0x28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bce:	f3ef 8305 	mrs	r3, IPSR
 8004bd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <osDelay+0x1c>
    stat = osErrorISR;
 8004bda:	f06f 0305 	mvn.w	r3, #5
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e007      	b.n	8004bf2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 fb95 	bl	800631c <vTaskDelay>
    }
  }

  return (stat);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f002 fddf 	bl	80077c8 <pvTimerGetTimerID>
 8004c0a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <TimerCallback+0x22>
    callb->func (callb->arg);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	6852      	ldr	r2, [r2, #4]
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4798      	blx	r3
  }
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08c      	sub	sp, #48	; 0x30
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	607a      	str	r2, [r7, #4]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	460b      	mov	r3, r1
 8004c36:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c3c:	f3ef 8305 	mrs	r3, IPSR
 8004c40:	613b      	str	r3, [r7, #16]
  return(result);
 8004c42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d163      	bne.n	8004d10 <osTimerNew+0xe8>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d060      	beq.n	8004d10 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004c4e:	2008      	movs	r0, #8
 8004c50:	f003 f82a 	bl	8007ca8 <pvPortMalloc>
 8004c54:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d059      	beq.n	8004d10 <osTimerNew+0xe8>
      callb->func = func;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004c68:	7afb      	ldrb	r3, [r7, #11]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <osTimerNew+0x4c>
        reload = pdFALSE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	e001      	b.n	8004c78 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004c74:	2301      	movs	r3, #1
 8004c76:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004c78:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01c      	beq.n	8004cc2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <osTimerNew+0x6e>
          name = attr->name;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d006      	beq.n	8004cac <osTimerNew+0x84>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b2b      	cmp	r3, #43	; 0x2b
 8004ca4:	d902      	bls.n	8004cac <osTimerNew+0x84>
          mem = 1;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	e00c      	b.n	8004cc6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d108      	bne.n	8004cc6 <osTimerNew+0x9e>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d104      	bne.n	8004cc6 <osTimerNew+0x9e>
            mem = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	e001      	b.n	8004cc6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d10c      	bne.n	8004ce6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <osTimerNew+0xf4>)
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	2101      	movs	r1, #1
 8004cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cde:	f002 f9f4 	bl	80070ca <xTimerCreateStatic>
 8004ce2:	6238      	str	r0, [r7, #32]
 8004ce4:	e00b      	b.n	8004cfe <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d108      	bne.n	8004cfe <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <osTimerNew+0xf4>)
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cf8:	f002 f9c6 	bl	8007088 <xTimerCreate>
 8004cfc:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <osTimerNew+0xe8>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <osTimerNew+0xe8>
        vPortFree (callb);
 8004d0a:	6978      	ldr	r0, [r7, #20]
 8004d0c:	f003 f898 	bl	8007e40 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004d10:	6a3b      	ldr	r3, [r7, #32]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3728      	adds	r7, #40	; 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	08004bfd 	.word	0x08004bfd

08004d20 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	; 0x28
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d30:	f3ef 8305 	mrs	r3, IPSR
 8004d34:	613b      	str	r3, [r7, #16]
  return(result);
 8004d36:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d175      	bne.n	8004e28 <osSemaphoreNew+0x108>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d072      	beq.n	8004e28 <osSemaphoreNew+0x108>
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d86e      	bhi.n	8004e28 <osSemaphoreNew+0x108>
    mem = -1;
 8004d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d015      	beq.n	8004d82 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d006      	beq.n	8004d6c <osSemaphoreNew+0x4c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2b4f      	cmp	r3, #79	; 0x4f
 8004d64:	d902      	bls.n	8004d6c <osSemaphoreNew+0x4c>
        mem = 1;
 8004d66:	2301      	movs	r3, #1
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	e00c      	b.n	8004d86 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d108      	bne.n	8004d86 <osSemaphoreNew+0x66>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <osSemaphoreNew+0x66>
          mem = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e001      	b.n	8004d86 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d04c      	beq.n	8004e28 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d128      	bne.n	8004de6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d10a      	bne.n	8004db0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2203      	movs	r2, #3
 8004da0:	9200      	str	r2, [sp, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	2100      	movs	r1, #0
 8004da6:	2001      	movs	r0, #1
 8004da8:	f000 f9e6 	bl	8005178 <xQueueGenericCreateStatic>
 8004dac:	61f8      	str	r0, [r7, #28]
 8004dae:	e005      	b.n	8004dbc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004db0:	2203      	movs	r2, #3
 8004db2:	2100      	movs	r1, #0
 8004db4:	2001      	movs	r0, #1
 8004db6:	f000 fa57 	bl	8005268 <xQueueGenericCreate>
 8004dba:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d022      	beq.n	8004e08 <osSemaphoreNew+0xe8>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01f      	beq.n	8004e08 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2100      	movs	r1, #0
 8004dce:	69f8      	ldr	r0, [r7, #28]
 8004dd0:	f000 fb12 	bl	80053f8 <xQueueGenericSend>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d016      	beq.n	8004e08 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004dda:	69f8      	ldr	r0, [r7, #28]
 8004ddc:	f000 ff12 	bl	8005c04 <vQueueDelete>
            hSemaphore = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	e010      	b.n	8004e08 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d108      	bne.n	8004dfe <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	461a      	mov	r2, r3
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fa94 	bl	8005322 <xQueueCreateCountingSemaphoreStatic>
 8004dfa:	61f8      	str	r0, [r7, #28]
 8004dfc:	e004      	b.n	8004e08 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fac5 	bl	8005390 <xQueueCreateCountingSemaphore>
 8004e06:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00c      	beq.n	8004e28 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <osSemaphoreNew+0xfc>
          name = attr->name;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	e001      	b.n	8004e20 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004e20:	6979      	ldr	r1, [r7, #20]
 8004e22:	69f8      	ldr	r0, [r7, #28]
 8004e24:	f001 f83a 	bl	8005e9c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004e28:	69fb      	ldr	r3, [r7, #28]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004e4c:	f06f 0303 	mvn.w	r3, #3
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e039      	b.n	8004ec8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e54:	f3ef 8305 	mrs	r3, IPSR
 8004e58:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d022      	beq.n	8004ea6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004e66:	f06f 0303 	mvn.w	r3, #3
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e02c      	b.n	8004ec8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004e72:	f107 0308 	add.w	r3, r7, #8
 8004e76:	461a      	mov	r2, r3
 8004e78:	2100      	movs	r1, #0
 8004e7a:	6938      	ldr	r0, [r7, #16]
 8004e7c:	f000 fe42 	bl	8005b04 <xQueueReceiveFromISR>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d003      	beq.n	8004e8e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004e86:	f06f 0302 	mvn.w	r3, #2
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e01c      	b.n	8004ec8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d019      	beq.n	8004ec8 <osSemaphoreAcquire+0x94>
 8004e94:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <osSemaphoreAcquire+0xa0>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	e010      	b.n	8004ec8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004ea6:	6839      	ldr	r1, [r7, #0]
 8004ea8:	6938      	ldr	r0, [r7, #16]
 8004eaa:	f000 fd1f 	bl	80058ec <xQueueSemaphoreTake>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d009      	beq.n	8004ec8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004eba:	f06f 0301 	mvn.w	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e002      	b.n	8004ec8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004ec2:	f06f 0302 	mvn.w	r3, #2
 8004ec6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004ec8:	697b      	ldr	r3, [r7, #20]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a07      	ldr	r2, [pc, #28]	; (8004f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4a06      	ldr	r2, [pc, #24]	; (8004f08 <vApplicationGetIdleTaskMemory+0x30>)
 8004eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ef6:	601a      	str	r2, [r3, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	20000294 	.word	0x20000294
 8004f08:	20000350 	.word	0x20000350

08004f0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a07      	ldr	r2, [pc, #28]	; (8004f38 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4a06      	ldr	r2, [pc, #24]	; (8004f3c <vApplicationGetTimerTaskMemory+0x30>)
 8004f22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f2a:	601a      	str	r2, [r3, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000750 	.word	0x20000750
 8004f3c:	2000080c 	.word	0x2000080c

08004f40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f103 0208 	add.w	r2, r3, #8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f04f 32ff 	mov.w	r2, #4294967295
 8004f58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f103 0208 	add.w	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f103 0208 	add.w	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d103      	bne.n	8005002 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e00c      	b.n	800501c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3308      	adds	r3, #8
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e002      	b.n	8005010 <vListInsert+0x2e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	429a      	cmp	r2, r3
 800501a:	d2f6      	bcs.n	800500a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	601a      	str	r2, [r3, #0]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6892      	ldr	r2, [r2, #8]
 800506a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6852      	ldr	r2, [r2, #4]
 8005074:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d103      	bne.n	8005088 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	1e5a      	subs	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050d2:	f002 fcc7 	bl	8007a64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	441a      	add	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	3b01      	subs	r3, #1
 8005104:	68f9      	ldr	r1, [r7, #12]
 8005106:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005108:	fb01 f303 	mul.w	r3, r1, r3
 800510c:	441a      	add	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	22ff      	movs	r2, #255	; 0xff
 8005116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	22ff      	movs	r2, #255	; 0xff
 800511e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d114      	bne.n	8005152 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01a      	beq.n	8005166 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3310      	adds	r3, #16
 8005134:	4618      	mov	r0, r3
 8005136:	f001 fbbf 	bl	80068b8 <xTaskRemoveFromEventList>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d012      	beq.n	8005166 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <xQueueGenericReset+0xcc>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	e009      	b.n	8005166 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3310      	adds	r3, #16
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff fef2 	bl	8004f40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3324      	adds	r3, #36	; 0x24
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff feed 	bl	8004f40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005166:	f002 fcad 	bl	8007ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800516a:	2301      	movs	r3, #1
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08e      	sub	sp, #56	; 0x38
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <xQueueGenericCreateStatic+0x52>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <xQueueGenericCreateStatic+0x56>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <xQueueGenericCreateStatic+0x58>
 80051ce:	2300      	movs	r3, #0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	623b      	str	r3, [r7, #32]
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <xQueueGenericCreateStatic+0x7e>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <xQueueGenericCreateStatic+0x82>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <xQueueGenericCreateStatic+0x84>
 80051fa:	2300      	movs	r3, #0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	61fb      	str	r3, [r7, #28]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005216:	2350      	movs	r3, #80	; 0x50
 8005218:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b50      	cmp	r3, #80	; 0x50
 800521e:	d00a      	beq.n	8005236 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	61bb      	str	r3, [r7, #24]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005236:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800523c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00d      	beq.n	800525e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800524a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f83f 	bl	80052dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005260:	4618      	mov	r0, r3
 8005262:	3730      	adds	r7, #48	; 0x30
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <xQueueGenericCreate+0x2a>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	613b      	str	r3, [r7, #16]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	fb02 f303 	mul.w	r3, r2, r3
 800529a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	3350      	adds	r3, #80	; 0x50
 80052a0:	4618      	mov	r0, r3
 80052a2:	f002 fd01 	bl	8007ca8 <pvPortMalloc>
 80052a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d011      	beq.n	80052d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	3350      	adds	r3, #80	; 0x50
 80052b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052c0:	79fa      	ldrb	r2, [r7, #7]
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	4613      	mov	r3, r2
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f805 	bl	80052dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052d2:	69bb      	ldr	r3, [r7, #24]
	}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d103      	bne.n	80052f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e002      	b.n	80052fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800530a:	2101      	movs	r1, #1
 800530c:	69b8      	ldr	r0, [r7, #24]
 800530e:	f7ff fecb 	bl	80050a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005322:	b580      	push	{r7, lr}
 8005324:	b08a      	sub	sp, #40	; 0x28
 8005326:	af02      	add	r7, sp, #8
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	61bb      	str	r3, [r7, #24]
}
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	429a      	cmp	r2, r3
 8005350:	d90a      	bls.n	8005368 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	617b      	str	r3, [r7, #20]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005368:	2302      	movs	r3, #2
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	2100      	movs	r1, #0
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff ff00 	bl	8005178 <xQueueGenericCreateStatic>
 8005378:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005386:	69fb      	ldr	r3, [r7, #28]
	}
 8005388:	4618      	mov	r0, r3
 800538a:	3720      	adds	r7, #32
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	613b      	str	r3, [r7, #16]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d90a      	bls.n	80053d4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	60fb      	str	r3, [r7, #12]
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80053d4:	2202      	movs	r2, #2
 80053d6:	2100      	movs	r1, #0
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ff45 	bl	8005268 <xQueueGenericCreate>
 80053de:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80053ec:	697b      	ldr	r3, [r7, #20]
	}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08e      	sub	sp, #56	; 0x38
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005406:	2300      	movs	r3, #0
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <xQueueGenericSend+0x32>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d103      	bne.n	8005438 <xQueueGenericSend+0x40>
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <xQueueGenericSend+0x44>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <xQueueGenericSend+0x46>
 800543c:	2300      	movs	r3, #0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <xQueueGenericSend+0x60>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d103      	bne.n	8005466 <xQueueGenericSend+0x6e>
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <xQueueGenericSend+0x72>
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <xQueueGenericSend+0x74>
 800546a:	2300      	movs	r3, #0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <xQueueGenericSend+0x8e>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	623b      	str	r3, [r7, #32]
}
 8005482:	bf00      	nop
 8005484:	e7fe      	b.n	8005484 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005486:	f001 fbd9 	bl	8006c3c <xTaskGetSchedulerState>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d102      	bne.n	8005496 <xQueueGenericSend+0x9e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <xQueueGenericSend+0xa2>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <xQueueGenericSend+0xa4>
 800549a:	2300      	movs	r3, #0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	61fb      	str	r3, [r7, #28]
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054b6:	f002 fad5 	bl	8007a64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d302      	bcc.n	80054cc <xQueueGenericSend+0xd4>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d129      	bne.n	8005520 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054d2:	f000 fbd2 	bl	8005c7a <prvCopyDataToQueue>
 80054d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d010      	beq.n	8005502 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	3324      	adds	r3, #36	; 0x24
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 f9e7 	bl	80068b8 <xTaskRemoveFromEventList>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d013      	beq.n	8005518 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054f0:	4b3f      	ldr	r3, [pc, #252]	; (80055f0 <xQueueGenericSend+0x1f8>)
 80054f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	e00a      	b.n	8005518 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005508:	4b39      	ldr	r3, [pc, #228]	; (80055f0 <xQueueGenericSend+0x1f8>)
 800550a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005518:	f002 fad4 	bl	8007ac4 <vPortExitCritical>
				return pdPASS;
 800551c:	2301      	movs	r3, #1
 800551e:	e063      	b.n	80055e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d103      	bne.n	800552e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005526:	f002 facd 	bl	8007ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800552a:	2300      	movs	r3, #0
 800552c:	e05c      	b.n	80055e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	d106      	bne.n	8005542 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005534:	f107 0314 	add.w	r3, r7, #20
 8005538:	4618      	mov	r0, r3
 800553a:	f001 fa21 	bl	8006980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800553e:	2301      	movs	r3, #1
 8005540:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005542:	f002 fabf 	bl	8007ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005546:	f000 ff8d 	bl	8006464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800554a:	f002 fa8b 	bl	8007a64 <vPortEnterCritical>
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005554:	b25b      	sxtb	r3, r3
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d103      	bne.n	8005564 <xQueueGenericSend+0x16c>
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800556a:	b25b      	sxtb	r3, r3
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d103      	bne.n	800557a <xQueueGenericSend+0x182>
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800557a:	f002 faa3 	bl	8007ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800557e:	1d3a      	adds	r2, r7, #4
 8005580:	f107 0314 	add.w	r3, r7, #20
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f001 fa10 	bl	80069ac <xTaskCheckForTimeOut>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d124      	bne.n	80055dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005592:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005594:	f000 fc69 	bl	8005e6a <prvIsQueueFull>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d018      	beq.n	80055d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	3310      	adds	r3, #16
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 f936 	bl	8006818 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ae:	f000 fbf4 	bl	8005d9a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055b2:	f000 ff65 	bl	8006480 <xTaskResumeAll>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f47f af7c 	bne.w	80054b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <xQueueGenericSend+0x1f8>)
 80055c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	e772      	b.n	80054b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055d2:	f000 fbe2 	bl	8005d9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055d6:	f000 ff53 	bl	8006480 <xTaskResumeAll>
 80055da:	e76c      	b.n	80054b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055de:	f000 fbdc 	bl	8005d9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055e2:	f000 ff4d 	bl	8006480 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3738      	adds	r7, #56	; 0x38
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b090      	sub	sp, #64	; 0x40
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <xQueueGenericSendFromISR+0x3c>
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <xQueueGenericSendFromISR+0x40>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <xQueueGenericSendFromISR+0x42>
 8005634:	2300      	movs	r3, #0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d103      	bne.n	800565e <xQueueGenericSendFromISR+0x6a>
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <xQueueGenericSendFromISR+0x6e>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <xQueueGenericSendFromISR+0x70>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	623b      	str	r3, [r7, #32]
}
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800567e:	f002 fad3 	bl	8007c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005682:	f3ef 8211 	mrs	r2, BASEPRI
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	61fa      	str	r2, [r7, #28]
 8005698:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800569a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d302      	bcc.n	80056b0 <xQueueGenericSendFromISR+0xbc>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d12f      	bne.n	8005710 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056c6:	f000 fad8 	bl	8005c7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d112      	bne.n	80056fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d016      	beq.n	800570a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	3324      	adds	r3, #36	; 0x24
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 f8e9 	bl	80068b8 <xTaskRemoveFromEventList>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00e      	beq.n	800570a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	e007      	b.n	800570a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056fe:	3301      	adds	r3, #1
 8005700:	b2db      	uxtb	r3, r3
 8005702:	b25a      	sxtb	r2, r3
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800570a:	2301      	movs	r3, #1
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800570e:	e001      	b.n	8005714 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005710:	2300      	movs	r3, #0
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005716:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800571e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005722:	4618      	mov	r0, r3
 8005724:	3740      	adds	r7, #64	; 0x40
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08c      	sub	sp, #48	; 0x30
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005738:	2300      	movs	r3, #0
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <xQueueReceive+0x30>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	623b      	str	r3, [r7, #32]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d103      	bne.n	800576a <xQueueReceive+0x3e>
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <xQueueReceive+0x42>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <xQueueReceive+0x44>
 800576e:	2300      	movs	r3, #0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <xQueueReceive+0x5e>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	61fb      	str	r3, [r7, #28]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800578a:	f001 fa57 	bl	8006c3c <xTaskGetSchedulerState>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <xQueueReceive+0x6e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <xQueueReceive+0x72>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xQueueReceive+0x74>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <xQueueReceive+0x8e>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	61bb      	str	r3, [r7, #24]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057ba:	f002 f953 	bl	8007a64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d01f      	beq.n	800580a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ce:	f000 fabe 	bl	8005d4e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	1e5a      	subs	r2, r3, #1
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00f      	beq.n	8005802 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	3310      	adds	r3, #16
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 f866 	bl	80068b8 <xTaskRemoveFromEventList>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d007      	beq.n	8005802 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057f2:	4b3d      	ldr	r3, [pc, #244]	; (80058e8 <xQueueReceive+0x1bc>)
 80057f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005802:	f002 f95f 	bl	8007ac4 <vPortExitCritical>
				return pdPASS;
 8005806:	2301      	movs	r3, #1
 8005808:	e069      	b.n	80058de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005810:	f002 f958 	bl	8007ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005814:	2300      	movs	r3, #0
 8005816:	e062      	b.n	80058de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800581e:	f107 0310 	add.w	r3, r7, #16
 8005822:	4618      	mov	r0, r3
 8005824:	f001 f8ac 	bl	8006980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005828:	2301      	movs	r3, #1
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800582c:	f002 f94a 	bl	8007ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005830:	f000 fe18 	bl	8006464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005834:	f002 f916 	bl	8007a64 <vPortEnterCritical>
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800583e:	b25b      	sxtb	r3, r3
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d103      	bne.n	800584e <xQueueReceive+0x122>
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005854:	b25b      	sxtb	r3, r3
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d103      	bne.n	8005864 <xQueueReceive+0x138>
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005864:	f002 f92e 	bl	8007ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005868:	1d3a      	adds	r2, r7, #4
 800586a:	f107 0310 	add.w	r3, r7, #16
 800586e:	4611      	mov	r1, r2
 8005870:	4618      	mov	r0, r3
 8005872:	f001 f89b 	bl	80069ac <xTaskCheckForTimeOut>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d123      	bne.n	80058c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800587c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800587e:	f000 fade 	bl	8005e3e <prvIsQueueEmpty>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d017      	beq.n	80058b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	3324      	adds	r3, #36	; 0x24
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	4611      	mov	r1, r2
 8005890:	4618      	mov	r0, r3
 8005892:	f000 ffc1 	bl	8006818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005898:	f000 fa7f 	bl	8005d9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800589c:	f000 fdf0 	bl	8006480 <xTaskResumeAll>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d189      	bne.n	80057ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <xQueueReceive+0x1bc>)
 80058a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	e780      	b.n	80057ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ba:	f000 fa6e 	bl	8005d9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058be:	f000 fddf 	bl	8006480 <xTaskResumeAll>
 80058c2:	e77a      	b.n	80057ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c6:	f000 fa68 	bl	8005d9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ca:	f000 fdd9 	bl	8006480 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d0:	f000 fab5 	bl	8005e3e <prvIsQueueEmpty>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f43f af6f 	beq.w	80057ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3730      	adds	r7, #48	; 0x30
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08e      	sub	sp, #56	; 0x38
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80058fe:	2300      	movs	r3, #0
 8005900:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	623b      	str	r3, [r7, #32]
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	61fb      	str	r3, [r7, #28]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800593c:	f001 f97e 	bl	8006c3c <xTaskGetSchedulerState>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <xQueueSemaphoreTake+0x60>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <xQueueSemaphoreTake+0x64>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <xQueueSemaphoreTake+0x66>
 8005950:	2300      	movs	r3, #0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10a      	bne.n	800596c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	61bb      	str	r3, [r7, #24]
}
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800596c:	f002 f87a 	bl	8007a64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	2b00      	cmp	r3, #0
 800597a:	d024      	beq.n	80059c6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	1e5a      	subs	r2, r3, #1
 8005980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005982:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800598c:	f001 facc 	bl	8006f28 <pvTaskIncrementMutexHeldCount>
 8005990:	4602      	mov	r2, r0
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00f      	beq.n	80059be <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	3310      	adds	r3, #16
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 ff88 	bl	80068b8 <xTaskRemoveFromEventList>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059ae:	4b54      	ldr	r3, [pc, #336]	; (8005b00 <xQueueSemaphoreTake+0x214>)
 80059b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059be:	f002 f881 	bl	8007ac4 <vPortExitCritical>
				return pdPASS;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e097      	b.n	8005af6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d111      	bne.n	80059f0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	617b      	str	r3, [r7, #20]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80059e8:	f002 f86c 	bl	8007ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e082      	b.n	8005af6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059f6:	f107 030c 	add.w	r3, r7, #12
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 ffc0 	bl	8006980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a00:	2301      	movs	r3, #1
 8005a02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a04:	f002 f85e 	bl	8007ac4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a08:	f000 fd2c 	bl	8006464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a0c:	f002 f82a 	bl	8007a64 <vPortEnterCritical>
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a16:	b25b      	sxtb	r3, r3
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d103      	bne.n	8005a26 <xQueueSemaphoreTake+0x13a>
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a2c:	b25b      	sxtb	r3, r3
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a32:	d103      	bne.n	8005a3c <xQueueSemaphoreTake+0x150>
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a3c:	f002 f842 	bl	8007ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a40:	463a      	mov	r2, r7
 8005a42:	f107 030c 	add.w	r3, r7, #12
 8005a46:	4611      	mov	r1, r2
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 ffaf 	bl	80069ac <xTaskCheckForTimeOut>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d132      	bne.n	8005aba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a56:	f000 f9f2 	bl	8005e3e <prvIsQueueEmpty>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d026      	beq.n	8005aae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005a68:	f001 fffc 	bl	8007a64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 f901 	bl	8006c78 <xTaskPriorityInherit>
 8005a76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005a78:	f002 f824 	bl	8007ac4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	3324      	adds	r3, #36	; 0x24
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fec7 	bl	8006818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a8c:	f000 f985 	bl	8005d9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a90:	f000 fcf6 	bl	8006480 <xTaskResumeAll>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f47f af68 	bne.w	800596c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005a9c:	4b18      	ldr	r3, [pc, #96]	; (8005b00 <xQueueSemaphoreTake+0x214>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	e75e      	b.n	800596c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005aae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ab0:	f000 f973 	bl	8005d9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ab4:	f000 fce4 	bl	8006480 <xTaskResumeAll>
 8005ab8:	e758      	b.n	800596c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005abc:	f000 f96d 	bl	8005d9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ac0:	f000 fcde 	bl	8006480 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ac4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ac6:	f000 f9ba 	bl	8005e3e <prvIsQueueEmpty>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f43f af4d 	beq.w	800596c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00d      	beq.n	8005af4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005ad8:	f001 ffc4 	bl	8007a64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005adc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ade:	f000 f8b4 	bl	8005c4a <prvGetDisinheritPriorityAfterTimeout>
 8005ae2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 f99a 	bl	8006e24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005af0:	f001 ffe8 	bl	8007ac4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005af4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3738      	adds	r7, #56	; 0x38
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08e      	sub	sp, #56	; 0x38
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	623b      	str	r3, [r7, #32]
}
 8005b2c:	bf00      	nop
 8005b2e:	e7fe      	b.n	8005b2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d103      	bne.n	8005b3e <xQueueReceiveFromISR+0x3a>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <xQueueReceiveFromISR+0x3e>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <xQueueReceiveFromISR+0x40>
 8005b42:	2300      	movs	r3, #0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	61fb      	str	r3, [r7, #28]
}
 8005b5a:	bf00      	nop
 8005b5c:	e7fe      	b.n	8005b5c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b5e:	f002 f863 	bl	8007c28 <vPortValidateInterruptPriority>
	__asm volatile
 8005b62:	f3ef 8211 	mrs	r2, BASEPRI
 8005b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	61ba      	str	r2, [r7, #24]
 8005b78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d02f      	beq.n	8005bea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b98:	f000 f8d9 	bl	8005d4e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	1e5a      	subs	r2, r3, #1
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ba4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d112      	bne.n	8005bd4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	3310      	adds	r3, #16
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fe7c 	bl	80068b8 <xTaskRemoveFromEventList>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00e      	beq.n	8005be4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00b      	beq.n	8005be4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e007      	b.n	8005be4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bd8:	3301      	adds	r3, #1
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	b25a      	sxtb	r2, r3
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005be4:	2301      	movs	r3, #1
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
 8005be8:	e001      	b.n	8005bee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f383 8811 	msr	BASEPRI, r3
}
 8005bf8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3738      	adds	r7, #56	; 0x38
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <vQueueDelete+0x28>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60bb      	str	r3, [r7, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f95f 	bl	8005ef0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d102      	bne.n	8005c42 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f002 f8ff 	bl	8007e40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d006      	beq.n	8005c68 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e001      	b.n	8005c6c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
	}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b086      	sub	sp, #24
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10d      	bne.n	8005cb4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d14d      	bne.n	8005d3c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 f84f 	bl	8006d48 <xTaskPriorityDisinherit>
 8005caa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	609a      	str	r2, [r3, #8]
 8005cb2:	e043      	b.n	8005d3c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d119      	bne.n	8005cee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6858      	ldr	r0, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	f002 f9ff 	bl	80080c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d32b      	bcc.n	8005d3c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	e026      	b.n	8005d3c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68d8      	ldr	r0, [r3, #12]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	f002 f9e5 	bl	80080c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	425b      	negs	r3, r3
 8005d08:	441a      	add	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d207      	bcs.n	8005d2a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	425b      	negs	r3, r3
 8005d24:	441a      	add	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d105      	bne.n	8005d3c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d44:	697b      	ldr	r3, [r7, #20]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d018      	beq.n	8005d92 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	441a      	add	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d303      	bcc.n	8005d82 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68d9      	ldr	r1, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6838      	ldr	r0, [r7, #0]
 8005d8e:	f002 f99b 	bl	80080c8 <memcpy>
	}
}
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005da2:	f001 fe5f 	bl	8007a64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dae:	e011      	b.n	8005dd4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d012      	beq.n	8005dde <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3324      	adds	r3, #36	; 0x24
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fd7b 	bl	80068b8 <xTaskRemoveFromEventList>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dc8:	f000 fe52 	bl	8006a70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	dce9      	bgt.n	8005db0 <prvUnlockQueue+0x16>
 8005ddc:	e000      	b.n	8005de0 <prvUnlockQueue+0x46>
					break;
 8005dde:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	22ff      	movs	r2, #255	; 0xff
 8005de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005de8:	f001 fe6c 	bl	8007ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dec:	f001 fe3a 	bl	8007a64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005df6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005df8:	e011      	b.n	8005e1e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d012      	beq.n	8005e28 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3310      	adds	r3, #16
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fd56 	bl	80068b8 <xTaskRemoveFromEventList>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e12:	f000 fe2d 	bl	8006a70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e16:	7bbb      	ldrb	r3, [r7, #14]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	dce9      	bgt.n	8005dfa <prvUnlockQueue+0x60>
 8005e26:	e000      	b.n	8005e2a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e28:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	22ff      	movs	r2, #255	; 0xff
 8005e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e32:	f001 fe47 	bl	8007ac4 <vPortExitCritical>
}
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e46:	f001 fe0d 	bl	8007a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d102      	bne.n	8005e58 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e52:	2301      	movs	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	e001      	b.n	8005e5c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e5c:	f001 fe32 	bl	8007ac4 <vPortExitCritical>

	return xReturn;
 8005e60:	68fb      	ldr	r3, [r7, #12]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e72:	f001 fdf7 	bl	8007a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d102      	bne.n	8005e88 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e82:	2301      	movs	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	e001      	b.n	8005e8c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e8c:	f001 fe1a 	bl	8007ac4 <vPortExitCritical>

	return xReturn;
 8005e90:	68fb      	ldr	r3, [r7, #12]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	e014      	b.n	8005ed6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005eac:	4a0f      	ldr	r2, [pc, #60]	; (8005eec <vQueueAddToRegistry+0x50>)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10b      	bne.n	8005ed0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005eb8:	490c      	ldr	r1, [pc, #48]	; (8005eec <vQueueAddToRegistry+0x50>)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ec2:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <vQueueAddToRegistry+0x50>)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4413      	add	r3, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ece:	e006      	b.n	8005ede <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b07      	cmp	r3, #7
 8005eda:	d9e7      	bls.n	8005eac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	2000100c 	.word	0x2000100c

08005ef0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e016      	b.n	8005f2c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005efe:	4a10      	ldr	r2, [pc, #64]	; (8005f40 <vQueueUnregisterQueue+0x50>)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	4413      	add	r3, r2
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d10b      	bne.n	8005f26 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005f0e:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <vQueueUnregisterQueue+0x50>)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2100      	movs	r1, #0
 8005f14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005f18:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <vQueueUnregisterQueue+0x50>)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	4413      	add	r3, r2
 8005f20:	2200      	movs	r2, #0
 8005f22:	605a      	str	r2, [r3, #4]
				break;
 8005f24:	e006      	b.n	8005f34 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b07      	cmp	r3, #7
 8005f30:	d9e5      	bls.n	8005efe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005f32:	bf00      	nop
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	2000100c 	.word	0x2000100c

08005f44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f54:	f001 fd86 	bl	8007a64 <vPortEnterCritical>
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f5e:	b25b      	sxtb	r3, r3
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d103      	bne.n	8005f6e <vQueueWaitForMessageRestricted+0x2a>
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f74:	b25b      	sxtb	r3, r3
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d103      	bne.n	8005f84 <vQueueWaitForMessageRestricted+0x40>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f84:	f001 fd9e 	bl	8007ac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d106      	bne.n	8005f9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	3324      	adds	r3, #36	; 0x24
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 fc61 	bl	8006860 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f9e:	6978      	ldr	r0, [r7, #20]
 8005fa0:	f7ff fefb 	bl	8005d9a <prvUnlockQueue>
	}
 8005fa4:	bf00      	nop
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08e      	sub	sp, #56	; 0x38
 8005fb0:	af04      	add	r7, sp, #16
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	623b      	str	r3, [r7, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	61fb      	str	r3, [r7, #28]
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ff2:	23bc      	movs	r3, #188	; 0xbc
 8005ff4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2bbc      	cmp	r3, #188	; 0xbc
 8005ffa:	d00a      	beq.n	8006012 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	61bb      	str	r3, [r7, #24]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006012:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01e      	beq.n	8006058 <xTaskCreateStatic+0xac>
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01b      	beq.n	8006058 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006028:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	2202      	movs	r2, #2
 800602e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006032:	2300      	movs	r3, #0
 8006034:	9303      	str	r3, [sp, #12]
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	9302      	str	r3, [sp, #8]
 800603a:	f107 0314 	add.w	r3, r7, #20
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f850 	bl	80060f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006052:	f000 f8f3 	bl	800623c <prvAddNewTaskToReadyList>
 8006056:	e001      	b.n	800605c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800605c:	697b      	ldr	r3, [r7, #20]
	}
 800605e:	4618      	mov	r0, r3
 8006060:	3728      	adds	r7, #40	; 0x28
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006066:	b580      	push	{r7, lr}
 8006068:	b08c      	sub	sp, #48	; 0x30
 800606a:	af04      	add	r7, sp, #16
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4618      	mov	r0, r3
 800607c:	f001 fe14 	bl	8007ca8 <pvPortMalloc>
 8006080:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00e      	beq.n	80060a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006088:	20bc      	movs	r0, #188	; 0xbc
 800608a:	f001 fe0d 	bl	8007ca8 <pvPortMalloc>
 800608e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
 800609c:	e005      	b.n	80060aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800609e:	6978      	ldr	r0, [r7, #20]
 80060a0:	f001 fece 	bl	8007e40 <vPortFree>
 80060a4:	e001      	b.n	80060aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d017      	beq.n	80060e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060b8:	88fa      	ldrh	r2, [r7, #6]
 80060ba:	2300      	movs	r3, #0
 80060bc:	9303      	str	r3, [sp, #12]
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	9302      	str	r3, [sp, #8]
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	9301      	str	r3, [sp, #4]
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f80e 	bl	80060f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060d4:	69f8      	ldr	r0, [r7, #28]
 80060d6:	f000 f8b1 	bl	800623c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060da:	2301      	movs	r3, #1
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	e002      	b.n	80060e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295
 80060e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060e6:	69bb      	ldr	r3, [r7, #24]
	}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	461a      	mov	r2, r3
 8006108:	21a5      	movs	r1, #165	; 0xa5
 800610a:	f001 ffeb 	bl	80080e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006118:	3b01      	subs	r3, #1
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f023 0307 	bic.w	r3, r3, #7
 8006126:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	617b      	str	r3, [r7, #20]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01f      	beq.n	800618e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	e012      	b.n	800617a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	7819      	ldrb	r1, [r3, #0]
 800615c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	3334      	adds	r3, #52	; 0x34
 8006164:	460a      	mov	r2, r1
 8006166:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d006      	beq.n	8006182 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	3301      	adds	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	2b0f      	cmp	r3, #15
 800617e:	d9e9      	bls.n	8006154 <prvInitialiseNewTask+0x64>
 8006180:	e000      	b.n	8006184 <prvInitialiseNewTask+0x94>
			{
				break;
 8006182:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800618c:	e003      	b.n	8006196 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	2b37      	cmp	r3, #55	; 0x37
 800619a:	d901      	bls.n	80061a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800619c:	2337      	movs	r3, #55	; 0x37
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	2200      	movs	r2, #0
 80061b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	3304      	adds	r3, #4
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fee2 	bl	8004f80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	3318      	adds	r3, #24
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe fedd 	bl	8004f80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	3354      	adds	r3, #84	; 0x54
 80061f0:	2260      	movs	r2, #96	; 0x60
 80061f2:	2100      	movs	r1, #0
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 ff75 	bl	80080e4 <memset>
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	4a0c      	ldr	r2, [pc, #48]	; (8006230 <prvInitialiseNewTask+0x140>)
 80061fe:	659a      	str	r2, [r3, #88]	; 0x58
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	4a0c      	ldr	r2, [pc, #48]	; (8006234 <prvInitialiseNewTask+0x144>)
 8006204:	65da      	str	r2, [r3, #92]	; 0x5c
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	4a0b      	ldr	r2, [pc, #44]	; (8006238 <prvInitialiseNewTask+0x148>)
 800620a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	68f9      	ldr	r1, [r7, #12]
 8006210:	69b8      	ldr	r0, [r7, #24]
 8006212:	f001 faf9 	bl	8007808 <pxPortInitialiseStack>
 8006216:	4602      	mov	r2, r0
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006226:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006228:	bf00      	nop
 800622a:	3720      	adds	r7, #32
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	0800a48c 	.word	0x0800a48c
 8006234:	0800a4ac 	.word	0x0800a4ac
 8006238:	0800a46c 	.word	0x0800a46c

0800623c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006244:	f001 fc0e 	bl	8007a64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006248:	4b2d      	ldr	r3, [pc, #180]	; (8006300 <prvAddNewTaskToReadyList+0xc4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	4a2c      	ldr	r2, [pc, #176]	; (8006300 <prvAddNewTaskToReadyList+0xc4>)
 8006250:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006252:	4b2c      	ldr	r3, [pc, #176]	; (8006304 <prvAddNewTaskToReadyList+0xc8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800625a:	4a2a      	ldr	r2, [pc, #168]	; (8006304 <prvAddNewTaskToReadyList+0xc8>)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006260:	4b27      	ldr	r3, [pc, #156]	; (8006300 <prvAddNewTaskToReadyList+0xc4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d110      	bne.n	800628a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006268:	f000 fc26 	bl	8006ab8 <prvInitialiseTaskLists>
 800626c:	e00d      	b.n	800628a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800626e:	4b26      	ldr	r3, [pc, #152]	; (8006308 <prvAddNewTaskToReadyList+0xcc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006276:	4b23      	ldr	r3, [pc, #140]	; (8006304 <prvAddNewTaskToReadyList+0xc8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	429a      	cmp	r2, r3
 8006282:	d802      	bhi.n	800628a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006284:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <prvAddNewTaskToReadyList+0xc8>)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800628a:	4b20      	ldr	r3, [pc, #128]	; (800630c <prvAddNewTaskToReadyList+0xd0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3301      	adds	r3, #1
 8006290:	4a1e      	ldr	r2, [pc, #120]	; (800630c <prvAddNewTaskToReadyList+0xd0>)
 8006292:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006294:	4b1d      	ldr	r3, [pc, #116]	; (800630c <prvAddNewTaskToReadyList+0xd0>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a0:	4b1b      	ldr	r3, [pc, #108]	; (8006310 <prvAddNewTaskToReadyList+0xd4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d903      	bls.n	80062b0 <prvAddNewTaskToReadyList+0x74>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	4a18      	ldr	r2, [pc, #96]	; (8006310 <prvAddNewTaskToReadyList+0xd4>)
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4a15      	ldr	r2, [pc, #84]	; (8006314 <prvAddNewTaskToReadyList+0xd8>)
 80062be:	441a      	add	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f7fe fe67 	bl	8004f9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062cc:	f001 fbfa 	bl	8007ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062d0:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <prvAddNewTaskToReadyList+0xcc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00e      	beq.n	80062f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062d8:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <prvAddNewTaskToReadyList+0xc8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d207      	bcs.n	80062f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062e6:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <prvAddNewTaskToReadyList+0xdc>)
 80062e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062f6:	bf00      	nop
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20001520 	.word	0x20001520
 8006304:	2000104c 	.word	0x2000104c
 8006308:	2000152c 	.word	0x2000152c
 800630c:	2000153c 	.word	0x2000153c
 8006310:	20001528 	.word	0x20001528
 8006314:	20001050 	.word	0x20001050
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d017      	beq.n	800635e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <vTaskDelay+0x60>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <vTaskDelay+0x30>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60bb      	str	r3, [r7, #8]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800634c:	f000 f88a 	bl	8006464 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006350:	2100      	movs	r1, #0
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fdfc 	bl	8006f50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006358:	f000 f892 	bl	8006480 <xTaskResumeAll>
 800635c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d107      	bne.n	8006374 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006364:	4b06      	ldr	r3, [pc, #24]	; (8006380 <vTaskDelay+0x64>)
 8006366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006374:	bf00      	nop
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20001548 	.word	0x20001548
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	; 0x28
 8006388:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006392:	463a      	mov	r2, r7
 8006394:	1d39      	adds	r1, r7, #4
 8006396:	f107 0308 	add.w	r3, r7, #8
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe fd9c 	bl	8004ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	9202      	str	r2, [sp, #8]
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	2300      	movs	r3, #0
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	2300      	movs	r3, #0
 80063b0:	460a      	mov	r2, r1
 80063b2:	4924      	ldr	r1, [pc, #144]	; (8006444 <vTaskStartScheduler+0xc0>)
 80063b4:	4824      	ldr	r0, [pc, #144]	; (8006448 <vTaskStartScheduler+0xc4>)
 80063b6:	f7ff fdf9 	bl	8005fac <xTaskCreateStatic>
 80063ba:	4603      	mov	r3, r0
 80063bc:	4a23      	ldr	r2, [pc, #140]	; (800644c <vTaskStartScheduler+0xc8>)
 80063be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063c0:	4b22      	ldr	r3, [pc, #136]	; (800644c <vTaskStartScheduler+0xc8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063c8:	2301      	movs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e001      	b.n	80063d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d102      	bne.n	80063de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063d8:	f000 fe0e 	bl	8006ff8 <xTimerCreateTimerTask>
 80063dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d11b      	bne.n	800641c <vTaskStartScheduler+0x98>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	613b      	str	r3, [r7, #16]
}
 80063f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063f8:	4b15      	ldr	r3, [pc, #84]	; (8006450 <vTaskStartScheduler+0xcc>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3354      	adds	r3, #84	; 0x54
 80063fe:	4a15      	ldr	r2, [pc, #84]	; (8006454 <vTaskStartScheduler+0xd0>)
 8006400:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006402:	4b15      	ldr	r3, [pc, #84]	; (8006458 <vTaskStartScheduler+0xd4>)
 8006404:	f04f 32ff 	mov.w	r2, #4294967295
 8006408:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800640a:	4b14      	ldr	r3, [pc, #80]	; (800645c <vTaskStartScheduler+0xd8>)
 800640c:	2201      	movs	r2, #1
 800640e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006410:	4b13      	ldr	r3, [pc, #76]	; (8006460 <vTaskStartScheduler+0xdc>)
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006416:	f001 fa83 	bl	8007920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800641a:	e00e      	b.n	800643a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006422:	d10a      	bne.n	800643a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	60fb      	str	r3, [r7, #12]
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <vTaskStartScheduler+0xb4>
}
 800643a:	bf00      	nop
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	080082c8 	.word	0x080082c8
 8006448:	08006a89 	.word	0x08006a89
 800644c:	20001544 	.word	0x20001544
 8006450:	2000104c 	.word	0x2000104c
 8006454:	20000010 	.word	0x20000010
 8006458:	20001540 	.word	0x20001540
 800645c:	2000152c 	.word	0x2000152c
 8006460:	20001524 	.word	0x20001524

08006464 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006468:	4b04      	ldr	r3, [pc, #16]	; (800647c <vTaskSuspendAll+0x18>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3301      	adds	r3, #1
 800646e:	4a03      	ldr	r2, [pc, #12]	; (800647c <vTaskSuspendAll+0x18>)
 8006470:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006472:	bf00      	nop
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20001548 	.word	0x20001548

08006480 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800648a:	2300      	movs	r3, #0
 800648c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800648e:	4b42      	ldr	r3, [pc, #264]	; (8006598 <xTaskResumeAll+0x118>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <xTaskResumeAll+0x2c>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	603b      	str	r3, [r7, #0]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064ac:	f001 fada 	bl	8007a64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064b0:	4b39      	ldr	r3, [pc, #228]	; (8006598 <xTaskResumeAll+0x118>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	4a38      	ldr	r2, [pc, #224]	; (8006598 <xTaskResumeAll+0x118>)
 80064b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ba:	4b37      	ldr	r3, [pc, #220]	; (8006598 <xTaskResumeAll+0x118>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d162      	bne.n	8006588 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064c2:	4b36      	ldr	r3, [pc, #216]	; (800659c <xTaskResumeAll+0x11c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d05e      	beq.n	8006588 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064ca:	e02f      	b.n	800652c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064cc:	4b34      	ldr	r3, [pc, #208]	; (80065a0 <xTaskResumeAll+0x120>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3318      	adds	r3, #24
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe fdbb 	bl	8005054 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fdb6 	bl	8005054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ec:	4b2d      	ldr	r3, [pc, #180]	; (80065a4 <xTaskResumeAll+0x124>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d903      	bls.n	80064fc <xTaskResumeAll+0x7c>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	4a2a      	ldr	r2, [pc, #168]	; (80065a4 <xTaskResumeAll+0x124>)
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4a27      	ldr	r2, [pc, #156]	; (80065a8 <xTaskResumeAll+0x128>)
 800650a:	441a      	add	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3304      	adds	r3, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f7fe fd41 	bl	8004f9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651c:	4b23      	ldr	r3, [pc, #140]	; (80065ac <xTaskResumeAll+0x12c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006522:	429a      	cmp	r2, r3
 8006524:	d302      	bcc.n	800652c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006526:	4b22      	ldr	r3, [pc, #136]	; (80065b0 <xTaskResumeAll+0x130>)
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800652c:	4b1c      	ldr	r3, [pc, #112]	; (80065a0 <xTaskResumeAll+0x120>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1cb      	bne.n	80064cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800653a:	f000 fb5f 	bl	8006bfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800653e:	4b1d      	ldr	r3, [pc, #116]	; (80065b4 <xTaskResumeAll+0x134>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d010      	beq.n	800656c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800654a:	f000 f847 	bl	80065dc <xTaskIncrementTick>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006554:	4b16      	ldr	r3, [pc, #88]	; (80065b0 <xTaskResumeAll+0x130>)
 8006556:	2201      	movs	r2, #1
 8006558:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3b01      	subs	r3, #1
 800655e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f1      	bne.n	800654a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006566:	4b13      	ldr	r3, [pc, #76]	; (80065b4 <xTaskResumeAll+0x134>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <xTaskResumeAll+0x130>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d009      	beq.n	8006588 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006574:	2301      	movs	r3, #1
 8006576:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <xTaskResumeAll+0x138>)
 800657a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006588:	f001 fa9c 	bl	8007ac4 <vPortExitCritical>

	return xAlreadyYielded;
 800658c:	68bb      	ldr	r3, [r7, #8]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20001548 	.word	0x20001548
 800659c:	20001520 	.word	0x20001520
 80065a0:	200014e0 	.word	0x200014e0
 80065a4:	20001528 	.word	0x20001528
 80065a8:	20001050 	.word	0x20001050
 80065ac:	2000104c 	.word	0x2000104c
 80065b0:	20001534 	.word	0x20001534
 80065b4:	20001530 	.word	0x20001530
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065c2:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <xTaskGetTickCount+0x1c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065c8:	687b      	ldr	r3, [r7, #4]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	20001524 	.word	0x20001524

080065dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065e6:	4b4f      	ldr	r3, [pc, #316]	; (8006724 <xTaskIncrementTick+0x148>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f040 808f 	bne.w	800670e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065f0:	4b4d      	ldr	r3, [pc, #308]	; (8006728 <xTaskIncrementTick+0x14c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065f8:	4a4b      	ldr	r2, [pc, #300]	; (8006728 <xTaskIncrementTick+0x14c>)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d120      	bne.n	8006646 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006604:	4b49      	ldr	r3, [pc, #292]	; (800672c <xTaskIncrementTick+0x150>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <xTaskIncrementTick+0x48>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	603b      	str	r3, [r7, #0]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <xTaskIncrementTick+0x46>
 8006624:	4b41      	ldr	r3, [pc, #260]	; (800672c <xTaskIncrementTick+0x150>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	4b41      	ldr	r3, [pc, #260]	; (8006730 <xTaskIncrementTick+0x154>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a3f      	ldr	r2, [pc, #252]	; (800672c <xTaskIncrementTick+0x150>)
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	4a3f      	ldr	r2, [pc, #252]	; (8006730 <xTaskIncrementTick+0x154>)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	4b3e      	ldr	r3, [pc, #248]	; (8006734 <xTaskIncrementTick+0x158>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3301      	adds	r3, #1
 800663e:	4a3d      	ldr	r2, [pc, #244]	; (8006734 <xTaskIncrementTick+0x158>)
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	f000 fadb 	bl	8006bfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006646:	4b3c      	ldr	r3, [pc, #240]	; (8006738 <xTaskIncrementTick+0x15c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	429a      	cmp	r2, r3
 800664e:	d349      	bcc.n	80066e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006650:	4b36      	ldr	r3, [pc, #216]	; (800672c <xTaskIncrementTick+0x150>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d104      	bne.n	8006664 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800665a:	4b37      	ldr	r3, [pc, #220]	; (8006738 <xTaskIncrementTick+0x15c>)
 800665c:	f04f 32ff 	mov.w	r2, #4294967295
 8006660:	601a      	str	r2, [r3, #0]
					break;
 8006662:	e03f      	b.n	80066e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006664:	4b31      	ldr	r3, [pc, #196]	; (800672c <xTaskIncrementTick+0x150>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	429a      	cmp	r2, r3
 800667a:	d203      	bcs.n	8006684 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800667c:	4a2e      	ldr	r2, [pc, #184]	; (8006738 <xTaskIncrementTick+0x15c>)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006682:	e02f      	b.n	80066e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	3304      	adds	r3, #4
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe fce3 	bl	8005054 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	3318      	adds	r3, #24
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe fcda 	bl	8005054 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	4b25      	ldr	r3, [pc, #148]	; (800673c <xTaskIncrementTick+0x160>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d903      	bls.n	80066b4 <xTaskIncrementTick+0xd8>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	4a22      	ldr	r2, [pc, #136]	; (800673c <xTaskIncrementTick+0x160>)
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <xTaskIncrementTick+0x164>)
 80066c2:	441a      	add	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f7fe fc65 	bl	8004f9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d4:	4b1b      	ldr	r3, [pc, #108]	; (8006744 <xTaskIncrementTick+0x168>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	429a      	cmp	r2, r3
 80066dc:	d3b8      	bcc.n	8006650 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80066de:	2301      	movs	r3, #1
 80066e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066e2:	e7b5      	b.n	8006650 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066e4:	4b17      	ldr	r3, [pc, #92]	; (8006744 <xTaskIncrementTick+0x168>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ea:	4915      	ldr	r1, [pc, #84]	; (8006740 <xTaskIncrementTick+0x164>)
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d901      	bls.n	8006700 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80066fc:	2301      	movs	r3, #1
 80066fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006700:	4b11      	ldr	r3, [pc, #68]	; (8006748 <xTaskIncrementTick+0x16c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d007      	beq.n	8006718 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	e004      	b.n	8006718 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800670e:	4b0f      	ldr	r3, [pc, #60]	; (800674c <xTaskIncrementTick+0x170>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3301      	adds	r3, #1
 8006714:	4a0d      	ldr	r2, [pc, #52]	; (800674c <xTaskIncrementTick+0x170>)
 8006716:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006718:	697b      	ldr	r3, [r7, #20]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20001548 	.word	0x20001548
 8006728:	20001524 	.word	0x20001524
 800672c:	200014d8 	.word	0x200014d8
 8006730:	200014dc 	.word	0x200014dc
 8006734:	20001538 	.word	0x20001538
 8006738:	20001540 	.word	0x20001540
 800673c:	20001528 	.word	0x20001528
 8006740:	20001050 	.word	0x20001050
 8006744:	2000104c 	.word	0x2000104c
 8006748:	20001534 	.word	0x20001534
 800674c:	20001530 	.word	0x20001530

08006750 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006756:	4b2a      	ldr	r3, [pc, #168]	; (8006800 <vTaskSwitchContext+0xb0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800675e:	4b29      	ldr	r3, [pc, #164]	; (8006804 <vTaskSwitchContext+0xb4>)
 8006760:	2201      	movs	r2, #1
 8006762:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006764:	e046      	b.n	80067f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <vTaskSwitchContext+0xb4>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800676c:	4b26      	ldr	r3, [pc, #152]	; (8006808 <vTaskSwitchContext+0xb8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	e010      	b.n	8006796 <vTaskSwitchContext+0x46>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10a      	bne.n	8006790 <vTaskSwitchContext+0x40>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	607b      	str	r3, [r7, #4]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <vTaskSwitchContext+0x3e>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3b01      	subs	r3, #1
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	491d      	ldr	r1, [pc, #116]	; (800680c <vTaskSwitchContext+0xbc>)
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0e4      	beq.n	8006774 <vTaskSwitchContext+0x24>
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4613      	mov	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4a15      	ldr	r2, [pc, #84]	; (800680c <vTaskSwitchContext+0xbc>)
 80067b6:	4413      	add	r3, r2
 80067b8:	60bb      	str	r3, [r7, #8]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	605a      	str	r2, [r3, #4]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	3308      	adds	r3, #8
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d104      	bne.n	80067da <vTaskSwitchContext+0x8a>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	4a0b      	ldr	r2, [pc, #44]	; (8006810 <vTaskSwitchContext+0xc0>)
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	4a08      	ldr	r2, [pc, #32]	; (8006808 <vTaskSwitchContext+0xb8>)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067ea:	4b09      	ldr	r3, [pc, #36]	; (8006810 <vTaskSwitchContext+0xc0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3354      	adds	r3, #84	; 0x54
 80067f0:	4a08      	ldr	r2, [pc, #32]	; (8006814 <vTaskSwitchContext+0xc4>)
 80067f2:	6013      	str	r3, [r2, #0]
}
 80067f4:	bf00      	nop
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	20001548 	.word	0x20001548
 8006804:	20001534 	.word	0x20001534
 8006808:	20001528 	.word	0x20001528
 800680c:	20001050 	.word	0x20001050
 8006810:	2000104c 	.word	0x2000104c
 8006814:	20000010 	.word	0x20000010

08006818 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	60fb      	str	r3, [r7, #12]
}
 800683a:	bf00      	nop
 800683c:	e7fe      	b.n	800683c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800683e:	4b07      	ldr	r3, [pc, #28]	; (800685c <vTaskPlaceOnEventList+0x44>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3318      	adds	r3, #24
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fe fbcb 	bl	8004fe2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800684c:	2101      	movs	r1, #1
 800684e:	6838      	ldr	r0, [r7, #0]
 8006850:	f000 fb7e 	bl	8006f50 <prvAddCurrentTaskToDelayedList>
}
 8006854:	bf00      	nop
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	2000104c 	.word	0x2000104c

08006860 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	617b      	str	r3, [r7, #20]
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006888:	4b0a      	ldr	r3, [pc, #40]	; (80068b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3318      	adds	r3, #24
 800688e:	4619      	mov	r1, r3
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7fe fb82 	bl	8004f9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800689c:	f04f 33ff 	mov.w	r3, #4294967295
 80068a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	68b8      	ldr	r0, [r7, #8]
 80068a6:	f000 fb53 	bl	8006f50 <prvAddCurrentTaskToDelayedList>
	}
 80068aa:	bf00      	nop
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	2000104c 	.word	0x2000104c

080068b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	60fb      	str	r3, [r7, #12]
}
 80068e0:	bf00      	nop
 80068e2:	e7fe      	b.n	80068e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3318      	adds	r3, #24
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe fbb3 	bl	8005054 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ee:	4b1e      	ldr	r3, [pc, #120]	; (8006968 <xTaskRemoveFromEventList+0xb0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d11d      	bne.n	8006932 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fbaa 	bl	8005054 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006904:	4b19      	ldr	r3, [pc, #100]	; (800696c <xTaskRemoveFromEventList+0xb4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d903      	bls.n	8006914 <xTaskRemoveFromEventList+0x5c>
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	4a16      	ldr	r2, [pc, #88]	; (800696c <xTaskRemoveFromEventList+0xb4>)
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4a13      	ldr	r2, [pc, #76]	; (8006970 <xTaskRemoveFromEventList+0xb8>)
 8006922:	441a      	add	r2, r3
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	3304      	adds	r3, #4
 8006928:	4619      	mov	r1, r3
 800692a:	4610      	mov	r0, r2
 800692c:	f7fe fb35 	bl	8004f9a <vListInsertEnd>
 8006930:	e005      	b.n	800693e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	3318      	adds	r3, #24
 8006936:	4619      	mov	r1, r3
 8006938:	480e      	ldr	r0, [pc, #56]	; (8006974 <xTaskRemoveFromEventList+0xbc>)
 800693a:	f7fe fb2e 	bl	8004f9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <xTaskRemoveFromEventList+0xc0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	429a      	cmp	r2, r3
 800694a:	d905      	bls.n	8006958 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800694c:	2301      	movs	r3, #1
 800694e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <xTaskRemoveFromEventList+0xc4>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	e001      	b.n	800695c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800695c:	697b      	ldr	r3, [r7, #20]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20001548 	.word	0x20001548
 800696c:	20001528 	.word	0x20001528
 8006970:	20001050 	.word	0x20001050
 8006974:	200014e0 	.word	0x200014e0
 8006978:	2000104c 	.word	0x2000104c
 800697c:	20001534 	.word	0x20001534

08006980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <vTaskInternalSetTimeOutState+0x24>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006990:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <vTaskInternalSetTimeOutState+0x28>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	605a      	str	r2, [r3, #4]
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	20001538 	.word	0x20001538
 80069a8:	20001524 	.word	0x20001524

080069ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	613b      	str	r3, [r7, #16]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	60fb      	str	r3, [r7, #12]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80069ee:	f001 f839 	bl	8007a64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069f2:	4b1d      	ldr	r3, [pc, #116]	; (8006a68 <xTaskCheckForTimeOut+0xbc>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d102      	bne.n	8006a12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61fb      	str	r3, [r7, #28]
 8006a10:	e023      	b.n	8006a5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4b15      	ldr	r3, [pc, #84]	; (8006a6c <xTaskCheckForTimeOut+0xc0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d007      	beq.n	8006a2e <xTaskCheckForTimeOut+0x82>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d302      	bcc.n	8006a2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	e015      	b.n	8006a5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d20b      	bcs.n	8006a50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	1ad2      	subs	r2, r2, r3
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff ff9b 	bl	8006980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	e004      	b.n	8006a5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a56:	2301      	movs	r3, #1
 8006a58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a5a:	f001 f833 	bl	8007ac4 <vPortExitCritical>

	return xReturn;
 8006a5e:	69fb      	ldr	r3, [r7, #28]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3720      	adds	r7, #32
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20001524 	.word	0x20001524
 8006a6c:	20001538 	.word	0x20001538

08006a70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a74:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <vTaskMissedYield+0x14>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	601a      	str	r2, [r3, #0]
}
 8006a7a:	bf00      	nop
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	20001534 	.word	0x20001534

08006a88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a90:	f000 f852 	bl	8006b38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a94:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <prvIdleTask+0x28>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d9f9      	bls.n	8006a90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <prvIdleTask+0x2c>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006aac:	e7f0      	b.n	8006a90 <prvIdleTask+0x8>
 8006aae:	bf00      	nop
 8006ab0:	20001050 	.word	0x20001050
 8006ab4:	e000ed04 	.word	0xe000ed04

08006ab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006abe:	2300      	movs	r3, #0
 8006ac0:	607b      	str	r3, [r7, #4]
 8006ac2:	e00c      	b.n	8006ade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4a12      	ldr	r2, [pc, #72]	; (8006b18 <prvInitialiseTaskLists+0x60>)
 8006ad0:	4413      	add	r3, r2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fa34 	bl	8004f40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3301      	adds	r3, #1
 8006adc:	607b      	str	r3, [r7, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b37      	cmp	r3, #55	; 0x37
 8006ae2:	d9ef      	bls.n	8006ac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ae4:	480d      	ldr	r0, [pc, #52]	; (8006b1c <prvInitialiseTaskLists+0x64>)
 8006ae6:	f7fe fa2b 	bl	8004f40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006aea:	480d      	ldr	r0, [pc, #52]	; (8006b20 <prvInitialiseTaskLists+0x68>)
 8006aec:	f7fe fa28 	bl	8004f40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006af0:	480c      	ldr	r0, [pc, #48]	; (8006b24 <prvInitialiseTaskLists+0x6c>)
 8006af2:	f7fe fa25 	bl	8004f40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006af6:	480c      	ldr	r0, [pc, #48]	; (8006b28 <prvInitialiseTaskLists+0x70>)
 8006af8:	f7fe fa22 	bl	8004f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006afc:	480b      	ldr	r0, [pc, #44]	; (8006b2c <prvInitialiseTaskLists+0x74>)
 8006afe:	f7fe fa1f 	bl	8004f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b02:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <prvInitialiseTaskLists+0x78>)
 8006b04:	4a05      	ldr	r2, [pc, #20]	; (8006b1c <prvInitialiseTaskLists+0x64>)
 8006b06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b08:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <prvInitialiseTaskLists+0x7c>)
 8006b0a:	4a05      	ldr	r2, [pc, #20]	; (8006b20 <prvInitialiseTaskLists+0x68>)
 8006b0c:	601a      	str	r2, [r3, #0]
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20001050 	.word	0x20001050
 8006b1c:	200014b0 	.word	0x200014b0
 8006b20:	200014c4 	.word	0x200014c4
 8006b24:	200014e0 	.word	0x200014e0
 8006b28:	200014f4 	.word	0x200014f4
 8006b2c:	2000150c 	.word	0x2000150c
 8006b30:	200014d8 	.word	0x200014d8
 8006b34:	200014dc 	.word	0x200014dc

08006b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b3e:	e019      	b.n	8006b74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b40:	f000 ff90 	bl	8007a64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b44:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <prvCheckTasksWaitingTermination+0x50>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3304      	adds	r3, #4
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fe fa7f 	bl	8005054 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <prvCheckTasksWaitingTermination+0x54>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	4a0b      	ldr	r2, [pc, #44]	; (8006b8c <prvCheckTasksWaitingTermination+0x54>)
 8006b5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b60:	4b0b      	ldr	r3, [pc, #44]	; (8006b90 <prvCheckTasksWaitingTermination+0x58>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	4a0a      	ldr	r2, [pc, #40]	; (8006b90 <prvCheckTasksWaitingTermination+0x58>)
 8006b68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b6a:	f000 ffab 	bl	8007ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f810 	bl	8006b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <prvCheckTasksWaitingTermination+0x58>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e1      	bne.n	8006b40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	200014f4 	.word	0x200014f4
 8006b8c:	20001520 	.word	0x20001520
 8006b90:	20001508 	.word	0x20001508

08006b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3354      	adds	r3, #84	; 0x54
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 fab5 	bl	8008110 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d108      	bne.n	8006bc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 f943 	bl	8007e40 <vPortFree>
				vPortFree( pxTCB );
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f001 f940 	bl	8007e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bc0:	e018      	b.n	8006bf4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d103      	bne.n	8006bd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f937 	bl	8007e40 <vPortFree>
	}
 8006bd2:	e00f      	b.n	8006bf4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d00a      	beq.n	8006bf4 <prvDeleteTCB+0x60>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	60fb      	str	r3, [r7, #12]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <prvDeleteTCB+0x5e>
	}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c02:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <prvResetNextTaskUnblockTime+0x38>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d104      	bne.n	8006c16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <prvResetNextTaskUnblockTime+0x3c>)
 8006c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c14:	e008      	b.n	8006c28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c16:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <prvResetNextTaskUnblockTime+0x38>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	4a04      	ldr	r2, [pc, #16]	; (8006c38 <prvResetNextTaskUnblockTime+0x3c>)
 8006c26:	6013      	str	r3, [r2, #0]
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	200014d8 	.word	0x200014d8
 8006c38:	20001540 	.word	0x20001540

08006c3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c42:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <xTaskGetSchedulerState+0x34>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d102      	bne.n	8006c50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	607b      	str	r3, [r7, #4]
 8006c4e:	e008      	b.n	8006c62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c50:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <xTaskGetSchedulerState+0x38>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	607b      	str	r3, [r7, #4]
 8006c5c:	e001      	b.n	8006c62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c62:	687b      	ldr	r3, [r7, #4]
	}
 8006c64:	4618      	mov	r0, r3
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	2000152c 	.word	0x2000152c
 8006c74:	20001548 	.word	0x20001548

08006c78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d051      	beq.n	8006d32 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c92:	4b2a      	ldr	r3, [pc, #168]	; (8006d3c <xTaskPriorityInherit+0xc4>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d241      	bcs.n	8006d20 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	db06      	blt.n	8006cb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca4:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <xTaskPriorityInherit+0xc4>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6959      	ldr	r1, [r3, #20]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4a1f      	ldr	r2, [pc, #124]	; (8006d40 <xTaskPriorityInherit+0xc8>)
 8006cc4:	4413      	add	r3, r2
 8006cc6:	4299      	cmp	r1, r3
 8006cc8:	d122      	bne.n	8006d10 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe f9c0 	bl	8005054 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cd4:	4b19      	ldr	r3, [pc, #100]	; (8006d3c <xTaskPriorityInherit+0xc4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce2:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <xTaskPriorityInherit+0xcc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d903      	bls.n	8006cf2 <xTaskPriorityInherit+0x7a>
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cee:	4a15      	ldr	r2, [pc, #84]	; (8006d44 <xTaskPriorityInherit+0xcc>)
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4a10      	ldr	r2, [pc, #64]	; (8006d40 <xTaskPriorityInherit+0xc8>)
 8006d00:	441a      	add	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7fe f946 	bl	8004f9a <vListInsertEnd>
 8006d0e:	e004      	b.n	8006d1a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <xTaskPriorityInherit+0xc4>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e008      	b.n	8006d32 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <xTaskPriorityInherit+0xc4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d201      	bcs.n	8006d32 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d32:	68fb      	ldr	r3, [r7, #12]
	}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	2000104c 	.word	0x2000104c
 8006d40:	20001050 	.word	0x20001050
 8006d44:	20001528 	.word	0x20001528

08006d48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d056      	beq.n	8006e0c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d5e:	4b2e      	ldr	r3, [pc, #184]	; (8006e18 <xTaskPriorityDisinherit+0xd0>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d00a      	beq.n	8006d7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	60fb      	str	r3, [r7, #12]
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	60bb      	str	r3, [r7, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da0:	1e5a      	subs	r2, r3, #1
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d02c      	beq.n	8006e0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d128      	bne.n	8006e0c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fe f948 	bl	8005054 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <xTaskPriorityDisinherit+0xd4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d903      	bls.n	8006dec <xTaskPriorityDisinherit+0xa4>
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	4a0c      	ldr	r2, [pc, #48]	; (8006e1c <xTaskPriorityDisinherit+0xd4>)
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <xTaskPriorityDisinherit+0xd8>)
 8006dfa:	441a      	add	r2, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	4619      	mov	r1, r3
 8006e02:	4610      	mov	r0, r2
 8006e04:	f7fe f8c9 	bl	8004f9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e0c:	697b      	ldr	r3, [r7, #20]
	}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	2000104c 	.word	0x2000104c
 8006e1c:	20001528 	.word	0x20001528
 8006e20:	20001050 	.word	0x20001050

08006e24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e32:	2301      	movs	r3, #1
 8006e34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d06a      	beq.n	8006f12 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	60fb      	str	r3, [r7, #12]
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d902      	bls.n	8006e6a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	61fb      	str	r3, [r7, #28]
 8006e68:	e002      	b.n	8006e70 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d04b      	beq.n	8006f12 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d146      	bne.n	8006f12 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e84:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d10a      	bne.n	8006ea4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60bb      	str	r3, [r7, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	db04      	blt.n	8006ec2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	6959      	ldr	r1, [r3, #20]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4a13      	ldr	r2, [pc, #76]	; (8006f20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006ed2:	4413      	add	r3, r2
 8006ed4:	4299      	cmp	r1, r3
 8006ed6:	d11c      	bne.n	8006f12 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	3304      	adds	r3, #4
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fe f8b9 	bl	8005054 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee6:	4b0f      	ldr	r3, [pc, #60]	; (8006f24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d903      	bls.n	8006ef6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	4a0c      	ldr	r2, [pc, #48]	; (8006f24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f04:	441a      	add	r2, r3
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	f7fe f844 	bl	8004f9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f12:	bf00      	nop
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	2000104c 	.word	0x2000104c
 8006f20:	20001050 	.word	0x20001050
 8006f24:	20001528 	.word	0x20001528

08006f28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f2c:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f34:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f3a:	3201      	adds	r2, #1
 8006f3c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006f3e:	4b03      	ldr	r3, [pc, #12]	; (8006f4c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f40:	681b      	ldr	r3, [r3, #0]
	}
 8006f42:	4618      	mov	r0, r3
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	2000104c 	.word	0x2000104c

08006f50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f5a:	4b21      	ldr	r3, [pc, #132]	; (8006fe0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f60:	4b20      	ldr	r3, [pc, #128]	; (8006fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3304      	adds	r3, #4
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe f874 	bl	8005054 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f72:	d10a      	bne.n	8006f8a <prvAddCurrentTaskToDelayedList+0x3a>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f7a:	4b1a      	ldr	r3, [pc, #104]	; (8006fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4619      	mov	r1, r3
 8006f82:	4819      	ldr	r0, [pc, #100]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f84:	f7fe f809 	bl	8004f9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f88:	e026      	b.n	8006fd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4413      	add	r3, r2
 8006f90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f92:	4b14      	ldr	r3, [pc, #80]	; (8006fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d209      	bcs.n	8006fb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fa2:	4b12      	ldr	r3, [pc, #72]	; (8006fec <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f7fe f817 	bl	8004fe2 <vListInsert>
}
 8006fb4:	e010      	b.n	8006fd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fb6:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f7fe f80d 	bl	8004fe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d202      	bcs.n	8006fd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fd2:	4a08      	ldr	r2, [pc, #32]	; (8006ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	6013      	str	r3, [r2, #0]
}
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20001524 	.word	0x20001524
 8006fe4:	2000104c 	.word	0x2000104c
 8006fe8:	2000150c 	.word	0x2000150c
 8006fec:	200014dc 	.word	0x200014dc
 8006ff0:	200014d8 	.word	0x200014d8
 8006ff4:	20001540 	.word	0x20001540

08006ff8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	; 0x28
 8006ffc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007002:	f000 fba1 	bl	8007748 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007006:	4b1c      	ldr	r3, [pc, #112]	; (8007078 <xTimerCreateTimerTask+0x80>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d021      	beq.n	8007052 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007016:	1d3a      	adds	r2, r7, #4
 8007018:	f107 0108 	add.w	r1, r7, #8
 800701c:	f107 030c 	add.w	r3, r7, #12
 8007020:	4618      	mov	r0, r3
 8007022:	f7fd ff73 	bl	8004f0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	9202      	str	r2, [sp, #8]
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	2305      	movs	r3, #5
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	2300      	movs	r3, #0
 8007036:	460a      	mov	r2, r1
 8007038:	4910      	ldr	r1, [pc, #64]	; (800707c <xTimerCreateTimerTask+0x84>)
 800703a:	4811      	ldr	r0, [pc, #68]	; (8007080 <xTimerCreateTimerTask+0x88>)
 800703c:	f7fe ffb6 	bl	8005fac <xTaskCreateStatic>
 8007040:	4603      	mov	r3, r0
 8007042:	4a10      	ldr	r2, [pc, #64]	; (8007084 <xTimerCreateTimerTask+0x8c>)
 8007044:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007046:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <xTimerCreateTimerTask+0x8c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800704e:	2301      	movs	r3, #1
 8007050:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	613b      	str	r3, [r7, #16]
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800706e:	697b      	ldr	r3, [r7, #20]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	2000157c 	.word	0x2000157c
 800707c:	080082d0 	.word	0x080082d0
 8007080:	080072f1 	.word	0x080072f1
 8007084:	20001580 	.word	0x20001580

08007088 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af02      	add	r7, sp, #8
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007096:	202c      	movs	r0, #44	; 0x2c
 8007098:	f000 fe06 	bl	8007ca8 <pvPortMalloc>
 800709c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00d      	beq.n	80070c0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 f843 	bl	8007146 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80070c0:	697b      	ldr	r3, [r7, #20]
	}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b08a      	sub	sp, #40	; 0x28
 80070ce:	af02      	add	r7, sp, #8
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
 80070d6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80070d8:	232c      	movs	r3, #44	; 0x2c
 80070da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b2c      	cmp	r3, #44	; 0x2c
 80070e0:	d00a      	beq.n	80070f8 <xTimerCreateStatic+0x2e>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	61bb      	str	r3, [r7, #24]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <xTimerCreateStatic+0x4c>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	617b      	str	r3, [r7, #20]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00d      	beq.n	800713c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 f805 	bl	8007146 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800713c:	69fb      	ldr	r3, [r7, #28]
	}
 800713e:	4618      	mov	r0, r3
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	617b      	str	r3, [r7, #20]
}
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01e      	beq.n	80071b4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007176:	f000 fae7 	bl	8007748 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	6a3a      	ldr	r2, [r7, #32]
 8007190:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	3304      	adds	r3, #4
 8007196:	4618      	mov	r0, r3
 8007198:	f7fd fef2 	bl	8004f80 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d008      	beq.n	80071b4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071a8:	f043 0304 	orr.w	r3, r3, #4
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80071b4:	bf00      	nop
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08a      	sub	sp, #40	; 0x28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	623b      	str	r3, [r7, #32]
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071ea:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <xTimerGenericCommand+0x98>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d02a      	beq.n	8007248 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b05      	cmp	r3, #5
 8007202:	dc18      	bgt.n	8007236 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007204:	f7ff fd1a 	bl	8006c3c <xTaskGetSchedulerState>
 8007208:	4603      	mov	r3, r0
 800720a:	2b02      	cmp	r3, #2
 800720c:	d109      	bne.n	8007222 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800720e:	4b11      	ldr	r3, [pc, #68]	; (8007254 <xTimerGenericCommand+0x98>)
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	f107 0110 	add.w	r1, r7, #16
 8007216:	2300      	movs	r3, #0
 8007218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721a:	f7fe f8ed 	bl	80053f8 <xQueueGenericSend>
 800721e:	6278      	str	r0, [r7, #36]	; 0x24
 8007220:	e012      	b.n	8007248 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007222:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <xTimerGenericCommand+0x98>)
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	f107 0110 	add.w	r1, r7, #16
 800722a:	2300      	movs	r3, #0
 800722c:	2200      	movs	r2, #0
 800722e:	f7fe f8e3 	bl	80053f8 <xQueueGenericSend>
 8007232:	6278      	str	r0, [r7, #36]	; 0x24
 8007234:	e008      	b.n	8007248 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007236:	4b07      	ldr	r3, [pc, #28]	; (8007254 <xTimerGenericCommand+0x98>)
 8007238:	6818      	ldr	r0, [r3, #0]
 800723a:	f107 0110 	add.w	r1, r7, #16
 800723e:	2300      	movs	r3, #0
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	f7fe f9d7 	bl	80055f4 <xQueueGenericSendFromISR>
 8007246:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800724a:	4618      	mov	r0, r3
 800724c:	3728      	adds	r7, #40	; 0x28
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	2000157c 	.word	0x2000157c

08007258 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af02      	add	r7, sp, #8
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007262:	4b22      	ldr	r3, [pc, #136]	; (80072ec <prvProcessExpiredTimer+0x94>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	3304      	adds	r3, #4
 8007270:	4618      	mov	r0, r3
 8007272:	f7fd feef 	bl	8005054 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b00      	cmp	r3, #0
 8007282:	d022      	beq.n	80072ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	18d1      	adds	r1, r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	6978      	ldr	r0, [r7, #20]
 8007292:	f000 f8d1 	bl	8007438 <prvInsertTimerInActiveList>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01f      	beq.n	80072dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800729c:	2300      	movs	r3, #0
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	2300      	movs	r3, #0
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	2100      	movs	r1, #0
 80072a6:	6978      	ldr	r0, [r7, #20]
 80072a8:	f7ff ff88 	bl	80071bc <xTimerGenericCommand>
 80072ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d113      	bne.n	80072dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	60fb      	str	r3, [r7, #12]
}
 80072c6:	bf00      	nop
 80072c8:	e7fe      	b.n	80072c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	6978      	ldr	r0, [r7, #20]
 80072e2:	4798      	blx	r3
}
 80072e4:	bf00      	nop
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20001574 	.word	0x20001574

080072f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072f8:	f107 0308 	add.w	r3, r7, #8
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f857 	bl	80073b0 <prvGetNextExpireTime>
 8007302:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4619      	mov	r1, r3
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f803 	bl	8007314 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800730e:	f000 f8d5 	bl	80074bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007312:	e7f1      	b.n	80072f8 <prvTimerTask+0x8>

08007314 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800731e:	f7ff f8a1 	bl	8006464 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007322:	f107 0308 	add.w	r3, r7, #8
 8007326:	4618      	mov	r0, r3
 8007328:	f000 f866 	bl	80073f8 <prvSampleTimeNow>
 800732c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d130      	bne.n	8007396 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <prvProcessTimerOrBlockTask+0x3c>
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	429a      	cmp	r2, r3
 8007340:	d806      	bhi.n	8007350 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007342:	f7ff f89d 	bl	8006480 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007346:	68f9      	ldr	r1, [r7, #12]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff ff85 	bl	8007258 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800734e:	e024      	b.n	800739a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d008      	beq.n	8007368 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007356:	4b13      	ldr	r3, [pc, #76]	; (80073a4 <prvProcessTimerOrBlockTask+0x90>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <prvProcessTimerOrBlockTask+0x50>
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <prvProcessTimerOrBlockTask+0x52>
 8007364:	2300      	movs	r3, #0
 8007366:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007368:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <prvProcessTimerOrBlockTask+0x94>)
 800736a:	6818      	ldr	r0, [r3, #0]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	4619      	mov	r1, r3
 8007376:	f7fe fde5 	bl	8005f44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800737a:	f7ff f881 	bl	8006480 <xTaskResumeAll>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007384:	4b09      	ldr	r3, [pc, #36]	; (80073ac <prvProcessTimerOrBlockTask+0x98>)
 8007386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	f3bf 8f6f 	isb	sy
}
 8007394:	e001      	b.n	800739a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007396:	f7ff f873 	bl	8006480 <xTaskResumeAll>
}
 800739a:	bf00      	nop
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20001578 	.word	0x20001578
 80073a8:	2000157c 	.word	0x2000157c
 80073ac:	e000ed04 	.word	0xe000ed04

080073b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073b8:	4b0e      	ldr	r3, [pc, #56]	; (80073f4 <prvGetNextExpireTime+0x44>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <prvGetNextExpireTime+0x16>
 80073c2:	2201      	movs	r2, #1
 80073c4:	e000      	b.n	80073c8 <prvGetNextExpireTime+0x18>
 80073c6:	2200      	movs	r2, #0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d105      	bne.n	80073e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073d4:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <prvGetNextExpireTime+0x44>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	e001      	b.n	80073e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073e4:	68fb      	ldr	r3, [r7, #12]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	20001574 	.word	0x20001574

080073f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007400:	f7ff f8dc 	bl	80065bc <xTaskGetTickCount>
 8007404:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007406:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <prvSampleTimeNow+0x3c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	429a      	cmp	r2, r3
 800740e:	d205      	bcs.n	800741c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007410:	f000 f936 	bl	8007680 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	e002      	b.n	8007422 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007422:	4a04      	ldr	r2, [pc, #16]	; (8007434 <prvSampleTimeNow+0x3c>)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007428:	68fb      	ldr	r3, [r7, #12]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20001584 	.word	0x20001584

08007438 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	429a      	cmp	r2, r3
 800745c:	d812      	bhi.n	8007484 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	429a      	cmp	r2, r3
 800746a:	d302      	bcc.n	8007472 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800746c:	2301      	movs	r3, #1
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	e01b      	b.n	80074aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007472:	4b10      	ldr	r3, [pc, #64]	; (80074b4 <prvInsertTimerInActiveList+0x7c>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3304      	adds	r3, #4
 800747a:	4619      	mov	r1, r3
 800747c:	4610      	mov	r0, r2
 800747e:	f7fd fdb0 	bl	8004fe2 <vListInsert>
 8007482:	e012      	b.n	80074aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d206      	bcs.n	800749a <prvInsertTimerInActiveList+0x62>
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d302      	bcc.n	800749a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	e007      	b.n	80074aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800749a:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <prvInsertTimerInActiveList+0x80>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3304      	adds	r3, #4
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f7fd fd9c 	bl	8004fe2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074aa:	697b      	ldr	r3, [r7, #20]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20001578 	.word	0x20001578
 80074b8:	20001574 	.word	0x20001574

080074bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08e      	sub	sp, #56	; 0x38
 80074c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074c2:	e0ca      	b.n	800765a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	da18      	bge.n	80074fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074ca:	1d3b      	adds	r3, r7, #4
 80074cc:	3304      	adds	r3, #4
 80074ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	61fb      	str	r3, [r7, #28]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f2:	6850      	ldr	r0, [r2, #4]
 80074f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f6:	6892      	ldr	r2, [r2, #8]
 80074f8:	4611      	mov	r1, r2
 80074fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f2c0 80aa 	blt.w	8007658 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d004      	beq.n	800751a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	3304      	adds	r3, #4
 8007514:	4618      	mov	r0, r3
 8007516:	f7fd fd9d 	bl	8005054 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800751a:	463b      	mov	r3, r7
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff ff6b 	bl	80073f8 <prvSampleTimeNow>
 8007522:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b09      	cmp	r3, #9
 8007528:	f200 8097 	bhi.w	800765a <prvProcessReceivedCommands+0x19e>
 800752c:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <prvProcessReceivedCommands+0x78>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	0800755d 	.word	0x0800755d
 8007538:	0800755d 	.word	0x0800755d
 800753c:	0800755d 	.word	0x0800755d
 8007540:	080075d1 	.word	0x080075d1
 8007544:	080075e5 	.word	0x080075e5
 8007548:	0800762f 	.word	0x0800762f
 800754c:	0800755d 	.word	0x0800755d
 8007550:	0800755d 	.word	0x0800755d
 8007554:	080075d1 	.word	0x080075d1
 8007558:	080075e5 	.word	0x080075e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007562:	f043 0301 	orr.w	r3, r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	18d1      	adds	r1, r2, r3
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757c:	f7ff ff5c 	bl	8007438 <prvInsertTimerInActiveList>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d069      	beq.n	800765a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800758c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d05e      	beq.n	800765a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	441a      	add	r2, r3
 80075a4:	2300      	movs	r3, #0
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	2300      	movs	r3, #0
 80075aa:	2100      	movs	r1, #0
 80075ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ae:	f7ff fe05 	bl	80071bc <xTimerGenericCommand>
 80075b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d14f      	bne.n	800765a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	61bb      	str	r3, [r7, #24]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80075e2:	e03a      	b.n	800765a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	617b      	str	r3, [r7, #20]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	18d1      	adds	r1, r2, r3
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007628:	f7ff ff06 	bl	8007438 <prvInsertTimerInActiveList>
					break;
 800762c:	e015      	b.n	800765a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d103      	bne.n	8007644 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800763c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800763e:	f000 fbff 	bl	8007e40 <vPortFree>
 8007642:	e00a      	b.n	800765a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800764a:	f023 0301 	bic.w	r3, r3, #1
 800764e:	b2da      	uxtb	r2, r3
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007656:	e000      	b.n	800765a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007658:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800765a:	4b08      	ldr	r3, [pc, #32]	; (800767c <prvProcessReceivedCommands+0x1c0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	1d39      	adds	r1, r7, #4
 8007660:	2200      	movs	r2, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe f862 	bl	800572c <xQueueReceive>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	f47f af2a 	bne.w	80074c4 <prvProcessReceivedCommands+0x8>
	}
}
 8007670:	bf00      	nop
 8007672:	bf00      	nop
 8007674:	3730      	adds	r7, #48	; 0x30
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	2000157c 	.word	0x2000157c

08007680 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007686:	e048      	b.n	800771a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007688:	4b2d      	ldr	r3, [pc, #180]	; (8007740 <prvSwitchTimerLists+0xc0>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007692:	4b2b      	ldr	r3, [pc, #172]	; (8007740 <prvSwitchTimerLists+0xc0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3304      	adds	r3, #4
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fd fcd7 	bl	8005054 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d02e      	beq.n	800771a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4413      	add	r3, r2
 80076c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d90e      	bls.n	80076ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076da:	4b19      	ldr	r3, [pc, #100]	; (8007740 <prvSwitchTimerLists+0xc0>)
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3304      	adds	r3, #4
 80076e2:	4619      	mov	r1, r3
 80076e4:	4610      	mov	r0, r2
 80076e6:	f7fd fc7c 	bl	8004fe2 <vListInsert>
 80076ea:	e016      	b.n	800771a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076ec:	2300      	movs	r3, #0
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	2300      	movs	r3, #0
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	2100      	movs	r1, #0
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7ff fd60 	bl	80071bc <xTimerGenericCommand>
 80076fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	603b      	str	r3, [r7, #0]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800771a:	4b09      	ldr	r3, [pc, #36]	; (8007740 <prvSwitchTimerLists+0xc0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1b1      	bne.n	8007688 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007724:	4b06      	ldr	r3, [pc, #24]	; (8007740 <prvSwitchTimerLists+0xc0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <prvSwitchTimerLists+0xc4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a04      	ldr	r2, [pc, #16]	; (8007740 <prvSwitchTimerLists+0xc0>)
 8007730:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007732:	4a04      	ldr	r2, [pc, #16]	; (8007744 <prvSwitchTimerLists+0xc4>)
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	6013      	str	r3, [r2, #0]
}
 8007738:	bf00      	nop
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20001574 	.word	0x20001574
 8007744:	20001578 	.word	0x20001578

08007748 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800774e:	f000 f989 	bl	8007a64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007752:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <prvCheckForValidListAndQueue+0x60>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d120      	bne.n	800779c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800775a:	4814      	ldr	r0, [pc, #80]	; (80077ac <prvCheckForValidListAndQueue+0x64>)
 800775c:	f7fd fbf0 	bl	8004f40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007760:	4813      	ldr	r0, [pc, #76]	; (80077b0 <prvCheckForValidListAndQueue+0x68>)
 8007762:	f7fd fbed 	bl	8004f40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007766:	4b13      	ldr	r3, [pc, #76]	; (80077b4 <prvCheckForValidListAndQueue+0x6c>)
 8007768:	4a10      	ldr	r2, [pc, #64]	; (80077ac <prvCheckForValidListAndQueue+0x64>)
 800776a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800776c:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <prvCheckForValidListAndQueue+0x70>)
 800776e:	4a10      	ldr	r2, [pc, #64]	; (80077b0 <prvCheckForValidListAndQueue+0x68>)
 8007770:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007772:	2300      	movs	r3, #0
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	4b11      	ldr	r3, [pc, #68]	; (80077bc <prvCheckForValidListAndQueue+0x74>)
 8007778:	4a11      	ldr	r2, [pc, #68]	; (80077c0 <prvCheckForValidListAndQueue+0x78>)
 800777a:	2110      	movs	r1, #16
 800777c:	200a      	movs	r0, #10
 800777e:	f7fd fcfb 	bl	8005178 <xQueueGenericCreateStatic>
 8007782:	4603      	mov	r3, r0
 8007784:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <prvCheckForValidListAndQueue+0x60>)
 8007786:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007788:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <prvCheckForValidListAndQueue+0x60>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007790:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <prvCheckForValidListAndQueue+0x60>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	490b      	ldr	r1, [pc, #44]	; (80077c4 <prvCheckForValidListAndQueue+0x7c>)
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe fb80 	bl	8005e9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800779c:	f000 f992 	bl	8007ac4 <vPortExitCritical>
}
 80077a0:	bf00      	nop
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	2000157c 	.word	0x2000157c
 80077ac:	2000154c 	.word	0x2000154c
 80077b0:	20001560 	.word	0x20001560
 80077b4:	20001574 	.word	0x20001574
 80077b8:	20001578 	.word	0x20001578
 80077bc:	20001628 	.word	0x20001628
 80077c0:	20001588 	.word	0x20001588
 80077c4:	080082d8 	.word	0x080082d8

080077c8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10a      	bne.n	80077f0 <pvTimerGetTimerID+0x28>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	60fb      	str	r3, [r7, #12]
}
 80077ec:	bf00      	nop
 80077ee:	e7fe      	b.n	80077ee <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80077f0:	f000 f938 	bl	8007a64 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80077fa:	f000 f963 	bl	8007ac4 <vPortExitCritical>

	return pvReturn;
 80077fe:	693b      	ldr	r3, [r7, #16]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3b04      	subs	r3, #4
 8007818:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3b04      	subs	r3, #4
 8007826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f023 0201 	bic.w	r2, r3, #1
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3b04      	subs	r3, #4
 8007836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007838:	4a0c      	ldr	r2, [pc, #48]	; (800786c <pxPortInitialiseStack+0x64>)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3b14      	subs	r3, #20
 8007842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3b04      	subs	r3, #4
 800784e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f06f 0202 	mvn.w	r2, #2
 8007856:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3b20      	subs	r3, #32
 800785c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800785e:	68fb      	ldr	r3, [r7, #12]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	08007871 	.word	0x08007871

08007870 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800787a:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <prvTaskExitError+0x54>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007882:	d00a      	beq.n	800789a <prvTaskExitError+0x2a>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	60fb      	str	r3, [r7, #12]
}
 8007896:	bf00      	nop
 8007898:	e7fe      	b.n	8007898 <prvTaskExitError+0x28>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	60bb      	str	r3, [r7, #8]
}
 80078ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078ae:	bf00      	nop
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0fc      	beq.n	80078b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078b6:	bf00      	nop
 80078b8:	bf00      	nop
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	2000000c 	.word	0x2000000c
	...

080078d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078d0:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <pxCurrentTCBConst2>)
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	6808      	ldr	r0, [r1, #0]
 80078d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	f380 8809 	msr	PSP, r0
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f04f 0000 	mov.w	r0, #0
 80078e6:	f380 8811 	msr	BASEPRI, r0
 80078ea:	4770      	bx	lr
 80078ec:	f3af 8000 	nop.w

080078f0 <pxCurrentTCBConst2>:
 80078f0:	2000104c 	.word	0x2000104c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop

080078f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078f8:	4808      	ldr	r0, [pc, #32]	; (800791c <prvPortStartFirstTask+0x24>)
 80078fa:	6800      	ldr	r0, [r0, #0]
 80078fc:	6800      	ldr	r0, [r0, #0]
 80078fe:	f380 8808 	msr	MSP, r0
 8007902:	f04f 0000 	mov.w	r0, #0
 8007906:	f380 8814 	msr	CONTROL, r0
 800790a:	b662      	cpsie	i
 800790c:	b661      	cpsie	f
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	df00      	svc	0
 8007918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800791a:	bf00      	nop
 800791c:	e000ed08 	.word	0xe000ed08

08007920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007926:	4b46      	ldr	r3, [pc, #280]	; (8007a40 <xPortStartScheduler+0x120>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a46      	ldr	r2, [pc, #280]	; (8007a44 <xPortStartScheduler+0x124>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d10a      	bne.n	8007946 <xPortStartScheduler+0x26>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	613b      	str	r3, [r7, #16]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007946:	4b3e      	ldr	r3, [pc, #248]	; (8007a40 <xPortStartScheduler+0x120>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a3f      	ldr	r2, [pc, #252]	; (8007a48 <xPortStartScheduler+0x128>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10a      	bne.n	8007966 <xPortStartScheduler+0x46>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007966:	4b39      	ldr	r3, [pc, #228]	; (8007a4c <xPortStartScheduler+0x12c>)
 8007968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	22ff      	movs	r2, #255	; 0xff
 8007976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007988:	b2da      	uxtb	r2, r3
 800798a:	4b31      	ldr	r3, [pc, #196]	; (8007a50 <xPortStartScheduler+0x130>)
 800798c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800798e:	4b31      	ldr	r3, [pc, #196]	; (8007a54 <xPortStartScheduler+0x134>)
 8007990:	2207      	movs	r2, #7
 8007992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007994:	e009      	b.n	80079aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007996:	4b2f      	ldr	r3, [pc, #188]	; (8007a54 <xPortStartScheduler+0x134>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3b01      	subs	r3, #1
 800799c:	4a2d      	ldr	r2, [pc, #180]	; (8007a54 <xPortStartScheduler+0x134>)
 800799e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079aa:	78fb      	ldrb	r3, [r7, #3]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b2:	2b80      	cmp	r3, #128	; 0x80
 80079b4:	d0ef      	beq.n	8007996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079b6:	4b27      	ldr	r3, [pc, #156]	; (8007a54 <xPortStartScheduler+0x134>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f1c3 0307 	rsb	r3, r3, #7
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d00a      	beq.n	80079d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	60bb      	str	r3, [r7, #8]
}
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079d8:	4b1e      	ldr	r3, [pc, #120]	; (8007a54 <xPortStartScheduler+0x134>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	4a1d      	ldr	r2, [pc, #116]	; (8007a54 <xPortStartScheduler+0x134>)
 80079e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079e2:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <xPortStartScheduler+0x134>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079ea:	4a1a      	ldr	r2, [pc, #104]	; (8007a54 <xPortStartScheduler+0x134>)
 80079ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079f6:	4b18      	ldr	r3, [pc, #96]	; (8007a58 <xPortStartScheduler+0x138>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <xPortStartScheduler+0x138>)
 80079fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a02:	4b15      	ldr	r3, [pc, #84]	; (8007a58 <xPortStartScheduler+0x138>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a14      	ldr	r2, [pc, #80]	; (8007a58 <xPortStartScheduler+0x138>)
 8007a08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a0e:	f000 f8dd 	bl	8007bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a12:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <xPortStartScheduler+0x13c>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a18:	f000 f8fc 	bl	8007c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a1c:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <xPortStartScheduler+0x140>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a0f      	ldr	r2, [pc, #60]	; (8007a60 <xPortStartScheduler+0x140>)
 8007a22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a28:	f7ff ff66 	bl	80078f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a2c:	f7fe fe90 	bl	8006750 <vTaskSwitchContext>
	prvTaskExitError();
 8007a30:	f7ff ff1e 	bl	8007870 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	e000ed00 	.word	0xe000ed00
 8007a44:	410fc271 	.word	0x410fc271
 8007a48:	410fc270 	.word	0x410fc270
 8007a4c:	e000e400 	.word	0xe000e400
 8007a50:	20001678 	.word	0x20001678
 8007a54:	2000167c 	.word	0x2000167c
 8007a58:	e000ed20 	.word	0xe000ed20
 8007a5c:	2000000c 	.word	0x2000000c
 8007a60:	e000ef34 	.word	0xe000ef34

08007a64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	607b      	str	r3, [r7, #4]
}
 8007a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <vPortEnterCritical+0x58>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3301      	adds	r3, #1
 8007a84:	4a0d      	ldr	r2, [pc, #52]	; (8007abc <vPortEnterCritical+0x58>)
 8007a86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <vPortEnterCritical+0x58>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d10f      	bne.n	8007ab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a90:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <vPortEnterCritical+0x5c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	603b      	str	r3, [r7, #0]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <vPortEnterCritical+0x4a>
	}
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	2000000c 	.word	0x2000000c
 8007ac0:	e000ed04 	.word	0xe000ed04

08007ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007aca:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <vPortExitCritical+0x50>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <vPortExitCritical+0x24>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	607b      	str	r3, [r7, #4]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <vPortExitCritical+0x50>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	4a09      	ldr	r2, [pc, #36]	; (8007b14 <vPortExitCritical+0x50>)
 8007af0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007af2:	4b08      	ldr	r3, [pc, #32]	; (8007b14 <vPortExitCritical+0x50>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d105      	bne.n	8007b06 <vPortExitCritical+0x42>
 8007afa:	2300      	movs	r3, #0
 8007afc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	f383 8811 	msr	BASEPRI, r3
}
 8007b04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	2000000c 	.word	0x2000000c
	...

08007b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b20:	f3ef 8009 	mrs	r0, PSP
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	4b15      	ldr	r3, [pc, #84]	; (8007b80 <pxCurrentTCBConst>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	f01e 0f10 	tst.w	lr, #16
 8007b30:	bf08      	it	eq
 8007b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3a:	6010      	str	r0, [r2, #0]
 8007b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b44:	f380 8811 	msr	BASEPRI, r0
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f7fe fdfe 	bl	8006750 <vTaskSwitchContext>
 8007b54:	f04f 0000 	mov.w	r0, #0
 8007b58:	f380 8811 	msr	BASEPRI, r0
 8007b5c:	bc09      	pop	{r0, r3}
 8007b5e:	6819      	ldr	r1, [r3, #0]
 8007b60:	6808      	ldr	r0, [r1, #0]
 8007b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b66:	f01e 0f10 	tst.w	lr, #16
 8007b6a:	bf08      	it	eq
 8007b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b70:	f380 8809 	msr	PSP, r0
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	f3af 8000 	nop.w

08007b80 <pxCurrentTCBConst>:
 8007b80:	2000104c 	.word	0x2000104c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop

08007b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	607b      	str	r3, [r7, #4]
}
 8007ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ba2:	f7fe fd1b 	bl	80065dc <xTaskIncrementTick>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bac:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <xPortSysTickHandler+0x40>)
 8007bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	f383 8811 	msr	BASEPRI, r3
}
 8007bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	e000ed04 	.word	0xe000ed04

08007bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <vPortSetupTimerInterrupt+0x34>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <vPortSetupTimerInterrupt+0x38>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <vPortSetupTimerInterrupt+0x3c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <vPortSetupTimerInterrupt+0x40>)
 8007be2:	fba2 2303 	umull	r2, r3, r2, r3
 8007be6:	099b      	lsrs	r3, r3, #6
 8007be8:	4a09      	ldr	r2, [pc, #36]	; (8007c10 <vPortSetupTimerInterrupt+0x44>)
 8007bea:	3b01      	subs	r3, #1
 8007bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bee:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <vPortSetupTimerInterrupt+0x34>)
 8007bf0:	2207      	movs	r2, #7
 8007bf2:	601a      	str	r2, [r3, #0]
}
 8007bf4:	bf00      	nop
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	e000e010 	.word	0xe000e010
 8007c04:	e000e018 	.word	0xe000e018
 8007c08:	20000000 	.word	0x20000000
 8007c0c:	10624dd3 	.word	0x10624dd3
 8007c10:	e000e014 	.word	0xe000e014

08007c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c24 <vPortEnableVFP+0x10>
 8007c18:	6801      	ldr	r1, [r0, #0]
 8007c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c1e:	6001      	str	r1, [r0, #0]
 8007c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c22:	bf00      	nop
 8007c24:	e000ed88 	.word	0xe000ed88

08007c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c2e:	f3ef 8305 	mrs	r3, IPSR
 8007c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b0f      	cmp	r3, #15
 8007c38:	d914      	bls.n	8007c64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c3a:	4a17      	ldr	r2, [pc, #92]	; (8007c98 <vPortValidateInterruptPriority+0x70>)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c44:	4b15      	ldr	r3, [pc, #84]	; (8007c9c <vPortValidateInterruptPriority+0x74>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	7afa      	ldrb	r2, [r7, #11]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d20a      	bcs.n	8007c64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c64:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <vPortValidateInterruptPriority+0x78>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <vPortValidateInterruptPriority+0x7c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d90a      	bls.n	8007c8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	603b      	str	r3, [r7, #0]
}
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <vPortValidateInterruptPriority+0x60>
	}
 8007c8a:	bf00      	nop
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	e000e3f0 	.word	0xe000e3f0
 8007c9c:	20001678 	.word	0x20001678
 8007ca0:	e000ed0c 	.word	0xe000ed0c
 8007ca4:	2000167c 	.word	0x2000167c

08007ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cb4:	f7fe fbd6 	bl	8006464 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cb8:	4b5b      	ldr	r3, [pc, #364]	; (8007e28 <pvPortMalloc+0x180>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cc0:	f000 f920 	bl	8007f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cc4:	4b59      	ldr	r3, [pc, #356]	; (8007e2c <pvPortMalloc+0x184>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4013      	ands	r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 8093 	bne.w	8007df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01d      	beq.n	8007d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007cd8:	2208      	movs	r2, #8
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4413      	add	r3, r2
 8007cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d014      	beq.n	8007d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f023 0307 	bic.w	r3, r3, #7
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <pvPortMalloc+0x6c>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	617b      	str	r3, [r7, #20]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d06e      	beq.n	8007df8 <pvPortMalloc+0x150>
 8007d1a:	4b45      	ldr	r3, [pc, #276]	; (8007e30 <pvPortMalloc+0x188>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d869      	bhi.n	8007df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d24:	4b43      	ldr	r3, [pc, #268]	; (8007e34 <pvPortMalloc+0x18c>)
 8007d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d28:	4b42      	ldr	r3, [pc, #264]	; (8007e34 <pvPortMalloc+0x18c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d2e:	e004      	b.n	8007d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d903      	bls.n	8007d4c <pvPortMalloc+0xa4>
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1f1      	bne.n	8007d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d4c:	4b36      	ldr	r3, [pc, #216]	; (8007e28 <pvPortMalloc+0x180>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d050      	beq.n	8007df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2208      	movs	r2, #8
 8007d5c:	4413      	add	r3, r2
 8007d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	1ad2      	subs	r2, r2, r3
 8007d70:	2308      	movs	r3, #8
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d91f      	bls.n	8007db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	f003 0307 	and.w	r3, r3, #7
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <pvPortMalloc+0xf8>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	613b      	str	r3, [r7, #16]
}
 8007d9c:	bf00      	nop
 8007d9e:	e7fe      	b.n	8007d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	1ad2      	subs	r2, r2, r3
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007db2:	69b8      	ldr	r0, [r7, #24]
 8007db4:	f000 f908 	bl	8007fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007db8:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <pvPortMalloc+0x188>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	4a1b      	ldr	r2, [pc, #108]	; (8007e30 <pvPortMalloc+0x188>)
 8007dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <pvPortMalloc+0x188>)
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	4b1b      	ldr	r3, [pc, #108]	; (8007e38 <pvPortMalloc+0x190>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d203      	bcs.n	8007dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dd2:	4b17      	ldr	r3, [pc, #92]	; (8007e30 <pvPortMalloc+0x188>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a18      	ldr	r2, [pc, #96]	; (8007e38 <pvPortMalloc+0x190>)
 8007dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <pvPortMalloc+0x184>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	431a      	orrs	r2, r3
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <pvPortMalloc+0x194>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3301      	adds	r3, #1
 8007df4:	4a11      	ldr	r2, [pc, #68]	; (8007e3c <pvPortMalloc+0x194>)
 8007df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007df8:	f7fe fb42 	bl	8006480 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <pvPortMalloc+0x174>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	60fb      	str	r3, [r7, #12]
}
 8007e18:	bf00      	nop
 8007e1a:	e7fe      	b.n	8007e1a <pvPortMalloc+0x172>
	return pvReturn;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3728      	adds	r7, #40	; 0x28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20003d98 	.word	0x20003d98
 8007e2c:	20003dac 	.word	0x20003dac
 8007e30:	20003d9c 	.word	0x20003d9c
 8007e34:	20003d90 	.word	0x20003d90
 8007e38:	20003da0 	.word	0x20003da0
 8007e3c:	20003da4 	.word	0x20003da4

08007e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d04d      	beq.n	8007eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e52:	2308      	movs	r3, #8
 8007e54:	425b      	negs	r3, r3
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4413      	add	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	4b24      	ldr	r3, [pc, #144]	; (8007ef8 <vPortFree+0xb8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <vPortFree+0x44>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	60fb      	str	r3, [r7, #12]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <vPortFree+0x62>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	60bb      	str	r3, [r7, #8]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <vPortFree+0xb8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01e      	beq.n	8007eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11a      	bne.n	8007eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	4b0e      	ldr	r3, [pc, #56]	; (8007ef8 <vPortFree+0xb8>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	401a      	ands	r2, r3
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ec8:	f7fe facc 	bl	8006464 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <vPortFree+0xbc>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	4a09      	ldr	r2, [pc, #36]	; (8007efc <vPortFree+0xbc>)
 8007ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eda:	6938      	ldr	r0, [r7, #16]
 8007edc:	f000 f874 	bl	8007fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ee0:	4b07      	ldr	r3, [pc, #28]	; (8007f00 <vPortFree+0xc0>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	4a06      	ldr	r2, [pc, #24]	; (8007f00 <vPortFree+0xc0>)
 8007ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eea:	f7fe fac9 	bl	8006480 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eee:	bf00      	nop
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20003dac 	.word	0x20003dac
 8007efc:	20003d9c 	.word	0x20003d9c
 8007f00:	20003da8 	.word	0x20003da8

08007f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f0a:	f242 7310 	movw	r3, #10000	; 0x2710
 8007f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f10:	4b27      	ldr	r3, [pc, #156]	; (8007fb0 <prvHeapInit+0xac>)
 8007f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3307      	adds	r3, #7
 8007f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0307 	bic.w	r3, r3, #7
 8007f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	4a1f      	ldr	r2, [pc, #124]	; (8007fb0 <prvHeapInit+0xac>)
 8007f34:	4413      	add	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f3c:	4a1d      	ldr	r2, [pc, #116]	; (8007fb4 <prvHeapInit+0xb0>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <prvHeapInit+0xb0>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f50:	2208      	movs	r2, #8
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 0307 	bic.w	r3, r3, #7
 8007f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4a15      	ldr	r2, [pc, #84]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f66:	4b14      	ldr	r3, [pc, #80]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f6e:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f84:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <prvHeapInit+0xb8>)
 8007f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	4a09      	ldr	r2, [pc, #36]	; (8007fc0 <prvHeapInit+0xbc>)
 8007f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f9c:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <prvHeapInit+0xc0>)
 8007f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fa2:	601a      	str	r2, [r3, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	20001680 	.word	0x20001680
 8007fb4:	20003d90 	.word	0x20003d90
 8007fb8:	20003d98 	.word	0x20003d98
 8007fbc:	20003da0 	.word	0x20003da0
 8007fc0:	20003d9c 	.word	0x20003d9c
 8007fc4:	20003dac 	.word	0x20003dac

08007fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fd0:	4b28      	ldr	r3, [pc, #160]	; (8008074 <prvInsertBlockIntoFreeList+0xac>)
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e002      	b.n	8007fdc <prvInsertBlockIntoFreeList+0x14>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d8f7      	bhi.n	8007fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d108      	bne.n	800800a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	441a      	add	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	441a      	add	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d118      	bne.n	8008050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b15      	ldr	r3, [pc, #84]	; (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d00d      	beq.n	8008046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	441a      	add	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e008      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008046:	4b0c      	ldr	r3, [pc, #48]	; (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e003      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d002      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008066:	bf00      	nop
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20003d90 	.word	0x20003d90
 8008078:	20003d98 	.word	0x20003d98

0800807c <__libc_init_array>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	4d0d      	ldr	r5, [pc, #52]	; (80080b4 <__libc_init_array+0x38>)
 8008080:	4c0d      	ldr	r4, [pc, #52]	; (80080b8 <__libc_init_array+0x3c>)
 8008082:	1b64      	subs	r4, r4, r5
 8008084:	10a4      	asrs	r4, r4, #2
 8008086:	2600      	movs	r6, #0
 8008088:	42a6      	cmp	r6, r4
 800808a:	d109      	bne.n	80080a0 <__libc_init_array+0x24>
 800808c:	4d0b      	ldr	r5, [pc, #44]	; (80080bc <__libc_init_array+0x40>)
 800808e:	4c0c      	ldr	r4, [pc, #48]	; (80080c0 <__libc_init_array+0x44>)
 8008090:	f000 f8f2 	bl	8008278 <_init>
 8008094:	1b64      	subs	r4, r4, r5
 8008096:	10a4      	asrs	r4, r4, #2
 8008098:	2600      	movs	r6, #0
 800809a:	42a6      	cmp	r6, r4
 800809c:	d105      	bne.n	80080aa <__libc_init_array+0x2e>
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a4:	4798      	blx	r3
 80080a6:	3601      	adds	r6, #1
 80080a8:	e7ee      	b.n	8008088 <__libc_init_array+0xc>
 80080aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ae:	4798      	blx	r3
 80080b0:	3601      	adds	r6, #1
 80080b2:	e7f2      	b.n	800809a <__libc_init_array+0x1e>
 80080b4:	0800a4d4 	.word	0x0800a4d4
 80080b8:	0800a4d4 	.word	0x0800a4d4
 80080bc:	0800a4d4 	.word	0x0800a4d4
 80080c0:	0800a4d8 	.word	0x0800a4d8

080080c4 <__retarget_lock_acquire_recursive>:
 80080c4:	4770      	bx	lr

080080c6 <__retarget_lock_release_recursive>:
 80080c6:	4770      	bx	lr

080080c8 <memcpy>:
 80080c8:	440a      	add	r2, r1
 80080ca:	4291      	cmp	r1, r2
 80080cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80080d0:	d100      	bne.n	80080d4 <memcpy+0xc>
 80080d2:	4770      	bx	lr
 80080d4:	b510      	push	{r4, lr}
 80080d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080de:	4291      	cmp	r1, r2
 80080e0:	d1f9      	bne.n	80080d6 <memcpy+0xe>
 80080e2:	bd10      	pop	{r4, pc}

080080e4 <memset>:
 80080e4:	4402      	add	r2, r0
 80080e6:	4603      	mov	r3, r0
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d100      	bne.n	80080ee <memset+0xa>
 80080ec:	4770      	bx	lr
 80080ee:	f803 1b01 	strb.w	r1, [r3], #1
 80080f2:	e7f9      	b.n	80080e8 <memset+0x4>

080080f4 <cleanup_glue>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	460c      	mov	r4, r1
 80080f8:	6809      	ldr	r1, [r1, #0]
 80080fa:	4605      	mov	r5, r0
 80080fc:	b109      	cbz	r1, 8008102 <cleanup_glue+0xe>
 80080fe:	f7ff fff9 	bl	80080f4 <cleanup_glue>
 8008102:	4621      	mov	r1, r4
 8008104:	4628      	mov	r0, r5
 8008106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800810a:	f000 b869 	b.w	80081e0 <_free_r>
	...

08008110 <_reclaim_reent>:
 8008110:	4b2c      	ldr	r3, [pc, #176]	; (80081c4 <_reclaim_reent+0xb4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4283      	cmp	r3, r0
 8008116:	b570      	push	{r4, r5, r6, lr}
 8008118:	4604      	mov	r4, r0
 800811a:	d051      	beq.n	80081c0 <_reclaim_reent+0xb0>
 800811c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800811e:	b143      	cbz	r3, 8008132 <_reclaim_reent+0x22>
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d14a      	bne.n	80081bc <_reclaim_reent+0xac>
 8008126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008128:	6819      	ldr	r1, [r3, #0]
 800812a:	b111      	cbz	r1, 8008132 <_reclaim_reent+0x22>
 800812c:	4620      	mov	r0, r4
 800812e:	f000 f857 	bl	80081e0 <_free_r>
 8008132:	6961      	ldr	r1, [r4, #20]
 8008134:	b111      	cbz	r1, 800813c <_reclaim_reent+0x2c>
 8008136:	4620      	mov	r0, r4
 8008138:	f000 f852 	bl	80081e0 <_free_r>
 800813c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800813e:	b111      	cbz	r1, 8008146 <_reclaim_reent+0x36>
 8008140:	4620      	mov	r0, r4
 8008142:	f000 f84d 	bl	80081e0 <_free_r>
 8008146:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008148:	b111      	cbz	r1, 8008150 <_reclaim_reent+0x40>
 800814a:	4620      	mov	r0, r4
 800814c:	f000 f848 	bl	80081e0 <_free_r>
 8008150:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008152:	b111      	cbz	r1, 800815a <_reclaim_reent+0x4a>
 8008154:	4620      	mov	r0, r4
 8008156:	f000 f843 	bl	80081e0 <_free_r>
 800815a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800815c:	b111      	cbz	r1, 8008164 <_reclaim_reent+0x54>
 800815e:	4620      	mov	r0, r4
 8008160:	f000 f83e 	bl	80081e0 <_free_r>
 8008164:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008166:	b111      	cbz	r1, 800816e <_reclaim_reent+0x5e>
 8008168:	4620      	mov	r0, r4
 800816a:	f000 f839 	bl	80081e0 <_free_r>
 800816e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008170:	b111      	cbz	r1, 8008178 <_reclaim_reent+0x68>
 8008172:	4620      	mov	r0, r4
 8008174:	f000 f834 	bl	80081e0 <_free_r>
 8008178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800817a:	b111      	cbz	r1, 8008182 <_reclaim_reent+0x72>
 800817c:	4620      	mov	r0, r4
 800817e:	f000 f82f 	bl	80081e0 <_free_r>
 8008182:	69a3      	ldr	r3, [r4, #24]
 8008184:	b1e3      	cbz	r3, 80081c0 <_reclaim_reent+0xb0>
 8008186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008188:	4620      	mov	r0, r4
 800818a:	4798      	blx	r3
 800818c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800818e:	b1b9      	cbz	r1, 80081c0 <_reclaim_reent+0xb0>
 8008190:	4620      	mov	r0, r4
 8008192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008196:	f7ff bfad 	b.w	80080f4 <cleanup_glue>
 800819a:	5949      	ldr	r1, [r1, r5]
 800819c:	b941      	cbnz	r1, 80081b0 <_reclaim_reent+0xa0>
 800819e:	3504      	adds	r5, #4
 80081a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081a2:	2d80      	cmp	r5, #128	; 0x80
 80081a4:	68d9      	ldr	r1, [r3, #12]
 80081a6:	d1f8      	bne.n	800819a <_reclaim_reent+0x8a>
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 f819 	bl	80081e0 <_free_r>
 80081ae:	e7ba      	b.n	8008126 <_reclaim_reent+0x16>
 80081b0:	680e      	ldr	r6, [r1, #0]
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 f814 	bl	80081e0 <_free_r>
 80081b8:	4631      	mov	r1, r6
 80081ba:	e7ef      	b.n	800819c <_reclaim_reent+0x8c>
 80081bc:	2500      	movs	r5, #0
 80081be:	e7ef      	b.n	80081a0 <_reclaim_reent+0x90>
 80081c0:	bd70      	pop	{r4, r5, r6, pc}
 80081c2:	bf00      	nop
 80081c4:	20000010 	.word	0x20000010

080081c8 <__malloc_lock>:
 80081c8:	4801      	ldr	r0, [pc, #4]	; (80081d0 <__malloc_lock+0x8>)
 80081ca:	f7ff bf7b 	b.w	80080c4 <__retarget_lock_acquire_recursive>
 80081ce:	bf00      	nop
 80081d0:	20003db0 	.word	0x20003db0

080081d4 <__malloc_unlock>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__malloc_unlock+0x8>)
 80081d6:	f7ff bf76 	b.w	80080c6 <__retarget_lock_release_recursive>
 80081da:	bf00      	nop
 80081dc:	20003db0 	.word	0x20003db0

080081e0 <_free_r>:
 80081e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081e2:	2900      	cmp	r1, #0
 80081e4:	d044      	beq.n	8008270 <_free_r+0x90>
 80081e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ea:	9001      	str	r0, [sp, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f1a1 0404 	sub.w	r4, r1, #4
 80081f2:	bfb8      	it	lt
 80081f4:	18e4      	addlt	r4, r4, r3
 80081f6:	f7ff ffe7 	bl	80081c8 <__malloc_lock>
 80081fa:	4a1e      	ldr	r2, [pc, #120]	; (8008274 <_free_r+0x94>)
 80081fc:	9801      	ldr	r0, [sp, #4]
 80081fe:	6813      	ldr	r3, [r2, #0]
 8008200:	b933      	cbnz	r3, 8008210 <_free_r+0x30>
 8008202:	6063      	str	r3, [r4, #4]
 8008204:	6014      	str	r4, [r2, #0]
 8008206:	b003      	add	sp, #12
 8008208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800820c:	f7ff bfe2 	b.w	80081d4 <__malloc_unlock>
 8008210:	42a3      	cmp	r3, r4
 8008212:	d908      	bls.n	8008226 <_free_r+0x46>
 8008214:	6825      	ldr	r5, [r4, #0]
 8008216:	1961      	adds	r1, r4, r5
 8008218:	428b      	cmp	r3, r1
 800821a:	bf01      	itttt	eq
 800821c:	6819      	ldreq	r1, [r3, #0]
 800821e:	685b      	ldreq	r3, [r3, #4]
 8008220:	1949      	addeq	r1, r1, r5
 8008222:	6021      	streq	r1, [r4, #0]
 8008224:	e7ed      	b.n	8008202 <_free_r+0x22>
 8008226:	461a      	mov	r2, r3
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	b10b      	cbz	r3, 8008230 <_free_r+0x50>
 800822c:	42a3      	cmp	r3, r4
 800822e:	d9fa      	bls.n	8008226 <_free_r+0x46>
 8008230:	6811      	ldr	r1, [r2, #0]
 8008232:	1855      	adds	r5, r2, r1
 8008234:	42a5      	cmp	r5, r4
 8008236:	d10b      	bne.n	8008250 <_free_r+0x70>
 8008238:	6824      	ldr	r4, [r4, #0]
 800823a:	4421      	add	r1, r4
 800823c:	1854      	adds	r4, r2, r1
 800823e:	42a3      	cmp	r3, r4
 8008240:	6011      	str	r1, [r2, #0]
 8008242:	d1e0      	bne.n	8008206 <_free_r+0x26>
 8008244:	681c      	ldr	r4, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	6053      	str	r3, [r2, #4]
 800824a:	4421      	add	r1, r4
 800824c:	6011      	str	r1, [r2, #0]
 800824e:	e7da      	b.n	8008206 <_free_r+0x26>
 8008250:	d902      	bls.n	8008258 <_free_r+0x78>
 8008252:	230c      	movs	r3, #12
 8008254:	6003      	str	r3, [r0, #0]
 8008256:	e7d6      	b.n	8008206 <_free_r+0x26>
 8008258:	6825      	ldr	r5, [r4, #0]
 800825a:	1961      	adds	r1, r4, r5
 800825c:	428b      	cmp	r3, r1
 800825e:	bf04      	itt	eq
 8008260:	6819      	ldreq	r1, [r3, #0]
 8008262:	685b      	ldreq	r3, [r3, #4]
 8008264:	6063      	str	r3, [r4, #4]
 8008266:	bf04      	itt	eq
 8008268:	1949      	addeq	r1, r1, r5
 800826a:	6021      	streq	r1, [r4, #0]
 800826c:	6054      	str	r4, [r2, #4]
 800826e:	e7ca      	b.n	8008206 <_free_r+0x26>
 8008270:	b003      	add	sp, #12
 8008272:	bd30      	pop	{r4, r5, pc}
 8008274:	20003db4 	.word	0x20003db4

08008278 <_init>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	bf00      	nop
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr

08008284 <_fini>:
 8008284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008286:	bf00      	nop
 8008288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828a:	bc08      	pop	{r3}
 800828c:	469e      	mov	lr, r3
 800828e:	4770      	bx	lr
