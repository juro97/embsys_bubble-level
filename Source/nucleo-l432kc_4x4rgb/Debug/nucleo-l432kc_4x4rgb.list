
nucleo-l432kc_4x4rgb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008308  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008570  08008570  00022290  2**0
                  CONTENTS
  4 .ARM          00000008  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008578  08008578  00022290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008578  08008578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800857c  0800857c  0001857c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002290  20000000  08008580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002658  20002290  0800a810  00022290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200048e8  0800a810  000248e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9f1  00000000  00000000  000222c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d6  00000000  00000000  0003ecb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00042688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001648  00000000  00000000  00043e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023183  00000000  00000000  00045470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001967a  00000000  00000000  000685f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d48a2  00000000  00000000  00081c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015650f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006328  00000000  00000000  00156560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  0015c888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002290 	.word	0x20002290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008480 	.word	0x08008480

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002294 	.word	0x20002294
 80001cc:	08008480 	.word	0x08008480

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <printDataOnMatrix>:

/**
 * takes a pointer to a character as argument and prints the pattern
 */
void printDataOnMatrix(char *ch)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	switch(*ch)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	3b31      	subs	r3, #49	; 0x31
 80004e2:	2b49      	cmp	r3, #73	; 0x49
 80004e4:	f200 80f8 	bhi.w	80006d8 <printDataOnMatrix+0x204>
 80004e8:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <printDataOnMatrix+0x1c>)
 80004ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ee:	bf00      	nop
 80004f0:	080006b9 	.word	0x080006b9
 80004f4:	080006d9 	.word	0x080006d9
 80004f8:	080006d9 	.word	0x080006d9
 80004fc:	080006c1 	.word	0x080006c1
 8000500:	080006d9 	.word	0x080006d9
 8000504:	080006d9 	.word	0x080006d9
 8000508:	080006d9 	.word	0x080006d9
 800050c:	080006d9 	.word	0x080006d9
 8000510:	080006d9 	.word	0x080006d9
 8000514:	080006d9 	.word	0x080006d9
 8000518:	080006d9 	.word	0x080006d9
 800051c:	080006d9 	.word	0x080006d9
 8000520:	080006d9 	.word	0x080006d9
 8000524:	080006d9 	.word	0x080006d9
 8000528:	080006d9 	.word	0x080006d9
 800052c:	080006d9 	.word	0x080006d9
 8000530:	080006d9 	.word	0x080006d9
 8000534:	080006d9 	.word	0x080006d9
 8000538:	080006d9 	.word	0x080006d9
 800053c:	080006d9 	.word	0x080006d9
 8000540:	080006d9 	.word	0x080006d9
 8000544:	080006c9 	.word	0x080006c9
 8000548:	080006d9 	.word	0x080006d9
 800054c:	080006d9 	.word	0x080006d9
 8000550:	080006d9 	.word	0x080006d9
 8000554:	080006d9 	.word	0x080006d9
 8000558:	080006d9 	.word	0x080006d9
 800055c:	080006d9 	.word	0x080006d9
 8000560:	080006d9 	.word	0x080006d9
 8000564:	080006d1 	.word	0x080006d1
 8000568:	080006d9 	.word	0x080006d9
 800056c:	080006d9 	.word	0x080006d9
 8000570:	080006d9 	.word	0x080006d9
 8000574:	080006d9 	.word	0x080006d9
 8000578:	080006d9 	.word	0x080006d9
 800057c:	080006d9 	.word	0x080006d9
 8000580:	080006d9 	.word	0x080006d9
 8000584:	080006d9 	.word	0x080006d9
 8000588:	080006d9 	.word	0x080006d9
 800058c:	080006d9 	.word	0x080006d9
 8000590:	080006d9 	.word	0x080006d9
 8000594:	080006d9 	.word	0x080006d9
 8000598:	080006d9 	.word	0x080006d9
 800059c:	080006d9 	.word	0x080006d9
 80005a0:	080006d9 	.word	0x080006d9
 80005a4:	080006d9 	.word	0x080006d9
 80005a8:	080006d9 	.word	0x080006d9
 80005ac:	080006d9 	.word	0x080006d9
 80005b0:	08000619 	.word	0x08000619
 80005b4:	08000621 	.word	0x08000621
 80005b8:	08000629 	.word	0x08000629
 80005bc:	08000631 	.word	0x08000631
 80005c0:	08000639 	.word	0x08000639
 80005c4:	08000641 	.word	0x08000641
 80005c8:	08000649 	.word	0x08000649
 80005cc:	08000651 	.word	0x08000651
 80005d0:	08000659 	.word	0x08000659
 80005d4:	08000661 	.word	0x08000661
 80005d8:	08000669 	.word	0x08000669
 80005dc:	08000671 	.word	0x08000671
 80005e0:	08000679 	.word	0x08000679
 80005e4:	08000681 	.word	0x08000681
 80005e8:	08000689 	.word	0x08000689
 80005ec:	08000691 	.word	0x08000691
 80005f0:	08000699 	.word	0x08000699
 80005f4:	080006a1 	.word	0x080006a1
 80005f8:	080006a9 	.word	0x080006a9
 80005fc:	080006d9 	.word	0x080006d9
 8000600:	080006d9 	.word	0x080006d9
 8000604:	080006d9 	.word	0x080006d9
 8000608:	080006d9 	.word	0x080006d9
 800060c:	080006d9 	.word	0x080006d9
 8000610:	080006d9 	.word	0x080006d9
 8000614:	080006b1 	.word	0x080006b1
	{
		case 'a':
			ptr_Rgb4x4Click = &rgb4x4click_centered;
 8000618:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <printDataOnMatrix+0x23c>)
 800061a:	4a3e      	ldr	r2, [pc, #248]	; (8000714 <printDataOnMatrix+0x240>)
 800061c:	601a      	str	r2, [r3, #0]
			break;
 800061e:	e05f      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'b':
			ptr_Rgb4x4Click = &rgb4x4click_outOfScope;
 8000620:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <printDataOnMatrix+0x23c>)
 8000622:	4a3d      	ldr	r2, [pc, #244]	; (8000718 <printDataOnMatrix+0x244>)
 8000624:	601a      	str	r2, [r3, #0]
			break;
 8000626:	e05b      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'c':
			ptr_Rgb4x4Click = &rgb4x4click_shakeDetection;
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <printDataOnMatrix+0x23c>)
 800062a:	4a3c      	ldr	r2, [pc, #240]	; (800071c <printDataOnMatrix+0x248>)
 800062c:	601a      	str	r2, [r3, #0]
			break;
 800062e:	e057      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'd':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_lo;
 8000630:	4b37      	ldr	r3, [pc, #220]	; (8000710 <printDataOnMatrix+0x23c>)
 8000632:	4a3b      	ldr	r2, [pc, #236]	; (8000720 <printDataOnMatrix+0x24c>)
 8000634:	601a      	str	r2, [r3, #0]
			break;
 8000636:	e053      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'e':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_lu;
 8000638:	4b35      	ldr	r3, [pc, #212]	; (8000710 <printDataOnMatrix+0x23c>)
 800063a:	4a3a      	ldr	r2, [pc, #232]	; (8000724 <printDataOnMatrix+0x250>)
 800063c:	601a      	str	r2, [r3, #0]
			break;
 800063e:	e04f      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'f':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_ro;
 8000640:	4b33      	ldr	r3, [pc, #204]	; (8000710 <printDataOnMatrix+0x23c>)
 8000642:	4a39      	ldr	r2, [pc, #228]	; (8000728 <printDataOnMatrix+0x254>)
 8000644:	601a      	str	r2, [r3, #0]
			break;
 8000646:	e04b      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'g':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_ru;
 8000648:	4b31      	ldr	r3, [pc, #196]	; (8000710 <printDataOnMatrix+0x23c>)
 800064a:	4a38      	ldr	r2, [pc, #224]	; (800072c <printDataOnMatrix+0x258>)
 800064c:	601a      	str	r2, [r3, #0]
			break;
 800064e:	e047      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'h':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c1;
 8000650:	4b2f      	ldr	r3, [pc, #188]	; (8000710 <printDataOnMatrix+0x23c>)
 8000652:	4a37      	ldr	r2, [pc, #220]	; (8000730 <printDataOnMatrix+0x25c>)
 8000654:	601a      	str	r2, [r3, #0]
			break;
 8000656:	e043      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'i':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c2;
 8000658:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <printDataOnMatrix+0x23c>)
 800065a:	4a36      	ldr	r2, [pc, #216]	; (8000734 <printDataOnMatrix+0x260>)
 800065c:	601a      	str	r2, [r3, #0]
			break;
 800065e:	e03f      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'j':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c3;
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <printDataOnMatrix+0x23c>)
 8000662:	4a35      	ldr	r2, [pc, #212]	; (8000738 <printDataOnMatrix+0x264>)
 8000664:	601a      	str	r2, [r3, #0]
			break;
 8000666:	e03b      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'k':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c4;
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <printDataOnMatrix+0x23c>)
 800066a:	4a34      	ldr	r2, [pc, #208]	; (800073c <printDataOnMatrix+0x268>)
 800066c:	601a      	str	r2, [r3, #0]
			break;
 800066e:	e037      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'l':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r2c1;
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <printDataOnMatrix+0x23c>)
 8000672:	4a33      	ldr	r2, [pc, #204]	; (8000740 <printDataOnMatrix+0x26c>)
 8000674:	601a      	str	r2, [r3, #0]
			break;
 8000676:	e033      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'm':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r2c4;
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <printDataOnMatrix+0x23c>)
 800067a:	4a32      	ldr	r2, [pc, #200]	; (8000744 <printDataOnMatrix+0x270>)
 800067c:	601a      	str	r2, [r3, #0]
			break;
 800067e:	e02f      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'n':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r3c1;
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <printDataOnMatrix+0x23c>)
 8000682:	4a31      	ldr	r2, [pc, #196]	; (8000748 <printDataOnMatrix+0x274>)
 8000684:	601a      	str	r2, [r3, #0]
			break;
 8000686:	e02b      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'o':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r3c4;
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <printDataOnMatrix+0x23c>)
 800068a:	4a30      	ldr	r2, [pc, #192]	; (800074c <printDataOnMatrix+0x278>)
 800068c:	601a      	str	r2, [r3, #0]
			break;
 800068e:	e027      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'p':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c1;
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <printDataOnMatrix+0x23c>)
 8000692:	4a2f      	ldr	r2, [pc, #188]	; (8000750 <printDataOnMatrix+0x27c>)
 8000694:	601a      	str	r2, [r3, #0]
			break;
 8000696:	e023      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'q':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c2;
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <printDataOnMatrix+0x23c>)
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <printDataOnMatrix+0x280>)
 800069c:	601a      	str	r2, [r3, #0]
			break;
 800069e:	e01f      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'r':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c3;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <printDataOnMatrix+0x23c>)
 80006a2:	4a2d      	ldr	r2, [pc, #180]	; (8000758 <printDataOnMatrix+0x284>)
 80006a4:	601a      	str	r2, [r3, #0]
			break;
 80006a6:	e01b      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 's':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c4;
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <printDataOnMatrix+0x23c>)
 80006aa:	4a2c      	ldr	r2, [pc, #176]	; (800075c <printDataOnMatrix+0x288>)
 80006ac:	601a      	str	r2, [r3, #0]
			break;
 80006ae:	e017      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'z':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <printDataOnMatrix+0x23c>)
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <printDataOnMatrix+0x25c>)
 80006b4:	601a      	str	r2, [r3, #0]
			break;
 80006b6:	e013      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case '1':
			ptr_Rgb4x4Click = &rgb4x4click_onlyOneLed;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <printDataOnMatrix+0x23c>)
 80006ba:	4a29      	ldr	r2, [pc, #164]	; (8000760 <printDataOnMatrix+0x28c>)
 80006bc:	601a      	str	r2, [r3, #0]
			break;
 80006be:	e00f      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case '4':
			ptr_Rgb4x4Click = &rgb4x4click_oneRow;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <printDataOnMatrix+0x23c>)
 80006c2:	4a28      	ldr	r2, [pc, #160]	; (8000764 <printDataOnMatrix+0x290>)
 80006c4:	601a      	str	r2, [r3, #0]
			break;
 80006c6:	e00b      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'F':
			ptr_Rgb4x4Click = &rgb4x4click_all_off;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <printDataOnMatrix+0x23c>)
 80006ca:	4a27      	ldr	r2, [pc, #156]	; (8000768 <printDataOnMatrix+0x294>)
 80006cc:	601a      	str	r2, [r3, #0]
			break;
 80006ce:	e007      	b.n	80006e0 <printDataOnMatrix+0x20c>
		case 'N':
			ptr_Rgb4x4Click = &rgb4x4click_all_on;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <printDataOnMatrix+0x23c>)
 80006d2:	4a26      	ldr	r2, [pc, #152]	; (800076c <printDataOnMatrix+0x298>)
 80006d4:	601a      	str	r2, [r3, #0]
			break;
 80006d6:	e003      	b.n	80006e0 <printDataOnMatrix+0x20c>
		default:
			/* You should not be here, might code error handling later */
			ptr_Rgb4x4Click = &rgb4x4click_shakeDetection;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <printDataOnMatrix+0x23c>)
 80006da:	4a10      	ldr	r2, [pc, #64]	; (800071c <printDataOnMatrix+0x248>)
 80006dc:	601a      	str	r2, [r3, #0]
			break;
 80006de:	bf00      	nop

	}


	osSemaphoreAcquire(sem_printPermissionHandle, osWaitForever);
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <printDataOnMatrix+0x29c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 fcc5 	bl	8005078 <osSemaphoreAcquire>

	/* actually not really necessary and quite useless, just to be 101% sure*/
	taskENTER_CRITICAL();
 80006ee:	f007 fb81 	bl	8007df4 <vPortEnterCritical>

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *) ptr_Rgb4x4Click, PWM_STREAM_LENGTH_FULL_DISPLAY);
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <printDataOnMatrix+0x23c>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006fa:	2100      	movs	r1, #0
 80006fc:	481d      	ldr	r0, [pc, #116]	; (8000774 <printDataOnMatrix+0x2a0>)
 80006fe:	f002 fc1f 	bl	8002f40 <HAL_TIM_PWM_Start_DMA>

	taskEXIT_CRITICAL();
 8000702:	f007 fba7 	bl	8007e54 <vPortExitCritical>

}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200022ac 	.word	0x200022ac
 8000714:	20000300 	.word	0x20000300
 8000718:	20000480 	.word	0x20000480
 800071c:	20000600 	.word	0x20000600
 8000720:	20000900 	.word	0x20000900
 8000724:	20000780 	.word	0x20000780
 8000728:	20000c00 	.word	0x20000c00
 800072c:	20000a80 	.word	0x20000a80
 8000730:	20000d80 	.word	0x20000d80
 8000734:	20000f00 	.word	0x20000f00
 8000738:	20001080 	.word	0x20001080
 800073c:	20001200 	.word	0x20001200
 8000740:	20001380 	.word	0x20001380
 8000744:	20001500 	.word	0x20001500
 8000748:	20001680 	.word	0x20001680
 800074c:	20001800 	.word	0x20001800
 8000750:	20001980 	.word	0x20001980
 8000754:	20001b00 	.word	0x20001b00
 8000758:	20001c80 	.word	0x20001c80
 800075c:	20001e00 	.word	0x20001e00
 8000760:	20001f80 	.word	0x20001f80
 8000764:	20002100 	.word	0x20002100
 8000768:	20000000 	.word	0x20000000
 800076c:	20000180 	.word	0x20000180
 8000770:	200023d0 	.word	0x200023d0
 8000774:	200022b0 	.word	0x200022b0

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077c:	f000 fc27 	bl	8000fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000780:	f000 f836 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 f974 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000788:	f000 f954 	bl	8000a34 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800078c:	f000 f922 	bl	80009d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000790:	f000 f890 	bl	80008b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000794:	f004 fa5e 	bl	8004c54 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sem_printPermission */
  sem_printPermissionHandle = osSemaphoreNew(1, 1, &sem_printPermission_attributes);
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <main+0x58>)
 800079a:	2101      	movs	r1, #1
 800079c:	2001      	movs	r0, #1
 800079e:	f004 fbe1 	bl	8004f64 <osSemaphoreNew>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <main+0x5c>)
 80007a6:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of newDataTimer */
  newDataTimerHandle = osTimerNew(newDataTimerCallback, osTimerPeriodic, NULL, &newDataTimer_attributes);
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <main+0x60>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	2101      	movs	r1, #1
 80007ae:	480b      	ldr	r0, [pc, #44]	; (80007dc <main+0x64>)
 80007b0:	f004 fb5c 	bl	8004e6c <osTimerNew>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <main+0x68>)
 80007b8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ConServerTask */
  ConServerTaskHandle = osThreadNew(StartConServerTask, NULL, &ConServerTask_attributes);
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <main+0x6c>)
 80007bc:	2100      	movs	r1, #0
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <main+0x70>)
 80007c0:	f004 fa92 	bl	8004ce8 <osThreadNew>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a09      	ldr	r2, [pc, #36]	; (80007ec <main+0x74>)
 80007c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007ca:	f004 fa67 	bl	8004c9c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <main+0x56>
 80007d0:	08008518 	.word	0x08008518
 80007d4:	200023d0 	.word	0x200023d0
 80007d8:	08008508 	.word	0x08008508
 80007dc:	08000b71 	.word	0x08000b71
 80007e0:	200023cc 	.word	0x200023cc
 80007e4:	080084e4 	.word	0x080084e4
 80007e8:	08000b31 	.word	0x08000b31
 80007ec:	200023c8 	.word	0x200023c8

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b096      	sub	sp, #88	; 0x58
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2244      	movs	r2, #68	; 0x44
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f007 fe36 	bl	8008470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000812:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000816:	f001 f8cd 	bl	80019b4 <HAL_PWREx_ControlVoltageScaling>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000820:	f000 f9c8 	bl	8000bb4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000824:	f001 f8a8 	bl	8001978 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <SystemClock_Config+0xc0>)
 800082a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800082e:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <SystemClock_Config+0xc0>)
 8000830:	f023 0318 	bic.w	r3, r3, #24
 8000834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000838:	2314      	movs	r3, #20
 800083a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000848:	2360      	movs	r3, #96	; 0x60
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2302      	movs	r3, #2
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000850:	2301      	movs	r3, #1
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000858:	2328      	movs	r3, #40	; 0x28
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800085c:	2307      	movs	r3, #7
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000864:	2302      	movs	r3, #2
 8000866:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4618      	mov	r0, r3
 800086e:	f001 f8f7 	bl	8001a60 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000878:	f000 f99c 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2303      	movs	r3, #3
 8000882:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	2104      	movs	r1, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fcf7 	bl	8002288 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008a0:	f000 f988 	bl	8000bb4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008a4:	f002 f93c 	bl	8002b20 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008a8:	bf00      	nop
 80008aa:	3758      	adds	r7, #88	; 0x58
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000

080008b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b096      	sub	sp, #88	; 0x58
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
 80008d6:	615a      	str	r2, [r3, #20]
 80008d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	222c      	movs	r2, #44	; 0x2c
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f007 fdc5 	bl	8008470 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <MX_TIM1_Init+0x118>)
 80008e8:	4a39      	ldr	r2, [pc, #228]	; (80009d0 <MX_TIM1_Init+0x11c>)
 80008ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <MX_TIM1_Init+0x118>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b36      	ldr	r3, [pc, #216]	; (80009cc <MX_TIM1_Init+0x118>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <MX_TIM1_Init+0x118>)
 80008fa:	2264      	movs	r2, #100	; 0x64
 80008fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b33      	ldr	r3, [pc, #204]	; (80009cc <MX_TIM1_Init+0x118>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000904:	4b31      	ldr	r3, [pc, #196]	; (80009cc <MX_TIM1_Init+0x118>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800090a:	4b30      	ldr	r3, [pc, #192]	; (80009cc <MX_TIM1_Init+0x118>)
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000910:	482e      	ldr	r0, [pc, #184]	; (80009cc <MX_TIM1_Init+0x118>)
 8000912:	f002 fabd 	bl	8002e90 <HAL_TIM_PWM_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800091c:	f000 f94a 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800092c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000930:	4619      	mov	r1, r3
 8000932:	4826      	ldr	r0, [pc, #152]	; (80009cc <MX_TIM1_Init+0x118>)
 8000934:	f003 fc24 	bl	8004180 <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800093e:	f000 f939 	bl	8000bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000942:	2360      	movs	r3, #96	; 0x60
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8000946:	2364      	movs	r3, #100	; 0x64
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094a:	2300      	movs	r3, #0
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800094e:	2300      	movs	r3, #0
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000952:	2304      	movs	r3, #4
 8000954:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000960:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000964:	2200      	movs	r2, #0
 8000966:	4619      	mov	r1, r3
 8000968:	4818      	ldr	r0, [pc, #96]	; (80009cc <MX_TIM1_Init+0x118>)
 800096a:	f002 fee9 	bl	8003740 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000974:	f000 f91e 	bl	8000bb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800098c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000990:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800099a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM1_Init+0x118>)
 80009ae:	f003 fc4d 	bl	800424c <HAL_TIMEx_ConfigBreakDeadTime>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80009b8:	f000 f8fc 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM1_Init+0x118>)
 80009be:	f000 f983 	bl	8000cc8 <HAL_TIM_MspPostInit>

}
 80009c2:	bf00      	nop
 80009c4:	3758      	adds	r7, #88	; 0x58
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200022b0 	.word	0x200022b0
 80009d0:	40012c00 	.word	0x40012c00

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <MX_USART2_UART_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a18:	f003 fcae 	bl	8004378 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 f8c7 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20002344 	.word	0x20002344
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_DMA_Init+0x38>)
 8000a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <MX_DMA_Init+0x38>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6493      	str	r3, [r2, #72]	; 0x48
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_DMA_Init+0x38>)
 8000a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2105      	movs	r1, #5
 8000a56:	200c      	movs	r0, #12
 8000a58:	f000 fbaa 	bl	80011b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a5c:	200c      	movs	r0, #12
 8000a5e:	f000 fbc3 	bl	80011e8 <HAL_NVIC_EnableIRQ>

}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a16      	ldr	r2, [pc, #88]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	480b      	ldr	r0, [pc, #44]	; (8000b00 <MX_GPIO_Init+0x90>)
 8000ad4:	f000 ff38 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4619      	mov	r1, r3
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_GPIO_Init+0x90>)
 8000af0:	f000 fdc0 	bl	8001674 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000400 	.word	0x48000400

08000b04 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	// Stop DMA
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000b10:	f002 fc0e 	bl	8003330 <HAL_TIM_PWM_Stop_DMA>

	// Give Back Semaphore
	osSemaphoreRelease(sem_printPermissionHandle);
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f004 faff 	bl	800511c <osSemaphoreRelease>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200022b0 	.word	0x200022b0
 8000b2c:	200023d0 	.word	0x200023d0

08000b30 <StartConServerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartConServerTask */
void StartConServerTask(void *argument)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char ch[] = {'1', '4', 'F', 'N'};
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <StartConServerTask+0x3c>)
 8000b3a:	60bb      	str	r3, [r7, #8]
	int i = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  printDataOnMatrix(&ch[i%4]);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	425a      	negs	r2, r3
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	f002 0203 	and.w	r2, r2, #3
 8000b4c:	bf58      	it	pl
 8000b4e:	4253      	negpl	r3, r2
 8000b50:	f107 0208 	add.w	r2, r7, #8
 8000b54:	4413      	add	r3, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fcbc 	bl	80004d4 <printDataOnMatrix>
	  ++i;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]

    osDelay(1000);
 8000b62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b66:	f004 f951 	bl	8004e0c <osDelay>
	  printDataOnMatrix(&ch[i%4]);
 8000b6a:	e7e9      	b.n	8000b40 <StartConServerTask+0x10>
 8000b6c:	4e463431 	.word	0x4e463431

08000b70 <newDataTimerCallback>:
  /* USER CODE END 5 */
}

/* newDataTimerCallback function */
void newDataTimerCallback(void *argument)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN newDataTimerCallback */
	g_getNewData = true;
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <newDataTimerCallback+0x1c>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END newDataTimerCallback */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200023d4 	.word	0x200023d4

08000b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d101      	bne.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ba2:	f000 fa2d 	bl	8001000 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40014400 	.word	0x40014400

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	f06f 0001 	mvn.w	r0, #1
 8000bfe:	f000 fad7 	bl	80011b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000

08000c10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a26      	ldr	r2, [pc, #152]	; (8000cb8 <HAL_TIM_PWM_MspInit+0xa8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d146      	bne.n	8000cb0 <HAL_TIM_PWM_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <HAL_TIM_PWM_MspInit+0xac>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <HAL_TIM_PWM_MspInit+0xac>)
 8000c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <HAL_TIM_PWM_MspInit+0xac>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c3c:	4a21      	ldr	r2, [pc, #132]	; (8000cc4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000c3e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c42:	2207      	movs	r2, #7
 8000c44:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c48:	2210      	movs	r2, #16
 8000c4a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c6e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000c74:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c76:	f000 fac5 	bl	8001204 <HAL_DMA_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8000c80:	f7ff ff98 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	210f      	movs	r1, #15
 8000c94:	2019      	movs	r0, #25
 8000c96:	f000 fa8b 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c9a:	2019      	movs	r0, #25
 8000c9c:	f000 faa4 	bl	80011e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2105      	movs	r1, #5
 8000ca4:	201b      	movs	r0, #27
 8000ca6:	f000 fa83 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000caa:	201b      	movs	r0, #27
 8000cac:	f000 fa9c 	bl	80011e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40012c00 	.word	0x40012c00
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	200022fc 	.word	0x200022fc
 8000cc4:	4002001c 	.word	0x4002001c

08000cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <HAL_TIM_MspPostInit+0x68>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d11d      	bne.n	8000d26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_TIM_MspPostInit+0x6c>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <HAL_TIM_MspPostInit+0x6c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_TIM_MspPostInit+0x6c>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f000 fca7 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40012c00 	.word	0x40012c00
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b09e      	sub	sp, #120	; 0x78
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	2254      	movs	r2, #84	; 0x54
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f007 fb89 	bl	8008470 <memset>
  if(huart->Instance==USART2)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a28      	ldr	r2, [pc, #160]	; (8000e04 <HAL_UART_MspInit+0xcc>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d148      	bne.n	8000dfa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 fcdd 	bl	8002734 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d80:	f7ff ff18 	bl	8000bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d84:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_UART_MspInit+0xd0>)
 8000d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d88:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_UART_MspInit+0xd0>)
 8000d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_UART_MspInit+0xd0>)
 8000d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <HAL_UART_MspInit+0xd0>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <HAL_UART_MspInit+0xd0>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_UART_MspInit+0xd0>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000db4:	2304      	movs	r3, #4
 8000db6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f000 fc4f 	bl	8001674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dda:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000de8:	2303      	movs	r3, #3
 8000dea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000df0:	4619      	mov	r1, r3
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f000 fc3d 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3778      	adds	r7, #120	; 0x78
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40004400 	.word	0x40004400
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	; 0x30
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_InitTick+0xc8>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <HAL_InitTick+0xc8>)
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e24:	6613      	str	r3, [r2, #96]	; 0x60
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <HAL_InitTick+0xc8>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e32:	f107 020c 	add.w	r2, r7, #12
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 fbe7 	bl	8002610 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e42:	f001 fbcf 	bl	80025e4 <HAL_RCC_GetPCLK2Freq>
 8000e46:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4a:	4a23      	ldr	r2, [pc, #140]	; (8000ed8 <HAL_InitTick+0xcc>)
 8000e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e50:	0c9b      	lsrs	r3, r3, #18
 8000e52:	3b01      	subs	r3, #1
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <HAL_InitTick+0xd0>)
 8000e58:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <HAL_InitTick+0xd4>)
 8000e5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <HAL_InitTick+0xd0>)
 8000e5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e62:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000e64:	4a1d      	ldr	r2, [pc, #116]	; (8000edc <HAL_InitTick+0xd0>)
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <HAL_InitTick+0xd0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_InitTick+0xd0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <HAL_InitTick+0xd0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8000e7c:	4817      	ldr	r0, [pc, #92]	; (8000edc <HAL_InitTick+0xd0>)
 8000e7e:	f001 ff51 	bl	8002d24 <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d11b      	bne.n	8000ec8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000e90:	4812      	ldr	r0, [pc, #72]	; (8000edc <HAL_InitTick+0xd0>)
 8000e92:	f001 ffa9 	bl	8002de8 <HAL_TIM_Base_Start_IT>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d111      	bne.n	8000ec8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ea4:	2019      	movs	r0, #25
 8000ea6:	f000 f99f 	bl	80011e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d808      	bhi.n	8000ec2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	2019      	movs	r0, #25
 8000eb6:	f000 f97b 	bl	80011b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_InitTick+0xd8>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e002      	b.n	8000ec8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3730      	adds	r7, #48	; 0x30
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	431bde83 	.word	0x431bde83
 8000edc:	200023d8 	.word	0x200023d8
 8000ee0:	40014400 	.word	0x40014400
 8000ee4:	20002284 	.word	0x20002284

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <DMA1_Channel2_IRQHandler+0x10>)
 8000f1a:	f000 facc 	bl	80014b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200022fc 	.word	0x200022fc

08000f28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000f2e:	f002 fae7 	bl	8003500 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000f34:	f002 fae4 	bl	8003500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200022b0 	.word	0x200022b0
 8000f40:	200023d8 	.word	0x200023d8

08000f44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM1_CC_IRQHandler+0x10>)
 8000f4a:	f002 fad9 	bl	8003500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200022b0 	.word	0x200022b0

08000f58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f80:	f7ff ffea 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f86:	490d      	ldr	r1, [pc, #52]	; (8000fbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <LoopForever+0xe>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	; (8000fc8 <LoopForever+0x16>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000faa:	f007 fa2f 	bl	800840c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fae:	f7ff fbe3 	bl	8000778 <main>

08000fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20002290 	.word	0x20002290
  ldr r2, =_sidata
 8000fc0:	08008580 	.word	0x08008580
  ldr r2, =_sbss
 8000fc4:	20002290 	.word	0x20002290
  ldr r4, =_ebss
 8000fc8:	200048e8 	.word	0x200048e8

08000fcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_IRQHandler>

08000fce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f8de 	bl	800119a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fde:	200f      	movs	r0, #15
 8000fe0:	f7ff ff14 	bl	8000e0c <HAL_InitTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	e001      	b.n	8000ff4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ff0:	f7ff fde6 	bl	8000bc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20002288 	.word	0x20002288
 8001024:	20002424 	.word	0x20002424

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20002424 	.word	0x20002424

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff4c 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c2:	f7ff ff61 	bl	8001088 <__NVIC_GetPriorityGrouping>
 80011c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f7ff ffb1 	bl	8001134 <NVIC_EncodePriority>
 80011d2:	4602      	mov	r2, r0
 80011d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff80 	bl	80010e0 <__NVIC_SetPriority>
}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff54 	bl	80010a4 <__NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e098      	b.n	8001348 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <HAL_DMA_Init+0x150>)
 800121e:	429a      	cmp	r2, r3
 8001220:	d80f      	bhi.n	8001242 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <HAL_DMA_Init+0x154>)
 800122a:	4413      	add	r3, r2
 800122c:	4a4b      	ldr	r2, [pc, #300]	; (800135c <HAL_DMA_Init+0x158>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	009a      	lsls	r2, r3, #2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a48      	ldr	r2, [pc, #288]	; (8001360 <HAL_DMA_Init+0x15c>)
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
 8001240:	e00e      	b.n	8001260 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4b46      	ldr	r3, [pc, #280]	; (8001364 <HAL_DMA_Init+0x160>)
 800124a:	4413      	add	r3, r2
 800124c:	4a43      	ldr	r2, [pc, #268]	; (800135c <HAL_DMA_Init+0x158>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	009a      	lsls	r2, r3, #2
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a42      	ldr	r2, [pc, #264]	; (8001368 <HAL_DMA_Init+0x164>)
 800125e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2202      	movs	r2, #2
 8001264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800127a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800129c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012ba:	d039      	beq.n	8001330 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a27      	ldr	r2, [pc, #156]	; (8001360 <HAL_DMA_Init+0x15c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d11a      	bne.n	80012fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012c6:	4b29      	ldr	r3, [pc, #164]	; (800136c <HAL_DMA_Init+0x168>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f003 031c 	and.w	r3, r3, #28
 80012d2:	210f      	movs	r1, #15
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	4924      	ldr	r1, [pc, #144]	; (800136c <HAL_DMA_Init+0x168>)
 80012dc:	4013      	ands	r3, r2
 80012de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_DMA_Init+0x168>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6859      	ldr	r1, [r3, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	f003 031c 	and.w	r3, r3, #28
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	491d      	ldr	r1, [pc, #116]	; (800136c <HAL_DMA_Init+0x168>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
 80012fa:	e019      	b.n	8001330 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <HAL_DMA_Init+0x16c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001304:	f003 031c 	and.w	r3, r3, #28
 8001308:	210f      	movs	r1, #15
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	4917      	ldr	r1, [pc, #92]	; (8001370 <HAL_DMA_Init+0x16c>)
 8001312:	4013      	ands	r3, r2
 8001314:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_DMA_Init+0x16c>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6859      	ldr	r1, [r3, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f003 031c 	and.w	r3, r3, #28
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	4911      	ldr	r1, [pc, #68]	; (8001370 <HAL_DMA_Init+0x16c>)
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40020407 	.word	0x40020407
 8001358:	bffdfff8 	.word	0xbffdfff8
 800135c:	cccccccd 	.word	0xcccccccd
 8001360:	40020000 	.word	0x40020000
 8001364:	bffdfbf8 	.word	0xbffdfbf8
 8001368:	40020400 	.word	0x40020400
 800136c:	400200a8 	.word	0x400200a8
 8001370:	400204a8 	.word	0x400204a8

08001374 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_DMA_Start_IT+0x20>
 8001390:	2302      	movs	r3, #2
 8001392:	e04b      	b.n	800142c <HAL_DMA_Start_IT+0xb8>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d13a      	bne.n	800141e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2202      	movs	r2, #2
 80013ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0201 	bic.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	68b9      	ldr	r1, [r7, #8]
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f921 	bl	8001614 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d008      	beq.n	80013ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 020e 	orr.w	r2, r2, #14
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e00f      	b.n	800140c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0204 	bic.w	r2, r2, #4
 80013fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 020a 	orr.w	r2, r2, #10
 800140a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0201 	orr.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e005      	b.n	800142a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001426:	2302      	movs	r3, #2
 8001428:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800142a:	7dfb      	ldrb	r3, [r7, #23]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d005      	beq.n	8001458 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2204      	movs	r2, #4
 8001450:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	e029      	b.n	80014ac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 020e 	bic.w	r2, r2, #14
 8001466:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0201 	bic.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	f003 021c 	and.w	r2, r3, #28
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f202 	lsl.w	r2, r1, r2
 800148a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	4798      	blx	r3
    }
  }
  return status;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f003 031c 	and.w	r3, r3, #28
 80014d6:	2204      	movs	r2, #4
 80014d8:	409a      	lsls	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d026      	beq.n	8001530 <HAL_DMA_IRQHandler+0x7a>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d021      	beq.n	8001530 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d107      	bne.n	800150a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0204 	bic.w	r2, r2, #4
 8001508:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f003 021c 	and.w	r2, r3, #28
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2104      	movs	r1, #4
 8001518:	fa01 f202 	lsl.w	r2, r1, r2
 800151c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	2b00      	cmp	r3, #0
 8001524:	d071      	beq.n	800160a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800152e:	e06c      	b.n	800160a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f003 031c 	and.w	r3, r3, #28
 8001538:	2202      	movs	r2, #2
 800153a:	409a      	lsls	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d02e      	beq.n	80015a2 <HAL_DMA_IRQHandler+0xec>
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d029      	beq.n	80015a2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10b      	bne.n	8001574 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 020a 	bic.w	r2, r2, #10
 800156a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	f003 021c 	and.w	r2, r3, #28
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	2102      	movs	r1, #2
 8001582:	fa01 f202 	lsl.w	r2, r1, r2
 8001586:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d038      	beq.n	800160a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015a0:	e033      	b.n	800160a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 031c 	and.w	r3, r3, #28
 80015aa:	2208      	movs	r2, #8
 80015ac:	409a      	lsls	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d02a      	beq.n	800160c <HAL_DMA_IRQHandler+0x156>
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d025      	beq.n	800160c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 020e 	bic.w	r2, r2, #14
 80015ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	f003 021c 	and.w	r2, r3, #28
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	2101      	movs	r1, #1
 80015de:	fa01 f202 	lsl.w	r2, r1, r2
 80015e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800160a:	bf00      	nop
 800160c:	bf00      	nop
}
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f003 021c 	and.w	r2, r3, #28
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	2101      	movs	r1, #1
 8001630:	fa01 f202 	lsl.w	r2, r1, r2
 8001634:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b10      	cmp	r3, #16
 8001644:	d108      	bne.n	8001658 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001656:	e007      	b.n	8001668 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	60da      	str	r2, [r3, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e148      	b.n	8001916 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 813a 	beq.w	8001910 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x40>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 0201 	and.w	r2, r3, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	6939      	ldr	r1, [r7, #16]
 80017a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0203 	and.w	r2, r3, #3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8094 	beq.w	8001910 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b52      	ldr	r3, [pc, #328]	; (8001934 <HAL_GPIO_Init+0x2c0>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	4a51      	ldr	r2, [pc, #324]	; (8001934 <HAL_GPIO_Init+0x2c0>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6613      	str	r3, [r2, #96]	; 0x60
 80017f4:	4b4f      	ldr	r3, [pc, #316]	; (8001934 <HAL_GPIO_Init+0x2c0>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001800:	4a4d      	ldr	r2, [pc, #308]	; (8001938 <HAL_GPIO_Init+0x2c4>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800182a:	d00d      	beq.n	8001848 <HAL_GPIO_Init+0x1d4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a43      	ldr	r2, [pc, #268]	; (800193c <HAL_GPIO_Init+0x2c8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d007      	beq.n	8001844 <HAL_GPIO_Init+0x1d0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a42      	ldr	r2, [pc, #264]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_GPIO_Init+0x1cc>
 800183c:	2302      	movs	r3, #2
 800183e:	e004      	b.n	800184a <HAL_GPIO_Init+0x1d6>
 8001840:	2307      	movs	r3, #7
 8001842:	e002      	b.n	800184a <HAL_GPIO_Init+0x1d6>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_GPIO_Init+0x1d6>
 8001848:	2300      	movs	r3, #0
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	f002 0203 	and.w	r2, r2, #3
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	4093      	lsls	r3, r2
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800185a:	4937      	ldr	r1, [pc, #220]	; (8001938 <HAL_GPIO_Init+0x2c4>)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001868:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800188c:	4a2d      	ldr	r2, [pc, #180]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001892:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018b6:	4a23      	ldr	r2, [pc, #140]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018e0:	4a18      	ldr	r2, [pc, #96]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	f47f aeaf 	bne.w	8001684 <HAL_GPIO_Init+0x10>
  }
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40021000 	.word	0x40021000
 8001938:	40010000 	.word	0x40010000
 800193c:	48000400 	.word	0x48000400
 8001940:	48000800 	.word	0x48000800
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001964:	e002      	b.n	800196c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40007000 	.word	0x40007000

08001998 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40007000 	.word	0x40007000

080019b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c2:	d130      	bne.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c4:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d0:	d038      	beq.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019da:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2232      	movs	r2, #50	; 0x32
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	4a1b      	ldr	r2, [pc, #108]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f8:	e002      	b.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0c:	d102      	bne.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f2      	bne.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a20:	d110      	bne.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e00f      	b.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a32:	d007      	beq.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40007000 	.word	0x40007000
 8001a58:	20002280 	.word	0x20002280
 8001a5c:	431bde83 	.word	0x431bde83

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f000 bc02 	b.w	8002278 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a74:	4b96      	ldr	r3, [pc, #600]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7e:	4b94      	ldr	r3, [pc, #592]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80e4 	beq.w	8001c5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_RCC_OscConfig+0x4c>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	f040 808b 	bne.w	8001bba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	f040 8087 	bne.w	8001bba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aac:	4b88      	ldr	r3, [pc, #544]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x64>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e3d9      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	4b81      	ldr	r3, [pc, #516]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <HAL_RCC_OscConfig+0x7e>
 8001ad4:	4b7e      	ldr	r3, [pc, #504]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001adc:	e005      	b.n	8001aea <HAL_RCC_OscConfig+0x8a>
 8001ade:	4b7c      	ldr	r3, [pc, #496]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d223      	bcs.n	8001b36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 fdbe 	bl	8002674 <RCC_SetFlashLatencyFromMSIRange>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e3ba      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b02:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a72      	ldr	r2, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	496d      	ldr	r1, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b20:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	4968      	ldr	r1, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e025      	b.n	8001b82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b36:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4960      	ldr	r1, [pc, #384]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b54:	4b5e      	ldr	r3, [pc, #376]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	495b      	ldr	r1, [pc, #364]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fd7e 	bl	8002674 <RCC_SetFlashLatencyFromMSIRange>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e37a      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b82:	f000 fc81 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b51      	ldr	r3, [pc, #324]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	4950      	ldr	r1, [pc, #320]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001b94:	5ccb      	ldrb	r3, [r1, r3]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9e:	4a4e      	ldr	r2, [pc, #312]	; (8001cd8 <HAL_RCC_OscConfig+0x278>)
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <HAL_RCC_OscConfig+0x27c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f930 	bl	8000e0c <HAL_InitTick>
 8001bac:	4603      	mov	r3, r0
 8001bae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d052      	beq.n	8001c5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	e35e      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d032      	beq.n	8001c28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a42      	ldr	r2, [pc, #264]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bce:	f7ff fa2b 	bl	8001028 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd6:	f7ff fa27 	bl	8001028 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e347      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf4:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a35      	ldr	r2, [pc, #212]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	f043 0308 	orr.w	r3, r3, #8
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4930      	ldr	r1, [pc, #192]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c12:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	492b      	ldr	r1, [pc, #172]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
 8001c26:	e01a      	b.n	8001c5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c34:	f7ff f9f8 	bl	8001028 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c3c:	f7ff f9f4 	bl	8001028 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e314      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x1dc>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d073      	beq.n	8001d52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_OscConfig+0x21c>
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d10e      	bne.n	8001c94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d10b      	bne.n	8001c94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d063      	beq.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d15f      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e2f1      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9c:	d106      	bne.n	8001cac <HAL_RCC_OscConfig+0x24c>
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e025      	b.n	8001cf8 <HAL_RCC_OscConfig+0x298>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb4:	d114      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x280>
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a02      	ldr	r2, [pc, #8]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e013      	b.n	8001cf8 <HAL_RCC_OscConfig+0x298>
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08008528 	.word	0x08008528
 8001cd8:	20002280 	.word	0x20002280
 8001cdc:	20002284 	.word	0x20002284
 8001ce0:	4ba0      	ldr	r3, [pc, #640]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a9f      	ldr	r2, [pc, #636]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b9d      	ldr	r3, [pc, #628]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a9c      	ldr	r2, [pc, #624]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff f992 	bl	8001028 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff f98e 	bl	8001028 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e2ae      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1a:	4b92      	ldr	r3, [pc, #584]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x2a8>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f97e 	bl	8001028 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff f97a 	bl	8001028 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e29a      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2d0>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d060      	beq.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_OscConfig+0x310>
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d119      	bne.n	8001d9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d116      	bne.n	8001d9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d70:	4b7c      	ldr	r3, [pc, #496]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_OscConfig+0x328>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e277      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d88:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	061b      	lsls	r3, r3, #24
 8001d96:	4973      	ldr	r1, [pc, #460]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d9c:	e040      	b.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d023      	beq.n	8001dee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da6:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6e      	ldr	r2, [pc, #440]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff f939 	bl	8001028 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff f935 	bl	8001028 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e255      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	495f      	ldr	r1, [pc, #380]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	e018      	b.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dee:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a5c      	ldr	r2, [pc, #368]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff f915 	bl	8001028 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff f911 	bl	8001028 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e231      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d03c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01c      	beq.n	8001e6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e34:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3a:	4a4a      	ldr	r2, [pc, #296]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e44:	f7ff f8f0 	bl	8001028 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7ff f8ec 	bl	8001028 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e20c      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ef      	beq.n	8001e4c <HAL_RCC_OscConfig+0x3ec>
 8001e6c:	e01b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e74:	4a3b      	ldr	r2, [pc, #236]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff f8d3 	bl	8001028 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff f8cf 	bl	8001028 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1ef      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e98:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1ef      	bne.n	8001e86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80a6 	beq.w	8002000 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10d      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a26      	ldr	r2, [pc, #152]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001edc:	2301      	movs	r3, #1
 8001ede:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_RCC_OscConfig+0x508>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d118      	bne.n	8001f1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eec:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_RCC_OscConfig+0x508>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <HAL_RCC_OscConfig+0x508>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef8:	f7ff f896 	bl	8001028 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f00:	f7ff f892 	bl	8001028 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1b2      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_RCC_OscConfig+0x508>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d108      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4d8>
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f36:	e029      	b.n	8001f8c <HAL_RCC_OscConfig+0x52c>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d115      	bne.n	8001f6c <HAL_RCC_OscConfig+0x50c>
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f60:	e014      	b.n	8001f8c <HAL_RCC_OscConfig+0x52c>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	4b9a      	ldr	r3, [pc, #616]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	4a99      	ldr	r2, [pc, #612]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f7c:	4b96      	ldr	r3, [pc, #600]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	4a95      	ldr	r2, [pc, #596]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8001f84:	f023 0304 	bic.w	r3, r3, #4
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d016      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff f848 	bl	8001028 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f844 	bl	8001028 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e162      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ed      	beq.n	8001f9c <HAL_RCC_OscConfig+0x53c>
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f831 	bl	8001028 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff f82d 	bl	8001028 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e14b      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe0:	4b7d      	ldr	r3, [pc, #500]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ed      	bne.n	8001fca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fee:	7ffb      	ldrb	r3, [r7, #31]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff4:	4b78      	ldr	r3, [pc, #480]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	4a77      	ldr	r2, [pc, #476]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8001ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b00      	cmp	r3, #0
 800200a:	d03c      	beq.n	8002086 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01c      	beq.n	800204e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002014:	4b70      	ldr	r3, [pc, #448]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8002016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800201a:	4a6f      	ldr	r2, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff f800 	bl	8001028 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800202c:	f7fe fffc 	bl	8001028 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e11c      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800203e:	4b66      	ldr	r3, [pc, #408]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8002040:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0ef      	beq.n	800202c <HAL_RCC_OscConfig+0x5cc>
 800204c:	e01b      	b.n	8002086 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800204e:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8002050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002054:	4a60      	ldr	r2, [pc, #384]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7fe ffe3 	bl	8001028 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002066:	f7fe ffdf 	bl	8001028 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0ff      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002078:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 800207a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ef      	bne.n	8002066 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80f3 	beq.w	8002276 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	2b02      	cmp	r3, #2
 8002096:	f040 80c9 	bne.w	800222c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800209a:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0203 	and.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d12c      	bne.n	8002108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	3b01      	subs	r3, #1
 80020ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d123      	bne.n	8002108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d11b      	bne.n	8002108 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d113      	bne.n	8002108 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	3b01      	subs	r3, #1
 80020ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d109      	bne.n	8002108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	3b01      	subs	r3, #1
 8002102:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d06b      	beq.n	80021e0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d062      	beq.n	80021d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800210e:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0ac      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800211e:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2d      	ldr	r2, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8002124:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002128:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800212a:	f7fe ff7d 	bl	8001028 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002132:	f7fe ff79 	bl	8001028 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e099      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002150:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_RCC_OscConfig+0x77c>)
 8002156:	4013      	ands	r3, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002160:	3a01      	subs	r2, #1
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	4311      	orrs	r1, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800216a:	0212      	lsls	r2, r2, #8
 800216c:	4311      	orrs	r1, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002172:	0852      	lsrs	r2, r2, #1
 8002174:	3a01      	subs	r2, #1
 8002176:	0552      	lsls	r2, r2, #21
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800217e:	0852      	lsrs	r2, r2, #1
 8002180:	3a01      	subs	r2, #1
 8002182:	0652      	lsls	r2, r2, #25
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800218a:	06d2      	lsls	r2, r2, #27
 800218c:	430a      	orrs	r2, r1
 800218e:	4912      	ldr	r1, [pc, #72]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8002190:	4313      	orrs	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 800219a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 80021a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021ac:	f7fe ff3c 	bl	8001028 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe ff38 	bl	8001028 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e058      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_RCC_OscConfig+0x778>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021d2:	e050      	b.n	8002276 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e04f      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
 80021d8:	40021000 	.word	0x40021000
 80021dc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_RCC_OscConfig+0x820>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d144      	bne.n	8002276 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021ec:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCC_OscConfig+0x820>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a23      	ldr	r2, [pc, #140]	; (8002280 <HAL_RCC_OscConfig+0x820>)
 80021f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021f8:	4b21      	ldr	r3, [pc, #132]	; (8002280 <HAL_RCC_OscConfig+0x820>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a20      	ldr	r2, [pc, #128]	; (8002280 <HAL_RCC_OscConfig+0x820>)
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002202:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002204:	f7fe ff10 	bl	8001028 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7fe ff0c 	bl	8001028 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e02c      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_RCC_OscConfig+0x820>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x7ac>
 800222a:	e024      	b.n	8002276 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d01f      	beq.n	8002272 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_RCC_OscConfig+0x820>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <HAL_RCC_OscConfig+0x820>)
 8002238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800223c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe fef3 	bl	8001028 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7fe feef 	bl	8001028 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e00f      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RCC_OscConfig+0x820>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_OscConfig+0x820>)
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	4905      	ldr	r1, [pc, #20]	; (8002280 <HAL_RCC_OscConfig+0x820>)
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_RCC_OscConfig+0x824>)
 800226c:	4013      	ands	r3, r2
 800226e:	60cb      	str	r3, [r1, #12]
 8002270:	e001      	b.n	8002276 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	feeefffc 	.word	0xfeeefffc

08002288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0e7      	b.n	800246c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800229c:	4b75      	ldr	r3, [pc, #468]	; (8002474 <HAL_RCC_ClockConfig+0x1ec>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d910      	bls.n	80022cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b72      	ldr	r3, [pc, #456]	; (8002474 <HAL_RCC_ClockConfig+0x1ec>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 0207 	bic.w	r2, r3, #7
 80022b2:	4970      	ldr	r1, [pc, #448]	; (8002474 <HAL_RCC_ClockConfig+0x1ec>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b6e      	ldr	r3, [pc, #440]	; (8002474 <HAL_RCC_ClockConfig+0x1ec>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0cf      	b.n	800246c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d010      	beq.n	80022fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	4b66      	ldr	r3, [pc, #408]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d908      	bls.n	80022fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b63      	ldr	r3, [pc, #396]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4960      	ldr	r1, [pc, #384]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d04c      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d121      	bne.n	800235e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0a6      	b.n	800246c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002326:	4b54      	ldr	r3, [pc, #336]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d115      	bne.n	800235e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e09a      	b.n	800246c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800233e:	4b4e      	ldr	r3, [pc, #312]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e08e      	b.n	800246c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234e:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e086      	b.n	800246c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800235e:	4b46      	ldr	r3, [pc, #280]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4943      	ldr	r1, [pc, #268]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002370:	f7fe fe5a 	bl	8001028 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	e00a      	b.n	800238e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7fe fe56 	bl	8001028 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e06e      	b.n	800246c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 020c 	and.w	r2, r3, #12
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d1eb      	bne.n	8002378 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d010      	beq.n	80023ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	4b31      	ldr	r3, [pc, #196]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d208      	bcs.n	80023ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	492b      	ldr	r1, [pc, #172]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ce:	4b29      	ldr	r3, [pc, #164]	; (8002474 <HAL_RCC_ClockConfig+0x1ec>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d210      	bcs.n	80023fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_ClockConfig+0x1ec>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 0207 	bic.w	r2, r3, #7
 80023e4:	4923      	ldr	r1, [pc, #140]	; (8002474 <HAL_RCC_ClockConfig+0x1ec>)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ec:	4b21      	ldr	r3, [pc, #132]	; (8002474 <HAL_RCC_ClockConfig+0x1ec>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e036      	b.n	800246c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d008      	beq.n	800241c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	4918      	ldr	r1, [pc, #96]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4910      	ldr	r1, [pc, #64]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800243c:	f000 f824 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCC_ClockConfig+0x1f0>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	490b      	ldr	r1, [pc, #44]	; (800247c <HAL_RCC_ClockConfig+0x1f4>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1f8>)
 800245a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1fc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fcd3 	bl	8000e0c <HAL_InitTick>
 8002466:	4603      	mov	r3, r0
 8002468:	72fb      	strb	r3, [r7, #11]

  return status;
 800246a:	7afb      	ldrb	r3, [r7, #11]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40022000 	.word	0x40022000
 8002478:	40021000 	.word	0x40021000
 800247c:	08008528 	.word	0x08008528
 8002480:	20002280 	.word	0x20002280
 8002484:	20002284 	.word	0x20002284

08002488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002496:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a0:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x34>
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d121      	bne.n	80024fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d11e      	bne.n	80024fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024bc:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024c8:	4b31      	ldr	r3, [pc, #196]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	e005      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024e4:	4a2b      	ldr	r2, [pc, #172]	; (8002594 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10d      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d102      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002500:	4b25      	ldr	r3, [pc, #148]	; (8002598 <HAL_RCC_GetSysClockFreq+0x110>)
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	e004      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d101      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800250c:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_RCC_GetSysClockFreq+0x114>)
 800250e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d134      	bne.n	8002580 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002516:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d003      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0xa6>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d003      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0xac>
 800252c:	e005      	b.n	800253a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_RCC_GetSysClockFreq+0x110>)
 8002530:	617b      	str	r3, [r7, #20]
      break;
 8002532:	e005      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCC_GetSysClockFreq+0x114>)
 8002536:	617b      	str	r3, [r7, #20]
      break;
 8002538:	e002      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	617b      	str	r3, [r7, #20]
      break;
 800253e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	3301      	adds	r3, #1
 800254c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	fb03 f202 	mul.w	r2, r3, r2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	0e5b      	lsrs	r3, r3, #25
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	3301      	adds	r3, #1
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002580:	69bb      	ldr	r3, [r7, #24]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	; 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	08008540 	.word	0x08008540
 8002598:	00f42400 	.word	0x00f42400
 800259c:	007a1200 	.word	0x007a1200

080025a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20002280 	.word	0x20002280

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4904      	ldr	r1, [pc, #16]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08008538 	.word	0x08008538

080025e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025e8:	f7ff ffda 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	0adb      	lsrs	r3, r3, #11
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	4904      	ldr	r1, [pc, #16]	; (800260c <HAL_RCC_GetPCLK2Freq+0x28>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	08008538 	.word	0x08008538

08002610 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	220f      	movs	r2, #15
 800261e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0203 	and.w	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	08db      	lsrs	r3, r3, #3
 800264a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_RCC_GetClockConfig+0x60>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0207 	and.w	r2, r3, #7
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	601a      	str	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	40022000 	.word	0x40022000

08002674 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002680:	4b2a      	ldr	r3, [pc, #168]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800268c:	f7ff f984 	bl	8001998 <HAL_PWREx_GetVoltageRange>
 8002690:	6178      	str	r0, [r7, #20]
 8002692:	e014      	b.n	80026be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	4a24      	ldr	r2, [pc, #144]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6593      	str	r3, [r2, #88]	; 0x58
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026ac:	f7ff f974 	bl	8001998 <HAL_PWREx_GetVoltageRange>
 80026b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	4a1d      	ldr	r2, [pc, #116]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c4:	d10b      	bne.n	80026de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b80      	cmp	r3, #128	; 0x80
 80026ca:	d919      	bls.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2ba0      	cmp	r3, #160	; 0xa0
 80026d0:	d902      	bls.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026d2:	2302      	movs	r3, #2
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	e013      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	e010      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b80      	cmp	r3, #128	; 0x80
 80026e2:	d902      	bls.n	80026ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026e4:	2303      	movs	r3, #3
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	e00a      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d102      	bne.n	80026f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026f0:	2302      	movs	r3, #2
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	e004      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b70      	cmp	r3, #112	; 0x70
 80026fa:	d101      	bne.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026fc:	2301      	movs	r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 0207 	bic.w	r2, r3, #7
 8002708:	4909      	ldr	r1, [pc, #36]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	40022000 	.word	0x40022000

08002734 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800273c:	2300      	movs	r3, #0
 800273e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002740:	2300      	movs	r3, #0
 8002742:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274c:	2b00      	cmp	r3, #0
 800274e:	d031      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002758:	d01a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800275a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800275e:	d814      	bhi.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002768:	d10f      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800276a:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4a5c      	ldr	r2, [pc, #368]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002776:	e00c      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f9de 	bl	8002b40 <RCCEx_PLLSAI1_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002788:	e003      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	74fb      	strb	r3, [r7, #19]
      break;
 800278e:	e000      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002792:	7cfb      	ldrb	r3, [r7, #19]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002798:	4b51      	ldr	r3, [pc, #324]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	494e      	ldr	r1, [pc, #312]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ae:	e001      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 809e 	beq.w	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027c6:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	4a3f      	ldr	r2, [pc, #252]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6593      	str	r3, [r2, #88]	; 0x58
 80027e8:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f4:	2301      	movs	r3, #1
 80027f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f8:	4b3a      	ldr	r3, [pc, #232]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a39      	ldr	r2, [pc, #228]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002804:	f7fe fc10 	bl	8001028 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800280a:	e009      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7fe fc0c 	bl	8001028 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d902      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	74fb      	strb	r3, [r7, #19]
        break;
 800281e:	e005      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002820:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ef      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d15a      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01e      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	429a      	cmp	r2, r3
 800284c:	d019      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002858:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800285a:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	4a1b      	ldr	r2, [pc, #108]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800287a:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d016      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fbcc 	bl	8001028 <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002892:	e00b      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7fe fbc8 	bl	8001028 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d902      	bls.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	74fb      	strb	r3, [r7, #19]
            break;
 80028aa:	e006      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0ec      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ce:	4904      	ldr	r1, [pc, #16]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028d6:	e009      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
 80028dc:	e006      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ec:	7c7b      	ldrb	r3, [r7, #17]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d105      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f2:	4b8a      	ldr	r3, [pc, #552]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	4a89      	ldr	r2, [pc, #548]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800290a:	4b84      	ldr	r3, [pc, #528]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	f023 0203 	bic.w	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4980      	ldr	r1, [pc, #512]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800292c:	4b7b      	ldr	r3, [pc, #492]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f023 020c 	bic.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	4978      	ldr	r1, [pc, #480]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800294e:	4b73      	ldr	r3, [pc, #460]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	496f      	ldr	r1, [pc, #444]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002970:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297e:	4967      	ldr	r1, [pc, #412]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002992:	4b62      	ldr	r3, [pc, #392]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	495e      	ldr	r1, [pc, #376]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	4956      	ldr	r1, [pc, #344]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029d6:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	494d      	ldr	r1, [pc, #308]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d028      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029f8:	4b48      	ldr	r3, [pc, #288]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4945      	ldr	r1, [pc, #276]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a16:	d106      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a3f      	ldr	r2, [pc, #252]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a22:	60d3      	str	r3, [r2, #12]
 8002a24:	e011      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3304      	adds	r3, #4
 8002a34:	2101      	movs	r1, #1
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f882 	bl	8002b40 <RCCEx_PLLSAI1_Config>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d028      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a56:	4b31      	ldr	r3, [pc, #196]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	492d      	ldr	r1, [pc, #180]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a74:	d106      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4a28      	ldr	r2, [pc, #160]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a80:	60d3      	str	r3, [r2, #12]
 8002a82:	e011      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2101      	movs	r1, #1
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f853 	bl	8002b40 <RCCEx_PLLSAI1_Config>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a9e:	7cfb      	ldrb	r3, [r7, #19]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01c      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac2:	4916      	ldr	r1, [pc, #88]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	2102      	movs	r1, #2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f830 	bl	8002b40 <RCCEx_PLLSAI1_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b08:	4904      	ldr	r1, [pc, #16]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b10:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b2a:	f043 0304 	orr.w	r3, r3, #4
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000

08002b40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b4e:	4b74      	ldr	r3, [pc, #464]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d018      	beq.n	8002b8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b5a:	4b71      	ldr	r3, [pc, #452]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0203 	and.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d10d      	bne.n	8002b86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b72:	4b6b      	ldr	r3, [pc, #428]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
       ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d047      	beq.n	8002c16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	e044      	b.n	8002c16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d018      	beq.n	8002bc6 <RCCEx_PLLSAI1_Config+0x86>
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d825      	bhi.n	8002be4 <RCCEx_PLLSAI1_Config+0xa4>
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d002      	beq.n	8002ba2 <RCCEx_PLLSAI1_Config+0x62>
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d009      	beq.n	8002bb4 <RCCEx_PLLSAI1_Config+0x74>
 8002ba0:	e020      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ba2:	4b5f      	ldr	r3, [pc, #380]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11d      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb2:	e01a      	b.n	8002bea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bb4:	4b5a      	ldr	r3, [pc, #360]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d116      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e013      	b.n	8002bee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bc6:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bd2:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002be2:	e006      	b.n	8002bf2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      break;
 8002be8:	e004      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bea:	bf00      	nop
 8002bec:	e002      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bf2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10d      	bne.n	8002c16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bfa:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	4943      	ldr	r1, [pc, #268]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d17c      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c1c:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a3f      	ldr	r2, [pc, #252]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c28:	f7fe f9fe 	bl	8001028 <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c2e:	e009      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c30:	f7fe f9fa 	bl	8001028 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d902      	bls.n	8002c44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	73fb      	strb	r3, [r7, #15]
        break;
 8002c42:	e005      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ef      	bne.n	8002c30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d15f      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d110      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	0211      	lsls	r1, r2, #8
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68d2      	ldr	r2, [r2, #12]
 8002c72:	06d2      	lsls	r2, r2, #27
 8002c74:	430a      	orrs	r2, r1
 8002c76:	492a      	ldr	r1, [pc, #168]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	610b      	str	r3, [r1, #16]
 8002c7c:	e027      	b.n	8002cce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d112      	bne.n	8002caa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c84:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6892      	ldr	r2, [r2, #8]
 8002c94:	0211      	lsls	r1, r2, #8
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6912      	ldr	r2, [r2, #16]
 8002c9a:	0852      	lsrs	r2, r2, #1
 8002c9c:	3a01      	subs	r2, #1
 8002c9e:	0552      	lsls	r2, r2, #21
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	491f      	ldr	r1, [pc, #124]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	610b      	str	r3, [r1, #16]
 8002ca8:	e011      	b.n	8002cce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6892      	ldr	r2, [r2, #8]
 8002cba:	0211      	lsls	r1, r2, #8
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6952      	ldr	r2, [r2, #20]
 8002cc0:	0852      	lsrs	r2, r2, #1
 8002cc2:	3a01      	subs	r2, #1
 8002cc4:	0652      	lsls	r2, r2, #25
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	4915      	ldr	r1, [pc, #84]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7fe f9a5 	bl	8001028 <HAL_GetTick>
 8002cde:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ce0:	e009      	b.n	8002cf6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ce2:	f7fe f9a1 	bl	8001028 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d902      	bls.n	8002cf6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	73fb      	strb	r3, [r7, #15]
          break;
 8002cf4:	e005      	b.n	8002d02 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ef      	beq.n	8002ce2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d106      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4903      	ldr	r1, [pc, #12]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e049      	b.n	8002dca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f841 	bl	8002dd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f000 ff04 	bl	8003b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d001      	beq.n	8002e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e03b      	b.n	8002e78 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_TIM_Base_Start_IT+0x4e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2a:	d004      	beq.n	8002e36 <HAL_TIM_Base_Start_IT+0x4e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d115      	bne.n	8002e62 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <HAL_TIM_Base_Start_IT+0xa4>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b06      	cmp	r3, #6
 8002e46:	d015      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x8c>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4e:	d011      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e60:	e008      	b.n	8002e74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e000      	b.n	8002e76 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40014000 	.word	0x40014000
 8002e8c:	00010007 	.word	0x00010007

08002e90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e049      	b.n	8002f36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd feaa 	bl	8000c10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f000 fe4e 	bl	8003b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_TIM_PWM_Start_DMA+0x2c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e03c      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d109      	bne.n	8002f86 <HAL_TIM_PWM_Start_DMA+0x46>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	e02f      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d109      	bne.n	8002fa0 <HAL_TIM_PWM_Start_DMA+0x60>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e022      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d109      	bne.n	8002fba <HAL_TIM_PWM_Start_DMA+0x7a>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e015      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d109      	bne.n	8002fd4 <HAL_TIM_PWM_Start_DMA+0x94>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e008      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
 8002fec:	e18d      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e03c      	b.n	8003082 <HAL_TIM_PWM_Start_DMA+0x142>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b04      	cmp	r3, #4
 800300c:	d109      	bne.n	8003022 <HAL_TIM_PWM_Start_DMA+0xe2>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	e02f      	b.n	8003082 <HAL_TIM_PWM_Start_DMA+0x142>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d109      	bne.n	800303c <HAL_TIM_PWM_Start_DMA+0xfc>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e022      	b.n	8003082 <HAL_TIM_PWM_Start_DMA+0x142>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d109      	bne.n	8003056 <HAL_TIM_PWM_Start_DMA+0x116>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	e015      	b.n	8003082 <HAL_TIM_PWM_Start_DMA+0x142>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b10      	cmp	r3, #16
 800305a:	d109      	bne.n	8003070 <HAL_TIM_PWM_Start_DMA+0x130>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e008      	b.n	8003082 <HAL_TIM_PWM_Start_DMA+0x142>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d034      	beq.n	80030f0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_TIM_PWM_Start_DMA+0x152>
 800308c:	887b      	ldrh	r3, [r7, #2]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e139      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d104      	bne.n	80030a6 <HAL_TIM_PWM_Start_DMA+0x166>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a4:	e026      	b.n	80030f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d104      	bne.n	80030b6 <HAL_TIM_PWM_Start_DMA+0x176>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b4:	e01e      	b.n	80030f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d104      	bne.n	80030c6 <HAL_TIM_PWM_Start_DMA+0x186>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030c4:	e016      	b.n	80030f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d104      	bne.n	80030d6 <HAL_TIM_PWM_Start_DMA+0x196>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030d4:	e00e      	b.n	80030f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d104      	bne.n	80030e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e4:	e006      	b.n	80030f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ee:	e001      	b.n	80030f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e10a      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	f200 80ae 	bhi.w	8003258 <HAL_TIM_PWM_Start_DMA+0x318>
 80030fc:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003139 	.word	0x08003139
 8003108:	08003259 	.word	0x08003259
 800310c:	08003259 	.word	0x08003259
 8003110:	08003259 	.word	0x08003259
 8003114:	08003181 	.word	0x08003181
 8003118:	08003259 	.word	0x08003259
 800311c:	08003259 	.word	0x08003259
 8003120:	08003259 	.word	0x08003259
 8003124:	080031c9 	.word	0x080031c9
 8003128:	08003259 	.word	0x08003259
 800312c:	08003259 	.word	0x08003259
 8003130:	08003259 	.word	0x08003259
 8003134:	08003211 	.word	0x08003211
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	4a75      	ldr	r2, [pc, #468]	; (8003314 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	4a74      	ldr	r2, [pc, #464]	; (8003318 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003146:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	4a73      	ldr	r2, [pc, #460]	; (800331c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800314e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3334      	adds	r3, #52	; 0x34
 800315c:	461a      	mov	r2, r3
 800315e:	887b      	ldrh	r3, [r7, #2]
 8003160:	f7fe f908 	bl	8001374 <HAL_DMA_Start_IT>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0cd      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317c:	60da      	str	r2, [r3, #12]
      break;
 800317e:	e06e      	b.n	800325e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	4a63      	ldr	r2, [pc, #396]	; (8003314 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003186:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	4a62      	ldr	r2, [pc, #392]	; (8003318 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800318e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	4a61      	ldr	r2, [pc, #388]	; (800331c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003196:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3338      	adds	r3, #56	; 0x38
 80031a4:	461a      	mov	r2, r3
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	f7fe f8e4 	bl	8001374 <HAL_DMA_Start_IT>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e0a9      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031c4:	60da      	str	r2, [r3, #12]
      break;
 80031c6:	e04a      	b.n	800325e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	4a51      	ldr	r2, [pc, #324]	; (8003314 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	4a50      	ldr	r2, [pc, #320]	; (8003318 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	4a4f      	ldr	r2, [pc, #316]	; (800331c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80031de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	333c      	adds	r3, #60	; 0x3c
 80031ec:	461a      	mov	r2, r3
 80031ee:	887b      	ldrh	r3, [r7, #2]
 80031f0:	f7fe f8c0 	bl	8001374 <HAL_DMA_Start_IT>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e085      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320c:	60da      	str	r2, [r3, #12]
      break;
 800320e:	e026      	b.n	800325e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	4a3f      	ldr	r2, [pc, #252]	; (8003314 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	4a3e      	ldr	r2, [pc, #248]	; (8003318 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800321e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	4a3d      	ldr	r2, [pc, #244]	; (800331c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003226:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3340      	adds	r3, #64	; 0x40
 8003234:	461a      	mov	r2, r3
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	f7fe f89c 	bl	8001374 <HAL_DMA_Start_IT>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e061      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003254:	60da      	str	r2, [r3, #12]
      break;
 8003256:	e002      	b.n	800325e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	75fb      	strb	r3, [r7, #23]
      break;
 800325c:	bf00      	nop
  }

  if (status == HAL_OK)
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d151      	bne.n	8003308 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2201      	movs	r2, #1
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 ff61 	bl	8004134 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d009      	beq.n	8003290 <HAL_TIM_PWM_Start_DMA+0x350>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a28      	ldr	r2, [pc, #160]	; (8003324 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d004      	beq.n	8003290 <HAL_TIM_PWM_Start_DMA+0x350>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a27      	ldr	r2, [pc, #156]	; (8003328 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d101      	bne.n	8003294 <HAL_TIM_PWM_Start_DMA+0x354>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_TIM_PWM_Start_DMA+0x356>
 8003294:	2300      	movs	r3, #0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_TIM_PWM_Start_DMA+0x388>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d004      	beq.n	80032c8 <HAL_TIM_PWM_Start_DMA+0x388>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d115      	bne.n	80032f4 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	4b17      	ldr	r3, [pc, #92]	; (800332c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d015      	beq.n	8003306 <HAL_TIM_PWM_Start_DMA+0x3c6>
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d011      	beq.n	8003306 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f2:	e008      	b.n	8003306 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e000      	b.n	8003308 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003306:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003308:	7dfb      	ldrb	r3, [r7, #23]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	08003a5f 	.word	0x08003a5f
 8003318:	08003b07 	.word	0x08003b07
 800331c:	080039cd 	.word	0x080039cd
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40014000 	.word	0x40014000
 8003328:	40014400 	.word	0x40014400
 800332c:	00010007 	.word	0x00010007

08003330 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	d855      	bhi.n	80033f0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	08003381 	.word	0x08003381
 8003350:	080033f1 	.word	0x080033f1
 8003354:	080033f1 	.word	0x080033f1
 8003358:	080033f1 	.word	0x080033f1
 800335c:	0800339d 	.word	0x0800339d
 8003360:	080033f1 	.word	0x080033f1
 8003364:	080033f1 	.word	0x080033f1
 8003368:	080033f1 	.word	0x080033f1
 800336c:	080033b9 	.word	0x080033b9
 8003370:	080033f1 	.word	0x080033f1
 8003374:	080033f1 	.word	0x080033f1
 8003378:	080033f1 	.word	0x080033f1
 800337c:	080033d5 	.word	0x080033d5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800338e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe f84d 	bl	8001434 <HAL_DMA_Abort_IT>
      break;
 800339a:	e02c      	b.n	80033f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe f83f 	bl	8001434 <HAL_DMA_Abort_IT>
      break;
 80033b6:	e01e      	b.n	80033f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe f831 	bl	8001434 <HAL_DMA_Abort_IT>
      break;
 80033d2:	e010      	b.n	80033f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe f823 	bl	8001434 <HAL_DMA_Abort_IT>
      break;
 80033ee:	e002      	b.n	80033f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      break;
 80033f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d176      	bne.n	80034ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2200      	movs	r2, #0
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fe95 	bl	8004134 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a39      	ldr	r2, [pc, #228]	; (80034f4 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a37      	ldr	r2, [pc, #220]	; (80034f8 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a36      	ldr	r2, [pc, #216]	; (80034fc <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0xfe>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d017      	beq.n	8003462 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a1a      	ldr	r2, [r3, #32]
 8003438:	f241 1311 	movw	r3, #4369	; 0x1111
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10f      	bne.n	8003462 <HAL_TIM_PWM_Stop_DMA+0x132>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a1a      	ldr	r2, [r3, #32]
 8003448:	f240 4344 	movw	r3, #1092	; 0x444
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d107      	bne.n	8003462 <HAL_TIM_PWM_Stop_DMA+0x132>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	f241 1311 	movw	r3, #4369	; 0x1111
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <HAL_TIM_PWM_Stop_DMA+0x162>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a1a      	ldr	r2, [r3, #32]
 8003478:	f240 4344 	movw	r3, #1092	; 0x444
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d107      	bne.n	8003492 <HAL_TIM_PWM_Stop_DMA+0x162>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d104      	bne.n	80034a2 <HAL_TIM_PWM_Stop_DMA+0x172>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a0:	e023      	b.n	80034ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_PWM_Stop_DMA+0x182>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b0:	e01b      	b.n	80034ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d104      	bne.n	80034c2 <HAL_TIM_PWM_Stop_DMA+0x192>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c0:	e013      	b.n	80034ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	d104      	bne.n	80034d2 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034d0:	e00b      	b.n	80034ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d104      	bne.n	80034e2 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e0:	e003      	b.n	80034ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40014400 	.word	0x40014400

08003500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0202 	mvn.w	r2, #2
 800352c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa1a 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa0c 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7fd fad7 	bl	8000b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b04      	cmp	r3, #4
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b04      	cmp	r3, #4
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0204 	mvn.w	r2, #4
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9f0 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9e2 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd faad 	bl	8000b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d122      	bne.n	8003604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d11b      	bne.n	8003604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0208 	mvn.w	r2, #8
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2204      	movs	r2, #4
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f9c6 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f9b8 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fd fa83 	bl	8000b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b10      	cmp	r3, #16
 8003610:	d122      	bne.n	8003658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b10      	cmp	r3, #16
 800361e:	d11b      	bne.n	8003658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0210 	mvn.w	r2, #16
 8003628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2208      	movs	r2, #8
 800362e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f99c 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 8003644:	e005      	b.n	8003652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f98e 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7fd fa59 	bl	8000b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d10e      	bne.n	8003684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0201 	mvn.w	r2, #1
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd fa86 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368e:	2b80      	cmp	r3, #128	; 0x80
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d107      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fe50 	bl	8004350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036be:	d10e      	bne.n	80036de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d107      	bne.n	80036de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fe43 	bl	8004364 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b40      	cmp	r3, #64	; 0x40
 80036ea:	d10e      	bne.n	800370a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d107      	bne.n	800370a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f94d 	bl	80039a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b20      	cmp	r3, #32
 8003716:	d10e      	bne.n	8003736 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b20      	cmp	r3, #32
 8003724:	d107      	bne.n	8003736 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f06f 0220 	mvn.w	r2, #32
 800372e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fe03 	bl	800433c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800375a:	2302      	movs	r3, #2
 800375c:	e0ff      	b.n	800395e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b14      	cmp	r3, #20
 800376a:	f200 80f0 	bhi.w	800394e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800376e:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	080037c9 	.word	0x080037c9
 8003778:	0800394f 	.word	0x0800394f
 800377c:	0800394f 	.word	0x0800394f
 8003780:	0800394f 	.word	0x0800394f
 8003784:	08003809 	.word	0x08003809
 8003788:	0800394f 	.word	0x0800394f
 800378c:	0800394f 	.word	0x0800394f
 8003790:	0800394f 	.word	0x0800394f
 8003794:	0800384b 	.word	0x0800384b
 8003798:	0800394f 	.word	0x0800394f
 800379c:	0800394f 	.word	0x0800394f
 80037a0:	0800394f 	.word	0x0800394f
 80037a4:	0800388b 	.word	0x0800388b
 80037a8:	0800394f 	.word	0x0800394f
 80037ac:	0800394f 	.word	0x0800394f
 80037b0:	0800394f 	.word	0x0800394f
 80037b4:	080038cd 	.word	0x080038cd
 80037b8:	0800394f 	.word	0x0800394f
 80037bc:	0800394f 	.word	0x0800394f
 80037c0:	0800394f 	.word	0x0800394f
 80037c4:	0800390d 	.word	0x0800390d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fa32 	bl	8003c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0208 	orr.w	r2, r2, #8
 80037e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0204 	bic.w	r2, r2, #4
 80037f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6999      	ldr	r1, [r3, #24]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	619a      	str	r2, [r3, #24]
      break;
 8003806:	e0a5      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fa8e 	bl	8003d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6999      	ldr	r1, [r3, #24]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	021a      	lsls	r2, r3, #8
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	619a      	str	r2, [r3, #24]
      break;
 8003848:	e084      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fae7 	bl	8003e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0208 	orr.w	r2, r2, #8
 8003864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0204 	bic.w	r2, r2, #4
 8003874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69d9      	ldr	r1, [r3, #28]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	61da      	str	r2, [r3, #28]
      break;
 8003888:	e064      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fb3f 	bl	8003f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69d9      	ldr	r1, [r3, #28]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	021a      	lsls	r2, r3, #8
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	61da      	str	r2, [r3, #28]
      break;
 80038ca:	e043      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fb7c 	bl	8003fd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0208 	orr.w	r2, r2, #8
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0204 	bic.w	r2, r2, #4
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800390a:	e023      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fbb4 	bl	8004080 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003926:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	021a      	lsls	r2, r3, #8
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800394c:	e002      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
      break;
 8003952:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800395c:	7dfb      	ldrb	r3, [r7, #23]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop

08003968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d107      	bne.n	80039f4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f2:	e02a      	b.n	8003a4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d107      	bne.n	8003a0e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2202      	movs	r2, #2
 8003a02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a0c:	e01d      	b.n	8003a4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d107      	bne.n	8003a28 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a26:	e010      	b.n	8003a4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d107      	bne.n	8003a42 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2208      	movs	r2, #8
 8003a36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a40:	e003      	b.n	8003a4a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7ff ffb4 	bl	80039b8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	771a      	strb	r2, [r3, #28]
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d10b      	bne.n	8003a8e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d136      	bne.n	8003af2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a8c:	e031      	b.n	8003af2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d10b      	bne.n	8003ab0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d125      	bne.n	8003af2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aae:	e020      	b.n	8003af2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d10b      	bne.n	8003ad2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2204      	movs	r2, #4
 8003abe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d114      	bne.n	8003af2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ad0:	e00f      	b.n	8003af2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d10a      	bne.n	8003af2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2208      	movs	r2, #8
 8003ae0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7fd f806 	bl	8000b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	771a      	strb	r2, [r3, #28]
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d103      	bne.n	8003b26 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	771a      	strb	r2, [r3, #28]
 8003b24:	e019      	b.n	8003b5a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d103      	bne.n	8003b38 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2202      	movs	r2, #2
 8003b34:	771a      	strb	r2, [r3, #28]
 8003b36:	e010      	b.n	8003b5a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d103      	bne.n	8003b4a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2204      	movs	r2, #4
 8003b46:	771a      	strb	r2, [r3, #28]
 8003b48:	e007      	b.n	8003b5a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d102      	bne.n	8003b5a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2208      	movs	r2, #8
 8003b58:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff ff18 	bl	8003990 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	771a      	strb	r2, [r3, #28]
}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a2a      	ldr	r2, [pc, #168]	; (8003c2c <TIM_Base_SetConfig+0xbc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d003      	beq.n	8003b90 <TIM_Base_SetConfig+0x20>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8e:	d108      	bne.n	8003ba2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a21      	ldr	r2, [pc, #132]	; (8003c2c <TIM_Base_SetConfig+0xbc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x52>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb0:	d007      	beq.n	8003bc2 <TIM_Base_SetConfig+0x52>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <TIM_Base_SetConfig+0xc0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_Base_SetConfig+0x52>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <TIM_Base_SetConfig+0xc4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d108      	bne.n	8003bd4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <TIM_Base_SetConfig+0xbc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_Base_SetConfig+0xa0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <TIM_Base_SetConfig+0xc0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_Base_SetConfig+0xa0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <TIM_Base_SetConfig+0xc4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d103      	bne.n	8003c18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	615a      	str	r2, [r3, #20]
}
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40014000 	.word	0x40014000
 8003c34:	40014400 	.word	0x40014400

08003c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f023 0201 	bic.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0303 	bic.w	r3, r3, #3
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f023 0302 	bic.w	r3, r3, #2
 8003c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a24      	ldr	r2, [pc, #144]	; (8003d24 <TIM_OC1_SetConfig+0xec>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d007      	beq.n	8003ca8 <TIM_OC1_SetConfig+0x70>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <TIM_OC1_SetConfig+0xf0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_OC1_SetConfig+0x70>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <TIM_OC1_SetConfig+0xf4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d10c      	bne.n	8003cc2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0308 	bic.w	r3, r3, #8
 8003cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f023 0304 	bic.w	r3, r3, #4
 8003cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <TIM_OC1_SetConfig+0xec>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <TIM_OC1_SetConfig+0xa2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <TIM_OC1_SetConfig+0xf0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_OC1_SetConfig+0xa2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <TIM_OC1_SetConfig+0xf4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d111      	bne.n	8003cfe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	621a      	str	r2, [r3, #32]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40014400 	.word	0x40014400

08003d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f023 0210 	bic.w	r2, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0320 	bic.w	r3, r3, #32
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a22      	ldr	r2, [pc, #136]	; (8003e18 <TIM_OC2_SetConfig+0xe8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d10d      	bne.n	8003db0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a19      	ldr	r2, [pc, #100]	; (8003e18 <TIM_OC2_SetConfig+0xe8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_OC2_SetConfig+0x98>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <TIM_OC2_SetConfig+0xec>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_OC2_SetConfig+0x98>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <TIM_OC2_SetConfig+0xf0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d113      	bne.n	8003df0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	621a      	str	r2, [r3, #32]
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400

08003e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0303 	bic.w	r3, r3, #3
 8003e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <TIM_OC3_SetConfig+0xe4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10d      	bne.n	8003ea2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <TIM_OC3_SetConfig+0xe4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_OC3_SetConfig+0x96>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <TIM_OC3_SetConfig+0xe8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_OC3_SetConfig+0x96>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <TIM_OC3_SetConfig+0xec>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d113      	bne.n	8003ee2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	621a      	str	r2, [r3, #32]
}
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	40014400 	.word	0x40014400

08003f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	031b      	lsls	r3, r3, #12
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a14      	ldr	r2, [pc, #80]	; (8003fc4 <TIM_OC4_SetConfig+0xb0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d007      	beq.n	8003f88 <TIM_OC4_SetConfig+0x74>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <TIM_OC4_SetConfig+0xb4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_OC4_SetConfig+0x74>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <TIM_OC4_SetConfig+0xb8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d109      	bne.n	8003f9c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	019b      	lsls	r3, r3, #6
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400

08003fd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004014:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a13      	ldr	r2, [pc, #76]	; (8004074 <TIM_OC5_SetConfig+0xa4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <TIM_OC5_SetConfig+0x6a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a12      	ldr	r2, [pc, #72]	; (8004078 <TIM_OC5_SetConfig+0xa8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_OC5_SetConfig+0x6a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a11      	ldr	r2, [pc, #68]	; (800407c <TIM_OC5_SetConfig+0xac>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d109      	bne.n	800404e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004040:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	621a      	str	r2, [r3, #32]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400

08004080 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	051b      	lsls	r3, r3, #20
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a14      	ldr	r2, [pc, #80]	; (8004128 <TIM_OC6_SetConfig+0xa8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_OC6_SetConfig+0x6c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a13      	ldr	r2, [pc, #76]	; (800412c <TIM_OC6_SetConfig+0xac>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_OC6_SetConfig+0x6c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a12      	ldr	r2, [pc, #72]	; (8004130 <TIM_OC6_SetConfig+0xb0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d109      	bne.n	8004100 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	029b      	lsls	r3, r3, #10
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40012c00 	.word	0x40012c00
 800412c:	40014000 	.word	0x40014000
 8004130:	40014400 	.word	0x40014400

08004134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	2201      	movs	r2, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1a      	ldr	r2, [r3, #32]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	43db      	mvns	r3, r3
 8004156:	401a      	ands	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1a      	ldr	r2, [r3, #32]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 031f 	and.w	r3, r3, #31
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	fa01 f303 	lsl.w	r3, r1, r3
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	621a      	str	r2, [r3, #32]
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004194:	2302      	movs	r3, #2
 8004196:	e04f      	b.n	8004238 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a21      	ldr	r2, [pc, #132]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d108      	bne.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a14      	ldr	r2, [pc, #80]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d009      	beq.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004200:	d004      	beq.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a10      	ldr	r2, [pc, #64]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d10c      	bne.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004212:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	4313      	orrs	r3, r2
 800421c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40014000 	.word	0x40014000

0800424c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004264:	2302      	movs	r3, #2
 8004266:	e060      	b.n	800432a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a14      	ldr	r2, [pc, #80]	; (8004338 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d115      	bne.n	8004318 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	051b      	lsls	r3, r3, #20
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40012c00 	.word	0x40012c00

0800433c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e040      	b.n	800440c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fc fccc 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2224      	movs	r2, #36	; 0x24
 80043a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f82c 	bl	8004414 <UART_SetConfig>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e022      	b.n	800440c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fa4c 	bl	800486c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fad3 	bl	80049b0 <UART_CheckIdleState>
 800440a:	4603      	mov	r3, r0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004418:	b08a      	sub	sp, #40	; 0x28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	431a      	orrs	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	431a      	orrs	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	4313      	orrs	r3, r2
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4bb4      	ldr	r3, [pc, #720]	; (8004714 <UART_SetConfig+0x300>)
 8004444:	4013      	ands	r3, r2
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800444c:	430b      	orrs	r3, r1
 800444e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4aa9      	ldr	r2, [pc, #676]	; (8004718 <UART_SetConfig+0x304>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	4313      	orrs	r3, r2
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4aa0      	ldr	r2, [pc, #640]	; (800471c <UART_SetConfig+0x308>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d126      	bne.n	80044ec <UART_SetConfig+0xd8>
 800449e:	4ba0      	ldr	r3, [pc, #640]	; (8004720 <UART_SetConfig+0x30c>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d81b      	bhi.n	80044e4 <UART_SetConfig+0xd0>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <UART_SetConfig+0xa0>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080044c5 	.word	0x080044c5
 80044b8:	080044d5 	.word	0x080044d5
 80044bc:	080044cd 	.word	0x080044cd
 80044c0:	080044dd 	.word	0x080044dd
 80044c4:	2301      	movs	r3, #1
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ca:	e080      	b.n	80045ce <UART_SetConfig+0x1ba>
 80044cc:	2302      	movs	r3, #2
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e07c      	b.n	80045ce <UART_SetConfig+0x1ba>
 80044d4:	2304      	movs	r3, #4
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e078      	b.n	80045ce <UART_SetConfig+0x1ba>
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e074      	b.n	80045ce <UART_SetConfig+0x1ba>
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e070      	b.n	80045ce <UART_SetConfig+0x1ba>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a8c      	ldr	r2, [pc, #560]	; (8004724 <UART_SetConfig+0x310>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d138      	bne.n	8004568 <UART_SetConfig+0x154>
 80044f6:	4b8a      	ldr	r3, [pc, #552]	; (8004720 <UART_SetConfig+0x30c>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b0c      	cmp	r3, #12
 8004502:	d82d      	bhi.n	8004560 <UART_SetConfig+0x14c>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0xf8>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004541 	.word	0x08004541
 8004510:	08004561 	.word	0x08004561
 8004514:	08004561 	.word	0x08004561
 8004518:	08004561 	.word	0x08004561
 800451c:	08004551 	.word	0x08004551
 8004520:	08004561 	.word	0x08004561
 8004524:	08004561 	.word	0x08004561
 8004528:	08004561 	.word	0x08004561
 800452c:	08004549 	.word	0x08004549
 8004530:	08004561 	.word	0x08004561
 8004534:	08004561 	.word	0x08004561
 8004538:	08004561 	.word	0x08004561
 800453c:	08004559 	.word	0x08004559
 8004540:	2300      	movs	r3, #0
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004546:	e042      	b.n	80045ce <UART_SetConfig+0x1ba>
 8004548:	2302      	movs	r3, #2
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454e:	e03e      	b.n	80045ce <UART_SetConfig+0x1ba>
 8004550:	2304      	movs	r3, #4
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004556:	e03a      	b.n	80045ce <UART_SetConfig+0x1ba>
 8004558:	2308      	movs	r3, #8
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455e:	e036      	b.n	80045ce <UART_SetConfig+0x1ba>
 8004560:	2310      	movs	r3, #16
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004566:	e032      	b.n	80045ce <UART_SetConfig+0x1ba>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a6a      	ldr	r2, [pc, #424]	; (8004718 <UART_SetConfig+0x304>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d12a      	bne.n	80045c8 <UART_SetConfig+0x1b4>
 8004572:	4b6b      	ldr	r3, [pc, #428]	; (8004720 <UART_SetConfig+0x30c>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800457c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004580:	d01a      	beq.n	80045b8 <UART_SetConfig+0x1a4>
 8004582:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004586:	d81b      	bhi.n	80045c0 <UART_SetConfig+0x1ac>
 8004588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458c:	d00c      	beq.n	80045a8 <UART_SetConfig+0x194>
 800458e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004592:	d815      	bhi.n	80045c0 <UART_SetConfig+0x1ac>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <UART_SetConfig+0x18c>
 8004598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459c:	d008      	beq.n	80045b0 <UART_SetConfig+0x19c>
 800459e:	e00f      	b.n	80045c0 <UART_SetConfig+0x1ac>
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a6:	e012      	b.n	80045ce <UART_SetConfig+0x1ba>
 80045a8:	2302      	movs	r3, #2
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e00e      	b.n	80045ce <UART_SetConfig+0x1ba>
 80045b0:	2304      	movs	r3, #4
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b6:	e00a      	b.n	80045ce <UART_SetConfig+0x1ba>
 80045b8:	2308      	movs	r3, #8
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045be:	e006      	b.n	80045ce <UART_SetConfig+0x1ba>
 80045c0:	2310      	movs	r3, #16
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c6:	e002      	b.n	80045ce <UART_SetConfig+0x1ba>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a51      	ldr	r2, [pc, #324]	; (8004718 <UART_SetConfig+0x304>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d17a      	bne.n	80046ce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d824      	bhi.n	800462a <UART_SetConfig+0x216>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <UART_SetConfig+0x1d4>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	0800460d 	.word	0x0800460d
 80045ec:	0800462b 	.word	0x0800462b
 80045f0:	08004615 	.word	0x08004615
 80045f4:	0800462b 	.word	0x0800462b
 80045f8:	0800461b 	.word	0x0800461b
 80045fc:	0800462b 	.word	0x0800462b
 8004600:	0800462b 	.word	0x0800462b
 8004604:	0800462b 	.word	0x0800462b
 8004608:	08004623 	.word	0x08004623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7fd ffd4 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8004610:	61f8      	str	r0, [r7, #28]
        break;
 8004612:	e010      	b.n	8004636 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004614:	4b44      	ldr	r3, [pc, #272]	; (8004728 <UART_SetConfig+0x314>)
 8004616:	61fb      	str	r3, [r7, #28]
        break;
 8004618:	e00d      	b.n	8004636 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461a:	f7fd ff35 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 800461e:	61f8      	str	r0, [r7, #28]
        break;
 8004620:	e009      	b.n	8004636 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004626:	61fb      	str	r3, [r7, #28]
        break;
 8004628:	e005      	b.n	8004636 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004634:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8107 	beq.w	800484c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	4613      	mov	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4413      	add	r3, r2
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	429a      	cmp	r2, r3
 800464c:	d305      	bcc.n	800465a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	429a      	cmp	r2, r3
 8004658:	d903      	bls.n	8004662 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004660:	e0f4      	b.n	800484c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	2200      	movs	r2, #0
 8004666:	461c      	mov	r4, r3
 8004668:	4615      	mov	r5, r2
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	022b      	lsls	r3, r5, #8
 8004674:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004678:	0222      	lsls	r2, r4, #8
 800467a:	68f9      	ldr	r1, [r7, #12]
 800467c:	6849      	ldr	r1, [r1, #4]
 800467e:	0849      	lsrs	r1, r1, #1
 8004680:	2000      	movs	r0, #0
 8004682:	4688      	mov	r8, r1
 8004684:	4681      	mov	r9, r0
 8004686:	eb12 0a08 	adds.w	sl, r2, r8
 800468a:	eb43 0b09 	adc.w	fp, r3, r9
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	603b      	str	r3, [r7, #0]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800469c:	4650      	mov	r0, sl
 800469e:	4659      	mov	r1, fp
 80046a0:	f7fb fd96 	bl	80001d0 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4613      	mov	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b2:	d308      	bcc.n	80046c6 <UART_SetConfig+0x2b2>
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ba:	d204      	bcs.n	80046c6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	60da      	str	r2, [r3, #12]
 80046c4:	e0c2      	b.n	800484c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046cc:	e0be      	b.n	800484c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d6:	d16a      	bne.n	80047ae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80046d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d834      	bhi.n	800474a <UART_SetConfig+0x336>
 80046e0:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <UART_SetConfig+0x2d4>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	0800472d 	.word	0x0800472d
 80046f0:	08004735 	.word	0x08004735
 80046f4:	0800474b 	.word	0x0800474b
 80046f8:	0800473b 	.word	0x0800473b
 80046fc:	0800474b 	.word	0x0800474b
 8004700:	0800474b 	.word	0x0800474b
 8004704:	0800474b 	.word	0x0800474b
 8004708:	08004743 	.word	0x08004743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800470c:	f7fd ff54 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8004710:	61f8      	str	r0, [r7, #28]
        break;
 8004712:	e020      	b.n	8004756 <UART_SetConfig+0x342>
 8004714:	efff69f3 	.word	0xefff69f3
 8004718:	40008000 	.word	0x40008000
 800471c:	40013800 	.word	0x40013800
 8004720:	40021000 	.word	0x40021000
 8004724:	40004400 	.word	0x40004400
 8004728:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800472c:	f7fd ff5a 	bl	80025e4 <HAL_RCC_GetPCLK2Freq>
 8004730:	61f8      	str	r0, [r7, #28]
        break;
 8004732:	e010      	b.n	8004756 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004734:	4b4c      	ldr	r3, [pc, #304]	; (8004868 <UART_SetConfig+0x454>)
 8004736:	61fb      	str	r3, [r7, #28]
        break;
 8004738:	e00d      	b.n	8004756 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473a:	f7fd fea5 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 800473e:	61f8      	str	r0, [r7, #28]
        break;
 8004740:	e009      	b.n	8004756 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004746:	61fb      	str	r3, [r7, #28]
        break;
 8004748:	e005      	b.n	8004756 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d077      	beq.n	800484c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	005a      	lsls	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	441a      	add	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b0f      	cmp	r3, #15
 8004776:	d916      	bls.n	80047a6 <UART_SetConfig+0x392>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477e:	d212      	bcs.n	80047a6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f023 030f 	bic.w	r3, r3, #15
 8004788:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	b29b      	uxth	r3, r3
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	b29a      	uxth	r2, r3
 8004796:	8afb      	ldrh	r3, [r7, #22]
 8004798:	4313      	orrs	r3, r2
 800479a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	8afa      	ldrh	r2, [r7, #22]
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	e052      	b.n	800484c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047ac:	e04e      	b.n	800484c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d827      	bhi.n	8004806 <UART_SetConfig+0x3f2>
 80047b6:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <UART_SetConfig+0x3a8>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	08004807 	.word	0x08004807
 80047cc:	080047f7 	.word	0x080047f7
 80047d0:	08004807 	.word	0x08004807
 80047d4:	08004807 	.word	0x08004807
 80047d8:	08004807 	.word	0x08004807
 80047dc:	080047ff 	.word	0x080047ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fd feea 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 80047e4:	61f8      	str	r0, [r7, #28]
        break;
 80047e6:	e014      	b.n	8004812 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7fd fefc 	bl	80025e4 <HAL_RCC_GetPCLK2Freq>
 80047ec:	61f8      	str	r0, [r7, #28]
        break;
 80047ee:	e010      	b.n	8004812 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f0:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <UART_SetConfig+0x454>)
 80047f2:	61fb      	str	r3, [r7, #28]
        break;
 80047f4:	e00d      	b.n	8004812 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047f6:	f7fd fe47 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 80047fa:	61f8      	str	r0, [r7, #28]
        break;
 80047fc:	e009      	b.n	8004812 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004802:	61fb      	str	r3, [r7, #28]
        break;
 8004804:	e005      	b.n	8004812 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004810:	bf00      	nop
    }

    if (pclk != 0U)
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d019      	beq.n	800484c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	085a      	lsrs	r2, r3, #1
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	441a      	add	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b0f      	cmp	r3, #15
 8004830:	d909      	bls.n	8004846 <UART_SetConfig+0x432>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d205      	bcs.n	8004846 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e002      	b.n	800484c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004858:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800485c:	4618      	mov	r0, r3
 800485e:	3728      	adds	r7, #40	; 0x28
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004866:	bf00      	nop
 8004868:	00f42400 	.word	0x00f42400

0800486c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01a      	beq.n	8004982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496a:	d10a      	bne.n	8004982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]
  }
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c0:	f7fc fb32 	bl	8001028 <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d10e      	bne.n	80049f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f82d 	bl	8004a42 <UART_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e023      	b.n	8004a3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d10e      	bne.n	8004a1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f817 	bl	8004a42 <UART_WaitOnFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e00d      	b.n	8004a3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b09c      	sub	sp, #112	; 0x70
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a52:	e0a5      	b.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a5a:	f000 80a1 	beq.w	8004ba0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5e:	f7fc fae3 	bl	8001028 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d13e      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a88:	667b      	str	r3, [r7, #100]	; 0x64
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e6      	bne.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	663b      	str	r3, [r7, #96]	; 0x60
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ac6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ac8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e5      	bne.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e067      	b.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d04f      	beq.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d147      	bne.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b18:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e6      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
 8004b62:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3308      	adds	r3, #8
 8004b6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b6c:	623a      	str	r2, [r7, #32]
 8004b6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	69f9      	ldr	r1, [r7, #28]
 8004b72:	6a3a      	ldr	r2, [r7, #32]
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e5      	bne.n	8004b4c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e010      	b.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	f43f af4a 	beq.w	8004a54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3770      	adds	r7, #112	; 0x70
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <__NVIC_SetPriority>:
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	6039      	str	r1, [r7, #0]
 8004bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	db0a      	blt.n	8004bf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	490c      	ldr	r1, [pc, #48]	; (8004c18 <__NVIC_SetPriority+0x4c>)
 8004be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bea:	0112      	lsls	r2, r2, #4
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	440b      	add	r3, r1
 8004bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bf4:	e00a      	b.n	8004c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	4908      	ldr	r1, [pc, #32]	; (8004c1c <__NVIC_SetPriority+0x50>)
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	3b04      	subs	r3, #4
 8004c04:	0112      	lsls	r2, r2, #4
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	440b      	add	r3, r1
 8004c0a:	761a      	strb	r2, [r3, #24]
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	e000e100 	.word	0xe000e100
 8004c1c:	e000ed00 	.word	0xe000ed00

08004c20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <SysTick_Handler+0x1c>)
 8004c26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c28:	f002 f9d0 	bl	8006fcc <xTaskGetSchedulerState>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d001      	beq.n	8004c36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c32:	f003 f971 	bl	8007f18 <xPortSysTickHandler>
  }
}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	e000e010 	.word	0xe000e010

08004c40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c44:	2100      	movs	r1, #0
 8004c46:	f06f 0004 	mvn.w	r0, #4
 8004c4a:	f7ff ffbf 	bl	8004bcc <__NVIC_SetPriority>
#endif
}
 8004c4e:	bf00      	nop
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c5a:	f3ef 8305 	mrs	r3, IPSR
 8004c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8004c60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c66:	f06f 0305 	mvn.w	r3, #5
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	e00c      	b.n	8004c88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <osKernelInitialize+0x44>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d105      	bne.n	8004c82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <osKernelInitialize+0x44>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	607b      	str	r3, [r7, #4]
 8004c80:	e002      	b.n	8004c88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c88:	687b      	ldr	r3, [r7, #4]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20002428 	.word	0x20002428

08004c9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca2:	f3ef 8305 	mrs	r3, IPSR
 8004ca6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004cae:	f06f 0305 	mvn.w	r3, #5
 8004cb2:	607b      	str	r3, [r7, #4]
 8004cb4:	e010      	b.n	8004cd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <osKernelStart+0x48>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d109      	bne.n	8004cd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004cbe:	f7ff ffbf 	bl	8004c40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004cc2:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <osKernelStart+0x48>)
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004cc8:	f001 fd38 	bl	800673c <vTaskStartScheduler>
      stat = osOK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	607b      	str	r3, [r7, #4]
 8004cd0:	e002      	b.n	8004cd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cd8:	687b      	ldr	r3, [r7, #4]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20002428 	.word	0x20002428

08004ce8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08e      	sub	sp, #56	; 0x38
 8004cec:	af04      	add	r7, sp, #16
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cf8:	f3ef 8305 	mrs	r3, IPSR
 8004cfc:	617b      	str	r3, [r7, #20]
  return(result);
 8004cfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d17e      	bne.n	8004e02 <osThreadNew+0x11a>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d07b      	beq.n	8004e02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d0a:	2380      	movs	r3, #128	; 0x80
 8004d0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d0e:	2318      	movs	r3, #24
 8004d10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d045      	beq.n	8004dae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <osThreadNew+0x48>
        name = attr->name;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <osThreadNew+0x6e>
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	2b38      	cmp	r3, #56	; 0x38
 8004d48:	d805      	bhi.n	8004d56 <osThreadNew+0x6e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <osThreadNew+0x72>
        return (NULL);
 8004d56:	2300      	movs	r3, #0
 8004d58:	e054      	b.n	8004e04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00e      	beq.n	8004d90 <osThreadNew+0xa8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b5b      	cmp	r3, #91	; 0x5b
 8004d78:	d90a      	bls.n	8004d90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d006      	beq.n	8004d90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <osThreadNew+0xa8>
        mem = 1;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	e010      	b.n	8004db2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10c      	bne.n	8004db2 <osThreadNew+0xca>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d108      	bne.n	8004db2 <osThreadNew+0xca>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d104      	bne.n	8004db2 <osThreadNew+0xca>
          mem = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]
 8004dac:	e001      	b.n	8004db2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d110      	bne.n	8004dda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dc0:	9202      	str	r2, [sp, #8]
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f001 fade 	bl	8006390 <xTaskCreateStatic>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	e013      	b.n	8004e02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d110      	bne.n	8004e02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	f107 0310 	add.w	r3, r7, #16
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f001 fb29 	bl	800644a <xTaskCreate>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d001      	beq.n	8004e02 <osThreadNew+0x11a>
            hTask = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e02:	693b      	ldr	r3, [r7, #16]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3728      	adds	r7, #40	; 0x28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e14:	f3ef 8305 	mrs	r3, IPSR
 8004e18:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <osDelay+0x1c>
    stat = osErrorISR;
 8004e20:	f06f 0305 	mvn.w	r3, #5
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e007      	b.n	8004e38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f001 fc4e 	bl	80066d4 <vTaskDelay>
    }
  }

  return (stat);
 8004e38:	68fb      	ldr	r3, [r7, #12]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f002 fe84 	bl	8007b58 <pvTimerGetTimerID>
 8004e50:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	6852      	ldr	r2, [r2, #4]
 8004e60:	4610      	mov	r0, r2
 8004e62:	4798      	blx	r3
  }
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08c      	sub	sp, #48	; 0x30
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e80:	f3ef 8305 	mrs	r3, IPSR
 8004e84:	613b      	str	r3, [r7, #16]
  return(result);
 8004e86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d163      	bne.n	8004f54 <osTimerNew+0xe8>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d060      	beq.n	8004f54 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004e92:	2008      	movs	r0, #8
 8004e94:	f003 f8d0 	bl	8008038 <pvPortMalloc>
 8004e98:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d059      	beq.n	8004f54 <osTimerNew+0xe8>
      callb->func = func;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004eac:	7afb      	ldrb	r3, [r7, #11]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d102      	bne.n	8004eb8 <osTimerNew+0x4c>
        reload = pdFALSE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e001      	b.n	8004ebc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ec0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01c      	beq.n	8004f06 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <osTimerNew+0x6e>
          name = attr->name;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d006      	beq.n	8004ef0 <osTimerNew+0x84>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	2b2b      	cmp	r3, #43	; 0x2b
 8004ee8:	d902      	bls.n	8004ef0 <osTimerNew+0x84>
          mem = 1;
 8004eea:	2301      	movs	r3, #1
 8004eec:	61bb      	str	r3, [r7, #24]
 8004eee:	e00c      	b.n	8004f0a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d108      	bne.n	8004f0a <osTimerNew+0x9e>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d104      	bne.n	8004f0a <osTimerNew+0x9e>
            mem = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e001      	b.n	8004f0a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d10c      	bne.n	8004f2a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <osTimerNew+0xf4>)
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	2101      	movs	r1, #1
 8004f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f22:	f002 fa9a 	bl	800745a <xTimerCreateStatic>
 8004f26:	6238      	str	r0, [r7, #32]
 8004f28:	e00b      	b.n	8004f42 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <osTimerNew+0xf4>)
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	2101      	movs	r1, #1
 8004f3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f3c:	f002 fa6c 	bl	8007418 <xTimerCreate>
 8004f40:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d105      	bne.n	8004f54 <osTimerNew+0xe8>
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <osTimerNew+0xe8>
        vPortFree (callb);
 8004f4e:	6978      	ldr	r0, [r7, #20]
 8004f50:	f003 f93e 	bl	80081d0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004f54:	6a3b      	ldr	r3, [r7, #32]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3728      	adds	r7, #40	; 0x28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	08004e43 	.word	0x08004e43

08004f64 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08a      	sub	sp, #40	; 0x28
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f74:	f3ef 8305 	mrs	r3, IPSR
 8004f78:	613b      	str	r3, [r7, #16]
  return(result);
 8004f7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d175      	bne.n	800506c <osSemaphoreNew+0x108>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d072      	beq.n	800506c <osSemaphoreNew+0x108>
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d86e      	bhi.n	800506c <osSemaphoreNew+0x108>
    mem = -1;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d015      	beq.n	8004fc6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d006      	beq.n	8004fb0 <osSemaphoreNew+0x4c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b4f      	cmp	r3, #79	; 0x4f
 8004fa8:	d902      	bls.n	8004fb0 <osSemaphoreNew+0x4c>
        mem = 1;
 8004faa:	2301      	movs	r3, #1
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	e00c      	b.n	8004fca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d108      	bne.n	8004fca <osSemaphoreNew+0x66>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d104      	bne.n	8004fca <osSemaphoreNew+0x66>
          mem = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	e001      	b.n	8004fca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd0:	d04c      	beq.n	800506c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d128      	bne.n	800502a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d10a      	bne.n	8004ff4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	9200      	str	r2, [sp, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2100      	movs	r1, #0
 8004fea:	2001      	movs	r0, #1
 8004fec:	f000 fa2a 	bl	8005444 <xQueueGenericCreateStatic>
 8004ff0:	61f8      	str	r0, [r7, #28]
 8004ff2:	e005      	b.n	8005000 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	f000 fa9b 	bl	8005534 <xQueueGenericCreate>
 8004ffe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d022      	beq.n	800504c <osSemaphoreNew+0xe8>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01f      	beq.n	800504c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800500c:	2300      	movs	r3, #0
 800500e:	2200      	movs	r2, #0
 8005010:	2100      	movs	r1, #0
 8005012:	69f8      	ldr	r0, [r7, #28]
 8005014:	f000 fb56 	bl	80056c4 <xQueueGenericSend>
 8005018:	4603      	mov	r3, r0
 800501a:	2b01      	cmp	r3, #1
 800501c:	d016      	beq.n	800504c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800501e:	69f8      	ldr	r0, [r7, #28]
 8005020:	f000 ffe2 	bl	8005fe8 <vQueueDelete>
            hSemaphore = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	e010      	b.n	800504c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d108      	bne.n	8005042 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	461a      	mov	r2, r3
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fad8 	bl	80055ee <xQueueCreateCountingSemaphoreStatic>
 800503e:	61f8      	str	r0, [r7, #28]
 8005040:	e004      	b.n	800504c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fb09 	bl	800565c <xQueueCreateCountingSemaphore>
 800504a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e001      	b.n	8005064 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005064:	6979      	ldr	r1, [r7, #20]
 8005066:	69f8      	ldr	r0, [r7, #28]
 8005068:	f001 f90a 	bl	8006280 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800506c:	69fb      	ldr	r3, [r7, #28]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d103      	bne.n	8005098 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005090:	f06f 0303 	mvn.w	r3, #3
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e039      	b.n	800510c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005098:	f3ef 8305 	mrs	r3, IPSR
 800509c:	60fb      	str	r3, [r7, #12]
  return(result);
 800509e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d022      	beq.n	80050ea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80050aa:	f06f 0303 	mvn.w	r3, #3
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e02c      	b.n	800510c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80050b6:	f107 0308 	add.w	r3, r7, #8
 80050ba:	461a      	mov	r2, r3
 80050bc:	2100      	movs	r1, #0
 80050be:	6938      	ldr	r0, [r7, #16]
 80050c0:	f000 ff12 	bl	8005ee8 <xQueueReceiveFromISR>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d003      	beq.n	80050d2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80050ca:	f06f 0302 	mvn.w	r3, #2
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	e01c      	b.n	800510c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d019      	beq.n	800510c <osSemaphoreAcquire+0x94>
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <osSemaphoreAcquire+0xa0>)
 80050da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	e010      	b.n	800510c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	6938      	ldr	r0, [r7, #16]
 80050ee:	f000 fdef 	bl	8005cd0 <xQueueSemaphoreTake>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d009      	beq.n	800510c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80050fe:	f06f 0301 	mvn.w	r3, #1
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e002      	b.n	800510c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005106:	f06f 0302 	mvn.w	r3, #2
 800510a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800510c:	697b      	ldr	r3, [r7, #20]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005132:	f06f 0303 	mvn.w	r3, #3
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e02c      	b.n	8005194 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800513a:	f3ef 8305 	mrs	r3, IPSR
 800513e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005140:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01a      	beq.n	800517c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005146:	2300      	movs	r3, #0
 8005148:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800514a:	f107 0308 	add.w	r3, r7, #8
 800514e:	4619      	mov	r1, r3
 8005150:	6938      	ldr	r0, [r7, #16]
 8005152:	f000 fc50 	bl	80059f6 <xQueueGiveFromISR>
 8005156:	4603      	mov	r3, r0
 8005158:	2b01      	cmp	r3, #1
 800515a:	d003      	beq.n	8005164 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800515c:	f06f 0302 	mvn.w	r3, #2
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	e017      	b.n	8005194 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d014      	beq.n	8005194 <osSemaphoreRelease+0x78>
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <osSemaphoreRelease+0x84>)
 800516c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	e00b      	b.n	8005194 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800517c:	2300      	movs	r3, #0
 800517e:	2200      	movs	r2, #0
 8005180:	2100      	movs	r1, #0
 8005182:	6938      	ldr	r0, [r7, #16]
 8005184:	f000 fa9e 	bl	80056c4 <xQueueGenericSend>
 8005188:	4603      	mov	r3, r0
 800518a:	2b01      	cmp	r3, #1
 800518c:	d002      	beq.n	8005194 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800518e:	f06f 0302 	mvn.w	r3, #2
 8005192:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005194:	697b      	ldr	r3, [r7, #20]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80051b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4a06      	ldr	r2, [pc, #24]	; (80051d4 <vApplicationGetIdleTaskMemory+0x30>)
 80051ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2280      	movs	r2, #128	; 0x80
 80051c0:	601a      	str	r2, [r3, #0]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	2000242c 	.word	0x2000242c
 80051d4:	20002488 	.word	0x20002488

080051d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4a07      	ldr	r2, [pc, #28]	; (8005204 <vApplicationGetTimerTaskMemory+0x2c>)
 80051e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4a06      	ldr	r2, [pc, #24]	; (8005208 <vApplicationGetTimerTaskMemory+0x30>)
 80051ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051f6:	601a      	str	r2, [r3, #0]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	20002688 	.word	0x20002688
 8005208:	200026e4 	.word	0x200026e4

0800520c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f103 0208 	add.w	r2, r3, #8
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005224:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f103 0208 	add.w	r2, r3, #8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f103 0208 	add.w	r2, r3, #8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
}
 80052a2:	bf00      	nop
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c4:	d103      	bne.n	80052ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	e00c      	b.n	80052e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3308      	adds	r3, #8
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e002      	b.n	80052dc <vListInsert+0x2e>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d2f6      	bcs.n	80052d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]
}
 8005314:	bf00      	nop
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6892      	ldr	r2, [r2, #8]
 8005336:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6852      	ldr	r2, [r2, #4]
 8005340:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	429a      	cmp	r2, r3
 800534a:	d103      	bne.n	8005354 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	1e5a      	subs	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800539e:	f002 fd29 	bl	8007df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	68f9      	ldr	r1, [r7, #12]
 80053ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053ae:	fb01 f303 	mul.w	r3, r1, r3
 80053b2:	441a      	add	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	3b01      	subs	r3, #1
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053d4:	fb01 f303 	mul.w	r3, r1, r3
 80053d8:	441a      	add	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	22ff      	movs	r2, #255	; 0xff
 80053e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	22ff      	movs	r2, #255	; 0xff
 80053ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d114      	bne.n	800541e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01a      	beq.n	8005432 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3310      	adds	r3, #16
 8005400:	4618      	mov	r0, r3
 8005402:	f001 fc25 	bl	8006c50 <xTaskRemoveFromEventList>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d012      	beq.n	8005432 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <xQueueGenericReset+0xcc>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	e009      	b.n	8005432 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3310      	adds	r3, #16
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fef2 	bl	800520c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3324      	adds	r3, #36	; 0x24
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff feed 	bl	800520c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005432:	f002 fd0f 	bl	8007e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005436:	2301      	movs	r3, #1
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	e000ed04 	.word	0xe000ed04

08005444 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08e      	sub	sp, #56	; 0x38
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <xQueueGenericCreateStatic+0x52>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <xQueueGenericCreateStatic+0x56>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <xQueueGenericCreateStatic+0x58>
 800549a:	2300      	movs	r3, #0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	623b      	str	r3, [r7, #32]
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d102      	bne.n	80054c2 <xQueueGenericCreateStatic+0x7e>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <xQueueGenericCreateStatic+0x82>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <xQueueGenericCreateStatic+0x84>
 80054c6:	2300      	movs	r3, #0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	61fb      	str	r3, [r7, #28]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054e2:	2350      	movs	r3, #80	; 0x50
 80054e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b50      	cmp	r3, #80	; 0x50
 80054ea:	d00a      	beq.n	8005502 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	61bb      	str	r3, [r7, #24]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005502:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00d      	beq.n	800552a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005516:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	4613      	mov	r3, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f83f 	bl	80055a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800552c:	4618      	mov	r0, r3
 800552e:	3730      	adds	r7, #48	; 0x30
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	613b      	str	r3, [r7, #16]
}
 800555a:	bf00      	nop
 800555c:	e7fe      	b.n	800555c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	3350      	adds	r3, #80	; 0x50
 800556c:	4618      	mov	r0, r3
 800556e:	f002 fd63 	bl	8008038 <pvPortMalloc>
 8005572:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d011      	beq.n	800559e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	3350      	adds	r3, #80	; 0x50
 8005582:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800558c:	79fa      	ldrb	r2, [r7, #7]
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f805 	bl	80055a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800559e:	69bb      	ldr	r3, [r7, #24]
	}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d103      	bne.n	80055c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e002      	b.n	80055ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055d6:	2101      	movs	r1, #1
 80055d8:	69b8      	ldr	r0, [r7, #24]
 80055da:	f7ff fecb 	bl	8005374 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	78fa      	ldrb	r2, [r7, #3]
 80055e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b08a      	sub	sp, #40	; 0x28
 80055f2:	af02      	add	r7, sp, #8
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	61bb      	str	r3, [r7, #24]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	429a      	cmp	r2, r3
 800561c:	d90a      	bls.n	8005634 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	617b      	str	r3, [r7, #20]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005634:	2302      	movs	r3, #2
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	2100      	movs	r1, #0
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff ff00 	bl	8005444 <xQueueGenericCreateStatic>
 8005644:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005652:	69fb      	ldr	r3, [r7, #28]
	}
 8005654:	4618      	mov	r0, r3
 8005656:	3720      	adds	r7, #32
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	613b      	str	r3, [r7, #16]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	429a      	cmp	r2, r3
 8005688:	d90a      	bls.n	80056a0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	60fb      	str	r3, [r7, #12]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80056a0:	2202      	movs	r2, #2
 80056a2:	2100      	movs	r1, #0
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff ff45 	bl	8005534 <xQueueGenericCreate>
 80056aa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80056b8:	697b      	ldr	r3, [r7, #20]
	}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08e      	sub	sp, #56	; 0x38
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056d2:	2300      	movs	r3, #0
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <xQueueGenericSend+0x32>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <xQueueGenericSend+0x40>
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <xQueueGenericSend+0x44>
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <xQueueGenericSend+0x46>
 8005708:	2300      	movs	r3, #0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <xQueueGenericSend+0x60>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d103      	bne.n	8005732 <xQueueGenericSend+0x6e>
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <xQueueGenericSend+0x72>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <xQueueGenericSend+0x74>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xQueueGenericSend+0x8e>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	623b      	str	r3, [r7, #32]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005752:	f001 fc3b 	bl	8006fcc <xTaskGetSchedulerState>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <xQueueGenericSend+0x9e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <xQueueGenericSend+0xa2>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <xQueueGenericSend+0xa4>
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <xQueueGenericSend+0xbe>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	61fb      	str	r3, [r7, #28]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005782:	f002 fb37 	bl	8007df4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	429a      	cmp	r2, r3
 8005790:	d302      	bcc.n	8005798 <xQueueGenericSend+0xd4>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d129      	bne.n	80057ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800579e:	f000 fc5e 	bl	800605e <prvCopyDataToQueue>
 80057a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d010      	beq.n	80057ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	3324      	adds	r3, #36	; 0x24
 80057b0:	4618      	mov	r0, r3
 80057b2:	f001 fa4d 	bl	8006c50 <xTaskRemoveFromEventList>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d013      	beq.n	80057e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057bc:	4b3f      	ldr	r3, [pc, #252]	; (80058bc <xQueueGenericSend+0x1f8>)
 80057be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	e00a      	b.n	80057e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057d4:	4b39      	ldr	r3, [pc, #228]	; (80058bc <xQueueGenericSend+0x1f8>)
 80057d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057e4:	f002 fb36 	bl	8007e54 <vPortExitCritical>
				return pdPASS;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e063      	b.n	80058b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057f2:	f002 fb2f 	bl	8007e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e05c      	b.n	80058b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d106      	bne.n	800580e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005800:	f107 0314 	add.w	r3, r7, #20
 8005804:	4618      	mov	r0, r3
 8005806:	f001 fa87 	bl	8006d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800580a:	2301      	movs	r3, #1
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800580e:	f002 fb21 	bl	8007e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005812:	f000 fff9 	bl	8006808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005816:	f002 faed 	bl	8007df4 <vPortEnterCritical>
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005820:	b25b      	sxtb	r3, r3
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005826:	d103      	bne.n	8005830 <xQueueGenericSend+0x16c>
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005836:	b25b      	sxtb	r3, r3
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800583c:	d103      	bne.n	8005846 <xQueueGenericSend+0x182>
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005846:	f002 fb05 	bl	8007e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800584a:	1d3a      	adds	r2, r7, #4
 800584c:	f107 0314 	add.w	r3, r7, #20
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f001 fa76 	bl	8006d44 <xTaskCheckForTimeOut>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d124      	bne.n	80058a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800585e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005860:	f000 fcf5 	bl	800624e <prvIsQueueFull>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d018      	beq.n	800589c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	3310      	adds	r3, #16
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f001 f99c 	bl	8006bb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800587a:	f000 fc80 	bl	800617e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800587e:	f000 ffd1 	bl	8006824 <xTaskResumeAll>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	f47f af7c 	bne.w	8005782 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <xQueueGenericSend+0x1f8>)
 800588c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	e772      	b.n	8005782 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800589c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800589e:	f000 fc6e 	bl	800617e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058a2:	f000 ffbf 	bl	8006824 <xTaskResumeAll>
 80058a6:	e76c      	b.n	8005782 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058aa:	f000 fc68 	bl	800617e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ae:	f000 ffb9 	bl	8006824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3738      	adds	r7, #56	; 0x38
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	e000ed04 	.word	0xe000ed04

080058c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b090      	sub	sp, #64	; 0x40
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d103      	bne.n	80058fc <xQueueGenericSendFromISR+0x3c>
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <xQueueGenericSendFromISR+0x40>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <xQueueGenericSendFromISR+0x42>
 8005900:	2300      	movs	r3, #0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d103      	bne.n	800592a <xQueueGenericSendFromISR+0x6a>
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <xQueueGenericSendFromISR+0x6e>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <xQueueGenericSendFromISR+0x70>
 800592e:	2300      	movs	r3, #0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10a      	bne.n	800594a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	623b      	str	r3, [r7, #32]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800594a:	f002 fb35 	bl	8007fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800594e:	f3ef 8211 	mrs	r2, BASEPRI
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	61fa      	str	r2, [r7, #28]
 8005964:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005966:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	429a      	cmp	r2, r3
 8005974:	d302      	bcc.n	800597c <xQueueGenericSendFromISR+0xbc>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d12f      	bne.n	80059dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005992:	f000 fb64 	bl	800605e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005996:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800599e:	d112      	bne.n	80059c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d016      	beq.n	80059d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	3324      	adds	r3, #36	; 0x24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 f94f 	bl	8006c50 <xTaskRemoveFromEventList>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00e      	beq.n	80059d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e007      	b.n	80059d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059ca:	3301      	adds	r3, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	b25a      	sxtb	r2, r3
 80059d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059d6:	2301      	movs	r3, #1
 80059d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059da:	e001      	b.n	80059e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3740      	adds	r7, #64	; 0x40
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b08e      	sub	sp, #56	; 0x38
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	623b      	str	r3, [r7, #32]
}
 8005a1c:	bf00      	nop
 8005a1e:	e7fe      	b.n	8005a1e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	61fb      	str	r3, [r7, #28]
}
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <xQueueGiveFromISR+0x58>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <xQueueGiveFromISR+0x5c>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <xQueueGiveFromISR+0x5e>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <xQueueGiveFromISR+0x78>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	61bb      	str	r3, [r7, #24]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a6e:	f002 faa3 	bl	8007fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8005a72:	f3ef 8211 	mrs	r2, BASEPRI
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	617a      	str	r2, [r7, #20]
 8005a88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005a8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d22b      	bcs.n	8005af6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ab0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab8:	d112      	bne.n	8005ae0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d016      	beq.n	8005af0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	3324      	adds	r3, #36	; 0x24
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 f8c2 	bl	8006c50 <xTaskRemoveFromEventList>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00e      	beq.n	8005af0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e007      	b.n	8005af0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	b25a      	sxtb	r2, r3
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005af0:	2301      	movs	r3, #1
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
 8005af4:	e001      	b.n	8005afa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f383 8811 	msr	BASEPRI, r3
}
 8005b04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3738      	adds	r7, #56	; 0x38
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08c      	sub	sp, #48	; 0x30
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <xQueueReceive+0x30>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	623b      	str	r3, [r7, #32]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <xQueueReceive+0x3e>
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <xQueueReceive+0x42>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <xQueueReceive+0x44>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueReceive+0x5e>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	61fb      	str	r3, [r7, #28]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b6e:	f001 fa2d 	bl	8006fcc <xTaskGetSchedulerState>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d102      	bne.n	8005b7e <xQueueReceive+0x6e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <xQueueReceive+0x72>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <xQueueReceive+0x74>
 8005b82:	2300      	movs	r3, #0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <xQueueReceive+0x8e>
	__asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	61bb      	str	r3, [r7, #24]
}
 8005b9a:	bf00      	nop
 8005b9c:	e7fe      	b.n	8005b9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b9e:	f002 f929 	bl	8007df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01f      	beq.n	8005bee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb2:	f000 fabe 	bl	8006132 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	1e5a      	subs	r2, r3, #1
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00f      	beq.n	8005be6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	3310      	adds	r3, #16
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 f840 	bl	8006c50 <xTaskRemoveFromEventList>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bd6:	4b3d      	ldr	r3, [pc, #244]	; (8005ccc <xQueueReceive+0x1bc>)
 8005bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005be6:	f002 f935 	bl	8007e54 <vPortExitCritical>
				return pdPASS;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e069      	b.n	8005cc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d103      	bne.n	8005bfc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bf4:	f002 f92e 	bl	8007e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e062      	b.n	8005cc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c02:	f107 0310 	add.w	r3, r7, #16
 8005c06:	4618      	mov	r0, r3
 8005c08:	f001 f886 	bl	8006d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c10:	f002 f920 	bl	8007e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c14:	f000 fdf8 	bl	8006808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c18:	f002 f8ec 	bl	8007df4 <vPortEnterCritical>
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c22:	b25b      	sxtb	r3, r3
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c28:	d103      	bne.n	8005c32 <xQueueReceive+0x122>
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c38:	b25b      	sxtb	r3, r3
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c3e:	d103      	bne.n	8005c48 <xQueueReceive+0x138>
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c48:	f002 f904 	bl	8007e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c4c:	1d3a      	adds	r2, r7, #4
 8005c4e:	f107 0310 	add.w	r3, r7, #16
 8005c52:	4611      	mov	r1, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f001 f875 	bl	8006d44 <xTaskCheckForTimeOut>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d123      	bne.n	8005ca8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c62:	f000 fade 	bl	8006222 <prvIsQueueEmpty>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d017      	beq.n	8005c9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	3324      	adds	r3, #36	; 0x24
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 ff9b 	bl	8006bb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c7c:	f000 fa7f 	bl	800617e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c80:	f000 fdd0 	bl	8006824 <xTaskResumeAll>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d189      	bne.n	8005b9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c8a:	4b10      	ldr	r3, [pc, #64]	; (8005ccc <xQueueReceive+0x1bc>)
 8005c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	e780      	b.n	8005b9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9e:	f000 fa6e 	bl	800617e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ca2:	f000 fdbf 	bl	8006824 <xTaskResumeAll>
 8005ca6:	e77a      	b.n	8005b9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005caa:	f000 fa68 	bl	800617e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cae:	f000 fdb9 	bl	8006824 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb4:	f000 fab5 	bl	8006222 <prvIsQueueEmpty>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f43f af6f 	beq.w	8005b9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3730      	adds	r7, #48	; 0x30
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	e000ed04 	.word	0xe000ed04

08005cd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08e      	sub	sp, #56	; 0x38
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	623b      	str	r3, [r7, #32]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	61fb      	str	r3, [r7, #28]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d20:	f001 f954 	bl	8006fcc <xTaskGetSchedulerState>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d102      	bne.n	8005d30 <xQueueSemaphoreTake+0x60>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <xQueueSemaphoreTake+0x64>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <xQueueSemaphoreTake+0x66>
 8005d34:	2300      	movs	r3, #0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	61bb      	str	r3, [r7, #24]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d50:	f002 f850 	bl	8007df4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d024      	beq.n	8005daa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	1e5a      	subs	r2, r3, #1
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d104      	bne.n	8005d7a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005d70:	f001 faa2 	bl	80072b8 <pvTaskIncrementMutexHeldCount>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00f      	beq.n	8005da2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	3310      	adds	r3, #16
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 ff62 	bl	8006c50 <xTaskRemoveFromEventList>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d92:	4b54      	ldr	r3, [pc, #336]	; (8005ee4 <xQueueSemaphoreTake+0x214>)
 8005d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005da2:	f002 f857 	bl	8007e54 <vPortExitCritical>
				return pdPASS;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e097      	b.n	8005eda <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d111      	bne.n	8005dd4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	617b      	str	r3, [r7, #20]
}
 8005dc8:	bf00      	nop
 8005dca:	e7fe      	b.n	8005dca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005dcc:	f002 f842 	bl	8007e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e082      	b.n	8005eda <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dda:	f107 030c 	add.w	r3, r7, #12
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 ff9a 	bl	8006d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005de8:	f002 f834 	bl	8007e54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dec:	f000 fd0c 	bl	8006808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005df0:	f002 f800 	bl	8007df4 <vPortEnterCritical>
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e00:	d103      	bne.n	8005e0a <xQueueSemaphoreTake+0x13a>
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e10:	b25b      	sxtb	r3, r3
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e16:	d103      	bne.n	8005e20 <xQueueSemaphoreTake+0x150>
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e20:	f002 f818 	bl	8007e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e24:	463a      	mov	r2, r7
 8005e26:	f107 030c 	add.w	r3, r7, #12
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 ff89 	bl	8006d44 <xTaskCheckForTimeOut>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d132      	bne.n	8005e9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e3a:	f000 f9f2 	bl	8006222 <prvIsQueueEmpty>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d026      	beq.n	8005e92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d109      	bne.n	8005e60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005e4c:	f001 ffd2 	bl	8007df4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 f8d7 	bl	8007008 <xTaskPriorityInherit>
 8005e5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005e5c:	f001 fffa 	bl	8007e54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	3324      	adds	r3, #36	; 0x24
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	4611      	mov	r1, r2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fea1 	bl	8006bb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e70:	f000 f985 	bl	800617e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e74:	f000 fcd6 	bl	8006824 <xTaskResumeAll>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f47f af68 	bne.w	8005d50 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005e80:	4b18      	ldr	r3, [pc, #96]	; (8005ee4 <xQueueSemaphoreTake+0x214>)
 8005e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	e75e      	b.n	8005d50 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e94:	f000 f973 	bl	800617e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e98:	f000 fcc4 	bl	8006824 <xTaskResumeAll>
 8005e9c:	e758      	b.n	8005d50 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ea0:	f000 f96d 	bl	800617e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ea4:	f000 fcbe 	bl	8006824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eaa:	f000 f9ba 	bl	8006222 <prvIsQueueEmpty>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f43f af4d 	beq.w	8005d50 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00d      	beq.n	8005ed8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005ebc:	f001 ff9a 	bl	8007df4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ec0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ec2:	f000 f8b4 	bl	800602e <prvGetDisinheritPriorityAfterTimeout>
 8005ec6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 f970 	bl	80071b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ed4:	f001 ffbe 	bl	8007e54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ed8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3738      	adds	r7, #56	; 0x38
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	e000ed04 	.word	0xe000ed04

08005ee8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08e      	sub	sp, #56	; 0x38
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	623b      	str	r3, [r7, #32]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <xQueueReceiveFromISR+0x3a>
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <xQueueReceiveFromISR+0x3e>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <xQueueReceiveFromISR+0x40>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	61fb      	str	r3, [r7, #28]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f42:	f002 f839 	bl	8007fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8005f46:	f3ef 8211 	mrs	r2, BASEPRI
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	61ba      	str	r2, [r7, #24]
 8005f5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d02f      	beq.n	8005fce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f7c:	f000 f8d9 	bl	8006132 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	1e5a      	subs	r2, r3, #1
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f90:	d112      	bne.n	8005fb8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d016      	beq.n	8005fc8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	3310      	adds	r3, #16
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fe56 	bl	8006c50 <xTaskRemoveFromEventList>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00e      	beq.n	8005fc8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00b      	beq.n	8005fc8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e007      	b.n	8005fc8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	b25a      	sxtb	r2, r3
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	637b      	str	r3, [r7, #52]	; 0x34
 8005fcc:	e001      	b.n	8005fd2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f383 8811 	msr	BASEPRI, r3
}
 8005fdc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3738      	adds	r7, #56	; 0x38
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <vQueueDelete+0x28>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	60bb      	str	r3, [r7, #8]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f95f 	bl	80062d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f002 f8d5 	bl	80081d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006026:	bf00      	nop
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d006      	beq.n	800604c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e001      	b.n	8006050 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006050:	68fb      	ldr	r3, [r7, #12]
	}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b086      	sub	sp, #24
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800606a:	2300      	movs	r3, #0
 800606c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10d      	bne.n	8006098 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d14d      	bne.n	8006120 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4618      	mov	r0, r3
 800608a:	f001 f825 	bl	80070d8 <xTaskPriorityDisinherit>
 800608e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	609a      	str	r2, [r3, #8]
 8006096:	e043      	b.n	8006120 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d119      	bne.n	80060d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6858      	ldr	r0, [r3, #4]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	461a      	mov	r2, r3
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	f002 f9d3 	bl	8008454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	441a      	add	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d32b      	bcc.n	8006120 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	605a      	str	r2, [r3, #4]
 80060d0:	e026      	b.n	8006120 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	68d8      	ldr	r0, [r3, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	461a      	mov	r2, r3
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	f002 f9b9 	bl	8008454 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	425b      	negs	r3, r3
 80060ec:	441a      	add	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d207      	bcs.n	800610e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	425b      	negs	r3, r3
 8006108:	441a      	add	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d105      	bne.n	8006120 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3b01      	subs	r3, #1
 800611e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006128:	697b      	ldr	r3, [r7, #20]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d018      	beq.n	8006176 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	441a      	add	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	d303      	bcc.n	8006166 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68d9      	ldr	r1, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	461a      	mov	r2, r3
 8006170:	6838      	ldr	r0, [r7, #0]
 8006172:	f002 f96f 	bl	8008454 <memcpy>
	}
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006186:	f001 fe35 	bl	8007df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006190:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006192:	e011      	b.n	80061b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d012      	beq.n	80061c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3324      	adds	r3, #36	; 0x24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fd55 	bl	8006c50 <xTaskRemoveFromEventList>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061ac:	f000 fe2c 	bl	8006e08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	dce9      	bgt.n	8006194 <prvUnlockQueue+0x16>
 80061c0:	e000      	b.n	80061c4 <prvUnlockQueue+0x46>
					break;
 80061c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	22ff      	movs	r2, #255	; 0xff
 80061c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061cc:	f001 fe42 	bl	8007e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061d0:	f001 fe10 	bl	8007df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061dc:	e011      	b.n	8006202 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d012      	beq.n	800620c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3310      	adds	r3, #16
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fd30 	bl	8006c50 <xTaskRemoveFromEventList>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061f6:	f000 fe07 	bl	8006e08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006206:	2b00      	cmp	r3, #0
 8006208:	dce9      	bgt.n	80061de <prvUnlockQueue+0x60>
 800620a:	e000      	b.n	800620e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800620c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006216:	f001 fe1d 	bl	8007e54 <vPortExitCritical>
}
 800621a:	bf00      	nop
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800622a:	f001 fde3 	bl	8007df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	2b00      	cmp	r3, #0
 8006234:	d102      	bne.n	800623c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006236:	2301      	movs	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	e001      	b.n	8006240 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006240:	f001 fe08 	bl	8007e54 <vPortExitCritical>

	return xReturn;
 8006244:	68fb      	ldr	r3, [r7, #12]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006256:	f001 fdcd 	bl	8007df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006262:	429a      	cmp	r2, r3
 8006264:	d102      	bne.n	800626c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006266:	2301      	movs	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	e001      	b.n	8006270 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006270:	f001 fdf0 	bl	8007e54 <vPortExitCritical>

	return xReturn;
 8006274:	68fb      	ldr	r3, [r7, #12]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	e014      	b.n	80062ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006290:	4a0f      	ldr	r2, [pc, #60]	; (80062d0 <vQueueAddToRegistry+0x50>)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10b      	bne.n	80062b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800629c:	490c      	ldr	r1, [pc, #48]	; (80062d0 <vQueueAddToRegistry+0x50>)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062a6:	4a0a      	ldr	r2, [pc, #40]	; (80062d0 <vQueueAddToRegistry+0x50>)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4413      	add	r3, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062b2:	e006      	b.n	80062c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3301      	adds	r3, #1
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b07      	cmp	r3, #7
 80062be:	d9e7      	bls.n	8006290 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	20002ae4 	.word	0x20002ae4

080062d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e016      	b.n	8006310 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80062e2:	4a10      	ldr	r2, [pc, #64]	; (8006324 <vQueueUnregisterQueue+0x50>)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	4413      	add	r3, r2
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d10b      	bne.n	800630a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80062f2:	4a0c      	ldr	r2, [pc, #48]	; (8006324 <vQueueUnregisterQueue+0x50>)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2100      	movs	r1, #0
 80062f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80062fc:	4a09      	ldr	r2, [pc, #36]	; (8006324 <vQueueUnregisterQueue+0x50>)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	4413      	add	r3, r2
 8006304:	2200      	movs	r2, #0
 8006306:	605a      	str	r2, [r3, #4]
				break;
 8006308:	e006      	b.n	8006318 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b07      	cmp	r3, #7
 8006314:	d9e5      	bls.n	80062e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	20002ae4 	.word	0x20002ae4

08006328 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006338:	f001 fd5c 	bl	8007df4 <vPortEnterCritical>
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006342:	b25b      	sxtb	r3, r3
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006348:	d103      	bne.n	8006352 <vQueueWaitForMessageRestricted+0x2a>
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006358:	b25b      	sxtb	r3, r3
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800635e:	d103      	bne.n	8006368 <vQueueWaitForMessageRestricted+0x40>
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006368:	f001 fd74 	bl	8007e54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	2b00      	cmp	r3, #0
 8006372:	d106      	bne.n	8006382 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	3324      	adds	r3, #36	; 0x24
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fc3b 	bl	8006bf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006382:	6978      	ldr	r0, [r7, #20]
 8006384:	f7ff fefb 	bl	800617e <prvUnlockQueue>
	}
 8006388:	bf00      	nop
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08e      	sub	sp, #56	; 0x38
 8006394:	af04      	add	r7, sp, #16
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	623b      	str	r3, [r7, #32]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	61fb      	str	r3, [r7, #28]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063d6:	235c      	movs	r3, #92	; 0x5c
 80063d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b5c      	cmp	r3, #92	; 0x5c
 80063de:	d00a      	beq.n	80063f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	61bb      	str	r3, [r7, #24]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d01e      	beq.n	800643c <xTaskCreateStatic+0xac>
 80063fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01b      	beq.n	800643c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800640c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	2202      	movs	r2, #2
 8006412:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006416:	2300      	movs	r3, #0
 8006418:	9303      	str	r3, [sp, #12]
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	9302      	str	r3, [sp, #8]
 800641e:	f107 0314 	add.w	r3, r7, #20
 8006422:	9301      	str	r3, [sp, #4]
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f850 	bl	80064d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006436:	f000 f8dd 	bl	80065f4 <prvAddNewTaskToReadyList>
 800643a:	e001      	b.n	8006440 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006440:	697b      	ldr	r3, [r7, #20]
	}
 8006442:	4618      	mov	r0, r3
 8006444:	3728      	adds	r7, #40	; 0x28
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800644a:	b580      	push	{r7, lr}
 800644c:	b08c      	sub	sp, #48	; 0x30
 800644e:	af04      	add	r7, sp, #16
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	603b      	str	r3, [r7, #0]
 8006456:	4613      	mov	r3, r2
 8006458:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800645a:	88fb      	ldrh	r3, [r7, #6]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4618      	mov	r0, r3
 8006460:	f001 fdea 	bl	8008038 <pvPortMalloc>
 8006464:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00e      	beq.n	800648a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800646c:	205c      	movs	r0, #92	; 0x5c
 800646e:	f001 fde3 	bl	8008038 <pvPortMalloc>
 8006472:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	631a      	str	r2, [r3, #48]	; 0x30
 8006480:	e005      	b.n	800648e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006482:	6978      	ldr	r0, [r7, #20]
 8006484:	f001 fea4 	bl	80081d0 <vPortFree>
 8006488:	e001      	b.n	800648e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d017      	beq.n	80064c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800649c:	88fa      	ldrh	r2, [r7, #6]
 800649e:	2300      	movs	r3, #0
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	9302      	str	r3, [sp, #8]
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 f80e 	bl	80064d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064b8:	69f8      	ldr	r0, [r7, #28]
 80064ba:	f000 f89b 	bl	80065f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064be:	2301      	movs	r3, #1
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	e002      	b.n	80064ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064ca:	69bb      	ldr	r3, [r7, #24]
	}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	461a      	mov	r2, r3
 80064ec:	21a5      	movs	r1, #165	; 0xa5
 80064ee:	f001 ffbf 	bl	8008470 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064fc:	3b01      	subs	r3, #1
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	f023 0307 	bic.w	r3, r3, #7
 800650a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	617b      	str	r3, [r7, #20]
}
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01f      	beq.n	8006572 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006532:	2300      	movs	r3, #0
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	e012      	b.n	800655e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	4413      	add	r3, r2
 800653e:	7819      	ldrb	r1, [r3, #0]
 8006540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	3334      	adds	r3, #52	; 0x34
 8006548:	460a      	mov	r2, r1
 800654a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d006      	beq.n	8006566 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3301      	adds	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	2b0f      	cmp	r3, #15
 8006562:	d9e9      	bls.n	8006538 <prvInitialiseNewTask+0x64>
 8006564:	e000      	b.n	8006568 <prvInitialiseNewTask+0x94>
			{
				break;
 8006566:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006570:	e003      	b.n	800657a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	2b37      	cmp	r3, #55	; 0x37
 800657e:	d901      	bls.n	8006584 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006580:	2337      	movs	r3, #55	; 0x37
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006588:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800658e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	2200      	movs	r2, #0
 8006594:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	3304      	adds	r3, #4
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe fe56 	bl	800524c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	3318      	adds	r3, #24
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe fe51 	bl	800524c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	2200      	movs	r2, #0
 80065c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	68f9      	ldr	r1, [r7, #12]
 80065d2:	69b8      	ldr	r0, [r7, #24]
 80065d4:	f001 fae0 	bl	8007b98 <pxPortInitialiseStack>
 80065d8:	4602      	mov	r2, r0
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065ea:	bf00      	nop
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065fc:	f001 fbfa 	bl	8007df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006600:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <prvAddNewTaskToReadyList+0xc4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	4a2c      	ldr	r2, [pc, #176]	; (80066b8 <prvAddNewTaskToReadyList+0xc4>)
 8006608:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800660a:	4b2c      	ldr	r3, [pc, #176]	; (80066bc <prvAddNewTaskToReadyList+0xc8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d109      	bne.n	8006626 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006612:	4a2a      	ldr	r2, [pc, #168]	; (80066bc <prvAddNewTaskToReadyList+0xc8>)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006618:	4b27      	ldr	r3, [pc, #156]	; (80066b8 <prvAddNewTaskToReadyList+0xc4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d110      	bne.n	8006642 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006620:	f000 fc16 	bl	8006e50 <prvInitialiseTaskLists>
 8006624:	e00d      	b.n	8006642 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006626:	4b26      	ldr	r3, [pc, #152]	; (80066c0 <prvAddNewTaskToReadyList+0xcc>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800662e:	4b23      	ldr	r3, [pc, #140]	; (80066bc <prvAddNewTaskToReadyList+0xc8>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	429a      	cmp	r2, r3
 800663a:	d802      	bhi.n	8006642 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800663c:	4a1f      	ldr	r2, [pc, #124]	; (80066bc <prvAddNewTaskToReadyList+0xc8>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006642:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <prvAddNewTaskToReadyList+0xd0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3301      	adds	r3, #1
 8006648:	4a1e      	ldr	r2, [pc, #120]	; (80066c4 <prvAddNewTaskToReadyList+0xd0>)
 800664a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800664c:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <prvAddNewTaskToReadyList+0xd0>)
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006658:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <prvAddNewTaskToReadyList+0xd4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d903      	bls.n	8006668 <prvAddNewTaskToReadyList+0x74>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	4a18      	ldr	r2, [pc, #96]	; (80066c8 <prvAddNewTaskToReadyList+0xd4>)
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4a15      	ldr	r2, [pc, #84]	; (80066cc <prvAddNewTaskToReadyList+0xd8>)
 8006676:	441a      	add	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3304      	adds	r3, #4
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f7fe fdf1 	bl	8005266 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006684:	f001 fbe6 	bl	8007e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006688:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <prvAddNewTaskToReadyList+0xcc>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00e      	beq.n	80066ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006690:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <prvAddNewTaskToReadyList+0xc8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	429a      	cmp	r2, r3
 800669c:	d207      	bcs.n	80066ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <prvAddNewTaskToReadyList+0xdc>)
 80066a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20002ff8 	.word	0x20002ff8
 80066bc:	20002b24 	.word	0x20002b24
 80066c0:	20003004 	.word	0x20003004
 80066c4:	20003014 	.word	0x20003014
 80066c8:	20003000 	.word	0x20003000
 80066cc:	20002b28 	.word	0x20002b28
 80066d0:	e000ed04 	.word	0xe000ed04

080066d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d017      	beq.n	8006716 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066e6:	4b13      	ldr	r3, [pc, #76]	; (8006734 <vTaskDelay+0x60>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <vTaskDelay+0x30>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	60bb      	str	r3, [r7, #8]
}
 8006700:	bf00      	nop
 8006702:	e7fe      	b.n	8006702 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006704:	f000 f880 	bl	8006808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006708:	2100      	movs	r1, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fde8 	bl	80072e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006710:	f000 f888 	bl	8006824 <xTaskResumeAll>
 8006714:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d107      	bne.n	800672c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800671c:	4b06      	ldr	r3, [pc, #24]	; (8006738 <vTaskDelay+0x64>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800672c:	bf00      	nop
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20003020 	.word	0x20003020
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	; 0x28
 8006740:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006742:	2300      	movs	r3, #0
 8006744:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006746:	2300      	movs	r3, #0
 8006748:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800674a:	463a      	mov	r2, r7
 800674c:	1d39      	adds	r1, r7, #4
 800674e:	f107 0308 	add.w	r3, r7, #8
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fd26 	bl	80051a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	9202      	str	r2, [sp, #8]
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	2300      	movs	r3, #0
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	2300      	movs	r3, #0
 8006768:	460a      	mov	r2, r1
 800676a:	4921      	ldr	r1, [pc, #132]	; (80067f0 <vTaskStartScheduler+0xb4>)
 800676c:	4821      	ldr	r0, [pc, #132]	; (80067f4 <vTaskStartScheduler+0xb8>)
 800676e:	f7ff fe0f 	bl	8006390 <xTaskCreateStatic>
 8006772:	4603      	mov	r3, r0
 8006774:	4a20      	ldr	r2, [pc, #128]	; (80067f8 <vTaskStartScheduler+0xbc>)
 8006776:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006778:	4b1f      	ldr	r3, [pc, #124]	; (80067f8 <vTaskStartScheduler+0xbc>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006780:	2301      	movs	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	e001      	b.n	800678a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d102      	bne.n	8006796 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006790:	f000 fdfa 	bl	8007388 <xTimerCreateTimerTask>
 8006794:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d116      	bne.n	80067ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	613b      	str	r3, [r7, #16]
}
 80067ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067b0:	4b12      	ldr	r3, [pc, #72]	; (80067fc <vTaskStartScheduler+0xc0>)
 80067b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067b8:	4b11      	ldr	r3, [pc, #68]	; (8006800 <vTaskStartScheduler+0xc4>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067be:	4b11      	ldr	r3, [pc, #68]	; (8006804 <vTaskStartScheduler+0xc8>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067c4:	f001 fa74 	bl	8007cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067c8:	e00e      	b.n	80067e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d0:	d10a      	bne.n	80067e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	60fb      	str	r3, [r7, #12]
}
 80067e4:	bf00      	nop
 80067e6:	e7fe      	b.n	80067e6 <vTaskStartScheduler+0xaa>
}
 80067e8:	bf00      	nop
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	080084cc 	.word	0x080084cc
 80067f4:	08006e21 	.word	0x08006e21
 80067f8:	2000301c 	.word	0x2000301c
 80067fc:	20003018 	.word	0x20003018
 8006800:	20003004 	.word	0x20003004
 8006804:	20002ffc 	.word	0x20002ffc

08006808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800680c:	4b04      	ldr	r3, [pc, #16]	; (8006820 <vTaskSuspendAll+0x18>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	4a03      	ldr	r2, [pc, #12]	; (8006820 <vTaskSuspendAll+0x18>)
 8006814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006816:	bf00      	nop
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	20003020 	.word	0x20003020

08006824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800682e:	2300      	movs	r3, #0
 8006830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006832:	4b42      	ldr	r3, [pc, #264]	; (800693c <xTaskResumeAll+0x118>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10a      	bne.n	8006850 <xTaskResumeAll+0x2c>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	603b      	str	r3, [r7, #0]
}
 800684c:	bf00      	nop
 800684e:	e7fe      	b.n	800684e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006850:	f001 fad0 	bl	8007df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006854:	4b39      	ldr	r3, [pc, #228]	; (800693c <xTaskResumeAll+0x118>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3b01      	subs	r3, #1
 800685a:	4a38      	ldr	r2, [pc, #224]	; (800693c <xTaskResumeAll+0x118>)
 800685c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800685e:	4b37      	ldr	r3, [pc, #220]	; (800693c <xTaskResumeAll+0x118>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d162      	bne.n	800692c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006866:	4b36      	ldr	r3, [pc, #216]	; (8006940 <xTaskResumeAll+0x11c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d05e      	beq.n	800692c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800686e:	e02f      	b.n	80068d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006870:	4b34      	ldr	r3, [pc, #208]	; (8006944 <xTaskResumeAll+0x120>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3318      	adds	r3, #24
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe fd4f 	bl	8005320 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3304      	adds	r3, #4
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe fd4a 	bl	8005320 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006890:	4b2d      	ldr	r3, [pc, #180]	; (8006948 <xTaskResumeAll+0x124>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d903      	bls.n	80068a0 <xTaskResumeAll+0x7c>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	4a2a      	ldr	r2, [pc, #168]	; (8006948 <xTaskResumeAll+0x124>)
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4a27      	ldr	r2, [pc, #156]	; (800694c <xTaskResumeAll+0x128>)
 80068ae:	441a      	add	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	4610      	mov	r0, r2
 80068b8:	f7fe fcd5 	bl	8005266 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c0:	4b23      	ldr	r3, [pc, #140]	; (8006950 <xTaskResumeAll+0x12c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d302      	bcc.n	80068d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80068ca:	4b22      	ldr	r3, [pc, #136]	; (8006954 <xTaskResumeAll+0x130>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068d0:	4b1c      	ldr	r3, [pc, #112]	; (8006944 <xTaskResumeAll+0x120>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1cb      	bne.n	8006870 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068de:	f000 fb55 	bl	8006f8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068e2:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <xTaskResumeAll+0x134>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d010      	beq.n	8006910 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068ee:	f000 f847 	bl	8006980 <xTaskIncrementTick>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068f8:	4b16      	ldr	r3, [pc, #88]	; (8006954 <xTaskResumeAll+0x130>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3b01      	subs	r3, #1
 8006902:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f1      	bne.n	80068ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800690a:	4b13      	ldr	r3, [pc, #76]	; (8006958 <xTaskResumeAll+0x134>)
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006910:	4b10      	ldr	r3, [pc, #64]	; (8006954 <xTaskResumeAll+0x130>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800691c:	4b0f      	ldr	r3, [pc, #60]	; (800695c <xTaskResumeAll+0x138>)
 800691e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800692c:	f001 fa92 	bl	8007e54 <vPortExitCritical>

	return xAlreadyYielded;
 8006930:	68bb      	ldr	r3, [r7, #8]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20003020 	.word	0x20003020
 8006940:	20002ff8 	.word	0x20002ff8
 8006944:	20002fb8 	.word	0x20002fb8
 8006948:	20003000 	.word	0x20003000
 800694c:	20002b28 	.word	0x20002b28
 8006950:	20002b24 	.word	0x20002b24
 8006954:	2000300c 	.word	0x2000300c
 8006958:	20003008 	.word	0x20003008
 800695c:	e000ed04 	.word	0xe000ed04

08006960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006966:	4b05      	ldr	r3, [pc, #20]	; (800697c <xTaskGetTickCount+0x1c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800696c:	687b      	ldr	r3, [r7, #4]
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20002ffc 	.word	0x20002ffc

08006980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006986:	2300      	movs	r3, #0
 8006988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800698a:	4b4f      	ldr	r3, [pc, #316]	; (8006ac8 <xTaskIncrementTick+0x148>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 808f 	bne.w	8006ab2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006994:	4b4d      	ldr	r3, [pc, #308]	; (8006acc <xTaskIncrementTick+0x14c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3301      	adds	r3, #1
 800699a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800699c:	4a4b      	ldr	r2, [pc, #300]	; (8006acc <xTaskIncrementTick+0x14c>)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d120      	bne.n	80069ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80069a8:	4b49      	ldr	r3, [pc, #292]	; (8006ad0 <xTaskIncrementTick+0x150>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	603b      	str	r3, [r7, #0]
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <xTaskIncrementTick+0x46>
 80069c8:	4b41      	ldr	r3, [pc, #260]	; (8006ad0 <xTaskIncrementTick+0x150>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	4b41      	ldr	r3, [pc, #260]	; (8006ad4 <xTaskIncrementTick+0x154>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a3f      	ldr	r2, [pc, #252]	; (8006ad0 <xTaskIncrementTick+0x150>)
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	4a3f      	ldr	r2, [pc, #252]	; (8006ad4 <xTaskIncrementTick+0x154>)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	4b3e      	ldr	r3, [pc, #248]	; (8006ad8 <xTaskIncrementTick+0x158>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a3d      	ldr	r2, [pc, #244]	; (8006ad8 <xTaskIncrementTick+0x158>)
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	f000 fad1 	bl	8006f8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069ea:	4b3c      	ldr	r3, [pc, #240]	; (8006adc <xTaskIncrementTick+0x15c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d349      	bcc.n	8006a88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069f4:	4b36      	ldr	r3, [pc, #216]	; (8006ad0 <xTaskIncrementTick+0x150>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d104      	bne.n	8006a08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069fe:	4b37      	ldr	r3, [pc, #220]	; (8006adc <xTaskIncrementTick+0x15c>)
 8006a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a04:	601a      	str	r2, [r3, #0]
					break;
 8006a06:	e03f      	b.n	8006a88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a08:	4b31      	ldr	r3, [pc, #196]	; (8006ad0 <xTaskIncrementTick+0x150>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d203      	bcs.n	8006a28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a20:	4a2e      	ldr	r2, [pc, #184]	; (8006adc <xTaskIncrementTick+0x15c>)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a26:	e02f      	b.n	8006a88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fc77 	bl	8005320 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d004      	beq.n	8006a44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	3318      	adds	r3, #24
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe fc6e 	bl	8005320 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <xTaskIncrementTick+0x160>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d903      	bls.n	8006a58 <xTaskIncrementTick+0xd8>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	4a22      	ldr	r2, [pc, #136]	; (8006ae0 <xTaskIncrementTick+0x160>)
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <xTaskIncrementTick+0x164>)
 8006a66:	441a      	add	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	f7fe fbf9 	bl	8005266 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a78:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <xTaskIncrementTick+0x168>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d3b8      	bcc.n	80069f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a82:	2301      	movs	r3, #1
 8006a84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a86:	e7b5      	b.n	80069f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a88:	4b17      	ldr	r3, [pc, #92]	; (8006ae8 <xTaskIncrementTick+0x168>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8e:	4915      	ldr	r1, [pc, #84]	; (8006ae4 <xTaskIncrementTick+0x164>)
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d901      	bls.n	8006aa4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006aa4:	4b11      	ldr	r3, [pc, #68]	; (8006aec <xTaskIncrementTick+0x16c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d007      	beq.n	8006abc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	e004      	b.n	8006abc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <xTaskIncrementTick+0x170>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	4a0d      	ldr	r2, [pc, #52]	; (8006af0 <xTaskIncrementTick+0x170>)
 8006aba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006abc:	697b      	ldr	r3, [r7, #20]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20003020 	.word	0x20003020
 8006acc:	20002ffc 	.word	0x20002ffc
 8006ad0:	20002fb0 	.word	0x20002fb0
 8006ad4:	20002fb4 	.word	0x20002fb4
 8006ad8:	20003010 	.word	0x20003010
 8006adc:	20003018 	.word	0x20003018
 8006ae0:	20003000 	.word	0x20003000
 8006ae4:	20002b28 	.word	0x20002b28
 8006ae8:	20002b24 	.word	0x20002b24
 8006aec:	2000300c 	.word	0x2000300c
 8006af0:	20003008 	.word	0x20003008

08006af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006afa:	4b28      	ldr	r3, [pc, #160]	; (8006b9c <vTaskSwitchContext+0xa8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b02:	4b27      	ldr	r3, [pc, #156]	; (8006ba0 <vTaskSwitchContext+0xac>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b08:	e041      	b.n	8006b8e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006b0a:	4b25      	ldr	r3, [pc, #148]	; (8006ba0 <vTaskSwitchContext+0xac>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b10:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <vTaskSwitchContext+0xb0>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	e010      	b.n	8006b3a <vTaskSwitchContext+0x46>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <vTaskSwitchContext+0x40>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	607b      	str	r3, [r7, #4]
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <vTaskSwitchContext+0x3e>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	491b      	ldr	r1, [pc, #108]	; (8006ba8 <vTaskSwitchContext+0xb4>)
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0e4      	beq.n	8006b18 <vTaskSwitchContext+0x24>
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4a13      	ldr	r2, [pc, #76]	; (8006ba8 <vTaskSwitchContext+0xb4>)
 8006b5a:	4413      	add	r3, r2
 8006b5c:	60bb      	str	r3, [r7, #8]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	605a      	str	r2, [r3, #4]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d104      	bne.n	8006b7e <vTaskSwitchContext+0x8a>
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	605a      	str	r2, [r3, #4]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	4a09      	ldr	r2, [pc, #36]	; (8006bac <vTaskSwitchContext+0xb8>)
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	4a06      	ldr	r2, [pc, #24]	; (8006ba4 <vTaskSwitchContext+0xb0>)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6013      	str	r3, [r2, #0]
}
 8006b8e:	bf00      	nop
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20003020 	.word	0x20003020
 8006ba0:	2000300c 	.word	0x2000300c
 8006ba4:	20003000 	.word	0x20003000
 8006ba8:	20002b28 	.word	0x20002b28
 8006bac:	20002b24 	.word	0x20002b24

08006bb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	60fb      	str	r3, [r7, #12]
}
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bd6:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <vTaskPlaceOnEventList+0x44>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3318      	adds	r3, #24
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7fe fb65 	bl	80052ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006be4:	2101      	movs	r1, #1
 8006be6:	6838      	ldr	r0, [r7, #0]
 8006be8:	f000 fb7a 	bl	80072e0 <prvAddCurrentTaskToDelayedList>
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20002b24 	.word	0x20002b24

08006bf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	617b      	str	r3, [r7, #20]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c20:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <vTaskPlaceOnEventListRestricted+0x54>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3318      	adds	r3, #24
 8006c26:	4619      	mov	r1, r3
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7fe fb1c 	bl	8005266 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	68b8      	ldr	r0, [r7, #8]
 8006c3e:	f000 fb4f 	bl	80072e0 <prvAddCurrentTaskToDelayedList>
	}
 8006c42:	bf00      	nop
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20002b24 	.word	0x20002b24

08006c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	60fb      	str	r3, [r7, #12]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	3318      	adds	r3, #24
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fb4d 	bl	8005320 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c86:	4b1e      	ldr	r3, [pc, #120]	; (8006d00 <xTaskRemoveFromEventList+0xb0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d11d      	bne.n	8006cca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe fb44 	bl	8005320 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c9c:	4b19      	ldr	r3, [pc, #100]	; (8006d04 <xTaskRemoveFromEventList+0xb4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d903      	bls.n	8006cac <xTaskRemoveFromEventList+0x5c>
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	4a16      	ldr	r2, [pc, #88]	; (8006d04 <xTaskRemoveFromEventList+0xb4>)
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4a13      	ldr	r2, [pc, #76]	; (8006d08 <xTaskRemoveFromEventList+0xb8>)
 8006cba:	441a      	add	r2, r3
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f7fe facf 	bl	8005266 <vListInsertEnd>
 8006cc8:	e005      	b.n	8006cd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	3318      	adds	r3, #24
 8006cce:	4619      	mov	r1, r3
 8006cd0:	480e      	ldr	r0, [pc, #56]	; (8006d0c <xTaskRemoveFromEventList+0xbc>)
 8006cd2:	f7fe fac8 	bl	8005266 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <xTaskRemoveFromEventList+0xc0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d905      	bls.n	8006cf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <xTaskRemoveFromEventList+0xc4>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e001      	b.n	8006cf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cf4:	697b      	ldr	r3, [r7, #20]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20003020 	.word	0x20003020
 8006d04:	20003000 	.word	0x20003000
 8006d08:	20002b28 	.word	0x20002b28
 8006d0c:	20002fb8 	.word	0x20002fb8
 8006d10:	20002b24 	.word	0x20002b24
 8006d14:	2000300c 	.word	0x2000300c

08006d18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d20:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <vTaskInternalSetTimeOutState+0x24>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <vTaskInternalSetTimeOutState+0x28>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	605a      	str	r2, [r3, #4]
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	20003010 	.word	0x20003010
 8006d40:	20002ffc 	.word	0x20002ffc

08006d44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	613b      	str	r3, [r7, #16]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60fb      	str	r3, [r7, #12]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d86:	f001 f835 	bl	8007df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d8a:	4b1d      	ldr	r3, [pc, #116]	; (8006e00 <xTaskCheckForTimeOut+0xbc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006da2:	d102      	bne.n	8006daa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	e023      	b.n	8006df2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b15      	ldr	r3, [pc, #84]	; (8006e04 <xTaskCheckForTimeOut+0xc0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d007      	beq.n	8006dc6 <xTaskCheckForTimeOut+0x82>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d302      	bcc.n	8006dc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	61fb      	str	r3, [r7, #28]
 8006dc4:	e015      	b.n	8006df2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d20b      	bcs.n	8006de8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ff9b 	bl	8006d18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	e004      	b.n	8006df2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dee:	2301      	movs	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006df2:	f001 f82f 	bl	8007e54 <vPortExitCritical>

	return xReturn;
 8006df6:	69fb      	ldr	r3, [r7, #28]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20002ffc 	.word	0x20002ffc
 8006e04:	20003010 	.word	0x20003010

08006e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e0c:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <vTaskMissedYield+0x14>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
}
 8006e12:	bf00      	nop
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	2000300c 	.word	0x2000300c

08006e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e28:	f000 f852 	bl	8006ed0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e2c:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <prvIdleTask+0x28>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d9f9      	bls.n	8006e28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <prvIdleTask+0x2c>)
 8006e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e44:	e7f0      	b.n	8006e28 <prvIdleTask+0x8>
 8006e46:	bf00      	nop
 8006e48:	20002b28 	.word	0x20002b28
 8006e4c:	e000ed04 	.word	0xe000ed04

08006e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e56:	2300      	movs	r3, #0
 8006e58:	607b      	str	r3, [r7, #4]
 8006e5a:	e00c      	b.n	8006e76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4a12      	ldr	r2, [pc, #72]	; (8006eb0 <prvInitialiseTaskLists+0x60>)
 8006e68:	4413      	add	r3, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe f9ce 	bl	800520c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3301      	adds	r3, #1
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b37      	cmp	r3, #55	; 0x37
 8006e7a:	d9ef      	bls.n	8006e5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e7c:	480d      	ldr	r0, [pc, #52]	; (8006eb4 <prvInitialiseTaskLists+0x64>)
 8006e7e:	f7fe f9c5 	bl	800520c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e82:	480d      	ldr	r0, [pc, #52]	; (8006eb8 <prvInitialiseTaskLists+0x68>)
 8006e84:	f7fe f9c2 	bl	800520c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e88:	480c      	ldr	r0, [pc, #48]	; (8006ebc <prvInitialiseTaskLists+0x6c>)
 8006e8a:	f7fe f9bf 	bl	800520c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e8e:	480c      	ldr	r0, [pc, #48]	; (8006ec0 <prvInitialiseTaskLists+0x70>)
 8006e90:	f7fe f9bc 	bl	800520c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e94:	480b      	ldr	r0, [pc, #44]	; (8006ec4 <prvInitialiseTaskLists+0x74>)
 8006e96:	f7fe f9b9 	bl	800520c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <prvInitialiseTaskLists+0x78>)
 8006e9c:	4a05      	ldr	r2, [pc, #20]	; (8006eb4 <prvInitialiseTaskLists+0x64>)
 8006e9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <prvInitialiseTaskLists+0x7c>)
 8006ea2:	4a05      	ldr	r2, [pc, #20]	; (8006eb8 <prvInitialiseTaskLists+0x68>)
 8006ea4:	601a      	str	r2, [r3, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20002b28 	.word	0x20002b28
 8006eb4:	20002f88 	.word	0x20002f88
 8006eb8:	20002f9c 	.word	0x20002f9c
 8006ebc:	20002fb8 	.word	0x20002fb8
 8006ec0:	20002fcc 	.word	0x20002fcc
 8006ec4:	20002fe4 	.word	0x20002fe4
 8006ec8:	20002fb0 	.word	0x20002fb0
 8006ecc:	20002fb4 	.word	0x20002fb4

08006ed0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ed6:	e019      	b.n	8006f0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ed8:	f000 ff8c 	bl	8007df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006edc:	4b10      	ldr	r3, [pc, #64]	; (8006f20 <prvCheckTasksWaitingTermination+0x50>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe fa19 	bl	8005320 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eee:	4b0d      	ldr	r3, [pc, #52]	; (8006f24 <prvCheckTasksWaitingTermination+0x54>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	4a0b      	ldr	r2, [pc, #44]	; (8006f24 <prvCheckTasksWaitingTermination+0x54>)
 8006ef6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ef8:	4b0b      	ldr	r3, [pc, #44]	; (8006f28 <prvCheckTasksWaitingTermination+0x58>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	4a0a      	ldr	r2, [pc, #40]	; (8006f28 <prvCheckTasksWaitingTermination+0x58>)
 8006f00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f02:	f000 ffa7 	bl	8007e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f810 	bl	8006f2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f0c:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <prvCheckTasksWaitingTermination+0x58>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e1      	bne.n	8006ed8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20002fcc 	.word	0x20002fcc
 8006f24:	20002ff8 	.word	0x20002ff8
 8006f28:	20002fe0 	.word	0x20002fe0

08006f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d108      	bne.n	8006f50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 f944 	bl	80081d0 <vPortFree>
				vPortFree( pxTCB );
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 f941 	bl	80081d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f4e:	e018      	b.n	8006f82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d103      	bne.n	8006f62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 f938 	bl	80081d0 <vPortFree>
	}
 8006f60:	e00f      	b.n	8006f82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d00a      	beq.n	8006f82 <prvDeleteTCB+0x56>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	60fb      	str	r3, [r7, #12]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <prvDeleteTCB+0x54>
	}
 8006f82:	bf00      	nop
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f92:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <prvResetNextTaskUnblockTime+0x38>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8006f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fa4:	e008      	b.n	8006fb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fa6:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <prvResetNextTaskUnblockTime+0x38>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	4a04      	ldr	r2, [pc, #16]	; (8006fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8006fb6:	6013      	str	r3, [r2, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	20002fb0 	.word	0x20002fb0
 8006fc8:	20003018 	.word	0x20003018

08006fcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <xTaskGetSchedulerState+0x34>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	607b      	str	r3, [r7, #4]
 8006fde:	e008      	b.n	8006ff2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe0:	4b08      	ldr	r3, [pc, #32]	; (8007004 <xTaskGetSchedulerState+0x38>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	607b      	str	r3, [r7, #4]
 8006fec:	e001      	b.n	8006ff2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ff2:	687b      	ldr	r3, [r7, #4]
	}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	20003004 	.word	0x20003004
 8007004:	20003020 	.word	0x20003020

08007008 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d051      	beq.n	80070c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007022:	4b2a      	ldr	r3, [pc, #168]	; (80070cc <xTaskPriorityInherit+0xc4>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	429a      	cmp	r2, r3
 800702a:	d241      	bcs.n	80070b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	db06      	blt.n	8007042 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007034:	4b25      	ldr	r3, [pc, #148]	; (80070cc <xTaskPriorityInherit+0xc4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	6959      	ldr	r1, [r3, #20]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4a1f      	ldr	r2, [pc, #124]	; (80070d0 <xTaskPriorityInherit+0xc8>)
 8007054:	4413      	add	r3, r2
 8007056:	4299      	cmp	r1, r3
 8007058:	d122      	bne.n	80070a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	3304      	adds	r3, #4
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe f95e 	bl	8005320 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007064:	4b19      	ldr	r3, [pc, #100]	; (80070cc <xTaskPriorityInherit+0xc4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007072:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <xTaskPriorityInherit+0xcc>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d903      	bls.n	8007082 <xTaskPriorityInherit+0x7a>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	4a15      	ldr	r2, [pc, #84]	; (80070d4 <xTaskPriorityInherit+0xcc>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4a10      	ldr	r2, [pc, #64]	; (80070d0 <xTaskPriorityInherit+0xc8>)
 8007090:	441a      	add	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f7fe f8e4 	bl	8005266 <vListInsertEnd>
 800709e:	e004      	b.n	80070aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070a0:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <xTaskPriorityInherit+0xc4>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070aa:	2301      	movs	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	e008      	b.n	80070c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <xTaskPriorityInherit+0xc4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d201      	bcs.n	80070c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070be:	2301      	movs	r3, #1
 80070c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070c2:	68fb      	ldr	r3, [r7, #12]
	}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20002b24 	.word	0x20002b24
 80070d0:	20002b28 	.word	0x20002b28
 80070d4:	20003000 	.word	0x20003000

080070d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d056      	beq.n	800719c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070ee:	4b2e      	ldr	r3, [pc, #184]	; (80071a8 <xTaskPriorityDisinherit+0xd0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d00a      	beq.n	800710e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	60fb      	str	r3, [r7, #12]
}
 800710a:	bf00      	nop
 800710c:	e7fe      	b.n	800710c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	60bb      	str	r3, [r7, #8]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007130:	1e5a      	subs	r2, r3, #1
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713e:	429a      	cmp	r2, r3
 8007140:	d02c      	beq.n	800719c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007146:	2b00      	cmp	r3, #0
 8007148:	d128      	bne.n	800719c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	3304      	adds	r3, #4
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe f8e6 	bl	8005320 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716c:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <xTaskPriorityDisinherit+0xd4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d903      	bls.n	800717c <xTaskPriorityDisinherit+0xa4>
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	4a0c      	ldr	r2, [pc, #48]	; (80071ac <xTaskPriorityDisinherit+0xd4>)
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4a09      	ldr	r2, [pc, #36]	; (80071b0 <xTaskPriorityDisinherit+0xd8>)
 800718a:	441a      	add	r2, r3
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	3304      	adds	r3, #4
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f7fe f867 	bl	8005266 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007198:	2301      	movs	r3, #1
 800719a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800719c:	697b      	ldr	r3, [r7, #20]
	}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20002b24 	.word	0x20002b24
 80071ac:	20003000 	.word	0x20003000
 80071b0:	20002b28 	.word	0x20002b28

080071b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071c2:	2301      	movs	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d06a      	beq.n	80072a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	60fb      	str	r3, [r7, #12]
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d902      	bls.n	80071fa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	e002      	b.n	8007200 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	429a      	cmp	r2, r3
 8007208:	d04b      	beq.n	80072a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	429a      	cmp	r2, r3
 8007212:	d146      	bne.n	80072a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007214:	4b25      	ldr	r3, [pc, #148]	; (80072ac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	429a      	cmp	r2, r3
 800721c:	d10a      	bne.n	8007234 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	60bb      	str	r3, [r7, #8]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	69fa      	ldr	r2, [r7, #28]
 800723e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	db04      	blt.n	8007252 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	6959      	ldr	r1, [r3, #20]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4a13      	ldr	r2, [pc, #76]	; (80072b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007262:	4413      	add	r3, r2
 8007264:	4299      	cmp	r1, r3
 8007266:	d11c      	bne.n	80072a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	3304      	adds	r3, #4
 800726c:	4618      	mov	r0, r3
 800726e:	f7fe f857 	bl	8005320 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007276:	4b0f      	ldr	r3, [pc, #60]	; (80072b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d903      	bls.n	8007286 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007282:	4a0c      	ldr	r2, [pc, #48]	; (80072b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728a:	4613      	mov	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4a07      	ldr	r2, [pc, #28]	; (80072b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007294:	441a      	add	r2, r3
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	3304      	adds	r3, #4
 800729a:	4619      	mov	r1, r3
 800729c:	4610      	mov	r0, r2
 800729e:	f7fd ffe2 	bl	8005266 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072a2:	bf00      	nop
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20002b24 	.word	0x20002b24
 80072b0:	20002b28 	.word	0x20002b28
 80072b4:	20003000 	.word	0x20003000

080072b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072bc:	4b07      	ldr	r3, [pc, #28]	; (80072dc <pvTaskIncrementMutexHeldCount+0x24>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072c4:	4b05      	ldr	r3, [pc, #20]	; (80072dc <pvTaskIncrementMutexHeldCount+0x24>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072ca:	3201      	adds	r2, #1
 80072cc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80072ce:	4b03      	ldr	r3, [pc, #12]	; (80072dc <pvTaskIncrementMutexHeldCount+0x24>)
 80072d0:	681b      	ldr	r3, [r3, #0]
	}
 80072d2:	4618      	mov	r0, r3
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	20002b24 	.word	0x20002b24

080072e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072ea:	4b21      	ldr	r3, [pc, #132]	; (8007370 <prvAddCurrentTaskToDelayedList+0x90>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072f0:	4b20      	ldr	r3, [pc, #128]	; (8007374 <prvAddCurrentTaskToDelayedList+0x94>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3304      	adds	r3, #4
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe f812 	bl	8005320 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007302:	d10a      	bne.n	800731a <prvAddCurrentTaskToDelayedList+0x3a>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d007      	beq.n	800731a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800730a:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <prvAddCurrentTaskToDelayedList+0x94>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3304      	adds	r3, #4
 8007310:	4619      	mov	r1, r3
 8007312:	4819      	ldr	r0, [pc, #100]	; (8007378 <prvAddCurrentTaskToDelayedList+0x98>)
 8007314:	f7fd ffa7 	bl	8005266 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007318:	e026      	b.n	8007368 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4413      	add	r3, r2
 8007320:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007322:	4b14      	ldr	r3, [pc, #80]	; (8007374 <prvAddCurrentTaskToDelayedList+0x94>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	429a      	cmp	r2, r3
 8007330:	d209      	bcs.n	8007346 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007332:	4b12      	ldr	r3, [pc, #72]	; (800737c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <prvAddCurrentTaskToDelayedList+0x94>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3304      	adds	r3, #4
 800733c:	4619      	mov	r1, r3
 800733e:	4610      	mov	r0, r2
 8007340:	f7fd ffb5 	bl	80052ae <vListInsert>
}
 8007344:	e010      	b.n	8007368 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007346:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <prvAddCurrentTaskToDelayedList+0x94>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3304      	adds	r3, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f7fd ffab 	bl	80052ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007358:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <prvAddCurrentTaskToDelayedList+0xa4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	429a      	cmp	r2, r3
 8007360:	d202      	bcs.n	8007368 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007362:	4a08      	ldr	r2, [pc, #32]	; (8007384 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	6013      	str	r3, [r2, #0]
}
 8007368:	bf00      	nop
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20002ffc 	.word	0x20002ffc
 8007374:	20002b24 	.word	0x20002b24
 8007378:	20002fe4 	.word	0x20002fe4
 800737c:	20002fb4 	.word	0x20002fb4
 8007380:	20002fb0 	.word	0x20002fb0
 8007384:	20003018 	.word	0x20003018

08007388 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007392:	f000 fba1 	bl	8007ad8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007396:	4b1c      	ldr	r3, [pc, #112]	; (8007408 <xTimerCreateTimerTask+0x80>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d021      	beq.n	80073e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073a6:	1d3a      	adds	r2, r7, #4
 80073a8:	f107 0108 	add.w	r1, r7, #8
 80073ac:	f107 030c 	add.w	r3, r7, #12
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fd ff11 	bl	80051d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	9202      	str	r2, [sp, #8]
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	2302      	movs	r3, #2
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	2300      	movs	r3, #0
 80073c6:	460a      	mov	r2, r1
 80073c8:	4910      	ldr	r1, [pc, #64]	; (800740c <xTimerCreateTimerTask+0x84>)
 80073ca:	4811      	ldr	r0, [pc, #68]	; (8007410 <xTimerCreateTimerTask+0x88>)
 80073cc:	f7fe ffe0 	bl	8006390 <xTaskCreateStatic>
 80073d0:	4603      	mov	r3, r0
 80073d2:	4a10      	ldr	r2, [pc, #64]	; (8007414 <xTimerCreateTimerTask+0x8c>)
 80073d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073d6:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <xTimerCreateTimerTask+0x8c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073de:	2301      	movs	r3, #1
 80073e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	613b      	str	r3, [r7, #16]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80073fe:	697b      	ldr	r3, [r7, #20]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20003054 	.word	0x20003054
 800740c:	080084d4 	.word	0x080084d4
 8007410:	08007681 	.word	0x08007681
 8007414:	20003058 	.word	0x20003058

08007418 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af02      	add	r7, sp, #8
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007426:	202c      	movs	r0, #44	; 0x2c
 8007428:	f000 fe06 	bl	8008038 <pvPortMalloc>
 800742c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00d      	beq.n	8007450 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	68b9      	ldr	r1, [r7, #8]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 f843 	bl	80074d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007450:	697b      	ldr	r3, [r7, #20]
	}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800745a:	b580      	push	{r7, lr}
 800745c:	b08a      	sub	sp, #40	; 0x28
 800745e:	af02      	add	r7, sp, #8
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007468:	232c      	movs	r3, #44	; 0x2c
 800746a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2b2c      	cmp	r3, #44	; 0x2c
 8007470:	d00a      	beq.n	8007488 <xTimerCreateStatic+0x2e>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	61bb      	str	r3, [r7, #24]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007488:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <xTimerCreateStatic+0x4c>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	617b      	str	r3, [r7, #20]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00d      	beq.n	80074cc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 f805 	bl	80074d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80074cc:	69fb      	ldr	r3, [r7, #28]
	}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b086      	sub	sp, #24
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
 80074e2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10a      	bne.n	8007500 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	617b      	str	r3, [r7, #20]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01e      	beq.n	8007544 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007506:	f000 fae7 	bl	8007ad8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	6a3a      	ldr	r2, [r7, #32]
 8007520:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	3304      	adds	r3, #4
 8007526:	4618      	mov	r0, r3
 8007528:	f7fd fe90 	bl	800524c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d008      	beq.n	8007544 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007538:	f043 0304 	orr.w	r3, r3, #4
 800753c:	b2da      	uxtb	r2, r3
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007544:	bf00      	nop
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08a      	sub	sp, #40	; 0x28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	623b      	str	r3, [r7, #32]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800757a:	4b1a      	ldr	r3, [pc, #104]	; (80075e4 <xTimerGenericCommand+0x98>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d02a      	beq.n	80075d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b05      	cmp	r3, #5
 8007592:	dc18      	bgt.n	80075c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007594:	f7ff fd1a 	bl	8006fcc <xTaskGetSchedulerState>
 8007598:	4603      	mov	r3, r0
 800759a:	2b02      	cmp	r3, #2
 800759c:	d109      	bne.n	80075b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800759e:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <xTimerGenericCommand+0x98>)
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	f107 0110 	add.w	r1, r7, #16
 80075a6:	2300      	movs	r3, #0
 80075a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075aa:	f7fe f88b 	bl	80056c4 <xQueueGenericSend>
 80075ae:	6278      	str	r0, [r7, #36]	; 0x24
 80075b0:	e012      	b.n	80075d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075b2:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <xTimerGenericCommand+0x98>)
 80075b4:	6818      	ldr	r0, [r3, #0]
 80075b6:	f107 0110 	add.w	r1, r7, #16
 80075ba:	2300      	movs	r3, #0
 80075bc:	2200      	movs	r2, #0
 80075be:	f7fe f881 	bl	80056c4 <xQueueGenericSend>
 80075c2:	6278      	str	r0, [r7, #36]	; 0x24
 80075c4:	e008      	b.n	80075d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075c6:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <xTimerGenericCommand+0x98>)
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	f107 0110 	add.w	r1, r7, #16
 80075ce:	2300      	movs	r3, #0
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	f7fe f975 	bl	80058c0 <xQueueGenericSendFromISR>
 80075d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3728      	adds	r7, #40	; 0x28
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20003054 	.word	0x20003054

080075e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f2:	4b22      	ldr	r3, [pc, #136]	; (800767c <prvProcessExpiredTimer+0x94>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3304      	adds	r3, #4
 8007600:	4618      	mov	r0, r3
 8007602:	f7fd fe8d 	bl	8005320 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d022      	beq.n	800765a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	18d1      	adds	r1, r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	6978      	ldr	r0, [r7, #20]
 8007622:	f000 f8d1 	bl	80077c8 <prvInsertTimerInActiveList>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01f      	beq.n	800766c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800762c:	2300      	movs	r3, #0
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	2300      	movs	r3, #0
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	2100      	movs	r1, #0
 8007636:	6978      	ldr	r0, [r7, #20]
 8007638:	f7ff ff88 	bl	800754c <xTimerGenericCommand>
 800763c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d113      	bne.n	800766c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	60fb      	str	r3, [r7, #12]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007660:	f023 0301 	bic.w	r3, r3, #1
 8007664:	b2da      	uxtb	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	6978      	ldr	r0, [r7, #20]
 8007672:	4798      	blx	r3
}
 8007674:	bf00      	nop
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	2000304c 	.word	0x2000304c

08007680 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007688:	f107 0308 	add.w	r3, r7, #8
 800768c:	4618      	mov	r0, r3
 800768e:	f000 f857 	bl	8007740 <prvGetNextExpireTime>
 8007692:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4619      	mov	r1, r3
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 f803 	bl	80076a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800769e:	f000 f8d5 	bl	800784c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076a2:	e7f1      	b.n	8007688 <prvTimerTask+0x8>

080076a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076ae:	f7ff f8ab 	bl	8006808 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076b2:	f107 0308 	add.w	r3, r7, #8
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 f866 	bl	8007788 <prvSampleTimeNow>
 80076bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d130      	bne.n	8007726 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <prvProcessTimerOrBlockTask+0x3c>
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d806      	bhi.n	80076e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076d2:	f7ff f8a7 	bl	8006824 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076d6:	68f9      	ldr	r1, [r7, #12]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff ff85 	bl	80075e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076de:	e024      	b.n	800772a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d008      	beq.n	80076f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076e6:	4b13      	ldr	r3, [pc, #76]	; (8007734 <prvProcessTimerOrBlockTask+0x90>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <prvProcessTimerOrBlockTask+0x50>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e000      	b.n	80076f6 <prvProcessTimerOrBlockTask+0x52>
 80076f4:	2300      	movs	r3, #0
 80076f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076f8:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <prvProcessTimerOrBlockTask+0x94>)
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	4619      	mov	r1, r3
 8007706:	f7fe fe0f 	bl	8006328 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800770a:	f7ff f88b 	bl	8006824 <xTaskResumeAll>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007714:	4b09      	ldr	r3, [pc, #36]	; (800773c <prvProcessTimerOrBlockTask+0x98>)
 8007716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	f3bf 8f6f 	isb	sy
}
 8007724:	e001      	b.n	800772a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007726:	f7ff f87d 	bl	8006824 <xTaskResumeAll>
}
 800772a:	bf00      	nop
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	20003050 	.word	0x20003050
 8007738:	20003054 	.word	0x20003054
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007748:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <prvGetNextExpireTime+0x44>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <prvGetNextExpireTime+0x16>
 8007752:	2201      	movs	r2, #1
 8007754:	e000      	b.n	8007758 <prvGetNextExpireTime+0x18>
 8007756:	2200      	movs	r2, #0
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d105      	bne.n	8007770 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007764:	4b07      	ldr	r3, [pc, #28]	; (8007784 <prvGetNextExpireTime+0x44>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	e001      	b.n	8007774 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007774:	68fb      	ldr	r3, [r7, #12]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	2000304c 	.word	0x2000304c

08007788 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007790:	f7ff f8e6 	bl	8006960 <xTaskGetTickCount>
 8007794:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007796:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <prvSampleTimeNow+0x3c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	429a      	cmp	r2, r3
 800779e:	d205      	bcs.n	80077ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077a0:	f000 f936 	bl	8007a10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	e002      	b.n	80077b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077b2:	4a04      	ldr	r2, [pc, #16]	; (80077c4 <prvSampleTimeNow+0x3c>)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077b8:	68fb      	ldr	r3, [r7, #12]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	2000305c 	.word	0x2000305c

080077c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d812      	bhi.n	8007814 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	1ad2      	subs	r2, r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d302      	bcc.n	8007802 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e01b      	b.n	800783a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007802:	4b10      	ldr	r3, [pc, #64]	; (8007844 <prvInsertTimerInActiveList+0x7c>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3304      	adds	r3, #4
 800780a:	4619      	mov	r1, r3
 800780c:	4610      	mov	r0, r2
 800780e:	f7fd fd4e 	bl	80052ae <vListInsert>
 8007812:	e012      	b.n	800783a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d206      	bcs.n	800782a <prvInsertTimerInActiveList+0x62>
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d302      	bcc.n	800782a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007824:	2301      	movs	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	e007      	b.n	800783a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800782a:	4b07      	ldr	r3, [pc, #28]	; (8007848 <prvInsertTimerInActiveList+0x80>)
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3304      	adds	r3, #4
 8007832:	4619      	mov	r1, r3
 8007834:	4610      	mov	r0, r2
 8007836:	f7fd fd3a 	bl	80052ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800783a:	697b      	ldr	r3, [r7, #20]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20003050 	.word	0x20003050
 8007848:	2000304c 	.word	0x2000304c

0800784c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08e      	sub	sp, #56	; 0x38
 8007850:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007852:	e0ca      	b.n	80079ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	da18      	bge.n	800788c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	3304      	adds	r3, #4
 800785e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	61fb      	str	r3, [r7, #28]
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007882:	6850      	ldr	r0, [r2, #4]
 8007884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007886:	6892      	ldr	r2, [r2, #8]
 8007888:	4611      	mov	r1, r2
 800788a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	f2c0 80aa 	blt.w	80079e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d004      	beq.n	80078aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	3304      	adds	r3, #4
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fd fd3b 	bl	8005320 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078aa:	463b      	mov	r3, r7
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff ff6b 	bl	8007788 <prvSampleTimeNow>
 80078b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b09      	cmp	r3, #9
 80078b8:	f200 8097 	bhi.w	80079ea <prvProcessReceivedCommands+0x19e>
 80078bc:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <prvProcessReceivedCommands+0x78>)
 80078be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c2:	bf00      	nop
 80078c4:	080078ed 	.word	0x080078ed
 80078c8:	080078ed 	.word	0x080078ed
 80078cc:	080078ed 	.word	0x080078ed
 80078d0:	08007961 	.word	0x08007961
 80078d4:	08007975 	.word	0x08007975
 80078d8:	080079bf 	.word	0x080079bf
 80078dc:	080078ed 	.word	0x080078ed
 80078e0:	080078ed 	.word	0x080078ed
 80078e4:	08007961 	.word	0x08007961
 80078e8:	08007975 	.word	0x08007975
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f2:	f043 0301 	orr.w	r3, r3, #1
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	18d1      	adds	r1, r2, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800790c:	f7ff ff5c 	bl	80077c8 <prvInsertTimerInActiveList>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d069      	beq.n	80079ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800791c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d05e      	beq.n	80079ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	441a      	add	r2, r3
 8007934:	2300      	movs	r3, #0
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	2300      	movs	r3, #0
 800793a:	2100      	movs	r1, #0
 800793c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793e:	f7ff fe05 	bl	800754c <xTimerGenericCommand>
 8007942:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d14f      	bne.n	80079ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	61bb      	str	r3, [r7, #24]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007966:	f023 0301 	bic.w	r3, r3, #1
 800796a:	b2da      	uxtb	r2, r3
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007972:	e03a      	b.n	80079ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	b2da      	uxtb	r2, r3
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	617b      	str	r3, [r7, #20]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	699a      	ldr	r2, [r3, #24]
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	18d1      	adds	r1, r2, r3
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079b8:	f7ff ff06 	bl	80077c8 <prvInsertTimerInActiveList>
					break;
 80079bc:	e015      	b.n	80079ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d103      	bne.n	80079d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80079cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ce:	f000 fbff 	bl	80081d0 <vPortFree>
 80079d2:	e00a      	b.n	80079ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079da:	f023 0301 	bic.w	r3, r3, #1
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079e6:	e000      	b.n	80079ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ea:	4b08      	ldr	r3, [pc, #32]	; (8007a0c <prvProcessReceivedCommands+0x1c0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	1d39      	adds	r1, r7, #4
 80079f0:	2200      	movs	r2, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe f88c 	bl	8005b10 <xQueueReceive>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f47f af2a 	bne.w	8007854 <prvProcessReceivedCommands+0x8>
	}
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	3730      	adds	r7, #48	; 0x30
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20003054 	.word	0x20003054

08007a10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a16:	e048      	b.n	8007aaa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a18:	4b2d      	ldr	r3, [pc, #180]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a22:	4b2b      	ldr	r3, [pc, #172]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fd fc75 	bl	8005320 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a44:	f003 0304 	and.w	r3, r3, #4
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d02e      	beq.n	8007aaa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4413      	add	r3, r2
 8007a54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d90e      	bls.n	8007a7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a6a:	4b19      	ldr	r3, [pc, #100]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f7fd fc1a 	bl	80052ae <vListInsert>
 8007a7a:	e016      	b.n	8007aaa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	2300      	movs	r3, #0
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	2100      	movs	r1, #0
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff fd60 	bl	800754c <xTimerGenericCommand>
 8007a8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	603b      	str	r3, [r7, #0]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007aaa:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1b1      	bne.n	8007a18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ab4:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007aba:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <prvSwitchTimerLists+0xc4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a04      	ldr	r2, [pc, #16]	; (8007ad0 <prvSwitchTimerLists+0xc0>)
 8007ac0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ac2:	4a04      	ldr	r2, [pc, #16]	; (8007ad4 <prvSwitchTimerLists+0xc4>)
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	6013      	str	r3, [r2, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	2000304c 	.word	0x2000304c
 8007ad4:	20003050 	.word	0x20003050

08007ad8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ade:	f000 f989 	bl	8007df4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ae2:	4b15      	ldr	r3, [pc, #84]	; (8007b38 <prvCheckForValidListAndQueue+0x60>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d120      	bne.n	8007b2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007aea:	4814      	ldr	r0, [pc, #80]	; (8007b3c <prvCheckForValidListAndQueue+0x64>)
 8007aec:	f7fd fb8e 	bl	800520c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007af0:	4813      	ldr	r0, [pc, #76]	; (8007b40 <prvCheckForValidListAndQueue+0x68>)
 8007af2:	f7fd fb8b 	bl	800520c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007af6:	4b13      	ldr	r3, [pc, #76]	; (8007b44 <prvCheckForValidListAndQueue+0x6c>)
 8007af8:	4a10      	ldr	r2, [pc, #64]	; (8007b3c <prvCheckForValidListAndQueue+0x64>)
 8007afa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007afc:	4b12      	ldr	r3, [pc, #72]	; (8007b48 <prvCheckForValidListAndQueue+0x70>)
 8007afe:	4a10      	ldr	r2, [pc, #64]	; (8007b40 <prvCheckForValidListAndQueue+0x68>)
 8007b00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b02:	2300      	movs	r3, #0
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	4b11      	ldr	r3, [pc, #68]	; (8007b4c <prvCheckForValidListAndQueue+0x74>)
 8007b08:	4a11      	ldr	r2, [pc, #68]	; (8007b50 <prvCheckForValidListAndQueue+0x78>)
 8007b0a:	2110      	movs	r1, #16
 8007b0c:	200a      	movs	r0, #10
 8007b0e:	f7fd fc99 	bl	8005444 <xQueueGenericCreateStatic>
 8007b12:	4603      	mov	r3, r0
 8007b14:	4a08      	ldr	r2, [pc, #32]	; (8007b38 <prvCheckForValidListAndQueue+0x60>)
 8007b16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b18:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <prvCheckForValidListAndQueue+0x60>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d005      	beq.n	8007b2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b20:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <prvCheckForValidListAndQueue+0x60>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	490b      	ldr	r1, [pc, #44]	; (8007b54 <prvCheckForValidListAndQueue+0x7c>)
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe fbaa 	bl	8006280 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b2c:	f000 f992 	bl	8007e54 <vPortExitCritical>
}
 8007b30:	bf00      	nop
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20003054 	.word	0x20003054
 8007b3c:	20003024 	.word	0x20003024
 8007b40:	20003038 	.word	0x20003038
 8007b44:	2000304c 	.word	0x2000304c
 8007b48:	20003050 	.word	0x20003050
 8007b4c:	20003100 	.word	0x20003100
 8007b50:	20003060 	.word	0x20003060
 8007b54:	080084dc 	.word	0x080084dc

08007b58 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10a      	bne.n	8007b80 <pvTimerGetTimerID+0x28>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	60fb      	str	r3, [r7, #12]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007b80:	f000 f938 	bl	8007df4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007b8a:	f000 f963 	bl	8007e54 <vPortExitCritical>

	return pvReturn;
 8007b8e:	693b      	ldr	r3, [r7, #16]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3b04      	subs	r3, #4
 8007ba8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3b04      	subs	r3, #4
 8007bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f023 0201 	bic.w	r2, r3, #1
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3b04      	subs	r3, #4
 8007bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bc8:	4a0c      	ldr	r2, [pc, #48]	; (8007bfc <pxPortInitialiseStack+0x64>)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3b14      	subs	r3, #20
 8007bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3b04      	subs	r3, #4
 8007bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f06f 0202 	mvn.w	r2, #2
 8007be6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3b20      	subs	r3, #32
 8007bec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bee:	68fb      	ldr	r3, [r7, #12]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	08007c01 	.word	0x08007c01

08007c00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c0a:	4b12      	ldr	r3, [pc, #72]	; (8007c54 <prvTaskExitError+0x54>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c12:	d00a      	beq.n	8007c2a <prvTaskExitError+0x2a>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	60fb      	str	r3, [r7, #12]
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <prvTaskExitError+0x28>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	60bb      	str	r3, [r7, #8]
}
 8007c3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c3e:	bf00      	nop
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0fc      	beq.n	8007c40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c46:	bf00      	nop
 8007c48:	bf00      	nop
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	2000228c 	.word	0x2000228c
	...

08007c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c60:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <pxCurrentTCBConst2>)
 8007c62:	6819      	ldr	r1, [r3, #0]
 8007c64:	6808      	ldr	r0, [r1, #0]
 8007c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6a:	f380 8809 	msr	PSP, r0
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f04f 0000 	mov.w	r0, #0
 8007c76:	f380 8811 	msr	BASEPRI, r0
 8007c7a:	4770      	bx	lr
 8007c7c:	f3af 8000 	nop.w

08007c80 <pxCurrentTCBConst2>:
 8007c80:	20002b24 	.word	0x20002b24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop

08007c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c88:	4808      	ldr	r0, [pc, #32]	; (8007cac <prvPortStartFirstTask+0x24>)
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	6800      	ldr	r0, [r0, #0]
 8007c8e:	f380 8808 	msr	MSP, r0
 8007c92:	f04f 0000 	mov.w	r0, #0
 8007c96:	f380 8814 	msr	CONTROL, r0
 8007c9a:	b662      	cpsie	i
 8007c9c:	b661      	cpsie	f
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	df00      	svc	0
 8007ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007caa:	bf00      	nop
 8007cac:	e000ed08 	.word	0xe000ed08

08007cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cb6:	4b46      	ldr	r3, [pc, #280]	; (8007dd0 <xPortStartScheduler+0x120>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a46      	ldr	r2, [pc, #280]	; (8007dd4 <xPortStartScheduler+0x124>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d10a      	bne.n	8007cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	613b      	str	r3, [r7, #16]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cd6:	4b3e      	ldr	r3, [pc, #248]	; (8007dd0 <xPortStartScheduler+0x120>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a3f      	ldr	r2, [pc, #252]	; (8007dd8 <xPortStartScheduler+0x128>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d10a      	bne.n	8007cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	60fb      	str	r3, [r7, #12]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cf6:	4b39      	ldr	r3, [pc, #228]	; (8007ddc <xPortStartScheduler+0x12c>)
 8007cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	22ff      	movs	r2, #255	; 0xff
 8007d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	4b31      	ldr	r3, [pc, #196]	; (8007de0 <xPortStartScheduler+0x130>)
 8007d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d1e:	4b31      	ldr	r3, [pc, #196]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d20:	2207      	movs	r2, #7
 8007d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d24:	e009      	b.n	8007d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007d26:	4b2f      	ldr	r3, [pc, #188]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	4a2d      	ldr	r2, [pc, #180]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d3a:	78fb      	ldrb	r3, [r7, #3]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d42:	2b80      	cmp	r3, #128	; 0x80
 8007d44:	d0ef      	beq.n	8007d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d46:	4b27      	ldr	r3, [pc, #156]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f1c3 0307 	rsb	r3, r3, #7
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d00a      	beq.n	8007d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	60bb      	str	r3, [r7, #8]
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d68:	4b1e      	ldr	r3, [pc, #120]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	4a1d      	ldr	r2, [pc, #116]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d72:	4b1c      	ldr	r3, [pc, #112]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d7a:	4a1a      	ldr	r2, [pc, #104]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d86:	4b18      	ldr	r3, [pc, #96]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a17      	ldr	r2, [pc, #92]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d92:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a14      	ldr	r2, [pc, #80]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d9e:	f000 f8dd 	bl	8007f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007da2:	4b12      	ldr	r3, [pc, #72]	; (8007dec <xPortStartScheduler+0x13c>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007da8:	f000 f8fc 	bl	8007fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007dac:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <xPortStartScheduler+0x140>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0f      	ldr	r2, [pc, #60]	; (8007df0 <xPortStartScheduler+0x140>)
 8007db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007db8:	f7ff ff66 	bl	8007c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007dbc:	f7fe fe9a 	bl	8006af4 <vTaskSwitchContext>
	prvTaskExitError();
 8007dc0:	f7ff ff1e 	bl	8007c00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	e000ed00 	.word	0xe000ed00
 8007dd4:	410fc271 	.word	0x410fc271
 8007dd8:	410fc270 	.word	0x410fc270
 8007ddc:	e000e400 	.word	0xe000e400
 8007de0:	20003150 	.word	0x20003150
 8007de4:	20003154 	.word	0x20003154
 8007de8:	e000ed20 	.word	0xe000ed20
 8007dec:	2000228c 	.word	0x2000228c
 8007df0:	e000ef34 	.word	0xe000ef34

08007df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	607b      	str	r3, [r7, #4]
}
 8007e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <vPortEnterCritical+0x58>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3301      	adds	r3, #1
 8007e14:	4a0d      	ldr	r2, [pc, #52]	; (8007e4c <vPortEnterCritical+0x58>)
 8007e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e18:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <vPortEnterCritical+0x58>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d10f      	bne.n	8007e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e20:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <vPortEnterCritical+0x5c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	603b      	str	r3, [r7, #0]
}
 8007e3c:	bf00      	nop
 8007e3e:	e7fe      	b.n	8007e3e <vPortEnterCritical+0x4a>
	}
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	2000228c 	.word	0x2000228c
 8007e50:	e000ed04 	.word	0xe000ed04

08007e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e5a:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10a      	bne.n	8007e78 <vPortExitCritical+0x24>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	607b      	str	r3, [r7, #4]
}
 8007e74:	bf00      	nop
 8007e76:	e7fe      	b.n	8007e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e78:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	4a09      	ldr	r2, [pc, #36]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e82:	4b08      	ldr	r3, [pc, #32]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d105      	bne.n	8007e96 <vPortExitCritical+0x42>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	f383 8811 	msr	BASEPRI, r3
}
 8007e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	2000228c 	.word	0x2000228c
	...

08007eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007eb0:	f3ef 8009 	mrs	r0, PSP
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	4b15      	ldr	r3, [pc, #84]	; (8007f10 <pxCurrentTCBConst>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	f01e 0f10 	tst.w	lr, #16
 8007ec0:	bf08      	it	eq
 8007ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eca:	6010      	str	r0, [r2, #0]
 8007ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ed4:	f380 8811 	msr	BASEPRI, r0
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f7fe fe08 	bl	8006af4 <vTaskSwitchContext>
 8007ee4:	f04f 0000 	mov.w	r0, #0
 8007ee8:	f380 8811 	msr	BASEPRI, r0
 8007eec:	bc09      	pop	{r0, r3}
 8007eee:	6819      	ldr	r1, [r3, #0]
 8007ef0:	6808      	ldr	r0, [r1, #0]
 8007ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef6:	f01e 0f10 	tst.w	lr, #16
 8007efa:	bf08      	it	eq
 8007efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f00:	f380 8809 	msr	PSP, r0
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	f3af 8000 	nop.w

08007f10 <pxCurrentTCBConst>:
 8007f10:	20002b24 	.word	0x20002b24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop

08007f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	607b      	str	r3, [r7, #4]
}
 8007f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f32:	f7fe fd25 	bl	8006980 <xTaskIncrementTick>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f3c:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <xPortSysTickHandler+0x40>)
 8007f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	2300      	movs	r3, #0
 8007f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	f383 8811 	msr	BASEPRI, r3
}
 8007f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f60:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <vPortSetupTimerInterrupt+0x34>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f66:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <vPortSetupTimerInterrupt+0x38>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f6c:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <vPortSetupTimerInterrupt+0x3c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a0a      	ldr	r2, [pc, #40]	; (8007f9c <vPortSetupTimerInterrupt+0x40>)
 8007f72:	fba2 2303 	umull	r2, r3, r2, r3
 8007f76:	099b      	lsrs	r3, r3, #6
 8007f78:	4a09      	ldr	r2, [pc, #36]	; (8007fa0 <vPortSetupTimerInterrupt+0x44>)
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f7e:	4b04      	ldr	r3, [pc, #16]	; (8007f90 <vPortSetupTimerInterrupt+0x34>)
 8007f80:	2207      	movs	r2, #7
 8007f82:	601a      	str	r2, [r3, #0]
}
 8007f84:	bf00      	nop
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	e000e010 	.word	0xe000e010
 8007f94:	e000e018 	.word	0xe000e018
 8007f98:	20002280 	.word	0x20002280
 8007f9c:	10624dd3 	.word	0x10624dd3
 8007fa0:	e000e014 	.word	0xe000e014

08007fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fb4 <vPortEnableVFP+0x10>
 8007fa8:	6801      	ldr	r1, [r0, #0]
 8007faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fae:	6001      	str	r1, [r0, #0]
 8007fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fb2:	bf00      	nop
 8007fb4:	e000ed88 	.word	0xe000ed88

08007fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fbe:	f3ef 8305 	mrs	r3, IPSR
 8007fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b0f      	cmp	r3, #15
 8007fc8:	d914      	bls.n	8007ff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007fca:	4a17      	ldr	r2, [pc, #92]	; (8008028 <vPortValidateInterruptPriority+0x70>)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fd4:	4b15      	ldr	r3, [pc, #84]	; (800802c <vPortValidateInterruptPriority+0x74>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	7afa      	ldrb	r2, [r7, #11]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d20a      	bcs.n	8007ff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	607b      	str	r3, [r7, #4]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ff4:	4b0e      	ldr	r3, [pc, #56]	; (8008030 <vPortValidateInterruptPriority+0x78>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ffc:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <vPortValidateInterruptPriority+0x7c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d90a      	bls.n	800801a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	603b      	str	r3, [r7, #0]
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <vPortValidateInterruptPriority+0x60>
	}
 800801a:	bf00      	nop
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	e000e3f0 	.word	0xe000e3f0
 800802c:	20003150 	.word	0x20003150
 8008030:	e000ed0c 	.word	0xe000ed0c
 8008034:	20003154 	.word	0x20003154

08008038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	; 0x28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008044:	f7fe fbe0 	bl	8006808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008048:	4b5b      	ldr	r3, [pc, #364]	; (80081b8 <pvPortMalloc+0x180>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008050:	f000 f920 	bl	8008294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008054:	4b59      	ldr	r3, [pc, #356]	; (80081bc <pvPortMalloc+0x184>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	f040 8093 	bne.w	8008188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01d      	beq.n	80080a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008068:	2208      	movs	r2, #8
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b00      	cmp	r3, #0
 8008078:	d014      	beq.n	80080a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f023 0307 	bic.w	r3, r3, #7
 8008080:	3308      	adds	r3, #8
 8008082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <pvPortMalloc+0x6c>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	617b      	str	r3, [r7, #20]
}
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d06e      	beq.n	8008188 <pvPortMalloc+0x150>
 80080aa:	4b45      	ldr	r3, [pc, #276]	; (80081c0 <pvPortMalloc+0x188>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d869      	bhi.n	8008188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080b4:	4b43      	ldr	r3, [pc, #268]	; (80081c4 <pvPortMalloc+0x18c>)
 80080b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080b8:	4b42      	ldr	r3, [pc, #264]	; (80081c4 <pvPortMalloc+0x18c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080be:	e004      	b.n	80080ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d903      	bls.n	80080dc <pvPortMalloc+0xa4>
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f1      	bne.n	80080c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080dc:	4b36      	ldr	r3, [pc, #216]	; (80081b8 <pvPortMalloc+0x180>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d050      	beq.n	8008188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2208      	movs	r2, #8
 80080ec:	4413      	add	r3, r2
 80080ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	2308      	movs	r3, #8
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	429a      	cmp	r2, r3
 8008106:	d91f      	bls.n	8008148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4413      	add	r3, r2
 800810e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <pvPortMalloc+0xf8>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	613b      	str	r3, [r7, #16]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	1ad2      	subs	r2, r2, r3
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008142:	69b8      	ldr	r0, [r7, #24]
 8008144:	f000 f908 	bl	8008358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008148:	4b1d      	ldr	r3, [pc, #116]	; (80081c0 <pvPortMalloc+0x188>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <pvPortMalloc+0x188>)
 8008154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008156:	4b1a      	ldr	r3, [pc, #104]	; (80081c0 <pvPortMalloc+0x188>)
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <pvPortMalloc+0x190>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d203      	bcs.n	800816a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008162:	4b17      	ldr	r3, [pc, #92]	; (80081c0 <pvPortMalloc+0x188>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a18      	ldr	r2, [pc, #96]	; (80081c8 <pvPortMalloc+0x190>)
 8008168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	4b13      	ldr	r3, [pc, #76]	; (80081bc <pvPortMalloc+0x184>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	431a      	orrs	r2, r3
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800817e:	4b13      	ldr	r3, [pc, #76]	; (80081cc <pvPortMalloc+0x194>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3301      	adds	r3, #1
 8008184:	4a11      	ldr	r2, [pc, #68]	; (80081cc <pvPortMalloc+0x194>)
 8008186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008188:	f7fe fb4c 	bl	8006824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <pvPortMalloc+0x174>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60fb      	str	r3, [r7, #12]
}
 80081a8:	bf00      	nop
 80081aa:	e7fe      	b.n	80081aa <pvPortMalloc+0x172>
	return pvReturn;
 80081ac:	69fb      	ldr	r3, [r7, #28]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3728      	adds	r7, #40	; 0x28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200048d0 	.word	0x200048d0
 80081bc:	200048e4 	.word	0x200048e4
 80081c0:	200048d4 	.word	0x200048d4
 80081c4:	200048c8 	.word	0x200048c8
 80081c8:	200048d8 	.word	0x200048d8
 80081cc:	200048dc 	.word	0x200048dc

080081d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d04d      	beq.n	800827e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081e2:	2308      	movs	r3, #8
 80081e4:	425b      	negs	r3, r3
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4413      	add	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	4b24      	ldr	r3, [pc, #144]	; (8008288 <vPortFree+0xb8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4013      	ands	r3, r2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10a      	bne.n	8008214 <vPortFree+0x44>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	60fb      	str	r3, [r7, #12]
}
 8008210:	bf00      	nop
 8008212:	e7fe      	b.n	8008212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00a      	beq.n	8008232 <vPortFree+0x62>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	60bb      	str	r3, [r7, #8]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	4b14      	ldr	r3, [pc, #80]	; (8008288 <vPortFree+0xb8>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01e      	beq.n	800827e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d11a      	bne.n	800827e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	4b0e      	ldr	r3, [pc, #56]	; (8008288 <vPortFree+0xb8>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	43db      	mvns	r3, r3
 8008252:	401a      	ands	r2, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008258:	f7fe fad6 	bl	8006808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	4b0a      	ldr	r3, [pc, #40]	; (800828c <vPortFree+0xbc>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4413      	add	r3, r2
 8008266:	4a09      	ldr	r2, [pc, #36]	; (800828c <vPortFree+0xbc>)
 8008268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800826a:	6938      	ldr	r0, [r7, #16]
 800826c:	f000 f874 	bl	8008358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <vPortFree+0xc0>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3301      	adds	r3, #1
 8008276:	4a06      	ldr	r2, [pc, #24]	; (8008290 <vPortFree+0xc0>)
 8008278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800827a:	f7fe fad3 	bl	8006824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800827e:	bf00      	nop
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	200048e4 	.word	0x200048e4
 800828c:	200048d4 	.word	0x200048d4
 8008290:	200048e0 	.word	0x200048e0

08008294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800829a:	f241 7370 	movw	r3, #6000	; 0x1770
 800829e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082a0:	4b27      	ldr	r3, [pc, #156]	; (8008340 <prvHeapInit+0xac>)
 80082a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00c      	beq.n	80082c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3307      	adds	r3, #7
 80082b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0307 	bic.w	r3, r3, #7
 80082ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	4a1f      	ldr	r2, [pc, #124]	; (8008340 <prvHeapInit+0xac>)
 80082c4:	4413      	add	r3, r2
 80082c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082cc:	4a1d      	ldr	r2, [pc, #116]	; (8008344 <prvHeapInit+0xb0>)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082d2:	4b1c      	ldr	r3, [pc, #112]	; (8008344 <prvHeapInit+0xb0>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	4413      	add	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082e0:	2208      	movs	r2, #8
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	1a9b      	subs	r3, r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f023 0307 	bic.w	r3, r3, #7
 80082ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4a15      	ldr	r2, [pc, #84]	; (8008348 <prvHeapInit+0xb4>)
 80082f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082f6:	4b14      	ldr	r3, [pc, #80]	; (8008348 <prvHeapInit+0xb4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082fe:	4b12      	ldr	r3, [pc, #72]	; (8008348 <prvHeapInit+0xb4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008314:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <prvHeapInit+0xb4>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	4a0a      	ldr	r2, [pc, #40]	; (800834c <prvHeapInit+0xb8>)
 8008322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	4a09      	ldr	r2, [pc, #36]	; (8008350 <prvHeapInit+0xbc>)
 800832a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800832c:	4b09      	ldr	r3, [pc, #36]	; (8008354 <prvHeapInit+0xc0>)
 800832e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008332:	601a      	str	r2, [r3, #0]
}
 8008334:	bf00      	nop
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	20003158 	.word	0x20003158
 8008344:	200048c8 	.word	0x200048c8
 8008348:	200048d0 	.word	0x200048d0
 800834c:	200048d8 	.word	0x200048d8
 8008350:	200048d4 	.word	0x200048d4
 8008354:	200048e4 	.word	0x200048e4

08008358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008360:	4b28      	ldr	r3, [pc, #160]	; (8008404 <prvInsertBlockIntoFreeList+0xac>)
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e002      	b.n	800836c <prvInsertBlockIntoFreeList+0x14>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	429a      	cmp	r2, r3
 8008374:	d8f7      	bhi.n	8008366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	4413      	add	r3, r2
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	429a      	cmp	r2, r3
 8008386:	d108      	bne.n	800839a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	441a      	add	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	441a      	add	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d118      	bne.n	80083e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <prvInsertBlockIntoFreeList+0xb0>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d00d      	beq.n	80083d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	441a      	add	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	e008      	b.n	80083e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083d6:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <prvInsertBlockIntoFreeList+0xb0>)
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	e003      	b.n	80083e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d002      	beq.n	80083f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	200048c8 	.word	0x200048c8
 8008408:	200048d0 	.word	0x200048d0

0800840c <__libc_init_array>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4d0d      	ldr	r5, [pc, #52]	; (8008444 <__libc_init_array+0x38>)
 8008410:	4c0d      	ldr	r4, [pc, #52]	; (8008448 <__libc_init_array+0x3c>)
 8008412:	1b64      	subs	r4, r4, r5
 8008414:	10a4      	asrs	r4, r4, #2
 8008416:	2600      	movs	r6, #0
 8008418:	42a6      	cmp	r6, r4
 800841a:	d109      	bne.n	8008430 <__libc_init_array+0x24>
 800841c:	4d0b      	ldr	r5, [pc, #44]	; (800844c <__libc_init_array+0x40>)
 800841e:	4c0c      	ldr	r4, [pc, #48]	; (8008450 <__libc_init_array+0x44>)
 8008420:	f000 f82e 	bl	8008480 <_init>
 8008424:	1b64      	subs	r4, r4, r5
 8008426:	10a4      	asrs	r4, r4, #2
 8008428:	2600      	movs	r6, #0
 800842a:	42a6      	cmp	r6, r4
 800842c:	d105      	bne.n	800843a <__libc_init_array+0x2e>
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	f855 3b04 	ldr.w	r3, [r5], #4
 8008434:	4798      	blx	r3
 8008436:	3601      	adds	r6, #1
 8008438:	e7ee      	b.n	8008418 <__libc_init_array+0xc>
 800843a:	f855 3b04 	ldr.w	r3, [r5], #4
 800843e:	4798      	blx	r3
 8008440:	3601      	adds	r6, #1
 8008442:	e7f2      	b.n	800842a <__libc_init_array+0x1e>
 8008444:	08008578 	.word	0x08008578
 8008448:	08008578 	.word	0x08008578
 800844c:	08008578 	.word	0x08008578
 8008450:	0800857c 	.word	0x0800857c

08008454 <memcpy>:
 8008454:	440a      	add	r2, r1
 8008456:	4291      	cmp	r1, r2
 8008458:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800845c:	d100      	bne.n	8008460 <memcpy+0xc>
 800845e:	4770      	bx	lr
 8008460:	b510      	push	{r4, lr}
 8008462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800846a:	4291      	cmp	r1, r2
 800846c:	d1f9      	bne.n	8008462 <memcpy+0xe>
 800846e:	bd10      	pop	{r4, pc}

08008470 <memset>:
 8008470:	4402      	add	r2, r0
 8008472:	4603      	mov	r3, r0
 8008474:	4293      	cmp	r3, r2
 8008476:	d100      	bne.n	800847a <memset+0xa>
 8008478:	4770      	bx	lr
 800847a:	f803 1b01 	strb.w	r1, [r3], #1
 800847e:	e7f9      	b.n	8008474 <memset+0x4>

08008480 <_init>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr

0800848c <_fini>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	bf00      	nop
 8008490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008492:	bc08      	pop	{r3}
 8008494:	469e      	mov	lr, r3
 8008496:	4770      	bx	lr
