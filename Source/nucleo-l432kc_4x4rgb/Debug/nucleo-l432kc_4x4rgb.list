
nucleo-l432kc_4x4rgb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007618  08007618  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007618  08007618  00017618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007620  08007620  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007620  08007620  00017620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002654  20000010  08007638  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002664  08007638  00022664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c97c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039de  00000000  00000000  0003c9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  000403a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  00041b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002317b  00000000  00000000  000431c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e9b  00000000  00000000  00066343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d48a3  00000000  00000000  000801de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154a81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063c4  00000000  00000000  00154ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  0015ae98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007510 	.word	0x08007510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007510 	.word	0x08007510

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <serverReachable>:
/**
 * @brief	Checks if the Broker is eachable
 * @return	false if not reachable
 */
bool serverReachable()
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
#ifdef VIRTUAL_WIFI /* Using Virtual WiFi Device for Testing Purposes */

	/* TODO: randomize the return value */
	return true;
 80004d8:	2301      	movs	r3, #1

#else /* Using Click Board for WiFi Communication */

	/* TODO: Call Thomas Functions */
#endif
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <connectToServer>:
/**
 *  @brief: Connects to the Server
 *  @return: true, if connection has worked
 */
bool connectToServer()
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	return 1;
 80004e8:	2301      	movs	r3, #1
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <main>:
/**************************************************************************
 ***************************** MAIN FUNC **********************************
 **************************************************************************/

int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/* Initial System Configuration */
	HAL_Init();
 80004f8:	f000 fc21 	bl	8000d3e <HAL_Init>
	SystemClock_Config();
 80004fc:	f000 f87e 	bl	80005fc <SystemClock_Config>
	MX_GPIO_Init();
 8000500:	f000 f9ba 	bl	8000878 <MX_GPIO_Init>
	MX_DMA_Init();
 8000504:	f000 f99a 	bl	800083c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000508:	f000 f968 	bl	80007dc <MX_USART2_UART_Init>
	MX_TIM1_Init();
 800050c:	f000 f8d8 	bl	80006c0 <MX_TIM1_Init>

	/* Init scheduler */
	osKernelInitialize();
 8000510:	f003 ff0e 	bl	8004330 <osKernelInitialize>

	/* Create the thread(s) */
	ConServerTaskHandle = osThreadNew(StartConServerTask, NULL, &ConServerTask_attributes);
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <main+0x68>)
 8000516:	2100      	movs	r1, #0
 8000518:	4811      	ldr	r0, [pc, #68]	; (8000560 <main+0x6c>)
 800051a:	f003 ff53 	bl	80043c4 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a10      	ldr	r2, [pc, #64]	; (8000564 <main+0x70>)
 8000522:	6013      	str	r3, [r2, #0]

	/* Create the thread(s) */
	ConServerTaskHandle = osThreadNew(StartConServerTask, NULL, &ConServerTask_attributes);
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <main+0x68>)
 8000526:	2100      	movs	r1, #0
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <main+0x6c>)
 800052a:	f003 ff4b 	bl	80043c4 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <main+0x70>)
 8000532:	6013      	str	r3, [r2, #0]


	/* Create the semaphores(s) */
	sem_printPermissionHandle = osSemaphoreNew(1, 1, &sem_printPermission_attributes);
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <main+0x74>)
 8000536:	2101      	movs	r1, #1
 8000538:	2001      	movs	r0, #1
 800053a:	f004 f887 	bl	800464c <osSemaphoreNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <main+0x78>)
 8000542:	6013      	str	r3, [r2, #0]

	/* Create the timer(s) */
	newDataTimerHandle = osTimerNew(newDataTimerCallback, osTimerPeriodic, NULL, &newDataTimer_attributes);
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <main+0x7c>)
 8000546:	2200      	movs	r2, #0
 8000548:	2101      	movs	r1, #1
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <main+0x80>)
 800054c:	f004 f802 	bl	8004554 <osTimerNew>
 8000550:	4603      	mov	r3, r0
 8000552:	4a09      	ldr	r2, [pc, #36]	; (8000578 <main+0x84>)
 8000554:	6013      	str	r3, [r2, #0]


	/* Start scheduler */
	osKernelStart();
 8000556:	f003 ff0f 	bl	8004378 <osKernelStart>


	/* We should never get here as control is now taken by the scheduler */
	while (1)
 800055a:	e7fe      	b.n	800055a <main+0x66>
 800055c:	0800758c 	.word	0x0800758c
 8000560:	0800057d 	.word	0x0800057d
 8000564:	20000148 	.word	0x20000148
 8000568:	080075c0 	.word	0x080075c0
 800056c:	20000150 	.word	0x20000150
 8000570:	080075b0 	.word	0x080075b0
 8000574:	080005dd 	.word	0x080005dd
 8000578:	2000014c 	.word	0x2000014c

0800057c <StartConServerTask>:
 ******************************* TASK Functions ***************************
 **************************************************************************/


void StartConServerTask(void *argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(serverReachable() == true)
 8000584:	f7ff ffa6 	bl	80004d4 <serverReachable>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d006      	beq.n	800059c <StartConServerTask+0x20>
		{
			if(connectToServer() == true)
 800058e:	f7ff ffa9 	bl	80004e4 <connectToServer>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <StartConServerTask+0x20>
			{
				/* Yield this task so that OutPutDataTask can Start */
				osThreadYield();
 8000598:	f003 ffa6 	bl	80044e8 <osThreadYield>
			}
		}

		/* Block and wait for 50ms */
		HAL_Delay(50);
 800059c:	2032      	movs	r0, #50	; 0x32
 800059e:	f000 fc07 	bl	8000db0 <HAL_Delay>
		if(serverReachable() == true)
 80005a2:	e7ef      	b.n	8000584 <StartConServerTask+0x8>

080005a4 <Error_Handler>:
/**************************************************************************
 ******************************* ERROR HANDLER ****************************
 **************************************************************************/

void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
	__disable_irq();

	while (1)
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <HAL_TIM_PWM_PulseFinishedCallback>:
/**************************************************************************
 ******************************* ISR & CB ***************************
 **************************************************************************/

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	// Stop DMA
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80005b8:	2100      	movs	r1, #0
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80005bc:	f002 fb0c 	bl	8002bd8 <HAL_TIM_PWM_Stop_DMA>

	// Give Back Semaphore
	osSemaphoreRelease(sem_printPermissionHandle);
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f004 f8cb 	bl	8004760 <osSemaphoreRelease>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000030 	.word	0x20000030
 80005d8:	20000150 	.word	0x20000150

080005dc <newDataTimerCallback>:


void newDataTimerCallback(void *argument)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	getNewData = true;
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <newDataTimerCallback+0x1c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	2000002c 	.word	0x2000002c

080005fc <SystemClock_Config>:
/**************************************************************************
 ******************************* HAL GENERATED INIT STUFF******************
 **************************************************************************/

void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	; 0x58
 8000600:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	; 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f006 ff78 	bl	8007500 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000622:	f001 f813 	bl	800164c <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800062c:	f7ff ffba 	bl	80005a4 <Error_Handler>
	}
	HAL_PWR_EnableBkUpAccess();
 8000630:	f000 ffee 	bl	8001610 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <SystemClock_Config+0xc0>)
 8000636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800063a:	4a20      	ldr	r2, [pc, #128]	; (80006bc <SystemClock_Config+0xc0>)
 800063c:	f023 0318 	bic.w	r3, r3, #24
 8000640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8000644:	2314      	movs	r3, #20
 8000646:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000654:	2360      	movs	r3, #96	; 0x60
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800065c:	2301      	movs	r3, #1
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000664:	2328      	movs	r3, #40	; 0x28
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000668:	2307      	movs	r3, #7
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f83d 	bl	80016f8 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8000684:	f7ff ff8e 	bl	80005a4 <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000688:	230f      	movs	r3, #15
 800068a:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2303      	movs	r3, #3
 800068e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	2104      	movs	r1, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fc3d 	bl	8001f20 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 80006ac:	f7ff ff7a 	bl	80005a4 <Error_Handler>
	}
	HAL_RCCEx_EnableMSIPLLMode();
 80006b0:	f002 f882 	bl	80027b8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b4:	bf00      	nop
 80006b6:	3758      	adds	r7, #88	; 0x58
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b096      	sub	sp, #88	; 0x58
 80006c4:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80006d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
 80006e2:	615a      	str	r2, [r3, #20]
 80006e4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	222c      	movs	r2, #44	; 0x2c
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f006 ff07 	bl	8007500 <memset>

	htim1.Instance = TIM1;
 80006f2:	4b38      	ldr	r3, [pc, #224]	; (80007d4 <MX_TIM1_Init+0x114>)
 80006f4:	4a38      	ldr	r2, [pc, #224]	; (80007d8 <MX_TIM1_Init+0x118>)
 80006f6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80006f8:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <MX_TIM1_Init+0x114>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <MX_TIM1_Init+0x114>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100;
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <MX_TIM1_Init+0x114>)
 8000706:	2264      	movs	r2, #100	; 0x64
 8000708:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <MX_TIM1_Init+0x114>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000710:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <MX_TIM1_Init+0x114>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000716:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <MX_TIM1_Init+0x114>)
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800071c:	482d      	ldr	r0, [pc, #180]	; (80007d4 <MX_TIM1_Init+0x114>)
 800071e:	f002 fa03 	bl	8002b28 <HAL_TIM_PWM_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0x6c>
	{
		Error_Handler();
 8000728:	f7ff ff3c 	bl	80005a4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000738:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800073c:	4619      	mov	r1, r3
 800073e:	4825      	ldr	r0, [pc, #148]	; (80007d4 <MX_TIM1_Init+0x114>)
 8000740:	f003 f88c 	bl	800385c <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0x8e>
	{
		Error_Handler();
 800074a:	f7ff ff2b 	bl	80005a4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074e:	2360      	movs	r3, #96	; 0x60
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 100;
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000756:	2300      	movs	r3, #0
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800075e:	2304      	movs	r3, #4
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)!= HAL_OK)
 800076a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076e:	2200      	movs	r2, #0
 8000770:	4619      	mov	r1, r3
 8000772:	4818      	ldr	r0, [pc, #96]	; (80007d4 <MX_TIM1_Init+0x114>)
 8000774:	f002 fc38 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0xc2>
	{
		Error_Handler();
 800077e:	f7ff ff11 	bl	80005a4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <MX_TIM1_Init+0x114>)
 80007b8:	f003 f8b6 	bl	8003928 <HAL_TIMEx_ConfigBreakDeadTime>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0x106>
	{
		Error_Handler();
 80007c2:	f7ff feef 	bl	80005a4 <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim1);
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <MX_TIM1_Init+0x114>)
 80007c8:	f000 f936 	bl	8000a38 <HAL_TIM_MspPostInit>

}
 80007cc:	bf00      	nop
 80007ce:	3758      	adds	r7, #88	; 0x58
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000030 	.word	0x20000030
 80007d8:	40012c00 	.word	0x40012c00

080007dc <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_USART2_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	; (8000838 <MX_USART2_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_USART2_UART_Init+0x58>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART2_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART2_UART_Init+0x58>)
 8000820:	f003 f918 	bl	8003a54 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800082a:	f7ff febb 	bl	80005a4 <Error_Handler>
	}
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000c4 	.word	0x200000c4
 8000838:	40004400 	.word	0x40004400

0800083c <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_DMA_Init+0x38>)
 8000844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <MX_DMA_Init+0x38>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6493      	str	r3, [r2, #72]	; 0x48
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_DMA_Init+0x38>)
 8000850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2105      	movs	r1, #5
 800085e:	200c      	movs	r0, #12
 8000860:	f000 fb82 	bl	8000f68 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000864:	200c      	movs	r0, #12
 8000866:	f000 fb9b 	bl	8000fa0 <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_GPIO_Init+0x8c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_GPIO_Init+0x8c>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_GPIO_Init+0x8c>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_GPIO_Init+0x8c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <MX_GPIO_Init+0x8c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_GPIO_Init+0x8c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_GPIO_Init+0x8c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <MX_GPIO_Init+0x8c>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_GPIO_Init+0x8c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2108      	movs	r1, #8
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <MX_GPIO_Init+0x90>)
 80008dc:	f000 fe80 	bl	80015e0 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = LD3_Pin;
 80008e0:	2308      	movs	r3, #8
 80008e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_GPIO_Init+0x90>)
 80008f8:	f000 fd08 	bl	800130c <HAL_GPIO_Init>
}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400

0800090c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d101      	bne.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800091e:	f000 fa27 	bl	8000d70 <HAL_IncTick>
	}
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40014400 	.word	0x40014400

08000930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_MspInit+0x4c>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	4a10      	ldr	r2, [pc, #64]	; (800097c <HAL_MspInit+0x4c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6613      	str	r3, [r2, #96]	; 0x60
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_MspInit+0x4c>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_MspInit+0x4c>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_MspInit+0x4c>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	210f      	movs	r1, #15
 800096a:	f06f 0001 	mvn.w	r0, #1
 800096e:	f000 fafb 	bl	8000f68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <HAL_TIM_PWM_MspInit+0xa8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d146      	bne.n	8000a20 <HAL_TIM_PWM_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <HAL_TIM_PWM_MspInit+0xac>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	4a25      	ldr	r2, [pc, #148]	; (8000a2c <HAL_TIM_PWM_MspInit+0xac>)
 8000998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800099c:	6613      	str	r3, [r2, #96]	; 0x60
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <HAL_TIM_PWM_MspInit+0xac>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009ac:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <HAL_TIM_PWM_MspInit+0xb4>)
 80009ae:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009b2:	2207      	movs	r2, #7
 80009b4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009b8:	2210      	movs	r2, #16
 80009ba:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ce:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009de:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80009e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80009e4:	4812      	ldr	r0, [pc, #72]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009e6:	f000 fae9 	bl	8000fbc <HAL_DMA_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 80009f0:	f7ff fdd8 	bl	80005a4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
 80009fa:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <HAL_TIM_PWM_MspInit+0xb0>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	210f      	movs	r1, #15
 8000a04:	2019      	movs	r0, #25
 8000a06:	f000 faaf 	bl	8000f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a0a:	2019      	movs	r0, #25
 8000a0c:	f000 fac8 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2105      	movs	r1, #5
 8000a14:	201b      	movs	r0, #27
 8000a16:	f000 faa7 	bl	8000f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a1a:	201b      	movs	r0, #27
 8000a1c:	f000 fac0 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40012c00 	.word	0x40012c00
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	2000007c 	.word	0x2000007c
 8000a34:	4002001c 	.word	0x4002001c

08000a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <HAL_TIM_MspPostInit+0x68>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d11d      	bne.n	8000a96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_TIM_MspPostInit+0x6c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <HAL_TIM_MspPostInit+0x6c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_TIM_MspPostInit+0x6c>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f000 fc3b 	bl	800130c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40012c00 	.word	0x40012c00
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09e      	sub	sp, #120	; 0x78
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	2254      	movs	r2, #84	; 0x54
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f006 fd19 	bl	8007500 <memset>
  if(huart->Instance==USART2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a28      	ldr	r2, [pc, #160]	; (8000b74 <HAL_UART_MspInit+0xcc>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d148      	bne.n	8000b6a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fc71 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000af0:	f7ff fd58 	bl	80005a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_UART_MspInit+0xd0>)
 8000af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af8:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <HAL_UART_MspInit+0xd0>)
 8000afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afe:	6593      	str	r3, [r2, #88]	; 0x58
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_UART_MspInit+0xd0>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <HAL_UART_MspInit+0xd0>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_UART_MspInit+0xd0>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0xd0>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b24:	2304      	movs	r3, #4
 8000b26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b34:	2307      	movs	r3, #7
 8000b36:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f000 fbe3 	bl	800130c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b66:	f000 fbd1 	bl	800130c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3778      	adds	r7, #120	; 0x78
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40004400 	.word	0x40004400
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	; 0x30
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <HAL_InitTick+0xc8>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8e:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <HAL_InitTick+0xc8>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	6613      	str	r3, [r2, #96]	; 0x60
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_InitTick+0xc8>)
 8000b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba2:	f107 020c 	add.w	r2, r7, #12
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fb7b 	bl	80022a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bb2:	f001 fb63 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 8000bb6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <HAL_InitTick+0xcc>)
 8000bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc0:	0c9b      	lsrs	r3, r3, #18
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <HAL_InitTick+0xd0>)
 8000bc8:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <HAL_InitTick+0xd4>)
 8000bca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <HAL_InitTick+0xd0>)
 8000bce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd2:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <HAL_InitTick+0xd0>)
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <HAL_InitTick+0xd0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <HAL_InitTick+0xd0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_InitTick+0xd0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8000bec:	4817      	ldr	r0, [pc, #92]	; (8000c4c <HAL_InitTick+0xd0>)
 8000bee:	f001 fee5 	bl	80029bc <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d11b      	bne.n	8000c38 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000c00:	4812      	ldr	r0, [pc, #72]	; (8000c4c <HAL_InitTick+0xd0>)
 8000c02:	f001 ff3d 	bl	8002a80 <HAL_TIM_Base_Start_IT>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d111      	bne.n	8000c38 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c14:	2019      	movs	r0, #25
 8000c16:	f000 f9c3 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d808      	bhi.n	8000c32 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	2019      	movs	r0, #25
 8000c26:	f000 f99f 	bl	8000f68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_InitTick+0xd8>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e002      	b.n	8000c38 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3730      	adds	r7, #48	; 0x30
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	431bde83 	.word	0x431bde83
 8000c4c:	20000154 	.word	0x20000154
 8000c50:	40014400 	.word	0x40014400
 8000c54:	20000004 	.word	0x20000004

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <DMA1_Channel2_IRQHandler+0x10>)
 8000c8a:	f000 fa90 	bl	80011ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000007c 	.word	0x2000007c

08000c98 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000c9e:	f002 f883 	bl	8002da8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000ca2:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000ca4:	f002 f880 	bl	8002da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000030 	.word	0x20000030
 8000cb0:	20000154 	.word	0x20000154

08000cb4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <TIM1_CC_IRQHandler+0x10>)
 8000cba:	f002 f875 	bl	8002da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000030 	.word	0x20000030

08000cc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cf0:	f7ff ffea 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <LoopForever+0xe>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	; (8000d38 <LoopForever+0x16>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f006 fbbf 	bl	800749c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d1e:	f7ff fbe9 	bl	80004f4 <main>

08000d22 <LoopForever>:

LoopForever:
    b LoopForever
 8000d22:	e7fe      	b.n	8000d22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d30:	08007628 	.word	0x08007628
  ldr r2, =_sbss
 8000d34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d38:	20002664 	.word	0x20002664

08000d3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC1_IRQHandler>

08000d3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f902 	bl	8000f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f7ff ff14 	bl	8000b7c <HAL_InitTick>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	e001      	b.n	8000d64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d60:	f7ff fde6 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d64:	79fb      	ldrb	r3, [r7, #7]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	200001a0 	.word	0x200001a0

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	200001a0 	.word	0x200001a0

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffde 	bl	8000d98 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff4c 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7a:	f7ff ff61 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f7e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff ffb1 	bl	8000eec <NVIC_EncodePriority>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff80 	bl	8000e98 <__NVIC_SetPriority>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff54 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e098      	b.n	8001100 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b4d      	ldr	r3, [pc, #308]	; (800110c <HAL_DMA_Init+0x150>)
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d80f      	bhi.n	8000ffa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <HAL_DMA_Init+0x154>)
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a4b      	ldr	r2, [pc, #300]	; (8001114 <HAL_DMA_Init+0x158>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	009a      	lsls	r2, r3, #2
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a48      	ldr	r2, [pc, #288]	; (8001118 <HAL_DMA_Init+0x15c>)
 8000ff6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ff8:	e00e      	b.n	8001018 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b46      	ldr	r3, [pc, #280]	; (800111c <HAL_DMA_Init+0x160>)
 8001002:	4413      	add	r3, r2
 8001004:	4a43      	ldr	r2, [pc, #268]	; (8001114 <HAL_DMA_Init+0x158>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	009a      	lsls	r2, r3, #2
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a42      	ldr	r2, [pc, #264]	; (8001120 <HAL_DMA_Init+0x164>)
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800102e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001032:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800103c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001072:	d039      	beq.n	80010e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <HAL_DMA_Init+0x15c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d11a      	bne.n	80010b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800107e:	4b29      	ldr	r3, [pc, #164]	; (8001124 <HAL_DMA_Init+0x168>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f003 031c 	and.w	r3, r3, #28
 800108a:	210f      	movs	r1, #15
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	4924      	ldr	r1, [pc, #144]	; (8001124 <HAL_DMA_Init+0x168>)
 8001094:	4013      	ands	r3, r2
 8001096:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <HAL_DMA_Init+0x168>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6859      	ldr	r1, [r3, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	f003 031c 	and.w	r3, r3, #28
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	491d      	ldr	r1, [pc, #116]	; (8001124 <HAL_DMA_Init+0x168>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]
 80010b2:	e019      	b.n	80010e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_DMA_Init+0x16c>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f003 031c 	and.w	r3, r3, #28
 80010c0:	210f      	movs	r1, #15
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	4917      	ldr	r1, [pc, #92]	; (8001128 <HAL_DMA_Init+0x16c>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_DMA_Init+0x16c>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6859      	ldr	r1, [r3, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f003 031c 	and.w	r3, r3, #28
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	4911      	ldr	r1, [pc, #68]	; (8001128 <HAL_DMA_Init+0x16c>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40020407 	.word	0x40020407
 8001110:	bffdfff8 	.word	0xbffdfff8
 8001114:	cccccccd 	.word	0xcccccccd
 8001118:	40020000 	.word	0x40020000
 800111c:	bffdfbf8 	.word	0xbffdfbf8
 8001120:	40020400 	.word	0x40020400
 8001124:	400200a8 	.word	0x400200a8
 8001128:	400204a8 	.word	0x400204a8

0800112c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d005      	beq.n	8001150 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2204      	movs	r2, #4
 8001148:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	e029      	b.n	80011a4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 020e 	bic.w	r2, r2, #14
 800115e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f003 021c 	and.w	r2, r3, #28
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	4798      	blx	r3
    }
  }
  return status;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f003 031c 	and.w	r3, r3, #28
 80011ce:	2204      	movs	r2, #4
 80011d0:	409a      	lsls	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d026      	beq.n	8001228 <HAL_DMA_IRQHandler+0x7a>
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d021      	beq.n	8001228 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0320 	and.w	r3, r3, #32
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d107      	bne.n	8001202 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0204 	bic.w	r2, r2, #4
 8001200:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f003 021c 	and.w	r2, r3, #28
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	2104      	movs	r1, #4
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	2b00      	cmp	r3, #0
 800121c:	d071      	beq.n	8001302 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001226:	e06c      	b.n	8001302 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	f003 031c 	and.w	r3, r3, #28
 8001230:	2202      	movs	r2, #2
 8001232:	409a      	lsls	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02e      	beq.n	800129a <HAL_DMA_IRQHandler+0xec>
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d029      	beq.n	800129a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10b      	bne.n	800126c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 020a 	bic.w	r2, r2, #10
 8001262:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	f003 021c 	and.w	r2, r3, #28
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	2102      	movs	r1, #2
 800127a:	fa01 f202 	lsl.w	r2, r1, r2
 800127e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	2b00      	cmp	r3, #0
 800128e:	d038      	beq.n	8001302 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001298:	e033      	b.n	8001302 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f003 031c 	and.w	r3, r3, #28
 80012a2:	2208      	movs	r2, #8
 80012a4:	409a      	lsls	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d02a      	beq.n	8001304 <HAL_DMA_IRQHandler+0x156>
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d025      	beq.n	8001304 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 020e 	bic.w	r2, r2, #14
 80012c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	f003 021c 	and.w	r2, r3, #28
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	2101      	movs	r1, #1
 80012d6:	fa01 f202 	lsl.w	r2, r1, r2
 80012da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001302:	bf00      	nop
 8001304:	bf00      	nop
}
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131a:	e148      	b.n	80015ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 813a 	beq.w	80015a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d005      	beq.n	800134c <HAL_GPIO_Init+0x40>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f003 0201 	and.w	r2, r3, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d017      	beq.n	80013ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d123      	bne.n	800143e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	6939      	ldr	r1, [r7, #16]
 800143a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0203 	and.w	r2, r3, #3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8094 	beq.w	80015a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	4b52      	ldr	r3, [pc, #328]	; (80015cc <HAL_GPIO_Init+0x2c0>)
 8001482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001484:	4a51      	ldr	r2, [pc, #324]	; (80015cc <HAL_GPIO_Init+0x2c0>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6613      	str	r3, [r2, #96]	; 0x60
 800148c:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x2c0>)
 800148e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001498:	4a4d      	ldr	r2, [pc, #308]	; (80015d0 <HAL_GPIO_Init+0x2c4>)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014c2:	d00d      	beq.n	80014e0 <HAL_GPIO_Init+0x1d4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a43      	ldr	r2, [pc, #268]	; (80015d4 <HAL_GPIO_Init+0x2c8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d007      	beq.n	80014dc <HAL_GPIO_Init+0x1d0>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a42      	ldr	r2, [pc, #264]	; (80015d8 <HAL_GPIO_Init+0x2cc>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d101      	bne.n	80014d8 <HAL_GPIO_Init+0x1cc>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e004      	b.n	80014e2 <HAL_GPIO_Init+0x1d6>
 80014d8:	2307      	movs	r3, #7
 80014da:	e002      	b.n	80014e2 <HAL_GPIO_Init+0x1d6>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <HAL_GPIO_Init+0x1d6>
 80014e0:	2300      	movs	r3, #0
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	f002 0203 	and.w	r2, r2, #3
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	4093      	lsls	r3, r2
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014f2:	4937      	ldr	r1, [pc, #220]	; (80015d0 <HAL_GPIO_Init+0x2c4>)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001500:	4b36      	ldr	r3, [pc, #216]	; (80015dc <HAL_GPIO_Init+0x2d0>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001524:	4a2d      	ldr	r2, [pc, #180]	; (80015dc <HAL_GPIO_Init+0x2d0>)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <HAL_GPIO_Init+0x2d0>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800154e:	4a23      	ldr	r2, [pc, #140]	; (80015dc <HAL_GPIO_Init+0x2d0>)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_GPIO_Init+0x2d0>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001578:	4a18      	ldr	r2, [pc, #96]	; (80015dc <HAL_GPIO_Init+0x2d0>)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_GPIO_Init+0x2d0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <HAL_GPIO_Init+0x2d0>)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	3301      	adds	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	fa22 f303 	lsr.w	r3, r2, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f47f aeaf 	bne.w	800131c <HAL_GPIO_Init+0x10>
  }
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010000 	.word	0x40010000
 80015d4:	48000400 	.word	0x48000400
 80015d8:	48000800 	.word	0x48000800
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800161a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40007000 	.word	0x40007000

08001630 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <HAL_PWREx_GetVoltageRange+0x18>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40007000 	.word	0x40007000

0800164c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800165a:	d130      	bne.n	80016be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001668:	d038      	beq.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001672:	4a1e      	ldr	r2, [pc, #120]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001674:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001678:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2232      	movs	r2, #50	; 0x32
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	0c9b      	lsrs	r3, r3, #18
 800168c:	3301      	adds	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001690:	e002      	b.n	8001698 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3b01      	subs	r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a4:	d102      	bne.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f2      	bne.n	8001692 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b8:	d110      	bne.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e00f      	b.n	80016de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d007      	beq.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016d4:	4a05      	ldr	r2, [pc, #20]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40007000 	.word	0x40007000
 80016f0:	20000000 	.word	0x20000000
 80016f4:	431bde83 	.word	0x431bde83

080016f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f000 bc02 	b.w	8001f10 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170c:	4b96      	ldr	r3, [pc, #600]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001716:	4b94      	ldr	r3, [pc, #592]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80e4 	beq.w	80018f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <HAL_RCC_OscConfig+0x4c>
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2b0c      	cmp	r3, #12
 8001738:	f040 808b 	bne.w	8001852 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b01      	cmp	r3, #1
 8001740:	f040 8087 	bne.w	8001852 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001744:	4b88      	ldr	r3, [pc, #544]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x64>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e3d9      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1a      	ldr	r2, [r3, #32]
 8001760:	4b81      	ldr	r3, [pc, #516]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_RCC_OscConfig+0x7e>
 800176c:	4b7e      	ldr	r3, [pc, #504]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001774:	e005      	b.n	8001782 <HAL_RCC_OscConfig+0x8a>
 8001776:	4b7c      	ldr	r3, [pc, #496]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001782:	4293      	cmp	r3, r2
 8001784:	d223      	bcs.n	80017ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fdbe 	bl	800230c <RCC_SetFlashLatencyFromMSIRange>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e3ba      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800179a:	4b73      	ldr	r3, [pc, #460]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a72      	ldr	r2, [pc, #456]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b70      	ldr	r3, [pc, #448]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	496d      	ldr	r1, [pc, #436]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b8:	4b6b      	ldr	r3, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	4968      	ldr	r1, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e025      	b.n	800181a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ce:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80017d4:	f043 0308 	orr.w	r3, r3, #8
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4960      	ldr	r1, [pc, #384]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ec:	4b5e      	ldr	r3, [pc, #376]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	495b      	ldr	r1, [pc, #364]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fd7e 	bl	800230c <RCC_SetFlashLatencyFromMSIRange>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e37a      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800181a:	f000 fc81 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 800181e:	4602      	mov	r2, r0
 8001820:	4b51      	ldr	r3, [pc, #324]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	4950      	ldr	r1, [pc, #320]	; (800196c <HAL_RCC_OscConfig+0x274>)
 800182c:	5ccb      	ldrb	r3, [r1, r3]
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	4a4e      	ldr	r2, [pc, #312]	; (8001970 <HAL_RCC_OscConfig+0x278>)
 8001838:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800183a:	4b4e      	ldr	r3, [pc, #312]	; (8001974 <HAL_RCC_OscConfig+0x27c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f99c 	bl	8000b7c <HAL_InitTick>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d052      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	e35e      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d032      	beq.n	80018c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800185a:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a42      	ldr	r2, [pc, #264]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001866:	f7ff fa97 	bl	8000d98 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800186e:	f7ff fa93 	bl	8000d98 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e347      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a35      	ldr	r2, [pc, #212]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4930      	ldr	r1, [pc, #192]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	492b      	ldr	r1, [pc, #172]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
 80018be:	e01a      	b.n	80018f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa64 	bl	8000d98 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d4:	f7ff fa60 	bl	8000d98 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e314      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x1dc>
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d073      	beq.n	80019ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	2b08      	cmp	r3, #8
 8001906:	d005      	beq.n	8001914 <HAL_RCC_OscConfig+0x21c>
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d10e      	bne.n	800192c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d10b      	bne.n	800192c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d063      	beq.n	80019e8 <HAL_RCC_OscConfig+0x2f0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d15f      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e2f1      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d106      	bne.n	8001944 <HAL_RCC_OscConfig+0x24c>
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e025      	b.n	8001990 <HAL_RCC_OscConfig+0x298>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800194c:	d114      	bne.n	8001978 <HAL_RCC_OscConfig+0x280>
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a02      	ldr	r2, [pc, #8]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e013      	b.n	8001990 <HAL_RCC_OscConfig+0x298>
 8001968:	40021000 	.word	0x40021000
 800196c:	080075d0 	.word	0x080075d0
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004
 8001978:	4ba0      	ldr	r3, [pc, #640]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a9f      	ldr	r2, [pc, #636]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 800197e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b9d      	ldr	r3, [pc, #628]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a9c      	ldr	r2, [pc, #624]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff f9fe 	bl	8000d98 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff f9fa 	bl	8000d98 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e2ae      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b2:	4b92      	ldr	r3, [pc, #584]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x2a8>
 80019be:	e014      	b.n	80019ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff f9ea 	bl	8000d98 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff f9e6 	bl	8000d98 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e29a      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019da:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2d0>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d060      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_OscConfig+0x310>
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d119      	bne.n	8001a36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d116      	bne.n	8001a36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a08:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_OscConfig+0x328>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e277      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	4973      	ldr	r1, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a34:	e040      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d023      	beq.n	8001a86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a3e:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a6e      	ldr	r2, [pc, #440]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f9a5 	bl	8000d98 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a52:	f7ff f9a1 	bl	8000d98 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e255      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a64:	4b65      	ldr	r3, [pc, #404]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b62      	ldr	r3, [pc, #392]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	495f      	ldr	r1, [pc, #380]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
 8001a84:	e018      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a86:	4b5d      	ldr	r3, [pc, #372]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a5c      	ldr	r2, [pc, #368]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff f981 	bl	8000d98 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff f97d 	bl	8000d98 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e231      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d03c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001acc:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad2:	4a4a      	ldr	r2, [pc, #296]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff f95c 	bl	8000d98 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff f958 	bl	8000d98 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e20c      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af6:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ef      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x3ec>
 8001b04:	e01b      	b.n	8001b3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0c:	4a3b      	ldr	r2, [pc, #236]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b16:	f7ff f93f 	bl	8000d98 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1e:	f7ff f93b 	bl	8000d98 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e1ef      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b30:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1ef      	bne.n	8001b1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80a6 	beq.w	8001c98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10d      	bne.n	8001b78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b66:	6593      	str	r3, [r2, #88]	; 0x58
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b78:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_RCC_OscConfig+0x508>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d118      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_RCC_OscConfig+0x508>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_RCC_OscConfig+0x508>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b90:	f7ff f902 	bl	8000d98 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b98:	f7ff f8fe 	bl	8000d98 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e1b2      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_RCC_OscConfig+0x508>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d108      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4d8>
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bce:	e029      	b.n	8001c24 <HAL_RCC_OscConfig+0x52c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d115      	bne.n	8001c04 <HAL_RCC_OscConfig+0x50c>
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <HAL_RCC_OscConfig+0x504>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf8:	e014      	b.n	8001c24 <HAL_RCC_OscConfig+0x52c>
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40007000 	.word	0x40007000
 8001c04:	4b9a      	ldr	r3, [pc, #616]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	4a99      	ldr	r2, [pc, #612]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c14:	4b96      	ldr	r3, [pc, #600]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	4a95      	ldr	r2, [pc, #596]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d016      	beq.n	8001c5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff f8b4 	bl	8000d98 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff f8b0 	bl	8000d98 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e162      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c4a:	4b89      	ldr	r3, [pc, #548]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ed      	beq.n	8001c34 <HAL_RCC_OscConfig+0x53c>
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5a:	f7ff f89d 	bl	8000d98 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7ff f899 	bl	8000d98 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e14b      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c78:	4b7d      	ldr	r3, [pc, #500]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ed      	bne.n	8001c62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c86:	7ffb      	ldrb	r3, [r7, #31]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d105      	bne.n	8001c98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8c:	4b78      	ldr	r3, [pc, #480]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	4a77      	ldr	r2, [pc, #476]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d03c      	beq.n	8001d1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cac:	4b70      	ldr	r3, [pc, #448]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb2:	4a6f      	ldr	r2, [pc, #444]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f86c 	bl	8000d98 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc4:	f7ff f868 	bl	8000d98 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e11c      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cd6:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0ef      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x5cc>
 8001ce4:	e01b      	b.n	8001d1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ce6:	4b62      	ldr	r3, [pc, #392]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cec:	4a60      	ldr	r2, [pc, #384]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f84f 	bl	8000d98 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cfe:	f7ff f84b 	bl	8000d98 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0ff      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d10:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1ef      	bne.n	8001cfe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80f3 	beq.w	8001f0e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	f040 80c9 	bne.w	8001ec4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d32:	4b4f      	ldr	r3, [pc, #316]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0203 	and.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d12c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	3b01      	subs	r3, #1
 8001d52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d123      	bne.n	8001da0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d11b      	bne.n	8001da0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d113      	bne.n	8001da0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	3b01      	subs	r3, #1
 8001d86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d109      	bne.n	8001da0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d06b      	beq.n	8001e78 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d062      	beq.n	8001e6c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001da6:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0ac      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001db6:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2d      	ldr	r2, [pc, #180]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dc2:	f7fe ffe9 	bl	8000d98 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dca:	f7fe ffe5 	bl	8000d98 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e099      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_RCC_OscConfig+0x77c>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e02:	0212      	lsls	r2, r2, #8
 8001e04:	4311      	orrs	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e0a:	0852      	lsrs	r2, r2, #1
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	0552      	lsls	r2, r2, #21
 8001e10:	4311      	orrs	r1, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e16:	0852      	lsrs	r2, r2, #1
 8001e18:	3a01      	subs	r2, #1
 8001e1a:	0652      	lsls	r2, r2, #25
 8001e1c:	4311      	orrs	r1, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e22:	06d2      	lsls	r2, r2, #27
 8001e24:	430a      	orrs	r2, r1
 8001e26:	4912      	ldr	r1, [pc, #72]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e44:	f7fe ffa8 	bl	8000d98 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7fe ffa4 	bl	8000d98 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e058      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <HAL_RCC_OscConfig+0x778>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e6a:	e050      	b.n	8001f0e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e04f      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
 8001e70:	40021000 	.word	0x40021000
 8001e74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HAL_RCC_OscConfig+0x820>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d144      	bne.n	8001f0e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e84:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_RCC_OscConfig+0x820>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <HAL_RCC_OscConfig+0x820>)
 8001e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_RCC_OscConfig+0x820>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <HAL_RCC_OscConfig+0x820>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e9c:	f7fe ff7c 	bl	8000d98 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe ff78 	bl	8000d98 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e02c      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_RCC_OscConfig+0x820>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x7ac>
 8001ec2:	e024      	b.n	8001f0e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b0c      	cmp	r3, #12
 8001ec8:	d01f      	beq.n	8001f0a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_RCC_OscConfig+0x820>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <HAL_RCC_OscConfig+0x820>)
 8001ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7fe ff5f 	bl	8000d98 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ede:	f7fe ff5b 	bl	8000d98 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e00f      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_OscConfig+0x820>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_OscConfig+0x820>)
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	4905      	ldr	r1, [pc, #20]	; (8001f18 <HAL_RCC_OscConfig+0x820>)
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_OscConfig+0x824>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	60cb      	str	r3, [r1, #12]
 8001f08:	e001      	b.n	8001f0e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	feeefffc 	.word	0xfeeefffc

08001f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0e7      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b75      	ldr	r3, [pc, #468]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d910      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b72      	ldr	r3, [pc, #456]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	4970      	ldr	r1, [pc, #448]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b6e      	ldr	r3, [pc, #440]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0cf      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d010      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	4b66      	ldr	r3, [pc, #408]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d908      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4b63      	ldr	r3, [pc, #396]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4960      	ldr	r1, [pc, #384]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d04c      	beq.n	8002038 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	4b5a      	ldr	r3, [pc, #360]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d121      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0a6      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbe:	4b54      	ldr	r3, [pc, #336]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d115      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e09a      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fd6:	4b4e      	ldr	r3, [pc, #312]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e08e      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe6:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e086      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b46      	ldr	r3, [pc, #280]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4943      	ldr	r1, [pc, #268]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002008:	f7fe fec6 	bl	8000d98 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe fec2 	bl	8000d98 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e06e      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d010      	beq.n	8002066 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4b31      	ldr	r3, [pc, #196]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002050:	429a      	cmp	r2, r3
 8002052:	d208      	bcs.n	8002066 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	492b      	ldr	r1, [pc, #172]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002066:	4b29      	ldr	r3, [pc, #164]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d210      	bcs.n	8002096 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 0207 	bic.w	r2, r3, #7
 800207c:	4923      	ldr	r1, [pc, #140]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <HAL_RCC_ClockConfig+0x1ec>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e036      	b.n	8002104 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d008      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	4918      	ldr	r1, [pc, #96]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d009      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4910      	ldr	r1, [pc, #64]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020d4:	f000 f824 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	490b      	ldr	r1, [pc, #44]	; (8002114 <HAL_RCC_ClockConfig+0x1f4>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
 80020f0:	4a09      	ldr	r2, [pc, #36]	; (8002118 <HAL_RCC_ClockConfig+0x1f8>)
 80020f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_RCC_ClockConfig+0x1fc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fd3f 	bl	8000b7c <HAL_InitTick>
 80020fe:	4603      	mov	r3, r0
 8002100:	72fb      	strb	r3, [r7, #11]

  return status;
 8002102:	7afb      	ldrb	r3, [r7, #11]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40022000 	.word	0x40022000
 8002110:	40021000 	.word	0x40021000
 8002114:	080075d0 	.word	0x080075d0
 8002118:	20000000 	.word	0x20000000
 800211c:	20000004 	.word	0x20000004

08002120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212e:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x34>
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d121      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d11e      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002154:	4b34      	ldr	r3, [pc, #208]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002160:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e005      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800217c:	4a2b      	ldr	r2, [pc, #172]	; (800222c <HAL_RCC_GetSysClockFreq+0x10c>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002184:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10d      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b04      	cmp	r3, #4
 8002196:	d102      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HAL_RCC_GetSysClockFreq+0x110>)
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	e004      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_RCC_GetSysClockFreq+0x114>)
 80021a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d134      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d003      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0xac>
 80021c4:	e005      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_RCC_GetSysClockFreq+0x110>)
 80021c8:	617b      	str	r3, [r7, #20]
      break;
 80021ca:	e005      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ce:	617b      	str	r3, [r7, #20]
      break;
 80021d0:	e002      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	617b      	str	r3, [r7, #20]
      break;
 80021d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	3301      	adds	r3, #1
 80021e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	fb03 f202 	mul.w	r2, r3, r2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	0e5b      	lsrs	r3, r3, #25
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	3301      	adds	r3, #1
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002218:	69bb      	ldr	r3, [r7, #24]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	080075e8 	.word	0x080075e8
 8002230:	00f42400 	.word	0x00f42400
 8002234:	007a1200 	.word	0x007a1200

08002238 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_RCC_GetHCLKFreq+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000000 	.word	0x20000000

08002250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002254:	f7ff fff0 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002258:	4602      	mov	r2, r0
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	4904      	ldr	r1, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	080075e0 	.word	0x080075e0

0800227c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002280:	f7ff ffda 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	0adb      	lsrs	r3, r3, #11
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4904      	ldr	r1, [pc, #16]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	080075e0 	.word	0x080075e0

080022a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	220f      	movs	r2, #15
 80022b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_GetClockConfig+0x5c>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_RCC_GetClockConfig+0x5c>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_RCC_GetClockConfig+0x5c>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_GetClockConfig+0x5c>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	08db      	lsrs	r3, r3, #3
 80022e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <HAL_RCC_GetClockConfig+0x60>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0207 	and.w	r2, r3, #7
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	40022000 	.word	0x40022000

0800230c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002318:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002324:	f7ff f984 	bl	8001630 <HAL_PWREx_GetVoltageRange>
 8002328:	6178      	str	r0, [r7, #20]
 800232a:	e014      	b.n	8002356 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	4a24      	ldr	r2, [pc, #144]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002336:	6593      	str	r3, [r2, #88]	; 0x58
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002344:	f7ff f974 	bl	8001630 <HAL_PWREx_GetVoltageRange>
 8002348:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002354:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800235c:	d10b      	bne.n	8002376 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b80      	cmp	r3, #128	; 0x80
 8002362:	d919      	bls.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2ba0      	cmp	r3, #160	; 0xa0
 8002368:	d902      	bls.n	8002370 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800236a:	2302      	movs	r3, #2
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	e013      	b.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002370:	2301      	movs	r3, #1
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	e010      	b.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d902      	bls.n	8002382 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800237c:	2303      	movs	r3, #3
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	e00a      	b.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b80      	cmp	r3, #128	; 0x80
 8002386:	d102      	bne.n	800238e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002388:	2302      	movs	r3, #2
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	e004      	b.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b70      	cmp	r3, #112	; 0x70
 8002392:	d101      	bne.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002394:	2301      	movs	r3, #1
 8002396:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 0207 	bic.w	r2, r3, #7
 80023a0:	4909      	ldr	r1, [pc, #36]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023a8:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40022000 	.word	0x40022000

080023cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023d4:	2300      	movs	r3, #0
 80023d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023d8:	2300      	movs	r3, #0
 80023da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d031      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023f0:	d01a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80023f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023f6:	d814      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d009      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002400:	d10f      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002402:	4b5d      	ldr	r3, [pc, #372]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	4a5c      	ldr	r2, [pc, #368]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800240e:	e00c      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f9de 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002420:	e003      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	74fb      	strb	r3, [r7, #19]
      break;
 8002426:	e000      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002430:	4b51      	ldr	r3, [pc, #324]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	494e      	ldr	r1, [pc, #312]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002446:	e001      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 809e 	beq.w	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800245e:	4b46      	ldr	r3, [pc, #280]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00d      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b40      	ldr	r3, [pc, #256]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4a3f      	ldr	r2, [pc, #252]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	6593      	str	r3, [r2, #88]	; 0x58
 8002480:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248c:	2301      	movs	r3, #1
 800248e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002490:	4b3a      	ldr	r3, [pc, #232]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a39      	ldr	r2, [pc, #228]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800249c:	f7fe fc7c 	bl	8000d98 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024a2:	e009      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7fe fc78 	bl	8000d98 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d902      	bls.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	74fb      	strb	r3, [r7, #19]
        break;
 80024b6:	e005      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024b8:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ef      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d15a      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ca:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01e      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d019      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024e6:	4b24      	ldr	r3, [pc, #144]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f2:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800250a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002512:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d016      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fc38 	bl	8000d98 <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252a:	e00b      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252c:	f7fe fc34 	bl	8000d98 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	; 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d902      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	74fb      	strb	r3, [r7, #19]
            break;
 8002542:	e006      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0ec      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002566:	4904      	ldr	r1, [pc, #16]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800256e:	e009      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	74bb      	strb	r3, [r7, #18]
 8002574:	e006      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002584:	7c7b      	ldrb	r3, [r7, #17]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	4a89      	ldr	r2, [pc, #548]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a2:	4b84      	ldr	r3, [pc, #528]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f023 0203 	bic.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4980      	ldr	r1, [pc, #512]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c4:	4b7b      	ldr	r3, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 020c 	bic.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	4978      	ldr	r1, [pc, #480]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025e6:	4b73      	ldr	r3, [pc, #460]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	496f      	ldr	r1, [pc, #444]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002616:	4967      	ldr	r1, [pc, #412]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800262a:	4b62      	ldr	r3, [pc, #392]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	495e      	ldr	r1, [pc, #376]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	4956      	ldr	r1, [pc, #344]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800266e:	4b51      	ldr	r3, [pc, #324]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	494d      	ldr	r1, [pc, #308]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d028      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002690:	4b48      	ldr	r3, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4945      	ldr	r1, [pc, #276]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ae:	d106      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b0:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ba:	60d3      	str	r3, [r2, #12]
 80026bc:	e011      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3304      	adds	r3, #4
 80026cc:	2101      	movs	r1, #1
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f882 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d028      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026ee:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	492d      	ldr	r1, [pc, #180]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270c:	d106      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002718:	60d3      	str	r3, [r2, #12]
 800271a:	e011      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002724:	d10c      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3304      	adds	r3, #4
 800272a:	2101      	movs	r1, #1
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f853 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 8002732:	4603      	mov	r3, r0
 8002734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01c      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275a:	4916      	ldr	r1, [pc, #88]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800276a:	d10c      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3304      	adds	r3, #4
 8002770:	2102      	movs	r1, #2
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f830 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 8002778:	4603      	mov	r3, r0
 800277a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a0:	4904      	ldr	r1, [pc, #16]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000

080027b8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	6013      	str	r3, [r2, #0]
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000

080027d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027e6:	4b74      	ldr	r3, [pc, #464]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d018      	beq.n	8002824 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027f2:	4b71      	ldr	r3, [pc, #452]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0203 	and.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d10d      	bne.n	800281e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
       ||
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800280a:	4b6b      	ldr	r3, [pc, #428]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
       ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d047      	beq.n	80028ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	e044      	b.n	80028ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d018      	beq.n	800285e <RCCEx_PLLSAI1_Config+0x86>
 800282c:	2b03      	cmp	r3, #3
 800282e:	d825      	bhi.n	800287c <RCCEx_PLLSAI1_Config+0xa4>
 8002830:	2b01      	cmp	r3, #1
 8002832:	d002      	beq.n	800283a <RCCEx_PLLSAI1_Config+0x62>
 8002834:	2b02      	cmp	r3, #2
 8002836:	d009      	beq.n	800284c <RCCEx_PLLSAI1_Config+0x74>
 8002838:	e020      	b.n	800287c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800283a:	4b5f      	ldr	r3, [pc, #380]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d11d      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284a:	e01a      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800284c:	4b5a      	ldr	r3, [pc, #360]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	2b00      	cmp	r3, #0
 8002856:	d116      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285c:	e013      	b.n	8002886 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800285e:	4b56      	ldr	r3, [pc, #344]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10f      	bne.n	800288a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800286a:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800287a:	e006      	b.n	800288a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      break;
 8002880:	e004      	b.n	800288c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002882:	bf00      	nop
 8002884:	e002      	b.n	800288c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002886:	bf00      	nop
 8002888:	e000      	b.n	800288c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800288a:	bf00      	nop
    }

    if(status == HAL_OK)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10d      	bne.n	80028ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002892:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	430b      	orrs	r3, r1
 80028a8:	4943      	ldr	r1, [pc, #268]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d17c      	bne.n	80029ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028b4:	4b40      	ldr	r3, [pc, #256]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a3f      	ldr	r2, [pc, #252]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c0:	f7fe fa6a 	bl	8000d98 <HAL_GetTick>
 80028c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028c6:	e009      	b.n	80028dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c8:	f7fe fa66 	bl	8000d98 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d902      	bls.n	80028dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	73fb      	strb	r3, [r7, #15]
        break;
 80028da:	e005      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028dc:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1ef      	bne.n	80028c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d15f      	bne.n	80029ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d110      	bne.n	8002916 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6892      	ldr	r2, [r2, #8]
 8002904:	0211      	lsls	r1, r2, #8
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68d2      	ldr	r2, [r2, #12]
 800290a:	06d2      	lsls	r2, r2, #27
 800290c:	430a      	orrs	r2, r1
 800290e:	492a      	ldr	r1, [pc, #168]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	610b      	str	r3, [r1, #16]
 8002914:	e027      	b.n	8002966 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d112      	bne.n	8002942 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800291c:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002924:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6892      	ldr	r2, [r2, #8]
 800292c:	0211      	lsls	r1, r2, #8
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6912      	ldr	r2, [r2, #16]
 8002932:	0852      	lsrs	r2, r2, #1
 8002934:	3a01      	subs	r2, #1
 8002936:	0552      	lsls	r2, r2, #21
 8002938:	430a      	orrs	r2, r1
 800293a:	491f      	ldr	r1, [pc, #124]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	610b      	str	r3, [r1, #16]
 8002940:	e011      	b.n	8002966 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800294a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6892      	ldr	r2, [r2, #8]
 8002952:	0211      	lsls	r1, r2, #8
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6952      	ldr	r2, [r2, #20]
 8002958:	0852      	lsrs	r2, r2, #1
 800295a:	3a01      	subs	r2, #1
 800295c:	0652      	lsls	r2, r2, #25
 800295e:	430a      	orrs	r2, r1
 8002960:	4915      	ldr	r1, [pc, #84]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002962:	4313      	orrs	r3, r2
 8002964:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002966:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a13      	ldr	r2, [pc, #76]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002970:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002972:	f7fe fa11 	bl	8000d98 <HAL_GetTick>
 8002976:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002978:	e009      	b.n	800298e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800297a:	f7fe fa0d 	bl	8000d98 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d902      	bls.n	800298e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	73fb      	strb	r3, [r7, #15]
          break;
 800298c:	e005      	b.n	800299a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ef      	beq.n	800297a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d106      	bne.n	80029ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4903      	ldr	r1, [pc, #12]	; (80029b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e049      	b.n	8002a62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f841 	bl	8002a6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 fc26 	bl	800324c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d001      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e03b      	b.n	8002b10 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a19      	ldr	r2, [pc, #100]	; (8002b1c <HAL_TIM_Base_Start_IT+0x9c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d009      	beq.n	8002ace <HAL_TIM_Base_Start_IT+0x4e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac2:	d004      	beq.n	8002ace <HAL_TIM_Base_Start_IT+0x4e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a15      	ldr	r2, [pc, #84]	; (8002b20 <HAL_TIM_Base_Start_IT+0xa0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d115      	bne.n	8002afa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <HAL_TIM_Base_Start_IT+0xa4>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b06      	cmp	r3, #6
 8002ade:	d015      	beq.n	8002b0c <HAL_TIM_Base_Start_IT+0x8c>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae6:	d011      	beq.n	8002b0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af8:	e008      	b.n	8002b0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e000      	b.n	8002b0e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40014000 	.word	0x40014000
 8002b24:	00010007 	.word	0x00010007

08002b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e049      	b.n	8002bce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fd ff16 	bl	8000980 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3304      	adds	r3, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f000 fb70 	bl	800324c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	d855      	bhi.n	8002c98 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002bec:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c29 	.word	0x08002c29
 8002bf8:	08002c99 	.word	0x08002c99
 8002bfc:	08002c99 	.word	0x08002c99
 8002c00:	08002c99 	.word	0x08002c99
 8002c04:	08002c45 	.word	0x08002c45
 8002c08:	08002c99 	.word	0x08002c99
 8002c0c:	08002c99 	.word	0x08002c99
 8002c10:	08002c99 	.word	0x08002c99
 8002c14:	08002c61 	.word	0x08002c61
 8002c18:	08002c99 	.word	0x08002c99
 8002c1c:	08002c99 	.word	0x08002c99
 8002c20:	08002c99 	.word	0x08002c99
 8002c24:	08002c7d 	.word	0x08002c7d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe fa75 	bl	800112c <HAL_DMA_Abort_IT>
      break;
 8002c42:	e02c      	b.n	8002c9e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe fa67 	bl	800112c <HAL_DMA_Abort_IT>
      break;
 8002c5e:	e01e      	b.n	8002c9e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe fa59 	bl	800112c <HAL_DMA_Abort_IT>
      break;
 8002c7a:	e010      	b.n	8002c9e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe fa4b 	bl	800112c <HAL_DMA_Abort_IT>
      break;
 8002c96:	e002      	b.n	8002c9e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d176      	bne.n	8002d92 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fdaf 	bl	8003810 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a39      	ldr	r2, [pc, #228]	; (8002d9c <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d009      	beq.n	8002cd0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a37      	ldr	r2, [pc, #220]	; (8002da0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a36      	ldr	r2, [pc, #216]	; (8002da4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d017      	beq.n	8002d0a <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a1a      	ldr	r2, [r3, #32]
 8002ce0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10f      	bne.n	8002d0a <HAL_TIM_PWM_Stop_DMA+0x132>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	f240 4344 	movw	r3, #1092	; 0x444
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d107      	bne.n	8002d0a <HAL_TIM_PWM_Stop_DMA+0x132>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a1a      	ldr	r2, [r3, #32]
 8002d10:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <HAL_TIM_PWM_Stop_DMA+0x162>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6a1a      	ldr	r2, [r3, #32]
 8002d20:	f240 4344 	movw	r3, #1092	; 0x444
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d107      	bne.n	8002d3a <HAL_TIM_PWM_Stop_DMA+0x162>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_PWM_Stop_DMA+0x172>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d48:	e023      	b.n	8002d92 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_PWM_Stop_DMA+0x182>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	e01b      	b.n	8002d92 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_PWM_Stop_DMA+0x192>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	e013      	b.n	8002d92 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d78:	e00b      	b.n	8002d92 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d104      	bne.n	8002d8a <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d88:	e003      	b.n	8002d92 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40014000 	.word	0x40014000
 8002da4:	40014400 	.word	0x40014400

08002da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d122      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d11b      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0202 	mvn.w	r2, #2
 8002dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa1a 	bl	8003224 <HAL_TIM_IC_CaptureCallback>
 8002df0:	e005      	b.n	8002dfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fa0c 	bl	8003210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7fd fbd9 	bl	80005b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0204 	mvn.w	r2, #4
 8002e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9f0 	bl	8003224 <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9e2 	bl	8003210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fd fbaf 	bl	80005b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0208 	mvn.w	r2, #8
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2204      	movs	r2, #4
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f9c6 	bl	8003224 <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f9b8 	bl	8003210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fd fb85 	bl	80005b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d122      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b10      	cmp	r3, #16
 8002ec6:	d11b      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0210 	mvn.w	r2, #16
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f99c 	bl	8003224 <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f98e 	bl	8003210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7fd fb5b 	bl	80005b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d10e      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0201 	mvn.w	r2, #1
 8002f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd fcf0 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d10e      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f44:	2b80      	cmp	r3, #128	; 0x80
 8002f46:	d107      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fd6a 	bl	8003a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f66:	d10e      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b80      	cmp	r3, #128	; 0x80
 8002f74:	d107      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fd5d 	bl	8003a40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d10e      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d107      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f943 	bl	8003238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d10e      	bne.n	8002fde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	d107      	bne.n	8002fde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f06f 0220 	mvn.w	r2, #32
 8002fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fd1d 	bl	8003a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003002:	2302      	movs	r3, #2
 8003004:	e0ff      	b.n	8003206 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b14      	cmp	r3, #20
 8003012:	f200 80f0 	bhi.w	80031f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003016:	a201      	add	r2, pc, #4	; (adr r2, 800301c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003071 	.word	0x08003071
 8003020:	080031f7 	.word	0x080031f7
 8003024:	080031f7 	.word	0x080031f7
 8003028:	080031f7 	.word	0x080031f7
 800302c:	080030b1 	.word	0x080030b1
 8003030:	080031f7 	.word	0x080031f7
 8003034:	080031f7 	.word	0x080031f7
 8003038:	080031f7 	.word	0x080031f7
 800303c:	080030f3 	.word	0x080030f3
 8003040:	080031f7 	.word	0x080031f7
 8003044:	080031f7 	.word	0x080031f7
 8003048:	080031f7 	.word	0x080031f7
 800304c:	08003133 	.word	0x08003133
 8003050:	080031f7 	.word	0x080031f7
 8003054:	080031f7 	.word	0x080031f7
 8003058:	080031f7 	.word	0x080031f7
 800305c:	08003175 	.word	0x08003175
 8003060:	080031f7 	.word	0x080031f7
 8003064:	080031f7 	.word	0x080031f7
 8003068:	080031f7 	.word	0x080031f7
 800306c:	080031b5 	.word	0x080031b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f94c 	bl	8003314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0208 	orr.w	r2, r2, #8
 800308a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0204 	bic.w	r2, r2, #4
 800309a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6999      	ldr	r1, [r3, #24]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	619a      	str	r2, [r3, #24]
      break;
 80030ae:	e0a5      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f9a8 	bl	800340c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6999      	ldr	r1, [r3, #24]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	021a      	lsls	r2, r3, #8
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	619a      	str	r2, [r3, #24]
      break;
 80030f0:	e084      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fa01 	bl	8003500 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0208 	orr.w	r2, r2, #8
 800310c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0204 	bic.w	r2, r2, #4
 800311c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69d9      	ldr	r1, [r3, #28]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	61da      	str	r2, [r3, #28]
      break;
 8003130:	e064      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fa59 	bl	80035f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800314c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69d9      	ldr	r1, [r3, #28]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	021a      	lsls	r2, r3, #8
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	61da      	str	r2, [r3, #28]
      break;
 8003172:	e043      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fa96 	bl	80036ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0208 	orr.w	r2, r2, #8
 800318e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0204 	bic.w	r2, r2, #4
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031b2:	e023      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 face 	bl	800375c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	021a      	lsls	r2, r3, #8
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031f4:	e002      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	75fb      	strb	r3, [r7, #23]
      break;
 80031fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003204:	7dfb      	ldrb	r3, [r7, #23]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop

08003210 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <TIM_Base_SetConfig+0xbc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0x20>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d108      	bne.n	800327e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a21      	ldr	r2, [pc, #132]	; (8003308 <TIM_Base_SetConfig+0xbc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_Base_SetConfig+0x52>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0x52>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1e      	ldr	r2, [pc, #120]	; (800330c <TIM_Base_SetConfig+0xc0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x52>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <TIM_Base_SetConfig+0xc4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <TIM_Base_SetConfig+0xbc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d007      	beq.n	80032ec <TIM_Base_SetConfig+0xa0>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a0b      	ldr	r2, [pc, #44]	; (800330c <TIM_Base_SetConfig+0xc0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_Base_SetConfig+0xa0>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <TIM_Base_SetConfig+0xc4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d103      	bne.n	80032f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	615a      	str	r2, [r3, #20]
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40012c00 	.word	0x40012c00
 800330c:	40014000 	.word	0x40014000
 8003310:	40014400 	.word	0x40014400

08003314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f023 0201 	bic.w	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0303 	bic.w	r3, r3, #3
 800334e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f023 0302 	bic.w	r3, r3, #2
 8003360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a24      	ldr	r2, [pc, #144]	; (8003400 <TIM_OC1_SetConfig+0xec>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d007      	beq.n	8003384 <TIM_OC1_SetConfig+0x70>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a23      	ldr	r2, [pc, #140]	; (8003404 <TIM_OC1_SetConfig+0xf0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d003      	beq.n	8003384 <TIM_OC1_SetConfig+0x70>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a22      	ldr	r2, [pc, #136]	; (8003408 <TIM_OC1_SetConfig+0xf4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d10c      	bne.n	800339e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f023 0308 	bic.w	r3, r3, #8
 800338a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f023 0304 	bic.w	r3, r3, #4
 800339c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a17      	ldr	r2, [pc, #92]	; (8003400 <TIM_OC1_SetConfig+0xec>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <TIM_OC1_SetConfig+0xa2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a16      	ldr	r2, [pc, #88]	; (8003404 <TIM_OC1_SetConfig+0xf0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_OC1_SetConfig+0xa2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a15      	ldr	r2, [pc, #84]	; (8003408 <TIM_OC1_SetConfig+0xf4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d111      	bne.n	80033da <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	621a      	str	r2, [r3, #32]
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	40012c00 	.word	0x40012c00
 8003404:	40014000 	.word	0x40014000
 8003408:	40014400 	.word	0x40014400

0800340c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f023 0210 	bic.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800343a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f023 0320 	bic.w	r3, r3, #32
 800345a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <TIM_OC2_SetConfig+0xe8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10d      	bne.n	800348c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800348a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <TIM_OC2_SetConfig+0xe8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d007      	beq.n	80034a4 <TIM_OC2_SetConfig+0x98>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <TIM_OC2_SetConfig+0xec>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d003      	beq.n	80034a4 <TIM_OC2_SetConfig+0x98>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a17      	ldr	r2, [pc, #92]	; (80034fc <TIM_OC2_SetConfig+0xf0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d113      	bne.n	80034cc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40014400 	.word	0x40014400

08003500 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0303 	bic.w	r3, r3, #3
 800353a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800354c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <TIM_OC3_SetConfig+0xe4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d10d      	bne.n	800357e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800357c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <TIM_OC3_SetConfig+0xe4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <TIM_OC3_SetConfig+0x96>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <TIM_OC3_SetConfig+0xe8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_OC3_SetConfig+0x96>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a16      	ldr	r2, [pc, #88]	; (80035ec <TIM_OC3_SetConfig+0xec>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d113      	bne.n	80035be <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800359c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	621a      	str	r2, [r3, #32]
}
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40014000 	.word	0x40014000
 80035ec:	40014400 	.word	0x40014400

080035f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800361e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	031b      	lsls	r3, r3, #12
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <TIM_OC4_SetConfig+0xb0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d007      	beq.n	8003664 <TIM_OC4_SetConfig+0x74>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <TIM_OC4_SetConfig+0xb4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <TIM_OC4_SetConfig+0x74>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a12      	ldr	r2, [pc, #72]	; (80036a8 <TIM_OC4_SetConfig+0xb8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d109      	bne.n	8003678 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800366a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	019b      	lsls	r3, r3, #6
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	621a      	str	r2, [r3, #32]
}
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40012c00 	.word	0x40012c00
 80036a4:	40014000 	.word	0x40014000
 80036a8:	40014400 	.word	0x40014400

080036ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a13      	ldr	r2, [pc, #76]	; (8003750 <TIM_OC5_SetConfig+0xa4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d007      	beq.n	8003716 <TIM_OC5_SetConfig+0x6a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a12      	ldr	r2, [pc, #72]	; (8003754 <TIM_OC5_SetConfig+0xa8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_OC5_SetConfig+0x6a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a11      	ldr	r2, [pc, #68]	; (8003758 <TIM_OC5_SetConfig+0xac>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d109      	bne.n	800372a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	621a      	str	r2, [r3, #32]
}
 8003744:	bf00      	nop
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40014000 	.word	0x40014000
 8003758:	40014400 	.word	0x40014400

0800375c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	051b      	lsls	r3, r3, #20
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a14      	ldr	r2, [pc, #80]	; (8003804 <TIM_OC6_SetConfig+0xa8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d007      	beq.n	80037c8 <TIM_OC6_SetConfig+0x6c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a13      	ldr	r2, [pc, #76]	; (8003808 <TIM_OC6_SetConfig+0xac>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <TIM_OC6_SetConfig+0x6c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a12      	ldr	r2, [pc, #72]	; (800380c <TIM_OC6_SetConfig+0xb0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d109      	bne.n	80037dc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	029b      	lsls	r3, r3, #10
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40014000 	.word	0x40014000
 800380c:	40014400 	.word	0x40014400

08003810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	2201      	movs	r2, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	43db      	mvns	r3, r3
 8003832:	401a      	ands	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1a      	ldr	r2, [r3, #32]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	621a      	str	r2, [r3, #32]
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003870:	2302      	movs	r3, #2
 8003872:	e04f      	b.n	8003914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a21      	ldr	r2, [pc, #132]	; (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d108      	bne.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a14      	ldr	r2, [pc, #80]	; (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038dc:	d004      	beq.n	80038e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a10      	ldr	r2, [pc, #64]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d10c      	bne.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40014000 	.word	0x40014000

08003928 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003940:	2302      	movs	r3, #2
 8003942:	e060      	b.n	8003a06 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d115      	bne.n	80039f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	051b      	lsls	r3, r3, #20
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40012c00 	.word	0x40012c00

08003a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e040      	b.n	8003ae8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fd f816 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0201 	bic.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f82c 	bl	8003af0 <UART_SetConfig>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e022      	b.n	8003ae8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fa4c 	bl	8003f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fad3 	bl	800408c <UART_CheckIdleState>
 8003ae6:	4603      	mov	r3, r0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af4:	b08a      	sub	sp, #40	; 0x28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4bb4      	ldr	r3, [pc, #720]	; (8003df0 <UART_SetConfig+0x300>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4aa9      	ldr	r2, [pc, #676]	; (8003df4 <UART_SetConfig+0x304>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4aa0      	ldr	r2, [pc, #640]	; (8003df8 <UART_SetConfig+0x308>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d126      	bne.n	8003bc8 <UART_SetConfig+0xd8>
 8003b7a:	4ba0      	ldr	r3, [pc, #640]	; (8003dfc <UART_SetConfig+0x30c>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d81b      	bhi.n	8003bc0 <UART_SetConfig+0xd0>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0xa0>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003ba1 	.word	0x08003ba1
 8003b94:	08003bb1 	.word	0x08003bb1
 8003b98:	08003ba9 	.word	0x08003ba9
 8003b9c:	08003bb9 	.word	0x08003bb9
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba6:	e080      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bae:	e07c      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e078      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e074      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e070      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a8c      	ldr	r2, [pc, #560]	; (8003e00 <UART_SetConfig+0x310>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d138      	bne.n	8003c44 <UART_SetConfig+0x154>
 8003bd2:	4b8a      	ldr	r3, [pc, #552]	; (8003dfc <UART_SetConfig+0x30c>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d82d      	bhi.n	8003c3c <UART_SetConfig+0x14c>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <UART_SetConfig+0xf8>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c1d 	.word	0x08003c1d
 8003bec:	08003c3d 	.word	0x08003c3d
 8003bf0:	08003c3d 	.word	0x08003c3d
 8003bf4:	08003c3d 	.word	0x08003c3d
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c3d 	.word	0x08003c3d
 8003c00:	08003c3d 	.word	0x08003c3d
 8003c04:	08003c3d 	.word	0x08003c3d
 8003c08:	08003c25 	.word	0x08003c25
 8003c0c:	08003c3d 	.word	0x08003c3d
 8003c10:	08003c3d 	.word	0x08003c3d
 8003c14:	08003c3d 	.word	0x08003c3d
 8003c18:	08003c35 	.word	0x08003c35
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c22:	e042      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003c24:	2302      	movs	r3, #2
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2a:	e03e      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c32:	e03a      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003c34:	2308      	movs	r3, #8
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3a:	e036      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e032      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6a      	ldr	r2, [pc, #424]	; (8003df4 <UART_SetConfig+0x304>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d12a      	bne.n	8003ca4 <UART_SetConfig+0x1b4>
 8003c4e:	4b6b      	ldr	r3, [pc, #428]	; (8003dfc <UART_SetConfig+0x30c>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c5c:	d01a      	beq.n	8003c94 <UART_SetConfig+0x1a4>
 8003c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c62:	d81b      	bhi.n	8003c9c <UART_SetConfig+0x1ac>
 8003c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c68:	d00c      	beq.n	8003c84 <UART_SetConfig+0x194>
 8003c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6e:	d815      	bhi.n	8003c9c <UART_SetConfig+0x1ac>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <UART_SetConfig+0x18c>
 8003c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c78:	d008      	beq.n	8003c8c <UART_SetConfig+0x19c>
 8003c7a:	e00f      	b.n	8003c9c <UART_SetConfig+0x1ac>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c82:	e012      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003c84:	2302      	movs	r3, #2
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8a:	e00e      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c92:	e00a      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003c94:	2308      	movs	r3, #8
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9a:	e006      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca2:	e002      	b.n	8003caa <UART_SetConfig+0x1ba>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a51      	ldr	r2, [pc, #324]	; (8003df4 <UART_SetConfig+0x304>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d17a      	bne.n	8003daa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d824      	bhi.n	8003d06 <UART_SetConfig+0x216>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <UART_SetConfig+0x1d4>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003d07 	.word	0x08003d07
 8003ccc:	08003cf1 	.word	0x08003cf1
 8003cd0:	08003d07 	.word	0x08003d07
 8003cd4:	08003cf7 	.word	0x08003cf7
 8003cd8:	08003d07 	.word	0x08003d07
 8003cdc:	08003d07 	.word	0x08003d07
 8003ce0:	08003d07 	.word	0x08003d07
 8003ce4:	08003cff 	.word	0x08003cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce8:	f7fe fab2 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 8003cec:	61f8      	str	r0, [r7, #28]
        break;
 8003cee:	e010      	b.n	8003d12 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf0:	4b44      	ldr	r3, [pc, #272]	; (8003e04 <UART_SetConfig+0x314>)
 8003cf2:	61fb      	str	r3, [r7, #28]
        break;
 8003cf4:	e00d      	b.n	8003d12 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cf6:	f7fe fa13 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8003cfa:	61f8      	str	r0, [r7, #28]
        break;
 8003cfc:	e009      	b.n	8003d12 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d02:	61fb      	str	r3, [r7, #28]
        break;
 8003d04:	e005      	b.n	8003d12 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8107 	beq.w	8003f28 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d305      	bcc.n	8003d36 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d903      	bls.n	8003d3e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d3c:	e0f4      	b.n	8003f28 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	2200      	movs	r2, #0
 8003d42:	461c      	mov	r4, r3
 8003d44:	4615      	mov	r5, r2
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	022b      	lsls	r3, r5, #8
 8003d50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d54:	0222      	lsls	r2, r4, #8
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	6849      	ldr	r1, [r1, #4]
 8003d5a:	0849      	lsrs	r1, r1, #1
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	4688      	mov	r8, r1
 8003d60:	4681      	mov	r9, r0
 8003d62:	eb12 0a08 	adds.w	sl, r2, r8
 8003d66:	eb43 0b09 	adc.w	fp, r3, r9
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d78:	4650      	mov	r0, sl
 8003d7a:	4659      	mov	r1, fp
 8003d7c:	f7fc fa28 	bl	80001d0 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4613      	mov	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d8e:	d308      	bcc.n	8003da2 <UART_SetConfig+0x2b2>
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d96:	d204      	bcs.n	8003da2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	60da      	str	r2, [r3, #12]
 8003da0:	e0c2      	b.n	8003f28 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003da8:	e0be      	b.n	8003f28 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db2:	d16a      	bne.n	8003e8a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003db4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d834      	bhi.n	8003e26 <UART_SetConfig+0x336>
 8003dbc:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <UART_SetConfig+0x2d4>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003de9 	.word	0x08003de9
 8003dc8:	08003e09 	.word	0x08003e09
 8003dcc:	08003e11 	.word	0x08003e11
 8003dd0:	08003e27 	.word	0x08003e27
 8003dd4:	08003e17 	.word	0x08003e17
 8003dd8:	08003e27 	.word	0x08003e27
 8003ddc:	08003e27 	.word	0x08003e27
 8003de0:	08003e27 	.word	0x08003e27
 8003de4:	08003e1f 	.word	0x08003e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de8:	f7fe fa32 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 8003dec:	61f8      	str	r0, [r7, #28]
        break;
 8003dee:	e020      	b.n	8003e32 <UART_SetConfig+0x342>
 8003df0:	efff69f3 	.word	0xefff69f3
 8003df4:	40008000 	.word	0x40008000
 8003df8:	40013800 	.word	0x40013800
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40004400 	.word	0x40004400
 8003e04:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e08:	f7fe fa38 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 8003e0c:	61f8      	str	r0, [r7, #28]
        break;
 8003e0e:	e010      	b.n	8003e32 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e10:	4b4c      	ldr	r3, [pc, #304]	; (8003f44 <UART_SetConfig+0x454>)
 8003e12:	61fb      	str	r3, [r7, #28]
        break;
 8003e14:	e00d      	b.n	8003e32 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e16:	f7fe f983 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8003e1a:	61f8      	str	r0, [r7, #28]
        break;
 8003e1c:	e009      	b.n	8003e32 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e22:	61fb      	str	r3, [r7, #28]
        break;
 8003e24:	e005      	b.n	8003e32 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d077      	beq.n	8003f28 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	005a      	lsls	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	085b      	lsrs	r3, r3, #1
 8003e42:	441a      	add	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b0f      	cmp	r3, #15
 8003e52:	d916      	bls.n	8003e82 <UART_SetConfig+0x392>
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5a:	d212      	bcs.n	8003e82 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f023 030f 	bic.w	r3, r3, #15
 8003e64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	8afb      	ldrh	r3, [r7, #22]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	8afa      	ldrh	r2, [r7, #22]
 8003e7e:	60da      	str	r2, [r3, #12]
 8003e80:	e052      	b.n	8003f28 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e88:	e04e      	b.n	8003f28 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d827      	bhi.n	8003ee2 <UART_SetConfig+0x3f2>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <UART_SetConfig+0x3a8>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	08003ee3 	.word	0x08003ee3
 8003ea8:	08003ed3 	.word	0x08003ed3
 8003eac:	08003ee3 	.word	0x08003ee3
 8003eb0:	08003ee3 	.word	0x08003ee3
 8003eb4:	08003ee3 	.word	0x08003ee3
 8003eb8:	08003edb 	.word	0x08003edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7fe f9c8 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	61f8      	str	r0, [r7, #28]
        break;
 8003ec2:	e014      	b.n	8003eee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7fe f9da 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 8003ec8:	61f8      	str	r0, [r7, #28]
        break;
 8003eca:	e010      	b.n	8003eee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <UART_SetConfig+0x454>)
 8003ece:	61fb      	str	r3, [r7, #28]
        break;
 8003ed0:	e00d      	b.n	8003eee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed2:	f7fe f925 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8003ed6:	61f8      	str	r0, [r7, #28]
        break;
 8003ed8:	e009      	b.n	8003eee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ede:	61fb      	str	r3, [r7, #28]
        break;
 8003ee0:	e005      	b.n	8003eee <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003eec:	bf00      	nop
    }

    if (pclk != 0U)
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d019      	beq.n	8003f28 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	085a      	lsrs	r2, r3, #1
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	441a      	add	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b0f      	cmp	r3, #15
 8003f0c:	d909      	bls.n	8003f22 <UART_SetConfig+0x432>
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d205      	bcs.n	8003f22 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60da      	str	r2, [r3, #12]
 8003f20:	e002      	b.n	8003f28 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3728      	adds	r7, #40	; 0x28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f42:	bf00      	nop
 8003f44:	00f42400 	.word	0x00f42400

08003f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01a      	beq.n	800405e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004046:	d10a      	bne.n	800405e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af02      	add	r7, sp, #8
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800409c:	f7fc fe7c 	bl	8000d98 <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d10e      	bne.n	80040ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f82d 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e023      	b.n	8004116 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d10e      	bne.n	80040fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f817 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e00d      	b.n	8004116 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b09c      	sub	sp, #112	; 0x70
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412e:	e0a5      	b.n	800427c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	f000 80a1 	beq.w	800427c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7fc fe2d 	bl	8000d98 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <UART_WaitOnFlagUntilTimeout+0x32>
 800414a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414c:	2b00      	cmp	r3, #0
 800414e:	d13e      	bne.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800415e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004160:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004164:	667b      	str	r3, [r7, #100]	; 0x64
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004170:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004174:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800417c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e6      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3308      	adds	r3, #8
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	663b      	str	r3, [r7, #96]	; 0x60
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80041a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e5      	bne.n	8004182 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e067      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d04f      	beq.n	800427c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ea:	d147      	bne.n	800427c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800420a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
 8004216:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800421a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e6      	bne.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	613b      	str	r3, [r7, #16]
   return(result);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3308      	adds	r3, #8
 8004246:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004248:	623a      	str	r2, [r7, #32]
 800424a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	69f9      	ldr	r1, [r7, #28]
 800424e:	6a3a      	ldr	r2, [r7, #32]
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	61bb      	str	r3, [r7, #24]
   return(result);
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e5      	bne.n	8004228 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e010      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	429a      	cmp	r2, r3
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	429a      	cmp	r2, r3
 8004298:	f43f af4a 	beq.w	8004130 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3770      	adds	r7, #112	; 0x70
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <__NVIC_SetPriority>:
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	6039      	str	r1, [r7, #0]
 80042b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	db0a      	blt.n	80042d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	490c      	ldr	r1, [pc, #48]	; (80042f4 <__NVIC_SetPriority+0x4c>)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	440b      	add	r3, r1
 80042cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042d0:	e00a      	b.n	80042e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4908      	ldr	r1, [pc, #32]	; (80042f8 <__NVIC_SetPriority+0x50>)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	3b04      	subs	r3, #4
 80042e0:	0112      	lsls	r2, r2, #4
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	440b      	add	r3, r1
 80042e6:	761a      	strb	r2, [r3, #24]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000e100 	.word	0xe000e100
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <SysTick_Handler+0x1c>)
 8004302:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004304:	f001 ffac 	bl	8006260 <xTaskGetSchedulerState>
 8004308:	4603      	mov	r3, r0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800430e:	f002 fe4b 	bl	8006fa8 <xPortSysTickHandler>
  }
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	e000e010 	.word	0xe000e010

0800431c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004320:	2100      	movs	r1, #0
 8004322:	f06f 0004 	mvn.w	r0, #4
 8004326:	f7ff ffbf 	bl	80042a8 <__NVIC_SetPriority>
#endif
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004336:	f3ef 8305 	mrs	r3, IPSR
 800433a:	603b      	str	r3, [r7, #0]
  return(result);
 800433c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004342:	f06f 0305 	mvn.w	r3, #5
 8004346:	607b      	str	r3, [r7, #4]
 8004348:	e00c      	b.n	8004364 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <osKernelInitialize+0x44>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d105      	bne.n	800435e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <osKernelInitialize+0x44>)
 8004354:	2201      	movs	r2, #1
 8004356:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004358:	2300      	movs	r3, #0
 800435a:	607b      	str	r3, [r7, #4]
 800435c:	e002      	b.n	8004364 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800435e:	f04f 33ff 	mov.w	r3, #4294967295
 8004362:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004364:	687b      	ldr	r3, [r7, #4]
}
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	200001a4 	.word	0x200001a4

08004378 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800437e:	f3ef 8305 	mrs	r3, IPSR
 8004382:	603b      	str	r3, [r7, #0]
  return(result);
 8004384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <osKernelStart+0x1a>
    stat = osErrorISR;
 800438a:	f06f 0305 	mvn.w	r3, #5
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	e010      	b.n	80043b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <osKernelStart+0x48>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d109      	bne.n	80043ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800439a:	f7ff ffbf 	bl	800431c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800439e:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <osKernelStart+0x48>)
 80043a0:	2202      	movs	r2, #2
 80043a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043a4:	f001 fb14 	bl	80059d0 <vTaskStartScheduler>
      stat = osOK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	607b      	str	r3, [r7, #4]
 80043ac:	e002      	b.n	80043b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043b4:	687b      	ldr	r3, [r7, #4]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	200001a4 	.word	0x200001a4

080043c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08e      	sub	sp, #56	; 0x38
 80043c8:	af04      	add	r7, sp, #16
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043d4:	f3ef 8305 	mrs	r3, IPSR
 80043d8:	617b      	str	r3, [r7, #20]
  return(result);
 80043da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d17e      	bne.n	80044de <osThreadNew+0x11a>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d07b      	beq.n	80044de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043ea:	2318      	movs	r3, #24
 80043ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80043f2:	f04f 33ff 	mov.w	r3, #4294967295
 80043f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d045      	beq.n	800448a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <osThreadNew+0x48>
        name = attr->name;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <osThreadNew+0x6e>
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b38      	cmp	r3, #56	; 0x38
 8004424:	d805      	bhi.n	8004432 <osThreadNew+0x6e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <osThreadNew+0x72>
        return (NULL);
 8004432:	2300      	movs	r3, #0
 8004434:	e054      	b.n	80044e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	089b      	lsrs	r3, r3, #2
 8004444:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00e      	beq.n	800446c <osThreadNew+0xa8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b5b      	cmp	r3, #91	; 0x5b
 8004454:	d90a      	bls.n	800446c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800445a:	2b00      	cmp	r3, #0
 800445c:	d006      	beq.n	800446c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <osThreadNew+0xa8>
        mem = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	e010      	b.n	800448e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10c      	bne.n	800448e <osThreadNew+0xca>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d108      	bne.n	800448e <osThreadNew+0xca>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <osThreadNew+0xca>
          mem = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e001      	b.n	800448e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d110      	bne.n	80044b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800449c:	9202      	str	r2, [sp, #8]
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6a3a      	ldr	r2, [r7, #32]
 80044a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f001 f8ee 	bl	800568c <xTaskCreateStatic>
 80044b0:	4603      	mov	r3, r0
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	e013      	b.n	80044de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d110      	bne.n	80044de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	b29a      	uxth	r2, r3
 80044c0:	f107 0310 	add.w	r3, r7, #16
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f001 f939 	bl	8005746 <xTaskCreate>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d001      	beq.n	80044de <osThreadNew+0x11a>
            hTask = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044de:	693b      	ldr	r3, [r7, #16]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3728      	adds	r7, #40	; 0x28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ee:	f3ef 8305 	mrs	r3, IPSR
 80044f2:	603b      	str	r3, [r7, #0]
  return(result);
 80044f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <osThreadYield+0x1a>
    stat = osErrorISR;
 80044fa:	f06f 0305 	mvn.w	r3, #5
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	e009      	b.n	8004516 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8004502:	2300      	movs	r3, #0
 8004504:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <osThreadYield+0x3c>)
 8004508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8004516:	687b      	ldr	r3, [r7, #4]
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f002 fb5d 	bl	8006bf0 <pvTimerGetTimerID>
 8004536:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <TimerCallback+0x22>
    callb->func (callb->arg);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	6852      	ldr	r2, [r2, #4]
 8004546:	4610      	mov	r0, r2
 8004548:	4798      	blx	r3
  }
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b08c      	sub	sp, #48	; 0x30
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	460b      	mov	r3, r1
 8004562:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004568:	f3ef 8305 	mrs	r3, IPSR
 800456c:	613b      	str	r3, [r7, #16]
  return(result);
 800456e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004570:	2b00      	cmp	r3, #0
 8004572:	d163      	bne.n	800463c <osTimerNew+0xe8>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d060      	beq.n	800463c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800457a:	2008      	movs	r0, #8
 800457c:	f002 fda4 	bl	80070c8 <pvPortMalloc>
 8004580:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d059      	beq.n	800463c <osTimerNew+0xe8>
      callb->func = func;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004594:	7afb      	ldrb	r3, [r7, #11]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <osTimerNew+0x4c>
        reload = pdFALSE;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	e001      	b.n	80045a4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80045a0:	2301      	movs	r3, #1
 80045a2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295
 80045a8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01c      	beq.n	80045ee <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <osTimerNew+0x6e>
          name = attr->name;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d006      	beq.n	80045d8 <osTimerNew+0x84>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b2b      	cmp	r3, #43	; 0x2b
 80045d0:	d902      	bls.n	80045d8 <osTimerNew+0x84>
          mem = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	e00c      	b.n	80045f2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d108      	bne.n	80045f2 <osTimerNew+0x9e>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <osTimerNew+0x9e>
            mem = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	e001      	b.n	80045f2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10c      	bne.n	8004612 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	4b12      	ldr	r3, [pc, #72]	; (8004648 <osTimerNew+0xf4>)
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	2101      	movs	r1, #1
 8004608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800460a:	f001 ff72 	bl	80064f2 <xTimerCreateStatic>
 800460e:	6238      	str	r0, [r7, #32]
 8004610:	e00b      	b.n	800462a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d108      	bne.n	800462a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <osTimerNew+0xf4>)
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	2101      	movs	r1, #1
 8004622:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004624:	f001 ff44 	bl	80064b0 <xTimerCreate>
 8004628:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <osTimerNew+0xe8>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <osTimerNew+0xe8>
        vPortFree (callb);
 8004636:	6978      	ldr	r0, [r7, #20]
 8004638:	f002 fe12 	bl	8007260 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800463c:	6a3b      	ldr	r3, [r7, #32]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3728      	adds	r7, #40	; 0x28
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	08004529 	.word	0x08004529

0800464c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800465c:	f3ef 8305 	mrs	r3, IPSR
 8004660:	613b      	str	r3, [r7, #16]
  return(result);
 8004662:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004664:	2b00      	cmp	r3, #0
 8004666:	d175      	bne.n	8004754 <osSemaphoreNew+0x108>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d072      	beq.n	8004754 <osSemaphoreNew+0x108>
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	429a      	cmp	r2, r3
 8004674:	d86e      	bhi.n	8004754 <osSemaphoreNew+0x108>
    mem = -1;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
 800467a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d015      	beq.n	80046ae <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d006      	beq.n	8004698 <osSemaphoreNew+0x4c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b4f      	cmp	r3, #79	; 0x4f
 8004690:	d902      	bls.n	8004698 <osSemaphoreNew+0x4c>
        mem = 1;
 8004692:	2301      	movs	r3, #1
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e00c      	b.n	80046b2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d108      	bne.n	80046b2 <osSemaphoreNew+0x66>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d104      	bne.n	80046b2 <osSemaphoreNew+0x66>
          mem = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	e001      	b.n	80046b2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d04c      	beq.n	8004754 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d128      	bne.n	8004712 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d10a      	bne.n	80046dc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2203      	movs	r2, #3
 80046cc:	9200      	str	r2, [sp, #0]
 80046ce:	2200      	movs	r2, #0
 80046d0:	2100      	movs	r1, #0
 80046d2:	2001      	movs	r0, #1
 80046d4:	f000 f9d8 	bl	8004a88 <xQueueGenericCreateStatic>
 80046d8:	61f8      	str	r0, [r7, #28]
 80046da:	e005      	b.n	80046e8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80046dc:	2203      	movs	r2, #3
 80046de:	2100      	movs	r1, #0
 80046e0:	2001      	movs	r0, #1
 80046e2:	f000 fa49 	bl	8004b78 <xQueueGenericCreate>
 80046e6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d022      	beq.n	8004734 <osSemaphoreNew+0xe8>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01f      	beq.n	8004734 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80046f4:	2300      	movs	r3, #0
 80046f6:	2200      	movs	r2, #0
 80046f8:	2100      	movs	r1, #0
 80046fa:	69f8      	ldr	r0, [r7, #28]
 80046fc:	f000 fb04 	bl	8004d08 <xQueueGenericSend>
 8004700:	4603      	mov	r3, r0
 8004702:	2b01      	cmp	r3, #1
 8004704:	d016      	beq.n	8004734 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004706:	69f8      	ldr	r0, [r7, #28]
 8004708:	f000 fe04 	bl	8005314 <vQueueDelete>
            hSemaphore = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	e010      	b.n	8004734 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d108      	bne.n	800472a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	461a      	mov	r2, r3
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 fa86 	bl	8004c32 <xQueueCreateCountingSemaphoreStatic>
 8004726:	61f8      	str	r0, [r7, #28]
 8004728:	e004      	b.n	8004734 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fab7 	bl	8004ca0 <xQueueCreateCountingSemaphore>
 8004732:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	e001      	b.n	800474c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800474c:	6979      	ldr	r1, [r7, #20]
 800474e:	69f8      	ldr	r0, [r7, #28]
 8004750:	f000 ff14 	bl	800557c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004754:	69fb      	ldr	r3, [r7, #28]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004776:	f06f 0303 	mvn.w	r3, #3
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e02c      	b.n	80047d8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800477e:	f3ef 8305 	mrs	r3, IPSR
 8004782:	60fb      	str	r3, [r7, #12]
  return(result);
 8004784:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01a      	beq.n	80047c0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800478e:	f107 0308 	add.w	r3, r7, #8
 8004792:	4619      	mov	r1, r3
 8004794:	6938      	ldr	r0, [r7, #16]
 8004796:	f000 fc50 	bl	800503a <xQueueGiveFromISR>
 800479a:	4603      	mov	r3, r0
 800479c:	2b01      	cmp	r3, #1
 800479e:	d003      	beq.n	80047a8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80047a0:	f06f 0302 	mvn.w	r3, #2
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e017      	b.n	80047d8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d014      	beq.n	80047d8 <osSemaphoreRelease+0x78>
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <osSemaphoreRelease+0x84>)
 80047b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	e00b      	b.n	80047d8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80047c0:	2300      	movs	r3, #0
 80047c2:	2200      	movs	r2, #0
 80047c4:	2100      	movs	r1, #0
 80047c6:	6938      	ldr	r0, [r7, #16]
 80047c8:	f000 fa9e 	bl	8004d08 <xQueueGenericSend>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d002      	beq.n	80047d8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80047d2:	f06f 0302 	mvn.w	r3, #2
 80047d6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80047d8:	697b      	ldr	r3, [r7, #20]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a07      	ldr	r2, [pc, #28]	; (8004814 <vApplicationGetIdleTaskMemory+0x2c>)
 80047f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4a06      	ldr	r2, [pc, #24]	; (8004818 <vApplicationGetIdleTaskMemory+0x30>)
 80047fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2280      	movs	r2, #128	; 0x80
 8004804:	601a      	str	r2, [r3, #0]
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	200001a8 	.word	0x200001a8
 8004818:	20000204 	.word	0x20000204

0800481c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a07      	ldr	r2, [pc, #28]	; (8004848 <vApplicationGetTimerTaskMemory+0x2c>)
 800482c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4a06      	ldr	r2, [pc, #24]	; (800484c <vApplicationGetTimerTaskMemory+0x30>)
 8004832:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800483a:	601a      	str	r2, [r3, #0]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20000404 	.word	0x20000404
 800484c:	20000460 	.word	0x20000460

08004850 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f103 0208 	add.w	r2, r3, #8
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f04f 32ff 	mov.w	r2, #4294967295
 8004868:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f103 0208 	add.w	r2, r3, #8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f103 0208 	add.w	r2, r3, #8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d103      	bne.n	8004912 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	e00c      	b.n	800492c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3308      	adds	r3, #8
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e002      	b.n	8004920 <vListInsert+0x2e>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	d2f6      	bcs.n	800491a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6892      	ldr	r2, [r2, #8]
 800497a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6852      	ldr	r2, [r2, #4]
 8004984:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	429a      	cmp	r2, r3
 800498e:	d103      	bne.n	8004998 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	1e5a      	subs	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049e2:	f002 fa4f 	bl	8006e84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049f2:	fb01 f303 	mul.w	r3, r1, r3
 80049f6:	441a      	add	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a12:	3b01      	subs	r3, #1
 8004a14:	68f9      	ldr	r1, [r7, #12]
 8004a16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	441a      	add	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	22ff      	movs	r2, #255	; 0xff
 8004a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	22ff      	movs	r2, #255	; 0xff
 8004a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d114      	bne.n	8004a62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01a      	beq.n	8004a76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3310      	adds	r3, #16
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 fa4d 	bl	8005ee4 <xTaskRemoveFromEventList>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d012      	beq.n	8004a76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a50:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <xQueueGenericReset+0xcc>)
 8004a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	e009      	b.n	8004a76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3310      	adds	r3, #16
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff fef2 	bl	8004850 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3324      	adds	r3, #36	; 0x24
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff feed 	bl	8004850 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a76:	f002 fa35 	bl	8006ee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a7a:	2301      	movs	r3, #1
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08e      	sub	sp, #56	; 0x38
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <xQueueGenericCreateStatic+0x52>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <xQueueGenericCreateStatic+0x56>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <xQueueGenericCreateStatic+0x58>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	623b      	str	r3, [r7, #32]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <xQueueGenericCreateStatic+0x7e>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <xQueueGenericCreateStatic+0x82>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <xQueueGenericCreateStatic+0x84>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	61fb      	str	r3, [r7, #28]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b26:	2350      	movs	r3, #80	; 0x50
 8004b28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b50      	cmp	r3, #80	; 0x50
 8004b2e:	d00a      	beq.n	8004b46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	61bb      	str	r3, [r7, #24]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	4613      	mov	r3, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f83f 	bl	8004bec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3730      	adds	r7, #48	; 0x30
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	4613      	mov	r3, r2
 8004b84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	613b      	str	r3, [r7, #16]
}
 8004b9e:	bf00      	nop
 8004ba0:	e7fe      	b.n	8004ba0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	3350      	adds	r3, #80	; 0x50
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f002 fa89 	bl	80070c8 <pvPortMalloc>
 8004bb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d011      	beq.n	8004be2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	3350      	adds	r3, #80	; 0x50
 8004bc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bd0:	79fa      	ldrb	r2, [r7, #7]
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f805 	bl	8004bec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004be2:	69bb      	ldr	r3, [r7, #24]
	}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d103      	bne.n	8004c08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e002      	b.n	8004c0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	69b8      	ldr	r0, [r7, #24]
 8004c1e:	f7ff fecb 	bl	80049b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	78fa      	ldrb	r2, [r7, #3]
 8004c26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c2a:	bf00      	nop
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b08a      	sub	sp, #40	; 0x28
 8004c36:	af02      	add	r7, sp, #8
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	61bb      	str	r3, [r7, #24]
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d90a      	bls.n	8004c78 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	617b      	str	r3, [r7, #20]
}
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004c78:	2302      	movs	r3, #2
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2100      	movs	r1, #0
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff ff00 	bl	8004a88 <xQueueGenericCreateStatic>
 8004c88:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004c96:	69fb      	ldr	r3, [r7, #28]
	}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	613b      	str	r3, [r7, #16]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d90a      	bls.n	8004ce4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	60fb      	str	r3, [r7, #12]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ff45 	bl	8004b78 <xQueueGenericCreate>
 8004cee:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004cfc:	697b      	ldr	r3, [r7, #20]
	}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08e      	sub	sp, #56	; 0x38
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d16:	2300      	movs	r3, #0
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <xQueueGenericSend+0x32>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <xQueueGenericSend+0x40>
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <xQueueGenericSend+0x44>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <xQueueGenericSend+0x46>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <xQueueGenericSend+0x60>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d103      	bne.n	8004d76 <xQueueGenericSend+0x6e>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <xQueueGenericSend+0x72>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <xQueueGenericSend+0x74>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <xQueueGenericSend+0x8e>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	623b      	str	r3, [r7, #32]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d96:	f001 fa63 	bl	8006260 <xTaskGetSchedulerState>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <xQueueGenericSend+0x9e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <xQueueGenericSend+0xa2>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <xQueueGenericSend+0xa4>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	61fb      	str	r3, [r7, #28]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dc6:	f002 f85d 	bl	8006e84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <xQueueGenericSend+0xd4>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d129      	bne.n	8004e30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	68b9      	ldr	r1, [r7, #8]
 8004de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004de2:	f000 faba 	bl	800535a <prvCopyDataToQueue>
 8004de6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d010      	beq.n	8004e12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	3324      	adds	r3, #36	; 0x24
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 f875 	bl	8005ee4 <xTaskRemoveFromEventList>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e00:	4b3f      	ldr	r3, [pc, #252]	; (8004f00 <xQueueGenericSend+0x1f8>)
 8004e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	e00a      	b.n	8004e28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e18:	4b39      	ldr	r3, [pc, #228]	; (8004f00 <xQueueGenericSend+0x1f8>)
 8004e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e28:	f002 f85c 	bl	8006ee4 <vPortExitCritical>
				return pdPASS;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e063      	b.n	8004ef8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d103      	bne.n	8004e3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e36:	f002 f855 	bl	8006ee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e05c      	b.n	8004ef8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e44:	f107 0314 	add.w	r3, r7, #20
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 f8af 	bl	8005fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e52:	f002 f847 	bl	8006ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e56:	f000 fe21 	bl	8005a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e5a:	f002 f813 	bl	8006e84 <vPortEnterCritical>
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e64:	b25b      	sxtb	r3, r3
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d103      	bne.n	8004e74 <xQueueGenericSend+0x16c>
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e7a:	b25b      	sxtb	r3, r3
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d103      	bne.n	8004e8a <xQueueGenericSend+0x182>
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e8a:	f002 f82b 	bl	8006ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e8e:	1d3a      	adds	r2, r7, #4
 8004e90:	f107 0314 	add.w	r3, r7, #20
 8004e94:	4611      	mov	r1, r2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f001 f89e 	bl	8005fd8 <xTaskCheckForTimeOut>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d124      	bne.n	8004eec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ea4:	f000 fb51 	bl	800554a <prvIsQueueFull>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	3310      	adds	r3, #16
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 ffc4 	bl	8005e44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ebe:	f000 fadc 	bl	800547a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ec2:	f000 fdf9 	bl	8005ab8 <xTaskResumeAll>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f47f af7c 	bne.w	8004dc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <xQueueGenericSend+0x1f8>)
 8004ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	e772      	b.n	8004dc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ee2:	f000 faca 	bl	800547a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ee6:	f000 fde7 	bl	8005ab8 <xTaskResumeAll>
 8004eea:	e76c      	b.n	8004dc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eee:	f000 fac4 	bl	800547a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ef2:	f000 fde1 	bl	8005ab8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ef6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3738      	adds	r7, #56	; 0x38
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	e000ed04 	.word	0xe000ed04

08004f04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b090      	sub	sp, #64	; 0x40
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d103      	bne.n	8004f40 <xQueueGenericSendFromISR+0x3c>
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <xQueueGenericSendFromISR+0x40>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <xQueueGenericSendFromISR+0x42>
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f5c:	bf00      	nop
 8004f5e:	e7fe      	b.n	8004f5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d103      	bne.n	8004f6e <xQueueGenericSendFromISR+0x6a>
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <xQueueGenericSendFromISR+0x6e>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <xQueueGenericSendFromISR+0x70>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	623b      	str	r3, [r7, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f8e:	f002 f85b 	bl	8007048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f92:	f3ef 8211 	mrs	r2, BASEPRI
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	61fa      	str	r2, [r7, #28]
 8004fa8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004faa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d302      	bcc.n	8004fc0 <xQueueGenericSendFromISR+0xbc>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d12f      	bne.n	8005020 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fd6:	f000 f9c0 	bl	800535a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d112      	bne.n	800500a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d016      	beq.n	800501a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	3324      	adds	r3, #36	; 0x24
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 ff77 	bl	8005ee4 <xTaskRemoveFromEventList>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00e      	beq.n	800501a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e007      	b.n	800501a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800500a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800500e:	3301      	adds	r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	b25a      	sxtb	r2, r3
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800501a:	2301      	movs	r3, #1
 800501c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800501e:	e001      	b.n	8005024 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005020:	2300      	movs	r3, #0
 8005022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800502e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005032:	4618      	mov	r0, r3
 8005034:	3740      	adds	r7, #64	; 0x40
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b08e      	sub	sp, #56	; 0x38
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	623b      	str	r3, [r7, #32]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <xQueueGiveFromISR+0x48>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	61fb      	str	r3, [r7, #28]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <xQueueGiveFromISR+0x58>
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <xQueueGiveFromISR+0x5c>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <xQueueGiveFromISR+0x5e>
 8005096:	2300      	movs	r3, #0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	61bb      	str	r3, [r7, #24]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050b2:	f001 ffc9 	bl	8007048 <vPortValidateInterruptPriority>
	__asm volatile
 80050b6:	f3ef 8211 	mrs	r2, BASEPRI
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	617a      	str	r2, [r7, #20]
 80050cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80050ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050de:	429a      	cmp	r2, r3
 80050e0:	d22b      	bcs.n	800513a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d112      	bne.n	8005124 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d016      	beq.n	8005134 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	3324      	adds	r3, #36	; 0x24
 800510a:	4618      	mov	r0, r3
 800510c:	f000 feea 	bl	8005ee4 <xTaskRemoveFromEventList>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00e      	beq.n	8005134 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	e007      	b.n	8005134 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005128:	3301      	adds	r3, #1
 800512a:	b2db      	uxtb	r3, r3
 800512c:	b25a      	sxtb	r2, r3
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005134:	2301      	movs	r3, #1
 8005136:	637b      	str	r3, [r7, #52]	; 0x34
 8005138:	e001      	b.n	800513e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800513a:	2300      	movs	r3, #0
 800513c:	637b      	str	r3, [r7, #52]	; 0x34
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f383 8811 	msr	BASEPRI, r3
}
 8005148:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800514a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800514c:	4618      	mov	r0, r3
 800514e:	3738      	adds	r7, #56	; 0x38
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08c      	sub	sp, #48	; 0x30
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005160:	2300      	movs	r3, #0
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10a      	bne.n	8005184 <xQueueReceive+0x30>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	623b      	str	r3, [r7, #32]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <xQueueReceive+0x3e>
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <xQueueReceive+0x42>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <xQueueReceive+0x44>
 8005196:	2300      	movs	r3, #0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <xQueueReceive+0x5e>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	61fb      	str	r3, [r7, #28]
}
 80051ae:	bf00      	nop
 80051b0:	e7fe      	b.n	80051b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051b2:	f001 f855 	bl	8006260 <xTaskGetSchedulerState>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <xQueueReceive+0x6e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <xQueueReceive+0x72>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <xQueueReceive+0x74>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xQueueReceive+0x8e>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	61bb      	str	r3, [r7, #24]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051e2:	f001 fe4f 	bl	8006e84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01f      	beq.n	8005232 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051f2:	68b9      	ldr	r1, [r7, #8]
 80051f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051f6:	f000 f91a 	bl	800542e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	1e5a      	subs	r2, r3, #1
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00f      	beq.n	800522a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	3310      	adds	r3, #16
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fe68 	bl	8005ee4 <xTaskRemoveFromEventList>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800521a:	4b3d      	ldr	r3, [pc, #244]	; (8005310 <xQueueReceive+0x1bc>)
 800521c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800522a:	f001 fe5b 	bl	8006ee4 <vPortExitCritical>
				return pdPASS;
 800522e:	2301      	movs	r3, #1
 8005230:	e069      	b.n	8005306 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d103      	bne.n	8005240 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005238:	f001 fe54 	bl	8006ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800523c:	2300      	movs	r3, #0
 800523e:	e062      	b.n	8005306 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005246:	f107 0310 	add.w	r3, r7, #16
 800524a:	4618      	mov	r0, r3
 800524c:	f000 feae 	bl	8005fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005254:	f001 fe46 	bl	8006ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005258:	f000 fc20 	bl	8005a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800525c:	f001 fe12 	bl	8006e84 <vPortEnterCritical>
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005266:	b25b      	sxtb	r3, r3
 8005268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526c:	d103      	bne.n	8005276 <xQueueReceive+0x122>
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800527c:	b25b      	sxtb	r3, r3
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	d103      	bne.n	800528c <xQueueReceive+0x138>
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800528c:	f001 fe2a 	bl	8006ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005290:	1d3a      	adds	r2, r7, #4
 8005292:	f107 0310 	add.w	r3, r7, #16
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fe9d 	bl	8005fd8 <xTaskCheckForTimeOut>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d123      	bne.n	80052ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a6:	f000 f93a 	bl	800551e <prvIsQueueEmpty>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d017      	beq.n	80052e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	3324      	adds	r3, #36	; 0x24
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fdc3 	bl	8005e44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c0:	f000 f8db 	bl	800547a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052c4:	f000 fbf8 	bl	8005ab8 <xTaskResumeAll>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d189      	bne.n	80051e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80052ce:	4b10      	ldr	r3, [pc, #64]	; (8005310 <xQueueReceive+0x1bc>)
 80052d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	e780      	b.n	80051e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e2:	f000 f8ca 	bl	800547a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052e6:	f000 fbe7 	bl	8005ab8 <xTaskResumeAll>
 80052ea:	e77a      	b.n	80051e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ee:	f000 f8c4 	bl	800547a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052f2:	f000 fbe1 	bl	8005ab8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052f8:	f000 f911 	bl	800551e <prvIsQueueEmpty>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f43f af6f 	beq.w	80051e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005306:	4618      	mov	r0, r3
 8005308:	3730      	adds	r7, #48	; 0x30
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <vQueueDelete+0x28>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60bb      	str	r3, [r7, #8]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f947 	bl	80055d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f001 ff87 	bl	8007260 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10d      	bne.n	8005394 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d14d      	bne.n	800541c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4618      	mov	r0, r3
 8005386:	f000 ff89 	bl	800629c <xTaskPriorityDisinherit>
 800538a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	609a      	str	r2, [r3, #8]
 8005392:	e043      	b.n	800541c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d119      	bne.n	80053ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6858      	ldr	r0, [r3, #4]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	461a      	mov	r2, r3
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	f002 f89d 	bl	80074e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	441a      	add	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d32b      	bcc.n	800541c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	605a      	str	r2, [r3, #4]
 80053cc:	e026      	b.n	800541c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68d8      	ldr	r0, [r3, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	461a      	mov	r2, r3
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	f002 f883 	bl	80074e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	425b      	negs	r3, r3
 80053e8:	441a      	add	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d207      	bcs.n	800540a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	425b      	negs	r3, r3
 8005404:	441a      	add	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d105      	bne.n	800541c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	3b01      	subs	r3, #1
 800541a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005424:	697b      	ldr	r3, [r7, #20]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d018      	beq.n	8005472 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	441a      	add	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	429a      	cmp	r2, r3
 8005458:	d303      	bcc.n	8005462 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68d9      	ldr	r1, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	461a      	mov	r2, r3
 800546c:	6838      	ldr	r0, [r7, #0]
 800546e:	f002 f839 	bl	80074e4 <memcpy>
	}
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005482:	f001 fcff 	bl	8006e84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800548c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800548e:	e011      	b.n	80054b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	2b00      	cmp	r3, #0
 8005496:	d012      	beq.n	80054be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3324      	adds	r3, #36	; 0x24
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fd21 	bl	8005ee4 <xTaskRemoveFromEventList>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054a8:	f000 fdf8 	bl	800609c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	dce9      	bgt.n	8005490 <prvUnlockQueue+0x16>
 80054bc:	e000      	b.n	80054c0 <prvUnlockQueue+0x46>
					break;
 80054be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	22ff      	movs	r2, #255	; 0xff
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054c8:	f001 fd0c 	bl	8006ee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054cc:	f001 fcda 	bl	8006e84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054d8:	e011      	b.n	80054fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d012      	beq.n	8005508 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3310      	adds	r3, #16
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fcfc 	bl	8005ee4 <xTaskRemoveFromEventList>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80054f2:	f000 fdd3 	bl	800609c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80054f6:	7bbb      	ldrb	r3, [r7, #14]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005502:	2b00      	cmp	r3, #0
 8005504:	dce9      	bgt.n	80054da <prvUnlockQueue+0x60>
 8005506:	e000      	b.n	800550a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005508:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	22ff      	movs	r2, #255	; 0xff
 800550e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005512:	f001 fce7 	bl	8006ee4 <vPortExitCritical>
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005526:	f001 fcad 	bl	8006e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005532:	2301      	movs	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e001      	b.n	800553c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800553c:	f001 fcd2 	bl	8006ee4 <vPortExitCritical>

	return xReturn;
 8005540:	68fb      	ldr	r3, [r7, #12]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005552:	f001 fc97 	bl	8006e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555e:	429a      	cmp	r2, r3
 8005560:	d102      	bne.n	8005568 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005562:	2301      	movs	r3, #1
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e001      	b.n	800556c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800556c:	f001 fcba 	bl	8006ee4 <vPortExitCritical>

	return xReturn;
 8005570:	68fb      	ldr	r3, [r7, #12]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e014      	b.n	80055b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800558c:	4a0f      	ldr	r2, [pc, #60]	; (80055cc <vQueueAddToRegistry+0x50>)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10b      	bne.n	80055b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005598:	490c      	ldr	r1, [pc, #48]	; (80055cc <vQueueAddToRegistry+0x50>)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055a2:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <vQueueAddToRegistry+0x50>)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4413      	add	r3, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055ae:	e006      	b.n	80055be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3301      	adds	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b07      	cmp	r3, #7
 80055ba:	d9e7      	bls.n	800558c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	20000860 	.word	0x20000860

080055d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e016      	b.n	800560c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <vQueueUnregisterQueue+0x50>)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d10b      	bne.n	8005606 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80055ee:	4a0c      	ldr	r2, [pc, #48]	; (8005620 <vQueueUnregisterQueue+0x50>)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2100      	movs	r1, #0
 80055f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80055f8:	4a09      	ldr	r2, [pc, #36]	; (8005620 <vQueueUnregisterQueue+0x50>)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	4413      	add	r3, r2
 8005600:	2200      	movs	r2, #0
 8005602:	605a      	str	r2, [r3, #4]
				break;
 8005604:	e006      	b.n	8005614 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3301      	adds	r3, #1
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b07      	cmp	r3, #7
 8005610:	d9e5      	bls.n	80055de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	20000860 	.word	0x20000860

08005624 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005634:	f001 fc26 	bl	8006e84 <vPortEnterCritical>
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800563e:	b25b      	sxtb	r3, r3
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d103      	bne.n	800564e <vQueueWaitForMessageRestricted+0x2a>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005654:	b25b      	sxtb	r3, r3
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565a:	d103      	bne.n	8005664 <vQueueWaitForMessageRestricted+0x40>
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005664:	f001 fc3e 	bl	8006ee4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	3324      	adds	r3, #36	; 0x24
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fc07 	bl	8005e8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800567e:	6978      	ldr	r0, [r7, #20]
 8005680:	f7ff fefb 	bl	800547a <prvUnlockQueue>
	}
 8005684:	bf00      	nop
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08e      	sub	sp, #56	; 0x38
 8005690:	af04      	add	r7, sp, #16
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800569a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	623b      	str	r3, [r7, #32]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61fb      	str	r3, [r7, #28]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056d2:	235c      	movs	r3, #92	; 0x5c
 80056d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b5c      	cmp	r3, #92	; 0x5c
 80056da:	d00a      	beq.n	80056f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	61bb      	str	r3, [r7, #24]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01e      	beq.n	8005738 <xTaskCreateStatic+0xac>
 80056fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01b      	beq.n	8005738 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005708:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	2202      	movs	r2, #2
 800570e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005712:	2300      	movs	r3, #0
 8005714:	9303      	str	r3, [sp, #12]
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	9302      	str	r3, [sp, #8]
 800571a:	f107 0314 	add.w	r3, r7, #20
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f850 	bl	80057d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005732:	f000 f8dd 	bl	80058f0 <prvAddNewTaskToReadyList>
 8005736:	e001      	b.n	800573c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800573c:	697b      	ldr	r3, [r7, #20]
	}
 800573e:	4618      	mov	r0, r3
 8005740:	3728      	adds	r7, #40	; 0x28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005746:	b580      	push	{r7, lr}
 8005748:	b08c      	sub	sp, #48	; 0x30
 800574a:	af04      	add	r7, sp, #16
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	603b      	str	r3, [r7, #0]
 8005752:	4613      	mov	r3, r2
 8005754:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4618      	mov	r0, r3
 800575c:	f001 fcb4 	bl	80070c8 <pvPortMalloc>
 8005760:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00e      	beq.n	8005786 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005768:	205c      	movs	r0, #92	; 0x5c
 800576a:	f001 fcad 	bl	80070c8 <pvPortMalloc>
 800576e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
 800577c:	e005      	b.n	800578a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800577e:	6978      	ldr	r0, [r7, #20]
 8005780:	f001 fd6e 	bl	8007260 <vPortFree>
 8005784:	e001      	b.n	800578a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d017      	beq.n	80057c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005798:	88fa      	ldrh	r2, [r7, #6]
 800579a:	2300      	movs	r3, #0
 800579c:	9303      	str	r3, [sp, #12]
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	9302      	str	r3, [sp, #8]
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f80e 	bl	80057d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057b4:	69f8      	ldr	r0, [r7, #28]
 80057b6:	f000 f89b 	bl	80058f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057ba:	2301      	movs	r3, #1
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e002      	b.n	80057c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057c0:	f04f 33ff 	mov.w	r3, #4294967295
 80057c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057c6:	69bb      	ldr	r3, [r7, #24]
	}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3720      	adds	r7, #32
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	461a      	mov	r2, r3
 80057e8:	21a5      	movs	r1, #165	; 0xa5
 80057ea:	f001 fe89 	bl	8007500 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057f8:	3b01      	subs	r3, #1
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f023 0307 	bic.w	r3, r3, #7
 8005806:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	617b      	str	r3, [r7, #20]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d01f      	beq.n	800586e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	e012      	b.n	800585a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	7819      	ldrb	r1, [r3, #0]
 800583c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	3334      	adds	r3, #52	; 0x34
 8005844:	460a      	mov	r2, r1
 8005846:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d006      	beq.n	8005862 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	3301      	adds	r3, #1
 8005858:	61fb      	str	r3, [r7, #28]
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	2b0f      	cmp	r3, #15
 800585e:	d9e9      	bls.n	8005834 <prvInitialiseNewTask+0x64>
 8005860:	e000      	b.n	8005864 <prvInitialiseNewTask+0x94>
			{
				break;
 8005862:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800586c:	e003      	b.n	8005876 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	2b37      	cmp	r3, #55	; 0x37
 800587a:	d901      	bls.n	8005880 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800587c:	2337      	movs	r3, #55	; 0x37
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005884:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800588a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	2200      	movs	r2, #0
 8005890:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	3304      	adds	r3, #4
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fffa 	bl	8004890 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	3318      	adds	r3, #24
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fff5 	bl	8004890 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	2200      	movs	r2, #0
 80058c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	69b8      	ldr	r0, [r7, #24]
 80058d0:	f001 f9ae 	bl	8006c30 <pxPortInitialiseStack>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058e6:	bf00      	nop
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058f8:	f001 fac4 	bl	8006e84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058fc:	4b2d      	ldr	r3, [pc, #180]	; (80059b4 <prvAddNewTaskToReadyList+0xc4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3301      	adds	r3, #1
 8005902:	4a2c      	ldr	r2, [pc, #176]	; (80059b4 <prvAddNewTaskToReadyList+0xc4>)
 8005904:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005906:	4b2c      	ldr	r3, [pc, #176]	; (80059b8 <prvAddNewTaskToReadyList+0xc8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d109      	bne.n	8005922 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800590e:	4a2a      	ldr	r2, [pc, #168]	; (80059b8 <prvAddNewTaskToReadyList+0xc8>)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005914:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <prvAddNewTaskToReadyList+0xc4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d110      	bne.n	800593e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800591c:	f000 fbe2 	bl	80060e4 <prvInitialiseTaskLists>
 8005920:	e00d      	b.n	800593e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005922:	4b26      	ldr	r3, [pc, #152]	; (80059bc <prvAddNewTaskToReadyList+0xcc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800592a:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <prvAddNewTaskToReadyList+0xc8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	429a      	cmp	r2, r3
 8005936:	d802      	bhi.n	800593e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <prvAddNewTaskToReadyList+0xc8>)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800593e:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <prvAddNewTaskToReadyList+0xd0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3301      	adds	r3, #1
 8005944:	4a1e      	ldr	r2, [pc, #120]	; (80059c0 <prvAddNewTaskToReadyList+0xd0>)
 8005946:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005948:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <prvAddNewTaskToReadyList+0xd0>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	4b1b      	ldr	r3, [pc, #108]	; (80059c4 <prvAddNewTaskToReadyList+0xd4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d903      	bls.n	8005964 <prvAddNewTaskToReadyList+0x74>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4a18      	ldr	r2, [pc, #96]	; (80059c4 <prvAddNewTaskToReadyList+0xd4>)
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4a15      	ldr	r2, [pc, #84]	; (80059c8 <prvAddNewTaskToReadyList+0xd8>)
 8005972:	441a      	add	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3304      	adds	r3, #4
 8005978:	4619      	mov	r1, r3
 800597a:	4610      	mov	r0, r2
 800597c:	f7fe ff95 	bl	80048aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005980:	f001 fab0 	bl	8006ee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <prvAddNewTaskToReadyList+0xcc>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00e      	beq.n	80059aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <prvAddNewTaskToReadyList+0xc8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	429a      	cmp	r2, r3
 8005998:	d207      	bcs.n	80059aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800599a:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <prvAddNewTaskToReadyList+0xdc>)
 800599c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059aa:	bf00      	nop
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000d74 	.word	0x20000d74
 80059b8:	200008a0 	.word	0x200008a0
 80059bc:	20000d80 	.word	0x20000d80
 80059c0:	20000d90 	.word	0x20000d90
 80059c4:	20000d7c 	.word	0x20000d7c
 80059c8:	200008a4 	.word	0x200008a4
 80059cc:	e000ed04 	.word	0xe000ed04

080059d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059de:	463a      	mov	r2, r7
 80059e0:	1d39      	adds	r1, r7, #4
 80059e2:	f107 0308 	add.w	r3, r7, #8
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe fefe 	bl	80047e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	9202      	str	r2, [sp, #8]
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	2300      	movs	r3, #0
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	2300      	movs	r3, #0
 80059fc:	460a      	mov	r2, r1
 80059fe:	4921      	ldr	r1, [pc, #132]	; (8005a84 <vTaskStartScheduler+0xb4>)
 8005a00:	4821      	ldr	r0, [pc, #132]	; (8005a88 <vTaskStartScheduler+0xb8>)
 8005a02:	f7ff fe43 	bl	800568c <xTaskCreateStatic>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4a20      	ldr	r2, [pc, #128]	; (8005a8c <vTaskStartScheduler+0xbc>)
 8005a0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a0c:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <vTaskStartScheduler+0xbc>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a14:	2301      	movs	r3, #1
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e001      	b.n	8005a1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d102      	bne.n	8005a2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a24:	f000 fcfc 	bl	8006420 <xTimerCreateTimerTask>
 8005a28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d116      	bne.n	8005a5e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	613b      	str	r3, [r7, #16]
}
 8005a42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a44:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <vTaskStartScheduler+0xc0>)
 8005a46:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a4c:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <vTaskStartScheduler+0xc4>)
 8005a4e:	2201      	movs	r2, #1
 8005a50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a52:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <vTaskStartScheduler+0xc8>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a58:	f001 f972 	bl	8006d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a5c:	e00e      	b.n	8005a7c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d10a      	bne.n	8005a7c <vTaskStartScheduler+0xac>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	60fb      	str	r3, [r7, #12]
}
 8005a78:	bf00      	nop
 8005a7a:	e7fe      	b.n	8005a7a <vTaskStartScheduler+0xaa>
}
 8005a7c:	bf00      	nop
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	08007574 	.word	0x08007574
 8005a88:	080060b5 	.word	0x080060b5
 8005a8c:	20000d98 	.word	0x20000d98
 8005a90:	20000d94 	.word	0x20000d94
 8005a94:	20000d80 	.word	0x20000d80
 8005a98:	20000d78 	.word	0x20000d78

08005a9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <vTaskSuspendAll+0x18>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	4a03      	ldr	r2, [pc, #12]	; (8005ab4 <vTaskSuspendAll+0x18>)
 8005aa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005aaa:	bf00      	nop
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	20000d9c 	.word	0x20000d9c

08005ab8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ac6:	4b42      	ldr	r3, [pc, #264]	; (8005bd0 <xTaskResumeAll+0x118>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	603b      	str	r3, [r7, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	e7fe      	b.n	8005ae2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ae4:	f001 f9ce 	bl	8006e84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ae8:	4b39      	ldr	r3, [pc, #228]	; (8005bd0 <xTaskResumeAll+0x118>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	4a38      	ldr	r2, [pc, #224]	; (8005bd0 <xTaskResumeAll+0x118>)
 8005af0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005af2:	4b37      	ldr	r3, [pc, #220]	; (8005bd0 <xTaskResumeAll+0x118>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d162      	bne.n	8005bc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005afa:	4b36      	ldr	r3, [pc, #216]	; (8005bd4 <xTaskResumeAll+0x11c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d05e      	beq.n	8005bc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b02:	e02f      	b.n	8005b64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b04:	4b34      	ldr	r3, [pc, #208]	; (8005bd8 <xTaskResumeAll+0x120>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3318      	adds	r3, #24
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe ff27 	bl	8004964 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe ff22 	bl	8004964 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	4b2d      	ldr	r3, [pc, #180]	; (8005bdc <xTaskResumeAll+0x124>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d903      	bls.n	8005b34 <xTaskResumeAll+0x7c>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	4a2a      	ldr	r2, [pc, #168]	; (8005bdc <xTaskResumeAll+0x124>)
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4a27      	ldr	r2, [pc, #156]	; (8005be0 <xTaskResumeAll+0x128>)
 8005b42:	441a      	add	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f7fe fead 	bl	80048aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <xTaskResumeAll+0x12c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d302      	bcc.n	8005b64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005b5e:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <xTaskResumeAll+0x130>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b64:	4b1c      	ldr	r3, [pc, #112]	; (8005bd8 <xTaskResumeAll+0x120>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1cb      	bne.n	8005b04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b72:	f000 fb55 	bl	8006220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b76:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <xTaskResumeAll+0x134>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d010      	beq.n	8005ba4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b82:	f000 f847 	bl	8005c14 <xTaskIncrementTick>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b8c:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <xTaskResumeAll+0x130>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f1      	bne.n	8005b82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <xTaskResumeAll+0x134>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ba4:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <xTaskResumeAll+0x130>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d009      	beq.n	8005bc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bac:	2301      	movs	r3, #1
 8005bae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <xTaskResumeAll+0x138>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bc0:	f001 f990 	bl	8006ee4 <vPortExitCritical>

	return xAlreadyYielded;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000d9c 	.word	0x20000d9c
 8005bd4:	20000d74 	.word	0x20000d74
 8005bd8:	20000d34 	.word	0x20000d34
 8005bdc:	20000d7c 	.word	0x20000d7c
 8005be0:	200008a4 	.word	0x200008a4
 8005be4:	200008a0 	.word	0x200008a0
 8005be8:	20000d88 	.word	0x20000d88
 8005bec:	20000d84 	.word	0x20000d84
 8005bf0:	e000ed04 	.word	0xe000ed04

08005bf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <xTaskGetTickCount+0x1c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c00:	687b      	ldr	r3, [r7, #4]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000d78 	.word	0x20000d78

08005c14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c1e:	4b4f      	ldr	r3, [pc, #316]	; (8005d5c <xTaskIncrementTick+0x148>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f040 808f 	bne.w	8005d46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c28:	4b4d      	ldr	r3, [pc, #308]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c30:	4a4b      	ldr	r2, [pc, #300]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d120      	bne.n	8005c7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c3c:	4b49      	ldr	r3, [pc, #292]	; (8005d64 <xTaskIncrementTick+0x150>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <xTaskIncrementTick+0x48>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	603b      	str	r3, [r7, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xTaskIncrementTick+0x46>
 8005c5c:	4b41      	ldr	r3, [pc, #260]	; (8005d64 <xTaskIncrementTick+0x150>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	4b41      	ldr	r3, [pc, #260]	; (8005d68 <xTaskIncrementTick+0x154>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a3f      	ldr	r2, [pc, #252]	; (8005d64 <xTaskIncrementTick+0x150>)
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	4a3f      	ldr	r2, [pc, #252]	; (8005d68 <xTaskIncrementTick+0x154>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	4b3e      	ldr	r3, [pc, #248]	; (8005d6c <xTaskIncrementTick+0x158>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3301      	adds	r3, #1
 8005c76:	4a3d      	ldr	r2, [pc, #244]	; (8005d6c <xTaskIncrementTick+0x158>)
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	f000 fad1 	bl	8006220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c7e:	4b3c      	ldr	r3, [pc, #240]	; (8005d70 <xTaskIncrementTick+0x15c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d349      	bcc.n	8005d1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c88:	4b36      	ldr	r3, [pc, #216]	; (8005d64 <xTaskIncrementTick+0x150>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c92:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <xTaskIncrementTick+0x15c>)
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	601a      	str	r2, [r3, #0]
					break;
 8005c9a:	e03f      	b.n	8005d1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9c:	4b31      	ldr	r3, [pc, #196]	; (8005d64 <xTaskIncrementTick+0x150>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d203      	bcs.n	8005cbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cb4:	4a2e      	ldr	r2, [pc, #184]	; (8005d70 <xTaskIncrementTick+0x15c>)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cba:	e02f      	b.n	8005d1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe fe4f 	bl	8004964 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	3318      	adds	r3, #24
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fe fe46 	bl	8004964 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cdc:	4b25      	ldr	r3, [pc, #148]	; (8005d74 <xTaskIncrementTick+0x160>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d903      	bls.n	8005cec <xTaskIncrementTick+0xd8>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	4a22      	ldr	r2, [pc, #136]	; (8005d74 <xTaskIncrementTick+0x160>)
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4a1f      	ldr	r2, [pc, #124]	; (8005d78 <xTaskIncrementTick+0x164>)
 8005cfa:	441a      	add	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4619      	mov	r1, r3
 8005d02:	4610      	mov	r0, r2
 8005d04:	f7fe fdd1 	bl	80048aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <xTaskIncrementTick+0x168>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d3b8      	bcc.n	8005c88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d1a:	e7b5      	b.n	8005c88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d1c:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <xTaskIncrementTick+0x168>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d22:	4915      	ldr	r1, [pc, #84]	; (8005d78 <xTaskIncrementTick+0x164>)
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d901      	bls.n	8005d38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d38:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <xTaskIncrementTick+0x16c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d40:	2301      	movs	r3, #1
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	e004      	b.n	8005d50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d46:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <xTaskIncrementTick+0x170>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <xTaskIncrementTick+0x170>)
 8005d4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d50:	697b      	ldr	r3, [r7, #20]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000d9c 	.word	0x20000d9c
 8005d60:	20000d78 	.word	0x20000d78
 8005d64:	20000d2c 	.word	0x20000d2c
 8005d68:	20000d30 	.word	0x20000d30
 8005d6c:	20000d8c 	.word	0x20000d8c
 8005d70:	20000d94 	.word	0x20000d94
 8005d74:	20000d7c 	.word	0x20000d7c
 8005d78:	200008a4 	.word	0x200008a4
 8005d7c:	200008a0 	.word	0x200008a0
 8005d80:	20000d88 	.word	0x20000d88
 8005d84:	20000d84 	.word	0x20000d84

08005d88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d8e:	4b28      	ldr	r3, [pc, #160]	; (8005e30 <vTaskSwitchContext+0xa8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d96:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <vTaskSwitchContext+0xac>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d9c:	e041      	b.n	8005e22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005d9e:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <vTaskSwitchContext+0xac>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da4:	4b24      	ldr	r3, [pc, #144]	; (8005e38 <vTaskSwitchContext+0xb0>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	e010      	b.n	8005dce <vTaskSwitchContext+0x46>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	607b      	str	r3, [r7, #4]
}
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <vTaskSwitchContext+0x3e>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	491b      	ldr	r1, [pc, #108]	; (8005e3c <vTaskSwitchContext+0xb4>)
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0e4      	beq.n	8005dac <vTaskSwitchContext+0x24>
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <vTaskSwitchContext+0xb4>)
 8005dee:	4413      	add	r3, r2
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	605a      	str	r2, [r3, #4]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	3308      	adds	r3, #8
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d104      	bne.n	8005e12 <vTaskSwitchContext+0x8a>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	605a      	str	r2, [r3, #4]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <vTaskSwitchContext+0xb8>)
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	4a06      	ldr	r2, [pc, #24]	; (8005e38 <vTaskSwitchContext+0xb0>)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6013      	str	r3, [r2, #0]
}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000d9c 	.word	0x20000d9c
 8005e34:	20000d88 	.word	0x20000d88
 8005e38:	20000d7c 	.word	0x20000d7c
 8005e3c:	200008a4 	.word	0x200008a4
 8005e40:	200008a0 	.word	0x200008a0

08005e44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	60fb      	str	r3, [r7, #12]
}
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <vTaskPlaceOnEventList+0x44>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3318      	adds	r3, #24
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fe fd3d 	bl	80048f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e78:	2101      	movs	r1, #1
 8005e7a:	6838      	ldr	r0, [r7, #0]
 8005e7c:	f000 fa7c 	bl	8006378 <prvAddCurrentTaskToDelayedList>
}
 8005e80:	bf00      	nop
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	200008a0 	.word	0x200008a0

08005e8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	617b      	str	r3, [r7, #20]
}
 8005eb0:	bf00      	nop
 8005eb2:	e7fe      	b.n	8005eb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3318      	adds	r3, #24
 8005eba:	4619      	mov	r1, r3
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f7fe fcf4 	bl	80048aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ecc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	68b8      	ldr	r0, [r7, #8]
 8005ed2:	f000 fa51 	bl	8006378 <prvAddCurrentTaskToDelayedList>
	}
 8005ed6:	bf00      	nop
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	200008a0 	.word	0x200008a0

08005ee4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	60fb      	str	r3, [r7, #12]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	3318      	adds	r3, #24
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fe fd25 	bl	8004964 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f1a:	4b1e      	ldr	r3, [pc, #120]	; (8005f94 <xTaskRemoveFromEventList+0xb0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d11d      	bne.n	8005f5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	3304      	adds	r3, #4
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fe fd1c 	bl	8004964 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	4b19      	ldr	r3, [pc, #100]	; (8005f98 <xTaskRemoveFromEventList+0xb4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d903      	bls.n	8005f40 <xTaskRemoveFromEventList+0x5c>
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	4a16      	ldr	r2, [pc, #88]	; (8005f98 <xTaskRemoveFromEventList+0xb4>)
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4a13      	ldr	r2, [pc, #76]	; (8005f9c <xTaskRemoveFromEventList+0xb8>)
 8005f4e:	441a      	add	r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	3304      	adds	r3, #4
 8005f54:	4619      	mov	r1, r3
 8005f56:	4610      	mov	r0, r2
 8005f58:	f7fe fca7 	bl	80048aa <vListInsertEnd>
 8005f5c:	e005      	b.n	8005f6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	3318      	adds	r3, #24
 8005f62:	4619      	mov	r1, r3
 8005f64:	480e      	ldr	r0, [pc, #56]	; (8005fa0 <xTaskRemoveFromEventList+0xbc>)
 8005f66:	f7fe fca0 	bl	80048aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <xTaskRemoveFromEventList+0xc0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d905      	bls.n	8005f84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	; (8005fa8 <xTaskRemoveFromEventList+0xc4>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	e001      	b.n	8005f88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f88:	697b      	ldr	r3, [r7, #20]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000d9c 	.word	0x20000d9c
 8005f98:	20000d7c 	.word	0x20000d7c
 8005f9c:	200008a4 	.word	0x200008a4
 8005fa0:	20000d34 	.word	0x20000d34
 8005fa4:	200008a0 	.word	0x200008a0
 8005fa8:	20000d88 	.word	0x20000d88

08005fac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fb4:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <vTaskInternalSetTimeOutState+0x24>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <vTaskInternalSetTimeOutState+0x28>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	605a      	str	r2, [r3, #4]
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	20000d8c 	.word	0x20000d8c
 8005fd4:	20000d78 	.word	0x20000d78

08005fd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	613b      	str	r3, [r7, #16]
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	60fb      	str	r3, [r7, #12]
}
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800601a:	f000 ff33 	bl	8006e84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800601e:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <xTaskCheckForTimeOut+0xbc>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	d102      	bne.n	800603e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006038:	2300      	movs	r3, #0
 800603a:	61fb      	str	r3, [r7, #28]
 800603c:	e023      	b.n	8006086 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b15      	ldr	r3, [pc, #84]	; (8006098 <xTaskCheckForTimeOut+0xc0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d007      	beq.n	800605a <xTaskCheckForTimeOut+0x82>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	429a      	cmp	r2, r3
 8006052:	d302      	bcc.n	800605a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006054:	2301      	movs	r3, #1
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	e015      	b.n	8006086 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	429a      	cmp	r2, r3
 8006062:	d20b      	bcs.n	800607c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	1ad2      	subs	r2, r2, r3
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff ff9b 	bl	8005fac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	e004      	b.n	8006086 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006082:	2301      	movs	r3, #1
 8006084:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006086:	f000 ff2d 	bl	8006ee4 <vPortExitCritical>

	return xReturn;
 800608a:	69fb      	ldr	r3, [r7, #28]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3720      	adds	r7, #32
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000d78 	.word	0x20000d78
 8006098:	20000d8c 	.word	0x20000d8c

0800609c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060a0:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <vTaskMissedYield+0x14>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
}
 80060a6:	bf00      	nop
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000d88 	.word	0x20000d88

080060b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060bc:	f000 f852 	bl	8006164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060c0:	4b06      	ldr	r3, [pc, #24]	; (80060dc <prvIdleTask+0x28>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d9f9      	bls.n	80060bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <prvIdleTask+0x2c>)
 80060ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060d8:	e7f0      	b.n	80060bc <prvIdleTask+0x8>
 80060da:	bf00      	nop
 80060dc:	200008a4 	.word	0x200008a4
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060ea:	2300      	movs	r3, #0
 80060ec:	607b      	str	r3, [r7, #4]
 80060ee:	e00c      	b.n	800610a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4a12      	ldr	r2, [pc, #72]	; (8006144 <prvInitialiseTaskLists+0x60>)
 80060fc:	4413      	add	r3, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe fba6 	bl	8004850 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3301      	adds	r3, #1
 8006108:	607b      	str	r3, [r7, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b37      	cmp	r3, #55	; 0x37
 800610e:	d9ef      	bls.n	80060f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006110:	480d      	ldr	r0, [pc, #52]	; (8006148 <prvInitialiseTaskLists+0x64>)
 8006112:	f7fe fb9d 	bl	8004850 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006116:	480d      	ldr	r0, [pc, #52]	; (800614c <prvInitialiseTaskLists+0x68>)
 8006118:	f7fe fb9a 	bl	8004850 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800611c:	480c      	ldr	r0, [pc, #48]	; (8006150 <prvInitialiseTaskLists+0x6c>)
 800611e:	f7fe fb97 	bl	8004850 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006122:	480c      	ldr	r0, [pc, #48]	; (8006154 <prvInitialiseTaskLists+0x70>)
 8006124:	f7fe fb94 	bl	8004850 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006128:	480b      	ldr	r0, [pc, #44]	; (8006158 <prvInitialiseTaskLists+0x74>)
 800612a:	f7fe fb91 	bl	8004850 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <prvInitialiseTaskLists+0x78>)
 8006130:	4a05      	ldr	r2, [pc, #20]	; (8006148 <prvInitialiseTaskLists+0x64>)
 8006132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006134:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <prvInitialiseTaskLists+0x7c>)
 8006136:	4a05      	ldr	r2, [pc, #20]	; (800614c <prvInitialiseTaskLists+0x68>)
 8006138:	601a      	str	r2, [r3, #0]
}
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	200008a4 	.word	0x200008a4
 8006148:	20000d04 	.word	0x20000d04
 800614c:	20000d18 	.word	0x20000d18
 8006150:	20000d34 	.word	0x20000d34
 8006154:	20000d48 	.word	0x20000d48
 8006158:	20000d60 	.word	0x20000d60
 800615c:	20000d2c 	.word	0x20000d2c
 8006160:	20000d30 	.word	0x20000d30

08006164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800616a:	e019      	b.n	80061a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800616c:	f000 fe8a 	bl	8006e84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006170:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <prvCheckTasksWaitingTermination+0x50>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	4618      	mov	r0, r3
 800617e:	f7fe fbf1 	bl	8004964 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006182:	4b0d      	ldr	r3, [pc, #52]	; (80061b8 <prvCheckTasksWaitingTermination+0x54>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3b01      	subs	r3, #1
 8006188:	4a0b      	ldr	r2, [pc, #44]	; (80061b8 <prvCheckTasksWaitingTermination+0x54>)
 800618a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800618c:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <prvCheckTasksWaitingTermination+0x58>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3b01      	subs	r3, #1
 8006192:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <prvCheckTasksWaitingTermination+0x58>)
 8006194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006196:	f000 fea5 	bl	8006ee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f810 	bl	80061c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a0:	4b06      	ldr	r3, [pc, #24]	; (80061bc <prvCheckTasksWaitingTermination+0x58>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e1      	bne.n	800616c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000d48 	.word	0x20000d48
 80061b8:	20000d74 	.word	0x20000d74
 80061bc:	20000d5c 	.word	0x20000d5c

080061c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d108      	bne.n	80061e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f842 	bl	8007260 <vPortFree>
				vPortFree( pxTCB );
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 f83f 	bl	8007260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061e2:	e018      	b.n	8006216 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d103      	bne.n	80061f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 f836 	bl	8007260 <vPortFree>
	}
 80061f4:	e00f      	b.n	8006216 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d00a      	beq.n	8006216 <prvDeleteTCB+0x56>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	60fb      	str	r3, [r7, #12]
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <prvDeleteTCB+0x54>
	}
 8006216:	bf00      	nop
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <prvResetNextTaskUnblockTime+0x38>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006230:	4b0a      	ldr	r3, [pc, #40]	; (800625c <prvResetNextTaskUnblockTime+0x3c>)
 8006232:	f04f 32ff 	mov.w	r2, #4294967295
 8006236:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006238:	e008      	b.n	800624c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800623a:	4b07      	ldr	r3, [pc, #28]	; (8006258 <prvResetNextTaskUnblockTime+0x38>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	4a04      	ldr	r2, [pc, #16]	; (800625c <prvResetNextTaskUnblockTime+0x3c>)
 800624a:	6013      	str	r3, [r2, #0]
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	20000d2c 	.word	0x20000d2c
 800625c:	20000d94 	.word	0x20000d94

08006260 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <xTaskGetSchedulerState+0x34>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800626e:	2301      	movs	r3, #1
 8006270:	607b      	str	r3, [r7, #4]
 8006272:	e008      	b.n	8006286 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006274:	4b08      	ldr	r3, [pc, #32]	; (8006298 <xTaskGetSchedulerState+0x38>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800627c:	2302      	movs	r3, #2
 800627e:	607b      	str	r3, [r7, #4]
 8006280:	e001      	b.n	8006286 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006286:	687b      	ldr	r3, [r7, #4]
	}
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	20000d80 	.word	0x20000d80
 8006298:	20000d9c 	.word	0x20000d9c

0800629c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d056      	beq.n	8006360 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062b2:	4b2e      	ldr	r3, [pc, #184]	; (800636c <xTaskPriorityDisinherit+0xd0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d00a      	beq.n	80062d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	60fb      	str	r3, [r7, #12]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10a      	bne.n	80062f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	60bb      	str	r3, [r7, #8]
}
 80062ec:	bf00      	nop
 80062ee:	e7fe      	b.n	80062ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f4:	1e5a      	subs	r2, r3, #1
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006302:	429a      	cmp	r2, r3
 8006304:	d02c      	beq.n	8006360 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630a:	2b00      	cmp	r3, #0
 800630c:	d128      	bne.n	8006360 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	3304      	adds	r3, #4
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fb26 	bl	8004964 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <xTaskPriorityDisinherit+0xd4>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d903      	bls.n	8006340 <xTaskPriorityDisinherit+0xa4>
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4a0c      	ldr	r2, [pc, #48]	; (8006370 <xTaskPriorityDisinherit+0xd4>)
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4a09      	ldr	r2, [pc, #36]	; (8006374 <xTaskPriorityDisinherit+0xd8>)
 800634e:	441a      	add	r2, r3
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	3304      	adds	r3, #4
 8006354:	4619      	mov	r1, r3
 8006356:	4610      	mov	r0, r2
 8006358:	f7fe faa7 	bl	80048aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800635c:	2301      	movs	r3, #1
 800635e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006360:	697b      	ldr	r3, [r7, #20]
	}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	200008a0 	.word	0x200008a0
 8006370:	20000d7c 	.word	0x20000d7c
 8006374:	200008a4 	.word	0x200008a4

08006378 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006382:	4b21      	ldr	r3, [pc, #132]	; (8006408 <prvAddCurrentTaskToDelayedList+0x90>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006388:	4b20      	ldr	r3, [pc, #128]	; (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3304      	adds	r3, #4
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe fae8 	bl	8004964 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639a:	d10a      	bne.n	80063b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063a2:	4b1a      	ldr	r3, [pc, #104]	; (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4819      	ldr	r0, [pc, #100]	; (8006410 <prvAddCurrentTaskToDelayedList+0x98>)
 80063ac:	f7fe fa7d 	bl	80048aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063b0:	e026      	b.n	8006400 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4413      	add	r3, r2
 80063b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063ba:	4b14      	ldr	r3, [pc, #80]	; (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d209      	bcs.n	80063de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ca:	4b12      	ldr	r3, [pc, #72]	; (8006414 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b0f      	ldr	r3, [pc, #60]	; (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f7fe fa8b 	bl	80048f2 <vListInsert>
}
 80063dc:	e010      	b.n	8006400 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063de:	4b0e      	ldr	r3, [pc, #56]	; (8006418 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b0a      	ldr	r3, [pc, #40]	; (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f7fe fa81 	bl	80048f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <prvAddCurrentTaskToDelayedList+0xa4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d202      	bcs.n	8006400 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80063fa:	4a08      	ldr	r2, [pc, #32]	; (800641c <prvAddCurrentTaskToDelayedList+0xa4>)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	6013      	str	r3, [r2, #0]
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20000d78 	.word	0x20000d78
 800640c:	200008a0 	.word	0x200008a0
 8006410:	20000d60 	.word	0x20000d60
 8006414:	20000d30 	.word	0x20000d30
 8006418:	20000d2c 	.word	0x20000d2c
 800641c:	20000d94 	.word	0x20000d94

08006420 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	; 0x28
 8006424:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800642a:	f000 fba1 	bl	8006b70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800642e:	4b1c      	ldr	r3, [pc, #112]	; (80064a0 <xTimerCreateTimerTask+0x80>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d021      	beq.n	800647a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800643e:	1d3a      	adds	r2, r7, #4
 8006440:	f107 0108 	add.w	r1, r7, #8
 8006444:	f107 030c 	add.w	r3, r7, #12
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe f9e7 	bl	800481c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	9202      	str	r2, [sp, #8]
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	2302      	movs	r3, #2
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	2300      	movs	r3, #0
 800645e:	460a      	mov	r2, r1
 8006460:	4910      	ldr	r1, [pc, #64]	; (80064a4 <xTimerCreateTimerTask+0x84>)
 8006462:	4811      	ldr	r0, [pc, #68]	; (80064a8 <xTimerCreateTimerTask+0x88>)
 8006464:	f7ff f912 	bl	800568c <xTaskCreateStatic>
 8006468:	4603      	mov	r3, r0
 800646a:	4a10      	ldr	r2, [pc, #64]	; (80064ac <xTimerCreateTimerTask+0x8c>)
 800646c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800646e:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <xTimerCreateTimerTask+0x8c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006476:	2301      	movs	r3, #1
 8006478:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006496:	697b      	ldr	r3, [r7, #20]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20000dd0 	.word	0x20000dd0
 80064a4:	0800757c 	.word	0x0800757c
 80064a8:	08006719 	.word	0x08006719
 80064ac:	20000dd4 	.word	0x20000dd4

080064b0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80064be:	202c      	movs	r0, #44	; 0x2c
 80064c0:	f000 fe02 	bl	80070c8 <pvPortMalloc>
 80064c4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00d      	beq.n	80064e8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 f843 	bl	800656e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80064e8:	697b      	ldr	r3, [r7, #20]
	}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b08a      	sub	sp, #40	; 0x28
 80064f6:	af02      	add	r7, sp, #8
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
 80064fe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006500:	232c      	movs	r3, #44	; 0x2c
 8006502:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b2c      	cmp	r3, #44	; 0x2c
 8006508:	d00a      	beq.n	8006520 <xTimerCreateStatic+0x2e>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	61bb      	str	r3, [r7, #24]
}
 800651c:	bf00      	nop
 800651e:	e7fe      	b.n	800651e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006520:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <xTimerCreateStatic+0x4c>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	617b      	str	r3, [r7, #20]
}
 800653a:	bf00      	nop
 800653c:	e7fe      	b.n	800653c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00d      	beq.n	8006564 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f805 	bl	800656e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006564:	69fb      	ldr	r3, [r7, #28]
	}
 8006566:	4618      	mov	r0, r3
 8006568:	3720      	adds	r7, #32
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b086      	sub	sp, #24
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
 800657a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	617b      	str	r3, [r7, #20]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01e      	beq.n	80065dc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800659e:	f000 fae7 	bl	8006b70 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	6a3a      	ldr	r2, [r7, #32]
 80065b8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	3304      	adds	r3, #4
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe f966 	bl	8004890 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d008      	beq.n	80065dc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d0:	f043 0304 	orr.w	r3, r3, #4
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80065dc:	bf00      	nop
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <xTimerGenericCommand+0x2e>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	623b      	str	r3, [r7, #32]
}
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <xTimerGenericCommand+0x98>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d02a      	beq.n	8006670 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b05      	cmp	r3, #5
 800662a:	dc18      	bgt.n	800665e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800662c:	f7ff fe18 	bl	8006260 <xTaskGetSchedulerState>
 8006630:	4603      	mov	r3, r0
 8006632:	2b02      	cmp	r3, #2
 8006634:	d109      	bne.n	800664a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006636:	4b11      	ldr	r3, [pc, #68]	; (800667c <xTimerGenericCommand+0x98>)
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	f107 0110 	add.w	r1, r7, #16
 800663e:	2300      	movs	r3, #0
 8006640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006642:	f7fe fb61 	bl	8004d08 <xQueueGenericSend>
 8006646:	6278      	str	r0, [r7, #36]	; 0x24
 8006648:	e012      	b.n	8006670 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800664a:	4b0c      	ldr	r3, [pc, #48]	; (800667c <xTimerGenericCommand+0x98>)
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	f107 0110 	add.w	r1, r7, #16
 8006652:	2300      	movs	r3, #0
 8006654:	2200      	movs	r2, #0
 8006656:	f7fe fb57 	bl	8004d08 <xQueueGenericSend>
 800665a:	6278      	str	r0, [r7, #36]	; 0x24
 800665c:	e008      	b.n	8006670 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800665e:	4b07      	ldr	r3, [pc, #28]	; (800667c <xTimerGenericCommand+0x98>)
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	f107 0110 	add.w	r1, r7, #16
 8006666:	2300      	movs	r3, #0
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	f7fe fc4b 	bl	8004f04 <xQueueGenericSendFromISR>
 800666e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006672:	4618      	mov	r0, r3
 8006674:	3728      	adds	r7, #40	; 0x28
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000dd0 	.word	0x20000dd0

08006680 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af02      	add	r7, sp, #8
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800668a:	4b22      	ldr	r3, [pc, #136]	; (8006714 <prvProcessExpiredTimer+0x94>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3304      	adds	r3, #4
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe f963 	bl	8004964 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d022      	beq.n	80066f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	699a      	ldr	r2, [r3, #24]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	18d1      	adds	r1, r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	6978      	ldr	r0, [r7, #20]
 80066ba:	f000 f8d1 	bl	8006860 <prvInsertTimerInActiveList>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01f      	beq.n	8006704 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066c4:	2300      	movs	r3, #0
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	2300      	movs	r3, #0
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	2100      	movs	r1, #0
 80066ce:	6978      	ldr	r0, [r7, #20]
 80066d0:	f7ff ff88 	bl	80065e4 <xTimerGenericCommand>
 80066d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d113      	bne.n	8006704 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	60fb      	str	r3, [r7, #12]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066f8:	f023 0301 	bic.w	r3, r3, #1
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	6978      	ldr	r0, [r7, #20]
 800670a:	4798      	blx	r3
}
 800670c:	bf00      	nop
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000dc8 	.word	0x20000dc8

08006718 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006720:	f107 0308 	add.w	r3, r7, #8
 8006724:	4618      	mov	r0, r3
 8006726:	f000 f857 	bl	80067d8 <prvGetNextExpireTime>
 800672a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4619      	mov	r1, r3
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f803 	bl	800673c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006736:	f000 f8d5 	bl	80068e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800673a:	e7f1      	b.n	8006720 <prvTimerTask+0x8>

0800673c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006746:	f7ff f9a9 	bl	8005a9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800674a:	f107 0308 	add.w	r3, r7, #8
 800674e:	4618      	mov	r0, r3
 8006750:	f000 f866 	bl	8006820 <prvSampleTimeNow>
 8006754:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d130      	bne.n	80067be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <prvProcessTimerOrBlockTask+0x3c>
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	429a      	cmp	r2, r3
 8006768:	d806      	bhi.n	8006778 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800676a:	f7ff f9a5 	bl	8005ab8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800676e:	68f9      	ldr	r1, [r7, #12]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff ff85 	bl	8006680 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006776:	e024      	b.n	80067c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d008      	beq.n	8006790 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <prvProcessTimerOrBlockTask+0x90>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <prvProcessTimerOrBlockTask+0x50>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <prvProcessTimerOrBlockTask+0x52>
 800678c:	2300      	movs	r3, #0
 800678e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006790:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <prvProcessTimerOrBlockTask+0x94>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	4619      	mov	r1, r3
 800679e:	f7fe ff41 	bl	8005624 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067a2:	f7ff f989 	bl	8005ab8 <xTaskResumeAll>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <prvProcessTimerOrBlockTask+0x98>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	f3bf 8f6f 	isb	sy
}
 80067bc:	e001      	b.n	80067c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067be:	f7ff f97b 	bl	8005ab8 <xTaskResumeAll>
}
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000dcc 	.word	0x20000dcc
 80067d0:	20000dd0 	.word	0x20000dd0
 80067d4:	e000ed04 	.word	0xe000ed04

080067d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067e0:	4b0e      	ldr	r3, [pc, #56]	; (800681c <prvGetNextExpireTime+0x44>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <prvGetNextExpireTime+0x16>
 80067ea:	2201      	movs	r2, #1
 80067ec:	e000      	b.n	80067f0 <prvGetNextExpireTime+0x18>
 80067ee:	2200      	movs	r2, #0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d105      	bne.n	8006808 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <prvGetNextExpireTime+0x44>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	e001      	b.n	800680c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800680c:	68fb      	ldr	r3, [r7, #12]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20000dc8 	.word	0x20000dc8

08006820 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006828:	f7ff f9e4 	bl	8005bf4 <xTaskGetTickCount>
 800682c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800682e:	4b0b      	ldr	r3, [pc, #44]	; (800685c <prvSampleTimeNow+0x3c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	429a      	cmp	r2, r3
 8006836:	d205      	bcs.n	8006844 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006838:	f000 f936 	bl	8006aa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	e002      	b.n	800684a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800684a:	4a04      	ldr	r2, [pc, #16]	; (800685c <prvSampleTimeNow+0x3c>)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006850:	68fb      	ldr	r3, [r7, #12]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000dd8 	.word	0x20000dd8

08006860 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	d812      	bhi.n	80068ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	1ad2      	subs	r2, r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	429a      	cmp	r2, r3
 8006892:	d302      	bcc.n	800689a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006894:	2301      	movs	r3, #1
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	e01b      	b.n	80068d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <prvInsertTimerInActiveList+0x7c>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	4610      	mov	r0, r2
 80068a6:	f7fe f824 	bl	80048f2 <vListInsert>
 80068aa:	e012      	b.n	80068d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d206      	bcs.n	80068c2 <prvInsertTimerInActiveList+0x62>
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d302      	bcc.n	80068c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e007      	b.n	80068d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068c2:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <prvInsertTimerInActiveList+0x80>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	4610      	mov	r0, r2
 80068ce:	f7fe f810 	bl	80048f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068d2:	697b      	ldr	r3, [r7, #20]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000dcc 	.word	0x20000dcc
 80068e0:	20000dc8 	.word	0x20000dc8

080068e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08e      	sub	sp, #56	; 0x38
 80068e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068ea:	e0ca      	b.n	8006a82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	da18      	bge.n	8006924 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80068f2:	1d3b      	adds	r3, r7, #4
 80068f4:	3304      	adds	r3, #4
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	61fb      	str	r3, [r7, #28]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800691a:	6850      	ldr	r0, [r2, #4]
 800691c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800691e:	6892      	ldr	r2, [r2, #8]
 8006920:	4611      	mov	r1, r2
 8006922:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	f2c0 80aa 	blt.w	8006a80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	3304      	adds	r3, #4
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe f811 	bl	8004964 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006942:	463b      	mov	r3, r7
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff ff6b 	bl	8006820 <prvSampleTimeNow>
 800694a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b09      	cmp	r3, #9
 8006950:	f200 8097 	bhi.w	8006a82 <prvProcessReceivedCommands+0x19e>
 8006954:	a201      	add	r2, pc, #4	; (adr r2, 800695c <prvProcessReceivedCommands+0x78>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	08006985 	.word	0x08006985
 8006960:	08006985 	.word	0x08006985
 8006964:	08006985 	.word	0x08006985
 8006968:	080069f9 	.word	0x080069f9
 800696c:	08006a0d 	.word	0x08006a0d
 8006970:	08006a57 	.word	0x08006a57
 8006974:	08006985 	.word	0x08006985
 8006978:	08006985 	.word	0x08006985
 800697c:	080069f9 	.word	0x080069f9
 8006980:	08006a0d 	.word	0x08006a0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	18d1      	adds	r1, r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069a4:	f7ff ff5c 	bl	8006860 <prvInsertTimerInActiveList>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d069      	beq.n	8006a82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d05e      	beq.n	8006a82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	441a      	add	r2, r3
 80069cc:	2300      	movs	r3, #0
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	2300      	movs	r3, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d6:	f7ff fe05 	bl	80065e4 <xTimerGenericCommand>
 80069da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d14f      	bne.n	8006a82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	61bb      	str	r3, [r7, #24]
}
 80069f4:	bf00      	nop
 80069f6:	e7fe      	b.n	80069f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a0a:	e03a      	b.n	8006a82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	617b      	str	r3, [r7, #20]
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	18d1      	adds	r1, r2, r3
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a50:	f7ff ff06 	bl	8006860 <prvInsertTimerInActiveList>
					break;
 8006a54:	e015      	b.n	8006a82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d103      	bne.n	8006a6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a66:	f000 fbfb 	bl	8007260 <vPortFree>
 8006a6a:	e00a      	b.n	8006a82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a7e:	e000      	b.n	8006a82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a82:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <prvProcessReceivedCommands+0x1c0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	1d39      	adds	r1, r7, #4
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe fb62 	bl	8005154 <xQueueReceive>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f47f af2a 	bne.w	80068ec <prvProcessReceivedCommands+0x8>
	}
}
 8006a98:	bf00      	nop
 8006a9a:	bf00      	nop
 8006a9c:	3730      	adds	r7, #48	; 0x30
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000dd0 	.word	0x20000dd0

08006aa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006aae:	e048      	b.n	8006b42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ab0:	4b2d      	ldr	r3, [pc, #180]	; (8006b68 <prvSwitchTimerLists+0xc0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aba:	4b2b      	ldr	r3, [pc, #172]	; (8006b68 <prvSwitchTimerLists+0xc0>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fd ff4b 	bl	8004964 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d02e      	beq.n	8006b42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d90e      	bls.n	8006b14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b02:	4b19      	ldr	r3, [pc, #100]	; (8006b68 <prvSwitchTimerLists+0xc0>)
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	f7fd fef0 	bl	80048f2 <vListInsert>
 8006b12:	e016      	b.n	8006b42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b14:	2300      	movs	r3, #0
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f7ff fd60 	bl	80065e4 <xTimerGenericCommand>
 8006b24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	603b      	str	r3, [r7, #0]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b42:	4b09      	ldr	r3, [pc, #36]	; (8006b68 <prvSwitchTimerLists+0xc0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1b1      	bne.n	8006ab0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <prvSwitchTimerLists+0xc0>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b52:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <prvSwitchTimerLists+0xc4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a04      	ldr	r2, [pc, #16]	; (8006b68 <prvSwitchTimerLists+0xc0>)
 8006b58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b5a:	4a04      	ldr	r2, [pc, #16]	; (8006b6c <prvSwitchTimerLists+0xc4>)
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	6013      	str	r3, [r2, #0]
}
 8006b60:	bf00      	nop
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20000dc8 	.word	0x20000dc8
 8006b6c:	20000dcc 	.word	0x20000dcc

08006b70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b76:	f000 f985 	bl	8006e84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b7a:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <prvCheckForValidListAndQueue+0x60>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d120      	bne.n	8006bc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b82:	4814      	ldr	r0, [pc, #80]	; (8006bd4 <prvCheckForValidListAndQueue+0x64>)
 8006b84:	f7fd fe64 	bl	8004850 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b88:	4813      	ldr	r0, [pc, #76]	; (8006bd8 <prvCheckForValidListAndQueue+0x68>)
 8006b8a:	f7fd fe61 	bl	8004850 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <prvCheckForValidListAndQueue+0x6c>)
 8006b90:	4a10      	ldr	r2, [pc, #64]	; (8006bd4 <prvCheckForValidListAndQueue+0x64>)
 8006b92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b94:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <prvCheckForValidListAndQueue+0x70>)
 8006b96:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <prvCheckForValidListAndQueue+0x68>)
 8006b98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	4b11      	ldr	r3, [pc, #68]	; (8006be4 <prvCheckForValidListAndQueue+0x74>)
 8006ba0:	4a11      	ldr	r2, [pc, #68]	; (8006be8 <prvCheckForValidListAndQueue+0x78>)
 8006ba2:	2110      	movs	r1, #16
 8006ba4:	200a      	movs	r0, #10
 8006ba6:	f7fd ff6f 	bl	8004a88 <xQueueGenericCreateStatic>
 8006baa:	4603      	mov	r3, r0
 8006bac:	4a08      	ldr	r2, [pc, #32]	; (8006bd0 <prvCheckForValidListAndQueue+0x60>)
 8006bae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006bb0:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <prvCheckForValidListAndQueue+0x60>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bb8:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <prvCheckForValidListAndQueue+0x60>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	490b      	ldr	r1, [pc, #44]	; (8006bec <prvCheckForValidListAndQueue+0x7c>)
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fe fcdc 	bl	800557c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bc4:	f000 f98e 	bl	8006ee4 <vPortExitCritical>
}
 8006bc8:	bf00      	nop
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000dd0 	.word	0x20000dd0
 8006bd4:	20000da0 	.word	0x20000da0
 8006bd8:	20000db4 	.word	0x20000db4
 8006bdc:	20000dc8 	.word	0x20000dc8
 8006be0:	20000dcc 	.word	0x20000dcc
 8006be4:	20000e7c 	.word	0x20000e7c
 8006be8:	20000ddc 	.word	0x20000ddc
 8006bec:	08007584 	.word	0x08007584

08006bf0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <pvTimerGetTimerID+0x28>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	60fb      	str	r3, [r7, #12]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006c18:	f000 f934 	bl	8006e84 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006c22:	f000 f95f 	bl	8006ee4 <vPortExitCritical>

	return pvReturn;
 8006c26:	693b      	ldr	r3, [r7, #16]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3b04      	subs	r3, #4
 8006c40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3b04      	subs	r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f023 0201 	bic.w	r2, r3, #1
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3b04      	subs	r3, #4
 8006c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c60:	4a0c      	ldr	r2, [pc, #48]	; (8006c94 <pxPortInitialiseStack+0x64>)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3b14      	subs	r3, #20
 8006c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3b04      	subs	r3, #4
 8006c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f06f 0202 	mvn.w	r2, #2
 8006c7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3b20      	subs	r3, #32
 8006c84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c86:	68fb      	ldr	r3, [r7, #12]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	08006c99 	.word	0x08006c99

08006c98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <prvTaskExitError+0x54>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006caa:	d00a      	beq.n	8006cc2 <prvTaskExitError+0x2a>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	60fb      	str	r3, [r7, #12]
}
 8006cbe:	bf00      	nop
 8006cc0:	e7fe      	b.n	8006cc0 <prvTaskExitError+0x28>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	60bb      	str	r3, [r7, #8]
}
 8006cd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cd6:	bf00      	nop
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0fc      	beq.n	8006cd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cde:	bf00      	nop
 8006ce0:	bf00      	nop
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	2000000c 	.word	0x2000000c

08006cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <pxCurrentTCBConst2>)
 8006cf2:	6819      	ldr	r1, [r3, #0]
 8006cf4:	6808      	ldr	r0, [r1, #0]
 8006cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	f380 8809 	msr	PSP, r0
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f04f 0000 	mov.w	r0, #0
 8006d06:	f380 8811 	msr	BASEPRI, r0
 8006d0a:	4770      	bx	lr
 8006d0c:	f3af 8000 	nop.w

08006d10 <pxCurrentTCBConst2>:
 8006d10:	200008a0 	.word	0x200008a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop

08006d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d18:	4808      	ldr	r0, [pc, #32]	; (8006d3c <prvPortStartFirstTask+0x24>)
 8006d1a:	6800      	ldr	r0, [r0, #0]
 8006d1c:	6800      	ldr	r0, [r0, #0]
 8006d1e:	f380 8808 	msr	MSP, r0
 8006d22:	f04f 0000 	mov.w	r0, #0
 8006d26:	f380 8814 	msr	CONTROL, r0
 8006d2a:	b662      	cpsie	i
 8006d2c:	b661      	cpsie	f
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	df00      	svc	0
 8006d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d3a:	bf00      	nop
 8006d3c:	e000ed08 	.word	0xe000ed08

08006d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d46:	4b46      	ldr	r3, [pc, #280]	; (8006e60 <xPortStartScheduler+0x120>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a46      	ldr	r2, [pc, #280]	; (8006e64 <xPortStartScheduler+0x124>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10a      	bne.n	8006d66 <xPortStartScheduler+0x26>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	613b      	str	r3, [r7, #16]
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d66:	4b3e      	ldr	r3, [pc, #248]	; (8006e60 <xPortStartScheduler+0x120>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a3f      	ldr	r2, [pc, #252]	; (8006e68 <xPortStartScheduler+0x128>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d10a      	bne.n	8006d86 <xPortStartScheduler+0x46>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60fb      	str	r3, [r7, #12]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d86:	4b39      	ldr	r3, [pc, #228]	; (8006e6c <xPortStartScheduler+0x12c>)
 8006d88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	22ff      	movs	r2, #255	; 0xff
 8006d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	4b31      	ldr	r3, [pc, #196]	; (8006e70 <xPortStartScheduler+0x130>)
 8006dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dae:	4b31      	ldr	r3, [pc, #196]	; (8006e74 <xPortStartScheduler+0x134>)
 8006db0:	2207      	movs	r2, #7
 8006db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006db4:	e009      	b.n	8006dca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006db6:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <xPortStartScheduler+0x134>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	4a2d      	ldr	r2, [pc, #180]	; (8006e74 <xPortStartScheduler+0x134>)
 8006dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd2:	2b80      	cmp	r3, #128	; 0x80
 8006dd4:	d0ef      	beq.n	8006db6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dd6:	4b27      	ldr	r3, [pc, #156]	; (8006e74 <xPortStartScheduler+0x134>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f1c3 0307 	rsb	r3, r3, #7
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d00a      	beq.n	8006df8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	60bb      	str	r3, [r7, #8]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006df8:	4b1e      	ldr	r3, [pc, #120]	; (8006e74 <xPortStartScheduler+0x134>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	4a1d      	ldr	r2, [pc, #116]	; (8006e74 <xPortStartScheduler+0x134>)
 8006e00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e02:	4b1c      	ldr	r3, [pc, #112]	; (8006e74 <xPortStartScheduler+0x134>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e0a:	4a1a      	ldr	r2, [pc, #104]	; (8006e74 <xPortStartScheduler+0x134>)
 8006e0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e16:	4b18      	ldr	r3, [pc, #96]	; (8006e78 <xPortStartScheduler+0x138>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <xPortStartScheduler+0x138>)
 8006e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e22:	4b15      	ldr	r3, [pc, #84]	; (8006e78 <xPortStartScheduler+0x138>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <xPortStartScheduler+0x138>)
 8006e28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e2e:	f000 f8dd 	bl	8006fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e32:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <xPortStartScheduler+0x13c>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e38:	f000 f8fc 	bl	8007034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e3c:	4b10      	ldr	r3, [pc, #64]	; (8006e80 <xPortStartScheduler+0x140>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a0f      	ldr	r2, [pc, #60]	; (8006e80 <xPortStartScheduler+0x140>)
 8006e42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e48:	f7ff ff66 	bl	8006d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e4c:	f7fe ff9c 	bl	8005d88 <vTaskSwitchContext>
	prvTaskExitError();
 8006e50:	f7ff ff22 	bl	8006c98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	e000ed00 	.word	0xe000ed00
 8006e64:	410fc271 	.word	0x410fc271
 8006e68:	410fc270 	.word	0x410fc270
 8006e6c:	e000e400 	.word	0xe000e400
 8006e70:	20000ecc 	.word	0x20000ecc
 8006e74:	20000ed0 	.word	0x20000ed0
 8006e78:	e000ed20 	.word	0xe000ed20
 8006e7c:	2000000c 	.word	0x2000000c
 8006e80:	e000ef34 	.word	0xe000ef34

08006e84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	607b      	str	r3, [r7, #4]
}
 8006e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e9e:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <vPortEnterCritical+0x58>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	4a0d      	ldr	r2, [pc, #52]	; (8006edc <vPortEnterCritical+0x58>)
 8006ea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <vPortEnterCritical+0x58>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d10f      	bne.n	8006ed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <vPortEnterCritical+0x5c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	603b      	str	r3, [r7, #0]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <vPortEnterCritical+0x4a>
	}
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	2000000c 	.word	0x2000000c
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eea:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <vPortExitCritical+0x50>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <vPortExitCritical+0x24>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	607b      	str	r3, [r7, #4]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <vPortExitCritical+0x50>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <vPortExitCritical+0x50>)
 8006f10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f12:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <vPortExitCritical+0x50>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d105      	bne.n	8006f26 <vPortExitCritical+0x42>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	f383 8811 	msr	BASEPRI, r3
}
 8006f24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	2000000c 	.word	0x2000000c
	...

08006f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f40:	f3ef 8009 	mrs	r0, PSP
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	4b15      	ldr	r3, [pc, #84]	; (8006fa0 <pxCurrentTCBConst>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	f01e 0f10 	tst.w	lr, #16
 8006f50:	bf08      	it	eq
 8006f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	6010      	str	r0, [r2, #0]
 8006f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f64:	f380 8811 	msr	BASEPRI, r0
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f7fe ff0a 	bl	8005d88 <vTaskSwitchContext>
 8006f74:	f04f 0000 	mov.w	r0, #0
 8006f78:	f380 8811 	msr	BASEPRI, r0
 8006f7c:	bc09      	pop	{r0, r3}
 8006f7e:	6819      	ldr	r1, [r3, #0]
 8006f80:	6808      	ldr	r0, [r1, #0]
 8006f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f86:	f01e 0f10 	tst.w	lr, #16
 8006f8a:	bf08      	it	eq
 8006f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f90:	f380 8809 	msr	PSP, r0
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst>:
 8006fa0:	200008a0 	.word	0x200008a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	607b      	str	r3, [r7, #4]
}
 8006fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fc2:	f7fe fe27 	bl	8005c14 <xTaskIncrementTick>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fcc:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <xPortSysTickHandler+0x40>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	f383 8811 	msr	BASEPRI, r3
}
 8006fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <vPortSetupTimerInterrupt+0x34>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <vPortSetupTimerInterrupt+0x38>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <vPortSetupTimerInterrupt+0x3c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a0a      	ldr	r2, [pc, #40]	; (800702c <vPortSetupTimerInterrupt+0x40>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	099b      	lsrs	r3, r3, #6
 8007008:	4a09      	ldr	r2, [pc, #36]	; (8007030 <vPortSetupTimerInterrupt+0x44>)
 800700a:	3b01      	subs	r3, #1
 800700c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800700e:	4b04      	ldr	r3, [pc, #16]	; (8007020 <vPortSetupTimerInterrupt+0x34>)
 8007010:	2207      	movs	r2, #7
 8007012:	601a      	str	r2, [r3, #0]
}
 8007014:	bf00      	nop
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	e000e010 	.word	0xe000e010
 8007024:	e000e018 	.word	0xe000e018
 8007028:	20000000 	.word	0x20000000
 800702c:	10624dd3 	.word	0x10624dd3
 8007030:	e000e014 	.word	0xe000e014

08007034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007044 <vPortEnableVFP+0x10>
 8007038:	6801      	ldr	r1, [r0, #0]
 800703a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800703e:	6001      	str	r1, [r0, #0]
 8007040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007042:	bf00      	nop
 8007044:	e000ed88 	.word	0xe000ed88

08007048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800704e:	f3ef 8305 	mrs	r3, IPSR
 8007052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b0f      	cmp	r3, #15
 8007058:	d914      	bls.n	8007084 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800705a:	4a17      	ldr	r2, [pc, #92]	; (80070b8 <vPortValidateInterruptPriority+0x70>)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007064:	4b15      	ldr	r3, [pc, #84]	; (80070bc <vPortValidateInterruptPriority+0x74>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	7afa      	ldrb	r2, [r7, #11]
 800706a:	429a      	cmp	r2, r3
 800706c:	d20a      	bcs.n	8007084 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	607b      	str	r3, [r7, #4]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007084:	4b0e      	ldr	r3, [pc, #56]	; (80070c0 <vPortValidateInterruptPriority+0x78>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800708c:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <vPortValidateInterruptPriority+0x7c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d90a      	bls.n	80070aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	603b      	str	r3, [r7, #0]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <vPortValidateInterruptPriority+0x60>
	}
 80070aa:	bf00      	nop
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	e000e3f0 	.word	0xe000e3f0
 80070bc:	20000ecc 	.word	0x20000ecc
 80070c0:	e000ed0c 	.word	0xe000ed0c
 80070c4:	20000ed0 	.word	0x20000ed0

080070c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	; 0x28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070d4:	f7fe fce2 	bl	8005a9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070d8:	4b5b      	ldr	r3, [pc, #364]	; (8007248 <pvPortMalloc+0x180>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070e0:	f000 f920 	bl	8007324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070e4:	4b59      	ldr	r3, [pc, #356]	; (800724c <pvPortMalloc+0x184>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4013      	ands	r3, r2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 8093 	bne.w	8007218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01d      	beq.n	8007134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80070f8:	2208      	movs	r2, #8
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4413      	add	r3, r2
 80070fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	2b00      	cmp	r3, #0
 8007108:	d014      	beq.n	8007134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f023 0307 	bic.w	r3, r3, #7
 8007110:	3308      	adds	r3, #8
 8007112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <pvPortMalloc+0x6c>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	617b      	str	r3, [r7, #20]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d06e      	beq.n	8007218 <pvPortMalloc+0x150>
 800713a:	4b45      	ldr	r3, [pc, #276]	; (8007250 <pvPortMalloc+0x188>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d869      	bhi.n	8007218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007144:	4b43      	ldr	r3, [pc, #268]	; (8007254 <pvPortMalloc+0x18c>)
 8007146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007148:	4b42      	ldr	r3, [pc, #264]	; (8007254 <pvPortMalloc+0x18c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800714e:	e004      	b.n	800715a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d903      	bls.n	800716c <pvPortMalloc+0xa4>
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1f1      	bne.n	8007150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800716c:	4b36      	ldr	r3, [pc, #216]	; (8007248 <pvPortMalloc+0x180>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007172:	429a      	cmp	r2, r3
 8007174:	d050      	beq.n	8007218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2208      	movs	r2, #8
 800717c:	4413      	add	r3, r2
 800717e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	2308      	movs	r3, #8
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	429a      	cmp	r2, r3
 8007196:	d91f      	bls.n	80071d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4413      	add	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <pvPortMalloc+0xf8>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	613b      	str	r3, [r7, #16]
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	1ad2      	subs	r2, r2, r3
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071d2:	69b8      	ldr	r0, [r7, #24]
 80071d4:	f000 f908 	bl	80073e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071d8:	4b1d      	ldr	r3, [pc, #116]	; (8007250 <pvPortMalloc+0x188>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	4a1b      	ldr	r2, [pc, #108]	; (8007250 <pvPortMalloc+0x188>)
 80071e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071e6:	4b1a      	ldr	r3, [pc, #104]	; (8007250 <pvPortMalloc+0x188>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4b1b      	ldr	r3, [pc, #108]	; (8007258 <pvPortMalloc+0x190>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d203      	bcs.n	80071fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071f2:	4b17      	ldr	r3, [pc, #92]	; (8007250 <pvPortMalloc+0x188>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a18      	ldr	r2, [pc, #96]	; (8007258 <pvPortMalloc+0x190>)
 80071f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	4b13      	ldr	r3, [pc, #76]	; (800724c <pvPortMalloc+0x184>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	431a      	orrs	r2, r3
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800720e:	4b13      	ldr	r3, [pc, #76]	; (800725c <pvPortMalloc+0x194>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	4a11      	ldr	r2, [pc, #68]	; (800725c <pvPortMalloc+0x194>)
 8007216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007218:	f7fe fc4e 	bl	8005ab8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <pvPortMalloc+0x174>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60fb      	str	r3, [r7, #12]
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <pvPortMalloc+0x172>
	return pvReturn;
 800723c:	69fb      	ldr	r3, [r7, #28]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3728      	adds	r7, #40	; 0x28
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	2000264c 	.word	0x2000264c
 800724c:	20002660 	.word	0x20002660
 8007250:	20002650 	.word	0x20002650
 8007254:	20002644 	.word	0x20002644
 8007258:	20002654 	.word	0x20002654
 800725c:	20002658 	.word	0x20002658

08007260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d04d      	beq.n	800730e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007272:	2308      	movs	r3, #8
 8007274:	425b      	negs	r3, r3
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4413      	add	r3, r2
 800727a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	4b24      	ldr	r3, [pc, #144]	; (8007318 <vPortFree+0xb8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4013      	ands	r3, r2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <vPortFree+0x44>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	60fb      	str	r3, [r7, #12]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <vPortFree+0x62>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	60bb      	str	r3, [r7, #8]
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <vPortFree+0xb8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01e      	beq.n	800730e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11a      	bne.n	800730e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <vPortFree+0xb8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	401a      	ands	r2, r3
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072e8:	f7fe fbd8 	bl	8005a9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	4b0a      	ldr	r3, [pc, #40]	; (800731c <vPortFree+0xbc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4413      	add	r3, r2
 80072f6:	4a09      	ldr	r2, [pc, #36]	; (800731c <vPortFree+0xbc>)
 80072f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072fa:	6938      	ldr	r0, [r7, #16]
 80072fc:	f000 f874 	bl	80073e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007300:	4b07      	ldr	r3, [pc, #28]	; (8007320 <vPortFree+0xc0>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3301      	adds	r3, #1
 8007306:	4a06      	ldr	r2, [pc, #24]	; (8007320 <vPortFree+0xc0>)
 8007308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800730a:	f7fe fbd5 	bl	8005ab8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800730e:	bf00      	nop
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20002660 	.word	0x20002660
 800731c:	20002650 	.word	0x20002650
 8007320:	2000265c 	.word	0x2000265c

08007324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800732a:	f241 7370 	movw	r3, #6000	; 0x1770
 800732e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007330:	4b27      	ldr	r3, [pc, #156]	; (80073d0 <prvHeapInit+0xac>)
 8007332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00c      	beq.n	8007358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3307      	adds	r3, #7
 8007342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0307 	bic.w	r3, r3, #7
 800734a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	4a1f      	ldr	r2, [pc, #124]	; (80073d0 <prvHeapInit+0xac>)
 8007354:	4413      	add	r3, r2
 8007356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800735c:	4a1d      	ldr	r2, [pc, #116]	; (80073d4 <prvHeapInit+0xb0>)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <prvHeapInit+0xb0>)
 8007364:	2200      	movs	r2, #0
 8007366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	4413      	add	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007370:	2208      	movs	r2, #8
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0307 	bic.w	r3, r3, #7
 800737e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <prvHeapInit+0xb4>)
 8007384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007386:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <prvHeapInit+0xb4>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2200      	movs	r2, #0
 800738c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800738e:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <prvHeapInit+0xb4>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073a4:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <prvHeapInit+0xb4>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	4a0a      	ldr	r2, [pc, #40]	; (80073dc <prvHeapInit+0xb8>)
 80073b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	4a09      	ldr	r2, [pc, #36]	; (80073e0 <prvHeapInit+0xbc>)
 80073ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073bc:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <prvHeapInit+0xc0>)
 80073be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073c2:	601a      	str	r2, [r3, #0]
}
 80073c4:	bf00      	nop
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	20000ed4 	.word	0x20000ed4
 80073d4:	20002644 	.word	0x20002644
 80073d8:	2000264c 	.word	0x2000264c
 80073dc:	20002654 	.word	0x20002654
 80073e0:	20002650 	.word	0x20002650
 80073e4:	20002660 	.word	0x20002660

080073e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073f0:	4b28      	ldr	r3, [pc, #160]	; (8007494 <prvInsertBlockIntoFreeList+0xac>)
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	e002      	b.n	80073fc <prvInsertBlockIntoFreeList+0x14>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d8f7      	bhi.n	80073f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	4413      	add	r3, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	429a      	cmp	r2, r3
 8007416:	d108      	bne.n	800742a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	441a      	add	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	441a      	add	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d118      	bne.n	8007470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	4b15      	ldr	r3, [pc, #84]	; (8007498 <prvInsertBlockIntoFreeList+0xb0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d00d      	beq.n	8007466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	441a      	add	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e008      	b.n	8007478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007466:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <prvInsertBlockIntoFreeList+0xb0>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	e003      	b.n	8007478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	429a      	cmp	r2, r3
 800747e:	d002      	beq.n	8007486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007486:	bf00      	nop
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20002644 	.word	0x20002644
 8007498:	2000264c 	.word	0x2000264c

0800749c <__libc_init_array>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	4d0d      	ldr	r5, [pc, #52]	; (80074d4 <__libc_init_array+0x38>)
 80074a0:	4c0d      	ldr	r4, [pc, #52]	; (80074d8 <__libc_init_array+0x3c>)
 80074a2:	1b64      	subs	r4, r4, r5
 80074a4:	10a4      	asrs	r4, r4, #2
 80074a6:	2600      	movs	r6, #0
 80074a8:	42a6      	cmp	r6, r4
 80074aa:	d109      	bne.n	80074c0 <__libc_init_array+0x24>
 80074ac:	4d0b      	ldr	r5, [pc, #44]	; (80074dc <__libc_init_array+0x40>)
 80074ae:	4c0c      	ldr	r4, [pc, #48]	; (80074e0 <__libc_init_array+0x44>)
 80074b0:	f000 f82e 	bl	8007510 <_init>
 80074b4:	1b64      	subs	r4, r4, r5
 80074b6:	10a4      	asrs	r4, r4, #2
 80074b8:	2600      	movs	r6, #0
 80074ba:	42a6      	cmp	r6, r4
 80074bc:	d105      	bne.n	80074ca <__libc_init_array+0x2e>
 80074be:	bd70      	pop	{r4, r5, r6, pc}
 80074c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c4:	4798      	blx	r3
 80074c6:	3601      	adds	r6, #1
 80074c8:	e7ee      	b.n	80074a8 <__libc_init_array+0xc>
 80074ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ce:	4798      	blx	r3
 80074d0:	3601      	adds	r6, #1
 80074d2:	e7f2      	b.n	80074ba <__libc_init_array+0x1e>
 80074d4:	08007620 	.word	0x08007620
 80074d8:	08007620 	.word	0x08007620
 80074dc:	08007620 	.word	0x08007620
 80074e0:	08007624 	.word	0x08007624

080074e4 <memcpy>:
 80074e4:	440a      	add	r2, r1
 80074e6:	4291      	cmp	r1, r2
 80074e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ec:	d100      	bne.n	80074f0 <memcpy+0xc>
 80074ee:	4770      	bx	lr
 80074f0:	b510      	push	{r4, lr}
 80074f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074fa:	4291      	cmp	r1, r2
 80074fc:	d1f9      	bne.n	80074f2 <memcpy+0xe>
 80074fe:	bd10      	pop	{r4, pc}

08007500 <memset>:
 8007500:	4402      	add	r2, r0
 8007502:	4603      	mov	r3, r0
 8007504:	4293      	cmp	r3, r2
 8007506:	d100      	bne.n	800750a <memset+0xa>
 8007508:	4770      	bx	lr
 800750a:	f803 1b01 	strb.w	r1, [r3], #1
 800750e:	e7f9      	b.n	8007504 <memset+0x4>

08007510 <_init>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	bf00      	nop
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr

0800751c <_fini>:
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	bf00      	nop
 8007520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007522:	bc08      	pop	{r3}
 8007524:	469e      	mov	lr, r3
 8007526:	4770      	bx	lr
