
nucleo-l432kc_4x4rgb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008258  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021d8  080083e8  080083e8  000183e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5c0  0800a5c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5c0  0800a5c0  0001a5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5c8  0800a5c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5c8  0800a5c8  0001a5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5cc  0800a5cc  0001a5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a5d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002658  20000010  0800a5e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002668  0800a5e0  00022668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9fd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039c1  00000000  00000000  0003ca3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00040400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001658  00000000  00000000  00041bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023177  00000000  00000000  00043208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e3e  00000000  00000000  0006637f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4852  00000000  00000000  000801bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006384  00000000  00000000  00154a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  0015ade4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083d0 	.word	0x080083d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080083d0 	.word	0x080083d0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <printDataOnMatrix>:
/**
 * @brief	Prints the received Data from the Broker and prints it on the 4x4 Matrix
 * @param	ch - Pointer to a Char holding the Information to print
 */
void printDataOnMatrix(char const *ch)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	switch(*ch)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	3b58      	subs	r3, #88	; 0x58
 80004e2:	2b1b      	cmp	r3, #27
 80004e4:	f200 8093 	bhi.w	800060e <printDataOnMatrix+0x13a>
 80004e8:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <printDataOnMatrix+0x1c>)
 80004ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ee:	bf00      	nop
 80004f0:	080005f9 	.word	0x080005f9
 80004f4:	080005ff 	.word	0x080005ff
 80004f8:	08000607 	.word	0x08000607
 80004fc:	0800060f 	.word	0x0800060f
 8000500:	0800060f 	.word	0x0800060f
 8000504:	0800060f 	.word	0x0800060f
 8000508:	0800060f 	.word	0x0800060f
 800050c:	0800060f 	.word	0x0800060f
 8000510:	0800060f 	.word	0x0800060f
 8000514:	08000561 	.word	0x08000561
 8000518:	08000569 	.word	0x08000569
 800051c:	08000571 	.word	0x08000571
 8000520:	08000579 	.word	0x08000579
 8000524:	08000581 	.word	0x08000581
 8000528:	08000589 	.word	0x08000589
 800052c:	08000591 	.word	0x08000591
 8000530:	08000599 	.word	0x08000599
 8000534:	080005a1 	.word	0x080005a1
 8000538:	080005a9 	.word	0x080005a9
 800053c:	080005b1 	.word	0x080005b1
 8000540:	080005b9 	.word	0x080005b9
 8000544:	080005c1 	.word	0x080005c1
 8000548:	080005c9 	.word	0x080005c9
 800054c:	080005d1 	.word	0x080005d1
 8000550:	080005d9 	.word	0x080005d9
 8000554:	080005e1 	.word	0x080005e1
 8000558:	080005e9 	.word	0x080005e9
 800055c:	080005f1 	.word	0x080005f1
	{
		case 'a':
			ptr_Rgb4x4Click = &rgb4x4click_centered;
 8000560:	4b38      	ldr	r3, [pc, #224]	; (8000644 <printDataOnMatrix+0x170>)
 8000562:	4a39      	ldr	r2, [pc, #228]	; (8000648 <printDataOnMatrix+0x174>)
 8000564:	601a      	str	r2, [r3, #0]
			break;
 8000566:	e056      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'b':
			ptr_Rgb4x4Click = &rgb4x4click_outOfScope;
 8000568:	4b36      	ldr	r3, [pc, #216]	; (8000644 <printDataOnMatrix+0x170>)
 800056a:	4a38      	ldr	r2, [pc, #224]	; (800064c <printDataOnMatrix+0x178>)
 800056c:	601a      	str	r2, [r3, #0]
			break;
 800056e:	e052      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'c':
			ptr_Rgb4x4Click = &rgb4x4click_shakeDetection;
 8000570:	4b34      	ldr	r3, [pc, #208]	; (8000644 <printDataOnMatrix+0x170>)
 8000572:	4a37      	ldr	r2, [pc, #220]	; (8000650 <printDataOnMatrix+0x17c>)
 8000574:	601a      	str	r2, [r3, #0]
			break;
 8000576:	e04e      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'd':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_lo;
 8000578:	4b32      	ldr	r3, [pc, #200]	; (8000644 <printDataOnMatrix+0x170>)
 800057a:	4a36      	ldr	r2, [pc, #216]	; (8000654 <printDataOnMatrix+0x180>)
 800057c:	601a      	str	r2, [r3, #0]
			break;
 800057e:	e04a      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'e':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_lu;
 8000580:	4b30      	ldr	r3, [pc, #192]	; (8000644 <printDataOnMatrix+0x170>)
 8000582:	4a35      	ldr	r2, [pc, #212]	; (8000658 <printDataOnMatrix+0x184>)
 8000584:	601a      	str	r2, [r3, #0]
			break;
 8000586:	e046      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'f':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_ro;
 8000588:	4b2e      	ldr	r3, [pc, #184]	; (8000644 <printDataOnMatrix+0x170>)
 800058a:	4a34      	ldr	r2, [pc, #208]	; (800065c <printDataOnMatrix+0x188>)
 800058c:	601a      	str	r2, [r3, #0]
			break;
 800058e:	e042      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'g':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_ru;
 8000590:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <printDataOnMatrix+0x170>)
 8000592:	4a33      	ldr	r2, [pc, #204]	; (8000660 <printDataOnMatrix+0x18c>)
 8000594:	601a      	str	r2, [r3, #0]
			break;
 8000596:	e03e      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'h':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c1;
 8000598:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <printDataOnMatrix+0x170>)
 800059a:	4a32      	ldr	r2, [pc, #200]	; (8000664 <printDataOnMatrix+0x190>)
 800059c:	601a      	str	r2, [r3, #0]
			break;
 800059e:	e03a      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'i':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c2;
 80005a0:	4b28      	ldr	r3, [pc, #160]	; (8000644 <printDataOnMatrix+0x170>)
 80005a2:	4a31      	ldr	r2, [pc, #196]	; (8000668 <printDataOnMatrix+0x194>)
 80005a4:	601a      	str	r2, [r3, #0]
			break;
 80005a6:	e036      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'j':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c3;
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <printDataOnMatrix+0x170>)
 80005aa:	4a30      	ldr	r2, [pc, #192]	; (800066c <printDataOnMatrix+0x198>)
 80005ac:	601a      	str	r2, [r3, #0]
			break;
 80005ae:	e032      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'k':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c4;
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <printDataOnMatrix+0x170>)
 80005b2:	4a2f      	ldr	r2, [pc, #188]	; (8000670 <printDataOnMatrix+0x19c>)
 80005b4:	601a      	str	r2, [r3, #0]
			break;
 80005b6:	e02e      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'l':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r2c1;
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <printDataOnMatrix+0x170>)
 80005ba:	4a2e      	ldr	r2, [pc, #184]	; (8000674 <printDataOnMatrix+0x1a0>)
 80005bc:	601a      	str	r2, [r3, #0]
			break;
 80005be:	e02a      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'm':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r2c4;
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <printDataOnMatrix+0x170>)
 80005c2:	4a2d      	ldr	r2, [pc, #180]	; (8000678 <printDataOnMatrix+0x1a4>)
 80005c4:	601a      	str	r2, [r3, #0]
			break;
 80005c6:	e026      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'n':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r3c1;
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <printDataOnMatrix+0x170>)
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <printDataOnMatrix+0x1a8>)
 80005cc:	601a      	str	r2, [r3, #0]
			break;
 80005ce:	e022      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'o':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r3c4;
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <printDataOnMatrix+0x170>)
 80005d2:	4a2b      	ldr	r2, [pc, #172]	; (8000680 <printDataOnMatrix+0x1ac>)
 80005d4:	601a      	str	r2, [r3, #0]
			break;
 80005d6:	e01e      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'p':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c1;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <printDataOnMatrix+0x170>)
 80005da:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <printDataOnMatrix+0x1b0>)
 80005dc:	601a      	str	r2, [r3, #0]
			break;
 80005de:	e01a      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'q':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c2;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <printDataOnMatrix+0x170>)
 80005e2:	4a29      	ldr	r2, [pc, #164]	; (8000688 <printDataOnMatrix+0x1b4>)
 80005e4:	601a      	str	r2, [r3, #0]
			break;
 80005e6:	e016      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'r':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c3;
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <printDataOnMatrix+0x170>)
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <printDataOnMatrix+0x1b8>)
 80005ec:	601a      	str	r2, [r3, #0]
			break;
 80005ee:	e012      	b.n	8000616 <printDataOnMatrix+0x142>
		case 's':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c4;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <printDataOnMatrix+0x170>)
 80005f2:	4a27      	ldr	r2, [pc, #156]	; (8000690 <printDataOnMatrix+0x1bc>)
 80005f4:	601a      	str	r2, [r3, #0]
			break;
 80005f6:	e00e      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'X':
			ptr_Rgb4x4Click = &rgb4x4click_error;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <printDataOnMatrix+0x170>)
 80005fa:	4a26      	ldr	r2, [pc, #152]	; (8000694 <printDataOnMatrix+0x1c0>)
 80005fc:	601a      	str	r2, [r3, #0]
		case 'Y':
			ptr_Rgb4x4Click = &rgb4x4click_pairing;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <printDataOnMatrix+0x170>)
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <printDataOnMatrix+0x1c4>)
 8000602:	601a      	str	r2, [r3, #0]
			break;
 8000604:	e007      	b.n	8000616 <printDataOnMatrix+0x142>
		case 'Z':
			ptr_Rgb4x4Click = &rgb4x4click_all_off;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <printDataOnMatrix+0x170>)
 8000608:	4a24      	ldr	r2, [pc, #144]	; (800069c <printDataOnMatrix+0x1c8>)
 800060a:	601a      	str	r2, [r3, #0]
			break;
 800060c:	e003      	b.n	8000616 <printDataOnMatrix+0x142>
		default:
			/* You should not be here */
			ptr_Rgb4x4Click = &rgb4x4click_error;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <printDataOnMatrix+0x170>)
 8000610:	4a20      	ldr	r2, [pc, #128]	; (8000694 <printDataOnMatrix+0x1c0>)
 8000612:	601a      	str	r2, [r3, #0]
			break;
 8000614:	bf00      	nop
	}

	/* Wait until previous DMA Transfer is Completed */
	osSemaphoreAcquire(sem_printPermissionHandle, osWaitForever);
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <printDataOnMatrix+0x1cc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f04f 31ff 	mov.w	r1, #4294967295
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fcd0 	bl	8004fc4 <osSemaphoreAcquire>

	/* Actually not really necessary and quite useless, just to be 101% sure*/
	taskENTER_CRITICAL();
 8000624:	f007 fb8e 	bl	8007d44 <vPortEnterCritical>

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *) ptr_Rgb4x4Click, PWM_STREAM_LENGTH_FULL_DISPLAY);
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <printDataOnMatrix+0x170>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000630:	2100      	movs	r1, #0
 8000632:	481c      	ldr	r0, [pc, #112]	; (80006a4 <printDataOnMatrix+0x1d0>)
 8000634:	f002 fc2a 	bl	8002e8c <HAL_TIM_PWM_Start_DMA>

	taskEXIT_CRITICAL();
 8000638:	f007 fbb4 	bl	8007da4 <vPortExitCritical>

}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000002c 	.word	0x2000002c
 8000648:	08008434 	.word	0x08008434
 800064c:	080085b4 	.word	0x080085b4
 8000650:	08008734 	.word	0x08008734
 8000654:	08008a34 	.word	0x08008a34
 8000658:	080088b4 	.word	0x080088b4
 800065c:	08008d34 	.word	0x08008d34
 8000660:	08008bb4 	.word	0x08008bb4
 8000664:	08008eb4 	.word	0x08008eb4
 8000668:	08009034 	.word	0x08009034
 800066c:	080091b4 	.word	0x080091b4
 8000670:	08009334 	.word	0x08009334
 8000674:	080094b4 	.word	0x080094b4
 8000678:	08009634 	.word	0x08009634
 800067c:	080097b4 	.word	0x080097b4
 8000680:	08009934 	.word	0x08009934
 8000684:	08009ab4 	.word	0x08009ab4
 8000688:	08009c34 	.word	0x08009c34
 800068c:	08009db4 	.word	0x08009db4
 8000690:	08009f34 	.word	0x08009f34
 8000694:	0800a0b4 	.word	0x0800a0b4
 8000698:	0800a234 	.word	0x0800a234
 800069c:	0800a3b4 	.word	0x0800a3b4
 80006a0:	20000150 	.word	0x20000150
 80006a4:	20000030 	.word	0x20000030

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fc35 	bl	8000f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f836 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 f972 	bl	800099c <MX_GPIO_Init>
  MX_DMA_Init();
 80006b8:	f000 f952 	bl	8000960 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006bc:	f000 f920 	bl	8000900 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80006c0:	f000 f890 	bl	80007e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c4:	f004 fa6c 	bl	8004ba0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sem_printPermission */
  sem_printPermissionHandle = osSemaphoreNew(1, 1, &sem_printPermission_attributes);
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <main+0x58>)
 80006ca:	2101      	movs	r1, #1
 80006cc:	2001      	movs	r0, #1
 80006ce:	f004 fbef 	bl	8004eb0 <osSemaphoreNew>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <main+0x5c>)
 80006d6:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of newDataTimer */
  newDataTimerHandle = osTimerNew(newDataTimerCallback, osTimerPeriodic, NULL, &newDataTimer_attributes);
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <main+0x60>)
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <main+0x64>)
 80006e0:	f004 fb6a 	bl	8004db8 <osTimerNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <main+0x68>)
 80006e8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ConServerTask */
  ConServerTaskHandle = osThreadNew(StartConServerTask, NULL, &ConServerTask_attributes);
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <main+0x6c>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	480a      	ldr	r0, [pc, #40]	; (8000718 <main+0x70>)
 80006f0:	f004 faa0 	bl	8004c34 <osThreadNew>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a09      	ldr	r2, [pc, #36]	; (800071c <main+0x74>)
 80006f8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006fa:	f004 fa75 	bl	8004be8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <main+0x56>
 8000700:	0800a568 	.word	0x0800a568
 8000704:	20000150 	.word	0x20000150
 8000708:	0800a558 	.word	0x0800a558
 800070c:	08000abd 	.word	0x08000abd
 8000710:	2000014c 	.word	0x2000014c
 8000714:	0800a534 	.word	0x0800a534
 8000718:	08000a5d 	.word	0x08000a5d
 800071c:	20000148 	.word	0x20000148

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b096      	sub	sp, #88	; 0x58
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2244      	movs	r2, #68	; 0x44
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f007 fe46 	bl	80083c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000742:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000746:	f001 f8db 	bl	8001900 <HAL_PWREx_ControlVoltageScaling>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000750:	f000 f9d6 	bl	8000b00 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000754:	f001 f8b6 	bl	80018c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <SystemClock_Config+0xc0>)
 800075a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800075e:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <SystemClock_Config+0xc0>)
 8000760:	f023 0318 	bic.w	r3, r3, #24
 8000764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000768:	2314      	movs	r3, #20
 800076a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000778:	2360      	movs	r3, #96	; 0x60
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000780:	2301      	movs	r3, #1
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800078c:	2307      	movs	r3, #7
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4618      	mov	r0, r3
 800079e:	f001 f905 	bl	80019ac <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007a8:	f000 f9aa 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2303      	movs	r3, #3
 80007b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	2104      	movs	r1, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fd05 	bl	80021d4 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007d0:	f000 f996 	bl	8000b00 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007d4:	f002 f94a 	bl	8002a6c <HAL_RCCEx_EnableMSIPLLMode>
}
 80007d8:	bf00      	nop
 80007da:	3758      	adds	r7, #88	; 0x58
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000

080007e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b096      	sub	sp, #88	; 0x58
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	222c      	movs	r2, #44	; 0x2c
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f007 fdd5 	bl	80083c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000816:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <MX_TIM1_Init+0x114>)
 8000818:	4a38      	ldr	r2, [pc, #224]	; (80008fc <MX_TIM1_Init+0x118>)
 800081a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800081c:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <MX_TIM1_Init+0x114>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <MX_TIM1_Init+0x114>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000828:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <MX_TIM1_Init+0x114>)
 800082a:	2264      	movs	r2, #100	; 0x64
 800082c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082e:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <MX_TIM1_Init+0x114>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000834:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <MX_TIM1_Init+0x114>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <MX_TIM1_Init+0x114>)
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000840:	482d      	ldr	r0, [pc, #180]	; (80008f8 <MX_TIM1_Init+0x114>)
 8000842:	f002 facb 	bl	8002ddc <HAL_TIM_PWM_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800084c:	f000 f958 	bl	8000b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800085c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000860:	4619      	mov	r1, r3
 8000862:	4825      	ldr	r0, [pc, #148]	; (80008f8 <MX_TIM1_Init+0x114>)
 8000864:	f003 fc32 	bl	80040cc <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800086e:	f000 f947 	bl	8000b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000872:	2360      	movs	r3, #96	; 0x60
 8000874:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8000876:	2364      	movs	r3, #100	; 0x64
 8000878:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087a:	2300      	movs	r3, #0
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800087e:	2300      	movs	r3, #0
 8000880:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000882:	2304      	movs	r3, #4
 8000884:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	4818      	ldr	r0, [pc, #96]	; (80008f8 <MX_TIM1_Init+0x114>)
 8000898:	f002 fef8 	bl	800368c <HAL_TIM_PWM_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80008a2:	f000 f92d 	bl	8000b00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4807      	ldr	r0, [pc, #28]	; (80008f8 <MX_TIM1_Init+0x114>)
 80008dc:	f003 fc5c 	bl	8004198 <HAL_TIMEx_ConfigBreakDeadTime>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80008e6:	f000 f90b 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <MX_TIM1_Init+0x114>)
 80008ec:	f000 f992 	bl	8000c14 <HAL_TIM_MspPostInit>

}
 80008f0:	bf00      	nop
 80008f2:	3758      	adds	r7, #88	; 0x58
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000030 	.word	0x20000030
 80008fc:	40012c00 	.word	0x40012c00

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_USART2_UART_Init+0x58>)
 8000906:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_USART2_UART_Init+0x5c>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_USART2_UART_Init+0x58>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_USART2_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART2_UART_Init+0x58>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART2_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART2_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART2_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART2_UART_Init+0x58>)
 8000944:	f003 fcbe 	bl	80042c4 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 f8d7 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000c4 	.word	0x200000c4
 800095c:	40004400 	.word	0x40004400

08000960 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_DMA_Init+0x38>)
 8000968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <MX_DMA_Init+0x38>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6493      	str	r3, [r2, #72]	; 0x48
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_DMA_Init+0x38>)
 8000974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	200c      	movs	r0, #12
 8000984:	f000 fbba 	bl	80010fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000988:	200c      	movs	r0, #12
 800098a:	f000 fbd3 	bl	8001134 <HAL_NVIC_EnableIRQ>

}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_GPIO_Init+0x8c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <MX_GPIO_Init+0x8c>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_GPIO_Init+0x8c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_GPIO_Init+0x8c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <MX_GPIO_Init+0x8c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_GPIO_Init+0x8c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_GPIO_Init+0x8c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <MX_GPIO_Init+0x8c>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_GPIO_Init+0x8c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	480b      	ldr	r0, [pc, #44]	; (8000a2c <MX_GPIO_Init+0x90>)
 8000a00:	f000 ff48 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a04:	2308      	movs	r3, #8
 8000a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_GPIO_Init+0x90>)
 8000a1c:	f000 fdd0 	bl	80015c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48000400 	.word	0x48000400

08000a30 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	// Stop DMA
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000a3c:	f002 fc1e 	bl	800327c <HAL_TIM_PWM_Stop_DMA>

	// Give Back Semaphore
	osSemaphoreRelease(sem_printPermissionHandle);
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 fb0f 	bl	8005068 <osSemaphoreRelease>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000030 	.word	0x20000030
 8000a58:	20000150 	.word	0x20000150

08000a5c <StartConServerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartConServerTask */
void StartConServerTask(void *argument)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char ch[] = {'a', 'b', 'c', 'Z'};
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <StartConServerTask+0x58>)
 8000a66:	60bb      	str	r3, [r7, #8]
	int i = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */

	/* send reset code */
	printDataOnMatrix(&ch[1]);
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	3301      	adds	r3, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fd2e 	bl	80004d4 <printDataOnMatrix>

  for(;;)
  {

	  /* send reset code */
	  printDataOnMatrix(&ch[3]);
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	3303      	adds	r3, #3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fd28 	bl	80004d4 <printDataOnMatrix>
	  printDataOnMatrix(&ch[i%3]);
 8000a84:	68f9      	ldr	r1, [r7, #12]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <StartConServerTask+0x5c>)
 8000a88:	fb83 3201 	smull	r3, r2, r3, r1
 8000a8c:	17cb      	asrs	r3, r1, #31
 8000a8e:	1ad2      	subs	r2, r2, r3
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	1aca      	subs	r2, r1, r3
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fd18 	bl	80004d4 <printDataOnMatrix>
	  ++i;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]

    osDelay(1000);
 8000aaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aae:	f004 f953 	bl	8004d58 <osDelay>
	  printDataOnMatrix(&ch[3]);
 8000ab2:	e7e1      	b.n	8000a78 <StartConServerTask+0x1c>
 8000ab4:	5a636261 	.word	0x5a636261
 8000ab8:	55555556 	.word	0x55555556

08000abc <newDataTimerCallback>:
  /* USER CODE END 5 */
}

/* newDataTimerCallback function */
void newDataTimerCallback(void *argument)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN newDataTimerCallback */
	g_getNewData = true;
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <newDataTimerCallback+0x1c>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END newDataTimerCallback */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000154 	.word	0x20000154

08000adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aee:	f000 fa2d 	bl	8000f4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40014400 	.word	0x40014400

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	210f      	movs	r1, #15
 8000b46:	f06f 0001 	mvn.w	r0, #1
 8000b4a:	f000 fad7 	bl	80010fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a26      	ldr	r2, [pc, #152]	; (8000c04 <HAL_TIM_PWM_MspInit+0xa8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d146      	bne.n	8000bfc <HAL_TIM_PWM_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <HAL_TIM_PWM_MspInit+0xac>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	4a25      	ldr	r2, [pc, #148]	; (8000c08 <HAL_TIM_PWM_MspInit+0xac>)
 8000b74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b78:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <HAL_TIM_PWM_MspInit+0xac>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000b88:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <HAL_TIM_PWM_MspInit+0xb4>)
 8000b8a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000b8e:	2207      	movs	r2, #7
 8000b90:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000b94:	2210      	movs	r2, #16
 8000b96:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000baa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000bba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000bbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000bc0:	4812      	ldr	r0, [pc, #72]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000bc2:	f000 fac5 	bl	8001150 <HAL_DMA_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8000bcc:	f7ff ff98 	bl	8000b00 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_TIM_PWM_MspInit+0xb0>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	210f      	movs	r1, #15
 8000be0:	2019      	movs	r0, #25
 8000be2:	f000 fa8b 	bl	80010fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000be6:	2019      	movs	r0, #25
 8000be8:	f000 faa4 	bl	8001134 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2105      	movs	r1, #5
 8000bf0:	201b      	movs	r0, #27
 8000bf2:	f000 fa83 	bl	80010fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000bf6:	201b      	movs	r0, #27
 8000bf8:	f000 fa9c 	bl	8001134 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40012c00 	.word	0x40012c00
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	2000007c 	.word	0x2000007c
 8000c10:	4002001c 	.word	0x4002001c

08000c14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <HAL_TIM_MspPostInit+0x68>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d11d      	bne.n	8000c72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_TIM_MspPostInit+0x6c>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a11      	ldr	r2, [pc, #68]	; (8000c80 <HAL_TIM_MspPostInit+0x6c>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_TIM_MspPostInit+0x6c>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f000 fca7 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40012c00 	.word	0x40012c00
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09e      	sub	sp, #120	; 0x78
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	2254      	movs	r2, #84	; 0x54
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f007 fb8b 	bl	80083c0 <memset>
  if(huart->Instance==USART2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a28      	ldr	r2, [pc, #160]	; (8000d50 <HAL_UART_MspInit+0xcc>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d148      	bne.n	8000d46 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 fcdd 	bl	8002680 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ccc:	f7ff ff18 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <HAL_UART_MspInit+0xd0>)
 8000cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	; (8000d54 <HAL_UART_MspInit+0xd0>)
 8000cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cda:	6593      	str	r3, [r2, #88]	; 0x58
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <HAL_UART_MspInit+0xd0>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_UART_MspInit+0xd0>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <HAL_UART_MspInit+0xd0>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_UART_MspInit+0xd0>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d00:	2304      	movs	r3, #4
 8000d02:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d10:	2307      	movs	r3, #7
 8000d12:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f000 fc4f 	bl	80015c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d34:	2303      	movs	r3, #3
 8000d36:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f000 fc3d 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3778      	adds	r7, #120	; 0x78
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40004400 	.word	0x40004400
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000d66:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <HAL_InitTick+0xc8>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6a:	4a2d      	ldr	r2, [pc, #180]	; (8000e20 <HAL_InitTick+0xc8>)
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	6613      	str	r3, [r2, #96]	; 0x60
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_InitTick+0xc8>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d7e:	f107 020c 	add.w	r2, r7, #12
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 fbe7 	bl	800255c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d8e:	f001 fbcf 	bl	8002530 <HAL_RCC_GetPCLK2Freq>
 8000d92:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d96:	4a23      	ldr	r2, [pc, #140]	; (8000e24 <HAL_InitTick+0xcc>)
 8000d98:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9c:	0c9b      	lsrs	r3, r3, #18
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <HAL_InitTick+0xd0>)
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <HAL_InitTick+0xd4>)
 8000da6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <HAL_InitTick+0xd0>)
 8000daa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dae:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000db0:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <HAL_InitTick+0xd0>)
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_InitTick+0xd0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <HAL_InitTick+0xd0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_InitTick+0xd0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8000dc8:	4817      	ldr	r0, [pc, #92]	; (8000e28 <HAL_InitTick+0xd0>)
 8000dca:	f001 ff51 	bl	8002c70 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d11b      	bne.n	8000e14 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <HAL_InitTick+0xd0>)
 8000dde:	f001 ffa9 	bl	8002d34 <HAL_TIM_Base_Start_IT>
 8000de2:	4603      	mov	r3, r0
 8000de4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000de8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d111      	bne.n	8000e14 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000df0:	2019      	movs	r0, #25
 8000df2:	f000 f99f 	bl	8001134 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d808      	bhi.n	8000e0e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2019      	movs	r0, #25
 8000e02:	f000 f97b 	bl	80010fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_InitTick+0xd8>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	e002      	b.n	8000e14 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3730      	adds	r7, #48	; 0x30
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40021000 	.word	0x40021000
 8000e24:	431bde83 	.word	0x431bde83
 8000e28:	20000158 	.word	0x20000158
 8000e2c:	40014400 	.word	0x40014400
 8000e30:	20000004 	.word	0x20000004

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <DMA1_Channel2_IRQHandler+0x10>)
 8000e66:	f000 facc 	bl	8001402 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000007c 	.word	0x2000007c

08000e74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000e7a:	f002 fae7 	bl	800344c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000e7e:	4803      	ldr	r0, [pc, #12]	; (8000e8c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000e80:	f002 fae4 	bl	800344c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000030 	.word	0x20000030
 8000e8c:	20000158 	.word	0x20000158

08000e90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM1_CC_IRQHandler+0x10>)
 8000e96:	f002 fad9 	bl	800344c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000030 	.word	0x20000030

08000ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ecc:	f7ff ffea 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	; (8000f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <LoopForever+0xe>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	; (8000f14 <LoopForever+0x16>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f007 fa31 	bl	800835c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efa:	f7ff fbd5 	bl	80006a8 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f0c:	0800a5d0 	.word	0x0800a5d0
  ldr r2, =_sbss
 8000f10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f14:	20002668 	.word	0x20002668

08000f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_IRQHandler>

08000f1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f8de 	bl	80010e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f7ff ff14 	bl	8000d58 <HAL_InitTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	e001      	b.n	8000f40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3c:	f7ff fde6 	bl	8000b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200001a4 	.word	0x200001a4

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200001a4 	.word	0x200001a4

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4907      	ldr	r1, [pc, #28]	; (8001028 <__NVIC_EnableIRQ+0x38>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff4c 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800110e:	f7ff ff61 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001112:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	6978      	ldr	r0, [r7, #20]
 800111a:	f7ff ffb1 	bl	8001080 <NVIC_EncodePriority>
 800111e:	4602      	mov	r2, r0
 8001120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff80 	bl	800102c <__NVIC_SetPriority>
}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff54 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e098      	b.n	8001294 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <HAL_DMA_Init+0x150>)
 800116a:	429a      	cmp	r2, r3
 800116c:	d80f      	bhi.n	800118e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <HAL_DMA_Init+0x154>)
 8001176:	4413      	add	r3, r2
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_DMA_Init+0x158>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	009a      	lsls	r2, r3, #2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a48      	ldr	r2, [pc, #288]	; (80012ac <HAL_DMA_Init+0x15c>)
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
 800118c:	e00e      	b.n	80011ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <HAL_DMA_Init+0x160>)
 8001196:	4413      	add	r3, r2
 8001198:	4a43      	ldr	r2, [pc, #268]	; (80012a8 <HAL_DMA_Init+0x158>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	009a      	lsls	r2, r3, #2
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a42      	ldr	r2, [pc, #264]	; (80012b4 <HAL_DMA_Init+0x164>)
 80011aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2202      	movs	r2, #2
 80011b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80011c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80011d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001206:	d039      	beq.n	800127c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	4a27      	ldr	r2, [pc, #156]	; (80012ac <HAL_DMA_Init+0x15c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d11a      	bne.n	8001248 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <HAL_DMA_Init+0x168>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f003 031c 	and.w	r3, r3, #28
 800121e:	210f      	movs	r1, #15
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	4924      	ldr	r1, [pc, #144]	; (80012b8 <HAL_DMA_Init+0x168>)
 8001228:	4013      	ands	r3, r2
 800122a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_DMA_Init+0x168>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6859      	ldr	r1, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	f003 031c 	and.w	r3, r3, #28
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	491d      	ldr	r1, [pc, #116]	; (80012b8 <HAL_DMA_Init+0x168>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
 8001246:	e019      	b.n	800127c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_DMA_Init+0x16c>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001250:	f003 031c 	and.w	r3, r3, #28
 8001254:	210f      	movs	r1, #15
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	4917      	ldr	r1, [pc, #92]	; (80012bc <HAL_DMA_Init+0x16c>)
 800125e:	4013      	ands	r3, r2
 8001260:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_DMA_Init+0x16c>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6859      	ldr	r1, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f003 031c 	and.w	r3, r3, #28
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	4911      	ldr	r1, [pc, #68]	; (80012bc <HAL_DMA_Init+0x16c>)
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40020407 	.word	0x40020407
 80012a4:	bffdfff8 	.word	0xbffdfff8
 80012a8:	cccccccd 	.word	0xcccccccd
 80012ac:	40020000 	.word	0x40020000
 80012b0:	bffdfbf8 	.word	0xbffdfbf8
 80012b4:	40020400 	.word	0x40020400
 80012b8:	400200a8 	.word	0x400200a8
 80012bc:	400204a8 	.word	0x400204a8

080012c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_DMA_Start_IT+0x20>
 80012dc:	2302      	movs	r3, #2
 80012de:	e04b      	b.n	8001378 <HAL_DMA_Start_IT+0xb8>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d13a      	bne.n	800136a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f921 	bl	8001560 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	2b00      	cmp	r3, #0
 8001324:	d008      	beq.n	8001338 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f042 020e 	orr.w	r2, r2, #14
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e00f      	b.n	8001358 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0204 	bic.w	r2, r2, #4
 8001346:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 020a 	orr.w	r2, r2, #10
 8001356:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e005      	b.n	8001376 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001372:	2302      	movs	r3, #2
 8001374:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001376:	7dfb      	ldrb	r3, [r7, #23]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d005      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2204      	movs	r2, #4
 800139c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e029      	b.n	80013f8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 020e 	bic.w	r2, r2, #14
 80013b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f003 021c 	and.w	r2, r3, #28
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	2101      	movs	r1, #1
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	4798      	blx	r3
    }
  }
  return status;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f003 031c 	and.w	r3, r3, #28
 8001422:	2204      	movs	r2, #4
 8001424:	409a      	lsls	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d026      	beq.n	800147c <HAL_DMA_IRQHandler+0x7a>
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d021      	beq.n	800147c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	2b00      	cmp	r3, #0
 8001444:	d107      	bne.n	8001456 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0204 	bic.w	r2, r2, #4
 8001454:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f003 021c 	and.w	r2, r3, #28
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2104      	movs	r1, #4
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	2b00      	cmp	r3, #0
 8001470:	d071      	beq.n	8001556 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800147a:	e06c      	b.n	8001556 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	f003 031c 	and.w	r3, r3, #28
 8001484:	2202      	movs	r2, #2
 8001486:	409a      	lsls	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d02e      	beq.n	80014ee <HAL_DMA_IRQHandler+0xec>
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d029      	beq.n	80014ee <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0320 	and.w	r3, r3, #32
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10b      	bne.n	80014c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 020a 	bic.w	r2, r2, #10
 80014b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f003 021c 	and.w	r2, r3, #28
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	2102      	movs	r1, #2
 80014ce:	fa01 f202 	lsl.w	r2, r1, r2
 80014d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d038      	beq.n	8001556 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014ec:	e033      	b.n	8001556 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f003 031c 	and.w	r3, r3, #28
 80014f6:	2208      	movs	r2, #8
 80014f8:	409a      	lsls	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d02a      	beq.n	8001558 <HAL_DMA_IRQHandler+0x156>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d025      	beq.n	8001558 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 020e 	bic.w	r2, r2, #14
 800151a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	f003 021c 	and.w	r2, r3, #28
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	2101      	movs	r1, #1
 800152a:	fa01 f202 	lsl.w	r2, r1, r2
 800152e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154a:	2b00      	cmp	r3, #0
 800154c:	d004      	beq.n	8001558 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001556:	bf00      	nop
 8001558:	bf00      	nop
}
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f003 021c 	and.w	r2, r3, #28
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f202 	lsl.w	r2, r1, r2
 8001580:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d108      	bne.n	80015a4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015a2:	e007      	b.n	80015b4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	60da      	str	r2, [r3, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ce:	e148      	b.n	8001862 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2101      	movs	r1, #1
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	4013      	ands	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 813a 	beq.w	800185c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d005      	beq.n	8001600 <HAL_GPIO_Init+0x40>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d130      	bne.n	8001662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001636:	2201      	movs	r2, #1
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	f003 0201 	and.w	r2, r3, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b03      	cmp	r3, #3
 800166c:	d017      	beq.n	800169e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d123      	bne.n	80016f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	08da      	lsrs	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3208      	adds	r2, #8
 80016ec:	6939      	ldr	r1, [r7, #16]
 80016ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	2203      	movs	r2, #3
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0203 	and.w	r2, r3, #3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8094 	beq.w	800185c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001734:	4b52      	ldr	r3, [pc, #328]	; (8001880 <HAL_GPIO_Init+0x2c0>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001738:	4a51      	ldr	r2, [pc, #324]	; (8001880 <HAL_GPIO_Init+0x2c0>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6613      	str	r3, [r2, #96]	; 0x60
 8001740:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <HAL_GPIO_Init+0x2c0>)
 8001742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800174c:	4a4d      	ldr	r2, [pc, #308]	; (8001884 <HAL_GPIO_Init+0x2c4>)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	3302      	adds	r3, #2
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	220f      	movs	r2, #15
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001776:	d00d      	beq.n	8001794 <HAL_GPIO_Init+0x1d4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a43      	ldr	r2, [pc, #268]	; (8001888 <HAL_GPIO_Init+0x2c8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d007      	beq.n	8001790 <HAL_GPIO_Init+0x1d0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a42      	ldr	r2, [pc, #264]	; (800188c <HAL_GPIO_Init+0x2cc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_GPIO_Init+0x1cc>
 8001788:	2302      	movs	r3, #2
 800178a:	e004      	b.n	8001796 <HAL_GPIO_Init+0x1d6>
 800178c:	2307      	movs	r3, #7
 800178e:	e002      	b.n	8001796 <HAL_GPIO_Init+0x1d6>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_GPIO_Init+0x1d6>
 8001794:	2300      	movs	r3, #0
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	f002 0203 	and.w	r2, r2, #3
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4093      	lsls	r3, r2
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a6:	4937      	ldr	r1, [pc, #220]	; (8001884 <HAL_GPIO_Init+0x2c4>)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b4:	4b36      	ldr	r3, [pc, #216]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017d8:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001802:	4a23      	ldr	r2, [pc, #140]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800182c:	4a18      	ldr	r2, [pc, #96]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	f47f aeaf 	bne.w	80015d0 <HAL_GPIO_Init+0x10>
  }
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	48000400 	.word	0x48000400
 800188c:	48000800 	.word	0x48000800
 8001890:	40010400 	.word	0x40010400

08001894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40007000 	.word	0x40007000

080018e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <HAL_PWREx_GetVoltageRange+0x18>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40007000 	.word	0x40007000

08001900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190e:	d130      	bne.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001910:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800191c:	d038      	beq.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2232      	movs	r2, #50	; 0x32
 8001934:	fb02 f303 	mul.w	r3, r2, r3
 8001938:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0c9b      	lsrs	r3, r3, #18
 8001940:	3301      	adds	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001944:	e002      	b.n	800194c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3b01      	subs	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001958:	d102      	bne.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x60>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f2      	bne.n	8001946 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196c:	d110      	bne.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e00f      	b.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197e:	d007      	beq.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001988:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40007000 	.word	0x40007000
 80019a4:	20000000 	.word	0x20000000
 80019a8:	431bde83 	.word	0x431bde83

080019ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	f000 bc02 	b.w	80021c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019c0:	4b96      	ldr	r3, [pc, #600]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ca:	4b94      	ldr	r3, [pc, #592]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80e4 	beq.w	8001baa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d007      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4c>
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	f040 808b 	bne.w	8001b06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	f040 8087 	bne.w	8001b06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f8:	4b88      	ldr	r3, [pc, #544]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_OscConfig+0x64>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e3d9      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1a      	ldr	r2, [r3, #32]
 8001a14:	4b81      	ldr	r3, [pc, #516]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <HAL_RCC_OscConfig+0x7e>
 8001a20:	4b7e      	ldr	r3, [pc, #504]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a28:	e005      	b.n	8001a36 <HAL_RCC_OscConfig+0x8a>
 8001a2a:	4b7c      	ldr	r3, [pc, #496]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d223      	bcs.n	8001a82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fdbe 	bl	80025c0 <RCC_SetFlashLatencyFromMSIRange>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e3ba      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a4e:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a72      	ldr	r2, [pc, #456]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a54:	f043 0308 	orr.w	r3, r3, #8
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	496d      	ldr	r1, [pc, #436]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a6c:	4b6b      	ldr	r3, [pc, #428]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	4968      	ldr	r1, [pc, #416]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
 8001a80:	e025      	b.n	8001ace <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a82:	4b66      	ldr	r3, [pc, #408]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a65      	ldr	r2, [pc, #404]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4960      	ldr	r1, [pc, #384]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa0:	4b5e      	ldr	r3, [pc, #376]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	495b      	ldr	r1, [pc, #364]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fd7e 	bl	80025c0 <RCC_SetFlashLatencyFromMSIRange>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e37a      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ace:	f000 fc81 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	4950      	ldr	r1, [pc, #320]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	5ccb      	ldrb	r3, [r1, r3]
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a4e      	ldr	r2, [pc, #312]	; (8001c24 <HAL_RCC_OscConfig+0x278>)
 8001aec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f930 	bl	8000d58 <HAL_InitTick>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d052      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	e35e      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d032      	beq.n	8001b74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b0e:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a42      	ldr	r2, [pc, #264]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fa2b 	bl	8000f74 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b22:	f7ff fa27 	bl	8000f74 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e347      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b34:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a35      	ldr	r2, [pc, #212]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4930      	ldr	r1, [pc, #192]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	492b      	ldr	r1, [pc, #172]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
 8001b72:	e01a      	b.n	8001baa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b74:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b80:	f7ff f9f8 	bl	8000f74 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b88:	f7ff f9f4 	bl	8000f74 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e314      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1dc>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d073      	beq.n	8001c9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x21c>
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d10e      	bne.n	8001be0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d10b      	bne.n	8001be0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d063      	beq.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d15f      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e2f1      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be8:	d106      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x24c>
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e025      	b.n	8001c44 <HAL_RCC_OscConfig+0x298>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c00:	d114      	bne.n	8001c2c <HAL_RCC_OscConfig+0x280>
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a02      	ldr	r2, [pc, #8]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e013      	b.n	8001c44 <HAL_RCC_OscConfig+0x298>
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	0800a578 	.word	0x0800a578
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000004 	.word	0x20000004
 8001c2c:	4ba0      	ldr	r3, [pc, #640]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a9f      	ldr	r2, [pc, #636]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b9d      	ldr	r3, [pc, #628]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a9c      	ldr	r2, [pc, #624]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f992 	bl	8000f74 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff f98e 	bl	8000f74 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	; 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e2ae      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c66:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x2a8>
 8001c72:	e014      	b.n	8001c9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff f97e 	bl	8000f74 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff f97a 	bl	8000f74 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e29a      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8e:	4b88      	ldr	r3, [pc, #544]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2d0>
 8001c9a:	e000      	b.n	8001c9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d060      	beq.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_OscConfig+0x310>
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d119      	bne.n	8001cea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d116      	bne.n	8001cea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cbc:	4b7c      	ldr	r3, [pc, #496]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x328>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e277      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	4973      	ldr	r1, [pc, #460]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce8:	e040      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d023      	beq.n	8001d3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf2:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f939 	bl	8000f74 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff f935 	bl	8000f74 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e255      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d18:	4b65      	ldr	r3, [pc, #404]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	061b      	lsls	r3, r3, #24
 8001d32:	495f      	ldr	r1, [pc, #380]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e018      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a5c      	ldr	r2, [pc, #368]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff f915 	bl	8000f74 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff f911 	bl	8000f74 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e231      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d03c      	beq.n	8001df2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01c      	beq.n	8001dba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d80:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d86:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7ff f8f0 	bl	8000f74 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff f8ec 	bl	8000f74 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e20c      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ef      	beq.n	8001d98 <HAL_RCC_OscConfig+0x3ec>
 8001db8:	e01b      	b.n	8001df2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dca:	f7ff f8d3 	bl	8000f74 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f8cf 	bl	8000f74 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1ef      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ef      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80a6 	beq.w	8001f4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10d      	bne.n	8001e2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e14:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d118      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	; (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e44:	f7ff f896 	bl	8000f74 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4c:	f7ff f892 	bl	8000f74 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e1b2      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d108      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4d8>
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e82:	e029      	b.n	8001ed8 <HAL_RCC_OscConfig+0x52c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d115      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x50c>
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea2:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eac:	e014      	b.n	8001ed8 <HAL_RCC_OscConfig+0x52c>
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	4b9a      	ldr	r3, [pc, #616]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebe:	4a99      	ldr	r2, [pc, #612]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec8:	4b96      	ldr	r3, [pc, #600]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	4a95      	ldr	r2, [pc, #596]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d016      	beq.n	8001f0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff f848 	bl	8000f74 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7ff f844 	bl	8000f74 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e162      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	4b89      	ldr	r3, [pc, #548]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ed      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x53c>
 8001f0c:	e015      	b.n	8001f3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f831 	bl	8000f74 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff f82d 	bl	8000f74 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e14b      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f2c:	4b7d      	ldr	r3, [pc, #500]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ed      	bne.n	8001f16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f3a:	7ffb      	ldrb	r3, [r7, #31]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f40:	4b78      	ldr	r3, [pc, #480]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	4a77      	ldr	r2, [pc, #476]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d03c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f60:	4b70      	ldr	r3, [pc, #448]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f66:	4a6f      	ldr	r2, [pc, #444]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff f800 	bl	8000f74 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f78:	f7fe fffc 	bl	8000f74 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e11c      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f8a:	4b66      	ldr	r3, [pc, #408]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ef      	beq.n	8001f78 <HAL_RCC_OscConfig+0x5cc>
 8001f98:	e01b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f9a:	4b62      	ldr	r3, [pc, #392]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fa0:	4a60      	ldr	r2, [pc, #384]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001faa:	f7fe ffe3 	bl	8000f74 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fb2:	f7fe ffdf 	bl	8000f74 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0ff      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fc4:	4b57      	ldr	r3, [pc, #348]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ef      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80f3 	beq.w	80021c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	f040 80c9 	bne.w	8002178 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fe6:	4b4f      	ldr	r3, [pc, #316]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0203 	and.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d12c      	bne.n	8002054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	3b01      	subs	r3, #1
 8002006:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d123      	bne.n	8002054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002016:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d11b      	bne.n	8002054 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002026:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002028:	429a      	cmp	r2, r3
 800202a:	d113      	bne.n	8002054 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d109      	bne.n	8002054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	3b01      	subs	r3, #1
 800204e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d06b      	beq.n	800212c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b0c      	cmp	r3, #12
 8002058:	d062      	beq.n	8002120 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800205a:	4b32      	ldr	r3, [pc, #200]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0ac      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800206a:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2d      	ldr	r2, [pc, #180]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8002070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002074:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002076:	f7fe ff7d 	bl	8000f74 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7fe ff79 	bl	8000f74 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e099      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002090:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_RCC_OscConfig+0x77c>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020ac:	3a01      	subs	r2, #1
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	4311      	orrs	r1, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020b6:	0212      	lsls	r2, r2, #8
 80020b8:	4311      	orrs	r1, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020be:	0852      	lsrs	r2, r2, #1
 80020c0:	3a01      	subs	r2, #1
 80020c2:	0552      	lsls	r2, r2, #21
 80020c4:	4311      	orrs	r1, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020ca:	0852      	lsrs	r2, r2, #1
 80020cc:	3a01      	subs	r2, #1
 80020ce:	0652      	lsls	r2, r2, #25
 80020d0:	4311      	orrs	r1, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020d6:	06d2      	lsls	r2, r2, #27
 80020d8:	430a      	orrs	r2, r1
 80020da:	4912      	ldr	r1, [pc, #72]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 80020e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a0c      	ldr	r2, [pc, #48]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 80020f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020f8:	f7fe ff3c 	bl	8000f74 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe ff38 	bl	8000f74 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e058      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <HAL_RCC_OscConfig+0x778>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800211e:	e050      	b.n	80021c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e04f      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
 8002124:	40021000 	.word	0x40021000
 8002128:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_RCC_OscConfig+0x820>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d144      	bne.n	80021c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCC_OscConfig+0x820>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a23      	ldr	r2, [pc, #140]	; (80021cc <HAL_RCC_OscConfig+0x820>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCC_OscConfig+0x820>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a20      	ldr	r2, [pc, #128]	; (80021cc <HAL_RCC_OscConfig+0x820>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002150:	f7fe ff10 	bl	8000f74 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe ff0c 	bl	8000f74 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e02c      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_RCC_OscConfig+0x820>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x7ac>
 8002176:	e024      	b.n	80021c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d01f      	beq.n	80021be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_RCC_OscConfig+0x820>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <HAL_RCC_OscConfig+0x820>)
 8002184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7fe fef3 	bl	8000f74 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7fe feef 	bl	8000f74 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e00f      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_RCC_OscConfig+0x820>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_RCC_OscConfig+0x820>)
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	4905      	ldr	r1, [pc, #20]	; (80021cc <HAL_RCC_OscConfig+0x820>)
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_RCC_OscConfig+0x824>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
 80021bc:	e001      	b.n	80021c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	feeefffc 	.word	0xfeeefffc

080021d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0e7      	b.n	80023b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <HAL_RCC_ClockConfig+0x1ec>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d910      	bls.n	8002218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <HAL_RCC_ClockConfig+0x1ec>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4970      	ldr	r1, [pc, #448]	; (80023c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b6e      	ldr	r3, [pc, #440]	; (80023c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0cf      	b.n	80023b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d010      	beq.n	8002246 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002230:	429a      	cmp	r2, r3
 8002232:	d908      	bls.n	8002246 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002234:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4960      	ldr	r1, [pc, #384]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d04c      	beq.n	80022ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225a:	4b5a      	ldr	r3, [pc, #360]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d121      	bne.n	80022aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e0a6      	b.n	80023b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002272:	4b54      	ldr	r3, [pc, #336]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d115      	bne.n	80022aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e09a      	b.n	80023b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800228a:	4b4e      	ldr	r3, [pc, #312]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e08e      	b.n	80023b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e086      	b.n	80023b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022aa:	4b46      	ldr	r3, [pc, #280]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4943      	ldr	r1, [pc, #268]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022bc:	f7fe fe5a 	bl	8000f74 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	e00a      	b.n	80022da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7fe fe56 	bl	8000f74 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e06e      	b.n	80023b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 020c 	and.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d1eb      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002304:	429a      	cmp	r2, r3
 8002306:	d208      	bcs.n	800231a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	492b      	ldr	r1, [pc, #172]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800231a:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <HAL_RCC_ClockConfig+0x1ec>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d210      	bcs.n	800234a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_RCC_ClockConfig+0x1ec>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 0207 	bic.w	r2, r3, #7
 8002330:	4923      	ldr	r1, [pc, #140]	; (80023c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <HAL_RCC_ClockConfig+0x1ec>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d001      	beq.n	800234a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e036      	b.n	80023b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d008      	beq.n	8002368 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	4918      	ldr	r1, [pc, #96]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	4313      	orrs	r3, r2
 8002366:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d009      	beq.n	8002388 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4910      	ldr	r1, [pc, #64]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002388:	f000 f824 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	490b      	ldr	r1, [pc, #44]	; (80023c8 <HAL_RCC_ClockConfig+0x1f4>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	4a09      	ldr	r2, [pc, #36]	; (80023cc <HAL_RCC_ClockConfig+0x1f8>)
 80023a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_RCC_ClockConfig+0x1fc>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fcd3 	bl	8000d58 <HAL_InitTick>
 80023b2:	4603      	mov	r3, r0
 80023b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80023b6:	7afb      	ldrb	r3, [r7, #11]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40022000 	.word	0x40022000
 80023c4:	40021000 	.word	0x40021000
 80023c8:	0800a578 	.word	0x0800a578
 80023cc:	20000000 	.word	0x20000000
 80023d0:	20000004 	.word	0x20000004

080023d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e2:	4b3e      	ldr	r3, [pc, #248]	; (80024dc <HAL_RCC_GetSysClockFreq+0x108>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ec:	4b3b      	ldr	r3, [pc, #236]	; (80024dc <HAL_RCC_GetSysClockFreq+0x108>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x34>
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d121      	bne.n	8002446 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d11e      	bne.n	8002446 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002408:	4b34      	ldr	r3, [pc, #208]	; (80024dc <HAL_RCC_GetSysClockFreq+0x108>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d107      	bne.n	8002424 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002414:	4b31      	ldr	r3, [pc, #196]	; (80024dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	e005      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002424:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002430:	4a2b      	ldr	r2, [pc, #172]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10d      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002444:	e00a      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2b04      	cmp	r3, #4
 800244a:	d102      	bne.n	8002452 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	e004      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d101      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002458:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800245a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	2b0c      	cmp	r3, #12
 8002460:	d134      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002462:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d003      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0xa6>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d003      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0xac>
 8002478:	e005      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800247c:	617b      	str	r3, [r7, #20]
      break;
 800247e:	e005      	b.n	800248c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002482:	617b      	str	r3, [r7, #20]
      break;
 8002484:	e002      	b.n	800248c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	617b      	str	r3, [r7, #20]
      break;
 800248a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_RCC_GetSysClockFreq+0x108>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	3301      	adds	r3, #1
 8002498:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_RCC_GetSysClockFreq+0x108>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	fb03 f202 	mul.w	r2, r3, r2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_RCC_GetSysClockFreq+0x108>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	0e5b      	lsrs	r3, r3, #25
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	3301      	adds	r3, #1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024cc:	69bb      	ldr	r3, [r7, #24]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	0800a590 	.word	0x0800a590
 80024e4:	00f42400 	.word	0x00f42400
 80024e8:	007a1200 	.word	0x007a1200

080024ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000000 	.word	0x20000000

08002504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002508:	f7ff fff0 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4904      	ldr	r1, [pc, #16]	; (800252c <HAL_RCC_GetPCLK1Freq+0x28>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	0800a588 	.word	0x0800a588

08002530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002534:	f7ff ffda 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002538:	4602      	mov	r2, r0
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	0adb      	lsrs	r3, r3, #11
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4904      	ldr	r1, [pc, #16]	; (8002558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	0800a588 	.word	0x0800a588

0800255c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	220f      	movs	r2, #15
 800256a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_GetClockConfig+0x5c>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_RCC_GetClockConfig+0x5c>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	08db      	lsrs	r3, r3, #3
 8002596:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_RCC_GetClockConfig+0x60>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0207 	and.w	r2, r3, #7
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	601a      	str	r2, [r3, #0]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40022000 	.word	0x40022000

080025c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025d8:	f7ff f984 	bl	80018e4 <HAL_PWREx_GetVoltageRange>
 80025dc:	6178      	str	r0, [r7, #20]
 80025de:	e014      	b.n	800260a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b25      	ldr	r3, [pc, #148]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	4a24      	ldr	r2, [pc, #144]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6593      	str	r3, [r2, #88]	; 0x58
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025f8:	f7ff f974 	bl	80018e4 <HAL_PWREx_GetVoltageRange>
 80025fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002610:	d10b      	bne.n	800262a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b80      	cmp	r3, #128	; 0x80
 8002616:	d919      	bls.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2ba0      	cmp	r3, #160	; 0xa0
 800261c:	d902      	bls.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800261e:	2302      	movs	r3, #2
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	e013      	b.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002624:	2301      	movs	r3, #1
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	e010      	b.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b80      	cmp	r3, #128	; 0x80
 800262e:	d902      	bls.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002630:	2303      	movs	r3, #3
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e00a      	b.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b80      	cmp	r3, #128	; 0x80
 800263a:	d102      	bne.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800263c:	2302      	movs	r3, #2
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	e004      	b.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b70      	cmp	r3, #112	; 0x70
 8002646:	d101      	bne.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002648:	2301      	movs	r3, #1
 800264a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 0207 	bic.w	r2, r3, #7
 8002654:	4909      	ldr	r1, [pc, #36]	; (800267c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	40022000 	.word	0x40022000

08002680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002688:	2300      	movs	r3, #0
 800268a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800268c:	2300      	movs	r3, #0
 800268e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002698:	2b00      	cmp	r3, #0
 800269a:	d031      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026a4:	d01a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80026a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026aa:	d814      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d009      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026b4:	d10f      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80026b6:	4b5d      	ldr	r3, [pc, #372]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4a5c      	ldr	r2, [pc, #368]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c2:	e00c      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f9de 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026d4:	e003      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	74fb      	strb	r3, [r7, #19]
      break;
 80026da:	e000      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80026dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026e4:	4b51      	ldr	r3, [pc, #324]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	494e      	ldr	r1, [pc, #312]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026fa:	e001      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 809e 	beq.w	800284a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002712:	4b46      	ldr	r3, [pc, #280]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	4b40      	ldr	r3, [pc, #256]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	4a3f      	ldr	r2, [pc, #252]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002732:	6593      	str	r3, [r2, #88]	; 0x58
 8002734:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002740:	2301      	movs	r3, #1
 8002742:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002744:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a39      	ldr	r2, [pc, #228]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800274a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002750:	f7fe fc10 	bl	8000f74 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002756:	e009      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002758:	f7fe fc0c 	bl	8000f74 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d902      	bls.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	74fb      	strb	r3, [r7, #19]
        break;
 800276a:	e005      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800276c:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ef      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d15a      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002788:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01e      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	429a      	cmp	r2, r3
 8002798:	d019      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	4a1f      	ldr	r2, [pc, #124]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	4a1b      	ldr	r2, [pc, #108]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027c6:	4a19      	ldr	r2, [pc, #100]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d016      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fbcc 	bl	8000f74 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027de:	e00b      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fbc8 	bl	8000f74 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d902      	bls.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	74fb      	strb	r3, [r7, #19]
            break;
 80027f6:	e006      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0ec      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281a:	4904      	ldr	r1, [pc, #16]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002822:	e009      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
 8002828:	e006      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002838:	7c7b      	ldrb	r3, [r7, #17]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d105      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283e:	4b8a      	ldr	r3, [pc, #552]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4a89      	ldr	r2, [pc, #548]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002856:	4b84      	ldr	r3, [pc, #528]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	f023 0203 	bic.w	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4980      	ldr	r1, [pc, #512]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002878:	4b7b      	ldr	r3, [pc, #492]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 020c 	bic.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	4978      	ldr	r1, [pc, #480]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800289a:	4b73      	ldr	r3, [pc, #460]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	496f      	ldr	r1, [pc, #444]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028bc:	4b6a      	ldr	r3, [pc, #424]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	4967      	ldr	r1, [pc, #412]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028de:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	495e      	ldr	r1, [pc, #376]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002900:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	4956      	ldr	r1, [pc, #344]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002922:	4b51      	ldr	r3, [pc, #324]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	494d      	ldr	r1, [pc, #308]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d028      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002944:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4945      	ldr	r1, [pc, #276]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002962:	d106      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002964:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a3f      	ldr	r2, [pc, #252]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800296a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800296e:	60d3      	str	r3, [r2, #12]
 8002970:	e011      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800297a:	d10c      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	2101      	movs	r1, #1
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f882 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d028      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	492d      	ldr	r1, [pc, #180]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c0:	d106      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c2:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a28      	ldr	r2, [pc, #160]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029cc:	60d3      	str	r3, [r2, #12]
 80029ce:	e011      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	2101      	movs	r1, #1
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 f853 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ea:	7cfb      	ldrb	r3, [r7, #19]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01c      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0e:	4916      	ldr	r1, [pc, #88]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	2102      	movs	r1, #2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f830 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a54:	4904      	ldr	r1, [pc, #16]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000

08002a6c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000

08002a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a9a:	4b74      	ldr	r3, [pc, #464]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d018      	beq.n	8002ad8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aa6:	4b71      	ldr	r3, [pc, #452]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0203 	and.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d10d      	bne.n	8002ad2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002abe:	4b6b      	ldr	r3, [pc, #428]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d047      	beq.n	8002b62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
 8002ad6:	e044      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d018      	beq.n	8002b12 <RCCEx_PLLSAI1_Config+0x86>
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d825      	bhi.n	8002b30 <RCCEx_PLLSAI1_Config+0xa4>
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d002      	beq.n	8002aee <RCCEx_PLLSAI1_Config+0x62>
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d009      	beq.n	8002b00 <RCCEx_PLLSAI1_Config+0x74>
 8002aec:	e020      	b.n	8002b30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aee:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11d      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afe:	e01a      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b00:	4b5a      	ldr	r3, [pc, #360]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d116      	bne.n	8002b3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e013      	b.n	8002b3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b12:	4b56      	ldr	r3, [pc, #344]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b1e:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b2e:	e006      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      break;
 8002b34:	e004      	b.n	8002b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10d      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b46:	4b49      	ldr	r3, [pc, #292]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	4943      	ldr	r1, [pc, #268]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d17c      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b68:	4b40      	ldr	r3, [pc, #256]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3f      	ldr	r2, [pc, #252]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b74:	f7fe f9fe 	bl	8000f74 <HAL_GetTick>
 8002b78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b7a:	e009      	b.n	8002b90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b7c:	f7fe f9fa 	bl	8000f74 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d902      	bls.n	8002b90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b8e:	e005      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b90:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ef      	bne.n	8002b7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d15f      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d110      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba8:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002bb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6892      	ldr	r2, [r2, #8]
 8002bb8:	0211      	lsls	r1, r2, #8
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68d2      	ldr	r2, [r2, #12]
 8002bbe:	06d2      	lsls	r2, r2, #27
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	492a      	ldr	r1, [pc, #168]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	610b      	str	r3, [r1, #16]
 8002bc8:	e027      	b.n	8002c1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d112      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd0:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6892      	ldr	r2, [r2, #8]
 8002be0:	0211      	lsls	r1, r2, #8
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6912      	ldr	r2, [r2, #16]
 8002be6:	0852      	lsrs	r2, r2, #1
 8002be8:	3a01      	subs	r2, #1
 8002bea:	0552      	lsls	r2, r2, #21
 8002bec:	430a      	orrs	r2, r1
 8002bee:	491f      	ldr	r1, [pc, #124]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	610b      	str	r3, [r1, #16]
 8002bf4:	e011      	b.n	8002c1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6892      	ldr	r2, [r2, #8]
 8002c06:	0211      	lsls	r1, r2, #8
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6952      	ldr	r2, [r2, #20]
 8002c0c:	0852      	lsrs	r2, r2, #1
 8002c0e:	3a01      	subs	r2, #1
 8002c10:	0652      	lsls	r2, r2, #25
 8002c12:	430a      	orrs	r2, r1
 8002c14:	4915      	ldr	r1, [pc, #84]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7fe f9a5 	bl	8000f74 <HAL_GetTick>
 8002c2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c2c:	e009      	b.n	8002c42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c2e:	f7fe f9a1 	bl	8000f74 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d902      	bls.n	8002c42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	73fb      	strb	r3, [r7, #15]
          break;
 8002c40:	e005      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0ef      	beq.n	8002c2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d106      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4903      	ldr	r1, [pc, #12]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000

08002c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e049      	b.n	8002d16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f841 	bl	8002d1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f000 ff04 	bl	8003abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e03b      	b.n	8002dc4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_TIM_Base_Start_IT+0x4e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d76:	d004      	beq.n	8002d82 <HAL_TIM_Base_Start_IT+0x4e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d115      	bne.n	8002dae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_TIM_Base_Start_IT+0xa4>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b06      	cmp	r3, #6
 8002d92:	d015      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x8c>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9a:	d011      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dac:	e008      	b.n	8002dc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e000      	b.n	8002dc2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40014000 	.word	0x40014000
 8002dd8:	00010007 	.word	0x00010007

08002ddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e049      	b.n	8002e82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd feaa 	bl	8000b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 fe4e 	bl	8003abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e03c      	b.n	8002f32 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d109      	bne.n	8002ed2 <HAL_TIM_PWM_Start_DMA+0x46>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	bf0c      	ite	eq
 8002eca:	2301      	moveq	r3, #1
 8002ecc:	2300      	movne	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	e02f      	b.n	8002f32 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d109      	bne.n	8002eec <HAL_TIM_PWM_Start_DMA+0x60>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e022      	b.n	8002f32 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d109      	bne.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	bf0c      	ite	eq
 8002efe:	2301      	moveq	r3, #1
 8002f00:	2300      	movne	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	e015      	b.n	8002f32 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d109      	bne.n	8002f20 <HAL_TIM_PWM_Start_DMA+0x94>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e008      	b.n	8002f32 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
 8002f38:	e18d      	b.n	8003256 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e03c      	b.n	8002fce <HAL_TIM_PWM_Start_DMA+0x142>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d109      	bne.n	8002f6e <HAL_TIM_PWM_Start_DMA+0xe2>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	e02f      	b.n	8002fce <HAL_TIM_PWM_Start_DMA+0x142>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d109      	bne.n	8002f88 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e022      	b.n	8002fce <HAL_TIM_PWM_Start_DMA+0x142>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d109      	bne.n	8002fa2 <HAL_TIM_PWM_Start_DMA+0x116>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	e015      	b.n	8002fce <HAL_TIM_PWM_Start_DMA+0x142>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d109      	bne.n	8002fbc <HAL_TIM_PWM_Start_DMA+0x130>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e008      	b.n	8002fce <HAL_TIM_PWM_Start_DMA+0x142>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d034      	beq.n	800303c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_TIM_PWM_Start_DMA+0x152>
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e139      	b.n	8003256 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d104      	bne.n	8002ff2 <HAL_TIM_PWM_Start_DMA+0x166>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff0:	e026      	b.n	8003040 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d104      	bne.n	8003002 <HAL_TIM_PWM_Start_DMA+0x176>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003000:	e01e      	b.n	8003040 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d104      	bne.n	8003012 <HAL_TIM_PWM_Start_DMA+0x186>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003010:	e016      	b.n	8003040 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b0c      	cmp	r3, #12
 8003016:	d104      	bne.n	8003022 <HAL_TIM_PWM_Start_DMA+0x196>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003020:	e00e      	b.n	8003040 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b10      	cmp	r3, #16
 8003026:	d104      	bne.n	8003032 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003030:	e006      	b.n	8003040 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2202      	movs	r2, #2
 8003036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800303a:	e001      	b.n	8003040 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e10a      	b.n	8003256 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b0c      	cmp	r3, #12
 8003044:	f200 80ae 	bhi.w	80031a4 <HAL_TIM_PWM_Start_DMA+0x318>
 8003048:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003085 	.word	0x08003085
 8003054:	080031a5 	.word	0x080031a5
 8003058:	080031a5 	.word	0x080031a5
 800305c:	080031a5 	.word	0x080031a5
 8003060:	080030cd 	.word	0x080030cd
 8003064:	080031a5 	.word	0x080031a5
 8003068:	080031a5 	.word	0x080031a5
 800306c:	080031a5 	.word	0x080031a5
 8003070:	08003115 	.word	0x08003115
 8003074:	080031a5 	.word	0x080031a5
 8003078:	080031a5 	.word	0x080031a5
 800307c:	080031a5 	.word	0x080031a5
 8003080:	0800315d 	.word	0x0800315d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	4a75      	ldr	r2, [pc, #468]	; (8003260 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	4a74      	ldr	r2, [pc, #464]	; (8003264 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003092:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	4a73      	ldr	r2, [pc, #460]	; (8003268 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800309a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3334      	adds	r3, #52	; 0x34
 80030a8:	461a      	mov	r2, r3
 80030aa:	887b      	ldrh	r3, [r7, #2]
 80030ac:	f7fe f908 	bl	80012c0 <HAL_DMA_Start_IT>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0cd      	b.n	8003256 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c8:	60da      	str	r2, [r3, #12]
      break;
 80030ca:	e06e      	b.n	80031aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	4a63      	ldr	r2, [pc, #396]	; (8003260 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	4a62      	ldr	r2, [pc, #392]	; (8003264 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80030da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	4a61      	ldr	r2, [pc, #388]	; (8003268 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80030e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3338      	adds	r3, #56	; 0x38
 80030f0:	461a      	mov	r2, r3
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	f7fe f8e4 	bl	80012c0 <HAL_DMA_Start_IT>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0a9      	b.n	8003256 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003110:	60da      	str	r2, [r3, #12]
      break;
 8003112:	e04a      	b.n	80031aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4a51      	ldr	r2, [pc, #324]	; (8003260 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	4a50      	ldr	r2, [pc, #320]	; (8003264 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003122:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	4a4f      	ldr	r2, [pc, #316]	; (8003268 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800312a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	333c      	adds	r3, #60	; 0x3c
 8003138:	461a      	mov	r2, r3
 800313a:	887b      	ldrh	r3, [r7, #2]
 800313c:	f7fe f8c0 	bl	80012c0 <HAL_DMA_Start_IT>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e085      	b.n	8003256 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003158:	60da      	str	r2, [r3, #12]
      break;
 800315a:	e026      	b.n	80031aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	4a3f      	ldr	r2, [pc, #252]	; (8003260 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	4a3e      	ldr	r2, [pc, #248]	; (8003264 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800316a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	4a3d      	ldr	r2, [pc, #244]	; (8003268 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003172:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3340      	adds	r3, #64	; 0x40
 8003180:	461a      	mov	r2, r3
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	f7fe f89c 	bl	80012c0 <HAL_DMA_Start_IT>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e061      	b.n	8003256 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031a0:	60da      	str	r2, [r3, #12]
      break;
 80031a2:	e002      	b.n	80031aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
      break;
 80031a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d151      	bne.n	8003254 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2201      	movs	r2, #1
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 ff61 	bl	8004080 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a2a      	ldr	r2, [pc, #168]	; (800326c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d009      	beq.n	80031dc <HAL_TIM_PWM_Start_DMA+0x350>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a28      	ldr	r2, [pc, #160]	; (8003270 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <HAL_TIM_PWM_Start_DMA+0x350>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a27      	ldr	r2, [pc, #156]	; (8003274 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_TIM_PWM_Start_DMA+0x354>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_TIM_PWM_Start_DMA+0x356>
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1c      	ldr	r2, [pc, #112]	; (800326c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_TIM_PWM_Start_DMA+0x388>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d004      	beq.n	8003214 <HAL_TIM_PWM_Start_DMA+0x388>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a18      	ldr	r2, [pc, #96]	; (8003270 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d115      	bne.n	8003240 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	4b17      	ldr	r3, [pc, #92]	; (8003278 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b06      	cmp	r3, #6
 8003224:	d015      	beq.n	8003252 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d011      	beq.n	8003252 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0201 	orr.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323e:	e008      	b.n	8003252 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e000      	b.n	8003254 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003252:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003254:	7dfb      	ldrb	r3, [r7, #23]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	080039ab 	.word	0x080039ab
 8003264:	08003a53 	.word	0x08003a53
 8003268:	08003919 	.word	0x08003919
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40014000 	.word	0x40014000
 8003274:	40014400 	.word	0x40014400
 8003278:	00010007 	.word	0x00010007

0800327c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b0c      	cmp	r3, #12
 800328e:	d855      	bhi.n	800333c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003290:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032cd 	.word	0x080032cd
 800329c:	0800333d 	.word	0x0800333d
 80032a0:	0800333d 	.word	0x0800333d
 80032a4:	0800333d 	.word	0x0800333d
 80032a8:	080032e9 	.word	0x080032e9
 80032ac:	0800333d 	.word	0x0800333d
 80032b0:	0800333d 	.word	0x0800333d
 80032b4:	0800333d 	.word	0x0800333d
 80032b8:	08003305 	.word	0x08003305
 80032bc:	0800333d 	.word	0x0800333d
 80032c0:	0800333d 	.word	0x0800333d
 80032c4:	0800333d 	.word	0x0800333d
 80032c8:	08003321 	.word	0x08003321
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe f84d 	bl	8001380 <HAL_DMA_Abort_IT>
      break;
 80032e6:	e02c      	b.n	8003342 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe f83f 	bl	8001380 <HAL_DMA_Abort_IT>
      break;
 8003302:	e01e      	b.n	8003342 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003312:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe f831 	bl	8001380 <HAL_DMA_Abort_IT>
      break;
 800331e:	e010      	b.n	8003342 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800332e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe f823 	bl	8001380 <HAL_DMA_Abort_IT>
      break;
 800333a:	e002      	b.n	8003342 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      break;
 8003340:	bf00      	nop
  }

  if (status == HAL_OK)
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d176      	bne.n	8003436 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2200      	movs	r2, #0
 800334e:	6839      	ldr	r1, [r7, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fe95 	bl	8004080 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a39      	ldr	r2, [pc, #228]	; (8003440 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a37      	ldr	r2, [pc, #220]	; (8003444 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a36      	ldr	r2, [pc, #216]	; (8003448 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	f241 1311 	movw	r3, #4369	; 0x1111
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10f      	bne.n	80033ae <HAL_TIM_PWM_Stop_DMA+0x132>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a1a      	ldr	r2, [r3, #32]
 8003394:	f240 4344 	movw	r3, #1092	; 0x444
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d107      	bne.n	80033ae <HAL_TIM_PWM_Stop_DMA+0x132>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a1a      	ldr	r2, [r3, #32]
 80033b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <HAL_TIM_PWM_Stop_DMA+0x162>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	f240 4344 	movw	r3, #1092	; 0x444
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <HAL_TIM_PWM_Stop_DMA+0x162>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d104      	bne.n	80033ee <HAL_TIM_PWM_Stop_DMA+0x172>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ec:	e023      	b.n	8003436 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d104      	bne.n	80033fe <HAL_TIM_PWM_Stop_DMA+0x182>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033fc:	e01b      	b.n	8003436 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d104      	bne.n	800340e <HAL_TIM_PWM_Stop_DMA+0x192>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800340c:	e013      	b.n	8003436 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	d104      	bne.n	800341e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800341c:	e00b      	b.n	8003436 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b10      	cmp	r3, #16
 8003422:	d104      	bne.n	800342e <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342c:	e003      	b.n	8003436 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400

0800344c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d122      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b02      	cmp	r3, #2
 800346e:	d11b      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0202 	mvn.w	r2, #2
 8003478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa1a 	bl	80038c8 <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa0c 	bl	80038b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fd fac7 	bl	8000a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d122      	bne.n	80034fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d11b      	bne.n	80034fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0204 	mvn.w	r2, #4
 80034cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f9f0 	bl	80038c8 <HAL_TIM_IC_CaptureCallback>
 80034e8:	e005      	b.n	80034f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f9e2 	bl	80038b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7fd fa9d 	bl	8000a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b08      	cmp	r3, #8
 8003508:	d122      	bne.n	8003550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b08      	cmp	r3, #8
 8003516:	d11b      	bne.n	8003550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0208 	mvn.w	r2, #8
 8003520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2204      	movs	r2, #4
 8003526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9c6 	bl	80038c8 <HAL_TIM_IC_CaptureCallback>
 800353c:	e005      	b.n	800354a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9b8 	bl	80038b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7fd fa73 	bl	8000a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b10      	cmp	r3, #16
 800355c:	d122      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b10      	cmp	r3, #16
 800356a:	d11b      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0210 	mvn.w	r2, #16
 8003574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2208      	movs	r2, #8
 800357a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f99c 	bl	80038c8 <HAL_TIM_IC_CaptureCallback>
 8003590:	e005      	b.n	800359e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f98e 	bl	80038b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7fd fa49 	bl	8000a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d10e      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0201 	mvn.w	r2, #1
 80035c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fa86 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	2b80      	cmp	r3, #128	; 0x80
 80035dc:	d10e      	bne.n	80035fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d107      	bne.n	80035fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fe50 	bl	800429c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360a:	d10e      	bne.n	800362a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d107      	bne.n	800362a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fe43 	bl	80042b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d10e      	bne.n	8003656 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d107      	bne.n	8003656 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800364e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f94d 	bl	80038f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d10e      	bne.n	8003682 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b20      	cmp	r3, #32
 8003670:	d107      	bne.n	8003682 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0220 	mvn.w	r2, #32
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fe03 	bl	8004288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e0ff      	b.n	80038aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b14      	cmp	r3, #20
 80036b6:	f200 80f0 	bhi.w	800389a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	08003715 	.word	0x08003715
 80036c4:	0800389b 	.word	0x0800389b
 80036c8:	0800389b 	.word	0x0800389b
 80036cc:	0800389b 	.word	0x0800389b
 80036d0:	08003755 	.word	0x08003755
 80036d4:	0800389b 	.word	0x0800389b
 80036d8:	0800389b 	.word	0x0800389b
 80036dc:	0800389b 	.word	0x0800389b
 80036e0:	08003797 	.word	0x08003797
 80036e4:	0800389b 	.word	0x0800389b
 80036e8:	0800389b 	.word	0x0800389b
 80036ec:	0800389b 	.word	0x0800389b
 80036f0:	080037d7 	.word	0x080037d7
 80036f4:	0800389b 	.word	0x0800389b
 80036f8:	0800389b 	.word	0x0800389b
 80036fc:	0800389b 	.word	0x0800389b
 8003700:	08003819 	.word	0x08003819
 8003704:	0800389b 	.word	0x0800389b
 8003708:	0800389b 	.word	0x0800389b
 800370c:	0800389b 	.word	0x0800389b
 8003710:	08003859 	.word	0x08003859
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fa32 	bl	8003b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0208 	orr.w	r2, r2, #8
 800372e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0204 	bic.w	r2, r2, #4
 800373e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6999      	ldr	r1, [r3, #24]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	619a      	str	r2, [r3, #24]
      break;
 8003752:	e0a5      	b.n	80038a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fa8e 	bl	8003c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6999      	ldr	r1, [r3, #24]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	021a      	lsls	r2, r3, #8
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	619a      	str	r2, [r3, #24]
      break;
 8003794:	e084      	b.n	80038a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fae7 	bl	8003d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0208 	orr.w	r2, r2, #8
 80037b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0204 	bic.w	r2, r2, #4
 80037c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69d9      	ldr	r1, [r3, #28]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	61da      	str	r2, [r3, #28]
      break;
 80037d4:	e064      	b.n	80038a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fb3f 	bl	8003e60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	021a      	lsls	r2, r3, #8
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	61da      	str	r2, [r3, #28]
      break;
 8003816:	e043      	b.n	80038a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fb7c 	bl	8003f1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0208 	orr.w	r2, r2, #8
 8003832:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0204 	bic.w	r2, r2, #4
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003856:	e023      	b.n	80038a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fbb4 	bl	8003fcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003872:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	021a      	lsls	r2, r3, #8
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003898:	e002      	b.n	80038a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	75fb      	strb	r3, [r7, #23]
      break;
 800389e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop

080038b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	d107      	bne.n	8003940 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800393e:	e02a      	b.n	8003996 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	429a      	cmp	r2, r3
 8003948:	d107      	bne.n	800395a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2202      	movs	r2, #2
 800394e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	e01d      	b.n	8003996 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	429a      	cmp	r2, r3
 8003962:	d107      	bne.n	8003974 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2204      	movs	r2, #4
 8003968:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003972:	e010      	b.n	8003996 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d107      	bne.n	800398e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2208      	movs	r2, #8
 8003982:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800398c:	e003      	b.n	8003996 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff ffb4 	bl	8003904 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	771a      	strb	r2, [r3, #28]
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d10b      	bne.n	80039da <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d136      	bne.n	8003a3e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d8:	e031      	b.n	8003a3e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d10b      	bne.n	80039fc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2202      	movs	r2, #2
 80039e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d125      	bne.n	8003a3e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039fa:	e020      	b.n	8003a3e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d10b      	bne.n	8003a1e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d114      	bne.n	8003a3e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1c:	e00f      	b.n	8003a3e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d10a      	bne.n	8003a3e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7fc fff6 	bl	8000a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	771a      	strb	r2, [r3, #28]
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d103      	bne.n	8003a72 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	771a      	strb	r2, [r3, #28]
 8003a70:	e019      	b.n	8003aa6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d103      	bne.n	8003a84 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	771a      	strb	r2, [r3, #28]
 8003a82:	e010      	b.n	8003aa6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d103      	bne.n	8003a96 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2204      	movs	r2, #4
 8003a92:	771a      	strb	r2, [r3, #28]
 8003a94:	e007      	b.n	8003aa6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d102      	bne.n	8003aa6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f7ff ff18 	bl	80038dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	771a      	strb	r2, [r3, #28]
}
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a2a      	ldr	r2, [pc, #168]	; (8003b78 <TIM_Base_SetConfig+0xbc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_Base_SetConfig+0x20>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ada:	d108      	bne.n	8003aee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <TIM_Base_SetConfig+0xbc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00b      	beq.n	8003b0e <TIM_Base_SetConfig+0x52>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afc:	d007      	beq.n	8003b0e <TIM_Base_SetConfig+0x52>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1e      	ldr	r2, [pc, #120]	; (8003b7c <TIM_Base_SetConfig+0xc0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_Base_SetConfig+0x52>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <TIM_Base_SetConfig+0xc4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d108      	bne.n	8003b20 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a0c      	ldr	r2, [pc, #48]	; (8003b78 <TIM_Base_SetConfig+0xbc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d007      	beq.n	8003b5c <TIM_Base_SetConfig+0xa0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <TIM_Base_SetConfig+0xc0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_Base_SetConfig+0xa0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <TIM_Base_SetConfig+0xc4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d103      	bne.n	8003b64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	615a      	str	r2, [r3, #20]
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400

08003b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f023 0201 	bic.w	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f023 0302 	bic.w	r3, r3, #2
 8003bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a24      	ldr	r2, [pc, #144]	; (8003c70 <TIM_OC1_SetConfig+0xec>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <TIM_OC1_SetConfig+0x70>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a23      	ldr	r2, [pc, #140]	; (8003c74 <TIM_OC1_SetConfig+0xf0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_OC1_SetConfig+0x70>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a22      	ldr	r2, [pc, #136]	; (8003c78 <TIM_OC1_SetConfig+0xf4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10c      	bne.n	8003c0e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0308 	bic.w	r3, r3, #8
 8003bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <TIM_OC1_SetConfig+0xec>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <TIM_OC1_SetConfig+0xa2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <TIM_OC1_SetConfig+0xf0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_OC1_SetConfig+0xa2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <TIM_OC1_SetConfig+0xf4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d111      	bne.n	8003c4a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	621a      	str	r2, [r3, #32]
}
 8003c64:	bf00      	nop
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40012c00 	.word	0x40012c00
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40014400 	.word	0x40014400

08003c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f023 0210 	bic.w	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0320 	bic.w	r3, r3, #32
 8003cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <TIM_OC2_SetConfig+0xe8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d10d      	bne.n	8003cfc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a19      	ldr	r2, [pc, #100]	; (8003d64 <TIM_OC2_SetConfig+0xe8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d007      	beq.n	8003d14 <TIM_OC2_SetConfig+0x98>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <TIM_OC2_SetConfig+0xec>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <TIM_OC2_SetConfig+0x98>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <TIM_OC2_SetConfig+0xf0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d113      	bne.n	8003d3c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40014400 	.word	0x40014400

08003d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <TIM_OC3_SetConfig+0xe4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10d      	bne.n	8003dee <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <TIM_OC3_SetConfig+0xe4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d007      	beq.n	8003e06 <TIM_OC3_SetConfig+0x96>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <TIM_OC3_SetConfig+0xe8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <TIM_OC3_SetConfig+0x96>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a16      	ldr	r2, [pc, #88]	; (8003e5c <TIM_OC3_SetConfig+0xec>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d113      	bne.n	8003e2e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400

08003e60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	031b      	lsls	r3, r3, #12
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <TIM_OC4_SetConfig+0xb0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <TIM_OC4_SetConfig+0x74>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <TIM_OC4_SetConfig+0xb4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_OC4_SetConfig+0x74>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <TIM_OC4_SetConfig+0xb8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d109      	bne.n	8003ee8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	019b      	lsls	r3, r3, #6
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40014400 	.word	0x40014400

08003f1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <TIM_OC5_SetConfig+0xa4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d007      	beq.n	8003f86 <TIM_OC5_SetConfig+0x6a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <TIM_OC5_SetConfig+0xa8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <TIM_OC5_SetConfig+0x6a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <TIM_OC5_SetConfig+0xac>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d109      	bne.n	8003f9a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	621a      	str	r2, [r3, #32]
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400

08003fcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	051b      	lsls	r3, r3, #20
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a14      	ldr	r2, [pc, #80]	; (8004074 <TIM_OC6_SetConfig+0xa8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_OC6_SetConfig+0x6c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a13      	ldr	r2, [pc, #76]	; (8004078 <TIM_OC6_SetConfig+0xac>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_OC6_SetConfig+0x6c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a12      	ldr	r2, [pc, #72]	; (800407c <TIM_OC6_SetConfig+0xb0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d109      	bne.n	800404c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800403e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	029b      	lsls	r3, r3, #10
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	621a      	str	r2, [r3, #32]
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400

08004080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2201      	movs	r2, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1a      	ldr	r2, [r3, #32]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	401a      	ands	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a1a      	ldr	r2, [r3, #32]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	fa01 f303 	lsl.w	r3, r1, r3
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e04f      	b.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a21      	ldr	r2, [pc, #132]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d108      	bne.n	8004120 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004114:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a14      	ldr	r2, [pc, #80]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d009      	beq.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414c:	d004      	beq.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a10      	ldr	r2, [pc, #64]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10c      	bne.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	4313      	orrs	r3, r2
 8004168:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40012c00 	.word	0x40012c00
 8004194:	40014000 	.word	0x40014000

08004198 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e060      	b.n	8004276 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a14      	ldr	r2, [pc, #80]	; (8004284 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d115      	bne.n	8004264 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	051b      	lsls	r3, r3, #20
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40012c00 	.word	0x40012c00

08004288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e040      	b.n	8004358 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc fccc 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	; 0x24
 80042f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f82c 	bl	8004360 <UART_SetConfig>
 8004308:	4603      	mov	r3, r0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e022      	b.n	8004358 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa4c 	bl	80047b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800432e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800433e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fad3 	bl	80048fc <UART_CheckIdleState>
 8004356:	4603      	mov	r3, r0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004364:	b08a      	sub	sp, #40	; 0x28
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	431a      	orrs	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	431a      	orrs	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	4313      	orrs	r3, r2
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4bb4      	ldr	r3, [pc, #720]	; (8004660 <UART_SetConfig+0x300>)
 8004390:	4013      	ands	r3, r2
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004398:	430b      	orrs	r3, r1
 800439a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4aa9      	ldr	r2, [pc, #676]	; (8004664 <UART_SetConfig+0x304>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c8:	4313      	orrs	r3, r2
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	430a      	orrs	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4aa0      	ldr	r2, [pc, #640]	; (8004668 <UART_SetConfig+0x308>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d126      	bne.n	8004438 <UART_SetConfig+0xd8>
 80043ea:	4ba0      	ldr	r3, [pc, #640]	; (800466c <UART_SetConfig+0x30c>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d81b      	bhi.n	8004430 <UART_SetConfig+0xd0>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <UART_SetConfig+0xa0>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004411 	.word	0x08004411
 8004404:	08004421 	.word	0x08004421
 8004408:	08004419 	.word	0x08004419
 800440c:	08004429 	.word	0x08004429
 8004410:	2301      	movs	r3, #1
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004416:	e080      	b.n	800451a <UART_SetConfig+0x1ba>
 8004418:	2302      	movs	r3, #2
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441e:	e07c      	b.n	800451a <UART_SetConfig+0x1ba>
 8004420:	2304      	movs	r3, #4
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e078      	b.n	800451a <UART_SetConfig+0x1ba>
 8004428:	2308      	movs	r3, #8
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	e074      	b.n	800451a <UART_SetConfig+0x1ba>
 8004430:	2310      	movs	r3, #16
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e070      	b.n	800451a <UART_SetConfig+0x1ba>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a8c      	ldr	r2, [pc, #560]	; (8004670 <UART_SetConfig+0x310>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d138      	bne.n	80044b4 <UART_SetConfig+0x154>
 8004442:	4b8a      	ldr	r3, [pc, #552]	; (800466c <UART_SetConfig+0x30c>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b0c      	cmp	r3, #12
 800444e:	d82d      	bhi.n	80044ac <UART_SetConfig+0x14c>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <UART_SetConfig+0xf8>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	0800448d 	.word	0x0800448d
 800445c:	080044ad 	.word	0x080044ad
 8004460:	080044ad 	.word	0x080044ad
 8004464:	080044ad 	.word	0x080044ad
 8004468:	0800449d 	.word	0x0800449d
 800446c:	080044ad 	.word	0x080044ad
 8004470:	080044ad 	.word	0x080044ad
 8004474:	080044ad 	.word	0x080044ad
 8004478:	08004495 	.word	0x08004495
 800447c:	080044ad 	.word	0x080044ad
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044a5 	.word	0x080044a5
 800448c:	2300      	movs	r3, #0
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004492:	e042      	b.n	800451a <UART_SetConfig+0x1ba>
 8004494:	2302      	movs	r3, #2
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449a:	e03e      	b.n	800451a <UART_SetConfig+0x1ba>
 800449c:	2304      	movs	r3, #4
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a2:	e03a      	b.n	800451a <UART_SetConfig+0x1ba>
 80044a4:	2308      	movs	r3, #8
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044aa:	e036      	b.n	800451a <UART_SetConfig+0x1ba>
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b2:	e032      	b.n	800451a <UART_SetConfig+0x1ba>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a6a      	ldr	r2, [pc, #424]	; (8004664 <UART_SetConfig+0x304>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d12a      	bne.n	8004514 <UART_SetConfig+0x1b4>
 80044be:	4b6b      	ldr	r3, [pc, #428]	; (800466c <UART_SetConfig+0x30c>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044cc:	d01a      	beq.n	8004504 <UART_SetConfig+0x1a4>
 80044ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044d2:	d81b      	bhi.n	800450c <UART_SetConfig+0x1ac>
 80044d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d8:	d00c      	beq.n	80044f4 <UART_SetConfig+0x194>
 80044da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044de:	d815      	bhi.n	800450c <UART_SetConfig+0x1ac>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <UART_SetConfig+0x18c>
 80044e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e8:	d008      	beq.n	80044fc <UART_SetConfig+0x19c>
 80044ea:	e00f      	b.n	800450c <UART_SetConfig+0x1ac>
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e012      	b.n	800451a <UART_SetConfig+0x1ba>
 80044f4:	2302      	movs	r3, #2
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fa:	e00e      	b.n	800451a <UART_SetConfig+0x1ba>
 80044fc:	2304      	movs	r3, #4
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004502:	e00a      	b.n	800451a <UART_SetConfig+0x1ba>
 8004504:	2308      	movs	r3, #8
 8004506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450a:	e006      	b.n	800451a <UART_SetConfig+0x1ba>
 800450c:	2310      	movs	r3, #16
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004512:	e002      	b.n	800451a <UART_SetConfig+0x1ba>
 8004514:	2310      	movs	r3, #16
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a51      	ldr	r2, [pc, #324]	; (8004664 <UART_SetConfig+0x304>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d17a      	bne.n	800461a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004528:	2b08      	cmp	r3, #8
 800452a:	d824      	bhi.n	8004576 <UART_SetConfig+0x216>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <UART_SetConfig+0x1d4>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004559 	.word	0x08004559
 8004538:	08004577 	.word	0x08004577
 800453c:	08004561 	.word	0x08004561
 8004540:	08004577 	.word	0x08004577
 8004544:	08004567 	.word	0x08004567
 8004548:	08004577 	.word	0x08004577
 800454c:	08004577 	.word	0x08004577
 8004550:	08004577 	.word	0x08004577
 8004554:	0800456f 	.word	0x0800456f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fd ffd4 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 800455c:	61f8      	str	r0, [r7, #28]
        break;
 800455e:	e010      	b.n	8004582 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004560:	4b44      	ldr	r3, [pc, #272]	; (8004674 <UART_SetConfig+0x314>)
 8004562:	61fb      	str	r3, [r7, #28]
        break;
 8004564:	e00d      	b.n	8004582 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004566:	f7fd ff35 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 800456a:	61f8      	str	r0, [r7, #28]
        break;
 800456c:	e009      	b.n	8004582 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004572:	61fb      	str	r3, [r7, #28]
        break;
 8004574:	e005      	b.n	8004582 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004580:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8107 	beq.w	8004798 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	4413      	add	r3, r2
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	429a      	cmp	r2, r3
 8004598:	d305      	bcc.n	80045a6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d903      	bls.n	80045ae <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045ac:	e0f4      	b.n	8004798 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	2200      	movs	r2, #0
 80045b2:	461c      	mov	r4, r3
 80045b4:	4615      	mov	r5, r2
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	022b      	lsls	r3, r5, #8
 80045c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045c4:	0222      	lsls	r2, r4, #8
 80045c6:	68f9      	ldr	r1, [r7, #12]
 80045c8:	6849      	ldr	r1, [r1, #4]
 80045ca:	0849      	lsrs	r1, r1, #1
 80045cc:	2000      	movs	r0, #0
 80045ce:	4688      	mov	r8, r1
 80045d0:	4681      	mov	r9, r0
 80045d2:	eb12 0a08 	adds.w	sl, r2, r8
 80045d6:	eb43 0b09 	adc.w	fp, r3, r9
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e8:	4650      	mov	r0, sl
 80045ea:	4659      	mov	r1, fp
 80045ec:	f7fb fdf0 	bl	80001d0 <__aeabi_uldivmod>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4613      	mov	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fe:	d308      	bcc.n	8004612 <UART_SetConfig+0x2b2>
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004606:	d204      	bcs.n	8004612 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	60da      	str	r2, [r3, #12]
 8004610:	e0c2      	b.n	8004798 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004618:	e0be      	b.n	8004798 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004622:	d16a      	bne.n	80046fa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004628:	2b08      	cmp	r3, #8
 800462a:	d834      	bhi.n	8004696 <UART_SetConfig+0x336>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <UART_SetConfig+0x2d4>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004659 	.word	0x08004659
 8004638:	08004679 	.word	0x08004679
 800463c:	08004681 	.word	0x08004681
 8004640:	08004697 	.word	0x08004697
 8004644:	08004687 	.word	0x08004687
 8004648:	08004697 	.word	0x08004697
 800464c:	08004697 	.word	0x08004697
 8004650:	08004697 	.word	0x08004697
 8004654:	0800468f 	.word	0x0800468f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004658:	f7fd ff54 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 800465c:	61f8      	str	r0, [r7, #28]
        break;
 800465e:	e020      	b.n	80046a2 <UART_SetConfig+0x342>
 8004660:	efff69f3 	.word	0xefff69f3
 8004664:	40008000 	.word	0x40008000
 8004668:	40013800 	.word	0x40013800
 800466c:	40021000 	.word	0x40021000
 8004670:	40004400 	.word	0x40004400
 8004674:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004678:	f7fd ff5a 	bl	8002530 <HAL_RCC_GetPCLK2Freq>
 800467c:	61f8      	str	r0, [r7, #28]
        break;
 800467e:	e010      	b.n	80046a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004680:	4b4c      	ldr	r3, [pc, #304]	; (80047b4 <UART_SetConfig+0x454>)
 8004682:	61fb      	str	r3, [r7, #28]
        break;
 8004684:	e00d      	b.n	80046a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004686:	f7fd fea5 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 800468a:	61f8      	str	r0, [r7, #28]
        break;
 800468c:	e009      	b.n	80046a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800468e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004692:	61fb      	str	r3, [r7, #28]
        break;
 8004694:	e005      	b.n	80046a2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d077      	beq.n	8004798 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	005a      	lsls	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	441a      	add	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b0f      	cmp	r3, #15
 80046c2:	d916      	bls.n	80046f2 <UART_SetConfig+0x392>
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ca:	d212      	bcs.n	80046f2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	f023 030f 	bic.w	r3, r3, #15
 80046d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	8afb      	ldrh	r3, [r7, #22]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	8afa      	ldrh	r2, [r7, #22]
 80046ee:	60da      	str	r2, [r3, #12]
 80046f0:	e052      	b.n	8004798 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046f8:	e04e      	b.n	8004798 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d827      	bhi.n	8004752 <UART_SetConfig+0x3f2>
 8004702:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <UART_SetConfig+0x3a8>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	0800472d 	.word	0x0800472d
 800470c:	08004735 	.word	0x08004735
 8004710:	0800473d 	.word	0x0800473d
 8004714:	08004753 	.word	0x08004753
 8004718:	08004743 	.word	0x08004743
 800471c:	08004753 	.word	0x08004753
 8004720:	08004753 	.word	0x08004753
 8004724:	08004753 	.word	0x08004753
 8004728:	0800474b 	.word	0x0800474b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800472c:	f7fd feea 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 8004730:	61f8      	str	r0, [r7, #28]
        break;
 8004732:	e014      	b.n	800475e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004734:	f7fd fefc 	bl	8002530 <HAL_RCC_GetPCLK2Freq>
 8004738:	61f8      	str	r0, [r7, #28]
        break;
 800473a:	e010      	b.n	800475e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <UART_SetConfig+0x454>)
 800473e:	61fb      	str	r3, [r7, #28]
        break;
 8004740:	e00d      	b.n	800475e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004742:	f7fd fe47 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8004746:	61f8      	str	r0, [r7, #28]
        break;
 8004748:	e009      	b.n	800475e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474e:	61fb      	str	r3, [r7, #28]
        break;
 8004750:	e005      	b.n	800475e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800475c:	bf00      	nop
    }

    if (pclk != 0U)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d019      	beq.n	8004798 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	085a      	lsrs	r2, r3, #1
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	441a      	add	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	fbb2 f3f3 	udiv	r3, r2, r3
 8004776:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b0f      	cmp	r3, #15
 800477c:	d909      	bls.n	8004792 <UART_SetConfig+0x432>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004784:	d205      	bcs.n	8004792 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60da      	str	r2, [r3, #12]
 8004790:	e002      	b.n	8004798 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3728      	adds	r7, #40	; 0x28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b2:	bf00      	nop
 80047b4:	00f42400 	.word	0x00f42400

080047b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01a      	beq.n	80048ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b6:	d10a      	bne.n	80048ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	605a      	str	r2, [r3, #4]
  }
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af02      	add	r7, sp, #8
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800490c:	f7fc fb32 	bl	8000f74 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d10e      	bne.n	800493e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f82d 	bl	800498e <UART_WaitOnFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e023      	b.n	8004986 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b04      	cmp	r3, #4
 800494a:	d10e      	bne.n	800496a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800494c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f817 	bl	800498e <UART_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e00d      	b.n	8004986 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b09c      	sub	sp, #112	; 0x70
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499e:	e0a5      	b.n	8004aec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a6:	f000 80a1 	beq.w	8004aec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049aa:	f7fc fae3 	bl	8000f74 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d302      	bcc.n	80049c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80049ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d13e      	bne.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049d4:	667b      	str	r3, [r7, #100]	; 0x64
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e6      	bne.n	80049c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3308      	adds	r3, #8
 80049f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	663b      	str	r3, [r7, #96]	; 0x60
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3308      	adds	r3, #8
 8004a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a12:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a1a:	e841 2300 	strex	r3, r2, [r1]
 8004a1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e5      	bne.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e067      	b.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d04f      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5a:	d147      	bne.n	8004aec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a64:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a84:	637b      	str	r3, [r7, #52]	; 0x34
 8004a86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e6      	bne.n	8004a66 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ab8:	623a      	str	r2, [r7, #32]
 8004aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	69f9      	ldr	r1, [r7, #28]
 8004abe:	6a3a      	ldr	r2, [r7, #32]
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e010      	b.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69da      	ldr	r2, [r3, #28]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4013      	ands	r3, r2
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	f43f af4a 	beq.w	80049a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3770      	adds	r7, #112	; 0x70
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <__NVIC_SetPriority>:
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	6039      	str	r1, [r7, #0]
 8004b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	db0a      	blt.n	8004b42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	490c      	ldr	r1, [pc, #48]	; (8004b64 <__NVIC_SetPriority+0x4c>)
 8004b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b36:	0112      	lsls	r2, r2, #4
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b40:	e00a      	b.n	8004b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4908      	ldr	r1, [pc, #32]	; (8004b68 <__NVIC_SetPriority+0x50>)
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	3b04      	subs	r3, #4
 8004b50:	0112      	lsls	r2, r2, #4
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	440b      	add	r3, r1
 8004b56:	761a      	strb	r2, [r3, #24]
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000e100 	.word	0xe000e100
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <SysTick_Handler+0x1c>)
 8004b72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004b74:	f002 f9d0 	bl	8006f18 <xTaskGetSchedulerState>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d001      	beq.n	8004b82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b7e:	f003 f973 	bl	8007e68 <xPortSysTickHandler>
  }
}
 8004b82:	bf00      	nop
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	e000e010 	.word	0xe000e010

08004b8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b90:	2100      	movs	r1, #0
 8004b92:	f06f 0004 	mvn.w	r0, #4
 8004b96:	f7ff ffbf 	bl	8004b18 <__NVIC_SetPriority>
#endif
}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba6:	f3ef 8305 	mrs	r3, IPSR
 8004baa:	603b      	str	r3, [r7, #0]
  return(result);
 8004bac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004bb2:	f06f 0305 	mvn.w	r3, #5
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	e00c      	b.n	8004bd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004bba:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <osKernelInitialize+0x44>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d105      	bne.n	8004bce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <osKernelInitialize+0x44>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	607b      	str	r3, [r7, #4]
 8004bcc:	e002      	b.n	8004bd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004bce:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004bd4:	687b      	ldr	r3, [r7, #4]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	200001a8 	.word	0x200001a8

08004be8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bee:	f3ef 8305 	mrs	r3, IPSR
 8004bf2:	603b      	str	r3, [r7, #0]
  return(result);
 8004bf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004bfa:	f06f 0305 	mvn.w	r3, #5
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	e010      	b.n	8004c24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c02:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <osKernelStart+0x48>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d109      	bne.n	8004c1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c0a:	f7ff ffbf 	bl	8004b8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c0e:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <osKernelStart+0x48>)
 8004c10:	2202      	movs	r2, #2
 8004c12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c14:	f001 fd38 	bl	8006688 <vTaskStartScheduler>
      stat = osOK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	e002      	b.n	8004c24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c24:	687b      	ldr	r3, [r7, #4]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	200001a8 	.word	0x200001a8

08004c34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08e      	sub	sp, #56	; 0x38
 8004c38:	af04      	add	r7, sp, #16
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c44:	f3ef 8305 	mrs	r3, IPSR
 8004c48:	617b      	str	r3, [r7, #20]
  return(result);
 8004c4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d17e      	bne.n	8004d4e <osThreadNew+0x11a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d07b      	beq.n	8004d4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c5a:	2318      	movs	r3, #24
 8004c5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004c62:	f04f 33ff 	mov.w	r3, #4294967295
 8004c66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d045      	beq.n	8004cfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <osThreadNew+0x48>
        name = attr->name;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <osThreadNew+0x6e>
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	2b38      	cmp	r3, #56	; 0x38
 8004c94:	d805      	bhi.n	8004ca2 <osThreadNew+0x6e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <osThreadNew+0x72>
        return (NULL);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e054      	b.n	8004d50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00e      	beq.n	8004cdc <osThreadNew+0xa8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2b5b      	cmp	r3, #91	; 0x5b
 8004cc4:	d90a      	bls.n	8004cdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d006      	beq.n	8004cdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <osThreadNew+0xa8>
        mem = 1;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	e010      	b.n	8004cfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10c      	bne.n	8004cfe <osThreadNew+0xca>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d108      	bne.n	8004cfe <osThreadNew+0xca>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <osThreadNew+0xca>
          mem = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	e001      	b.n	8004cfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d110      	bne.n	8004d26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d0c:	9202      	str	r2, [sp, #8]
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	6a3a      	ldr	r2, [r7, #32]
 8004d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f001 fade 	bl	80062dc <xTaskCreateStatic>
 8004d20:	4603      	mov	r3, r0
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	e013      	b.n	8004d4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d110      	bne.n	8004d4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	f107 0310 	add.w	r3, r7, #16
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f001 fb29 	bl	8006396 <xTaskCreate>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d001      	beq.n	8004d4e <osThreadNew+0x11a>
            hTask = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d4e:	693b      	ldr	r3, [r7, #16]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3728      	adds	r7, #40	; 0x28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d60:	f3ef 8305 	mrs	r3, IPSR
 8004d64:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <osDelay+0x1c>
    stat = osErrorISR;
 8004d6c:	f06f 0305 	mvn.w	r3, #5
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	e007      	b.n	8004d84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 fc4e 	bl	8006620 <vTaskDelay>
    }
  }

  return (stat);
 8004d84:	68fb      	ldr	r3, [r7, #12]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f002 fe84 	bl	8007aa4 <pvTimerGetTimerID>
 8004d9c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	6852      	ldr	r2, [r2, #4]
 8004dac:	4610      	mov	r0, r2
 8004dae:	4798      	blx	r3
  }
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	; 0x30
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	607a      	str	r2, [r7, #4]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dcc:	f3ef 8305 	mrs	r3, IPSR
 8004dd0:	613b      	str	r3, [r7, #16]
  return(result);
 8004dd2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d163      	bne.n	8004ea0 <osTimerNew+0xe8>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d060      	beq.n	8004ea0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004dde:	2008      	movs	r0, #8
 8004de0:	f003 f8d2 	bl	8007f88 <pvPortMalloc>
 8004de4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d059      	beq.n	8004ea0 <osTimerNew+0xe8>
      callb->func = func;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004df8:	7afb      	ldrb	r3, [r7, #11]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <osTimerNew+0x4c>
        reload = pdFALSE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	e001      	b.n	8004e08 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004e04:	2301      	movs	r3, #1
 8004e06:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004e08:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01c      	beq.n	8004e52 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <osTimerNew+0x6e>
          name = attr->name;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d006      	beq.n	8004e3c <osTimerNew+0x84>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b2b      	cmp	r3, #43	; 0x2b
 8004e34:	d902      	bls.n	8004e3c <osTimerNew+0x84>
          mem = 1;
 8004e36:	2301      	movs	r3, #1
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	e00c      	b.n	8004e56 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d108      	bne.n	8004e56 <osTimerNew+0x9e>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <osTimerNew+0x9e>
            mem = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	e001      	b.n	8004e56 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d10c      	bne.n	8004e76 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	4b12      	ldr	r3, [pc, #72]	; (8004eac <osTimerNew+0xf4>)
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e6e:	f002 fa9a 	bl	80073a6 <xTimerCreateStatic>
 8004e72:	6238      	str	r0, [r7, #32]
 8004e74:	e00b      	b.n	8004e8e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d108      	bne.n	8004e8e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <osTimerNew+0xf4>)
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	2101      	movs	r1, #1
 8004e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e88:	f002 fa6c 	bl	8007364 <xTimerCreate>
 8004e8c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d105      	bne.n	8004ea0 <osTimerNew+0xe8>
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <osTimerNew+0xe8>
        vPortFree (callb);
 8004e9a:	6978      	ldr	r0, [r7, #20]
 8004e9c:	f003 f940 	bl	8008120 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3728      	adds	r7, #40	; 0x28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	08004d8f 	.word	0x08004d8f

08004eb0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec0:	f3ef 8305 	mrs	r3, IPSR
 8004ec4:	613b      	str	r3, [r7, #16]
  return(result);
 8004ec6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d175      	bne.n	8004fb8 <osSemaphoreNew+0x108>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d072      	beq.n	8004fb8 <osSemaphoreNew+0x108>
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d86e      	bhi.n	8004fb8 <osSemaphoreNew+0x108>
    mem = -1;
 8004eda:	f04f 33ff 	mov.w	r3, #4294967295
 8004ede:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d015      	beq.n	8004f12 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <osSemaphoreNew+0x4c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	2b4f      	cmp	r3, #79	; 0x4f
 8004ef4:	d902      	bls.n	8004efc <osSemaphoreNew+0x4c>
        mem = 1;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e00c      	b.n	8004f16 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d108      	bne.n	8004f16 <osSemaphoreNew+0x66>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <osSemaphoreNew+0x66>
          mem = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	e001      	b.n	8004f16 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d04c      	beq.n	8004fb8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d128      	bne.n	8004f76 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d10a      	bne.n	8004f40 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2203      	movs	r2, #3
 8004f30:	9200      	str	r2, [sp, #0]
 8004f32:	2200      	movs	r2, #0
 8004f34:	2100      	movs	r1, #0
 8004f36:	2001      	movs	r0, #1
 8004f38:	f000 fa2a 	bl	8005390 <xQueueGenericCreateStatic>
 8004f3c:	61f8      	str	r0, [r7, #28]
 8004f3e:	e005      	b.n	8004f4c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004f40:	2203      	movs	r2, #3
 8004f42:	2100      	movs	r1, #0
 8004f44:	2001      	movs	r0, #1
 8004f46:	f000 fa9b 	bl	8005480 <xQueueGenericCreate>
 8004f4a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d022      	beq.n	8004f98 <osSemaphoreNew+0xe8>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01f      	beq.n	8004f98 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	69f8      	ldr	r0, [r7, #28]
 8004f60:	f000 fb56 	bl	8005610 <xQueueGenericSend>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d016      	beq.n	8004f98 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004f6a:	69f8      	ldr	r0, [r7, #28]
 8004f6c:	f000 ffe2 	bl	8005f34 <vQueueDelete>
            hSemaphore = NULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	e010      	b.n	8004f98 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d108      	bne.n	8004f8e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	461a      	mov	r2, r3
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fad8 	bl	800553a <xQueueCreateCountingSemaphoreStatic>
 8004f8a:	61f8      	str	r0, [r7, #28]
 8004f8c:	e004      	b.n	8004f98 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fb09 	bl	80055a8 <xQueueCreateCountingSemaphore>
 8004f96:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <osSemaphoreNew+0xfc>
          name = attr->name;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e001      	b.n	8004fb0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004fb0:	6979      	ldr	r1, [r7, #20]
 8004fb2:	69f8      	ldr	r0, [r7, #28]
 8004fb4:	f001 f90a 	bl	80061cc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004fb8:	69fb      	ldr	r3, [r7, #28]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004fdc:	f06f 0303 	mvn.w	r3, #3
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e039      	b.n	8005058 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fe4:	f3ef 8305 	mrs	r3, IPSR
 8004fe8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d022      	beq.n	8005036 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004ff6:	f06f 0303 	mvn.w	r3, #3
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e02c      	b.n	8005058 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005002:	f107 0308 	add.w	r3, r7, #8
 8005006:	461a      	mov	r2, r3
 8005008:	2100      	movs	r1, #0
 800500a:	6938      	ldr	r0, [r7, #16]
 800500c:	f000 ff12 	bl	8005e34 <xQueueReceiveFromISR>
 8005010:	4603      	mov	r3, r0
 8005012:	2b01      	cmp	r3, #1
 8005014:	d003      	beq.n	800501e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005016:	f06f 0302 	mvn.w	r3, #2
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e01c      	b.n	8005058 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d019      	beq.n	8005058 <osSemaphoreAcquire+0x94>
 8005024:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <osSemaphoreAcquire+0xa0>)
 8005026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	e010      	b.n	8005058 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005036:	6839      	ldr	r1, [r7, #0]
 8005038:	6938      	ldr	r0, [r7, #16]
 800503a:	f000 fdef 	bl	8005c1c <xQueueSemaphoreTake>
 800503e:	4603      	mov	r3, r0
 8005040:	2b01      	cmp	r3, #1
 8005042:	d009      	beq.n	8005058 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800504a:	f06f 0301 	mvn.w	r3, #1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	e002      	b.n	8005058 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005052:	f06f 0302 	mvn.w	r3, #2
 8005056:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005058:	697b      	ldr	r3, [r7, #20]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d103      	bne.n	8005086 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800507e:	f06f 0303 	mvn.w	r3, #3
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e02c      	b.n	80050e0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005086:	f3ef 8305 	mrs	r3, IPSR
 800508a:	60fb      	str	r3, [r7, #12]
  return(result);
 800508c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01a      	beq.n	80050c8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005096:	f107 0308 	add.w	r3, r7, #8
 800509a:	4619      	mov	r1, r3
 800509c:	6938      	ldr	r0, [r7, #16]
 800509e:	f000 fc50 	bl	8005942 <xQueueGiveFromISR>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d003      	beq.n	80050b0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80050a8:	f06f 0302 	mvn.w	r3, #2
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	e017      	b.n	80050e0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d014      	beq.n	80050e0 <osSemaphoreRelease+0x78>
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <osSemaphoreRelease+0x84>)
 80050b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	e00b      	b.n	80050e0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80050c8:	2300      	movs	r3, #0
 80050ca:	2200      	movs	r2, #0
 80050cc:	2100      	movs	r1, #0
 80050ce:	6938      	ldr	r0, [r7, #16]
 80050d0:	f000 fa9e 	bl	8005610 <xQueueGenericSend>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d002      	beq.n	80050e0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80050da:	f06f 0302 	mvn.w	r3, #2
 80050de:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80050e0:	697b      	ldr	r3, [r7, #20]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a07      	ldr	r2, [pc, #28]	; (800511c <vApplicationGetIdleTaskMemory+0x2c>)
 8005100:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4a06      	ldr	r2, [pc, #24]	; (8005120 <vApplicationGetIdleTaskMemory+0x30>)
 8005106:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2280      	movs	r2, #128	; 0x80
 800510c:	601a      	str	r2, [r3, #0]
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	200001ac 	.word	0x200001ac
 8005120:	20000208 	.word	0x20000208

08005124 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4a07      	ldr	r2, [pc, #28]	; (8005150 <vApplicationGetTimerTaskMemory+0x2c>)
 8005134:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4a06      	ldr	r2, [pc, #24]	; (8005154 <vApplicationGetTimerTaskMemory+0x30>)
 800513a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	20000408 	.word	0x20000408
 8005154:	20000464 	.word	0x20000464

08005158 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f103 0208 	add.w	r2, r3, #8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f04f 32ff 	mov.w	r2, #4294967295
 8005170:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f103 0208 	add.w	r2, r3, #8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f103 0208 	add.w	r2, r3, #8
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	601a      	str	r2, [r3, #0]
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d103      	bne.n	800521a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	e00c      	b.n	8005234 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3308      	adds	r3, #8
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e002      	b.n	8005228 <vListInsert+0x2e>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	429a      	cmp	r2, r3
 8005232:	d2f6      	bcs.n	8005222 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6892      	ldr	r2, [r2, #8]
 8005282:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6852      	ldr	r2, [r2, #4]
 800528c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	429a      	cmp	r2, r3
 8005296:	d103      	bne.n	80052a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	1e5a      	subs	r2, r3, #1
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052ea:	f002 fd2b 	bl	8007d44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	441a      	add	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531a:	3b01      	subs	r3, #1
 800531c:	68f9      	ldr	r1, [r7, #12]
 800531e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	441a      	add	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	22ff      	movs	r2, #255	; 0xff
 800532e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d114      	bne.n	800536a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01a      	beq.n	800537e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3310      	adds	r3, #16
 800534c:	4618      	mov	r0, r3
 800534e:	f001 fc25 	bl	8006b9c <xTaskRemoveFromEventList>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d012      	beq.n	800537e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <xQueueGenericReset+0xcc>)
 800535a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	e009      	b.n	800537e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3310      	adds	r3, #16
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fef2 	bl	8005158 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3324      	adds	r3, #36	; 0x24
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff feed 	bl	8005158 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800537e:	f002 fd11 	bl	8007da4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005382:	2301      	movs	r3, #1
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	e000ed04 	.word	0xe000ed04

08005390 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08e      	sub	sp, #56	; 0x38
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <xQueueGenericCreateStatic+0x52>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <xQueueGenericCreateStatic+0x56>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <xQueueGenericCreateStatic+0x58>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	623b      	str	r3, [r7, #32]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <xQueueGenericCreateStatic+0x7e>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <xQueueGenericCreateStatic+0x82>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <xQueueGenericCreateStatic+0x84>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61fb      	str	r3, [r7, #28]
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800542e:	2350      	movs	r3, #80	; 0x50
 8005430:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b50      	cmp	r3, #80	; 0x50
 8005436:	d00a      	beq.n	800544e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	61bb      	str	r3, [r7, #24]
}
 800544a:	bf00      	nop
 800544c:	e7fe      	b.n	800544c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800544e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005462:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	4613      	mov	r3, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f83f 	bl	80054f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005478:	4618      	mov	r0, r3
 800547a:	3730      	adds	r7, #48	; 0x30
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	613b      	str	r3, [r7, #16]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	3350      	adds	r3, #80	; 0x50
 80054b8:	4618      	mov	r0, r3
 80054ba:	f002 fd65 	bl	8007f88 <pvPortMalloc>
 80054be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d011      	beq.n	80054ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	3350      	adds	r3, #80	; 0x50
 80054ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054d8:	79fa      	ldrb	r2, [r7, #7]
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	4613      	mov	r3, r2
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f805 	bl	80054f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054ea:	69bb      	ldr	r3, [r7, #24]
	}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d103      	bne.n	8005510 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e002      	b.n	8005516 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005522:	2101      	movs	r1, #1
 8005524:	69b8      	ldr	r0, [r7, #24]
 8005526:	f7ff fecb 	bl	80052c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	78fa      	ldrb	r2, [r7, #3]
 800552e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800553a:	b580      	push	{r7, lr}
 800553c:	b08a      	sub	sp, #40	; 0x28
 800553e:	af02      	add	r7, sp, #8
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	61bb      	str	r3, [r7, #24]
}
 800555e:	bf00      	nop
 8005560:	e7fe      	b.n	8005560 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	429a      	cmp	r2, r3
 8005568:	d90a      	bls.n	8005580 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	617b      	str	r3, [r7, #20]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005580:	2302      	movs	r3, #2
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	2100      	movs	r1, #0
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff ff00 	bl	8005390 <xQueueGenericCreateStatic>
 8005590:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800559e:	69fb      	ldr	r3, [r7, #28]
	}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	613b      	str	r3, [r7, #16]
}
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d90a      	bls.n	80055ec <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	60fb      	str	r3, [r7, #12]
}
 80055e8:	bf00      	nop
 80055ea:	e7fe      	b.n	80055ea <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80055ec:	2202      	movs	r2, #2
 80055ee:	2100      	movs	r1, #0
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff ff45 	bl	8005480 <xQueueGenericCreate>
 80055f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005604:	697b      	ldr	r3, [r7, #20]
	}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08e      	sub	sp, #56	; 0x38
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800561e:	2300      	movs	r3, #0
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <xQueueGenericSend+0x32>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d103      	bne.n	8005650 <xQueueGenericSend+0x40>
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <xQueueGenericSend+0x44>
 8005650:	2301      	movs	r3, #1
 8005652:	e000      	b.n	8005656 <xQueueGenericSend+0x46>
 8005654:	2300      	movs	r3, #0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <xQueueGenericSend+0x60>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800566c:	bf00      	nop
 800566e:	e7fe      	b.n	800566e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d103      	bne.n	800567e <xQueueGenericSend+0x6e>
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <xQueueGenericSend+0x72>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <xQueueGenericSend+0x74>
 8005682:	2300      	movs	r3, #0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <xQueueGenericSend+0x8e>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	623b      	str	r3, [r7, #32]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800569e:	f001 fc3b 	bl	8006f18 <xTaskGetSchedulerState>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <xQueueGenericSend+0x9e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <xQueueGenericSend+0xa2>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <xQueueGenericSend+0xa4>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <xQueueGenericSend+0xbe>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	61fb      	str	r3, [r7, #28]
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ce:	f002 fb39 	bl	8007d44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	429a      	cmp	r2, r3
 80056dc:	d302      	bcc.n	80056e4 <xQueueGenericSend+0xd4>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d129      	bne.n	8005738 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ea:	f000 fc5e 	bl	8005faa <prvCopyDataToQueue>
 80056ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	3324      	adds	r3, #36	; 0x24
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 fa4d 	bl	8006b9c <xTaskRemoveFromEventList>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d013      	beq.n	8005730 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005708:	4b3f      	ldr	r3, [pc, #252]	; (8005808 <xQueueGenericSend+0x1f8>)
 800570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	e00a      	b.n	8005730 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d007      	beq.n	8005730 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005720:	4b39      	ldr	r3, [pc, #228]	; (8005808 <xQueueGenericSend+0x1f8>)
 8005722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005730:	f002 fb38 	bl	8007da4 <vPortExitCritical>
				return pdPASS;
 8005734:	2301      	movs	r3, #1
 8005736:	e063      	b.n	8005800 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800573e:	f002 fb31 	bl	8007da4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005742:	2300      	movs	r3, #0
 8005744:	e05c      	b.n	8005800 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800574c:	f107 0314 	add.w	r3, r7, #20
 8005750:	4618      	mov	r0, r3
 8005752:	f001 fa87 	bl	8006c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005756:	2301      	movs	r3, #1
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800575a:	f002 fb23 	bl	8007da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800575e:	f000 fff9 	bl	8006754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005762:	f002 faef 	bl	8007d44 <vPortEnterCritical>
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800576c:	b25b      	sxtb	r3, r3
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005772:	d103      	bne.n	800577c <xQueueGenericSend+0x16c>
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005782:	b25b      	sxtb	r3, r3
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d103      	bne.n	8005792 <xQueueGenericSend+0x182>
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005792:	f002 fb07 	bl	8007da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005796:	1d3a      	adds	r2, r7, #4
 8005798:	f107 0314 	add.w	r3, r7, #20
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fa76 	bl	8006c90 <xTaskCheckForTimeOut>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d124      	bne.n	80057f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ac:	f000 fcf5 	bl	800619a <prvIsQueueFull>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d018      	beq.n	80057e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	3310      	adds	r3, #16
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 f99c 	bl	8006afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057c6:	f000 fc80 	bl	80060ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057ca:	f000 ffd1 	bl	8006770 <xTaskResumeAll>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f47f af7c 	bne.w	80056ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <xQueueGenericSend+0x1f8>)
 80057d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	e772      	b.n	80056ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ea:	f000 fc6e 	bl	80060ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ee:	f000 ffbf 	bl	8006770 <xTaskResumeAll>
 80057f2:	e76c      	b.n	80056ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f6:	f000 fc68 	bl	80060ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057fa:	f000 ffb9 	bl	8006770 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005800:	4618      	mov	r0, r3
 8005802:	3738      	adds	r7, #56	; 0x38
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	e000ed04 	.word	0xe000ed04

0800580c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b090      	sub	sp, #64	; 0x40
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10a      	bne.n	800583a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <xQueueGenericSendFromISR+0x3c>
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <xQueueGenericSendFromISR+0x40>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <xQueueGenericSendFromISR+0x42>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d103      	bne.n	8005876 <xQueueGenericSendFromISR+0x6a>
 800586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <xQueueGenericSendFromISR+0x6e>
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <xQueueGenericSendFromISR+0x70>
 800587a:	2300      	movs	r3, #0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	623b      	str	r3, [r7, #32]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005896:	f002 fb37 	bl	8007f08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800589a:	f3ef 8211 	mrs	r2, BASEPRI
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	61fa      	str	r2, [r7, #28]
 80058b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058be:	429a      	cmp	r2, r3
 80058c0:	d302      	bcc.n	80058c8 <xQueueGenericSendFromISR+0xbc>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d12f      	bne.n	8005928 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	68b9      	ldr	r1, [r7, #8]
 80058dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058de:	f000 fb64 	bl	8005faa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d112      	bne.n	8005912 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d016      	beq.n	8005922 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	3324      	adds	r3, #36	; 0x24
 80058f8:	4618      	mov	r0, r3
 80058fa:	f001 f94f 	bl	8006b9c <xTaskRemoveFromEventList>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00e      	beq.n	8005922 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e007      	b.n	8005922 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005912:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005916:	3301      	adds	r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	b25a      	sxtb	r2, r3
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005922:	2301      	movs	r3, #1
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005926:	e001      	b.n	800592c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005928:	2300      	movs	r3, #0
 800592a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005936:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800593a:	4618      	mov	r0, r3
 800593c:	3740      	adds	r7, #64	; 0x40
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b08e      	sub	sp, #56	; 0x38
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10a      	bne.n	800596c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	623b      	str	r3, [r7, #32]
}
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <xQueueGiveFromISR+0x48>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	61fb      	str	r3, [r7, #28]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d103      	bne.n	800599a <xQueueGiveFromISR+0x58>
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <xQueueGiveFromISR+0x5c>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <xQueueGiveFromISR+0x5e>
 800599e:	2300      	movs	r3, #0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xQueueGiveFromISR+0x78>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	61bb      	str	r3, [r7, #24]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059ba:	f002 faa5 	bl	8007f08 <vPortValidateInterruptPriority>
	__asm volatile
 80059be:	f3ef 8211 	mrs	r2, BASEPRI
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	617a      	str	r2, [r7, #20]
 80059d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80059d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d22b      	bcs.n	8005a42 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a04:	d112      	bne.n	8005a2c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d016      	beq.n	8005a3c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	3324      	adds	r3, #36	; 0x24
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 f8c2 	bl	8006b9c <xTaskRemoveFromEventList>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00e      	beq.n	8005a3c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00b      	beq.n	8005a3c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2201      	movs	r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e007      	b.n	8005a3c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a30:	3301      	adds	r3, #1
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	b25a      	sxtb	r2, r3
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a40:	e001      	b.n	8005a46 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	637b      	str	r3, [r7, #52]	; 0x34
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f383 8811 	msr	BASEPRI, r3
}
 8005a50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3738      	adds	r7, #56	; 0x38
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08c      	sub	sp, #48	; 0x30
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <xQueueReceive+0x30>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	623b      	str	r3, [r7, #32]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d103      	bne.n	8005a9a <xQueueReceive+0x3e>
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <xQueueReceive+0x42>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <xQueueReceive+0x44>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <xQueueReceive+0x5e>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	61fb      	str	r3, [r7, #28]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aba:	f001 fa2d 	bl	8006f18 <xTaskGetSchedulerState>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d102      	bne.n	8005aca <xQueueReceive+0x6e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <xQueueReceive+0x72>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <xQueueReceive+0x74>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <xQueueReceive+0x8e>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	61bb      	str	r3, [r7, #24]
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aea:	f002 f92b 	bl	8007d44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01f      	beq.n	8005b3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005afe:	f000 fabe 	bl	800607e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	1e5a      	subs	r2, r3, #1
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00f      	beq.n	8005b32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	3310      	adds	r3, #16
 8005b16:	4618      	mov	r0, r3
 8005b18:	f001 f840 	bl	8006b9c <xTaskRemoveFromEventList>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b22:	4b3d      	ldr	r3, [pc, #244]	; (8005c18 <xQueueReceive+0x1bc>)
 8005b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b32:	f002 f937 	bl	8007da4 <vPortExitCritical>
				return pdPASS;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e069      	b.n	8005c0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b40:	f002 f930 	bl	8007da4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b44:	2300      	movs	r3, #0
 8005b46:	e062      	b.n	8005c0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b4e:	f107 0310 	add.w	r3, r7, #16
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 f886 	bl	8006c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b5c:	f002 f922 	bl	8007da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b60:	f000 fdf8 	bl	8006754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b64:	f002 f8ee 	bl	8007d44 <vPortEnterCritical>
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b6e:	b25b      	sxtb	r3, r3
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d103      	bne.n	8005b7e <xQueueReceive+0x122>
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b84:	b25b      	sxtb	r3, r3
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d103      	bne.n	8005b94 <xQueueReceive+0x138>
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b94:	f002 f906 	bl	8007da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b98:	1d3a      	adds	r2, r7, #4
 8005b9a:	f107 0310 	add.w	r3, r7, #16
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 f875 	bl	8006c90 <xTaskCheckForTimeOut>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d123      	bne.n	8005bf4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bae:	f000 fade 	bl	800616e <prvIsQueueEmpty>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d017      	beq.n	8005be8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	3324      	adds	r3, #36	; 0x24
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 ff9b 	bl	8006afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bc8:	f000 fa7f 	bl	80060ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bcc:	f000 fdd0 	bl	8006770 <xTaskResumeAll>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d189      	bne.n	8005aea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <xQueueReceive+0x1bc>)
 8005bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	e780      	b.n	8005aea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bea:	f000 fa6e 	bl	80060ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bee:	f000 fdbf 	bl	8006770 <xTaskResumeAll>
 8005bf2:	e77a      	b.n	8005aea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf6:	f000 fa68 	bl	80060ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bfa:	f000 fdb9 	bl	8006770 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c00:	f000 fab5 	bl	800616e <prvIsQueueEmpty>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f43f af6f 	beq.w	8005aea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3730      	adds	r7, #48	; 0x30
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	e000ed04 	.word	0xe000ed04

08005c1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08e      	sub	sp, #56	; 0x38
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	623b      	str	r3, [r7, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	61fb      	str	r3, [r7, #28]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c6c:	f001 f954 	bl	8006f18 <xTaskGetSchedulerState>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <xQueueSemaphoreTake+0x60>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <xQueueSemaphoreTake+0x64>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <xQueueSemaphoreTake+0x66>
 8005c80:	2300      	movs	r3, #0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10a      	bne.n	8005c9c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	61bb      	str	r3, [r7, #24]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c9c:	f002 f852 	bl	8007d44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d024      	beq.n	8005cf6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d104      	bne.n	8005cc6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005cbc:	f001 faa2 	bl	8007204 <pvTaskIncrementMutexHeldCount>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00f      	beq.n	8005cee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	3310      	adds	r3, #16
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 ff62 	bl	8006b9c <xTaskRemoveFromEventList>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cde:	4b54      	ldr	r3, [pc, #336]	; (8005e30 <xQueueSemaphoreTake+0x214>)
 8005ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cee:	f002 f859 	bl	8007da4 <vPortExitCritical>
				return pdPASS;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e097      	b.n	8005e26 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d111      	bne.n	8005d20 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	617b      	str	r3, [r7, #20]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d18:	f002 f844 	bl	8007da4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e082      	b.n	8005e26 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d26:	f107 030c 	add.w	r3, r7, #12
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 ff9a 	bl	8006c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d34:	f002 f836 	bl	8007da4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d38:	f000 fd0c 	bl	8006754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d3c:	f002 f802 	bl	8007d44 <vPortEnterCritical>
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d46:	b25b      	sxtb	r3, r3
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d103      	bne.n	8005d56 <xQueueSemaphoreTake+0x13a>
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d103      	bne.n	8005d6c <xQueueSemaphoreTake+0x150>
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d6c:	f002 f81a 	bl	8007da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d70:	463a      	mov	r2, r7
 8005d72:	f107 030c 	add.w	r3, r7, #12
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 ff89 	bl	8006c90 <xTaskCheckForTimeOut>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d132      	bne.n	8005dea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d86:	f000 f9f2 	bl	800616e <prvIsQueueEmpty>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d026      	beq.n	8005dde <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005d98:	f001 ffd4 	bl	8007d44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 f8d7 	bl	8006f54 <xTaskPriorityInherit>
 8005da6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005da8:	f001 fffc 	bl	8007da4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	3324      	adds	r3, #36	; 0x24
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	4611      	mov	r1, r2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fea1 	bl	8006afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dbc:	f000 f985 	bl	80060ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dc0:	f000 fcd6 	bl	8006770 <xTaskResumeAll>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f47f af68 	bne.w	8005c9c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005dcc:	4b18      	ldr	r3, [pc, #96]	; (8005e30 <xQueueSemaphoreTake+0x214>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	e75e      	b.n	8005c9c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005de0:	f000 f973 	bl	80060ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005de4:	f000 fcc4 	bl	8006770 <xTaskResumeAll>
 8005de8:	e758      	b.n	8005c9c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005dea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dec:	f000 f96d 	bl	80060ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005df0:	f000 fcbe 	bl	8006770 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005df4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005df6:	f000 f9ba 	bl	800616e <prvIsQueueEmpty>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f43f af4d 	beq.w	8005c9c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00d      	beq.n	8005e24 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005e08:	f001 ff9c 	bl	8007d44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e0e:	f000 f8b4 	bl	8005f7a <prvGetDisinheritPriorityAfterTimeout>
 8005e12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f001 f970 	bl	8007100 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005e20:	f001 ffc0 	bl	8007da4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3738      	adds	r7, #56	; 0x38
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08e      	sub	sp, #56	; 0x38
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	623b      	str	r3, [r7, #32]
}
 8005e5c:	bf00      	nop
 8005e5e:	e7fe      	b.n	8005e5e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d103      	bne.n	8005e6e <xQueueReceiveFromISR+0x3a>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <xQueueReceiveFromISR+0x3e>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <xQueueReceiveFromISR+0x40>
 8005e72:	2300      	movs	r3, #0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	61fb      	str	r3, [r7, #28]
}
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e8e:	f002 f83b 	bl	8007f08 <vPortValidateInterruptPriority>
	__asm volatile
 8005e92:	f3ef 8211 	mrs	r2, BASEPRI
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	61ba      	str	r2, [r7, #24]
 8005ea8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005eaa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d02f      	beq.n	8005f1a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec8:	f000 f8d9 	bl	800607e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	1e5a      	subs	r2, r3, #1
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ed4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d112      	bne.n	8005f04 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d016      	beq.n	8005f14 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	3310      	adds	r3, #16
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fe56 	bl	8006b9c <xTaskRemoveFromEventList>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00e      	beq.n	8005f14 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00b      	beq.n	8005f14 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	e007      	b.n	8005f14 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f08:	3301      	adds	r3, #1
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	b25a      	sxtb	r2, r3
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f14:	2301      	movs	r3, #1
 8005f16:	637b      	str	r3, [r7, #52]	; 0x34
 8005f18:	e001      	b.n	8005f1e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f383 8811 	msr	BASEPRI, r3
}
 8005f28:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3738      	adds	r7, #56	; 0x38
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <vQueueDelete+0x28>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60bb      	str	r3, [r7, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f95f 	bl	8006220 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f002 f8d7 	bl	8008120 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005f72:	bf00      	nop
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d006      	beq.n	8005f98 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e001      	b.n	8005f9c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
	}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b086      	sub	sp, #24
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10d      	bne.n	8005fe4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d14d      	bne.n	800606c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 f825 	bl	8007024 <xTaskPriorityDisinherit>
 8005fda:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	609a      	str	r2, [r3, #8]
 8005fe2:	e043      	b.n	800606c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d119      	bne.n	800601e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6858      	ldr	r0, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	f002 f9d5 	bl	80083a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	441a      	add	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	429a      	cmp	r2, r3
 8006012:	d32b      	bcc.n	800606c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	605a      	str	r2, [r3, #4]
 800601c:	e026      	b.n	800606c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68d8      	ldr	r0, [r3, #12]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	461a      	mov	r2, r3
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	f002 f9bb 	bl	80083a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	425b      	negs	r3, r3
 8006038:	441a      	add	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d207      	bcs.n	800605a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	425b      	negs	r3, r3
 8006054:	441a      	add	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d105      	bne.n	800606c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	3b01      	subs	r3, #1
 800606a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006074:	697b      	ldr	r3, [r7, #20]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d018      	beq.n	80060c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	441a      	add	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d303      	bcc.n	80060b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68d9      	ldr	r1, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	461a      	mov	r2, r3
 80060bc:	6838      	ldr	r0, [r7, #0]
 80060be:	f002 f971 	bl	80083a4 <memcpy>
	}
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060d2:	f001 fe37 	bl	8007d44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060de:	e011      	b.n	8006104 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d012      	beq.n	800610e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3324      	adds	r3, #36	; 0x24
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fd55 	bl	8006b9c <xTaskRemoveFromEventList>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060f8:	f000 fe2c 	bl	8006d54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	3b01      	subs	r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006108:	2b00      	cmp	r3, #0
 800610a:	dce9      	bgt.n	80060e0 <prvUnlockQueue+0x16>
 800610c:	e000      	b.n	8006110 <prvUnlockQueue+0x46>
					break;
 800610e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	22ff      	movs	r2, #255	; 0xff
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006118:	f001 fe44 	bl	8007da4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800611c:	f001 fe12 	bl	8007d44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006126:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006128:	e011      	b.n	800614e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d012      	beq.n	8006158 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3310      	adds	r3, #16
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fd30 	bl	8006b9c <xTaskRemoveFromEventList>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006142:	f000 fe07 	bl	8006d54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006146:	7bbb      	ldrb	r3, [r7, #14]
 8006148:	3b01      	subs	r3, #1
 800614a:	b2db      	uxtb	r3, r3
 800614c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800614e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006152:	2b00      	cmp	r3, #0
 8006154:	dce9      	bgt.n	800612a <prvUnlockQueue+0x60>
 8006156:	e000      	b.n	800615a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006158:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	22ff      	movs	r2, #255	; 0xff
 800615e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006162:	f001 fe1f 	bl	8007da4 <vPortExitCritical>
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006176:	f001 fde5 	bl	8007d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617e:	2b00      	cmp	r3, #0
 8006180:	d102      	bne.n	8006188 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006182:	2301      	movs	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e001      	b.n	800618c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800618c:	f001 fe0a 	bl	8007da4 <vPortExitCritical>

	return xReturn;
 8006190:	68fb      	ldr	r3, [r7, #12]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061a2:	f001 fdcf 	bl	8007d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d102      	bne.n	80061b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061b2:	2301      	movs	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	e001      	b.n	80061bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061bc:	f001 fdf2 	bl	8007da4 <vPortExitCritical>

	return xReturn;
 80061c0:	68fb      	ldr	r3, [r7, #12]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	e014      	b.n	8006206 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061dc:	4a0f      	ldr	r2, [pc, #60]	; (800621c <vQueueAddToRegistry+0x50>)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10b      	bne.n	8006200 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061e8:	490c      	ldr	r1, [pc, #48]	; (800621c <vQueueAddToRegistry+0x50>)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061f2:	4a0a      	ldr	r2, [pc, #40]	; (800621c <vQueueAddToRegistry+0x50>)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	4413      	add	r3, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061fe:	e006      	b.n	800620e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b07      	cmp	r3, #7
 800620a:	d9e7      	bls.n	80061dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20000864 	.word	0x20000864

08006220 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	e016      	b.n	800625c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800622e:	4a10      	ldr	r2, [pc, #64]	; (8006270 <vQueueUnregisterQueue+0x50>)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	4413      	add	r3, r2
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d10b      	bne.n	8006256 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800623e:	4a0c      	ldr	r2, [pc, #48]	; (8006270 <vQueueUnregisterQueue+0x50>)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2100      	movs	r1, #0
 8006244:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006248:	4a09      	ldr	r2, [pc, #36]	; (8006270 <vQueueUnregisterQueue+0x50>)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	4413      	add	r3, r2
 8006250:	2200      	movs	r2, #0
 8006252:	605a      	str	r2, [r3, #4]
				break;
 8006254:	e006      	b.n	8006264 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b07      	cmp	r3, #7
 8006260:	d9e5      	bls.n	800622e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	20000864 	.word	0x20000864

08006274 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006284:	f001 fd5e 	bl	8007d44 <vPortEnterCritical>
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800628e:	b25b      	sxtb	r3, r3
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d103      	bne.n	800629e <vQueueWaitForMessageRestricted+0x2a>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062a4:	b25b      	sxtb	r3, r3
 80062a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062aa:	d103      	bne.n	80062b4 <vQueueWaitForMessageRestricted+0x40>
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062b4:	f001 fd76 	bl	8007da4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	3324      	adds	r3, #36	; 0x24
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fc3b 	bl	8006b44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062ce:	6978      	ldr	r0, [r7, #20]
 80062d0:	f7ff fefb 	bl	80060ca <prvUnlockQueue>
	}
 80062d4:	bf00      	nop
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08e      	sub	sp, #56	; 0x38
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xTaskCreateStatic+0x2a>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	623b      	str	r3, [r7, #32]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <xTaskCreateStatic+0x46>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	61fb      	str	r3, [r7, #28]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006322:	235c      	movs	r3, #92	; 0x5c
 8006324:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b5c      	cmp	r3, #92	; 0x5c
 800632a:	d00a      	beq.n	8006342 <xTaskCreateStatic+0x66>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	61bb      	str	r3, [r7, #24]
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006342:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01e      	beq.n	8006388 <xTaskCreateStatic+0xac>
 800634a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01b      	beq.n	8006388 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006358:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	2202      	movs	r2, #2
 800635e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006362:	2300      	movs	r3, #0
 8006364:	9303      	str	r3, [sp, #12]
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	9302      	str	r3, [sp, #8]
 800636a:	f107 0314 	add.w	r3, r7, #20
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	68b9      	ldr	r1, [r7, #8]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f850 	bl	8006420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006382:	f000 f8dd 	bl	8006540 <prvAddNewTaskToReadyList>
 8006386:	e001      	b.n	800638c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006388:	2300      	movs	r3, #0
 800638a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800638c:	697b      	ldr	r3, [r7, #20]
	}
 800638e:	4618      	mov	r0, r3
 8006390:	3728      	adds	r7, #40	; 0x28
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006396:	b580      	push	{r7, lr}
 8006398:	b08c      	sub	sp, #48	; 0x30
 800639a:	af04      	add	r7, sp, #16
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 fdec 	bl	8007f88 <pvPortMalloc>
 80063b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00e      	beq.n	80063d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063b8:	205c      	movs	r0, #92	; 0x5c
 80063ba:	f001 fde5 	bl	8007f88 <pvPortMalloc>
 80063be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
 80063cc:	e005      	b.n	80063da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063ce:	6978      	ldr	r0, [r7, #20]
 80063d0:	f001 fea6 	bl	8008120 <vPortFree>
 80063d4:	e001      	b.n	80063da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d017      	beq.n	8006410 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	2300      	movs	r3, #0
 80063ec:	9303      	str	r3, [sp, #12]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	9302      	str	r3, [sp, #8]
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 f80e 	bl	8006420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006404:	69f8      	ldr	r0, [r7, #28]
 8006406:	f000 f89b 	bl	8006540 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800640a:	2301      	movs	r3, #1
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e002      	b.n	8006416 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006410:	f04f 33ff 	mov.w	r3, #4294967295
 8006414:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006416:	69bb      	ldr	r3, [r7, #24]
	}
 8006418:	4618      	mov	r0, r3
 800641a:	3720      	adds	r7, #32
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	461a      	mov	r2, r3
 8006438:	21a5      	movs	r1, #165	; 0xa5
 800643a:	f001 ffc1 	bl	80083c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006448:	3b01      	subs	r3, #1
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f023 0307 	bic.w	r3, r3, #7
 8006456:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	617b      	str	r3, [r7, #20]
}
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d01f      	beq.n	80064be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
 8006482:	e012      	b.n	80064aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	7819      	ldrb	r1, [r3, #0]
 800648c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	3334      	adds	r3, #52	; 0x34
 8006494:	460a      	mov	r2, r1
 8006496:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d006      	beq.n	80064b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	3301      	adds	r3, #1
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	2b0f      	cmp	r3, #15
 80064ae:	d9e9      	bls.n	8006484 <prvInitialiseNewTask+0x64>
 80064b0:	e000      	b.n	80064b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80064b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064bc:	e003      	b.n	80064c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	2b37      	cmp	r3, #55	; 0x37
 80064ca:	d901      	bls.n	80064d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064cc:	2337      	movs	r3, #55	; 0x37
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	2200      	movs	r2, #0
 80064e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	3304      	adds	r3, #4
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe fe56 	bl	8005198 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	3318      	adds	r3, #24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fe fe51 	bl	8005198 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	2200      	movs	r2, #0
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	68f9      	ldr	r1, [r7, #12]
 800651e:	69b8      	ldr	r0, [r7, #24]
 8006520:	f001 fae0 	bl	8007ae4 <pxPortInitialiseStack>
 8006524:	4602      	mov	r2, r0
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006536:	bf00      	nop
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006548:	f001 fbfc 	bl	8007d44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800654c:	4b2d      	ldr	r3, [pc, #180]	; (8006604 <prvAddNewTaskToReadyList+0xc4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3301      	adds	r3, #1
 8006552:	4a2c      	ldr	r2, [pc, #176]	; (8006604 <prvAddNewTaskToReadyList+0xc4>)
 8006554:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006556:	4b2c      	ldr	r3, [pc, #176]	; (8006608 <prvAddNewTaskToReadyList+0xc8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800655e:	4a2a      	ldr	r2, [pc, #168]	; (8006608 <prvAddNewTaskToReadyList+0xc8>)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006564:	4b27      	ldr	r3, [pc, #156]	; (8006604 <prvAddNewTaskToReadyList+0xc4>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d110      	bne.n	800658e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800656c:	f000 fc16 	bl	8006d9c <prvInitialiseTaskLists>
 8006570:	e00d      	b.n	800658e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006572:	4b26      	ldr	r3, [pc, #152]	; (800660c <prvAddNewTaskToReadyList+0xcc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800657a:	4b23      	ldr	r3, [pc, #140]	; (8006608 <prvAddNewTaskToReadyList+0xc8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	429a      	cmp	r2, r3
 8006586:	d802      	bhi.n	800658e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006588:	4a1f      	ldr	r2, [pc, #124]	; (8006608 <prvAddNewTaskToReadyList+0xc8>)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800658e:	4b20      	ldr	r3, [pc, #128]	; (8006610 <prvAddNewTaskToReadyList+0xd0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	4a1e      	ldr	r2, [pc, #120]	; (8006610 <prvAddNewTaskToReadyList+0xd0>)
 8006596:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006598:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <prvAddNewTaskToReadyList+0xd0>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a4:	4b1b      	ldr	r3, [pc, #108]	; (8006614 <prvAddNewTaskToReadyList+0xd4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d903      	bls.n	80065b4 <prvAddNewTaskToReadyList+0x74>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	4a18      	ldr	r2, [pc, #96]	; (8006614 <prvAddNewTaskToReadyList+0xd4>)
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4a15      	ldr	r2, [pc, #84]	; (8006618 <prvAddNewTaskToReadyList+0xd8>)
 80065c2:	441a      	add	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4619      	mov	r1, r3
 80065ca:	4610      	mov	r0, r2
 80065cc:	f7fe fdf1 	bl	80051b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065d0:	f001 fbe8 	bl	8007da4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065d4:	4b0d      	ldr	r3, [pc, #52]	; (800660c <prvAddNewTaskToReadyList+0xcc>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00e      	beq.n	80065fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <prvAddNewTaskToReadyList+0xc8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d207      	bcs.n	80065fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065ea:	4b0c      	ldr	r3, [pc, #48]	; (800661c <prvAddNewTaskToReadyList+0xdc>)
 80065ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000d78 	.word	0x20000d78
 8006608:	200008a4 	.word	0x200008a4
 800660c:	20000d84 	.word	0x20000d84
 8006610:	20000d94 	.word	0x20000d94
 8006614:	20000d80 	.word	0x20000d80
 8006618:	200008a8 	.word	0x200008a8
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d017      	beq.n	8006662 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006632:	4b13      	ldr	r3, [pc, #76]	; (8006680 <vTaskDelay+0x60>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <vTaskDelay+0x30>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	60bb      	str	r3, [r7, #8]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006650:	f000 f880 	bl	8006754 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006654:	2100      	movs	r1, #0
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fde8 	bl	800722c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800665c:	f000 f888 	bl	8006770 <xTaskResumeAll>
 8006660:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d107      	bne.n	8006678 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <vTaskDelay+0x64>)
 800666a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000da0 	.word	0x20000da0
 8006684:	e000ed04 	.word	0xe000ed04

08006688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006696:	463a      	mov	r2, r7
 8006698:	1d39      	adds	r1, r7, #4
 800669a:	f107 0308 	add.w	r3, r7, #8
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe fd26 	bl	80050f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	9202      	str	r2, [sp, #8]
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	2300      	movs	r3, #0
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	2300      	movs	r3, #0
 80066b4:	460a      	mov	r2, r1
 80066b6:	4921      	ldr	r1, [pc, #132]	; (800673c <vTaskStartScheduler+0xb4>)
 80066b8:	4821      	ldr	r0, [pc, #132]	; (8006740 <vTaskStartScheduler+0xb8>)
 80066ba:	f7ff fe0f 	bl	80062dc <xTaskCreateStatic>
 80066be:	4603      	mov	r3, r0
 80066c0:	4a20      	ldr	r2, [pc, #128]	; (8006744 <vTaskStartScheduler+0xbc>)
 80066c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80066c4:	4b1f      	ldr	r3, [pc, #124]	; (8006744 <vTaskStartScheduler+0xbc>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80066cc:	2301      	movs	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e001      	b.n	80066d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d102      	bne.n	80066e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80066dc:	f000 fdfa 	bl	80072d4 <xTimerCreateTimerTask>
 80066e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d116      	bne.n	8006716 <vTaskStartScheduler+0x8e>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	613b      	str	r3, [r7, #16]
}
 80066fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066fc:	4b12      	ldr	r3, [pc, #72]	; (8006748 <vTaskStartScheduler+0xc0>)
 80066fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006702:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006704:	4b11      	ldr	r3, [pc, #68]	; (800674c <vTaskStartScheduler+0xc4>)
 8006706:	2201      	movs	r2, #1
 8006708:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <vTaskStartScheduler+0xc8>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006710:	f001 fa76 	bl	8007c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006714:	e00e      	b.n	8006734 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d10a      	bne.n	8006734 <vTaskStartScheduler+0xac>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	60fb      	str	r3, [r7, #12]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <vTaskStartScheduler+0xaa>
}
 8006734:	bf00      	nop
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	0800841c 	.word	0x0800841c
 8006740:	08006d6d 	.word	0x08006d6d
 8006744:	20000d9c 	.word	0x20000d9c
 8006748:	20000d98 	.word	0x20000d98
 800674c:	20000d84 	.word	0x20000d84
 8006750:	20000d7c 	.word	0x20000d7c

08006754 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006758:	4b04      	ldr	r3, [pc, #16]	; (800676c <vTaskSuspendAll+0x18>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	4a03      	ldr	r2, [pc, #12]	; (800676c <vTaskSuspendAll+0x18>)
 8006760:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006762:	bf00      	nop
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	20000da0 	.word	0x20000da0

08006770 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800677a:	2300      	movs	r3, #0
 800677c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800677e:	4b42      	ldr	r3, [pc, #264]	; (8006888 <xTaskResumeAll+0x118>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10a      	bne.n	800679c <xTaskResumeAll+0x2c>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	603b      	str	r3, [r7, #0]
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800679c:	f001 fad2 	bl	8007d44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067a0:	4b39      	ldr	r3, [pc, #228]	; (8006888 <xTaskResumeAll+0x118>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	4a38      	ldr	r2, [pc, #224]	; (8006888 <xTaskResumeAll+0x118>)
 80067a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067aa:	4b37      	ldr	r3, [pc, #220]	; (8006888 <xTaskResumeAll+0x118>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d162      	bne.n	8006878 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067b2:	4b36      	ldr	r3, [pc, #216]	; (800688c <xTaskResumeAll+0x11c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d05e      	beq.n	8006878 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067ba:	e02f      	b.n	800681c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067bc:	4b34      	ldr	r3, [pc, #208]	; (8006890 <xTaskResumeAll+0x120>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3318      	adds	r3, #24
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe fd4f 	bl	800526c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe fd4a 	bl	800526c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067dc:	4b2d      	ldr	r3, [pc, #180]	; (8006894 <xTaskResumeAll+0x124>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d903      	bls.n	80067ec <xTaskResumeAll+0x7c>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	4a2a      	ldr	r2, [pc, #168]	; (8006894 <xTaskResumeAll+0x124>)
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4a27      	ldr	r2, [pc, #156]	; (8006898 <xTaskResumeAll+0x128>)
 80067fa:	441a      	add	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f7fe fcd5 	bl	80051b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	4b23      	ldr	r3, [pc, #140]	; (800689c <xTaskResumeAll+0x12c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	429a      	cmp	r2, r3
 8006814:	d302      	bcc.n	800681c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006816:	4b22      	ldr	r3, [pc, #136]	; (80068a0 <xTaskResumeAll+0x130>)
 8006818:	2201      	movs	r2, #1
 800681a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800681c:	4b1c      	ldr	r3, [pc, #112]	; (8006890 <xTaskResumeAll+0x120>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1cb      	bne.n	80067bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800682a:	f000 fb55 	bl	8006ed8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800682e:	4b1d      	ldr	r3, [pc, #116]	; (80068a4 <xTaskResumeAll+0x134>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800683a:	f000 f847 	bl	80068cc <xTaskIncrementTick>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006844:	4b16      	ldr	r3, [pc, #88]	; (80068a0 <xTaskResumeAll+0x130>)
 8006846:	2201      	movs	r2, #1
 8006848:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3b01      	subs	r3, #1
 800684e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1f1      	bne.n	800683a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006856:	4b13      	ldr	r3, [pc, #76]	; (80068a4 <xTaskResumeAll+0x134>)
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800685c:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <xTaskResumeAll+0x130>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d009      	beq.n	8006878 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006864:	2301      	movs	r3, #1
 8006866:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006868:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <xTaskResumeAll+0x138>)
 800686a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006878:	f001 fa94 	bl	8007da4 <vPortExitCritical>

	return xAlreadyYielded;
 800687c:	68bb      	ldr	r3, [r7, #8]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000da0 	.word	0x20000da0
 800688c:	20000d78 	.word	0x20000d78
 8006890:	20000d38 	.word	0x20000d38
 8006894:	20000d80 	.word	0x20000d80
 8006898:	200008a8 	.word	0x200008a8
 800689c:	200008a4 	.word	0x200008a4
 80068a0:	20000d8c 	.word	0x20000d8c
 80068a4:	20000d88 	.word	0x20000d88
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80068b2:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <xTaskGetTickCount+0x1c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80068b8:	687b      	ldr	r3, [r7, #4]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	20000d7c 	.word	0x20000d7c

080068cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d6:	4b4f      	ldr	r3, [pc, #316]	; (8006a14 <xTaskIncrementTick+0x148>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f040 808f 	bne.w	80069fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068e0:	4b4d      	ldr	r3, [pc, #308]	; (8006a18 <xTaskIncrementTick+0x14c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068e8:	4a4b      	ldr	r2, [pc, #300]	; (8006a18 <xTaskIncrementTick+0x14c>)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d120      	bne.n	8006936 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80068f4:	4b49      	ldr	r3, [pc, #292]	; (8006a1c <xTaskIncrementTick+0x150>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <xTaskIncrementTick+0x48>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	603b      	str	r3, [r7, #0]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <xTaskIncrementTick+0x46>
 8006914:	4b41      	ldr	r3, [pc, #260]	; (8006a1c <xTaskIncrementTick+0x150>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	4b41      	ldr	r3, [pc, #260]	; (8006a20 <xTaskIncrementTick+0x154>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a3f      	ldr	r2, [pc, #252]	; (8006a1c <xTaskIncrementTick+0x150>)
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	4a3f      	ldr	r2, [pc, #252]	; (8006a20 <xTaskIncrementTick+0x154>)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	4b3e      	ldr	r3, [pc, #248]	; (8006a24 <xTaskIncrementTick+0x158>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	4a3d      	ldr	r2, [pc, #244]	; (8006a24 <xTaskIncrementTick+0x158>)
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	f000 fad1 	bl	8006ed8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006936:	4b3c      	ldr	r3, [pc, #240]	; (8006a28 <xTaskIncrementTick+0x15c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	429a      	cmp	r2, r3
 800693e:	d349      	bcc.n	80069d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006940:	4b36      	ldr	r3, [pc, #216]	; (8006a1c <xTaskIncrementTick+0x150>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800694a:	4b37      	ldr	r3, [pc, #220]	; (8006a28 <xTaskIncrementTick+0x15c>)
 800694c:	f04f 32ff 	mov.w	r2, #4294967295
 8006950:	601a      	str	r2, [r3, #0]
					break;
 8006952:	e03f      	b.n	80069d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006954:	4b31      	ldr	r3, [pc, #196]	; (8006a1c <xTaskIncrementTick+0x150>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	429a      	cmp	r2, r3
 800696a:	d203      	bcs.n	8006974 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800696c:	4a2e      	ldr	r2, [pc, #184]	; (8006a28 <xTaskIncrementTick+0x15c>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006972:	e02f      	b.n	80069d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	3304      	adds	r3, #4
 8006978:	4618      	mov	r0, r3
 800697a:	f7fe fc77 	bl	800526c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	2b00      	cmp	r3, #0
 8006984:	d004      	beq.n	8006990 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	3318      	adds	r3, #24
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe fc6e 	bl	800526c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4b25      	ldr	r3, [pc, #148]	; (8006a2c <xTaskIncrementTick+0x160>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d903      	bls.n	80069a4 <xTaskIncrementTick+0xd8>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	4a22      	ldr	r2, [pc, #136]	; (8006a2c <xTaskIncrementTick+0x160>)
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <xTaskIncrementTick+0x164>)
 80069b2:	441a      	add	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f7fe fbf9 	bl	80051b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c4:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <xTaskIncrementTick+0x168>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d3b8      	bcc.n	8006940 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80069ce:	2301      	movs	r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d2:	e7b5      	b.n	8006940 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069d4:	4b17      	ldr	r3, [pc, #92]	; (8006a34 <xTaskIncrementTick+0x168>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069da:	4915      	ldr	r1, [pc, #84]	; (8006a30 <xTaskIncrementTick+0x164>)
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d901      	bls.n	80069f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80069ec:	2301      	movs	r3, #1
 80069ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80069f0:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <xTaskIncrementTick+0x16c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80069f8:	2301      	movs	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e004      	b.n	8006a08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069fe:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <xTaskIncrementTick+0x170>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	4a0d      	ldr	r2, [pc, #52]	; (8006a3c <xTaskIncrementTick+0x170>)
 8006a06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a08:	697b      	ldr	r3, [r7, #20]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000da0 	.word	0x20000da0
 8006a18:	20000d7c 	.word	0x20000d7c
 8006a1c:	20000d30 	.word	0x20000d30
 8006a20:	20000d34 	.word	0x20000d34
 8006a24:	20000d90 	.word	0x20000d90
 8006a28:	20000d98 	.word	0x20000d98
 8006a2c:	20000d80 	.word	0x20000d80
 8006a30:	200008a8 	.word	0x200008a8
 8006a34:	200008a4 	.word	0x200008a4
 8006a38:	20000d8c 	.word	0x20000d8c
 8006a3c:	20000d88 	.word	0x20000d88

08006a40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a46:	4b28      	ldr	r3, [pc, #160]	; (8006ae8 <vTaskSwitchContext+0xa8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a4e:	4b27      	ldr	r3, [pc, #156]	; (8006aec <vTaskSwitchContext+0xac>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a54:	e041      	b.n	8006ada <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006a56:	4b25      	ldr	r3, [pc, #148]	; (8006aec <vTaskSwitchContext+0xac>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a5c:	4b24      	ldr	r3, [pc, #144]	; (8006af0 <vTaskSwitchContext+0xb0>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	e010      	b.n	8006a86 <vTaskSwitchContext+0x46>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <vTaskSwitchContext+0x40>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	607b      	str	r3, [r7, #4]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <vTaskSwitchContext+0x3e>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	491b      	ldr	r1, [pc, #108]	; (8006af4 <vTaskSwitchContext+0xb4>)
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0e4      	beq.n	8006a64 <vTaskSwitchContext+0x24>
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <vTaskSwitchContext+0xb4>)
 8006aa6:	4413      	add	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	605a      	str	r2, [r3, #4]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	3308      	adds	r3, #8
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d104      	bne.n	8006aca <vTaskSwitchContext+0x8a>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	605a      	str	r2, [r3, #4]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <vTaskSwitchContext+0xb8>)
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	4a06      	ldr	r2, [pc, #24]	; (8006af0 <vTaskSwitchContext+0xb0>)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6013      	str	r3, [r2, #0]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	20000da0 	.word	0x20000da0
 8006aec:	20000d8c 	.word	0x20000d8c
 8006af0:	20000d80 	.word	0x20000d80
 8006af4:	200008a8 	.word	0x200008a8
 8006af8:	200008a4 	.word	0x200008a4

08006afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	60fb      	str	r3, [r7, #12]
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b22:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <vTaskPlaceOnEventList+0x44>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3318      	adds	r3, #24
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fe fb65 	bl	80051fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b30:	2101      	movs	r1, #1
 8006b32:	6838      	ldr	r0, [r7, #0]
 8006b34:	f000 fb7a 	bl	800722c <prvAddCurrentTaskToDelayedList>
}
 8006b38:	bf00      	nop
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	200008a4 	.word	0x200008a4

08006b44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10a      	bne.n	8006b6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	617b      	str	r3, [r7, #20]
}
 8006b68:	bf00      	nop
 8006b6a:	e7fe      	b.n	8006b6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b6c:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <vTaskPlaceOnEventListRestricted+0x54>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3318      	adds	r3, #24
 8006b72:	4619      	mov	r1, r3
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7fe fb1c 	bl	80051b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b80:	f04f 33ff 	mov.w	r3, #4294967295
 8006b84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	68b8      	ldr	r0, [r7, #8]
 8006b8a:	f000 fb4f 	bl	800722c <prvAddCurrentTaskToDelayedList>
	}
 8006b8e:	bf00      	nop
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	200008a4 	.word	0x200008a4

08006b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	60fb      	str	r3, [r7, #12]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	3318      	adds	r3, #24
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fb4d 	bl	800526c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd2:	4b1e      	ldr	r3, [pc, #120]	; (8006c4c <xTaskRemoveFromEventList+0xb0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d11d      	bne.n	8006c16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fb44 	bl	800526c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be8:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <xTaskRemoveFromEventList+0xb4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d903      	bls.n	8006bf8 <xTaskRemoveFromEventList+0x5c>
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a16      	ldr	r2, [pc, #88]	; (8006c50 <xTaskRemoveFromEventList+0xb4>)
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4a13      	ldr	r2, [pc, #76]	; (8006c54 <xTaskRemoveFromEventList+0xb8>)
 8006c06:	441a      	add	r2, r3
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f7fe facf 	bl	80051b2 <vListInsertEnd>
 8006c14:	e005      	b.n	8006c22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	3318      	adds	r3, #24
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	480e      	ldr	r0, [pc, #56]	; (8006c58 <xTaskRemoveFromEventList+0xbc>)
 8006c1e:	f7fe fac8 	bl	80051b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c26:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <xTaskRemoveFromEventList+0xc0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d905      	bls.n	8006c3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c30:	2301      	movs	r3, #1
 8006c32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c34:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <xTaskRemoveFromEventList+0xc4>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e001      	b.n	8006c40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c40:	697b      	ldr	r3, [r7, #20]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000da0 	.word	0x20000da0
 8006c50:	20000d80 	.word	0x20000d80
 8006c54:	200008a8 	.word	0x200008a8
 8006c58:	20000d38 	.word	0x20000d38
 8006c5c:	200008a4 	.word	0x200008a4
 8006c60:	20000d8c 	.word	0x20000d8c

08006c64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <vTaskInternalSetTimeOutState+0x24>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c74:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <vTaskInternalSetTimeOutState+0x28>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	605a      	str	r2, [r3, #4]
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	20000d90 	.word	0x20000d90
 8006c8c:	20000d7c 	.word	0x20000d7c

08006c90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	613b      	str	r3, [r7, #16]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	60fb      	str	r3, [r7, #12]
}
 8006cce:	bf00      	nop
 8006cd0:	e7fe      	b.n	8006cd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006cd2:	f001 f837 	bl	8007d44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cd6:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <xTaskCheckForTimeOut+0xbc>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cee:	d102      	bne.n	8006cf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	e023      	b.n	8006d3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <xTaskCheckForTimeOut+0xc0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d007      	beq.n	8006d12 <xTaskCheckForTimeOut+0x82>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d302      	bcc.n	8006d12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	61fb      	str	r3, [r7, #28]
 8006d10:	e015      	b.n	8006d3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d20b      	bcs.n	8006d34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	1ad2      	subs	r2, r2, r3
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff ff9b 	bl	8006c64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61fb      	str	r3, [r7, #28]
 8006d32:	e004      	b.n	8006d3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d3e:	f001 f831 	bl	8007da4 <vPortExitCritical>

	return xReturn;
 8006d42:	69fb      	ldr	r3, [r7, #28]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3720      	adds	r7, #32
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20000d7c 	.word	0x20000d7c
 8006d50:	20000d90 	.word	0x20000d90

08006d54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d58:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <vTaskMissedYield+0x14>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]
}
 8006d5e:	bf00      	nop
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	20000d8c 	.word	0x20000d8c

08006d6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d74:	f000 f852 	bl	8006e1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <prvIdleTask+0x28>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d9f9      	bls.n	8006d74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <prvIdleTask+0x2c>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d90:	e7f0      	b.n	8006d74 <prvIdleTask+0x8>
 8006d92:	bf00      	nop
 8006d94:	200008a8 	.word	0x200008a8
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006da2:	2300      	movs	r3, #0
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	e00c      	b.n	8006dc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4a12      	ldr	r2, [pc, #72]	; (8006dfc <prvInitialiseTaskLists+0x60>)
 8006db4:	4413      	add	r3, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe f9ce 	bl	8005158 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	607b      	str	r3, [r7, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b37      	cmp	r3, #55	; 0x37
 8006dc6:	d9ef      	bls.n	8006da8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dc8:	480d      	ldr	r0, [pc, #52]	; (8006e00 <prvInitialiseTaskLists+0x64>)
 8006dca:	f7fe f9c5 	bl	8005158 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006dce:	480d      	ldr	r0, [pc, #52]	; (8006e04 <prvInitialiseTaskLists+0x68>)
 8006dd0:	f7fe f9c2 	bl	8005158 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dd4:	480c      	ldr	r0, [pc, #48]	; (8006e08 <prvInitialiseTaskLists+0x6c>)
 8006dd6:	f7fe f9bf 	bl	8005158 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dda:	480c      	ldr	r0, [pc, #48]	; (8006e0c <prvInitialiseTaskLists+0x70>)
 8006ddc:	f7fe f9bc 	bl	8005158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006de0:	480b      	ldr	r0, [pc, #44]	; (8006e10 <prvInitialiseTaskLists+0x74>)
 8006de2:	f7fe f9b9 	bl	8005158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <prvInitialiseTaskLists+0x78>)
 8006de8:	4a05      	ldr	r2, [pc, #20]	; (8006e00 <prvInitialiseTaskLists+0x64>)
 8006dea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dec:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <prvInitialiseTaskLists+0x7c>)
 8006dee:	4a05      	ldr	r2, [pc, #20]	; (8006e04 <prvInitialiseTaskLists+0x68>)
 8006df0:	601a      	str	r2, [r3, #0]
}
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200008a8 	.word	0x200008a8
 8006e00:	20000d08 	.word	0x20000d08
 8006e04:	20000d1c 	.word	0x20000d1c
 8006e08:	20000d38 	.word	0x20000d38
 8006e0c:	20000d4c 	.word	0x20000d4c
 8006e10:	20000d64 	.word	0x20000d64
 8006e14:	20000d30 	.word	0x20000d30
 8006e18:	20000d34 	.word	0x20000d34

08006e1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e22:	e019      	b.n	8006e58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e24:	f000 ff8e 	bl	8007d44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e28:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <prvCheckTasksWaitingTermination+0x50>)
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe fa19 	bl	800526c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <prvCheckTasksWaitingTermination+0x54>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	4a0b      	ldr	r2, [pc, #44]	; (8006e70 <prvCheckTasksWaitingTermination+0x54>)
 8006e42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e44:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <prvCheckTasksWaitingTermination+0x58>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	4a0a      	ldr	r2, [pc, #40]	; (8006e74 <prvCheckTasksWaitingTermination+0x58>)
 8006e4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e4e:	f000 ffa9 	bl	8007da4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f810 	bl	8006e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e58:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <prvCheckTasksWaitingTermination+0x58>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e1      	bne.n	8006e24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000d4c 	.word	0x20000d4c
 8006e70:	20000d78 	.word	0x20000d78
 8006e74:	20000d60 	.word	0x20000d60

08006e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d108      	bne.n	8006e9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 f946 	bl	8008120 <vPortFree>
				vPortFree( pxTCB );
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 f943 	bl	8008120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e9a:	e018      	b.n	8006ece <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d103      	bne.n	8006eae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 f93a 	bl	8008120 <vPortFree>
	}
 8006eac:	e00f      	b.n	8006ece <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d00a      	beq.n	8006ece <prvDeleteTCB+0x56>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	60fb      	str	r3, [r7, #12]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <prvDeleteTCB+0x54>
	}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <prvResetNextTaskUnblockTime+0x38>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <prvResetNextTaskUnblockTime+0x3c>)
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295
 8006eee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ef0:	e008      	b.n	8006f04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef2:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <prvResetNextTaskUnblockTime+0x38>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4a04      	ldr	r2, [pc, #16]	; (8006f14 <prvResetNextTaskUnblockTime+0x3c>)
 8006f02:	6013      	str	r3, [r2, #0]
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	20000d30 	.word	0x20000d30
 8006f14:	20000d98 	.word	0x20000d98

08006f18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <xTaskGetSchedulerState+0x34>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d102      	bne.n	8006f2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f26:	2301      	movs	r3, #1
 8006f28:	607b      	str	r3, [r7, #4]
 8006f2a:	e008      	b.n	8006f3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f2c:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <xTaskGetSchedulerState+0x38>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f34:	2302      	movs	r3, #2
 8006f36:	607b      	str	r3, [r7, #4]
 8006f38:	e001      	b.n	8006f3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f3e:	687b      	ldr	r3, [r7, #4]
	}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	20000d84 	.word	0x20000d84
 8006f50:	20000da0 	.word	0x20000da0

08006f54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d051      	beq.n	800700e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6e:	4b2a      	ldr	r3, [pc, #168]	; (8007018 <xTaskPriorityInherit+0xc4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d241      	bcs.n	8006ffc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	db06      	blt.n	8006f8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f80:	4b25      	ldr	r3, [pc, #148]	; (8007018 <xTaskPriorityInherit+0xc4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6959      	ldr	r1, [r3, #20]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4a1f      	ldr	r2, [pc, #124]	; (800701c <xTaskPriorityInherit+0xc8>)
 8006fa0:	4413      	add	r3, r2
 8006fa2:	4299      	cmp	r1, r3
 8006fa4:	d122      	bne.n	8006fec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe f95e 	bl	800526c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fb0:	4b19      	ldr	r3, [pc, #100]	; (8007018 <xTaskPriorityInherit+0xc4>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbe:	4b18      	ldr	r3, [pc, #96]	; (8007020 <xTaskPriorityInherit+0xcc>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d903      	bls.n	8006fce <xTaskPriorityInherit+0x7a>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	4a15      	ldr	r2, [pc, #84]	; (8007020 <xTaskPriorityInherit+0xcc>)
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4a10      	ldr	r2, [pc, #64]	; (800701c <xTaskPriorityInherit+0xc8>)
 8006fdc:	441a      	add	r2, r3
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	f7fe f8e4 	bl	80051b2 <vListInsertEnd>
 8006fea:	e004      	b.n	8006ff6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fec:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <xTaskPriorityInherit+0xc4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e008      	b.n	800700e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <xTaskPriorityInherit+0xc4>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	429a      	cmp	r2, r3
 8007008:	d201      	bcs.n	800700e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800700a:	2301      	movs	r3, #1
 800700c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800700e:	68fb      	ldr	r3, [r7, #12]
	}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	200008a4 	.word	0x200008a4
 800701c:	200008a8 	.word	0x200008a8
 8007020:	20000d80 	.word	0x20000d80

08007024 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d056      	beq.n	80070e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800703a:	4b2e      	ldr	r3, [pc, #184]	; (80070f4 <xTaskPriorityDisinherit+0xd0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	429a      	cmp	r2, r3
 8007042:	d00a      	beq.n	800705a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	60fb      	str	r3, [r7, #12]
}
 8007056:	bf00      	nop
 8007058:	e7fe      	b.n	8007058 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	60bb      	str	r3, [r7, #8]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707c:	1e5a      	subs	r2, r3, #1
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708a:	429a      	cmp	r2, r3
 800708c:	d02c      	beq.n	80070e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007092:	2b00      	cmp	r3, #0
 8007094:	d128      	bne.n	80070e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	3304      	adds	r3, #4
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe f8e6 	bl	800526c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b8:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <xTaskPriorityDisinherit+0xd4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d903      	bls.n	80070c8 <xTaskPriorityDisinherit+0xa4>
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	4a0c      	ldr	r2, [pc, #48]	; (80070f8 <xTaskPriorityDisinherit+0xd4>)
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070cc:	4613      	mov	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4a09      	ldr	r2, [pc, #36]	; (80070fc <xTaskPriorityDisinherit+0xd8>)
 80070d6:	441a      	add	r2, r3
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	3304      	adds	r3, #4
 80070dc:	4619      	mov	r1, r3
 80070de:	4610      	mov	r0, r2
 80070e0:	f7fe f867 	bl	80051b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070e8:	697b      	ldr	r3, [r7, #20]
	}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	200008a4 	.word	0x200008a4
 80070f8:	20000d80 	.word	0x20000d80
 80070fc:	200008a8 	.word	0x200008a8

08007100 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800710e:	2301      	movs	r3, #1
 8007110:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d06a      	beq.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10a      	bne.n	8007136 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	429a      	cmp	r2, r3
 800713e:	d902      	bls.n	8007146 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	e002      	b.n	800714c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	429a      	cmp	r2, r3
 8007154:	d04b      	beq.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	429a      	cmp	r2, r3
 800715e:	d146      	bne.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007160:	4b25      	ldr	r3, [pc, #148]	; (80071f8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	429a      	cmp	r2, r3
 8007168:	d10a      	bne.n	8007180 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	60bb      	str	r3, [r7, #8]
}
 800717c:	bf00      	nop
 800717e:	e7fe      	b.n	800717e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	69fa      	ldr	r2, [r7, #28]
 800718a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	db04      	blt.n	800719e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	6959      	ldr	r1, [r3, #20]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4a13      	ldr	r2, [pc, #76]	; (80071fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80071ae:	4413      	add	r3, r2
 80071b0:	4299      	cmp	r1, r3
 80071b2:	d11c      	bne.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe f857 	bl	800526c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d903      	bls.n	80071d2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	4a0c      	ldr	r2, [pc, #48]	; (8007200 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a07      	ldr	r2, [pc, #28]	; (80071fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80071e0:	441a      	add	r2, r3
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7fd ffe2 	bl	80051b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071ee:	bf00      	nop
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200008a4 	.word	0x200008a4
 80071fc:	200008a8 	.word	0x200008a8
 8007200:	20000d80 	.word	0x20000d80

08007204 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007208:	4b07      	ldr	r3, [pc, #28]	; (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007216:	3201      	adds	r2, #1
 8007218:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800721a:	4b03      	ldr	r3, [pc, #12]	; (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 800721c:	681b      	ldr	r3, [r3, #0]
	}
 800721e:	4618      	mov	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	200008a4 	.word	0x200008a4

0800722c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007236:	4b21      	ldr	r3, [pc, #132]	; (80072bc <prvAddCurrentTaskToDelayedList+0x90>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800723c:	4b20      	ldr	r3, [pc, #128]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3304      	adds	r3, #4
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe f812 	bl	800526c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	d10a      	bne.n	8007266 <prvAddCurrentTaskToDelayedList+0x3a>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007256:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3304      	adds	r3, #4
 800725c:	4619      	mov	r1, r3
 800725e:	4819      	ldr	r0, [pc, #100]	; (80072c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007260:	f7fd ffa7 	bl	80051b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007264:	e026      	b.n	80072b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4413      	add	r3, r2
 800726c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800726e:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	429a      	cmp	r2, r3
 800727c:	d209      	bcs.n	8007292 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800727e:	4b12      	ldr	r3, [pc, #72]	; (80072c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3304      	adds	r3, #4
 8007288:	4619      	mov	r1, r3
 800728a:	4610      	mov	r0, r2
 800728c:	f7fd ffb5 	bl	80051fa <vListInsert>
}
 8007290:	e010      	b.n	80072b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007292:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f7fd ffab 	bl	80051fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072a4:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d202      	bcs.n	80072b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072ae:	4a08      	ldr	r2, [pc, #32]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	6013      	str	r3, [r2, #0]
}
 80072b4:	bf00      	nop
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20000d7c 	.word	0x20000d7c
 80072c0:	200008a4 	.word	0x200008a4
 80072c4:	20000d64 	.word	0x20000d64
 80072c8:	20000d34 	.word	0x20000d34
 80072cc:	20000d30 	.word	0x20000d30
 80072d0:	20000d98 	.word	0x20000d98

080072d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08a      	sub	sp, #40	; 0x28
 80072d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072da:	2300      	movs	r3, #0
 80072dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072de:	f000 fba1 	bl	8007a24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072e2:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <xTimerCreateTimerTask+0x80>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d021      	beq.n	800732e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072f2:	1d3a      	adds	r2, r7, #4
 80072f4:	f107 0108 	add.w	r1, r7, #8
 80072f8:	f107 030c 	add.w	r3, r7, #12
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fd ff11 	bl	8005124 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	9202      	str	r2, [sp, #8]
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	2302      	movs	r3, #2
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	2300      	movs	r3, #0
 8007312:	460a      	mov	r2, r1
 8007314:	4910      	ldr	r1, [pc, #64]	; (8007358 <xTimerCreateTimerTask+0x84>)
 8007316:	4811      	ldr	r0, [pc, #68]	; (800735c <xTimerCreateTimerTask+0x88>)
 8007318:	f7fe ffe0 	bl	80062dc <xTaskCreateStatic>
 800731c:	4603      	mov	r3, r0
 800731e:	4a10      	ldr	r2, [pc, #64]	; (8007360 <xTimerCreateTimerTask+0x8c>)
 8007320:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007322:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <xTimerCreateTimerTask+0x8c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800732a:	2301      	movs	r3, #1
 800732c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	613b      	str	r3, [r7, #16]
}
 8007346:	bf00      	nop
 8007348:	e7fe      	b.n	8007348 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800734a:	697b      	ldr	r3, [r7, #20]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20000dd4 	.word	0x20000dd4
 8007358:	08008424 	.word	0x08008424
 800735c:	080075cd 	.word	0x080075cd
 8007360:	20000dd8 	.word	0x20000dd8

08007364 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007372:	202c      	movs	r0, #44	; 0x2c
 8007374:	f000 fe08 	bl	8007f88 <pvPortMalloc>
 8007378:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00d      	beq.n	800739c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 f843 	bl	8007422 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800739c:	697b      	ldr	r3, [r7, #20]
	}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b08a      	sub	sp, #40	; 0x28
 80073aa:	af02      	add	r7, sp, #8
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	60b9      	str	r1, [r7, #8]
 80073b0:	607a      	str	r2, [r7, #4]
 80073b2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80073b4:	232c      	movs	r3, #44	; 0x2c
 80073b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b2c      	cmp	r3, #44	; 0x2c
 80073bc:	d00a      	beq.n	80073d4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	61bb      	str	r3, [r7, #24]
}
 80073d0:	bf00      	nop
 80073d2:	e7fe      	b.n	80073d2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xTimerCreateStatic+0x4c>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	617b      	str	r3, [r7, #20]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00d      	beq.n	8007418 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 f805 	bl	8007422 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007418:	69fb      	ldr	r3, [r7, #28]
	}
 800741a:	4618      	mov	r0, r3
 800741c:	3720      	adds	r7, #32
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b086      	sub	sp, #24
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	617b      	str	r3, [r7, #20]
}
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01e      	beq.n	8007490 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007452:	f000 fae7 	bl	8007a24 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	3304      	adds	r3, #4
 8007472:	4618      	mov	r0, r3
 8007474:	f7fd fe90 	bl	8005198 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d008      	beq.n	8007490 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007484:	f043 0304 	orr.w	r3, r3, #4
 8007488:	b2da      	uxtb	r2, r3
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007490:	bf00      	nop
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08a      	sub	sp, #40	; 0x28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	623b      	str	r3, [r7, #32]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074c6:	4b1a      	ldr	r3, [pc, #104]	; (8007530 <xTimerGenericCommand+0x98>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d02a      	beq.n	8007524 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b05      	cmp	r3, #5
 80074de:	dc18      	bgt.n	8007512 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074e0:	f7ff fd1a 	bl	8006f18 <xTaskGetSchedulerState>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d109      	bne.n	80074fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074ea:	4b11      	ldr	r3, [pc, #68]	; (8007530 <xTimerGenericCommand+0x98>)
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	f107 0110 	add.w	r1, r7, #16
 80074f2:	2300      	movs	r3, #0
 80074f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f6:	f7fe f88b 	bl	8005610 <xQueueGenericSend>
 80074fa:	6278      	str	r0, [r7, #36]	; 0x24
 80074fc:	e012      	b.n	8007524 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074fe:	4b0c      	ldr	r3, [pc, #48]	; (8007530 <xTimerGenericCommand+0x98>)
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	f107 0110 	add.w	r1, r7, #16
 8007506:	2300      	movs	r3, #0
 8007508:	2200      	movs	r2, #0
 800750a:	f7fe f881 	bl	8005610 <xQueueGenericSend>
 800750e:	6278      	str	r0, [r7, #36]	; 0x24
 8007510:	e008      	b.n	8007524 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007512:	4b07      	ldr	r3, [pc, #28]	; (8007530 <xTimerGenericCommand+0x98>)
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	f107 0110 	add.w	r1, r7, #16
 800751a:	2300      	movs	r3, #0
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	f7fe f975 	bl	800580c <xQueueGenericSendFromISR>
 8007522:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007526:	4618      	mov	r0, r3
 8007528:	3728      	adds	r7, #40	; 0x28
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000dd4 	.word	0x20000dd4

08007534 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af02      	add	r7, sp, #8
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753e:	4b22      	ldr	r3, [pc, #136]	; (80075c8 <prvProcessExpiredTimer+0x94>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	3304      	adds	r3, #4
 800754c:	4618      	mov	r0, r3
 800754e:	f7fd fe8d 	bl	800526c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d022      	beq.n	80075a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	699a      	ldr	r2, [r3, #24]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	18d1      	adds	r1, r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	6978      	ldr	r0, [r7, #20]
 800756e:	f000 f8d1 	bl	8007714 <prvInsertTimerInActiveList>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01f      	beq.n	80075b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007578:	2300      	movs	r3, #0
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	2300      	movs	r3, #0
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	2100      	movs	r1, #0
 8007582:	6978      	ldr	r0, [r7, #20]
 8007584:	f7ff ff88 	bl	8007498 <xTimerGenericCommand>
 8007588:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d113      	bne.n	80075b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	60fb      	str	r3, [r7, #12]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ac:	f023 0301 	bic.w	r3, r3, #1
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	6978      	ldr	r0, [r7, #20]
 80075be:	4798      	blx	r3
}
 80075c0:	bf00      	nop
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000dcc 	.word	0x20000dcc

080075cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075d4:	f107 0308 	add.w	r3, r7, #8
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 f857 	bl	800768c <prvGetNextExpireTime>
 80075de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4619      	mov	r1, r3
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f803 	bl	80075f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075ea:	f000 f8d5 	bl	8007798 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075ee:	e7f1      	b.n	80075d4 <prvTimerTask+0x8>

080075f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075fa:	f7ff f8ab 	bl	8006754 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075fe:	f107 0308 	add.w	r3, r7, #8
 8007602:	4618      	mov	r0, r3
 8007604:	f000 f866 	bl	80076d4 <prvSampleTimeNow>
 8007608:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d130      	bne.n	8007672 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10a      	bne.n	800762c <prvProcessTimerOrBlockTask+0x3c>
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	429a      	cmp	r2, r3
 800761c:	d806      	bhi.n	800762c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800761e:	f7ff f8a7 	bl	8006770 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007622:	68f9      	ldr	r1, [r7, #12]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff ff85 	bl	8007534 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800762a:	e024      	b.n	8007676 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d008      	beq.n	8007644 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007632:	4b13      	ldr	r3, [pc, #76]	; (8007680 <prvProcessTimerOrBlockTask+0x90>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <prvProcessTimerOrBlockTask+0x50>
 800763c:	2301      	movs	r3, #1
 800763e:	e000      	b.n	8007642 <prvProcessTimerOrBlockTask+0x52>
 8007640:	2300      	movs	r3, #0
 8007642:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007644:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <prvProcessTimerOrBlockTask+0x94>)
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	4619      	mov	r1, r3
 8007652:	f7fe fe0f 	bl	8006274 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007656:	f7ff f88b 	bl	8006770 <xTaskResumeAll>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007660:	4b09      	ldr	r3, [pc, #36]	; (8007688 <prvProcessTimerOrBlockTask+0x98>)
 8007662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
}
 8007670:	e001      	b.n	8007676 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007672:	f7ff f87d 	bl	8006770 <xTaskResumeAll>
}
 8007676:	bf00      	nop
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000dd0 	.word	0x20000dd0
 8007684:	20000dd4 	.word	0x20000dd4
 8007688:	e000ed04 	.word	0xe000ed04

0800768c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007694:	4b0e      	ldr	r3, [pc, #56]	; (80076d0 <prvGetNextExpireTime+0x44>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <prvGetNextExpireTime+0x16>
 800769e:	2201      	movs	r2, #1
 80076a0:	e000      	b.n	80076a4 <prvGetNextExpireTime+0x18>
 80076a2:	2200      	movs	r2, #0
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d105      	bne.n	80076bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076b0:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <prvGetNextExpireTime+0x44>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	e001      	b.n	80076c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	20000dcc 	.word	0x20000dcc

080076d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076dc:	f7ff f8e6 	bl	80068ac <xTaskGetTickCount>
 80076e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076e2:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <prvSampleTimeNow+0x3c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d205      	bcs.n	80076f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076ec:	f000 f936 	bl	800795c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	e002      	b.n	80076fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076fe:	4a04      	ldr	r2, [pc, #16]	; (8007710 <prvSampleTimeNow+0x3c>)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007704:	68fb      	ldr	r3, [r7, #12]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20000ddc 	.word	0x20000ddc

08007714 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007722:	2300      	movs	r3, #0
 8007724:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	429a      	cmp	r2, r3
 8007738:	d812      	bhi.n	8007760 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	429a      	cmp	r2, r3
 8007746:	d302      	bcc.n	800774e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007748:	2301      	movs	r3, #1
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	e01b      	b.n	8007786 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800774e:	4b10      	ldr	r3, [pc, #64]	; (8007790 <prvInsertTimerInActiveList+0x7c>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3304      	adds	r3, #4
 8007756:	4619      	mov	r1, r3
 8007758:	4610      	mov	r0, r2
 800775a:	f7fd fd4e 	bl	80051fa <vListInsert>
 800775e:	e012      	b.n	8007786 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d206      	bcs.n	8007776 <prvInsertTimerInActiveList+0x62>
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d302      	bcc.n	8007776 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007770:	2301      	movs	r3, #1
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	e007      	b.n	8007786 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007776:	4b07      	ldr	r3, [pc, #28]	; (8007794 <prvInsertTimerInActiveList+0x80>)
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3304      	adds	r3, #4
 800777e:	4619      	mov	r1, r3
 8007780:	4610      	mov	r0, r2
 8007782:	f7fd fd3a 	bl	80051fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007786:	697b      	ldr	r3, [r7, #20]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000dd0 	.word	0x20000dd0
 8007794:	20000dcc 	.word	0x20000dcc

08007798 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08e      	sub	sp, #56	; 0x38
 800779c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800779e:	e0ca      	b.n	8007936 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	da18      	bge.n	80077d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077a6:	1d3b      	adds	r3, r7, #4
 80077a8:	3304      	adds	r3, #4
 80077aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	61fb      	str	r3, [r7, #28]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ce:	6850      	ldr	r0, [r2, #4]
 80077d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d2:	6892      	ldr	r2, [r2, #8]
 80077d4:	4611      	mov	r1, r2
 80077d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f2c0 80aa 	blt.w	8007934 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d004      	beq.n	80077f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	3304      	adds	r3, #4
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fd fd3b 	bl	800526c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077f6:	463b      	mov	r3, r7
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff ff6b 	bl	80076d4 <prvSampleTimeNow>
 80077fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b09      	cmp	r3, #9
 8007804:	f200 8097 	bhi.w	8007936 <prvProcessReceivedCommands+0x19e>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <prvProcessReceivedCommands+0x78>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007839 	.word	0x08007839
 8007814:	08007839 	.word	0x08007839
 8007818:	08007839 	.word	0x08007839
 800781c:	080078ad 	.word	0x080078ad
 8007820:	080078c1 	.word	0x080078c1
 8007824:	0800790b 	.word	0x0800790b
 8007828:	08007839 	.word	0x08007839
 800782c:	08007839 	.word	0x08007839
 8007830:	080078ad 	.word	0x080078ad
 8007834:	080078c1 	.word	0x080078c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800783e:	f043 0301 	orr.w	r3, r3, #1
 8007842:	b2da      	uxtb	r2, r3
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	18d1      	adds	r1, r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007858:	f7ff ff5c 	bl	8007714 <prvInsertTimerInActiveList>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d069      	beq.n	8007936 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007868:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b00      	cmp	r3, #0
 8007876:	d05e      	beq.n	8007936 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	441a      	add	r2, r3
 8007880:	2300      	movs	r3, #0
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	2300      	movs	r3, #0
 8007886:	2100      	movs	r1, #0
 8007888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800788a:	f7ff fe05 	bl	8007498 <xTimerGenericCommand>
 800788e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d14f      	bne.n	8007936 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	61bb      	str	r3, [r7, #24]
}
 80078a8:	bf00      	nop
 80078aa:	e7fe      	b.n	80078aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078b2:	f023 0301 	bic.w	r3, r3, #1
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80078be:	e03a      	b.n	8007936 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078c6:	f043 0301 	orr.w	r3, r3, #1
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	617b      	str	r3, [r7, #20]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	18d1      	adds	r1, r2, r3
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007904:	f7ff ff06 	bl	8007714 <prvInsertTimerInActiveList>
					break;
 8007908:	e015      	b.n	8007936 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d103      	bne.n	8007920 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800791a:	f000 fc01 	bl	8008120 <vPortFree>
 800791e:	e00a      	b.n	8007936 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007926:	f023 0301 	bic.w	r3, r3, #1
 800792a:	b2da      	uxtb	r2, r3
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007932:	e000      	b.n	8007936 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007934:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007936:	4b08      	ldr	r3, [pc, #32]	; (8007958 <prvProcessReceivedCommands+0x1c0>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	1d39      	adds	r1, r7, #4
 800793c:	2200      	movs	r2, #0
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe f88c 	bl	8005a5c <xQueueReceive>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	f47f af2a 	bne.w	80077a0 <prvProcessReceivedCommands+0x8>
	}
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	3730      	adds	r7, #48	; 0x30
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20000dd4 	.word	0x20000dd4

0800795c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007962:	e048      	b.n	80079f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007964:	4b2d      	ldr	r3, [pc, #180]	; (8007a1c <prvSwitchTimerLists+0xc0>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800796e:	4b2b      	ldr	r3, [pc, #172]	; (8007a1c <prvSwitchTimerLists+0xc0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3304      	adds	r3, #4
 800797c:	4618      	mov	r0, r3
 800797e:	f7fd fc75 	bl	800526c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d02e      	beq.n	80079f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4413      	add	r3, r2
 80079a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d90e      	bls.n	80079c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079b6:	4b19      	ldr	r3, [pc, #100]	; (8007a1c <prvSwitchTimerLists+0xc0>)
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3304      	adds	r3, #4
 80079be:	4619      	mov	r1, r3
 80079c0:	4610      	mov	r0, r2
 80079c2:	f7fd fc1a 	bl	80051fa <vListInsert>
 80079c6:	e016      	b.n	80079f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079c8:	2300      	movs	r3, #0
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	2300      	movs	r3, #0
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	2100      	movs	r1, #0
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f7ff fd60 	bl	8007498 <xTimerGenericCommand>
 80079d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	603b      	str	r3, [r7, #0]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079f6:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <prvSwitchTimerLists+0xc0>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1b1      	bne.n	8007964 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a00:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <prvSwitchTimerLists+0xc0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a06:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <prvSwitchTimerLists+0xc4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a04      	ldr	r2, [pc, #16]	; (8007a1c <prvSwitchTimerLists+0xc0>)
 8007a0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a0e:	4a04      	ldr	r2, [pc, #16]	; (8007a20 <prvSwitchTimerLists+0xc4>)
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	6013      	str	r3, [r2, #0]
}
 8007a14:	bf00      	nop
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000dcc 	.word	0x20000dcc
 8007a20:	20000dd0 	.word	0x20000dd0

08007a24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a2a:	f000 f98b 	bl	8007d44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a2e:	4b15      	ldr	r3, [pc, #84]	; (8007a84 <prvCheckForValidListAndQueue+0x60>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d120      	bne.n	8007a78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a36:	4814      	ldr	r0, [pc, #80]	; (8007a88 <prvCheckForValidListAndQueue+0x64>)
 8007a38:	f7fd fb8e 	bl	8005158 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a3c:	4813      	ldr	r0, [pc, #76]	; (8007a8c <prvCheckForValidListAndQueue+0x68>)
 8007a3e:	f7fd fb8b 	bl	8005158 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a42:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <prvCheckForValidListAndQueue+0x6c>)
 8007a44:	4a10      	ldr	r2, [pc, #64]	; (8007a88 <prvCheckForValidListAndQueue+0x64>)
 8007a46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a48:	4b12      	ldr	r3, [pc, #72]	; (8007a94 <prvCheckForValidListAndQueue+0x70>)
 8007a4a:	4a10      	ldr	r2, [pc, #64]	; (8007a8c <prvCheckForValidListAndQueue+0x68>)
 8007a4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <prvCheckForValidListAndQueue+0x74>)
 8007a54:	4a11      	ldr	r2, [pc, #68]	; (8007a9c <prvCheckForValidListAndQueue+0x78>)
 8007a56:	2110      	movs	r1, #16
 8007a58:	200a      	movs	r0, #10
 8007a5a:	f7fd fc99 	bl	8005390 <xQueueGenericCreateStatic>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4a08      	ldr	r2, [pc, #32]	; (8007a84 <prvCheckForValidListAndQueue+0x60>)
 8007a62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a64:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <prvCheckForValidListAndQueue+0x60>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d005      	beq.n	8007a78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a6c:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <prvCheckForValidListAndQueue+0x60>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	490b      	ldr	r1, [pc, #44]	; (8007aa0 <prvCheckForValidListAndQueue+0x7c>)
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe fbaa 	bl	80061cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a78:	f000 f994 	bl	8007da4 <vPortExitCritical>
}
 8007a7c:	bf00      	nop
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000dd4 	.word	0x20000dd4
 8007a88:	20000da4 	.word	0x20000da4
 8007a8c:	20000db8 	.word	0x20000db8
 8007a90:	20000dcc 	.word	0x20000dcc
 8007a94:	20000dd0 	.word	0x20000dd0
 8007a98:	20000e80 	.word	0x20000e80
 8007a9c:	20000de0 	.word	0x20000de0
 8007aa0:	0800842c 	.word	0x0800842c

08007aa4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10a      	bne.n	8007acc <pvTimerGetTimerID+0x28>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	60fb      	str	r3, [r7, #12]
}
 8007ac8:	bf00      	nop
 8007aca:	e7fe      	b.n	8007aca <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007acc:	f000 f93a 	bl	8007d44 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007ad6:	f000 f965 	bl	8007da4 <vPortExitCritical>

	return pvReturn;
 8007ada:	693b      	ldr	r3, [r7, #16]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3b04      	subs	r3, #4
 8007af4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3b04      	subs	r3, #4
 8007b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f023 0201 	bic.w	r2, r3, #1
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3b04      	subs	r3, #4
 8007b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b14:	4a0c      	ldr	r2, [pc, #48]	; (8007b48 <pxPortInitialiseStack+0x64>)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3b14      	subs	r3, #20
 8007b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3b04      	subs	r3, #4
 8007b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f06f 0202 	mvn.w	r2, #2
 8007b32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3b20      	subs	r3, #32
 8007b38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	08007b4d 	.word	0x08007b4d

08007b4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b56:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <prvTaskExitError+0x54>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5e:	d00a      	beq.n	8007b76 <prvTaskExitError+0x2a>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	60fb      	str	r3, [r7, #12]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <prvTaskExitError+0x28>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60bb      	str	r3, [r7, #8]
}
 8007b88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b8a:	bf00      	nop
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0fc      	beq.n	8007b8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b92:	bf00      	nop
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	2000000c 	.word	0x2000000c
	...

08007bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bb0:	4b07      	ldr	r3, [pc, #28]	; (8007bd0 <pxCurrentTCBConst2>)
 8007bb2:	6819      	ldr	r1, [r3, #0]
 8007bb4:	6808      	ldr	r0, [r1, #0]
 8007bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bba:	f380 8809 	msr	PSP, r0
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f04f 0000 	mov.w	r0, #0
 8007bc6:	f380 8811 	msr	BASEPRI, r0
 8007bca:	4770      	bx	lr
 8007bcc:	f3af 8000 	nop.w

08007bd0 <pxCurrentTCBConst2>:
 8007bd0:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop

08007bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bd8:	4808      	ldr	r0, [pc, #32]	; (8007bfc <prvPortStartFirstTask+0x24>)
 8007bda:	6800      	ldr	r0, [r0, #0]
 8007bdc:	6800      	ldr	r0, [r0, #0]
 8007bde:	f380 8808 	msr	MSP, r0
 8007be2:	f04f 0000 	mov.w	r0, #0
 8007be6:	f380 8814 	msr	CONTROL, r0
 8007bea:	b662      	cpsie	i
 8007bec:	b661      	cpsie	f
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	df00      	svc	0
 8007bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bfa:	bf00      	nop
 8007bfc:	e000ed08 	.word	0xe000ed08

08007c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c06:	4b46      	ldr	r3, [pc, #280]	; (8007d20 <xPortStartScheduler+0x120>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a46      	ldr	r2, [pc, #280]	; (8007d24 <xPortStartScheduler+0x124>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d10a      	bne.n	8007c26 <xPortStartScheduler+0x26>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	613b      	str	r3, [r7, #16]
}
 8007c22:	bf00      	nop
 8007c24:	e7fe      	b.n	8007c24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c26:	4b3e      	ldr	r3, [pc, #248]	; (8007d20 <xPortStartScheduler+0x120>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a3f      	ldr	r2, [pc, #252]	; (8007d28 <xPortStartScheduler+0x128>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d10a      	bne.n	8007c46 <xPortStartScheduler+0x46>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	60fb      	str	r3, [r7, #12]
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c46:	4b39      	ldr	r3, [pc, #228]	; (8007d2c <xPortStartScheduler+0x12c>)
 8007c48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	22ff      	movs	r2, #255	; 0xff
 8007c56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	4b31      	ldr	r3, [pc, #196]	; (8007d30 <xPortStartScheduler+0x130>)
 8007c6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c6e:	4b31      	ldr	r3, [pc, #196]	; (8007d34 <xPortStartScheduler+0x134>)
 8007c70:	2207      	movs	r2, #7
 8007c72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c74:	e009      	b.n	8007c8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c76:	4b2f      	ldr	r3, [pc, #188]	; (8007d34 <xPortStartScheduler+0x134>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	4a2d      	ldr	r2, [pc, #180]	; (8007d34 <xPortStartScheduler+0x134>)
 8007c7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c92:	2b80      	cmp	r3, #128	; 0x80
 8007c94:	d0ef      	beq.n	8007c76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c96:	4b27      	ldr	r3, [pc, #156]	; (8007d34 <xPortStartScheduler+0x134>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f1c3 0307 	rsb	r3, r3, #7
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d00a      	beq.n	8007cb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	60bb      	str	r3, [r7, #8]
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cb8:	4b1e      	ldr	r3, [pc, #120]	; (8007d34 <xPortStartScheduler+0x134>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	4a1d      	ldr	r2, [pc, #116]	; (8007d34 <xPortStartScheduler+0x134>)
 8007cc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cc2:	4b1c      	ldr	r3, [pc, #112]	; (8007d34 <xPortStartScheduler+0x134>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cca:	4a1a      	ldr	r2, [pc, #104]	; (8007d34 <xPortStartScheduler+0x134>)
 8007ccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cd6:	4b18      	ldr	r3, [pc, #96]	; (8007d38 <xPortStartScheduler+0x138>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <xPortStartScheduler+0x138>)
 8007cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ce2:	4b15      	ldr	r3, [pc, #84]	; (8007d38 <xPortStartScheduler+0x138>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a14      	ldr	r2, [pc, #80]	; (8007d38 <xPortStartScheduler+0x138>)
 8007ce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cee:	f000 f8dd 	bl	8007eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cf2:	4b12      	ldr	r3, [pc, #72]	; (8007d3c <xPortStartScheduler+0x13c>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cf8:	f000 f8fc 	bl	8007ef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cfc:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <xPortStartScheduler+0x140>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a0f      	ldr	r2, [pc, #60]	; (8007d40 <xPortStartScheduler+0x140>)
 8007d02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d08:	f7ff ff66 	bl	8007bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d0c:	f7fe fe98 	bl	8006a40 <vTaskSwitchContext>
	prvTaskExitError();
 8007d10:	f7ff ff1c 	bl	8007b4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	e000ed00 	.word	0xe000ed00
 8007d24:	410fc271 	.word	0x410fc271
 8007d28:	410fc270 	.word	0x410fc270
 8007d2c:	e000e400 	.word	0xe000e400
 8007d30:	20000ed0 	.word	0x20000ed0
 8007d34:	20000ed4 	.word	0x20000ed4
 8007d38:	e000ed20 	.word	0xe000ed20
 8007d3c:	2000000c 	.word	0x2000000c
 8007d40:	e000ef34 	.word	0xe000ef34

08007d44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	607b      	str	r3, [r7, #4]
}
 8007d5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d5e:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <vPortEnterCritical+0x58>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3301      	adds	r3, #1
 8007d64:	4a0d      	ldr	r2, [pc, #52]	; (8007d9c <vPortEnterCritical+0x58>)
 8007d66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d68:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <vPortEnterCritical+0x58>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d10f      	bne.n	8007d90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d70:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <vPortEnterCritical+0x5c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00a      	beq.n	8007d90 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	603b      	str	r3, [r7, #0]
}
 8007d8c:	bf00      	nop
 8007d8e:	e7fe      	b.n	8007d8e <vPortEnterCritical+0x4a>
	}
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	2000000c 	.word	0x2000000c
 8007da0:	e000ed04 	.word	0xe000ed04

08007da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007daa:	4b12      	ldr	r3, [pc, #72]	; (8007df4 <vPortExitCritical+0x50>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <vPortExitCritical+0x24>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	607b      	str	r3, [r7, #4]
}
 8007dc4:	bf00      	nop
 8007dc6:	e7fe      	b.n	8007dc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007dc8:	4b0a      	ldr	r3, [pc, #40]	; (8007df4 <vPortExitCritical+0x50>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	4a09      	ldr	r2, [pc, #36]	; (8007df4 <vPortExitCritical+0x50>)
 8007dd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dd2:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <vPortExitCritical+0x50>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d105      	bne.n	8007de6 <vPortExitCritical+0x42>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	f383 8811 	msr	BASEPRI, r3
}
 8007de4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	2000000c 	.word	0x2000000c
	...

08007e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e00:	f3ef 8009 	mrs	r0, PSP
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	4b15      	ldr	r3, [pc, #84]	; (8007e60 <pxCurrentTCBConst>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	f01e 0f10 	tst.w	lr, #16
 8007e10:	bf08      	it	eq
 8007e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1a:	6010      	str	r0, [r2, #0]
 8007e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e24:	f380 8811 	msr	BASEPRI, r0
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f7fe fe06 	bl	8006a40 <vTaskSwitchContext>
 8007e34:	f04f 0000 	mov.w	r0, #0
 8007e38:	f380 8811 	msr	BASEPRI, r0
 8007e3c:	bc09      	pop	{r0, r3}
 8007e3e:	6819      	ldr	r1, [r3, #0]
 8007e40:	6808      	ldr	r0, [r1, #0]
 8007e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e46:	f01e 0f10 	tst.w	lr, #16
 8007e4a:	bf08      	it	eq
 8007e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e50:	f380 8809 	msr	PSP, r0
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	f3af 8000 	nop.w

08007e60 <pxCurrentTCBConst>:
 8007e60:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop

08007e68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	607b      	str	r3, [r7, #4]
}
 8007e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e82:	f7fe fd23 	bl	80068cc <xTaskIncrementTick>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e8c:	4b06      	ldr	r3, [pc, #24]	; (8007ea8 <xPortSysTickHandler+0x40>)
 8007e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	2300      	movs	r3, #0
 8007e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	f383 8811 	msr	BASEPRI, r3
}
 8007e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	e000ed04 	.word	0xe000ed04

08007eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007eb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ee0 <vPortSetupTimerInterrupt+0x34>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <vPortSetupTimerInterrupt+0x38>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <vPortSetupTimerInterrupt+0x3c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <vPortSetupTimerInterrupt+0x40>)
 8007ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec6:	099b      	lsrs	r3, r3, #6
 8007ec8:	4a09      	ldr	r2, [pc, #36]	; (8007ef0 <vPortSetupTimerInterrupt+0x44>)
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ece:	4b04      	ldr	r3, [pc, #16]	; (8007ee0 <vPortSetupTimerInterrupt+0x34>)
 8007ed0:	2207      	movs	r2, #7
 8007ed2:	601a      	str	r2, [r3, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	e000e010 	.word	0xe000e010
 8007ee4:	e000e018 	.word	0xe000e018
 8007ee8:	20000000 	.word	0x20000000
 8007eec:	10624dd3 	.word	0x10624dd3
 8007ef0:	e000e014 	.word	0xe000e014

08007ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f04 <vPortEnableVFP+0x10>
 8007ef8:	6801      	ldr	r1, [r0, #0]
 8007efa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007efe:	6001      	str	r1, [r0, #0]
 8007f00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f02:	bf00      	nop
 8007f04:	e000ed88 	.word	0xe000ed88

08007f08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f0e:	f3ef 8305 	mrs	r3, IPSR
 8007f12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2b0f      	cmp	r3, #15
 8007f18:	d914      	bls.n	8007f44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f1a:	4a17      	ldr	r2, [pc, #92]	; (8007f78 <vPortValidateInterruptPriority+0x70>)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4413      	add	r3, r2
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f24:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <vPortValidateInterruptPriority+0x74>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	7afa      	ldrb	r2, [r7, #11]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d20a      	bcs.n	8007f44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	607b      	str	r3, [r7, #4]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f44:	4b0e      	ldr	r3, [pc, #56]	; (8007f80 <vPortValidateInterruptPriority+0x78>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f4c:	4b0d      	ldr	r3, [pc, #52]	; (8007f84 <vPortValidateInterruptPriority+0x7c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d90a      	bls.n	8007f6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	603b      	str	r3, [r7, #0]
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <vPortValidateInterruptPriority+0x60>
	}
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	e000e3f0 	.word	0xe000e3f0
 8007f7c:	20000ed0 	.word	0x20000ed0
 8007f80:	e000ed0c 	.word	0xe000ed0c
 8007f84:	20000ed4 	.word	0x20000ed4

08007f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08a      	sub	sp, #40	; 0x28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f94:	f7fe fbde 	bl	8006754 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f98:	4b5b      	ldr	r3, [pc, #364]	; (8008108 <pvPortMalloc+0x180>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fa0:	f000 f920 	bl	80081e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fa4:	4b59      	ldr	r3, [pc, #356]	; (800810c <pvPortMalloc+0x184>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f040 8093 	bne.w	80080d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01d      	beq.n	8007ff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007fb8:	2208      	movs	r2, #8
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d014      	beq.n	8007ff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f023 0307 	bic.w	r3, r3, #7
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <pvPortMalloc+0x6c>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	617b      	str	r3, [r7, #20]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d06e      	beq.n	80080d8 <pvPortMalloc+0x150>
 8007ffa:	4b45      	ldr	r3, [pc, #276]	; (8008110 <pvPortMalloc+0x188>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	429a      	cmp	r2, r3
 8008002:	d869      	bhi.n	80080d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008004:	4b43      	ldr	r3, [pc, #268]	; (8008114 <pvPortMalloc+0x18c>)
 8008006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008008:	4b42      	ldr	r3, [pc, #264]	; (8008114 <pvPortMalloc+0x18c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800800e:	e004      	b.n	800801a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	429a      	cmp	r2, r3
 8008022:	d903      	bls.n	800802c <pvPortMalloc+0xa4>
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f1      	bne.n	8008010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800802c:	4b36      	ldr	r3, [pc, #216]	; (8008108 <pvPortMalloc+0x180>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008032:	429a      	cmp	r2, r3
 8008034:	d050      	beq.n	80080d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2208      	movs	r2, #8
 800803c:	4413      	add	r3, r2
 800803e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	2308      	movs	r3, #8
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	429a      	cmp	r2, r3
 8008056:	d91f      	bls.n	8008098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4413      	add	r3, r2
 800805e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <pvPortMalloc+0xf8>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	613b      	str	r3, [r7, #16]
}
 800807c:	bf00      	nop
 800807e:	e7fe      	b.n	800807e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	1ad2      	subs	r2, r2, r3
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008092:	69b8      	ldr	r0, [r7, #24]
 8008094:	f000 f908 	bl	80082a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008098:	4b1d      	ldr	r3, [pc, #116]	; (8008110 <pvPortMalloc+0x188>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	4a1b      	ldr	r2, [pc, #108]	; (8008110 <pvPortMalloc+0x188>)
 80080a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080a6:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <pvPortMalloc+0x188>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4b1b      	ldr	r3, [pc, #108]	; (8008118 <pvPortMalloc+0x190>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d203      	bcs.n	80080ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080b2:	4b17      	ldr	r3, [pc, #92]	; (8008110 <pvPortMalloc+0x188>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a18      	ldr	r2, [pc, #96]	; (8008118 <pvPortMalloc+0x190>)
 80080b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	4b13      	ldr	r3, [pc, #76]	; (800810c <pvPortMalloc+0x184>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	431a      	orrs	r2, r3
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080ce:	4b13      	ldr	r3, [pc, #76]	; (800811c <pvPortMalloc+0x194>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3301      	adds	r3, #1
 80080d4:	4a11      	ldr	r2, [pc, #68]	; (800811c <pvPortMalloc+0x194>)
 80080d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080d8:	f7fe fb4a 	bl	8006770 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	f003 0307 	and.w	r3, r3, #7
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <pvPortMalloc+0x174>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	60fb      	str	r3, [r7, #12]
}
 80080f8:	bf00      	nop
 80080fa:	e7fe      	b.n	80080fa <pvPortMalloc+0x172>
	return pvReturn;
 80080fc:	69fb      	ldr	r3, [r7, #28]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3728      	adds	r7, #40	; 0x28
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20002650 	.word	0x20002650
 800810c:	20002664 	.word	0x20002664
 8008110:	20002654 	.word	0x20002654
 8008114:	20002648 	.word	0x20002648
 8008118:	20002658 	.word	0x20002658
 800811c:	2000265c 	.word	0x2000265c

08008120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d04d      	beq.n	80081ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008132:	2308      	movs	r3, #8
 8008134:	425b      	negs	r3, r3
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	4413      	add	r3, r2
 800813a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	4b24      	ldr	r3, [pc, #144]	; (80081d8 <vPortFree+0xb8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4013      	ands	r3, r2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <vPortFree+0x44>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	60fb      	str	r3, [r7, #12]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00a      	beq.n	8008182 <vPortFree+0x62>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60bb      	str	r3, [r7, #8]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	4b14      	ldr	r3, [pc, #80]	; (80081d8 <vPortFree+0xb8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4013      	ands	r3, r2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01e      	beq.n	80081ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d11a      	bne.n	80081ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	4b0e      	ldr	r3, [pc, #56]	; (80081d8 <vPortFree+0xb8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	43db      	mvns	r3, r3
 80081a2:	401a      	ands	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081a8:	f7fe fad4 	bl	8006754 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	4b0a      	ldr	r3, [pc, #40]	; (80081dc <vPortFree+0xbc>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4413      	add	r3, r2
 80081b6:	4a09      	ldr	r2, [pc, #36]	; (80081dc <vPortFree+0xbc>)
 80081b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081ba:	6938      	ldr	r0, [r7, #16]
 80081bc:	f000 f874 	bl	80082a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <vPortFree+0xc0>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3301      	adds	r3, #1
 80081c6:	4a06      	ldr	r2, [pc, #24]	; (80081e0 <vPortFree+0xc0>)
 80081c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081ca:	f7fe fad1 	bl	8006770 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081ce:	bf00      	nop
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20002664 	.word	0x20002664
 80081dc:	20002654 	.word	0x20002654
 80081e0:	20002660 	.word	0x20002660

080081e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081ea:	f241 7370 	movw	r3, #6000	; 0x1770
 80081ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081f0:	4b27      	ldr	r3, [pc, #156]	; (8008290 <prvHeapInit+0xac>)
 80081f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00c      	beq.n	8008218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3307      	adds	r3, #7
 8008202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	4a1f      	ldr	r2, [pc, #124]	; (8008290 <prvHeapInit+0xac>)
 8008214:	4413      	add	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800821c:	4a1d      	ldr	r2, [pc, #116]	; (8008294 <prvHeapInit+0xb0>)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008222:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <prvHeapInit+0xb0>)
 8008224:	2200      	movs	r2, #0
 8008226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	4413      	add	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008230:	2208      	movs	r2, #8
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0307 	bic.w	r3, r3, #7
 800823e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4a15      	ldr	r2, [pc, #84]	; (8008298 <prvHeapInit+0xb4>)
 8008244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008246:	4b14      	ldr	r3, [pc, #80]	; (8008298 <prvHeapInit+0xb4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2200      	movs	r2, #0
 800824c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800824e:	4b12      	ldr	r3, [pc, #72]	; (8008298 <prvHeapInit+0xb4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	1ad2      	subs	r2, r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008264:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <prvHeapInit+0xb4>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	4a0a      	ldr	r2, [pc, #40]	; (800829c <prvHeapInit+0xb8>)
 8008272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	4a09      	ldr	r2, [pc, #36]	; (80082a0 <prvHeapInit+0xbc>)
 800827a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800827c:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <prvHeapInit+0xc0>)
 800827e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008282:	601a      	str	r2, [r3, #0]
}
 8008284:	bf00      	nop
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	20000ed8 	.word	0x20000ed8
 8008294:	20002648 	.word	0x20002648
 8008298:	20002650 	.word	0x20002650
 800829c:	20002658 	.word	0x20002658
 80082a0:	20002654 	.word	0x20002654
 80082a4:	20002664 	.word	0x20002664

080082a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082b0:	4b28      	ldr	r3, [pc, #160]	; (8008354 <prvInsertBlockIntoFreeList+0xac>)
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e002      	b.n	80082bc <prvInsertBlockIntoFreeList+0x14>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d8f7      	bhi.n	80082b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	4413      	add	r3, r2
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d108      	bne.n	80082ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	441a      	add	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	441a      	add	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d118      	bne.n	8008330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b15      	ldr	r3, [pc, #84]	; (8008358 <prvInsertBlockIntoFreeList+0xb0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d00d      	beq.n	8008326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	441a      	add	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	e008      	b.n	8008338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008326:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <prvInsertBlockIntoFreeList+0xb0>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	e003      	b.n	8008338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	429a      	cmp	r2, r3
 800833e:	d002      	beq.n	8008346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008346:	bf00      	nop
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20002648 	.word	0x20002648
 8008358:	20002650 	.word	0x20002650

0800835c <__libc_init_array>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	4d0d      	ldr	r5, [pc, #52]	; (8008394 <__libc_init_array+0x38>)
 8008360:	4c0d      	ldr	r4, [pc, #52]	; (8008398 <__libc_init_array+0x3c>)
 8008362:	1b64      	subs	r4, r4, r5
 8008364:	10a4      	asrs	r4, r4, #2
 8008366:	2600      	movs	r6, #0
 8008368:	42a6      	cmp	r6, r4
 800836a:	d109      	bne.n	8008380 <__libc_init_array+0x24>
 800836c:	4d0b      	ldr	r5, [pc, #44]	; (800839c <__libc_init_array+0x40>)
 800836e:	4c0c      	ldr	r4, [pc, #48]	; (80083a0 <__libc_init_array+0x44>)
 8008370:	f000 f82e 	bl	80083d0 <_init>
 8008374:	1b64      	subs	r4, r4, r5
 8008376:	10a4      	asrs	r4, r4, #2
 8008378:	2600      	movs	r6, #0
 800837a:	42a6      	cmp	r6, r4
 800837c:	d105      	bne.n	800838a <__libc_init_array+0x2e>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	f855 3b04 	ldr.w	r3, [r5], #4
 8008384:	4798      	blx	r3
 8008386:	3601      	adds	r6, #1
 8008388:	e7ee      	b.n	8008368 <__libc_init_array+0xc>
 800838a:	f855 3b04 	ldr.w	r3, [r5], #4
 800838e:	4798      	blx	r3
 8008390:	3601      	adds	r6, #1
 8008392:	e7f2      	b.n	800837a <__libc_init_array+0x1e>
 8008394:	0800a5c8 	.word	0x0800a5c8
 8008398:	0800a5c8 	.word	0x0800a5c8
 800839c:	0800a5c8 	.word	0x0800a5c8
 80083a0:	0800a5cc 	.word	0x0800a5cc

080083a4 <memcpy>:
 80083a4:	440a      	add	r2, r1
 80083a6:	4291      	cmp	r1, r2
 80083a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ac:	d100      	bne.n	80083b0 <memcpy+0xc>
 80083ae:	4770      	bx	lr
 80083b0:	b510      	push	{r4, lr}
 80083b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ba:	4291      	cmp	r1, r2
 80083bc:	d1f9      	bne.n	80083b2 <memcpy+0xe>
 80083be:	bd10      	pop	{r4, pc}

080083c0 <memset>:
 80083c0:	4402      	add	r2, r0
 80083c2:	4603      	mov	r3, r0
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d100      	bne.n	80083ca <memset+0xa>
 80083c8:	4770      	bx	lr
 80083ca:	f803 1b01 	strb.w	r1, [r3], #1
 80083ce:	e7f9      	b.n	80083c4 <memset+0x4>

080083d0 <_init>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	bf00      	nop
 80083d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	469e      	mov	lr, r3
 80083da:	4770      	bx	lr

080083dc <_fini>:
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083de:	bf00      	nop
 80083e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e2:	bc08      	pop	{r3}
 80083e4:	469e      	mov	lr, r3
 80083e6:	4770      	bx	lr
