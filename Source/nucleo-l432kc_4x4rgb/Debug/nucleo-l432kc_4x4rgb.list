
nucleo-l432kc_4x4rgb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023d0  0800c230  0800c230  0001c230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e600  0800e600  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e600  0800e600  0001e600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e608  0800e608  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e608  0800e608  0001e608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e60c  0800e60c  0001e60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800e610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e1c  2000007c  0800e68c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005e98  0800e68c  00025e98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000227e0  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004abf  00000000  00000000  0004288c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  00047350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c8  00000000  00000000  00048db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ce3  00000000  00000000  0004a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ebb  00000000  00000000  00071363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d893b  00000000  00000000  0009221e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ab59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007240  00000000  00000000  0016abac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c218 	.word	0x0800c218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800c218 	.word	0x0800c218

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__gedf2>:
 80007ac:	f04f 3cff 	mov.w	ip, #4294967295
 80007b0:	e006      	b.n	80007c0 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__ledf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	e002      	b.n	80007c0 <__cmpdf2+0x4>
 80007ba:	bf00      	nop

080007bc <__cmpdf2>:
 80007bc:	f04f 0c01 	mov.w	ip, #1
 80007c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007d6:	d01b      	beq.n	8000810 <__cmpdf2+0x54>
 80007d8:	b001      	add	sp, #4
 80007da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007de:	bf0c      	ite	eq
 80007e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007e4:	ea91 0f03 	teqne	r1, r3
 80007e8:	bf02      	ittt	eq
 80007ea:	ea90 0f02 	teqeq	r0, r2
 80007ee:	2000      	moveq	r0, #0
 80007f0:	4770      	bxeq	lr
 80007f2:	f110 0f00 	cmn.w	r0, #0
 80007f6:	ea91 0f03 	teq	r1, r3
 80007fa:	bf58      	it	pl
 80007fc:	4299      	cmppl	r1, r3
 80007fe:	bf08      	it	eq
 8000800:	4290      	cmpeq	r0, r2
 8000802:	bf2c      	ite	cs
 8000804:	17d8      	asrcs	r0, r3, #31
 8000806:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800080a:	f040 0001 	orr.w	r0, r0, #1
 800080e:	4770      	bx	lr
 8000810:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000818:	d102      	bne.n	8000820 <__cmpdf2+0x64>
 800081a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800081e:	d107      	bne.n	8000830 <__cmpdf2+0x74>
 8000820:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000828:	d1d6      	bne.n	80007d8 <__cmpdf2+0x1c>
 800082a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800082e:	d0d3      	beq.n	80007d8 <__cmpdf2+0x1c>
 8000830:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop

08000838 <__aeabi_cdrcmple>:
 8000838:	4684      	mov	ip, r0
 800083a:	4610      	mov	r0, r2
 800083c:	4662      	mov	r2, ip
 800083e:	468c      	mov	ip, r1
 8000840:	4619      	mov	r1, r3
 8000842:	4663      	mov	r3, ip
 8000844:	e000      	b.n	8000848 <__aeabi_cdcmpeq>
 8000846:	bf00      	nop

08000848 <__aeabi_cdcmpeq>:
 8000848:	b501      	push	{r0, lr}
 800084a:	f7ff ffb7 	bl	80007bc <__cmpdf2>
 800084e:	2800      	cmp	r0, #0
 8000850:	bf48      	it	mi
 8000852:	f110 0f00 	cmnmi.w	r0, #0
 8000856:	bd01      	pop	{r0, pc}

08000858 <__aeabi_dcmpeq>:
 8000858:	f84d ed08 	str.w	lr, [sp, #-8]!
 800085c:	f7ff fff4 	bl	8000848 <__aeabi_cdcmpeq>
 8000860:	bf0c      	ite	eq
 8000862:	2001      	moveq	r0, #1
 8000864:	2000      	movne	r0, #0
 8000866:	f85d fb08 	ldr.w	pc, [sp], #8
 800086a:	bf00      	nop

0800086c <__aeabi_dcmplt>:
 800086c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000870:	f7ff ffea 	bl	8000848 <__aeabi_cdcmpeq>
 8000874:	bf34      	ite	cc
 8000876:	2001      	movcc	r0, #1
 8000878:	2000      	movcs	r0, #0
 800087a:	f85d fb08 	ldr.w	pc, [sp], #8
 800087e:	bf00      	nop

08000880 <__aeabi_dcmple>:
 8000880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000884:	f7ff ffe0 	bl	8000848 <__aeabi_cdcmpeq>
 8000888:	bf94      	ite	ls
 800088a:	2001      	movls	r0, #1
 800088c:	2000      	movhi	r0, #0
 800088e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000892:	bf00      	nop

08000894 <__aeabi_dcmpge>:
 8000894:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000898:	f7ff ffce 	bl	8000838 <__aeabi_cdrcmple>
 800089c:	bf94      	ite	ls
 800089e:	2001      	movls	r0, #1
 80008a0:	2000      	movhi	r0, #0
 80008a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a6:	bf00      	nop

080008a8 <__aeabi_dcmpgt>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff ffc4 	bl	8000838 <__aeabi_cdrcmple>
 80008b0:	bf34      	ite	cc
 80008b2:	2001      	movcc	r0, #1
 80008b4:	2000      	movcs	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_ldivmod>:
 80008bc:	b97b      	cbnz	r3, 80008de <__aeabi_ldivmod+0x22>
 80008be:	b972      	cbnz	r2, 80008de <__aeabi_ldivmod+0x22>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bfbe      	ittt	lt
 80008c4:	2000      	movlt	r0, #0
 80008c6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80008ca:	e006      	blt.n	80008da <__aeabi_ldivmod+0x1e>
 80008cc:	bf08      	it	eq
 80008ce:	2800      	cmpeq	r0, #0
 80008d0:	bf1c      	itt	ne
 80008d2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008d6:	f04f 30ff 	movne.w	r0, #4294967295
 80008da:	f000 b9f5 	b.w	8000cc8 <__aeabi_idiv0>
 80008de:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e6:	2900      	cmp	r1, #0
 80008e8:	db09      	blt.n	80008fe <__aeabi_ldivmod+0x42>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db1a      	blt.n	8000924 <__aeabi_ldivmod+0x68>
 80008ee:	f000 f883 	bl	80009f8 <__udivmoddi4>
 80008f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008fa:	b004      	add	sp, #16
 80008fc:	4770      	bx	lr
 80008fe:	4240      	negs	r0, r0
 8000900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000904:	2b00      	cmp	r3, #0
 8000906:	db1b      	blt.n	8000940 <__aeabi_ldivmod+0x84>
 8000908:	f000 f876 	bl	80009f8 <__udivmoddi4>
 800090c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000914:	b004      	add	sp, #16
 8000916:	4240      	negs	r0, r0
 8000918:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800091c:	4252      	negs	r2, r2
 800091e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000922:	4770      	bx	lr
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	f000 f865 	bl	80009f8 <__udivmoddi4>
 800092e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000936:	b004      	add	sp, #16
 8000938:	4240      	negs	r0, r0
 800093a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800093e:	4770      	bx	lr
 8000940:	4252      	negs	r2, r2
 8000942:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000946:	f000 f857 	bl	80009f8 <__udivmoddi4>
 800094a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000952:	b004      	add	sp, #16
 8000954:	4252      	negs	r2, r2
 8000956:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800095a:	4770      	bx	lr

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b9aa 	b.w	8000cc8 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f83c 	bl	80009f8 <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__aeabi_d2lz>:
 800098c:	b538      	push	{r3, r4, r5, lr}
 800098e:	2200      	movs	r2, #0
 8000990:	2300      	movs	r3, #0
 8000992:	4604      	mov	r4, r0
 8000994:	460d      	mov	r5, r1
 8000996:	f7ff ff69 	bl	800086c <__aeabi_dcmplt>
 800099a:	b928      	cbnz	r0, 80009a8 <__aeabi_d2lz+0x1c>
 800099c:	4620      	mov	r0, r4
 800099e:	4629      	mov	r1, r5
 80009a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009a4:	f000 b80a 	b.w	80009bc <__aeabi_d2ulz>
 80009a8:	4620      	mov	r0, r4
 80009aa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80009ae:	f000 f805 	bl	80009bc <__aeabi_d2ulz>
 80009b2:	4240      	negs	r0, r0
 80009b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009b8:	bd38      	pop	{r3, r4, r5, pc}
 80009ba:	bf00      	nop

080009bc <__aeabi_d2ulz>:
 80009bc:	b5d0      	push	{r4, r6, r7, lr}
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__aeabi_d2ulz+0x34>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	4606      	mov	r6, r0
 80009c4:	460f      	mov	r7, r1
 80009c6:	f7ff fc0b 	bl	80001e0 <__aeabi_dmul>
 80009ca:	f000 f97f 	bl	8000ccc <__aeabi_d2uiz>
 80009ce:	4604      	mov	r4, r0
 80009d0:	f7ff fe72 	bl	80006b8 <__aeabi_ui2d>
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <__aeabi_d2ulz+0x38>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f7ff fc02 	bl	80001e0 <__aeabi_dmul>
 80009dc:	4602      	mov	r2, r0
 80009de:	460b      	mov	r3, r1
 80009e0:	4630      	mov	r0, r6
 80009e2:	4639      	mov	r1, r7
 80009e4:	f7ff fd2a 	bl	800043c <__aeabi_dsub>
 80009e8:	f000 f970 	bl	8000ccc <__aeabi_d2uiz>
 80009ec:	4621      	mov	r1, r4
 80009ee:	bdd0      	pop	{r4, r6, r7, pc}
 80009f0:	3df00000 	.word	0x3df00000
 80009f4:	41f00000 	.word	0x41f00000

080009f8 <__udivmoddi4>:
 80009f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009fc:	9d08      	ldr	r5, [sp, #32]
 80009fe:	4604      	mov	r4, r0
 8000a00:	468e      	mov	lr, r1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d14d      	bne.n	8000aa2 <__udivmoddi4+0xaa>
 8000a06:	428a      	cmp	r2, r1
 8000a08:	4694      	mov	ip, r2
 8000a0a:	d969      	bls.n	8000ae0 <__udivmoddi4+0xe8>
 8000a0c:	fab2 f282 	clz	r2, r2
 8000a10:	b152      	cbz	r2, 8000a28 <__udivmoddi4+0x30>
 8000a12:	fa01 f302 	lsl.w	r3, r1, r2
 8000a16:	f1c2 0120 	rsb	r1, r2, #32
 8000a1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000a1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a22:	ea41 0e03 	orr.w	lr, r1, r3
 8000a26:	4094      	lsls	r4, r2
 8000a28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a2c:	0c21      	lsrs	r1, r4, #16
 8000a2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000a32:	fa1f f78c 	uxth.w	r7, ip
 8000a36:	fb08 e316 	mls	r3, r8, r6, lr
 8000a3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a3e:	fb06 f107 	mul.w	r1, r6, r7
 8000a42:	4299      	cmp	r1, r3
 8000a44:	d90a      	bls.n	8000a5c <__udivmoddi4+0x64>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a4e:	f080 811f 	bcs.w	8000c90 <__udivmoddi4+0x298>
 8000a52:	4299      	cmp	r1, r3
 8000a54:	f240 811c 	bls.w	8000c90 <__udivmoddi4+0x298>
 8000a58:	3e02      	subs	r6, #2
 8000a5a:	4463      	add	r3, ip
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a64:	fb08 3310 	mls	r3, r8, r0, r3
 8000a68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a6c:	fb00 f707 	mul.w	r7, r0, r7
 8000a70:	42a7      	cmp	r7, r4
 8000a72:	d90a      	bls.n	8000a8a <__udivmoddi4+0x92>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a7c:	f080 810a 	bcs.w	8000c94 <__udivmoddi4+0x29c>
 8000a80:	42a7      	cmp	r7, r4
 8000a82:	f240 8107 	bls.w	8000c94 <__udivmoddi4+0x29c>
 8000a86:	4464      	add	r4, ip
 8000a88:	3802      	subs	r0, #2
 8000a8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8e:	1be4      	subs	r4, r4, r7
 8000a90:	2600      	movs	r6, #0
 8000a92:	b11d      	cbz	r5, 8000a9c <__udivmoddi4+0xa4>
 8000a94:	40d4      	lsrs	r4, r2
 8000a96:	2300      	movs	r3, #0
 8000a98:	e9c5 4300 	strd	r4, r3, [r5]
 8000a9c:	4631      	mov	r1, r6
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d909      	bls.n	8000aba <__udivmoddi4+0xc2>
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	f000 80ef 	beq.w	8000c8a <__udivmoddi4+0x292>
 8000aac:	2600      	movs	r6, #0
 8000aae:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	4631      	mov	r1, r6
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	fab3 f683 	clz	r6, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d14a      	bne.n	8000b58 <__udivmoddi4+0x160>
 8000ac2:	428b      	cmp	r3, r1
 8000ac4:	d302      	bcc.n	8000acc <__udivmoddi4+0xd4>
 8000ac6:	4282      	cmp	r2, r0
 8000ac8:	f200 80f9 	bhi.w	8000cbe <__udivmoddi4+0x2c6>
 8000acc:	1a84      	subs	r4, r0, r2
 8000ace:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	469e      	mov	lr, r3
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d0e0      	beq.n	8000a9c <__udivmoddi4+0xa4>
 8000ada:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ade:	e7dd      	b.n	8000a9c <__udivmoddi4+0xa4>
 8000ae0:	b902      	cbnz	r2, 8000ae4 <__udivmoddi4+0xec>
 8000ae2:	deff      	udf	#255	; 0xff
 8000ae4:	fab2 f282 	clz	r2, r2
 8000ae8:	2a00      	cmp	r2, #0
 8000aea:	f040 8092 	bne.w	8000c12 <__udivmoddi4+0x21a>
 8000aee:	eba1 010c 	sub.w	r1, r1, ip
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f fe8c 	uxth.w	lr, ip
 8000afa:	2601      	movs	r6, #1
 8000afc:	0c20      	lsrs	r0, r4, #16
 8000afe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b02:	fb07 1113 	mls	r1, r7, r3, r1
 8000b06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0a:	fb0e f003 	mul.w	r0, lr, r3
 8000b0e:	4288      	cmp	r0, r1
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x12c>
 8000b12:	eb1c 0101 	adds.w	r1, ip, r1
 8000b16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1a:	d202      	bcs.n	8000b22 <__udivmoddi4+0x12a>
 8000b1c:	4288      	cmp	r0, r1
 8000b1e:	f200 80cb 	bhi.w	8000cb8 <__udivmoddi4+0x2c0>
 8000b22:	4643      	mov	r3, r8
 8000b24:	1a09      	subs	r1, r1, r0
 8000b26:	b2a4      	uxth	r4, r4
 8000b28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000b30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b34:	fb0e fe00 	mul.w	lr, lr, r0
 8000b38:	45a6      	cmp	lr, r4
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x156>
 8000b3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b44:	d202      	bcs.n	8000b4c <__udivmoddi4+0x154>
 8000b46:	45a6      	cmp	lr, r4
 8000b48:	f200 80bb 	bhi.w	8000cc2 <__udivmoddi4+0x2ca>
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	eba4 040e 	sub.w	r4, r4, lr
 8000b52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b56:	e79c      	b.n	8000a92 <__udivmoddi4+0x9a>
 8000b58:	f1c6 0720 	rsb	r7, r6, #32
 8000b5c:	40b3      	lsls	r3, r6
 8000b5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b66:	fa20 f407 	lsr.w	r4, r0, r7
 8000b6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b6e:	431c      	orrs	r4, r3
 8000b70:	40f9      	lsrs	r1, r7
 8000b72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b76:	fa00 f306 	lsl.w	r3, r0, r6
 8000b7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b7e:	0c20      	lsrs	r0, r4, #16
 8000b80:	fa1f fe8c 	uxth.w	lr, ip
 8000b84:	fb09 1118 	mls	r1, r9, r8, r1
 8000b88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000b90:	4288      	cmp	r0, r1
 8000b92:	fa02 f206 	lsl.w	r2, r2, r6
 8000b96:	d90b      	bls.n	8000bb0 <__udivmoddi4+0x1b8>
 8000b98:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba0:	f080 8088 	bcs.w	8000cb4 <__udivmoddi4+0x2bc>
 8000ba4:	4288      	cmp	r0, r1
 8000ba6:	f240 8085 	bls.w	8000cb4 <__udivmoddi4+0x2bc>
 8000baa:	f1a8 0802 	sub.w	r8, r8, #2
 8000bae:	4461      	add	r1, ip
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000bbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc4:	458e      	cmp	lr, r1
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x1e2>
 8000bc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000bcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd0:	d26c      	bcs.n	8000cac <__udivmoddi4+0x2b4>
 8000bd2:	458e      	cmp	lr, r1
 8000bd4:	d96a      	bls.n	8000cac <__udivmoddi4+0x2b4>
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	4461      	add	r1, ip
 8000bda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bde:	fba0 9402 	umull	r9, r4, r0, r2
 8000be2:	eba1 010e 	sub.w	r1, r1, lr
 8000be6:	42a1      	cmp	r1, r4
 8000be8:	46c8      	mov	r8, r9
 8000bea:	46a6      	mov	lr, r4
 8000bec:	d356      	bcc.n	8000c9c <__udivmoddi4+0x2a4>
 8000bee:	d053      	beq.n	8000c98 <__udivmoddi4+0x2a0>
 8000bf0:	b15d      	cbz	r5, 8000c0a <__udivmoddi4+0x212>
 8000bf2:	ebb3 0208 	subs.w	r2, r3, r8
 8000bf6:	eb61 010e 	sbc.w	r1, r1, lr
 8000bfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000bfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000c02:	40f1      	lsrs	r1, r6
 8000c04:	431f      	orrs	r7, r3
 8000c06:	e9c5 7100 	strd	r7, r1, [r5]
 8000c0a:	2600      	movs	r6, #0
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	40d8      	lsrs	r0, r3
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000c20:	4091      	lsls	r1, r2
 8000c22:	4301      	orrs	r1, r0
 8000c24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c28:	fa1f fe8c 	uxth.w	lr, ip
 8000c2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c30:	fb07 3610 	mls	r6, r7, r0, r3
 8000c34:	0c0b      	lsrs	r3, r1, #16
 8000c36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000c3e:	429e      	cmp	r6, r3
 8000c40:	fa04 f402 	lsl.w	r4, r4, r2
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x260>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c4e:	d22f      	bcs.n	8000cb0 <__udivmoddi4+0x2b8>
 8000c50:	429e      	cmp	r6, r3
 8000c52:	d92d      	bls.n	8000cb0 <__udivmoddi4+0x2b8>
 8000c54:	3802      	subs	r0, #2
 8000c56:	4463      	add	r3, ip
 8000c58:	1b9b      	subs	r3, r3, r6
 8000c5a:	b289      	uxth	r1, r1
 8000c5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c60:	fb07 3316 	mls	r3, r7, r6, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb06 f30e 	mul.w	r3, r6, lr
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x28a>
 8000c70:	eb1c 0101 	adds.w	r1, ip, r1
 8000c74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c78:	d216      	bcs.n	8000ca8 <__udivmoddi4+0x2b0>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d914      	bls.n	8000ca8 <__udivmoddi4+0x2b0>
 8000c7e:	3e02      	subs	r6, #2
 8000c80:	4461      	add	r1, ip
 8000c82:	1ac9      	subs	r1, r1, r3
 8000c84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c88:	e738      	b.n	8000afc <__udivmoddi4+0x104>
 8000c8a:	462e      	mov	r6, r5
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	e705      	b.n	8000a9c <__udivmoddi4+0xa4>
 8000c90:	4606      	mov	r6, r0
 8000c92:	e6e3      	b.n	8000a5c <__udivmoddi4+0x64>
 8000c94:	4618      	mov	r0, r3
 8000c96:	e6f8      	b.n	8000a8a <__udivmoddi4+0x92>
 8000c98:	454b      	cmp	r3, r9
 8000c9a:	d2a9      	bcs.n	8000bf0 <__udivmoddi4+0x1f8>
 8000c9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca4:	3801      	subs	r0, #1
 8000ca6:	e7a3      	b.n	8000bf0 <__udivmoddi4+0x1f8>
 8000ca8:	4646      	mov	r6, r8
 8000caa:	e7ea      	b.n	8000c82 <__udivmoddi4+0x28a>
 8000cac:	4620      	mov	r0, r4
 8000cae:	e794      	b.n	8000bda <__udivmoddi4+0x1e2>
 8000cb0:	4640      	mov	r0, r8
 8000cb2:	e7d1      	b.n	8000c58 <__udivmoddi4+0x260>
 8000cb4:	46d0      	mov	r8, sl
 8000cb6:	e77b      	b.n	8000bb0 <__udivmoddi4+0x1b8>
 8000cb8:	3b02      	subs	r3, #2
 8000cba:	4461      	add	r1, ip
 8000cbc:	e732      	b.n	8000b24 <__udivmoddi4+0x12c>
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	e709      	b.n	8000ad6 <__udivmoddi4+0xde>
 8000cc2:	4464      	add	r4, ip
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	e742      	b.n	8000b4e <__udivmoddi4+0x156>

08000cc8 <__aeabi_idiv0>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2uiz>:
 8000ccc:	004a      	lsls	r2, r1, #1
 8000cce:	d211      	bcs.n	8000cf4 <__aeabi_d2uiz+0x28>
 8000cd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd4:	d211      	bcs.n	8000cfa <__aeabi_d2uiz+0x2e>
 8000cd6:	d50d      	bpl.n	8000cf4 <__aeabi_d2uiz+0x28>
 8000cd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ce0:	d40e      	bmi.n	8000d00 <__aeabi_d2uiz+0x34>
 8000ce2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cee:	fa23 f002 	lsr.w	r0, r3, r2
 8000cf2:	4770      	bx	lr
 8000cf4:	f04f 0000 	mov.w	r0, #0
 8000cf8:	4770      	bx	lr
 8000cfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfe:	d102      	bne.n	8000d06 <__aeabi_d2uiz+0x3a>
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	4770      	bx	lr
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	4770      	bx	lr

08000d0c <at_set_command>:
		tx(buffer, length);
	}
	return length;
}

int at_set_command(char *buffer, transmit_t tx, char *cmd, const char* param_format, ...) {
 8000d0c:	b408      	push	{r3}
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b089      	sub	sp, #36	; 0x24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]

	va_list parameters;
	int length = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
	int tmp = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
	if((tmp = sprintf_(buffer, "%s=", cmd)) < 0) {
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	4924      	ldr	r1, [pc, #144]	; (8000db8 <at_set_command+0xac>)
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f001 fd1a 	bl	8002760 <sprintf_>
 8000d2c:	61b8      	str	r0, [r7, #24]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	da02      	bge.n	8000d3a <at_set_command+0x2e>
		return AT_CMD_ERROR;
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	e037      	b.n	8000daa <at_set_command+0x9e>
	}
	length += tmp;
 8000d3a:	69fa      	ldr	r2, [r7, #28]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	4413      	add	r3, r2
 8000d40:	61fb      	str	r3, [r7, #28]
	tmp = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
	va_start(parameters, param_format);
 8000d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4a:	617b      	str	r3, [r7, #20]
	if((tmp = vsprintf_(buffer+length, param_format, parameters)) < 0) {
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fcf0 	bl	800273c <vsprintf_>
 8000d5c:	61b8      	str	r0, [r7, #24]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	da02      	bge.n	8000d6a <at_set_command+0x5e>
		return AT_CMD_ERROR;
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	e01f      	b.n	8000daa <at_set_command+0x9e>
	}
	va_end(parameters);
	length += tmp;
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	4413      	add	r3, r2
 8000d70:	61fb      	str	r3, [r7, #28]
	tmp = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
	if((tmp = sprintf_(buffer+length, "\r\n")) < 0) {
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	490f      	ldr	r1, [pc, #60]	; (8000dbc <at_set_command+0xb0>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fcee 	bl	8002760 <sprintf_>
 8000d84:	61b8      	str	r0, [r7, #24]
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	da02      	bge.n	8000d92 <at_set_command+0x86>
		return AT_CMD_ERROR;
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	e00b      	b.n	8000daa <at_set_command+0x9e>
	}
	length += tmp;
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	4413      	add	r3, r2
 8000d98:	61fb      	str	r3, [r7, #28]
	if(tx != NULL) {
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <at_set_command+0x9c>
		tx(buffer, length);
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	69f9      	ldr	r1, [r7, #28]
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	4798      	blx	r3
	}
	return length;
 8000da8:	69fb      	ldr	r3, [r7, #28]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000db4:	b001      	add	sp, #4
 8000db6:	4770      	bx	lr
 8000db8:	0800c240 	.word	0x0800c240
 8000dbc:	0800c244 	.word	0x0800c244

08000dc0 <at_execute_command>:
	}
	return length;
}


int at_execute_command(char *buffer, transmit_t tx, char *cmd) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	int length;
	if((length = sprintf_(buffer, "%s\r\n", cmd)) < 0) {
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	490b      	ldr	r1, [pc, #44]	; (8000dfc <at_execute_command+0x3c>)
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f001 fcc5 	bl	8002760 <sprintf_>
 8000dd6:	6178      	str	r0, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	da02      	bge.n	8000de4 <at_execute_command+0x24>
		return AT_CMD_ERROR;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e007      	b.n	8000df4 <at_execute_command+0x34>
	}
	if(tx != NULL) {
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <at_execute_command+0x32>
		tx(buffer, length);
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	6979      	ldr	r1, [r7, #20]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	4798      	blx	r3
	}
	return length;
 8000df2:	697b      	ldr	r3, [r7, #20]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	0800c248 	.word	0x0800c248

08000e00 <printDataOnMatrix>:
/**
 * @brief	Prints the received Data from the Broker and prints it on the 4x4 Matrix
 * @param	ch - Pointer to a Char holding the Information to print
 */
void printDataOnMatrix(const char * const ch)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	switch(*ch)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	3b58      	subs	r3, #88	; 0x58
 8000e0e:	2b1b      	cmp	r3, #27
 8000e10:	f200 8093 	bhi.w	8000f3a <printDataOnMatrix+0x13a>
 8000e14:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <printDataOnMatrix+0x1c>)
 8000e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1a:	bf00      	nop
 8000e1c:	08000f25 	.word	0x08000f25
 8000e20:	08000f2b 	.word	0x08000f2b
 8000e24:	08000f33 	.word	0x08000f33
 8000e28:	08000f3b 	.word	0x08000f3b
 8000e2c:	08000f3b 	.word	0x08000f3b
 8000e30:	08000f3b 	.word	0x08000f3b
 8000e34:	08000f3b 	.word	0x08000f3b
 8000e38:	08000f3b 	.word	0x08000f3b
 8000e3c:	08000f3b 	.word	0x08000f3b
 8000e40:	08000e8d 	.word	0x08000e8d
 8000e44:	08000e95 	.word	0x08000e95
 8000e48:	08000e9d 	.word	0x08000e9d
 8000e4c:	08000ea5 	.word	0x08000ea5
 8000e50:	08000ead 	.word	0x08000ead
 8000e54:	08000eb5 	.word	0x08000eb5
 8000e58:	08000ebd 	.word	0x08000ebd
 8000e5c:	08000ec5 	.word	0x08000ec5
 8000e60:	08000ecd 	.word	0x08000ecd
 8000e64:	08000ed5 	.word	0x08000ed5
 8000e68:	08000edd 	.word	0x08000edd
 8000e6c:	08000ee5 	.word	0x08000ee5
 8000e70:	08000eed 	.word	0x08000eed
 8000e74:	08000ef5 	.word	0x08000ef5
 8000e78:	08000efd 	.word	0x08000efd
 8000e7c:	08000f05 	.word	0x08000f05
 8000e80:	08000f0d 	.word	0x08000f0d
 8000e84:	08000f15 	.word	0x08000f15
 8000e88:	08000f1d 	.word	0x08000f1d
	{
		case 'a':
			ptr_Rgb4x4Click = &rgb4x4click_centered;
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000e8e:	4a3c      	ldr	r2, [pc, #240]	; (8000f80 <printDataOnMatrix+0x180>)
 8000e90:	601a      	str	r2, [r3, #0]
			break;
 8000e92:	e056      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'b':
			ptr_Rgb4x4Click = &rgb4x4click_outOfScope;
 8000e94:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000e96:	4a3b      	ldr	r2, [pc, #236]	; (8000f84 <printDataOnMatrix+0x184>)
 8000e98:	601a      	str	r2, [r3, #0]
			break;
 8000e9a:	e052      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'c':
			ptr_Rgb4x4Click = &rgb4x4click_shakeDetection;
 8000e9c:	4b37      	ldr	r3, [pc, #220]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000e9e:	4a3a      	ldr	r2, [pc, #232]	; (8000f88 <printDataOnMatrix+0x188>)
 8000ea0:	601a      	str	r2, [r3, #0]
			break;
 8000ea2:	e04e      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'd':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_lo;
 8000ea4:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000ea6:	4a39      	ldr	r2, [pc, #228]	; (8000f8c <printDataOnMatrix+0x18c>)
 8000ea8:	601a      	str	r2, [r3, #0]
			break;
 8000eaa:	e04a      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'e':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_lu;
 8000eac:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000eae:	4a38      	ldr	r2, [pc, #224]	; (8000f90 <printDataOnMatrix+0x190>)
 8000eb0:	601a      	str	r2, [r3, #0]
			break;
 8000eb2:	e046      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'f':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_ro;
 8000eb4:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000eb6:	4a37      	ldr	r2, [pc, #220]	; (8000f94 <printDataOnMatrix+0x194>)
 8000eb8:	601a      	str	r2, [r3, #0]
			break;
 8000eba:	e042      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'g':
			ptr_Rgb4x4Click = &rgb4x4click_lightShift_ru;
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000ebe:	4a36      	ldr	r2, [pc, #216]	; (8000f98 <printDataOnMatrix+0x198>)
 8000ec0:	601a      	str	r2, [r3, #0]
			break;
 8000ec2:	e03e      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'h':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c1;
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000ec6:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <printDataOnMatrix+0x19c>)
 8000ec8:	601a      	str	r2, [r3, #0]
			break;
 8000eca:	e03a      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'i':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c2;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000ece:	4a34      	ldr	r2, [pc, #208]	; (8000fa0 <printDataOnMatrix+0x1a0>)
 8000ed0:	601a      	str	r2, [r3, #0]
			break;
 8000ed2:	e036      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'j':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c3;
 8000ed4:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000ed6:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <printDataOnMatrix+0x1a4>)
 8000ed8:	601a      	str	r2, [r3, #0]
			break;
 8000eda:	e032      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'k':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r1c4;
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000ede:	4a32      	ldr	r2, [pc, #200]	; (8000fa8 <printDataOnMatrix+0x1a8>)
 8000ee0:	601a      	str	r2, [r3, #0]
			break;
 8000ee2:	e02e      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'l':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r2c1;
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000ee6:	4a31      	ldr	r2, [pc, #196]	; (8000fac <printDataOnMatrix+0x1ac>)
 8000ee8:	601a      	str	r2, [r3, #0]
			break;
 8000eea:	e02a      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'm':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r2c4;
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000eee:	4a30      	ldr	r2, [pc, #192]	; (8000fb0 <printDataOnMatrix+0x1b0>)
 8000ef0:	601a      	str	r2, [r3, #0]
			break;
 8000ef2:	e026      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'n':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r3c1;
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <printDataOnMatrix+0x1b4>)
 8000ef8:	601a      	str	r2, [r3, #0]
			break;
 8000efa:	e022      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'o':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r3c4;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000efe:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <printDataOnMatrix+0x1b8>)
 8000f00:	601a      	str	r2, [r3, #0]
			break;
 8000f02:	e01e      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'p':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c1;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000f06:	4a2d      	ldr	r2, [pc, #180]	; (8000fbc <printDataOnMatrix+0x1bc>)
 8000f08:	601a      	str	r2, [r3, #0]
			break;
 8000f0a:	e01a      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'q':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c2;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000f0e:	4a2c      	ldr	r2, [pc, #176]	; (8000fc0 <printDataOnMatrix+0x1c0>)
 8000f10:	601a      	str	r2, [r3, #0]
			break;
 8000f12:	e016      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'r':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c3;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000f16:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <printDataOnMatrix+0x1c4>)
 8000f18:	601a      	str	r2, [r3, #0]
			break;
 8000f1a:	e012      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 's':
			ptr_Rgb4x4Click = &rgb4x4click_strongShift_r4c4;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000f1e:	4a2a      	ldr	r2, [pc, #168]	; (8000fc8 <printDataOnMatrix+0x1c8>)
 8000f20:	601a      	str	r2, [r3, #0]
			break;
 8000f22:	e00e      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'X':
			ptr_Rgb4x4Click = &rgb4x4click_error;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000f26:	4a29      	ldr	r2, [pc, #164]	; (8000fcc <printDataOnMatrix+0x1cc>)
 8000f28:	601a      	str	r2, [r3, #0]
		case 'Y':
			ptr_Rgb4x4Click = &rgb4x4click_pairing;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000f2c:	4a28      	ldr	r2, [pc, #160]	; (8000fd0 <printDataOnMatrix+0x1d0>)
 8000f2e:	601a      	str	r2, [r3, #0]
			break;
 8000f30:	e007      	b.n	8000f42 <printDataOnMatrix+0x142>
		case 'Z':
			ptr_Rgb4x4Click = &rgb4x4click_all_off;
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000f34:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <printDataOnMatrix+0x1d4>)
 8000f36:	601a      	str	r2, [r3, #0]
			break;
 8000f38:	e003      	b.n	8000f42 <printDataOnMatrix+0x142>
		default:
			/* You should not be here */
			ptr_Rgb4x4Click = &rgb4x4click_error;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000f3c:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <printDataOnMatrix+0x1cc>)
 8000f3e:	601a      	str	r2, [r3, #0]
			break;
 8000f40:	bf00      	nop
	}

	/* Wait until previous DMA Transfer is Completed */
	osSemaphoreAcquire(sem_printPermissionHandle, osWaitForever);
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <printDataOnMatrix+0x1d8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f007 fcba 	bl	80088c4 <osSemaphoreAcquire>

	/* Actually not really necessary and quite useless, just to be 101% sure*/
	taskENTER_CRITICAL();
 8000f50:	f00a fd58 	bl	800ba04 <vPortEnterCritical>

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *) ptr_Rgb4x4Click, PWM_STREAM_LENGTH_FULL_DISPLAY);
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <printDataOnMatrix+0x17c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	481f      	ldr	r0, [pc, #124]	; (8000fdc <printDataOnMatrix+0x1dc>)
 8000f60:	f004 f9fc 	bl	800535c <HAL_TIM_PWM_Start_DMA>

	taskEXIT_CRITICAL();
 8000f64:	f00a fd7e 	bl	800ba64 <vPortExitCritical>

	osSemaphoreRelease(sem_printPermissionHandle);
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <printDataOnMatrix+0x1d8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f007 fcfb 	bl	8008968 <osSemaphoreRelease>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000098 	.word	0x20000098
 8000f80:	0800c3c8 	.word	0x0800c3c8
 8000f84:	0800c548 	.word	0x0800c548
 8000f88:	0800c6c8 	.word	0x0800c6c8
 8000f8c:	0800c9c8 	.word	0x0800c9c8
 8000f90:	0800c848 	.word	0x0800c848
 8000f94:	0800ccc8 	.word	0x0800ccc8
 8000f98:	0800cb48 	.word	0x0800cb48
 8000f9c:	0800ce48 	.word	0x0800ce48
 8000fa0:	0800cfc8 	.word	0x0800cfc8
 8000fa4:	0800d148 	.word	0x0800d148
 8000fa8:	0800d2c8 	.word	0x0800d2c8
 8000fac:	0800d448 	.word	0x0800d448
 8000fb0:	0800d5c8 	.word	0x0800d5c8
 8000fb4:	0800d748 	.word	0x0800d748
 8000fb8:	0800d8c8 	.word	0x0800d8c8
 8000fbc:	0800da48 	.word	0x0800da48
 8000fc0:	0800dbc8 	.word	0x0800dbc8
 8000fc4:	0800dd48 	.word	0x0800dd48
 8000fc8:	0800dec8 	.word	0x0800dec8
 8000fcc:	0800e048 	.word	0x0800e048
 8000fd0:	0800e1c8 	.word	0x0800e1c8
 8000fd4:	0800e348 	.word	0x0800e348
 8000fd8:	200000ac 	.word	0x200000ac
 8000fdc:	200000fc 	.word	0x200000fc

08000fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_DMA_Init+0x48>)
 8000fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <MX_DMA_Init+0x48>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <MX_DMA_Init+0x48>)
 8000ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2105      	movs	r1, #5
 8001002:	200c      	movs	r0, #12
 8001004:	f002 faa4 	bl	8003550 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001008:	200c      	movs	r0, #12
 800100a:	f002 fabd 	bl	8003588 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	200f      	movs	r0, #15
 8001014:	f002 fa9c 	bl	8003550 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001018:	200f      	movs	r0, #15
 800101a:	f002 fab5 	bl	8003588 <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sem_printPermission */
  sem_printPermissionHandle = osSemaphoreNew(1, 1, &sem_printPermission_attributes);
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <MX_FREERTOS_Init+0x4c>)
 8001032:	2101      	movs	r1, #1
 8001034:	2001      	movs	r0, #1
 8001036:	f007 fbbb 	bl	80087b0 <osSemaphoreNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <MX_FREERTOS_Init+0x50>)
 800103e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of updateScreenTimer */
  updateScreenTimerHandle = osTimerNew(updateScreenTimerCallback, osTimerPeriodic, NULL, &updateScreenTimer_attributes);
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_FREERTOS_Init+0x54>)
 8001042:	2200      	movs	r2, #0
 8001044:	2101      	movs	r1, #1
 8001046:	480f      	ldr	r0, [pc, #60]	; (8001084 <MX_FREERTOS_Init+0x58>)
 8001048:	f007 fb36 	bl	80086b8 <osTimerNew>
 800104c:	4603      	mov	r3, r0
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <MX_FREERTOS_Init+0x5c>)
 8001050:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of receiverTask */
  receiverTaskHandle = osThreadNew(StartReceiverTask, NULL, &receiverTask_attributes);
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <MX_FREERTOS_Init+0x60>)
 8001054:	2100      	movs	r1, #0
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <MX_FREERTOS_Init+0x64>)
 8001058:	f007 fa64 	bl	8008524 <osThreadNew>
 800105c:	4603      	mov	r3, r0
 800105e:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <MX_FREERTOS_Init+0x68>)
 8001060:	6013      	str	r3, [r2, #0]

  /* creation of startWifiClickT */
  startWifiClickTHandle = osThreadNew(_startWifiClickTask, NULL, &startWifiClickT_attributes);
 8001062:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <MX_FREERTOS_Init+0x6c>)
 8001064:	2100      	movs	r1, #0
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_FREERTOS_Init+0x70>)
 8001068:	f007 fa5c 	bl	8008524 <osThreadNew>
 800106c:	4603      	mov	r3, r0
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <MX_FREERTOS_Init+0x74>)
 8001070:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	0800c3b8 	.word	0x0800c3b8
 800107c:	200000ac 	.word	0x200000ac
 8001080:	0800c3a8 	.word	0x0800c3a8
 8001084:	080010fd 	.word	0x080010fd
 8001088:	200000a8 	.word	0x200000a8
 800108c:	0800c360 	.word	0x0800c360
 8001090:	080010a5 	.word	0x080010a5
 8001094:	200000a0 	.word	0x200000a0
 8001098:	0800c384 	.word	0x0800c384
 800109c:	080010e5 	.word	0x080010e5
 80010a0:	200000a4 	.word	0x200000a4

080010a4 <StartReceiverTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiverTask */
void StartReceiverTask(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiverTask */
  for(;;)
  {
	  if(updateLedMatrix && newDataAvailable)
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <StartReceiverTask+0x34>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00c      	beq.n	80010ce <StartReceiverTask+0x2a>
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <StartReceiverTask+0x38>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d008      	beq.n	80010ce <StartReceiverTask+0x2a>
	  {
		  updateLedMatrix = 0;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <StartReceiverTask+0x34>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
		  newDataAvailable = 1;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <StartReceiverTask+0x38>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]

		  printDataOnMatrix(&dataToPrint);
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <StartReceiverTask+0x3c>)
 80010ca:	f7ff fe99 	bl	8000e00 <printDataOnMatrix>
	  }

    osDelay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f007 fac1 	bl	8008656 <osDelay>
	  if(updateLedMatrix && newDataAvailable)
 80010d4:	e7ea      	b.n	80010ac <StartReceiverTask+0x8>
 80010d6:	bf00      	nop
 80010d8:	2000009c 	.word	0x2000009c
 80010dc:	2000009d 	.word	0x2000009d
 80010e0:	2000009e 	.word	0x2000009e

080010e4 <_startWifiClickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__startWifiClickTask */
void _startWifiClickTask(void *argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _startWifiClickTask */
	StartWifiClick(&dataToPrint);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <_startWifiClickTask+0x14>)
 80010ee:	f001 ff43 	bl	8002f78 <StartWifiClick>
	osThreadExit();
 80010f2:	f007 faaa 	bl	800864a <osThreadExit>
 80010f6:	bf00      	nop
 80010f8:	2000009e 	.word	0x2000009e

080010fc <updateScreenTimerCallback>:
  /* USER CODE END _startWifiClickTask */
}

/* updateScreenTimerCallback function */
void updateScreenTimerCallback(void *argument)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateScreenTimerCallback */
	updateLedMatrix = 1;
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <updateScreenTimerCallback+0x1c>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
  /* USER CODE END updateScreenTimerCallback */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000009c 	.word	0x2000009c

0800111c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_GPIO_Init+0x8c>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <MX_GPIO_Init+0x8c>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_GPIO_Init+0x8c>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_GPIO_Init+0x8c>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <MX_GPIO_Init+0x8c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_GPIO_Init+0x8c>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_GPIO_Init+0x8c>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <MX_GPIO_Init+0x8c>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_GPIO_Init+0x8c>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2108      	movs	r1, #8
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <MX_GPIO_Init+0x90>)
 8001180:	f002 fdf0 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001184:	2308      	movs	r3, #8
 8001186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	4619      	mov	r1, r3
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_GPIO_Init+0x90>)
 800119c:	f002 fc78 	bl	8003a90 <HAL_GPIO_Init>

}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48000400 	.word	0x48000400

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b4:	f002 f8db 	bl	800336e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b8:	f000 f812 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011bc:	f7ff ffae 	bl	800111c <MX_GPIO_Init>
  MX_DMA_Init();
 80011c0:	f7ff ff0e 	bl	8000fe0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011c4:	f001 fda0 	bl	8002d08 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011c8:	f001 fc4c 	bl	8002a64 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80011cc:	f001 fd6c 	bl	8002ca8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011d0:	f007 f95e 	bl	8008490 <osKernelInitialize>
  MX_FREERTOS_Init();
 80011d4:	f7ff ff2a 	bl	800102c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011d8:	f007 f97e 	bl	80084d8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <main+0x2c>
	...

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b096      	sub	sp, #88	; 0x58
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2244      	movs	r2, #68	; 0x44
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00a ff48 	bl	800c084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001202:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001206:	f002 fde3 	bl	8003dd0 <HAL_PWREx_ControlVoltageScaling>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001210:	f000 f85a 	bl	80012c8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001214:	f002 fdbe 	bl	8003d94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <SystemClock_Config+0xc0>)
 800121a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121e:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <SystemClock_Config+0xc0>)
 8001220:	f023 0318 	bic.w	r3, r3, #24
 8001224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001228:	2314      	movs	r3, #20
 800122a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800122c:	2301      	movs	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001230:	2301      	movs	r3, #1
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001238:	2360      	movs	r3, #96	; 0x60
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123c:	2302      	movs	r3, #2
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001240:	2301      	movs	r3, #1
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001244:	2301      	movs	r3, #1
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001248:	2328      	movs	r3, #40	; 0x28
 800124a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800124c:	2307      	movs	r3, #7
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001250:	2302      	movs	r3, #2
 8001252:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4618      	mov	r0, r3
 800125e:	f002 fe0d 	bl	8003e7c <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001268:	f000 f82e 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	2303      	movs	r3, #3
 8001272:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	2104      	movs	r1, #4
 8001284:	4618      	mov	r0, r3
 8001286:	f003 fa0d 	bl	80046a4 <HAL_RCC_ClockConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001290:	f000 f81a 	bl	80012c8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001294:	f003 fe52 	bl	8004f3c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001298:	bf00      	nop
 800129a:	3758      	adds	r7, #88	; 0x58
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b6:	f002 f873 	bl	80033a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40014400 	.word	0x40014400

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <Error_Handler+0x8>

080012d2 <get_bit_access>:
// but:
// 1. Some compilers are finicky about this;
// 2. Some people may want to convert this to C89;
// 3. If you try to use it as C++, only C++20 supports compound literals
static inline double_with_bit_access get_bit_access(double x)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b087      	sub	sp, #28
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	e9c7 2300 	strd	r2, r3, [r7]
  double_with_bit_access dwba;
  dwba.F = x;
 80012de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return dwba;
 80012e6:	68f9      	ldr	r1, [r7, #12]
 80012e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012ec:	e9c1 2300 	strd	r2, r3, [r1]
}
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <get_sign_bit>:

static inline int get_sign_bit(double x)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	e9c7 0100 	strd	r0, r1, [r7]
  // The sign is stored in the highest bit
  return (int) (get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1));
 8001306:	f107 0108 	add.w	r1, r7, #8
 800130a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800130e:	4608      	mov	r0, r1
 8001310:	f7ff ffdf 	bl	80012d2 <get_bit_access>
 8001314:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	0fca      	lsrs	r2, r1, #31
 8001322:	2300      	movs	r3, #0
 8001324:	4613      	mov	r3, r2
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <putchar_via_gadget>:
// Note: This function currently assumes it is not passed a '\0' c,
// or alternatively, that '\0' can be passed to the function in the output
// gadget. The former assumption holds within the printf library. It also
// assumes that the output gadget has been properly initialized.
static inline void putchar_via_gadget(output_gadget_t* gadget, char c)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	460b      	mov	r3, r1
 8001338:	70fb      	strb	r3, [r7, #3]
  printf_size_t write_pos = gadget->pos++;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	1c59      	adds	r1, r3, #1
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	60d1      	str	r1, [r2, #12]
 8001344:	60fb      	str	r3, [r7, #12]
    // We're _always_ increasing pos, so as to count how may characters
    // _would_ have been written if not for the max_chars limitation
  if (write_pos >= gadget->max_chars) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d212      	bcs.n	8001376 <putchar_via_gadget+0x48>
    return;
  }
  if (gadget->function != NULL) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <putchar_via_gadget+0x3a>
    // No check for c == '\0' .
    gadget->function(c, gadget->extra_function_arg);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6851      	ldr	r1, [r2, #4]
 8001360:	78fa      	ldrb	r2, [r7, #3]
 8001362:	4610      	mov	r0, r2
 8001364:	4798      	blx	r3
 8001366:	e007      	b.n	8001378 <putchar_via_gadget+0x4a>
  }
  else {
    // it must be the case that gadget->buffer != NULL , due to the constraint
    // on output_gadget_t ; and note we're relying on write_pos being non-negative.
    gadget->buffer[write_pos] = c;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	78fa      	ldrb	r2, [r7, #3]
 8001372:	701a      	strb	r2, [r3, #0]
 8001374:	e000      	b.n	8001378 <putchar_via_gadget+0x4a>
    return;
 8001376:	bf00      	nop
  }
}
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <append_termination_with_gadget>:

// Possibly-write the string-terminating '\0' character
static inline void append_termination_with_gadget(output_gadget_t* gadget)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  if (gadget->function != NULL || gadget->max_chars == 0) {
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <append_termination_with_gadget+0x48>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d017      	beq.n	80013c6 <append_termination_with_gadget+0x48>
    return;
  }
  if (gadget->buffer == NULL) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d015      	beq.n	80013ca <append_termination_with_gadget+0x4c>
    return;
  }
  printf_size_t null_char_pos = gadget->pos < gadget->max_chars ? gadget->pos : gadget->max_chars - 1;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d202      	bcs.n	80013b0 <append_termination_with_gadget+0x32>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	e002      	b.n	80013b6 <append_termination_with_gadget+0x38>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
  gadget->buffer[null_char_pos] = '\0';
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e002      	b.n	80013cc <append_termination_with_gadget+0x4e>
    return;
 80013c6:	bf00      	nop
 80013c8:	e000      	b.n	80013cc <append_termination_with_gadget+0x4e>
    return;
 80013ca:	bf00      	nop
}
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <discarding_gadget>:
  (void) unused;
  putchar_(c);
}

static inline output_gadget_t discarding_gadget(void)
{
 80013d6:	b4b0      	push	{r4, r5, r7}
 80013d8:	b089      	sub	sp, #36	; 0x24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  output_gadget_t gadget;
  gadget.function = NULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  gadget.extra_function_arg = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  gadget.buffer = NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  gadget.pos = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  gadget.max_chars = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
  return gadget;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	461d      	mov	r5, r3
 80013f6:	f107 040c 	add.w	r4, r7, #12
 80013fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	602b      	str	r3, [r5, #0]
}
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	bcb0      	pop	{r4, r5, r7}
 800140a:	4770      	bx	lr

0800140c <buffer_gadget>:

static inline output_gadget_t buffer_gadget(char* buffer, size_t buffer_size)
{
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 8001418:	687b      	ldr	r3, [r7, #4]
    PRINTF_MAX_POSSIBLE_BUFFER_SIZE : (printf_size_t) buffer_size;
 800141a:	2b00      	cmp	r3, #0
 800141c:	db01      	blt.n	8001422 <buffer_gadget+0x16>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	e001      	b.n	8001426 <buffer_gadget+0x1a>
 8001422:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  output_gadget_t result = discarding_gadget();
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ffd2 	bl	80013d6 <discarding_gadget>
  if (buffer != NULL) {
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <buffer_gadget+0x34>
    result.buffer = buffer;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	61bb      	str	r3, [r7, #24]
    result.max_chars = usable_buffer_size;
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	623b      	str	r3, [r7, #32]
  }
  return result;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	461d      	mov	r5, r3
 8001444:	f107 0410 	add.w	r4, r7, #16
 8001448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	602b      	str	r3, [r5, #0]
}
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bdb0      	pop	{r4, r5, r7, pc}

08001458 <strnlen_s_>:
// internal secure strlen
// @return The length of the string (excluding the terminating 0) limited by 'maxsize'
// @note strlen uses size_t, but wes only use this function with printf_size_t
// variables - hence the signature.
static inline printf_size_t strnlen_s_(const char* str, printf_size_t maxsize)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e002      	b.n	800146e <strnlen_s_+0x16>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d004      	beq.n	8001480 <strnlen_s_+0x28>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	1e5a      	subs	r2, r3, #1
 800147a:	603a      	str	r2, [r7, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f3      	bne.n	8001468 <strnlen_s_+0x10>
  return (printf_size_t)(s - str);
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	1ad3      	subs	r3, r2, r3
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <is_digit_>:


// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool is_digit_(char ch)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b2f      	cmp	r3, #47	; 0x2f
 80014a0:	d904      	bls.n	80014ac <is_digit_+0x1a>
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b39      	cmp	r3, #57	; 0x39
 80014a6:	d801      	bhi.n	80014ac <is_digit_+0x1a>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <is_digit_+0x1c>
 80014ac:	2300      	movs	r3, #0
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <atou_>:


// internal ASCII string to printf_size_t conversion
static printf_size_t atou_(const char** str)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  printf_size_t i = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 80014cc:	e00e      	b.n	80014ec <atou_+0x2c>
    i = i * 10U + (printf_size_t)(*((*str)++) - '0');
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1c59      	adds	r1, r3, #1
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6011      	str	r1, [r2, #0]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4403      	add	r3, r0
 80014e8:	3b30      	subs	r3, #48	; 0x30
 80014ea:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ffcd 	bl	8001492 <is_digit_>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1e7      	bne.n	80014ce <atou_+0xe>
  }
  return i;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <out_rev_>:


// output the specified string in reverse, taking care of any zero-padding
static void out_rev_(output_gadget_t* output, const char* buf, printf_size_t len, printf_size_t width, printf_flags_t flags)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	603b      	str	r3, [r7, #0]
  const printf_size_t start_pos = output->pos;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d11e      	bne.n	8001564 <out_rev_+0x5c>
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d119      	bne.n	8001564 <out_rev_+0x5c>
    for (printf_size_t i = len; i < width; i++) {
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e006      	b.n	8001544 <out_rev_+0x3c>
      putchar_via_gadget(output, ' ');
 8001536:	2120      	movs	r1, #32
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff fef8 	bl	800132e <putchar_via_gadget>
    for (printf_size_t i = len; i < width; i++) {
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3f4      	bcc.n	8001536 <out_rev_+0x2e>
    }
  }

  // reverse string
  while (len) {
 800154c:	e00a      	b.n	8001564 <out_rev_+0x5c>
    putchar_via_gadget(output, buf[--len]);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3b01      	subs	r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff fee5 	bl	800132e <putchar_via_gadget>
  while (len) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f1      	bne.n	800154e <out_rev_+0x46>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00b      	beq.n	800158c <out_rev_+0x84>
    while (output->pos - start_pos < width) {
 8001574:	e003      	b.n	800157e <out_rev_+0x76>
      putchar_via_gadget(output, ' ');
 8001576:	2120      	movs	r1, #32
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7ff fed8 	bl	800132e <putchar_via_gadget>
    while (output->pos - start_pos < width) {
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d8f4      	bhi.n	8001576 <out_rev_+0x6e>
    }
  }
}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <print_integer_finalization>:


// Invoked by print_integer after the actual number has been printed, performing necessary
// work on the number's prefix (as the number is initially printed in reverse order)
static void print_integer_finalization(output_gadget_t* output, char* buf, printf_size_t len, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af02      	add	r7, sp, #8
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	70fb      	strb	r3, [r7, #3]
  printf_size_t unpadded_len = len;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	617b      	str	r3, [r7, #20]

  // pad with leading zeros
  {
    if (!(flags & FLAGS_LEFT)) {
 80015a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d12e      	bne.n	800160e <print_integer_finalization+0x7a>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d017      	beq.n	80015e6 <print_integer_finalization+0x52>
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d012      	beq.n	80015e6 <print_integer_finalization+0x52>
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d104      	bne.n	80015d0 <print_integer_finalization+0x3c>
 80015c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00a      	beq.n	80015e6 <print_integer_finalization+0x52>
        width--;
 80015d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d2:	3b01      	subs	r3, #1
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80015d6:	e006      	b.n	80015e6 <print_integer_finalization+0x52>
        buf[len++] = '0';
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	4413      	add	r3, r2
 80015e2:	2230      	movs	r2, #48	; 0x30
 80015e4:	701a      	strb	r2, [r3, #0]
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00e      	beq.n	800160e <print_integer_finalization+0x7a>
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d20a      	bcs.n	800160e <print_integer_finalization+0x7a>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b1f      	cmp	r3, #31
 80015fc:	d9ec      	bls.n	80015d8 <print_integer_finalization+0x44>
      }
    }

    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80015fe:	e006      	b.n	800160e <print_integer_finalization+0x7a>
      buf[len++] = '0';
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	4413      	add	r3, r2
 800160a:	2230      	movs	r2, #48	; 0x30
 800160c:	701a      	strb	r2, [r3, #0]
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	429a      	cmp	r2, r3
 8001614:	d202      	bcs.n	800161c <print_integer_finalization+0x88>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b1f      	cmp	r3, #31
 800161a:	d9f1      	bls.n	8001600 <print_integer_finalization+0x6c>
    }

    if (base == BASE_OCTAL && (len > unpadded_len)) {
 800161c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001620:	2b08      	cmp	r3, #8
 8001622:	d107      	bne.n	8001634 <print_integer_finalization+0xa0>
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	d903      	bls.n	8001634 <print_integer_finalization+0xa0>
      // Since we've written some zeros, we've satisfied the alternative format leading space requirement
      flags &= ~FLAGS_HASH;
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162e:	f023 0310 	bic.w	r3, r3, #16
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }

  // handle hash
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 8001634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001636:	f242 0310 	movw	r3, #8208	; 0x2010
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d068      	beq.n	8001712 <print_integer_finalization+0x17e>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001646:	2b00      	cmp	r3, #0
 8001648:	d123      	bne.n	8001692 <print_integer_finalization+0xfe>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <print_integer_finalization+0xfe>
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	429a      	cmp	r2, r3
 8001656:	d003      	beq.n	8001660 <print_integer_finalization+0xcc>
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	429a      	cmp	r2, r3
 800165e:	d118      	bne.n	8001692 <print_integer_finalization+0xfe>
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	d202      	bcs.n	800166e <print_integer_finalization+0xda>
        len--; // This should suffice for BASE_OCTAL
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	607b      	str	r3, [r7, #4]
      }
      if (len && (base == BASE_HEX || base == BASE_BINARY) && (unpadded_len < len)) {
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00e      	beq.n	8001692 <print_integer_finalization+0xfe>
 8001674:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001678:	2b10      	cmp	r3, #16
 800167a:	d003      	beq.n	8001684 <print_integer_finalization+0xf0>
 800167c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d106      	bne.n	8001692 <print_integer_finalization+0xfe>
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	d202      	bcs.n	8001692 <print_integer_finalization+0xfe>
        len--; // ... and an extra one for 0x or 0b
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	607b      	str	r3, [r7, #4]
      }
    }
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001692:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001696:	2b10      	cmp	r3, #16
 8001698:	d10f      	bne.n	80016ba <print_integer_finalization+0x126>
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10a      	bne.n	80016ba <print_integer_finalization+0x126>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b1f      	cmp	r3, #31
 80016a8:	d807      	bhi.n	80016ba <print_integer_finalization+0x126>
      buf[len++] = 'x';
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4413      	add	r3, r2
 80016b4:	2278      	movs	r2, #120	; 0x78
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e021      	b.n	80016fe <print_integer_finalization+0x16a>
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80016ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016be:	2b10      	cmp	r3, #16
 80016c0:	d10f      	bne.n	80016e2 <print_integer_finalization+0x14e>
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	f003 0320 	and.w	r3, r3, #32
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00a      	beq.n	80016e2 <print_integer_finalization+0x14e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b1f      	cmp	r3, #31
 80016d0:	d807      	bhi.n	80016e2 <print_integer_finalization+0x14e>
      buf[len++] = 'X';
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	4413      	add	r3, r2
 80016dc:	2258      	movs	r2, #88	; 0x58
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e00d      	b.n	80016fe <print_integer_finalization+0x16a>
    }
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80016e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d109      	bne.n	80016fe <print_integer_finalization+0x16a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b1f      	cmp	r3, #31
 80016ee:	d806      	bhi.n	80016fe <print_integer_finalization+0x16a>
      buf[len++] = 'b';
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	4413      	add	r3, r2
 80016fa:	2262      	movs	r2, #98	; 0x62
 80016fc:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b1f      	cmp	r3, #31
 8001702:	d806      	bhi.n	8001712 <print_integer_finalization+0x17e>
      buf[len++] = '0';
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	4413      	add	r3, r2
 800170e:	2230      	movs	r2, #48	; 0x30
 8001710:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b1f      	cmp	r3, #31
 8001716:	d823      	bhi.n	8001760 <print_integer_finalization+0x1cc>
    if (negative) {
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <print_integer_finalization+0x19a>
      buf[len++] = '-';
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	4413      	add	r3, r2
 8001728:	222d      	movs	r2, #45	; 0x2d
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e018      	b.n	8001760 <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_PLUS) {
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <print_integer_finalization+0x1b4>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	222b      	movs	r2, #43	; 0x2b
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e00b      	b.n	8001760 <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_SPACE) {
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <print_integer_finalization+0x1cc>
      buf[len++] = ' ';
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	4413      	add	r3, r2
 800175c:	2220      	movs	r2, #32
 800175e:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fecc 	bl	8001508 <out_rev_>
}
 8001770:	bf00      	nop
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <print_integer>:

// An internal itoa-like function
static void print_integer(output_gadget_t* output, printf_unsigned_value_t value, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b092      	sub	sp, #72	; 0x48
 800177c:	af04      	add	r7, sp, #16
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	460b      	mov	r3, r1
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	4613      	mov	r3, r2
 800178c:	71bb      	strb	r3, [r7, #6]
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  printf_size_t len = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34

  if (!value) {
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d119      	bne.n	80017cc <print_integer+0x54>
    if ( !(flags & FLAGS_PRECISION) ) {
 8001798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800179a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10c      	bne.n	80017bc <print_integer+0x44>
      buf[len++] = '0';
 80017a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	637a      	str	r2, [r7, #52]	; 0x34
 80017a8:	3338      	adds	r3, #56	; 0x38
 80017aa:	443b      	add	r3, r7
 80017ac:	2230      	movs	r2, #48	; 0x30
 80017ae:	f803 2c28 	strb.w	r2, [r3, #-40]
      flags &= ~FLAGS_HASH;
 80017b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017b4:	f023 0310 	bic.w	r3, r3, #16
 80017b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80017ba:	e039      	b.n	8001830 <print_integer+0xb8>
      // We drop this flag this since either the alternative and regular modes of the specifier
      // don't differ on 0 values, or (in the case of octal) we've already provided the special
      // handling for this mode.
    }
    else if (base == BASE_HEX) {
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	2b10      	cmp	r3, #16
 80017c0:	d136      	bne.n	8001830 <print_integer+0xb8>
      flags &= ~FLAGS_HASH;
 80017c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c4:	f023 0310 	bic.w	r3, r3, #16
 80017c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80017ca:	e031      	b.n	8001830 <print_integer+0xb8>
      // don't differ on 0 values
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
 80017cc:	79ba      	ldrb	r2, [r7, #6]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80017d4:	fb01 f202 	mul.w	r2, r1, r2
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 80017de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017e2:	2b09      	cmp	r3, #9
 80017e4:	d804      	bhi.n	80017f0 <print_integer+0x78>
 80017e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017ea:	3330      	adds	r3, #48	; 0x30
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	e00d      	b.n	800180c <print_integer+0x94>
 80017f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <print_integer+0x86>
 80017fa:	2241      	movs	r2, #65	; 0x41
 80017fc:	e000      	b.n	8001800 <print_integer+0x88>
 80017fe:	2261      	movs	r2, #97	; 0x61
 8001800:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001804:	4413      	add	r3, r2
 8001806:	b2db      	uxtb	r3, r3
 8001808:	3b0a      	subs	r3, #10
 800180a:	b2da      	uxtb	r2, r3
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	1c59      	adds	r1, r3, #1
 8001810:	6379      	str	r1, [r7, #52]	; 0x34
 8001812:	3338      	adds	r3, #56	; 0x38
 8001814:	443b      	add	r3, r7
 8001816:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	60bb      	str	r3, [r7, #8]
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <print_integer+0xb8>
 800182a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182c:	2b1f      	cmp	r3, #31
 800182e:	d9cd      	bls.n	80017cc <print_integer+0x54>
  }

  print_integer_finalization(output, buf, len, negative, base, precision, width, flags);
 8001830:	79fa      	ldrb	r2, [r7, #7]
 8001832:	f107 0110 	add.w	r1, r7, #16
 8001836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001838:	9303      	str	r3, [sp, #12]
 800183a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	79bb      	ldrb	r3, [r7, #6]
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	4613      	mov	r3, r2
 8001848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f7ff fea2 	bl	8001594 <print_integer_finalization>
}
 8001850:	bf00      	nop
 8001852:	3738      	adds	r7, #56	; 0x38
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, printf_size_t precision)
{
 8001858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800185c:	b096      	sub	sp, #88	; 0x58
 800185e:	af00      	add	r7, sp, #0
 8001860:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001862:	ed87 0b08 	vstr	d0, [r7, #32]
 8001866:	62b9      	str	r1, [r7, #40]	; 0x28
  struct double_components number_;
  number_.is_negative = get_sign_bit(number);
 8001868:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800186c:	f7ff fd46 	bl	80012fc <get_sign_bit>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	bf14      	ite	ne
 8001876:	2301      	movne	r3, #1
 8001878:	2300      	moveq	r3, #0
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  double abs_number = (number_.is_negative) ? -number : number;
 8001880:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <get_components+0x3a>
 8001888:	6a3c      	ldr	r4, [r7, #32]
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001890:	e001      	b.n	8001896 <get_components+0x3e>
 8001892:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001896:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
  number_.integral = (int_fast64_t)abs_number;
 800189a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800189e:	f7ff f875 	bl	800098c <__aeabi_d2lz>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  double remainder = (abs_number - (double) number_.integral) * powers_of_10[precision];
 80018aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7fe ff4d 	bl	8000750 <__aeabi_l2d>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018be:	f7fe fdbd 	bl	800043c <__aeabi_dsub>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	4a69      	ldr	r2, [pc, #420]	; (8001a70 <get_components+0x218>)
 80018cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fc83 	bl	80001e0 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  number_.fractional = (int_fast64_t)remainder;
 80018e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80018e6:	f7ff f851 	bl	800098c <__aeabi_d2lz>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  remainder -= (double) number_.fractional;
 80018f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7fe ff29 	bl	8000750 <__aeabi_l2d>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001906:	f7fe fd99 	bl	800043c <__aeabi_dsub>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

  if (remainder > 0.5) {
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <get_components+0x21c>)
 8001918:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800191c:	f7fe ffc4 	bl	80008a8 <__aeabi_dcmpgt>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d02d      	beq.n	8001982 <get_components+0x12a>
    ++number_.fractional;
 8001926:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800192a:	1c51      	adds	r1, r2, #1
 800192c:	61b9      	str	r1, [r7, #24]
 800192e:	f143 0300 	adc.w	r3, r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001938:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 800193c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7fe ff04 	bl	8000750 <__aeabi_l2d>
 8001948:	4a49      	ldr	r2, [pc, #292]	; (8001a70 <get_components+0x218>)
 800194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe ff9e 	bl	8000894 <__aeabi_dcmpge>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d033      	beq.n	80019c6 <get_components+0x16e>
      number_.fractional = 0;
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      ++number_.integral;
 800196a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800196e:	1c51      	adds	r1, r2, #1
 8001970:	6139      	str	r1, [r7, #16]
 8001972:	f143 0300 	adc.w	r3, r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800197c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8001980:	e021      	b.n	80019c6 <get_components+0x16e>
    }
  }
  else if ((remainder == 0.5) && ((number_.fractional == 0U) || (number_.fractional & 1U))) {
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <get_components+0x21c>)
 8001988:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800198c:	f7fe ff64 	bl	8000858 <__aeabi_dcmpeq>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d017      	beq.n	80019c6 <get_components+0x16e>
 8001996:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800199a:	4313      	orrs	r3, r2
 800199c:	d008      	beq.n	80019b0 <get_components+0x158>
 800199e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019a2:	f002 0a01 	and.w	sl, r2, #1
 80019a6:	f04f 0b00 	mov.w	fp, #0
 80019aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80019ae:	d00a      	beq.n	80019c6 <get_components+0x16e>
    // if halfway, round up if odd OR if last digit is 0
    ++number_.fractional;
 80019b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019b4:	1c51      	adds	r1, r2, #1
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	f143 0300 	adc.w	r3, r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80019c2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  }

  if (precision == 0U) {
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d141      	bne.n	8001a50 <get_components+0x1f8>
    remainder = abs_number - (double) number_.integral;
 80019cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7fe febc 	bl	8000750 <__aeabi_l2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80019e0:	f7fe fd2c 	bl	800043c <__aeabi_dsub>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 80019ec:	2301      	movs	r3, #1
 80019ee:	461c      	mov	r4, r3
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <get_components+0x21c>)
 80019f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80019fa:	f7fe ff37 	bl	800086c <__aeabi_dcmplt>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <get_components+0x1b0>
 8001a04:	2300      	movs	r3, #0
 8001a06:	461c      	mov	r4, r3
 8001a08:	b2e3      	uxtb	r3, r4
 8001a0a:	f083 0301 	eor.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <get_components+0x1d0>
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <get_components+0x21c>)
 8001a1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a1e:	f7fe ff43 	bl	80008a8 <__aeabi_dcmpgt>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <get_components+0x1f8>
 8001a28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a2c:	f002 0801 	and.w	r8, r2, #1
 8001a30:	f04f 0900 	mov.w	r9, #0
 8001a34:	ea58 0309 	orrs.w	r3, r8, r9
 8001a38:	d00a      	beq.n	8001a50 <get_components+0x1f8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 8001a3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a3e:	1c51      	adds	r1, r2, #1
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	f143 0300 	adc.w	r3, r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a4c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    }
  }
  return number_;
 8001a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a52:	461d      	mov	r5, r3
 8001a54:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a60:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001a64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a66:	3758      	adds	r7, #88	; 0x58
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	0800e4c8 	.word	0x0800e4c8
 8001a74:	3fe00000 	.word	0x3fe00000

08001a78 <print_broken_up_decimal>:
#endif // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_broken_up_decimal(
  struct double_components number_, output_gadget_t* output, printf_size_t precision,
  printf_size_t width, printf_flags_t flags, char *buf, printf_size_t len)
{
 8001a78:	b084      	sub	sp, #16
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af02      	add	r7, sp, #8
 8001a80:	f107 0c18 	add.w	ip, r7, #24
 8001a84:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (precision != 0U) {
 8001a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8087 	beq.w	8001b9e <print_broken_up_decimal+0x126>
    // do fractional part, as an unsigned number

    printf_size_t count = precision;
 8001a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a92:	60fb      	str	r3, [r7, #12]

    // %g/%G mandates we skip the trailing 0 digits...
    if ((flags & FLAGS_ADAPT_EXP) && !(flags & FLAGS_HASH) && (number_.fractional > 0)) {
 8001a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d029      	beq.n	8001af2 <print_broken_up_decimal+0x7a>
 8001a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d124      	bne.n	8001af2 <print_broken_up_decimal+0x7a>
 8001aa8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001aac:	2a01      	cmp	r2, #1
 8001aae:	f173 0300 	sbcs.w	r3, r3, #0
 8001ab2:	db1e      	blt.n	8001af2 <print_broken_up_decimal+0x7a>
      while(true) {
        int_fast64_t digit = number_.fractional % 10U;
 8001ab4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ab8:	f04f 020a 	mov.w	r2, #10
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	f7fe fefc 	bl	80008bc <__aeabi_ldivmod>
 8001ac4:	e9c7 2300 	strd	r2, r3, [r7]
        if (digit != 0) {
 8001ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	d10f      	bne.n	8001af0 <print_broken_up_decimal+0x78>
          break;
        }
        --count;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
        number_.fractional /= 10U;
 8001ad6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ada:	f04f 020a 	mov.w	r2, #10
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	f7fe feeb 	bl	80008bc <__aeabi_ldivmod>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	e9c7 2308 	strd	r2, r3, [r7, #32]
      while(true) {
 8001aee:	e7e1      	b.n	8001ab4 <print_broken_up_decimal+0x3c>
          break;
 8001af0:	bf00      	nop
      }
      // ... and even the decimal point if there are no
      // non-zero fractional part digits (see below)
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 8001af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001af6:	2a01      	cmp	r2, #1
 8001af8:	f173 0300 	sbcs.w	r3, r3, #0
 8001afc:	da2e      	bge.n	8001b5c <print_broken_up_decimal+0xe4>
 8001afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d029      	beq.n	8001b5c <print_broken_up_decimal+0xe4>
 8001b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d076      	beq.n	8001c00 <print_broken_up_decimal+0x188>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001b12:	e023      	b.n	8001b5c <print_broken_up_decimal+0xe4>
        --count;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8001b1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b1e:	f04f 020a 	mov.w	r2, #10
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	f7fe fec9 	bl	80008bc <__aeabi_ldivmod>
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2e:	1c59      	adds	r1, r3, #1
 8001b30:	6479      	str	r1, [r7, #68]	; 0x44
 8001b32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001b34:	440b      	add	r3, r1
 8001b36:	3230      	adds	r2, #48	; 0x30
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
        if (!(number_.fractional /= 10U)) {
 8001b3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b40:	f04f 020a 	mov.w	r2, #10
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	f7fe feb8 	bl	80008bc <__aeabi_ldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001b54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <print_broken_up_decimal+0xec>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5e:	2b1f      	cmp	r3, #31
 8001b60:	d9d8      	bls.n	8001b14 <print_broken_up_decimal+0x9c>
 8001b62:	e00b      	b.n	8001b7c <print_broken_up_decimal+0x104>
          break;
 8001b64:	bf00      	nop
        }
      }
      // add extra 0s
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8001b66:	e009      	b.n	8001b7c <print_broken_up_decimal+0x104>
        buf[len++] = '0';
 8001b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	647a      	str	r2, [r7, #68]	; 0x44
 8001b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b70:	4413      	add	r3, r2
 8001b72:	2230      	movs	r2, #48	; 0x30
 8001b74:	701a      	strb	r2, [r3, #0]
        --count;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8001b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7e:	2b1f      	cmp	r3, #31
 8001b80:	d802      	bhi.n	8001b88 <print_broken_up_decimal+0x110>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1ef      	bne.n	8001b68 <print_broken_up_decimal+0xf0>
      }
      if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b8a:	2b1f      	cmp	r3, #31
 8001b8c:	d838      	bhi.n	8001c00 <print_broken_up_decimal+0x188>
        buf[len++] = '.';
 8001b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	647a      	str	r2, [r7, #68]	; 0x44
 8001b94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b96:	4413      	add	r3, r2
 8001b98:	222e      	movs	r2, #46	; 0x2e
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	e030      	b.n	8001c00 <print_broken_up_decimal+0x188>
      }
    }
  }
  else {
    if ((flags & FLAGS_HASH) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8001b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d02b      	beq.n	8001c00 <print_broken_up_decimal+0x188>
 8001ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001baa:	2b1f      	cmp	r3, #31
 8001bac:	d828      	bhi.n	8001c00 <print_broken_up_decimal+0x188>
      buf[len++] = '.';
 8001bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	647a      	str	r2, [r7, #68]	; 0x44
 8001bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bb6:	4413      	add	r3, r2
 8001bb8:	222e      	movs	r2, #46	; 0x2e
 8001bba:	701a      	strb	r2, [r3, #0]
    }
  }

  // Write the integer part of the number (it comes after the fractional
  // since the character order is reversed)
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001bbc:	e020      	b.n	8001c00 <print_broken_up_decimal+0x188>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8001bbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bc2:	f04f 020a 	mov.w	r2, #10
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	f7fe fe77 	bl	80008bc <__aeabi_ldivmod>
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd2:	1c59      	adds	r1, r3, #1
 8001bd4:	6479      	str	r1, [r7, #68]	; 0x44
 8001bd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001bd8:	440b      	add	r3, r1
 8001bda:	3230      	adds	r2, #48	; 0x30
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	701a      	strb	r2, [r3, #0]
    if (!(number_.integral /= 10)) {
 8001be0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001be4:	f04f 020a 	mov.w	r2, #10
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	f7fe fe66 	bl	80008bc <__aeabi_ldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	d003      	beq.n	8001c08 <print_broken_up_decimal+0x190>
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c02:	2b1f      	cmp	r3, #31
 8001c04:	d9db      	bls.n	8001bbe <print_broken_up_decimal+0x146>
 8001c06:	e000      	b.n	8001c0a <print_broken_up_decimal+0x192>
      break;
 8001c08:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d122      	bne.n	8001c5a <print_broken_up_decimal+0x1e2>
 8001c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01d      	beq.n	8001c5a <print_broken_up_decimal+0x1e2>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <print_broken_up_decimal+0x1d4>
 8001c24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d104      	bne.n	8001c36 <print_broken_up_decimal+0x1be>
 8001c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00a      	beq.n	8001c4c <print_broken_up_decimal+0x1d4>
      width--;
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8001c3c:	e006      	b.n	8001c4c <print_broken_up_decimal+0x1d4>
      buf[len++] = '0';
 8001c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	647a      	str	r2, [r7, #68]	; 0x44
 8001c44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c46:	4413      	add	r3, r2
 8001c48:	2230      	movs	r2, #48	; 0x30
 8001c4a:	701a      	strb	r2, [r3, #0]
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8001c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d202      	bcs.n	8001c5a <print_broken_up_decimal+0x1e2>
 8001c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c56:	2b1f      	cmp	r3, #31
 8001c58:	d9f1      	bls.n	8001c3e <print_broken_up_decimal+0x1c6>
    }
  }

  if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5c:	2b1f      	cmp	r3, #31
 8001c5e:	d824      	bhi.n	8001caa <print_broken_up_decimal+0x232>
    if (number_.is_negative) {
 8001c60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <print_broken_up_decimal+0x200>
      buf[len++] = '-';
 8001c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	647a      	str	r2, [r7, #68]	; 0x44
 8001c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c70:	4413      	add	r3, r2
 8001c72:	222d      	movs	r2, #45	; 0x2d
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	e018      	b.n	8001caa <print_broken_up_decimal+0x232>
    }
    else if (flags & FLAGS_PLUS) {
 8001c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <print_broken_up_decimal+0x21a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	647a      	str	r2, [r7, #68]	; 0x44
 8001c88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c8a:	4413      	add	r3, r2
 8001c8c:	222b      	movs	r2, #43	; 0x2b
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	e00b      	b.n	8001caa <print_broken_up_decimal+0x232>
    }
    else if (flags & FLAGS_SPACE) {
 8001c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <print_broken_up_decimal+0x232>
      buf[len++] = ' ';
 8001c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	647a      	str	r2, [r7, #68]	; 0x44
 8001ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 8001caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cb6:	f7ff fc27 	bl	8001508 <out_rev_>
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cc4:	b004      	add	sp, #16
 8001cc6:	4770      	bx	lr

08001cc8 <print_decimal_number>:

      // internal ftoa for fixed decimal floating point
static void print_decimal_number(output_gadget_t* output, double number, printf_size_t precision, printf_size_t width, printf_flags_t flags, char* buf, printf_size_t len)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b094      	sub	sp, #80	; 0x50
 8001ccc:	af08      	add	r7, sp, #32
 8001cce:	6178      	str	r0, [r7, #20]
 8001cd0:	ed87 0b02 	vstr	d0, [r7, #8]
 8001cd4:	6139      	str	r1, [r7, #16]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
  struct double_components value_ = get_components(number, precision);
 8001cda:	f107 0318 	add.w	r3, r7, #24
 8001cde:	6939      	ldr	r1, [r7, #16]
 8001ce0:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fdb7 	bl	8001858 <get_components>
  print_broken_up_decimal(value_, output, precision, width, flags, buf, len);
 8001cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cec:	9307      	str	r3, [sp, #28]
 8001cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf0:	9306      	str	r3, [sp, #24]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	9305      	str	r3, [sp, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	9304      	str	r3, [sp, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	9303      	str	r3, [sp, #12]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	466a      	mov	r2, sp
 8001d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d0c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001d10:	f107 0318 	add.w	r3, r7, #24
 8001d14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d16:	f7ff feaf 	bl	8001a78 <print_broken_up_decimal>
}
 8001d1a:	bf00      	nop
 8001d1c:	3730      	adds	r7, #48	; 0x30
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	0000      	movs	r0, r0
 8001d24:	0000      	movs	r0, r0
	...

08001d28 <print_floating_point>:
  }
}
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_floating_point(output_gadget_t* output, double value, printf_size_t precision, printf_size_t width, printf_flags_t flags, bool prefer_exponential)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b092      	sub	sp, #72	; 0x48
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	6178      	str	r0, [r7, #20]
 8001d30:	ed87 0b02 	vstr	d0, [r7, #8]
 8001d34:	6139      	str	r1, [r7, #16]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_DECIMAL_BUFFER_SIZE];
  printf_size_t len = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c

  // test for special values
  if (value != value) {
 8001d3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d46:	f7fe fd87 	bl	8000858 <__aeabi_dcmpeq>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d108      	bne.n	8001d62 <print_floating_point+0x3a>
    out_rev_(output, "nan", 3, width, flags);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2203      	movs	r2, #3
 8001d58:	4943      	ldr	r1, [pc, #268]	; (8001e68 <print_floating_point+0x140>)
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff fbd4 	bl	8001508 <out_rev_>
    return;
 8001d60:	e077      	b.n	8001e52 <print_floating_point+0x12a>
  }
  if (value < -DBL_MAX) {
 8001d62:	f04f 32ff 	mov.w	r2, #4294967295
 8001d66:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001d6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d6e:	f7fe fd7d 	bl	800086c <__aeabi_dcmplt>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <print_floating_point+0x62>
    out_rev_(output, "fni-", 4, width, flags);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	493a      	ldr	r1, [pc, #232]	; (8001e6c <print_floating_point+0x144>)
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff fbc0 	bl	8001508 <out_rev_>
    return;
 8001d88:	e063      	b.n	8001e52 <print_floating_point+0x12a>
  }
  if (value > DBL_MAX) {
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8e:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <print_floating_point+0x148>)
 8001d90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d94:	f7fe fd88 	bl	80008a8 <__aeabi_dcmpgt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d016      	beq.n	8001dcc <print_floating_point+0xa4>
    out_rev_(output, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <print_floating_point+0x84>
 8001da8:	4932      	ldr	r1, [pc, #200]	; (8001e74 <print_floating_point+0x14c>)
 8001daa:	e000      	b.n	8001dae <print_floating_point+0x86>
 8001dac:	4932      	ldr	r1, [pc, #200]	; (8001e78 <print_floating_point+0x150>)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <print_floating_point+0x94>
 8001db8:	2204      	movs	r2, #4
 8001dba:	e000      	b.n	8001dbe <print_floating_point+0x96>
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6978      	ldr	r0, [r7, #20]
 8001dc6:	f7ff fb9f 	bl	8001508 <out_rev_>
    return;
 8001dca:	e042      	b.n	8001e52 <print_floating_point+0x12a>
  }

  if (!prefer_exponential &&
 8001dcc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001dd0:	f083 0301 	eor.w	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d013      	beq.n	8001e02 <print_floating_point+0xda>
 8001dda:	a31f      	add	r3, pc, #124	; (adr r3, 8001e58 <print_floating_point+0x130>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001de4:	f7fe fd60 	bl	80008a8 <__aeabi_dcmpgt>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d130      	bne.n	8001e50 <print_floating_point+0x128>
      ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 8001dee:	a31c      	add	r3, pc, #112	; (adr r3, 8001e60 <print_floating_point+0x138>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001df8:	f7fe fd38 	bl	800086c <__aeabi_dcmplt>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d126      	bne.n	8001e50 <print_floating_point+0x128>
#endif
    return;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10d      	bne.n	8001e28 <print_floating_point+0x100>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001e0c:	2306      	movs	r3, #6
 8001e0e:	613b      	str	r3, [r7, #16]
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8001e10:	e00a      	b.n	8001e28 <print_floating_point+0x100>
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8001e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e18:	3340      	adds	r3, #64	; 0x40
 8001e1a:	443b      	add	r3, r7
 8001e1c:	2230      	movs	r2, #48	; 0x30
 8001e1e:	f803 2c24 	strb.w	r2, [r3, #-36]
    precision--;
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	613b      	str	r3, [r7, #16]
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8001e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e2a:	2b1f      	cmp	r3, #31
 8001e2c:	d802      	bhi.n	8001e34 <print_floating_point+0x10c>
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b11      	cmp	r3, #17
 8001e32:	d8ee      	bhi.n	8001e12 <print_floating_point+0xea>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
  if (prefer_exponential)
    print_exponential_number(output, value, precision, width, flags, buf, len);
  else
#endif
    print_decimal_number(output, value, precision, width, flags, buf, len);
 8001e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6939      	ldr	r1, [r7, #16]
 8001e44:	ed97 0b02 	vldr	d0, [r7, #8]
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	f7ff ff3d 	bl	8001cc8 <print_decimal_number>
 8001e4e:	e000      	b.n	8001e52 <print_floating_point+0x12a>
    return;
 8001e50:	bf00      	nop
}
 8001e52:	3740      	adds	r7, #64	; 0x40
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	41cdcd65 	.word	0x41cdcd65
 8001e60:	00000000 	.word	0x00000000
 8001e64:	c1cdcd65 	.word	0xc1cdcd65
 8001e68:	0800c298 	.word	0x0800c298
 8001e6c:	0800c29c 	.word	0x0800c29c
 8001e70:	7fefffff 	.word	0x7fefffff
 8001e74:	0800c2a4 	.word	0x0800c2a4
 8001e78:	0800c2ac 	.word	0x0800c2ac

08001e7c <parse_flags>:
#endif  // (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)

// Advances the format pointer past the flags, and returns the parsed flags
// due to the characters passed
static printf_flags_t parse_flags(const char** format)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  printf_flags_t flags = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  do {
    switch (**format) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3b20      	subs	r3, #32
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	d857      	bhi.n	8001f44 <parse_flags+0xc8>
 8001e94:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <parse_flags+0x20>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001f1d 	.word	0x08001f1d
 8001ea0:	08001f45 	.word	0x08001f45
 8001ea4:	08001f45 	.word	0x08001f45
 8001ea8:	08001f31 	.word	0x08001f31
 8001eac:	08001f45 	.word	0x08001f45
 8001eb0:	08001f45 	.word	0x08001f45
 8001eb4:	08001f45 	.word	0x08001f45
 8001eb8:	08001f45 	.word	0x08001f45
 8001ebc:	08001f45 	.word	0x08001f45
 8001ec0:	08001f45 	.word	0x08001f45
 8001ec4:	08001f45 	.word	0x08001f45
 8001ec8:	08001f09 	.word	0x08001f09
 8001ecc:	08001f45 	.word	0x08001f45
 8001ed0:	08001ef5 	.word	0x08001ef5
 8001ed4:	08001f45 	.word	0x08001f45
 8001ed8:	08001f45 	.word	0x08001f45
 8001edc:	08001ee1 	.word	0x08001ee1
      case '0': flags |= FLAGS_ZEROPAD; (*format)++; break;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	e029      	b.n	8001f48 <parse_flags+0xcc>
      case '-': flags |= FLAGS_LEFT;    (*format)++; break;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e01f      	b.n	8001f48 <parse_flags+0xcc>
      case '+': flags |= FLAGS_PLUS;    (*format)++; break;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e015      	b.n	8001f48 <parse_flags+0xcc>
      case ' ': flags |= FLAGS_SPACE;   (*format)++; break;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f043 0308 	orr.w	r3, r3, #8
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e00b      	b.n	8001f48 <parse_flags+0xcc>
      case '#': flags |= FLAGS_HASH;    (*format)++; break;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f043 0310 	orr.w	r3, r3, #16
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e001      	b.n	8001f48 <parse_flags+0xcc>
      default : return flags;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	e000      	b.n	8001f4a <parse_flags+0xce>
    switch (**format) {
 8001f48:	e79e      	b.n	8001e88 <parse_flags+0xc>
    }
  } while (true);
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop

08001f58 <format_string_loop>:

static inline void format_string_loop(output_gadget_t* output, const char* format, va_list args)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b096      	sub	sp, #88	; 0x58
 8001f5c:	af04      	add	r7, sp, #16
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
#else
#define ADVANCE_IN_FORMAT_STRING(cptr_) (cptr_)++
#endif


  while (*format)
 8001f64:	e3a1      	b.n	80026aa <format_string_loop+0x752>
  {
    if (*format != '%') {
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b25      	cmp	r3, #37	; 0x25
 8001f6c:	d009      	beq.n	8001f82 <format_string_loop+0x2a>
      // A regular content character
      putchar_via_gadget(output, *format);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	4619      	mov	r1, r3
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7ff f9da 	bl	800132e <putchar_via_gadget>
      format++;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
      continue;
 8001f80:	e393      	b.n	80026aa <format_string_loop+0x752>
    }
    // We're parsing a format specifier: %[flags][width][.precision][length]
    ADVANCE_IN_FORMAT_STRING(format);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3301      	adds	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8392 	beq.w	80026b6 <format_string_loop+0x75e>

    printf_flags_t flags = parse_flags(&format);
 8001f92:	f107 0308 	add.w	r3, r7, #8
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff70 	bl	8001e7c <parse_flags>
 8001f9c:	6478      	str	r0, [r7, #68]	; 0x44

    // evaluate width field
    printf_size_t width = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	643b      	str	r3, [r7, #64]	; 0x40
    if (is_digit_(*format)) {
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fa73 	bl	8001492 <is_digit_>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <format_string_loop+0x68>
      width = (printf_size_t) atou_(&format);
 8001fb2:	f107 0308 	add.w	r3, r7, #8
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fa82 	bl	80014c0 <atou_>
 8001fbc:	6438      	str	r0, [r7, #64]	; 0x40
 8001fbe:	e01d      	b.n	8001ffc <format_string_loop+0xa4>
    }
    else if (*format == '*') {
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8001fc6:	d119      	bne.n	8001ffc <format_string_loop+0xa4>
      const int w = va_arg(args, int);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	1d1a      	adds	r2, r3, #4
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
      if (w < 0) {
 8001fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da07      	bge.n	8001fe8 <format_string_loop+0x90>
        flags |= FLAGS_LEFT;    // reverse padding
 8001fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	647b      	str	r3, [r7, #68]	; 0x44
        width = (printf_size_t)-w;
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	425b      	negs	r3, r3
 8001fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8001fe6:	e001      	b.n	8001fec <format_string_loop+0x94>
      }
      else {
        width = (printf_size_t)w;
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	643b      	str	r3, [r7, #64]	; 0x40
      }
      ADVANCE_IN_FORMAT_STRING(format);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 835f 	beq.w	80026ba <format_string_loop+0x762>
    }

    // evaluate precision field
    printf_size_t precision = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (*format == '.') {
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b2e      	cmp	r3, #46	; 0x2e
 8002006:	d12f      	bne.n	8002068 <format_string_loop+0x110>
      flags |= FLAGS_PRECISION;
 8002008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800200e:	647b      	str	r3, [r7, #68]	; 0x44
      ADVANCE_IN_FORMAT_STRING(format);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	3301      	adds	r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 834f 	beq.w	80026be <format_string_loop+0x766>
      if (is_digit_(*format)) {
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fa34 	bl	8001492 <is_digit_>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <format_string_loop+0xe6>
        precision = (printf_size_t) atou_(&format);
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fa43 	bl	80014c0 <atou_>
 800203a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800203c:	e014      	b.n	8002068 <format_string_loop+0x110>
      }
      else if (*format == '*') {
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b2a      	cmp	r3, #42	; 0x2a
 8002044:	d110      	bne.n	8002068 <format_string_loop+0x110>
        const int precision_ = va_arg(args, int);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	1d1a      	adds	r2, r3, #4
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
        precision = precision_ > 0 ? (printf_size_t) precision_ : 0U;
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002056:	63fb      	str	r3, [r7, #60]	; 0x3c
        ADVANCE_IN_FORMAT_STRING(format);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	3301      	adds	r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 832d 	beq.w	80026c2 <format_string_loop+0x76a>
      }
    }

    // evaluate length field
    switch (*format) {
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	3b68      	subs	r3, #104	; 0x68
 800206e:	2b12      	cmp	r3, #18
 8002070:	f200 8087 	bhi.w	8002182 <format_string_loop+0x22a>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <format_string_loop+0x124>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	08002101 	.word	0x08002101
 8002080:	08002183 	.word	0x08002183
 8002084:	08002151 	.word	0x08002151
 8002088:	08002183 	.word	0x08002183
 800208c:	080020c9 	.word	0x080020c9
 8002090:	08002183 	.word	0x08002183
 8002094:	08002183 	.word	0x08002183
 8002098:	08002183 	.word	0x08002183
 800209c:	08002183 	.word	0x08002183
 80020a0:	08002183 	.word	0x08002183
 80020a4:	08002183 	.word	0x08002183
 80020a8:	08002183 	.word	0x08002183
 80020ac:	08002139 	.word	0x08002139
 80020b0:	08002183 	.word	0x08002183
 80020b4:	08002183 	.word	0x08002183
 80020b8:	08002183 	.word	0x08002183
 80020bc:	08002183 	.word	0x08002183
 80020c0:	08002183 	.word	0x08002183
 80020c4:	08002169 	.word	0x08002169
        }
        break;
      }
#endif
      case 'l' :
        flags |= FLAGS_LONG;
 80020c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ce:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 82f3 	beq.w	80026c6 <format_string_loop+0x76e>
        if (*format == 'l') {
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b6c      	cmp	r3, #108	; 0x6c
 80020e6:	d14e      	bne.n	8002186 <format_string_loop+0x22e>
          flags |= FLAGS_LONG_LONG;
 80020e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ee:	647b      	str	r3, [r7, #68]	; 0x44
          ADVANCE_IN_FORMAT_STRING(format);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d143      	bne.n	8002186 <format_string_loop+0x22e>
 80020fe:	e2e7      	b.n	80026d0 <format_string_loop+0x778>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
 8002100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002106:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	3301      	adds	r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 82d9 	beq.w	80026ca <format_string_loop+0x772>
        if (*format == 'h') {
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b68      	cmp	r3, #104	; 0x68
 800211e:	d134      	bne.n	800218a <format_string_loop+0x232>
          flags |= FLAGS_CHAR;
 8002120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002126:	647b      	str	r3, [r7, #68]	; 0x44
          ADVANCE_IN_FORMAT_STRING(format);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	3301      	adds	r3, #1
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d129      	bne.n	800218a <format_string_loop+0x232>
 8002136:	e2cb      	b.n	80026d0 <format_string_loop+0x778>
        }
        break;
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213e:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	3301      	adds	r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11f      	bne.n	800218e <format_string_loop+0x236>
 800214e:	e2bf      	b.n	80026d0 <format_string_loop+0x778>
        break;
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002156:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	3301      	adds	r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d115      	bne.n	8002192 <format_string_loop+0x23a>
 8002166:	e2b3      	b.n	80026d0 <format_string_loop+0x778>
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216e:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	3301      	adds	r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 82a7 	beq.w	80026ce <format_string_loop+0x776>
        break;
 8002180:	e008      	b.n	8002194 <format_string_loop+0x23c>
      default:
        break;
 8002182:	bf00      	nop
 8002184:	e006      	b.n	8002194 <format_string_loop+0x23c>
        break;
 8002186:	bf00      	nop
 8002188:	e004      	b.n	8002194 <format_string_loop+0x23c>
        break;
 800218a:	bf00      	nop
 800218c:	e002      	b.n	8002194 <format_string_loop+0x23c>
        break;
 800218e:	bf00      	nop
 8002190:	e000      	b.n	8002194 <format_string_loop+0x23c>
        break;
 8002192:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	3b25      	subs	r3, #37	; 0x25
 800219a:	2b53      	cmp	r3, #83	; 0x53
 800219c:	f200 827b 	bhi.w	8002696 <format_string_loop+0x73e>
 80021a0:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <format_string_loop+0x250>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	08002687 	.word	0x08002687
 80021ac:	08002697 	.word	0x08002697
 80021b0:	08002697 	.word	0x08002697
 80021b4:	08002697 	.word	0x08002697
 80021b8:	08002697 	.word	0x08002697
 80021bc:	08002697 	.word	0x08002697
 80021c0:	08002697 	.word	0x08002697
 80021c4:	08002697 	.word	0x08002697
 80021c8:	08002697 	.word	0x08002697
 80021cc:	08002697 	.word	0x08002697
 80021d0:	08002697 	.word	0x08002697
 80021d4:	08002697 	.word	0x08002697
 80021d8:	08002697 	.word	0x08002697
 80021dc:	08002697 	.word	0x08002697
 80021e0:	08002697 	.word	0x08002697
 80021e4:	08002697 	.word	0x08002697
 80021e8:	08002697 	.word	0x08002697
 80021ec:	08002697 	.word	0x08002697
 80021f0:	08002697 	.word	0x08002697
 80021f4:	08002697 	.word	0x08002697
 80021f8:	08002697 	.word	0x08002697
 80021fc:	08002697 	.word	0x08002697
 8002200:	08002697 	.word	0x08002697
 8002204:	08002697 	.word	0x08002697
 8002208:	08002697 	.word	0x08002697
 800220c:	08002697 	.word	0x08002697
 8002210:	08002697 	.word	0x08002697
 8002214:	08002697 	.word	0x08002697
 8002218:	08002697 	.word	0x08002697
 800221c:	08002697 	.word	0x08002697
 8002220:	08002697 	.word	0x08002697
 8002224:	08002697 	.word	0x08002697
 8002228:	08002697 	.word	0x08002697
 800222c:	080024cd 	.word	0x080024cd
 8002230:	08002697 	.word	0x08002697
 8002234:	08002697 	.word	0x08002697
 8002238:	08002697 	.word	0x08002697
 800223c:	08002697 	.word	0x08002697
 8002240:	08002697 	.word	0x08002697
 8002244:	08002697 	.word	0x08002697
 8002248:	08002697 	.word	0x08002697
 800224c:	08002697 	.word	0x08002697
 8002250:	08002697 	.word	0x08002697
 8002254:	08002697 	.word	0x08002697
 8002258:	08002697 	.word	0x08002697
 800225c:	08002697 	.word	0x08002697
 8002260:	08002697 	.word	0x08002697
 8002264:	08002697 	.word	0x08002697
 8002268:	08002697 	.word	0x08002697
 800226c:	08002697 	.word	0x08002697
 8002270:	08002697 	.word	0x08002697
 8002274:	080022f9 	.word	0x080022f9
 8002278:	08002697 	.word	0x08002697
 800227c:	08002697 	.word	0x08002697
 8002280:	08002697 	.word	0x08002697
 8002284:	08002697 	.word	0x08002697
 8002288:	08002697 	.word	0x08002697
 800228c:	08002697 	.word	0x08002697
 8002290:	08002697 	.word	0x08002697
 8002294:	08002697 	.word	0x08002697
 8002298:	08002697 	.word	0x08002697
 800229c:	080022f9 	.word	0x080022f9
 80022a0:	0800250f 	.word	0x0800250f
 80022a4:	080022f9 	.word	0x080022f9
 80022a8:	08002697 	.word	0x08002697
 80022ac:	080024cd 	.word	0x080024cd
 80022b0:	08002697 	.word	0x08002697
 80022b4:	08002697 	.word	0x08002697
 80022b8:	080022f9 	.word	0x080022f9
 80022bc:	08002697 	.word	0x08002697
 80022c0:	08002697 	.word	0x08002697
 80022c4:	08002697 	.word	0x08002697
 80022c8:	08002697 	.word	0x08002697
 80022cc:	08002697 	.word	0x08002697
 80022d0:	080022f9 	.word	0x080022f9
 80022d4:	08002635 	.word	0x08002635
 80022d8:	08002697 	.word	0x08002697
 80022dc:	08002697 	.word	0x08002697
 80022e0:	0800256d 	.word	0x0800256d
 80022e4:	08002697 	.word	0x08002697
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	08002697 	.word	0x08002697
 80022f0:	08002697 	.word	0x08002697
 80022f4:	080022f9 	.word	0x080022f9
      case 'x' :
      case 'X' :
      case 'o' :
      case 'b' : {

        if (*format == 'd' || *format == 'i') {
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b64      	cmp	r3, #100	; 0x64
 80022fe:	d003      	beq.n	8002308 <format_string_loop+0x3b0>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b69      	cmp	r3, #105	; 0x69
 8002306:	d103      	bne.n	8002310 <format_string_loop+0x3b8>
          flags |= FLAGS_SIGNED;
 8002308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230e:	647b      	str	r3, [r7, #68]	; 0x44
        }

        numeric_base_t base;
        if (*format == 'x' || *format == 'X') {
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b78      	cmp	r3, #120	; 0x78
 8002316:	d003      	beq.n	8002320 <format_string_loop+0x3c8>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b58      	cmp	r3, #88	; 0x58
 800231e:	d103      	bne.n	8002328 <format_string_loop+0x3d0>
          base = BASE_HEX;
 8002320:	2310      	movs	r3, #16
 8002322:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002326:	e016      	b.n	8002356 <format_string_loop+0x3fe>
        }
        else if (*format == 'o') {
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b6f      	cmp	r3, #111	; 0x6f
 800232e:	d103      	bne.n	8002338 <format_string_loop+0x3e0>
          base =  BASE_OCTAL;
 8002330:	2308      	movs	r3, #8
 8002332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002336:	e00e      	b.n	8002356 <format_string_loop+0x3fe>
        }
        else if (*format == 'b') {
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b62      	cmp	r3, #98	; 0x62
 800233e:	d103      	bne.n	8002348 <format_string_loop+0x3f0>
          base =  BASE_BINARY;
 8002340:	2302      	movs	r3, #2
 8002342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002346:	e006      	b.n	8002356 <format_string_loop+0x3fe>
        }
        else {
          base = BASE_DECIMAL;
 8002348:	230a      	movs	r3, #10
 800234a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          flags &= ~FLAGS_HASH; // decimal integers have no alternative presentation
 800234e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002350:	f023 0310 	bic.w	r3, r3, #16
 8002354:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if (*format == 'X') {
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b58      	cmp	r3, #88	; 0x58
 800235c:	d103      	bne.n	8002366 <format_string_loop+0x40e>
          flags |= FLAGS_UPPERCASE;
 800235e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002360:	f043 0320 	orr.w	r3, r3, #32
 8002364:	647b      	str	r3, [r7, #68]	; 0x44
        }

        format++;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3301      	adds	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800236c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <format_string_loop+0x426>
          flags &= ~FLAGS_ZEROPAD;
 8002376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if (flags & FLAGS_SIGNED) {
 800237e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d056      	beq.n	8002436 <format_string_loop+0x4de>
          // A signed specifier: d, i or possibly I + bit size if enabled

          if (flags & FLAGS_LONG_LONG) {
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 818b 	bne.w	80026aa <format_string_loop+0x752>
#if PRINTF_SUPPORT_LONG_LONG
            const long long value = va_arg(args, long long);
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01a      	beq.n	80023d4 <format_string_loop+0x47c>
            const long value = va_arg(args, long);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	1d1a      	adds	r2, r3, #4
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	617b      	str	r3, [r7, #20]
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bfb8      	it	lt
 80023ae:	425b      	neglt	r3, r3
 80023b0:	4618      	mov	r0, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	0fdb      	lsrs	r3, r3, #31
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 80023bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	460b      	mov	r3, r1
 80023ca:	4601      	mov	r1, r0
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7ff f9d3 	bl	8001778 <print_integer>
 80023d2:	e16a      	b.n	80026aa <format_string_loop+0x752>
            // We never try to interpret the argument as something potentially-smaller than int,
            // due to integer promotion rules: Even if the user passed a short int, short unsigned
            // etc. - these will come in after promotion, as int's (or unsigned for the case of
            // short unsigned when it has the same size as int)
            const int value =
              (flags & FLAGS_CHAR) ? (signed char) va_arg(args, int) :
 80023d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <format_string_loop+0x492>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	1d1a      	adds	r2, r3, #4
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b25b      	sxtb	r3, r3
 80023e8:	e00e      	b.n	8002408 <format_string_loop+0x4b0>
              (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
 80023ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <format_string_loop+0x4a8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	1d1a      	adds	r2, r3, #4
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	e003      	b.n	8002408 <format_string_loop+0x4b0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
            const int value =
 8002408:	61bb      	str	r3, [r7, #24]
              va_arg(args, int);
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b00      	cmp	r3, #0
 800240e:	bfb8      	it	lt
 8002410:	425b      	neglt	r3, r3
 8002412:	4618      	mov	r0, r3
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	0fdb      	lsrs	r3, r3, #31
 8002418:	b2da      	uxtb	r2, r3
 800241a:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 800241e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	460b      	mov	r3, r1
 800242c:	4601      	mov	r1, r0
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f7ff f9a2 	bl	8001778 <print_integer>
 8002434:	e139      	b.n	80026aa <format_string_loop+0x752>
          }
        }
        else {
          // An unsigned specifier: u, x, X, o, b

          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	f023 030c 	bic.w	r3, r3, #12
 800243c:	647b      	str	r3, [r7, #68]	; 0x44

          if (flags & FLAGS_LONG_LONG) {
 800243e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 8130 	bne.w	80026aa <format_string_loop+0x752>
#if PRINTF_SUPPORT_LONG_LONG
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long long), false, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 800244a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800244c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002450:	2b00      	cmp	r3, #0
 8002452:	d011      	beq.n	8002478 <format_string_loop+0x520>
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long), false, base, precision, width, flags);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1d1a      	adds	r2, r3, #4
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002462:	9302      	str	r3, [sp, #8]
 8002464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	4613      	mov	r3, r2
 800246e:	2200      	movs	r2, #0
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff f981 	bl	8001778 <print_integer>
 8002476:	e118      	b.n	80026aa <format_string_loop+0x752>
          }
          else {
            const unsigned int value =
              (flags & FLAGS_CHAR) ? (unsigned char)va_arg(args, unsigned int) :
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <format_string_loop+0x536>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	1d1a      	adds	r2, r3, #4
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	e00e      	b.n	80024ac <format_string_loop+0x554>
              (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
 800248e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <format_string_loop+0x54c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	1d1a      	adds	r2, r3, #4
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	e003      	b.n	80024ac <format_string_loop+0x554>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
            const unsigned int value =
 80024ac:	61fb      	str	r3, [r7, #28]
              va_arg(args, unsigned int);
            print_integer(output, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 80024ae:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80024b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b4:	9302      	str	r3, [sp, #8]
 80024b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	2200      	movs	r2, #0
 80024c2:	69f9      	ldr	r1, [r7, #28]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff f957 	bl	8001778 <print_integer>
          }
        }
        break;
 80024ca:	e0ee      	b.n	80026aa <format_string_loop+0x752>
      }
#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b46      	cmp	r3, #70	; 0x46
 80024d2:	d103      	bne.n	80024dc <format_string_loop+0x584>
 80024d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d6:	f043 0320 	orr.w	r3, r3, #32
 80024da:	647b      	str	r3, [r7, #68]	; 0x44
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3307      	adds	r3, #7
 80024e0:	f023 0307 	bic.w	r3, r3, #7
 80024e4:	f103 0208 	add.w	r2, r3, #8
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	ed93 7b00 	vldr	d7, [r3]
 80024ee:	2300      	movs	r3, #0
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024f8:	eeb0 0a47 	vmov.f32	s0, s14
 80024fc:	eef0 0a67 	vmov.f32	s1, s15
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f7ff fc11 	bl	8001d28 <print_floating_point>
        format++;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3301      	adds	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
        break;
 800250c:	e0cd      	b.n	80026aa <format_string_loop+0x752>
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'c' : {
        printf_size_t l = 1U;
 800250e:	2301      	movs	r3, #1
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <format_string_loop+0x5da>
          while (l++ < width) {
 800251c:	e003      	b.n	8002526 <format_string_loop+0x5ce>
            putchar_via_gadget(output, ' ');
 800251e:	2120      	movs	r1, #32
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f7fe ff04 	bl	800132e <putchar_via_gadget>
          while (l++ < width) {
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	637a      	str	r2, [r7, #52]	; 0x34
 800252c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800252e:	429a      	cmp	r2, r3
 8002530:	d8f5      	bhi.n	800251e <format_string_loop+0x5c6>
          }
        }
        // char output
        putchar_via_gadget(output, (char) va_arg(args, int) );
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	1d1a      	adds	r2, r3, #4
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4619      	mov	r1, r3
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f7fe fef5 	bl	800132e <putchar_via_gadget>
        // post padding
        if (flags & FLAGS_LEFT) {
 8002544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <format_string_loop+0x60c>
          while (l++ < width) {
 800254e:	e003      	b.n	8002558 <format_string_loop+0x600>
            putchar_via_gadget(output, ' ');
 8002550:	2120      	movs	r1, #32
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7fe feeb 	bl	800132e <putchar_via_gadget>
          while (l++ < width) {
 8002558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	637a      	str	r2, [r7, #52]	; 0x34
 800255e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002560:	429a      	cmp	r2, r3
 8002562:	d8f5      	bhi.n	8002550 <format_string_loop+0x5f8>
          }
        }
        format++;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	3301      	adds	r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
        break;
 800256a:	e09e      	b.n	80026aa <format_string_loop+0x752>
      }

      case 's' : {
        const char* p = va_arg(args, char*);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	1d1a      	adds	r2, r3, #4
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
        if (p == NULL) {
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <format_string_loop+0x636>
          out_rev_(output, ")llun(", 6, width, flags);
 800257c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002582:	2206      	movs	r2, #6
 8002584:	4954      	ldr	r1, [pc, #336]	; (80026d8 <format_string_loop+0x780>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f7fe ffbe 	bl	8001508 <out_rev_>
 800258c:	e04e      	b.n	800262c <format_string_loop+0x6d4>
        }
        else {
          printf_size_t l = strnlen_s_(p, precision ? precision : PRINTF_MAX_POSSIBLE_BUFFER_SIZE);
 800258e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <format_string_loop+0x640>
 8002594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002596:	e001      	b.n	800259c <format_string_loop+0x644>
 8002598:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800259c:	4619      	mov	r1, r3
 800259e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025a0:	f7fe ff5a 	bl	8001458 <strnlen_s_>
 80025a4:	62f8      	str	r0, [r7, #44]	; 0x2c
          // pre padding
          if (flags & FLAGS_PRECISION) {
 80025a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <format_string_loop+0x664>
            l = (l < precision ? l : precision);
 80025b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf28      	it	cs
 80025b8:	4613      	movcs	r3, r2
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
          }
          if (!(flags & FLAGS_LEFT)) {
 80025bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d116      	bne.n	80025f4 <format_string_loop+0x69c>
            while (l++ < width) {
 80025c6:	e003      	b.n	80025d0 <format_string_loop+0x678>
              putchar_via_gadget(output, ' ');
 80025c8:	2120      	movs	r1, #32
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f7fe feaf 	bl	800132e <putchar_via_gadget>
            while (l++ < width) {
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f5      	bhi.n	80025c8 <format_string_loop+0x670>
            }
          }
          // string output
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 80025dc:	e00a      	b.n	80025f4 <format_string_loop+0x69c>
            putchar_via_gadget(output, *(p++));
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	633a      	str	r2, [r7, #48]	; 0x30
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	4619      	mov	r1, r3
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7fe fea0 	bl	800132e <putchar_via_gadget>
            --precision;
 80025ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f0:	3b01      	subs	r3, #1
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <format_string_loop+0x6b4>
 80025fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0eb      	beq.n	80025de <format_string_loop+0x686>
 8002606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e8      	bne.n	80025de <format_string_loop+0x686>
          }
          // post padding
          if (flags & FLAGS_LEFT) {
 800260c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <format_string_loop+0x6d4>
            while (l++ < width) {
 8002616:	e003      	b.n	8002620 <format_string_loop+0x6c8>
              putchar_via_gadget(output, ' ');
 8002618:	2120      	movs	r1, #32
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f7fe fe87 	bl	800132e <putchar_via_gadget>
            while (l++ < width) {
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002626:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002628:	429a      	cmp	r2, r3
 800262a:	d8f5      	bhi.n	8002618 <format_string_loop+0x6c0>
            }
          }
        }
        format++;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	3301      	adds	r3, #1
 8002630:	60bb      	str	r3, [r7, #8]
        break;
 8002632:	e03a      	b.n	80026aa <format_string_loop+0x752>
      }

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
 8002634:	230a      	movs	r3, #10
 8002636:	643b      	str	r3, [r7, #64]	; 0x40
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 8002638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	647b      	str	r3, [r7, #68]	; 0x44
        uintptr_t value = (uintptr_t)va_arg(args, void*);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	1d1a      	adds	r2, r3, #4
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	623b      	str	r3, [r7, #32]
        (value == (uintptr_t) NULL) ?
          out_rev_(output, ")lin(", 5, width, flags) :
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d108      	bne.n	8002666 <format_string_loop+0x70e>
 8002654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800265a:	2205      	movs	r2, #5
 800265c:	491f      	ldr	r1, [pc, #124]	; (80026dc <format_string_loop+0x784>)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7fe ff52 	bl	8001508 <out_rev_>
 8002664:	e00b      	b.n	800267e <format_string_loop+0x726>
          print_integer(output, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8002666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002668:	9302      	str	r3, [sp, #8]
 800266a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2310      	movs	r3, #16
 8002674:	2200      	movs	r2, #0
 8002676:	6a39      	ldr	r1, [r7, #32]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff f87d 	bl	8001778 <print_integer>
        format++;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3301      	adds	r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
        break;
 8002684:	e011      	b.n	80026aa <format_string_loop+0x752>
      }

      case '%' :
        putchar_via_gadget(output, '%');
 8002686:	2125      	movs	r1, #37	; 0x25
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7fe fe50 	bl	800132e <putchar_via_gadget>
        format++;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3301      	adds	r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
        break;
 8002694:	e009      	b.n	80026aa <format_string_loop+0x752>
        break;
      }
#endif // PRINTF_SUPPORT_WRITEBACK_SPECIFIER

      default :
        putchar_via_gadget(output, *format);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7fe fe46 	bl	800132e <putchar_via_gadget>
        format++;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3301      	adds	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
        break;
 80026a8:	bf00      	nop
  while (*format)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f47f ac59 	bne.w	8001f66 <format_string_loop+0xe>
 80026b4:	e00c      	b.n	80026d0 <format_string_loop+0x778>
    ADVANCE_IN_FORMAT_STRING(format);
 80026b6:	bf00      	nop
 80026b8:	e00a      	b.n	80026d0 <format_string_loop+0x778>
      ADVANCE_IN_FORMAT_STRING(format);
 80026ba:	bf00      	nop
 80026bc:	e008      	b.n	80026d0 <format_string_loop+0x778>
      ADVANCE_IN_FORMAT_STRING(format);
 80026be:	bf00      	nop
 80026c0:	e006      	b.n	80026d0 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80026c2:	bf00      	nop
 80026c4:	e004      	b.n	80026d0 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80026c6:	bf00      	nop
 80026c8:	e002      	b.n	80026d0 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80026ca:	bf00      	nop
 80026cc:	e000      	b.n	80026d0 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80026ce:	bf00      	nop
    }
  }
}
 80026d0:	3748      	adds	r7, #72	; 0x48
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800c2b0 	.word	0x0800c2b0
 80026dc:	0800c2b8 	.word	0x0800c2b8

080026e0 <vsnprintf_impl>:

// internal vsnprintf - used for implementing _all library functions
static int vsnprintf_impl(output_gadget_t* output, const char* format, va_list args)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  // Note: The library only calls vsnprintf_impl() with output->pos being 0. However, it is
  // possible to call this function with a non-zero pos value for some "remedial printing".
  format_string_loop(output, format, args);
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff fc31 	bl	8001f58 <format_string_loop>

  // termination
  append_termination_with_gadget(output);
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7fe fe41 	bl	800137e <append_termination_with_gadget>

  // return written chars without terminating \0
  return (int)output->pos;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	68db      	ldr	r3, [r3, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <vsnprintf_>:
  output_gadget_t gadget = extern_putchar_gadget();
  return vsnprintf_impl(&gadget, format, arg);
}

int vsnprintf_(char* s, size_t n, const char* format, va_list arg)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  output_gadget_t gadget = buffer_gadget(s, n);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fe74 	bl	800140c <buffer_gadget>
  return vsnprintf_impl(&gadget, format, arg);
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ffd7 	bl	80026e0 <vsnprintf_impl>
 8002732:	4603      	mov	r3, r0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3728      	adds	r7, #40	; 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <vsprintf_>:

int vsprintf_(char* s, const char* format, va_list arg)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  return vsnprintf_(s, PRINTF_MAX_POSSIBLE_BUFFER_SIZE, format, arg);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff ffd9 	bl	8002708 <vsnprintf_>
 8002756:	4603      	mov	r3, r0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <sprintf_>:
  va_end(args);
  return ret;
}

int sprintf_(char* s, const char* format, ...)
{
 8002760:	b40e      	push	{r1, r2, r3}
 8002762:	b580      	push	{r7, lr}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 800276a:	f107 0320 	add.w	r3, r7, #32
 800276e:	60bb      	str	r3, [r7, #8]
  const int ret = vsprintf_(s, format, args);
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	69f9      	ldr	r1, [r7, #28]
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ffe1 	bl	800273c <vsprintf_>
 800277a:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return ret;
 800277c:	68fb      	ldr	r3, [r7, #12]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002788:	b003      	add	sp, #12
 800278a:	4770      	bx	lr

0800278c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_MspInit+0x4c>)
 8002794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002796:	4a10      	ldr	r2, [pc, #64]	; (80027d8 <HAL_MspInit+0x4c>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6613      	str	r3, [r2, #96]	; 0x60
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_MspInit+0x4c>)
 80027a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_MspInit+0x4c>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_MspInit+0x4c>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6593      	str	r3, [r2, #88]	; 0x58
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_MspInit+0x4c>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	210f      	movs	r1, #15
 80027c6:	f06f 0001 	mvn.w	r0, #1
 80027ca:	f000 fec1 	bl	8003550 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000

080027dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08c      	sub	sp, #48	; 0x30
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80027ea:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <HAL_InitTick+0xc8>)
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	4a2d      	ldr	r2, [pc, #180]	; (80028a4 <HAL_InitTick+0xc8>)
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f4:	6613      	str	r3, [r2, #96]	; 0x60
 80027f6:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <HAL_InitTick+0xc8>)
 80027f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002802:	f107 020c 	add.w	r2, r7, #12
 8002806:	f107 0310 	add.w	r3, r7, #16
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f002 f90d 	bl	8004a2c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002812:	f002 f8f5 	bl	8004a00 <HAL_RCC_GetPCLK2Freq>
 8002816:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	4a23      	ldr	r2, [pc, #140]	; (80028a8 <HAL_InitTick+0xcc>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	0c9b      	lsrs	r3, r3, #18
 8002822:	3b01      	subs	r3, #1
 8002824:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002826:	4b21      	ldr	r3, [pc, #132]	; (80028ac <HAL_InitTick+0xd0>)
 8002828:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <HAL_InitTick+0xd4>)
 800282a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800282c:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <HAL_InitTick+0xd0>)
 800282e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002832:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8002834:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <HAL_InitTick+0xd0>)
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_InitTick+0xd0>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_InitTick+0xd0>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_InitTick+0xd0>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 800284c:	4817      	ldr	r0, [pc, #92]	; (80028ac <HAL_InitTick+0xd0>)
 800284e:	f002 fc77 	bl	8005140 <HAL_TIM_Base_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11b      	bne.n	8002898 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8002860:	4812      	ldr	r0, [pc, #72]	; (80028ac <HAL_InitTick+0xd0>)
 8002862:	f002 fccf 	bl	8005204 <HAL_TIM_Base_Start_IT>
 8002866:	4603      	mov	r3, r0
 8002868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800286c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002870:	2b00      	cmp	r3, #0
 8002872:	d111      	bne.n	8002898 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002874:	2019      	movs	r0, #25
 8002876:	f000 fe87 	bl	8003588 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b0f      	cmp	r3, #15
 800287e:	d808      	bhi.n	8002892 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002880:	2200      	movs	r2, #0
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	2019      	movs	r0, #25
 8002886:	f000 fe63 	bl	8003550 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800288a:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <HAL_InitTick+0xd8>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	e002      	b.n	8002898 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800289c:	4618      	mov	r0, r3
 800289e:	3730      	adds	r7, #48	; 0x30
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	431bde83 	.word	0x431bde83
 80028ac:	200000b0 	.word	0x200000b0
 80028b0:	40014400 	.word	0x40014400
 80028b4:	2000000c 	.word	0x2000000c

080028b8 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d101      	bne.n	80028d0 <LL_USART_IsActiveFlag_IDLE+0x18>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <LL_USART_IsActiveFlag_IDLE+0x1a>
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2210      	movs	r2, #16
 80028ea:	621a      	str	r2, [r3, #32]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b10      	cmp	r3, #16
 800290a:	d101      	bne.n	8002910 <LL_USART_IsEnabledIT_IDLE+0x18>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <LL_USART_IsEnabledIT_IDLE+0x1a>
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002922:	e7fe      	b.n	8002922 <NMI_Handler+0x4>

08002924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002928:	e7fe      	b.n	8002928 <HardFault_Handler+0x4>

0800292a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800292e:	e7fe      	b.n	800292e <MemManage_Handler+0x4>

08002930 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002934:	e7fe      	b.n	8002934 <BusFault_Handler+0x4>

08002936 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800293a:	e7fe      	b.n	800293a <UsageFault_Handler+0x4>

0800293c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002950:	4806      	ldr	r0, [pc, #24]	; (800296c <DMA1_Channel2_IRQHandler+0x20>)
 8002952:	f000 ffbe 	bl	80038d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
  	// Stop DMA
  	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8002956:	2100      	movs	r1, #0
 8002958:	4805      	ldr	r0, [pc, #20]	; (8002970 <DMA1_Channel2_IRQHandler+0x24>)
 800295a:	f002 fef7 	bl	800574c <HAL_TIM_PWM_Stop_DMA>

  	// Give Back Semaphore
  	osSemaphoreRelease(sem_printPermissionHandle);
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <DMA1_Channel2_IRQHandler+0x28>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f006 f800 	bl	8008968 <osSemaphoreRelease>

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000148 	.word	0x20000148
 8002970:	200000fc 	.word	0x200000fc
 8002974:	200000ac 	.word	0x200000ac

08002978 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <DMA1_Channel5_IRQHandler+0x10>)
 800297e:	f000 ffa8 	bl	80038d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000298 	.word	0x20000298

0800298c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002990:	4803      	ldr	r0, [pc, #12]	; (80029a0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002992:	f002 ffc3 	bl	800591c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002996:	4803      	ldr	r0, [pc, #12]	; (80029a4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002998:	f002 ffc0 	bl	800591c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200000fc 	.word	0x200000fc
 80029a4:	200000b0 	.word	0x200000b0

080029a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <TIM1_CC_IRQHandler+0x10>)
 80029ae:	f002 ffb5 	bl	800591c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200000fc 	.word	0x200000fc

080029bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029c2:	4816      	ldr	r0, [pc, #88]	; (8002a1c <USART1_IRQHandler+0x60>)
 80029c4:	f004 f8ec 	bl	8006ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	  if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1))
 80029c8:	4815      	ldr	r0, [pc, #84]	; (8002a20 <USART1_IRQHandler+0x64>)
 80029ca:	f7ff ff95 	bl	80028f8 <LL_USART_IsEnabledIT_IDLE>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01e      	beq.n	8002a12 <USART1_IRQHandler+0x56>
 80029d4:	4812      	ldr	r0, [pc, #72]	; (8002a20 <USART1_IRQHandler+0x64>)
 80029d6:	f7ff ff6f 	bl	80028b8 <LL_USART_IsActiveFlag_IDLE>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d018      	beq.n	8002a12 <USART1_IRQHandler+0x56>
	  {
		  LL_USART_ClearFlag_IDLE(USART1);        /* Clear IDLE line flag */
 80029e0:	480f      	ldr	r0, [pc, #60]	; (8002a20 <USART1_IRQHandler+0x64>)
 80029e2:	f7ff ff7c 	bl	80028de <LL_USART_ClearFlag_IDLE>
		  // Give a task notification to the UART2 Task
		  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
		  xTaskNotifyFromISR(xUartTaskHandle, UART1_IDLE_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <USART1_IRQHandler+0x68>)
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2300      	movs	r3, #0
 80029f4:	2201      	movs	r2, #1
 80029f6:	2101      	movs	r1, #1
 80029f8:	f008 f994 	bl	800ad24 <xTaskGenericNotifyFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <USART1_IRQHandler+0x56>
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <USART1_IRQHandler+0x6c>)
 8002a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	f3bf 8f4f 	dsb	sy
 8002a0e:	f3bf 8f6f 	isb	sy
	  }
  /* USER CODE END USART1_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000190 	.word	0x20000190
 8002a20:	40013800 	.word	0x40013800
 8002a24:	200022e4 	.word	0x200022e4
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <USART2_IRQHandler+0x10>)
 8002a32:	f004 f8b5 	bl	8006ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000214 	.word	0x20000214

08002a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <SystemInit+0x20>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <SystemInit+0x20>)
 8002a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b096      	sub	sp, #88	; 0x58
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
 8002a84:	611a      	str	r2, [r3, #16]
 8002a86:	615a      	str	r2, [r3, #20]
 8002a88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	222c      	movs	r2, #44	; 0x2c
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f009 faf7 	bl	800c084 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002a98:	4a38      	ldr	r2, [pc, #224]	; (8002b7c <MX_TIM1_Init+0x118>)
 8002a9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa2:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002aa8:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002aaa:	2264      	movs	r2, #100	; 0x64
 8002aac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aae:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ab4:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ac0:	482d      	ldr	r0, [pc, #180]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002ac2:	f002 fbf3 	bl	80052ac <HAL_TIM_PWM_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002acc:	f7fe fbfc 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002adc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4825      	ldr	r0, [pc, #148]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002ae4:	f003 fd64 	bl	80065b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002aee:	f7fe fbeb 	bl	80012c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002af2:	2360      	movs	r3, #96	; 0x60
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8002af6:	2364      	movs	r3, #100	; 0x64
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002afa:	2300      	movs	r3, #0
 8002afc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002afe:	2300      	movs	r3, #0
 8002b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002b02:	2304      	movs	r3, #4
 8002b04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b12:	2200      	movs	r2, #0
 8002b14:	4619      	mov	r1, r3
 8002b16:	4818      	ldr	r0, [pc, #96]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002b18:	f003 f820 	bl	8005b5c <HAL_TIM_PWM_ConfigChannel>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002b22:	f7fe fbd1 	bl	80012c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4807      	ldr	r0, [pc, #28]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002b5c:	f003 fd8e 	bl	800667c <HAL_TIMEx_ConfigBreakDeadTime>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002b66:	f7fe fbaf 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b6a:	4803      	ldr	r0, [pc, #12]	; (8002b78 <MX_TIM1_Init+0x114>)
 8002b6c:	f000 f864 	bl	8002c38 <HAL_TIM_MspPostInit>

}
 8002b70:	bf00      	nop
 8002b72:	3758      	adds	r7, #88	; 0x58
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	200000fc 	.word	0x200000fc
 8002b7c:	40012c00 	.word	0x40012c00

08002b80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a26      	ldr	r2, [pc, #152]	; (8002c28 <HAL_TIM_PWM_MspInit+0xa8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d146      	bne.n	8002c20 <HAL_TIM_PWM_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b92:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <HAL_TIM_PWM_MspInit+0xac>)
 8002b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b96:	4a25      	ldr	r2, [pc, #148]	; (8002c2c <HAL_TIM_PWM_MspInit+0xac>)
 8002b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b9e:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <HAL_TIM_PWM_MspInit+0xac>)
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002bac:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <HAL_TIM_PWM_MspInit+0xb4>)
 8002bae:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002bb2:	2207      	movs	r2, #7
 8002bb4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002bb8:	2210      	movs	r2, #16
 8002bba:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bbc:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bce:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002bdc:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002bde:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002be2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002be4:	4812      	ldr	r0, [pc, #72]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002be6:	f000 fcdd 	bl	80035a4 <HAL_DMA_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8002bf0:	f7fe fb6a 	bl	80012c8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
 8002bfa:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <HAL_TIM_PWM_MspInit+0xb0>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	210f      	movs	r1, #15
 8002c04:	2019      	movs	r0, #25
 8002c06:	f000 fca3 	bl	8003550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c0a:	2019      	movs	r0, #25
 8002c0c:	f000 fcbc 	bl	8003588 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	2105      	movs	r1, #5
 8002c14:	201b      	movs	r0, #27
 8002c16:	f000 fc9b 	bl	8003550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002c1a:	201b      	movs	r0, #27
 8002c1c:	f000 fcb4 	bl	8003588 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	20000148 	.word	0x20000148
 8002c34:	4002001c 	.word	0x4002001c

08002c38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <HAL_TIM_MspPostInit+0x68>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d11d      	bne.n	8002c96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	4a11      	ldr	r2, [pc, #68]	; (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c92:	f000 fefd 	bl	8003a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c96:	bf00      	nop
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cae:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <MX_USART1_UART_Init+0x5c>)
 8002cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cce:	220c      	movs	r2, #12
 8002cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cec:	f003 fd5c 	bl	80067a8 <HAL_UART_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002cf6:	f7fe fae7 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000190 	.word	0x20000190
 8002d04:	40013800 	.word	0x40013800

08002d08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <MX_USART2_UART_Init+0x5c>)
 8002d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d2e:	220c      	movs	r2, #12
 8002d30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d4a:	4805      	ldr	r0, [pc, #20]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d4c:	f003 fd2c 	bl	80067a8 <HAL_UART_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002d56:	f7fe fab7 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000214 	.word	0x20000214
 8002d64:	40004400 	.word	0x40004400

08002d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b0a0      	sub	sp, #128	; 0x80
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d80:	f107 0318 	add.w	r3, r7, #24
 8002d84:	2254      	movs	r2, #84	; 0x54
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f009 f97b 	bl	800c084 <memset>
  if(uartHandle->Instance==USART1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a63      	ldr	r2, [pc, #396]	; (8002f20 <HAL_UART_MspInit+0x1b8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d169      	bne.n	8002e6c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da0:	f107 0318 	add.w	r3, r7, #24
 8002da4:	4618      	mov	r0, r3
 8002da6:	f001 fed3 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002db0:	f7fe fa8a 	bl	80012c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002db4:	4b5b      	ldr	r3, [pc, #364]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db8:	4a5a      	ldr	r2, [pc, #360]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8002dc0:	4b58      	ldr	r3, [pc, #352]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dcc:	4b55      	ldr	r3, [pc, #340]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd0:	4a54      	ldr	r2, [pc, #336]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dd8:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002de4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002de8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df2:	2303      	movs	r3, #3
 8002df4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002df6:	2307      	movs	r3, #7
 8002df8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e04:	f000 fe44 	bl	8003a90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002e08:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e0a:	4a48      	ldr	r2, [pc, #288]	; (8002f2c <HAL_UART_MspInit+0x1c4>)
 8002e0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002e0e:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e10:	2202      	movs	r2, #2
 8002e12:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e14:	4b44      	ldr	r3, [pc, #272]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1a:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e20:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e26:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e2c:	4b3e      	ldr	r3, [pc, #248]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e32:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e34:	2220      	movs	r2, #32
 8002e36:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e38:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e3e:	483a      	ldr	r0, [pc, #232]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e40:	f000 fbb0 	bl	80035a4 <HAL_DMA_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002e4a:	f7fe fa3d 	bl	80012c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a35      	ldr	r2, [pc, #212]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e52:	671a      	str	r2, [r3, #112]	; 0x70
 8002e54:	4a34      	ldr	r2, [pc, #208]	; (8002f28 <HAL_UART_MspInit+0x1c0>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2105      	movs	r1, #5
 8002e5e:	2025      	movs	r0, #37	; 0x25
 8002e60:	f000 fb76 	bl	8003550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e64:	2025      	movs	r0, #37	; 0x25
 8002e66:	f000 fb8f 	bl	8003588 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e6a:	e055      	b.n	8002f18 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2f      	ldr	r2, [pc, #188]	; (8002f30 <HAL_UART_MspInit+0x1c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d150      	bne.n	8002f18 <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e76:	2302      	movs	r3, #2
 8002e78:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e7e:	f107 0318 	add.w	r3, r7, #24
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 fe64 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8002e8e:	f7fe fa1b 	bl	80012c8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	4a23      	ldr	r2, [pc, #140]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e9e:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_UART_MspInit+0x1bc>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ed2:	2307      	movs	r3, #7
 8002ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002eda:	4619      	mov	r1, r3
 8002edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ee0:	f000 fdd6 	bl	8003a90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002efa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002efe:	4619      	mov	r1, r3
 8002f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f04:	f000 fdc4 	bl	8003a90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2105      	movs	r1, #5
 8002f0c:	2026      	movs	r0, #38	; 0x26
 8002f0e:	f000 fb1f 	bl	8003550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f12:	2026      	movs	r0, #38	; 0x26
 8002f14:	f000 fb38 	bl	8003588 <HAL_NVIC_EnableIRQ>
}
 8002f18:	bf00      	nop
 8002f1a:	3780      	adds	r7, #128	; 0x80
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40013800 	.word	0x40013800
 8002f24:	40021000 	.word	0x40021000
 8002f28:	20000298 	.word	0x20000298
 8002f2c:	40020058 	.word	0x40020058
 8002f30:	40004400 	.word	0x40004400

08002f34 <LL_USART_EnableIT_IDLE>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f043 0310 	orr.w	r3, r3, #16
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	61ba      	str	r2, [r7, #24]
 8002f56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	6979      	ldr	r1, [r7, #20]
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	613b      	str	r3, [r7, #16]
   return(result);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e9      	bne.n	8002f3c <LL_USART_EnableIT_IDLE+0x8>
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	3724      	adds	r7, #36	; 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <StartWifiClick>:
// Task handles
TaskHandle_t xUartTaskHandle = NULL;

char at_cmd_buffer[AT_CMD_BUFFER_SIZE] = {0};

void StartWifiClick(void *argument) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	6078      	str	r0, [r7, #4]
	// Create tasks
	//xTaskCreate(uart2Task, "Uart1Task", 128, NULL, osPriorityLow, NULL);
	xTaskCreate(UartHandlerTask, xUartHandlerTaskName, 256, &argument, osPriorityNormal1, &xUartTaskHandle);
 8002f80:	4b2a      	ldr	r3, [pc, #168]	; (800302c <StartWifiClick+0xb4>)
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	4a2a      	ldr	r2, [pc, #168]	; (8003030 <StartWifiClick+0xb8>)
 8002f88:	9201      	str	r2, [sp, #4]
 8002f8a:	2219      	movs	r2, #25
 8002f8c:	9200      	str	r2, [sp, #0]
 8002f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f92:	4828      	ldr	r0, [pc, #160]	; (8003034 <StartWifiClick+0xbc>)
 8002f94:	f006 fe7f 	bl	8009c96 <xTaskCreate>

	// Activate UART interrupts and reception
	LL_USART_EnableIT_IDLE(USART1); // Enable idle line detection (interrupt) for uart1
 8002f98:	4827      	ldr	r0, [pc, #156]	; (8003038 <StartWifiClick+0xc0>)
 8002f9a:	f7ff ffcb 	bl	8002f34 <LL_USART_EnableIT_IDLE>
	HAL_UART_Receive_DMA(&huart1, uart1Buffer, BUFFER_SIZE);
 8002f9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fa2:	4926      	ldr	r1, [pc, #152]	; (800303c <StartWifiClick+0xc4>)
 8002fa4:	4826      	ldr	r0, [pc, #152]	; (8003040 <StartWifiClick+0xc8>)
 8002fa6:	f003 fda5 	bl	8006af4 <HAL_UART_Receive_DMA>

	// Configure Station Mode
	at_set_command(at_cmd_buffer, SendATCommand, AT_WIFI_Set_Mode, "%u", AT_WIFI_Station_Mode);
 8002faa:	2301      	movs	r3, #1
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	4b25      	ldr	r3, [pc, #148]	; (8003044 <StartWifiClick+0xcc>)
 8002fb0:	4a25      	ldr	r2, [pc, #148]	; (8003048 <StartWifiClick+0xd0>)
 8002fb2:	4926      	ldr	r1, [pc, #152]	; (800304c <StartWifiClick+0xd4>)
 8002fb4:	4826      	ldr	r0, [pc, #152]	; (8003050 <StartWifiClick+0xd8>)
 8002fb6:	f7fd fea9 	bl	8000d0c <at_set_command>
	osDelay(10);
 8002fba:	200a      	movs	r0, #10
 8002fbc:	f005 fb4b 	bl	8008656 <osDelay>
	// Allow multiple connections
	at_set_command(at_cmd_buffer, SendATCommand, AT_IP_Set_MultiConnectionMode, "%u", AT_IP_ConnectionMode_Multiple);
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <StartWifiClick+0xcc>)
 8002fc6:	4a23      	ldr	r2, [pc, #140]	; (8003054 <StartWifiClick+0xdc>)
 8002fc8:	4920      	ldr	r1, [pc, #128]	; (800304c <StartWifiClick+0xd4>)
 8002fca:	4821      	ldr	r0, [pc, #132]	; (8003050 <StartWifiClick+0xd8>)
 8002fcc:	f7fd fe9e 	bl	8000d0c <at_set_command>
	osDelay(10);
 8002fd0:	200a      	movs	r0, #10
 8002fd2:	f005 fb40 	bl	8008656 <osDelay>
	// Start TCP server on Port 80
	at_set_command(at_cmd_buffer, SendATCommand, AT_IP_Server, "%u,%u", AT_IP_Server_Create, 80);
 8002fd6:	2350      	movs	r3, #80	; 0x50
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	2301      	movs	r3, #1
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <StartWifiClick+0xe0>)
 8002fe0:	4a1e      	ldr	r2, [pc, #120]	; (800305c <StartWifiClick+0xe4>)
 8002fe2:	491a      	ldr	r1, [pc, #104]	; (800304c <StartWifiClick+0xd4>)
 8002fe4:	481a      	ldr	r0, [pc, #104]	; (8003050 <StartWifiClick+0xd8>)
 8002fe6:	f7fd fe91 	bl	8000d0c <at_set_command>
	osDelay(10);
 8002fea:	200a      	movs	r0, #10
 8002fec:	f005 fb33 	bl	8008656 <osDelay>
	// CONNECT to wifi
	at_set_command(at_cmd_buffer, SendATCommand, AT_WIFI_Connect, "\"%s\",\"%s\"", "UPC54C3A83", "2jRddrfzdxaj");
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <StartWifiClick+0xe8>)
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <StartWifiClick+0xec>)
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <StartWifiClick+0xf0>)
 8002ffa:	4a1c      	ldr	r2, [pc, #112]	; (800306c <StartWifiClick+0xf4>)
 8002ffc:	4913      	ldr	r1, [pc, #76]	; (800304c <StartWifiClick+0xd4>)
 8002ffe:	4814      	ldr	r0, [pc, #80]	; (8003050 <StartWifiClick+0xd8>)
 8003000:	f7fd fe84 	bl	8000d0c <at_set_command>
	osDelay(10);
 8003004:	200a      	movs	r0, #10
 8003006:	f005 fb26 	bl	8008656 <osDelay>
	at_execute_command(at_cmd_buffer, SendATCommand, AT_Startup);
 800300a:	4a19      	ldr	r2, [pc, #100]	; (8003070 <StartWifiClick+0xf8>)
 800300c:	490f      	ldr	r1, [pc, #60]	; (800304c <StartWifiClick+0xd4>)
 800300e:	4810      	ldr	r0, [pc, #64]	; (8003050 <StartWifiClick+0xd8>)
 8003010:	f7fd fed6 	bl	8000dc0 <at_execute_command>
	osDelay(10);
 8003014:	200a      	movs	r0, #10
 8003016:	f005 fb1e 	bl	8008656 <osDelay>

	HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 800301a:	2201      	movs	r2, #1
 800301c:	4915      	ldr	r1, [pc, #84]	; (8003074 <StartWifiClick+0xfc>)
 800301e:	4816      	ldr	r0, [pc, #88]	; (8003078 <StartWifiClick+0x100>)
 8003020:	f003 fd12 	bl	8006a48 <HAL_UART_Receive_IT>
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000004 	.word	0x20000004
 8003030:	200022e4 	.word	0x200022e4
 8003034:	0800307d 	.word	0x0800307d
 8003038:	40013800 	.word	0x40013800
 800303c:	200002e0 	.word	0x200002e0
 8003040:	20000190 	.word	0x20000190
 8003044:	0800c2d0 	.word	0x0800c2d0
 8003048:	0800c2d4 	.word	0x0800c2d4
 800304c:	080032ed 	.word	0x080032ed
 8003050:	200022e8 	.word	0x200022e8
 8003054:	0800c2e0 	.word	0x0800c2e0
 8003058:	0800c2ec 	.word	0x0800c2ec
 800305c:	0800c2f4 	.word	0x0800c2f4
 8003060:	0800c31c 	.word	0x0800c31c
 8003064:	0800c32c 	.word	0x0800c32c
 8003068:	0800c304 	.word	0x0800c304
 800306c:	0800c310 	.word	0x0800c310
 8003070:	0800c338 	.word	0x0800c338
 8003074:	200022e2 	.word	0x200022e2
 8003078:	20000214 	.word	0x20000214

0800307c <UartHandlerTask>:

void UartHandlerTask(char * ch) {
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	; 0x30
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;
	static size_t old_pos = 0;  // Track the position of last character processed
	size_t startPos = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
	size_t currIndex = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
    char prefix[] = "+IPD,0,3:";
 800308c:	4a74      	ldr	r2, [pc, #464]	; (8003260 <UartHandlerTask+0x1e4>)
 800308e:	f107 030c 	add.w	r3, r7, #12
 8003092:	ca07      	ldmia	r2, {r0, r1, r2}
 8003094:	c303      	stmia	r3!, {r0, r1}
 8003096:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		// Wait for a task notification indicating an uart event
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 8003098:	f107 0218 	add.w	r2, r7, #24
 800309c:	f04f 33ff 	mov.w	r3, #4294967295
 80030a0:	f04f 31ff 	mov.w	r1, #4294967295
 80030a4:	2000      	movs	r0, #0
 80030a6:	f007 fddd 	bl	800ac64 <xTaskNotifyWait>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d1f3      	bne.n	8003098 <UartHandlerTask+0x1c>

			if(ulNotificationValue & UART1_IDLE_EVENT) // Received message from UART1
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8087 	beq.w	80031ca <UartHandlerTask+0x14e>
			{
				size_t new_pos = BUFFER_SIZE - huart1.hdmarx->Instance->CNDTR;  // Compute the new position in the buffer
 80030bc:	4b69      	ldr	r3, [pc, #420]	; (8003264 <UartHandlerTask+0x1e8>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80030c8:	623b      	str	r3, [r7, #32]
				size_t length;

				if(new_pos != old_pos)  // Check if any new data is received
 80030ca:	4b67      	ldr	r3, [pc, #412]	; (8003268 <UartHandlerTask+0x1ec>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a3a      	ldr	r2, [r7, #32]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d07a      	beq.n	80031ca <UartHandlerTask+0x14e>
				{
					if (new_pos > old_pos)  // If data does not wrap around the buffer
 80030d4:	4b64      	ldr	r3, [pc, #400]	; (8003268 <UartHandlerTask+0x1ec>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a3a      	ldr	r2, [r7, #32]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d958      	bls.n	8003190 <UartHandlerTask+0x114>
					{
						length = new_pos - old_pos;
 80030de:	4b62      	ldr	r3, [pc, #392]	; (8003268 <UartHandlerTask+0x1ec>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a3a      	ldr	r2, [r7, #32]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	61fb      	str	r3, [r7, #28]
						
						/*
						 * Process here
						 * */
						for(int i = 0;i<length;i++){
 80030e8:	2300      	movs	r3, #0
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ec:	e03e      	b.n	800316c <UartHandlerTask+0xf0>
							currIndex = old_pos + i;
 80030ee:	4b5e      	ldr	r3, [pc, #376]	; (8003268 <UartHandlerTask+0x1ec>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	4413      	add	r3, r2
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
							if(uart1Buffer[currIndex] == '\n' || uart1Buffer[currIndex] == '\r')continue;
 80030f8:	4a5c      	ldr	r2, [pc, #368]	; (800326c <UartHandlerTask+0x1f0>)
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	4413      	add	r3, r2
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b0a      	cmp	r3, #10
 8003102:	d02f      	beq.n	8003164 <UartHandlerTask+0xe8>
 8003104:	4a59      	ldr	r2, [pc, #356]	; (800326c <UartHandlerTask+0x1f0>)
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	4413      	add	r3, r2
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b0d      	cmp	r3, #13
 800310e:	d029      	beq.n	8003164 <UartHandlerTask+0xe8>

							if(strlen(prefix)==i-startPos)
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd f85b 	bl	80001d0 <strlen>
 800311a:	4601      	mov	r1, r0
 800311c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	4299      	cmp	r1, r3
 8003124:	d106      	bne.n	8003134 <UartHandlerTask+0xb8>
							{
								printDataOnMatrix(&uart1Buffer[currIndex]);
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	4a50      	ldr	r2, [pc, #320]	; (800326c <UartHandlerTask+0x1f0>)
 800312a:	4413      	add	r3, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fe67 	bl	8000e00 <printDataOnMatrix>
								break;
 8003132:	e021      	b.n	8003178 <UartHandlerTask+0xfc>
							}


							if(uart1Buffer[currIndex] == prefix[0])startPos = i;
 8003134:	4a4d      	ldr	r2, [pc, #308]	; (800326c <UartHandlerTask+0x1f0>)
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	4413      	add	r3, r2
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	7b3b      	ldrb	r3, [r7, #12]
 800313e:	429a      	cmp	r2, r3
 8003140:	d102      	bne.n	8003148 <UartHandlerTask+0xcc>
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003146:	e00e      	b.n	8003166 <UartHandlerTask+0xea>
							else if(uart1Buffer[currIndex] != prefix[i-startPos])break;
 8003148:	4a48      	ldr	r2, [pc, #288]	; (800326c <UartHandlerTask+0x1f0>)
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	4413      	add	r3, r2
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	1acb      	subs	r3, r1, r3
 8003156:	3330      	adds	r3, #48	; 0x30
 8003158:	443b      	add	r3, r7
 800315a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800315e:	429a      	cmp	r2, r3
 8003160:	d109      	bne.n	8003176 <UartHandlerTask+0xfa>
 8003162:	e000      	b.n	8003166 <UartHandlerTask+0xea>
							if(uart1Buffer[currIndex] == '\n' || uart1Buffer[currIndex] == '\r')continue;
 8003164:	bf00      	nop
						for(int i = 0;i<length;i++){
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	3301      	adds	r3, #1
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	429a      	cmp	r2, r3
 8003172:	d8bc      	bhi.n	80030ee <UartHandlerTask+0x72>
 8003174:	e000      	b.n	8003178 <UartHandlerTask+0xfc>
							else if(uart1Buffer[currIndex] != prefix[i-startPos])break;
 8003176:	bf00      	nop

						}

						HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 8003178:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <UartHandlerTask+0x1ec>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a3b      	ldr	r2, [pc, #236]	; (800326c <UartHandlerTask+0x1f0>)
 800317e:	1899      	adds	r1, r3, r2
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	b29a      	uxth	r2, r3
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
 8003188:	4839      	ldr	r0, [pc, #228]	; (8003270 <UartHandlerTask+0x1f4>)
 800318a:	f003 fb5b 	bl	8006844 <HAL_UART_Transmit>
 800318e:	e019      	b.n	80031c4 <UartHandlerTask+0x148>
					{
						/*
						 * Process here --> keep in mind, that the data has to be composed, as it wraps around the buffer
						 * */

						length = BUFFER_SIZE - old_pos;
 8003190:	4b35      	ldr	r3, [pc, #212]	; (8003268 <UartHandlerTask+0x1ec>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003198:	61fb      	str	r3, [r7, #28]
						HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 800319a:	4b33      	ldr	r3, [pc, #204]	; (8003268 <UartHandlerTask+0x1ec>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a33      	ldr	r2, [pc, #204]	; (800326c <UartHandlerTask+0x1f0>)
 80031a0:	1899      	adds	r1, r3, r2
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	f04f 33ff 	mov.w	r3, #4294967295
 80031aa:	4831      	ldr	r0, [pc, #196]	; (8003270 <UartHandlerTask+0x1f4>)
 80031ac:	f003 fb4a 	bl	8006844 <HAL_UART_Transmit>

						length = new_pos;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	61fb      	str	r3, [r7, #28]
						HAL_UART_Transmit(&huart2, uart1Buffer, length, HAL_MAX_DELAY);
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295
 80031bc:	492b      	ldr	r1, [pc, #172]	; (800326c <UartHandlerTask+0x1f0>)
 80031be:	482c      	ldr	r0, [pc, #176]	; (8003270 <UartHandlerTask+0x1f4>)
 80031c0:	f003 fb40 	bl	8006844 <HAL_UART_Transmit>
					}

					old_pos = new_pos;  // Update the position of the last character processed
 80031c4:	4a28      	ldr	r2, [pc, #160]	; (8003268 <UartHandlerTask+0x1ec>)
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	6013      	str	r3, [r2, #0]
				}
			}
			if(ulNotificationValue & UART2_EVENT) // Received CHARACTER from UART2
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f43f af61 	beq.w	8003098 <UartHandlerTask+0x1c>
			{
				char c = (char)uart2_rx_char;
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <UartHandlerTask+0x1f8>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	72fb      	strb	r3, [r7, #11]

				// Echo back the character to the terminal
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)&c, 1);
 80031dc:	f107 030b 	add.w	r3, r7, #11
 80031e0:	2201      	movs	r2, #1
 80031e2:	4619      	mov	r1, r3
 80031e4:	4822      	ldr	r0, [pc, #136]	; (8003270 <UartHandlerTask+0x1f4>)
 80031e6:	f003 fbc1 	bl	800696c <HAL_UART_Transmit_IT>

				// If newline, forward the buffer to UART1 and reset buffer
				if(c == '\r')
 80031ea:	7afb      	ldrb	r3, [r7, #11]
 80031ec:	2b0d      	cmp	r3, #13
 80031ee:	d12c      	bne.n	800324a <UartHandlerTask+0x1ce>
				{
					uart2Buffer[uart2BufferIndex++] = '\r';
 80031f0:	4b21      	ldr	r3, [pc, #132]	; (8003278 <UartHandlerTask+0x1fc>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	b291      	uxth	r1, r2
 80031f8:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <UartHandlerTask+0x1fc>)
 80031fa:	8011      	strh	r1, [r2, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b1f      	ldr	r3, [pc, #124]	; (800327c <UartHandlerTask+0x200>)
 8003200:	210d      	movs	r1, #13
 8003202:	5499      	strb	r1, [r3, r2]
					uart2Buffer[uart2BufferIndex++] = '\n';
 8003204:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <UartHandlerTask+0x1fc>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	b291      	uxth	r1, r2
 800320c:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <UartHandlerTask+0x1fc>)
 800320e:	8011      	strh	r1, [r2, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <UartHandlerTask+0x200>)
 8003214:	210a      	movs	r1, #10
 8003216:	5499      	strb	r1, [r3, r2]
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)newLine, 2);
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <UartHandlerTask+0x204>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2202      	movs	r2, #2
 800321e:	4619      	mov	r1, r3
 8003220:	4813      	ldr	r0, [pc, #76]	; (8003270 <UartHandlerTask+0x1f4>)
 8003222:	f003 fba3 	bl	800696c <HAL_UART_Transmit_IT>
					HAL_UART_Transmit(&huart1, uart2Buffer, uart2BufferIndex, HAL_MAX_DELAY);
 8003226:	4b14      	ldr	r3, [pc, #80]	; (8003278 <UartHandlerTask+0x1fc>)
 8003228:	881a      	ldrh	r2, [r3, #0]
 800322a:	f04f 33ff 	mov.w	r3, #4294967295
 800322e:	4913      	ldr	r1, [pc, #76]	; (800327c <UartHandlerTask+0x200>)
 8003230:	480c      	ldr	r0, [pc, #48]	; (8003264 <UartHandlerTask+0x1e8>)
 8003232:	f003 fb07 	bl	8006844 <HAL_UART_Transmit>
					memset(uart2Buffer, 0, BUFFER_SIZE);
 8003236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800323a:	2100      	movs	r1, #0
 800323c:	480f      	ldr	r0, [pc, #60]	; (800327c <UartHandlerTask+0x200>)
 800323e:	f008 ff21 	bl	800c084 <memset>
					uart2BufferIndex = 0;
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <UartHandlerTask+0x1fc>)
 8003244:	2200      	movs	r2, #0
 8003246:	801a      	strh	r2, [r3, #0]
 8003248:	e726      	b.n	8003098 <UartHandlerTask+0x1c>
				}
				else
				{
					uart2Buffer[uart2BufferIndex++] = c;
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <UartHandlerTask+0x1fc>)
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	b291      	uxth	r1, r2
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <UartHandlerTask+0x1fc>)
 8003254:	8011      	strh	r1, [r2, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	7af9      	ldrb	r1, [r7, #11]
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <UartHandlerTask+0x200>)
 800325c:	5499      	strb	r1, [r3, r2]
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 800325e:	e71b      	b.n	8003098 <UartHandlerTask+0x1c>
 8003260:	0800c33c 	.word	0x0800c33c
 8003264:	20000190 	.word	0x20000190
 8003268:	20002368 	.word	0x20002368
 800326c:	200002e0 	.word	0x200002e0
 8003270:	20000214 	.word	0x20000214
 8003274:	200022e2 	.word	0x200022e2
 8003278:	200022e0 	.word	0x200022e0
 800327c:	200012e0 	.word	0x200012e0
 8003280:	20000008 	.word	0x20000008

08003284 <HAL_UART_RxCpltCallback>:
	}
}

// Interrupt callback routine for UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af02      	add	r7, sp, #8
 800328a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2) {
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <HAL_UART_RxCpltCallback+0x54>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d11b      	bne.n	80032ce <HAL_UART_RxCpltCallback+0x4a>
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
	  xTaskNotifyFromISR(xUartTaskHandle, UART2_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_UART_RxCpltCallback+0x58>)
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	f107 030c 	add.w	r3, r7, #12
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2300      	movs	r3, #0
 80032a6:	2201      	movs	r2, #1
 80032a8:	2102      	movs	r1, #2
 80032aa:	f007 fd3b 	bl	800ad24 <xTaskGenericNotifyFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_UART_RxCpltCallback+0x40>
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_UART_RxCpltCallback+0x5c>)
 80032b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	f3bf 8f6f 	isb	sy

	  HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 80032c4:	2201      	movs	r2, #1
 80032c6:	4907      	ldr	r1, [pc, #28]	; (80032e4 <HAL_UART_RxCpltCallback+0x60>)
 80032c8:	4807      	ldr	r0, [pc, #28]	; (80032e8 <HAL_UART_RxCpltCallback+0x64>)
 80032ca:	f003 fbbd 	bl	8006a48 <HAL_UART_Receive_IT>
  }
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40004400 	.word	0x40004400
 80032dc:	200022e4 	.word	0x200022e4
 80032e0:	e000ed04 	.word	0xe000ed04
 80032e4:	200022e2 	.word	0x200022e2
 80032e8:	20000214 	.word	0x20000214

080032ec <SendATCommand>:

void SendATCommand(char *command, int length) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
	taskENTER_CRITICAL();
 80032f6:	f008 fb85 	bl	800ba04 <vPortEnterCritical>
	HAL_UART_Transmit(&huart1, (uint8_t*)command, length, HAL_MAX_DELAY);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4804      	ldr	r0, [pc, #16]	; (8003318 <SendATCommand+0x2c>)
 8003306:	f003 fa9d 	bl	8006844 <HAL_UART_Transmit>
	taskEXIT_CRITICAL();
 800330a:	f008 fbab 	bl	800ba64 <vPortExitCritical>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000190 	.word	0x20000190

0800331c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800331c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003354 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003320:	f7ff fb8e 	bl	8002a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003324:	480c      	ldr	r0, [pc, #48]	; (8003358 <LoopForever+0x6>)
  ldr r1, =_edata
 8003326:	490d      	ldr	r1, [pc, #52]	; (800335c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <LoopForever+0xe>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800332c:	e002      	b.n	8003334 <LoopCopyDataInit>

0800332e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003332:	3304      	adds	r3, #4

08003334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003338:	d3f9      	bcc.n	800332e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800333c:	4c0a      	ldr	r4, [pc, #40]	; (8003368 <LoopForever+0x16>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003340:	e001      	b.n	8003346 <LoopFillZerobss>

08003342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003344:	3204      	adds	r2, #4

08003346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003348:	d3fb      	bcc.n	8003342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800334a:	f008 fe67 	bl	800c01c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800334e:	f7fd ff2f 	bl	80011b0 <main>

08003352 <LoopForever>:

LoopForever:
    b LoopForever
 8003352:	e7fe      	b.n	8003352 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003354:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800335c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003360:	0800e610 	.word	0x0800e610
  ldr r2, =_sbss
 8003364:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003368:	20005e98 	.word	0x20005e98

0800336c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800336c:	e7fe      	b.n	800336c <ADC1_IRQHandler>

0800336e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003378:	2003      	movs	r0, #3
 800337a:	f000 f8de 	bl	800353a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800337e:	200f      	movs	r0, #15
 8003380:	f7ff fa2c 	bl	80027dc <HAL_InitTick>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	71fb      	strb	r3, [r7, #7]
 800338e:	e001      	b.n	8003394 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003390:	f7ff f9fc 	bl	800278c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003394:	79fb      	ldrb	r3, [r7, #7]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_IncTick+0x20>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_IncTick+0x24>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4413      	add	r3, r2
 80033b0:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <HAL_IncTick+0x24>)
 80033b2:	6013      	str	r3, [r2, #0]
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000010 	.word	0x20000010
 80033c4:	2000236c 	.word	0x2000236c

080033c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return uwTick;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_GetTick+0x14>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	2000236c 	.word	0x2000236c

080033e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033fc:	4013      	ands	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003412:	4a04      	ldr	r2, [pc, #16]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	60d3      	str	r3, [r2, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <__NVIC_GetPriorityGrouping+0x18>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	f003 0307 	and.w	r3, r3, #7
}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	db0b      	blt.n	800346e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	f003 021f 	and.w	r2, r3, #31
 800345c:	4907      	ldr	r1, [pc, #28]	; (800347c <__NVIC_EnableIRQ+0x38>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2001      	movs	r0, #1
 8003466:	fa00 f202 	lsl.w	r2, r0, r2
 800346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e100 	.word	0xe000e100

08003480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	2b00      	cmp	r3, #0
 8003492:	db0a      	blt.n	80034aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	490c      	ldr	r1, [pc, #48]	; (80034cc <__NVIC_SetPriority+0x4c>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	0112      	lsls	r2, r2, #4
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	440b      	add	r3, r1
 80034a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a8:	e00a      	b.n	80034c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4908      	ldr	r1, [pc, #32]	; (80034d0 <__NVIC_SetPriority+0x50>)
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	3b04      	subs	r3, #4
 80034b8:	0112      	lsls	r2, r2, #4
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	440b      	add	r3, r1
 80034be:	761a      	strb	r2, [r3, #24]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000e100 	.word	0xe000e100
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	; 0x24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f1c3 0307 	rsb	r3, r3, #7
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	bf28      	it	cs
 80034f2:	2304      	movcs	r3, #4
 80034f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3304      	adds	r3, #4
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d902      	bls.n	8003504 <NVIC_EncodePriority+0x30>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3b03      	subs	r3, #3
 8003502:	e000      	b.n	8003506 <NVIC_EncodePriority+0x32>
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	f04f 32ff 	mov.w	r2, #4294967295
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43da      	mvns	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	401a      	ands	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800351c:	f04f 31ff 	mov.w	r1, #4294967295
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	43d9      	mvns	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	4313      	orrs	r3, r2
         );
}
 800352e:	4618      	mov	r0, r3
 8003530:	3724      	adds	r7, #36	; 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ff4c 	bl	80033e0 <__NVIC_SetPriorityGrouping>
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003562:	f7ff ff61 	bl	8003428 <__NVIC_GetPriorityGrouping>
 8003566:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	6978      	ldr	r0, [r7, #20]
 800356e:	f7ff ffb1 	bl	80034d4 <NVIC_EncodePriority>
 8003572:	4602      	mov	r2, r0
 8003574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ff80 	bl	8003480 <__NVIC_SetPriority>
}
 8003580:	bf00      	nop
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ff54 	bl	8003444 <__NVIC_EnableIRQ>
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e098      	b.n	80036e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b4d      	ldr	r3, [pc, #308]	; (80036f4 <HAL_DMA_Init+0x150>)
 80035be:	429a      	cmp	r2, r3
 80035c0:	d80f      	bhi.n	80035e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <HAL_DMA_Init+0x154>)
 80035ca:	4413      	add	r3, r2
 80035cc:	4a4b      	ldr	r2, [pc, #300]	; (80036fc <HAL_DMA_Init+0x158>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	009a      	lsls	r2, r3, #2
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a48      	ldr	r2, [pc, #288]	; (8003700 <HAL_DMA_Init+0x15c>)
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
 80035e0:	e00e      	b.n	8003600 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b46      	ldr	r3, [pc, #280]	; (8003704 <HAL_DMA_Init+0x160>)
 80035ea:	4413      	add	r3, r2
 80035ec:	4a43      	ldr	r2, [pc, #268]	; (80036fc <HAL_DMA_Init+0x158>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	009a      	lsls	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a42      	ldr	r2, [pc, #264]	; (8003708 <HAL_DMA_Init+0x164>)
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800365a:	d039      	beq.n	80036d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <HAL_DMA_Init+0x15c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d11a      	bne.n	800369c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_DMA_Init+0x168>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f003 031c 	and.w	r3, r3, #28
 8003672:	210f      	movs	r1, #15
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	4924      	ldr	r1, [pc, #144]	; (800370c <HAL_DMA_Init+0x168>)
 800367c:	4013      	ands	r3, r2
 800367e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003680:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_DMA_Init+0x168>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	f003 031c 	and.w	r3, r3, #28
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	491d      	ldr	r1, [pc, #116]	; (800370c <HAL_DMA_Init+0x168>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
 800369a:	e019      	b.n	80036d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800369c:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <HAL_DMA_Init+0x16c>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	f003 031c 	and.w	r3, r3, #28
 80036a8:	210f      	movs	r1, #15
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	4917      	ldr	r1, [pc, #92]	; (8003710 <HAL_DMA_Init+0x16c>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036b6:	4b16      	ldr	r3, [pc, #88]	; (8003710 <HAL_DMA_Init+0x16c>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f003 031c 	and.w	r3, r3, #28
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	4911      	ldr	r1, [pc, #68]	; (8003710 <HAL_DMA_Init+0x16c>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40020407 	.word	0x40020407
 80036f8:	bffdfff8 	.word	0xbffdfff8
 80036fc:	cccccccd 	.word	0xcccccccd
 8003700:	40020000 	.word	0x40020000
 8003704:	bffdfbf8 	.word	0xbffdfbf8
 8003708:	40020400 	.word	0x40020400
 800370c:	400200a8 	.word	0x400200a8
 8003710:	400204a8 	.word	0x400204a8

08003714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_DMA_Start_IT+0x20>
 8003730:	2302      	movs	r3, #2
 8003732:	e04b      	b.n	80037cc <HAL_DMA_Start_IT+0xb8>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d13a      	bne.n	80037be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f95f 	bl	8003a30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 020e 	orr.w	r2, r2, #14
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e00f      	b.n	80037ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0204 	bic.w	r2, r2, #4
 800379a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 020a 	orr.w	r2, r2, #10
 80037aa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e005      	b.n	80037ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d008      	beq.n	80037fe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2204      	movs	r2, #4
 80037f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e022      	b.n	8003844 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 020e 	bic.w	r2, r2, #14
 800380c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f003 021c 	and.w	r2, r3, #28
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2101      	movs	r1, #1
 800382c:	fa01 f202 	lsl.w	r2, r1, r2
 8003830:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d005      	beq.n	8003874 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2204      	movs	r2, #4
 800386c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	e029      	b.n	80038c8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 020e 	bic.w	r2, r2, #14
 8003882:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	f003 021c 	and.w	r2, r3, #28
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2101      	movs	r1, #1
 80038a2:	fa01 f202 	lsl.w	r2, r1, r2
 80038a6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
    }
  }
  return status;
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f003 031c 	and.w	r3, r3, #28
 80038f2:	2204      	movs	r2, #4
 80038f4:	409a      	lsls	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d026      	beq.n	800394c <HAL_DMA_IRQHandler+0x7a>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d021      	beq.n	800394c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d107      	bne.n	8003926 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0204 	bic.w	r2, r2, #4
 8003924:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f003 021c 	and.w	r2, r3, #28
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2104      	movs	r1, #4
 8003934:	fa01 f202 	lsl.w	r2, r1, r2
 8003938:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	2b00      	cmp	r3, #0
 8003940:	d071      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800394a:	e06c      	b.n	8003a26 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	f003 031c 	and.w	r3, r3, #28
 8003954:	2202      	movs	r2, #2
 8003956:	409a      	lsls	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02e      	beq.n	80039be <HAL_DMA_IRQHandler+0xec>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d029      	beq.n	80039be <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 020a 	bic.w	r2, r2, #10
 8003986:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f003 021c 	and.w	r2, r3, #28
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	2102      	movs	r1, #2
 800399e:	fa01 f202 	lsl.w	r2, r1, r2
 80039a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d038      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039bc:	e033      	b.n	8003a26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f003 031c 	and.w	r3, r3, #28
 80039c6:	2208      	movs	r2, #8
 80039c8:	409a      	lsls	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d02a      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x156>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d025      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 020e 	bic.w	r2, r2, #14
 80039ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	f003 021c 	and.w	r2, r3, #28
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	2101      	movs	r1, #1
 80039fa:	fa01 f202 	lsl.w	r2, r1, r2
 80039fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d004      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
}
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f003 021c 	and.w	r2, r3, #28
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d108      	bne.n	8003a74 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a72:	e007      	b.n	8003a84 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	60da      	str	r2, [r3, #12]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a9e:	e148      	b.n	8003d32 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	4013      	ands	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 813a 	beq.w	8003d2c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d005      	beq.n	8003ad0 <HAL_GPIO_Init+0x40>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d130      	bne.n	8003b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b06:	2201      	movs	r2, #1
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	f003 0201 	and.w	r2, r3, #1
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d017      	beq.n	8003b6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	2203      	movs	r2, #3
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d123      	bne.n	8003bc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	08da      	lsrs	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3208      	adds	r2, #8
 8003b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	220f      	movs	r2, #15
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	08da      	lsrs	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3208      	adds	r2, #8
 8003bbc:	6939      	ldr	r1, [r7, #16]
 8003bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	2203      	movs	r2, #3
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0203 	and.w	r2, r3, #3
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8094 	beq.w	8003d2c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c04:	4b52      	ldr	r3, [pc, #328]	; (8003d50 <HAL_GPIO_Init+0x2c0>)
 8003c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c08:	4a51      	ldr	r2, [pc, #324]	; (8003d50 <HAL_GPIO_Init+0x2c0>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6613      	str	r3, [r2, #96]	; 0x60
 8003c10:	4b4f      	ldr	r3, [pc, #316]	; (8003d50 <HAL_GPIO_Init+0x2c0>)
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c1c:	4a4d      	ldr	r2, [pc, #308]	; (8003d54 <HAL_GPIO_Init+0x2c4>)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	3302      	adds	r3, #2
 8003c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	220f      	movs	r2, #15
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c46:	d00d      	beq.n	8003c64 <HAL_GPIO_Init+0x1d4>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a43      	ldr	r2, [pc, #268]	; (8003d58 <HAL_GPIO_Init+0x2c8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <HAL_GPIO_Init+0x1d0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a42      	ldr	r2, [pc, #264]	; (8003d5c <HAL_GPIO_Init+0x2cc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_GPIO_Init+0x1cc>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e004      	b.n	8003c66 <HAL_GPIO_Init+0x1d6>
 8003c5c:	2307      	movs	r3, #7
 8003c5e:	e002      	b.n	8003c66 <HAL_GPIO_Init+0x1d6>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <HAL_GPIO_Init+0x1d6>
 8003c64:	2300      	movs	r3, #0
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	f002 0203 	and.w	r2, r2, #3
 8003c6c:	0092      	lsls	r2, r2, #2
 8003c6e:	4093      	lsls	r3, r2
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c76:	4937      	ldr	r1, [pc, #220]	; (8003d54 <HAL_GPIO_Init+0x2c4>)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c84:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ca8:	4a2d      	ldr	r2, [pc, #180]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cae:	4b2c      	ldr	r3, [pc, #176]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cd2:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cd8:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cfc:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d02:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d26:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f47f aeaf 	bne.w	8003aa0 <HAL_GPIO_Init+0x10>
  }
}
 8003d42:	bf00      	nop
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40010000 	.word	0x40010000
 8003d58:	48000400 	.word	0x48000400
 8003d5c:	48000800 	.word	0x48000800
 8003d60:	40010400 	.word	0x40010400

08003d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	807b      	strh	r3, [r7, #2]
 8003d70:	4613      	mov	r3, r2
 8003d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d74:	787b      	ldrb	r3, [r7, #1]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d80:	e002      	b.n	8003d88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d82:	887a      	ldrh	r2, [r7, #2]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da2:	6013      	str	r3, [r2, #0]
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40007000 	.word	0x40007000

08003db4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <HAL_PWREx_GetVoltageRange+0x18>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40007000 	.word	0x40007000

08003dd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dde:	d130      	bne.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003de0:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dec:	d038      	beq.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dee:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003df6:	4a1e      	ldr	r2, [pc, #120]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2232      	movs	r2, #50	; 0x32
 8003e04:	fb02 f303 	mul.w	r3, r2, r3
 8003e08:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	0c9b      	lsrs	r3, r3, #18
 8003e10:	3301      	adds	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e14:	e002      	b.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e28:	d102      	bne.n	8003e30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f2      	bne.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3c:	d110      	bne.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e00f      	b.n	8003e62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4e:	d007      	beq.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e58:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40007000 	.word	0x40007000
 8003e74:	20000000 	.word	0x20000000
 8003e78:	431bde83 	.word	0x431bde83

08003e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d102      	bne.n	8003e90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f000 bc02 	b.w	8004694 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e90:	4b96      	ldr	r3, [pc, #600]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e9a:	4b94      	ldr	r3, [pc, #592]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80e4 	beq.w	800407a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d007      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x4c>
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	f040 808b 	bne.w	8003fd6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	f040 8087 	bne.w	8003fd6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ec8:	4b88      	ldr	r3, [pc, #544]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x64>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e3d9      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1a      	ldr	r2, [r3, #32]
 8003ee4:	4b81      	ldr	r3, [pc, #516]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <HAL_RCC_OscConfig+0x7e>
 8003ef0:	4b7e      	ldr	r3, [pc, #504]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef8:	e005      	b.n	8003f06 <HAL_RCC_OscConfig+0x8a>
 8003efa:	4b7c      	ldr	r3, [pc, #496]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d223      	bcs.n	8003f52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fdbe 	bl	8004a90 <RCC_SetFlashLatencyFromMSIRange>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e3ba      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f1e:	4b73      	ldr	r3, [pc, #460]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a72      	ldr	r2, [pc, #456]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f24:	f043 0308 	orr.w	r3, r3, #8
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b70      	ldr	r3, [pc, #448]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	496d      	ldr	r1, [pc, #436]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f3c:	4b6b      	ldr	r3, [pc, #428]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	4968      	ldr	r1, [pc, #416]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]
 8003f50:	e025      	b.n	8003f9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f52:	4b66      	ldr	r3, [pc, #408]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a65      	ldr	r2, [pc, #404]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f58:	f043 0308 	orr.w	r3, r3, #8
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b63      	ldr	r3, [pc, #396]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	4960      	ldr	r1, [pc, #384]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f70:	4b5e      	ldr	r3, [pc, #376]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	495b      	ldr	r1, [pc, #364]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fd7e 	bl	8004a90 <RCC_SetFlashLatencyFromMSIRange>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e37a      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f9e:	f000 fc81 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4b51      	ldr	r3, [pc, #324]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	4950      	ldr	r1, [pc, #320]	; (80040f0 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	5ccb      	ldrb	r3, [r1, r3]
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fba:	4a4e      	ldr	r2, [pc, #312]	; (80040f4 <HAL_RCC_OscConfig+0x278>)
 8003fbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fbe:	4b4e      	ldr	r3, [pc, #312]	; (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fc0a 	bl	80027dc <HAL_InitTick>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d052      	beq.n	8004078 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	e35e      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d032      	beq.n	8004044 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fde:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a42      	ldr	r2, [pc, #264]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fea:	f7ff f9ed 	bl	80033c8 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ff2:	f7ff f9e9 	bl	80033c8 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e347      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004004:	4b39      	ldr	r3, [pc, #228]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004010:	4b36      	ldr	r3, [pc, #216]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a35      	ldr	r2, [pc, #212]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8004016:	f043 0308 	orr.w	r3, r3, #8
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b33      	ldr	r3, [pc, #204]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	4930      	ldr	r1, [pc, #192]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800402e:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	492b      	ldr	r1, [pc, #172]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 800403e:	4313      	orrs	r3, r2
 8004040:	604b      	str	r3, [r1, #4]
 8004042:	e01a      	b.n	800407a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004044:	4b29      	ldr	r3, [pc, #164]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a28      	ldr	r2, [pc, #160]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004050:	f7ff f9ba 	bl	80033c8 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004058:	f7ff f9b6 	bl	80033c8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e314      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x1dc>
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004078:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d073      	beq.n	800416e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d005      	beq.n	8004098 <HAL_RCC_OscConfig+0x21c>
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b0c      	cmp	r3, #12
 8004090:	d10e      	bne.n	80040b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d10b      	bne.n	80040b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004098:	4b14      	ldr	r3, [pc, #80]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d063      	beq.n	800416c <HAL_RCC_OscConfig+0x2f0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d15f      	bne.n	800416c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e2f1      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b8:	d106      	bne.n	80040c8 <HAL_RCC_OscConfig+0x24c>
 80040ba:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a0b      	ldr	r2, [pc, #44]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e025      	b.n	8004114 <HAL_RCC_OscConfig+0x298>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d0:	d114      	bne.n	80040fc <HAL_RCC_OscConfig+0x280>
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a05      	ldr	r2, [pc, #20]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 80040d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a02      	ldr	r2, [pc, #8]	; (80040ec <HAL_RCC_OscConfig+0x270>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e013      	b.n	8004114 <HAL_RCC_OscConfig+0x298>
 80040ec:	40021000 	.word	0x40021000
 80040f0:	0800e558 	.word	0x0800e558
 80040f4:	20000000 	.word	0x20000000
 80040f8:	2000000c 	.word	0x2000000c
 80040fc:	4ba0      	ldr	r3, [pc, #640]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a9f      	ldr	r2, [pc, #636]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4b9d      	ldr	r3, [pc, #628]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a9c      	ldr	r2, [pc, #624]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 800410e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d013      	beq.n	8004144 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7ff f954 	bl	80033c8 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004124:	f7ff f950 	bl	80033c8 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	; 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e2ae      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004136:	4b92      	ldr	r3, [pc, #584]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x2a8>
 8004142:	e014      	b.n	800416e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7ff f940 	bl	80033c8 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800414c:	f7ff f93c 	bl	80033c8 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e29a      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800415e:	4b88      	ldr	r3, [pc, #544]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x2d0>
 800416a:	e000      	b.n	800416e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d060      	beq.n	800423c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d005      	beq.n	800418c <HAL_RCC_OscConfig+0x310>
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d119      	bne.n	80041ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d116      	bne.n	80041ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800418c:	4b7c      	ldr	r3, [pc, #496]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_OscConfig+0x328>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e277      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a4:	4b76      	ldr	r3, [pc, #472]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	061b      	lsls	r3, r3, #24
 80041b2:	4973      	ldr	r1, [pc, #460]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041b8:	e040      	b.n	800423c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d023      	beq.n	800420a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c2:	4b6f      	ldr	r3, [pc, #444]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a6e      	ldr	r2, [pc, #440]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7ff f8fb 	bl	80033c8 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d6:	f7ff f8f7 	bl	80033c8 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e255      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e8:	4b65      	ldr	r3, [pc, #404]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f4:	4b62      	ldr	r3, [pc, #392]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	495f      	ldr	r1, [pc, #380]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
 8004208:	e018      	b.n	800423c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420a:	4b5d      	ldr	r3, [pc, #372]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a5c      	ldr	r2, [pc, #368]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7ff f8d7 	bl	80033c8 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800421e:	f7ff f8d3 	bl	80033c8 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e231      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004230:	4b53      	ldr	r3, [pc, #332]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f0      	bne.n	800421e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d03c      	beq.n	80042c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01c      	beq.n	800428a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004250:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004256:	4a4a      	ldr	r2, [pc, #296]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7ff f8b2 	bl	80033c8 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004268:	f7ff f8ae 	bl	80033c8 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e20c      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800427a:	4b41      	ldr	r3, [pc, #260]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 800427c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ef      	beq.n	8004268 <HAL_RCC_OscConfig+0x3ec>
 8004288:	e01b      	b.n	80042c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428a:	4b3d      	ldr	r3, [pc, #244]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 800428c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004290:	4a3b      	ldr	r2, [pc, #236]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7ff f895 	bl	80033c8 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a2:	f7ff f891 	bl	80033c8 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e1ef      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b4:	4b32      	ldr	r3, [pc, #200]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80042b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ef      	bne.n	80042a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80a6 	beq.w	800441c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042d4:	4b2a      	ldr	r3, [pc, #168]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10d      	bne.n	80042fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e0:	4b27      	ldr	r3, [pc, #156]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	4a26      	ldr	r2, [pc, #152]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ea:	6593      	str	r3, [r2, #88]	; 0x58
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f8:	2301      	movs	r3, #1
 80042fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <HAL_RCC_OscConfig+0x508>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d118      	bne.n	800433a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004308:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <HAL_RCC_OscConfig+0x508>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <HAL_RCC_OscConfig+0x508>)
 800430e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004312:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004314:	f7ff f858 	bl	80033c8 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431c:	f7ff f854 	bl	80033c8 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e1b2      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432e:	4b15      	ldr	r3, [pc, #84]	; (8004384 <HAL_RCC_OscConfig+0x508>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d108      	bne.n	8004354 <HAL_RCC_OscConfig+0x4d8>
 8004342:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	4a0d      	ldr	r2, [pc, #52]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004352:	e029      	b.n	80043a8 <HAL_RCC_OscConfig+0x52c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b05      	cmp	r3, #5
 800435a:	d115      	bne.n	8004388 <HAL_RCC_OscConfig+0x50c>
 800435c:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	4a07      	ldr	r2, [pc, #28]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	4a03      	ldr	r2, [pc, #12]	; (8004380 <HAL_RCC_OscConfig+0x504>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800437c:	e014      	b.n	80043a8 <HAL_RCC_OscConfig+0x52c>
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
 8004384:	40007000 	.word	0x40007000
 8004388:	4b9a      	ldr	r3, [pc, #616]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	4a99      	ldr	r2, [pc, #612]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004398:	4b96      	ldr	r3, [pc, #600]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	4a95      	ldr	r2, [pc, #596]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d016      	beq.n	80043de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7ff f80a 	bl	80033c8 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b8:	f7ff f806 	bl	80033c8 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e162      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ce:	4b89      	ldr	r3, [pc, #548]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ed      	beq.n	80043b8 <HAL_RCC_OscConfig+0x53c>
 80043dc:	e015      	b.n	800440a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043de:	f7fe fff3 	bl	80033c8 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e6:	f7fe ffef 	bl	80033c8 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e14b      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043fc:	4b7d      	ldr	r3, [pc, #500]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1ed      	bne.n	80043e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800440a:	7ffb      	ldrb	r3, [r7, #31]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d105      	bne.n	800441c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004410:	4b78      	ldr	r3, [pc, #480]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	4a77      	ldr	r2, [pc, #476]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 8004416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d03c      	beq.n	80044a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01c      	beq.n	800446a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004430:	4b70      	ldr	r3, [pc, #448]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 8004432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004436:	4a6f      	ldr	r2, [pc, #444]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fe ffc2 	bl	80033c8 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004448:	f7fe ffbe 	bl	80033c8 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e11c      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800445a:	4b66      	ldr	r3, [pc, #408]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 800445c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ef      	beq.n	8004448 <HAL_RCC_OscConfig+0x5cc>
 8004468:	e01b      	b.n	80044a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800446a:	4b62      	ldr	r3, [pc, #392]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 800446c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004470:	4a60      	ldr	r2, [pc, #384]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fe ffa5 	bl	80033c8 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004482:	f7fe ffa1 	bl	80033c8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e0ff      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004494:	4b57      	ldr	r3, [pc, #348]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 8004496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ef      	bne.n	8004482 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80f3 	beq.w	8004692 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	f040 80c9 	bne.w	8004648 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044b6:	4b4f      	ldr	r3, [pc, #316]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f003 0203 	and.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d12c      	bne.n	8004524 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	3b01      	subs	r3, #1
 80044d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d123      	bne.n	8004524 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d11b      	bne.n	8004524 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d113      	bne.n	8004524 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	3b01      	subs	r3, #1
 800450a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d109      	bne.n	8004524 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	3b01      	subs	r3, #1
 800451e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d06b      	beq.n	80045fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d062      	beq.n	80045f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800452a:	4b32      	ldr	r3, [pc, #200]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e0ac      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800453a:	4b2e      	ldr	r3, [pc, #184]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a2d      	ldr	r2, [pc, #180]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 8004540:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004544:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004546:	f7fe ff3f 	bl	80033c8 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454e:	f7fe ff3b 	bl	80033c8 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e099      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004560:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f0      	bne.n	800454e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800456c:	4b21      	ldr	r3, [pc, #132]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <HAL_RCC_OscConfig+0x77c>)
 8004572:	4013      	ands	r3, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800457c:	3a01      	subs	r2, #1
 800457e:	0112      	lsls	r2, r2, #4
 8004580:	4311      	orrs	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004586:	0212      	lsls	r2, r2, #8
 8004588:	4311      	orrs	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800458e:	0852      	lsrs	r2, r2, #1
 8004590:	3a01      	subs	r2, #1
 8004592:	0552      	lsls	r2, r2, #21
 8004594:	4311      	orrs	r1, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800459a:	0852      	lsrs	r2, r2, #1
 800459c:	3a01      	subs	r2, #1
 800459e:	0652      	lsls	r2, r2, #25
 80045a0:	4311      	orrs	r1, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045a6:	06d2      	lsls	r2, r2, #27
 80045a8:	430a      	orrs	r2, r1
 80045aa:	4912      	ldr	r1, [pc, #72]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045b0:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0f      	ldr	r2, [pc, #60]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 80045b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045bc:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a0c      	ldr	r2, [pc, #48]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 80045c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045c8:	f7fe fefe 	bl	80033c8 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fe fefa 	bl	80033c8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e058      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e2:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <HAL_RCC_OscConfig+0x778>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045ee:	e050      	b.n	8004692 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e04f      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
 80045f4:	40021000 	.word	0x40021000
 80045f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fc:	4b27      	ldr	r3, [pc, #156]	; (800469c <HAL_RCC_OscConfig+0x820>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d144      	bne.n	8004692 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_RCC_OscConfig+0x820>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a23      	ldr	r2, [pc, #140]	; (800469c <HAL_RCC_OscConfig+0x820>)
 800460e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004612:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_RCC_OscConfig+0x820>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4a20      	ldr	r2, [pc, #128]	; (800469c <HAL_RCC_OscConfig+0x820>)
 800461a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800461e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004620:	f7fe fed2 	bl	80033c8 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004628:	f7fe fece 	bl	80033c8 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e02c      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463a:	4b18      	ldr	r3, [pc, #96]	; (800469c <HAL_RCC_OscConfig+0x820>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x7ac>
 8004646:	e024      	b.n	8004692 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d01f      	beq.n	800468e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464e:	4b13      	ldr	r3, [pc, #76]	; (800469c <HAL_RCC_OscConfig+0x820>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <HAL_RCC_OscConfig+0x820>)
 8004654:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465a:	f7fe feb5 	bl	80033c8 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004662:	f7fe feb1 	bl	80033c8 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e00f      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCC_OscConfig+0x820>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f0      	bne.n	8004662 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_RCC_OscConfig+0x820>)
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	4905      	ldr	r1, [pc, #20]	; (800469c <HAL_RCC_OscConfig+0x820>)
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_RCC_OscConfig+0x824>)
 8004688:	4013      	ands	r3, r2
 800468a:	60cb      	str	r3, [r1, #12]
 800468c:	e001      	b.n	8004692 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000
 80046a0:	feeefffc 	.word	0xfeeefffc

080046a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0e7      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046b8:	4b75      	ldr	r3, [pc, #468]	; (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d910      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c6:	4b72      	ldr	r3, [pc, #456]	; (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 0207 	bic.w	r2, r3, #7
 80046ce:	4970      	ldr	r1, [pc, #448]	; (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b6e      	ldr	r3, [pc, #440]	; (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0cf      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d010      	beq.n	8004716 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	4b66      	ldr	r3, [pc, #408]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004700:	429a      	cmp	r2, r3
 8004702:	d908      	bls.n	8004716 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004704:	4b63      	ldr	r3, [pc, #396]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4960      	ldr	r1, [pc, #384]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d04c      	beq.n	80047bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472a:	4b5a      	ldr	r3, [pc, #360]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d121      	bne.n	800477a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0a6      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004742:	4b54      	ldr	r3, [pc, #336]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d115      	bne.n	800477a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e09a      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800475a:	4b4e      	ldr	r3, [pc, #312]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e08e      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800476a:	4b4a      	ldr	r3, [pc, #296]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e086      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800477a:	4b46      	ldr	r3, [pc, #280]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 0203 	bic.w	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4943      	ldr	r1, [pc, #268]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478c:	f7fe fe1c 	bl	80033c8 <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	e00a      	b.n	80047aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004794:	f7fe fe18 	bl	80033c8 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e06e      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	4b3a      	ldr	r3, [pc, #232]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 020c 	and.w	r2, r3, #12
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d1eb      	bne.n	8004794 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d010      	beq.n	80047ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	4b31      	ldr	r3, [pc, #196]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d208      	bcs.n	80047ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d8:	4b2e      	ldr	r3, [pc, #184]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	492b      	ldr	r1, [pc, #172]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047ea:	4b29      	ldr	r3, [pc, #164]	; (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d210      	bcs.n	800481a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f8:	4b25      	ldr	r3, [pc, #148]	; (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f023 0207 	bic.w	r2, r3, #7
 8004800:	4923      	ldr	r1, [pc, #140]	; (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004808:	4b21      	ldr	r3, [pc, #132]	; (8004890 <HAL_RCC_ClockConfig+0x1ec>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d001      	beq.n	800481a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e036      	b.n	8004888 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004826:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4918      	ldr	r1, [pc, #96]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004834:	4313      	orrs	r3, r2
 8004836:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004844:	4b13      	ldr	r3, [pc, #76]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4910      	ldr	r1, [pc, #64]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004854:	4313      	orrs	r3, r2
 8004856:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004858:	f000 f824 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <HAL_RCC_ClockConfig+0x1f0>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	490b      	ldr	r1, [pc, #44]	; (8004898 <HAL_RCC_ClockConfig+0x1f4>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	4a09      	ldr	r2, [pc, #36]	; (800489c <HAL_RCC_ClockConfig+0x1f8>)
 8004876:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <HAL_RCC_ClockConfig+0x1fc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd ffad 	bl	80027dc <HAL_InitTick>
 8004882:	4603      	mov	r3, r0
 8004884:	72fb      	strb	r3, [r7, #11]

  return status;
 8004886:	7afb      	ldrb	r3, [r7, #11]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40022000 	.word	0x40022000
 8004894:	40021000 	.word	0x40021000
 8004898:	0800e558 	.word	0x0800e558
 800489c:	20000000 	.word	0x20000000
 80048a0:	2000000c 	.word	0x2000000c

080048a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b089      	sub	sp, #36	; 0x24
 80048a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b2:	4b3e      	ldr	r3, [pc, #248]	; (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x34>
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d121      	bne.n	8004916 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d11e      	bne.n	8004916 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048d8:	4b34      	ldr	r3, [pc, #208]	; (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d107      	bne.n	80048f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048e4:	4b31      	ldr	r3, [pc, #196]	; (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 80048e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ea:	0a1b      	lsrs	r3, r3, #8
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	e005      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048f4:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004900:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004908:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10d      	bne.n	800492c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004914:	e00a      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b04      	cmp	r3, #4
 800491a:	d102      	bne.n	8004922 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800491c:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	e004      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d101      	bne.n	800492c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004928:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800492a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b0c      	cmp	r3, #12
 8004930:	d134      	bne.n	800499c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004932:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d003      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0xa6>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d003      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0xac>
 8004948:	e005      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800494a:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800494c:	617b      	str	r3, [r7, #20]
      break;
 800494e:	e005      	b.n	800495c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004952:	617b      	str	r3, [r7, #20]
      break;
 8004954:	e002      	b.n	800495c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	617b      	str	r3, [r7, #20]
      break;
 800495a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	3301      	adds	r3, #1
 8004968:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	fb03 f202 	mul.w	r2, r3, r2
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004982:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	0e5b      	lsrs	r3, r3, #25
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	3301      	adds	r3, #1
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	fbb2 f3f3 	udiv	r3, r2, r3
 800499a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800499c:	69bb      	ldr	r3, [r7, #24]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3724      	adds	r7, #36	; 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	0800e570 	.word	0x0800e570
 80049b4:	00f42400 	.word	0x00f42400
 80049b8:	007a1200 	.word	0x007a1200

080049bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c2:	681b      	ldr	r3, [r3, #0]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20000000 	.word	0x20000000

080049d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049d8:	f7ff fff0 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	4904      	ldr	r1, [pc, #16]	; (80049fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40021000 	.word	0x40021000
 80049fc:	0800e568 	.word	0x0800e568

08004a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a04:	f7ff ffda 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	0adb      	lsrs	r3, r3, #11
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4904      	ldr	r1, [pc, #16]	; (8004a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	f003 031f 	and.w	r3, r3, #31
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021000 	.word	0x40021000
 8004a28:	0800e568 	.word	0x0800e568

08004a2c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	220f      	movs	r2, #15
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a3c:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <HAL_RCC_GetClockConfig+0x5c>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 0203 	and.w	r2, r3, #3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <HAL_RCC_GetClockConfig+0x5c>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <HAL_RCC_GetClockConfig+0x5c>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <HAL_RCC_GetClockConfig+0x5c>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	08db      	lsrs	r3, r3, #3
 8004a66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <HAL_RCC_GetClockConfig+0x60>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	601a      	str	r2, [r3, #0]
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40022000 	.word	0x40022000

08004a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a98:	2300      	movs	r3, #0
 8004a9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a9c:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004aa8:	f7ff f984 	bl	8003db4 <HAL_PWREx_GetVoltageRange>
 8004aac:	6178      	str	r0, [r7, #20]
 8004aae:	e014      	b.n	8004ada <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ab0:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	4a24      	ldr	r2, [pc, #144]	; (8004b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aba:	6593      	str	r3, [r2, #88]	; 0x58
 8004abc:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ac8:	f7ff f974 	bl	8003db4 <HAL_PWREx_GetVoltageRange>
 8004acc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ace:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad2:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae0:	d10b      	bne.n	8004afa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b80      	cmp	r3, #128	; 0x80
 8004ae6:	d919      	bls.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2ba0      	cmp	r3, #160	; 0xa0
 8004aec:	d902      	bls.n	8004af4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004aee:	2302      	movs	r3, #2
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	e013      	b.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004af4:	2301      	movs	r3, #1
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	e010      	b.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b80      	cmp	r3, #128	; 0x80
 8004afe:	d902      	bls.n	8004b06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b00:	2303      	movs	r3, #3
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	e00a      	b.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b80      	cmp	r3, #128	; 0x80
 8004b0a:	d102      	bne.n	8004b12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	e004      	b.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b70      	cmp	r3, #112	; 0x70
 8004b16:	d101      	bne.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b18:	2301      	movs	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 0207 	bic.w	r2, r3, #7
 8004b24:	4909      	ldr	r1, [pc, #36]	; (8004b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b2c:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d001      	beq.n	8004b3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40022000 	.word	0x40022000

08004b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b58:	2300      	movs	r3, #0
 8004b5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d031      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b74:	d01a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b7a:	d814      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d009      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b84:	d10f      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b86:	4b5d      	ldr	r3, [pc, #372]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	4a5c      	ldr	r2, [pc, #368]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b92:	e00c      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f9de 	bl	8004f5c <RCCEx_PLLSAI1_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ba4:	e003      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	74fb      	strb	r3, [r7, #19]
      break;
 8004baa:	e000      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bae:	7cfb      	ldrb	r3, [r7, #19]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bb4:	4b51      	ldr	r3, [pc, #324]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	494e      	ldr	r1, [pc, #312]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bca:	e001      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 809e 	beq.w	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bde:	2300      	movs	r3, #0
 8004be0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004be2:	4b46      	ldr	r3, [pc, #280]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bf8:	4b40      	ldr	r3, [pc, #256]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfc:	4a3f      	ldr	r2, [pc, #252]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c02:	6593      	str	r3, [r2, #88]	; 0x58
 8004c04:	4b3d      	ldr	r3, [pc, #244]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c10:	2301      	movs	r3, #1
 8004c12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c14:	4b3a      	ldr	r3, [pc, #232]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a39      	ldr	r2, [pc, #228]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c20:	f7fe fbd2 	bl	80033c8 <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c26:	e009      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c28:	f7fe fbce 	bl	80033c8 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d902      	bls.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	74fb      	strb	r3, [r7, #19]
        break;
 8004c3a:	e005      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c3c:	4b30      	ldr	r3, [pc, #192]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0ef      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d15a      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c4e:	4b2b      	ldr	r3, [pc, #172]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01e      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d019      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c6a:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c76:	4b21      	ldr	r3, [pc, #132]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	4a1f      	ldr	r2, [pc, #124]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c86:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	4a1b      	ldr	r2, [pc, #108]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c96:	4a19      	ldr	r2, [pc, #100]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d016      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fe fb8e 	bl	80033c8 <HAL_GetTick>
 8004cac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cae:	e00b      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb0:	f7fe fb8a 	bl	80033c8 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d902      	bls.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	74fb      	strb	r3, [r7, #19]
            break;
 8004cc6:	e006      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0ec      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004cd6:	7cfb      	ldrb	r3, [r7, #19]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cea:	4904      	ldr	r1, [pc, #16]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cf2:	e009      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cf4:	7cfb      	ldrb	r3, [r7, #19]
 8004cf6:	74bb      	strb	r3, [r7, #18]
 8004cf8:	e006      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d08:	7c7b      	ldrb	r3, [r7, #17]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d105      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0e:	4b8a      	ldr	r3, [pc, #552]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d12:	4a89      	ldr	r2, [pc, #548]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d26:	4b84      	ldr	r3, [pc, #528]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	f023 0203 	bic.w	r2, r3, #3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	4980      	ldr	r1, [pc, #512]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d48:	4b7b      	ldr	r3, [pc, #492]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f023 020c 	bic.w	r2, r3, #12
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	4978      	ldr	r1, [pc, #480]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d6a:	4b73      	ldr	r3, [pc, #460]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	496f      	ldr	r1, [pc, #444]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d8c:	4b6a      	ldr	r3, [pc, #424]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	4967      	ldr	r1, [pc, #412]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dae:	4b62      	ldr	r3, [pc, #392]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	495e      	ldr	r1, [pc, #376]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dd0:	4b59      	ldr	r3, [pc, #356]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	4956      	ldr	r1, [pc, #344]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004df2:	4b51      	ldr	r3, [pc, #324]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	494d      	ldr	r1, [pc, #308]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d028      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e14:	4b48      	ldr	r3, [pc, #288]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	4945      	ldr	r1, [pc, #276]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e32:	d106      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e34:	4b40      	ldr	r3, [pc, #256]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4a3f      	ldr	r2, [pc, #252]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3e:	60d3      	str	r3, [r2, #12]
 8004e40:	e011      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e4a:	d10c      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	2101      	movs	r1, #1
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 f882 	bl	8004f5c <RCCEx_PLLSAI1_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004e62:	7cfb      	ldrb	r3, [r7, #19]
 8004e64:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d028      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e72:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	492d      	ldr	r1, [pc, #180]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e90:	d106      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e92:	4b29      	ldr	r3, [pc, #164]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	4a28      	ldr	r2, [pc, #160]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e9c:	60d3      	str	r3, [r2, #12]
 8004e9e:	e011      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3304      	adds	r3, #4
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 f853 	bl	8004f5c <RCCEx_PLLSAI1_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01c      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ed0:	4b19      	ldr	r3, [pc, #100]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ede:	4916      	ldr	r1, [pc, #88]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eee:	d10c      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	2102      	movs	r1, #2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f830 	bl	8004f5c <RCCEx_PLLSAI1_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f00:	7cfb      	ldrb	r3, [r7, #19]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004f06:	7cfb      	ldrb	r3, [r7, #19]
 8004f08:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f16:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f24:	4904      	ldr	r1, [pc, #16]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40021000 	.word	0x40021000

08004f3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a04      	ldr	r2, [pc, #16]	; (8004f58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004f46:	f043 0304 	orr.w	r3, r3, #4
 8004f4a:	6013      	str	r3, [r2, #0]
}
 8004f4c:	bf00      	nop
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000

08004f5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f6a:	4b74      	ldr	r3, [pc, #464]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d018      	beq.n	8004fa8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f76:	4b71      	ldr	r3, [pc, #452]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f003 0203 	and.w	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d10d      	bne.n	8004fa2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
       ||
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f8e:	4b6b      	ldr	r3, [pc, #428]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d047      	beq.n	8005032 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
 8004fa6:	e044      	b.n	8005032 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d018      	beq.n	8004fe2 <RCCEx_PLLSAI1_Config+0x86>
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d825      	bhi.n	8005000 <RCCEx_PLLSAI1_Config+0xa4>
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d002      	beq.n	8004fbe <RCCEx_PLLSAI1_Config+0x62>
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d009      	beq.n	8004fd0 <RCCEx_PLLSAI1_Config+0x74>
 8004fbc:	e020      	b.n	8005000 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fbe:	4b5f      	ldr	r3, [pc, #380]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d11d      	bne.n	8005006 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fce:	e01a      	b.n	8005006 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fd0:	4b5a      	ldr	r3, [pc, #360]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d116      	bne.n	800500a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe0:	e013      	b.n	800500a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fe2:	4b56      	ldr	r3, [pc, #344]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10f      	bne.n	800500e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fee:	4b53      	ldr	r3, [pc, #332]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ffe:	e006      	b.n	800500e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]
      break;
 8005004:	e004      	b.n	8005010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005006:	bf00      	nop
 8005008:	e002      	b.n	8005010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800500a:	bf00      	nop
 800500c:	e000      	b.n	8005010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800500e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10d      	bne.n	8005032 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005016:	4b49      	ldr	r3, [pc, #292]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	3b01      	subs	r3, #1
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	430b      	orrs	r3, r1
 800502c:	4943      	ldr	r1, [pc, #268]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 800502e:	4313      	orrs	r3, r2
 8005030:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d17c      	bne.n	8005132 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005038:	4b40      	ldr	r3, [pc, #256]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a3f      	ldr	r2, [pc, #252]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 800503e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005044:	f7fe f9c0 	bl	80033c8 <HAL_GetTick>
 8005048:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800504a:	e009      	b.n	8005060 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800504c:	f7fe f9bc 	bl	80033c8 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d902      	bls.n	8005060 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	73fb      	strb	r3, [r7, #15]
        break;
 800505e:	e005      	b.n	800506c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005060:	4b36      	ldr	r3, [pc, #216]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ef      	bne.n	800504c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d15f      	bne.n	8005132 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d110      	bne.n	800509a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005078:	4b30      	ldr	r3, [pc, #192]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6892      	ldr	r2, [r2, #8]
 8005088:	0211      	lsls	r1, r2, #8
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68d2      	ldr	r2, [r2, #12]
 800508e:	06d2      	lsls	r2, r2, #27
 8005090:	430a      	orrs	r2, r1
 8005092:	492a      	ldr	r1, [pc, #168]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005094:	4313      	orrs	r3, r2
 8005096:	610b      	str	r3, [r1, #16]
 8005098:	e027      	b.n	80050ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d112      	bne.n	80050c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050a0:	4b26      	ldr	r3, [pc, #152]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6892      	ldr	r2, [r2, #8]
 80050b0:	0211      	lsls	r1, r2, #8
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6912      	ldr	r2, [r2, #16]
 80050b6:	0852      	lsrs	r2, r2, #1
 80050b8:	3a01      	subs	r2, #1
 80050ba:	0552      	lsls	r2, r2, #21
 80050bc:	430a      	orrs	r2, r1
 80050be:	491f      	ldr	r1, [pc, #124]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	610b      	str	r3, [r1, #16]
 80050c4:	e011      	b.n	80050ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050c6:	4b1d      	ldr	r3, [pc, #116]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6892      	ldr	r2, [r2, #8]
 80050d6:	0211      	lsls	r1, r2, #8
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6952      	ldr	r2, [r2, #20]
 80050dc:	0852      	lsrs	r2, r2, #1
 80050de:	3a01      	subs	r2, #1
 80050e0:	0652      	lsls	r2, r2, #25
 80050e2:	430a      	orrs	r2, r1
 80050e4:	4915      	ldr	r1, [pc, #84]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050ea:	4b14      	ldr	r3, [pc, #80]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f6:	f7fe f967 	bl	80033c8 <HAL_GetTick>
 80050fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050fc:	e009      	b.n	8005112 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050fe:	f7fe f963 	bl	80033c8 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d902      	bls.n	8005112 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	73fb      	strb	r3, [r7, #15]
          break;
 8005110:	e005      	b.n	800511e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005112:	4b0a      	ldr	r3, [pc, #40]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0ef      	beq.n	80050fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	4903      	ldr	r1, [pc, #12]	; (800513c <RCCEx_PLLSAI1_Config+0x1e0>)
 800512e:	4313      	orrs	r3, r2
 8005130:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005132:	7bfb      	ldrb	r3, [r7, #15]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000

08005140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e049      	b.n	80051e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f841 	bl	80051ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3304      	adds	r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f000 ff0e 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d001      	beq.n	800521c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e03b      	b.n	8005294 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_TIM_Base_Start_IT+0x4e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d004      	beq.n	8005252 <HAL_TIM_Base_Start_IT+0x4e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a15      	ldr	r2, [pc, #84]	; (80052a4 <HAL_TIM_Base_Start_IT+0xa0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d115      	bne.n	800527e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800525a:	4013      	ands	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b06      	cmp	r3, #6
 8005262:	d015      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x8c>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526a:	d011      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527c:	e008      	b.n	8005290 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0201 	orr.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e000      	b.n	8005292 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40014000 	.word	0x40014000
 80052a8:	00010007 	.word	0x00010007

080052ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e049      	b.n	8005352 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fd fc54 	bl	8002b80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f000 fe58 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d109      	bne.n	8005388 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e03c      	b.n	8005402 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b04      	cmp	r3, #4
 800538c:	d109      	bne.n	80053a2 <HAL_TIM_PWM_Start_DMA+0x46>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	bf0c      	ite	eq
 800539a:	2301      	moveq	r3, #1
 800539c:	2300      	movne	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e02f      	b.n	8005402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d109      	bne.n	80053bc <HAL_TIM_PWM_Start_DMA+0x60>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e022      	b.n	8005402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b0c      	cmp	r3, #12
 80053c0:	d109      	bne.n	80053d6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	bf0c      	ite	eq
 80053ce:	2301      	moveq	r3, #1
 80053d0:	2300      	movne	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	e015      	b.n	8005402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d109      	bne.n	80053f0 <HAL_TIM_PWM_Start_DMA+0x94>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e008      	b.n	8005402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005406:	2302      	movs	r3, #2
 8005408:	e18d      	b.n	8005726 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	e03c      	b.n	800549e <HAL_TIM_PWM_Start_DMA+0x142>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b04      	cmp	r3, #4
 8005428:	d109      	bne.n	800543e <HAL_TIM_PWM_Start_DMA+0xe2>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	e02f      	b.n	800549e <HAL_TIM_PWM_Start_DMA+0x142>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d109      	bne.n	8005458 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e022      	b.n	800549e <HAL_TIM_PWM_Start_DMA+0x142>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b0c      	cmp	r3, #12
 800545c:	d109      	bne.n	8005472 <HAL_TIM_PWM_Start_DMA+0x116>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b01      	cmp	r3, #1
 8005468:	bf0c      	ite	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	2300      	movne	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	e015      	b.n	800549e <HAL_TIM_PWM_Start_DMA+0x142>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b10      	cmp	r3, #16
 8005476:	d109      	bne.n	800548c <HAL_TIM_PWM_Start_DMA+0x130>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	bf0c      	ite	eq
 8005484:	2301      	moveq	r3, #1
 8005486:	2300      	movne	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e008      	b.n	800549e <HAL_TIM_PWM_Start_DMA+0x142>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	bf0c      	ite	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	2300      	movne	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d034      	beq.n	800550c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_TIM_PWM_Start_DMA+0x152>
 80054a8:	887b      	ldrh	r3, [r7, #2]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e139      	b.n	8005726 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_PWM_Start_DMA+0x166>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c0:	e026      	b.n	8005510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_PWM_Start_DMA+0x176>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d0:	e01e      	b.n	8005510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_PWM_Start_DMA+0x186>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e0:	e016      	b.n	8005510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b0c      	cmp	r3, #12
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_PWM_Start_DMA+0x196>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054f0:	e00e      	b.n	8005510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005500:	e006      	b.n	8005510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800550a:	e001      	b.n	8005510 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e10a      	b.n	8005726 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b0c      	cmp	r3, #12
 8005514:	f200 80ae 	bhi.w	8005674 <HAL_TIM_PWM_Start_DMA+0x318>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005555 	.word	0x08005555
 8005524:	08005675 	.word	0x08005675
 8005528:	08005675 	.word	0x08005675
 800552c:	08005675 	.word	0x08005675
 8005530:	0800559d 	.word	0x0800559d
 8005534:	08005675 	.word	0x08005675
 8005538:	08005675 	.word	0x08005675
 800553c:	08005675 	.word	0x08005675
 8005540:	080055e5 	.word	0x080055e5
 8005544:	08005675 	.word	0x08005675
 8005548:	08005675 	.word	0x08005675
 800554c:	08005675 	.word	0x08005675
 8005550:	0800562d 	.word	0x0800562d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	4a75      	ldr	r2, [pc, #468]	; (8005730 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800555a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	4a74      	ldr	r2, [pc, #464]	; (8005734 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005562:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	4a73      	ldr	r2, [pc, #460]	; (8005738 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800556a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3334      	adds	r3, #52	; 0x34
 8005578:	461a      	mov	r2, r3
 800557a:	887b      	ldrh	r3, [r7, #2]
 800557c:	f7fe f8ca 	bl	8003714 <HAL_DMA_Start_IT>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0cd      	b.n	8005726 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005598:	60da      	str	r2, [r3, #12]
      break;
 800559a:	e06e      	b.n	800567a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	4a63      	ldr	r2, [pc, #396]	; (8005730 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80055a2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	4a62      	ldr	r2, [pc, #392]	; (8005734 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	4a61      	ldr	r2, [pc, #388]	; (8005738 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80055b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3338      	adds	r3, #56	; 0x38
 80055c0:	461a      	mov	r2, r3
 80055c2:	887b      	ldrh	r3, [r7, #2]
 80055c4:	f7fe f8a6 	bl	8003714 <HAL_DMA_Start_IT>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0a9      	b.n	8005726 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055e0:	60da      	str	r2, [r3, #12]
      break;
 80055e2:	e04a      	b.n	800567a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	4a51      	ldr	r2, [pc, #324]	; (8005730 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80055ea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	4a50      	ldr	r2, [pc, #320]	; (8005734 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	4a4f      	ldr	r2, [pc, #316]	; (8005738 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80055fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	333c      	adds	r3, #60	; 0x3c
 8005608:	461a      	mov	r2, r3
 800560a:	887b      	ldrh	r3, [r7, #2]
 800560c:	f7fe f882 	bl	8003714 <HAL_DMA_Start_IT>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e085      	b.n	8005726 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005628:	60da      	str	r2, [r3, #12]
      break;
 800562a:	e026      	b.n	800567a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	4a3f      	ldr	r2, [pc, #252]	; (8005730 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005632:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	4a3e      	ldr	r2, [pc, #248]	; (8005734 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800563a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	4a3d      	ldr	r2, [pc, #244]	; (8005738 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005642:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3340      	adds	r3, #64	; 0x40
 8005650:	461a      	mov	r2, r3
 8005652:	887b      	ldrh	r3, [r7, #2]
 8005654:	f7fe f85e 	bl	8003714 <HAL_DMA_Start_IT>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e061      	b.n	8005726 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005670:	60da      	str	r2, [r3, #12]
      break;
 8005672:	e002      	b.n	800567a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	75fb      	strb	r3, [r7, #23]
      break;
 8005678:	bf00      	nop
  }

  if (status == HAL_OK)
 800567a:	7dfb      	ldrb	r3, [r7, #23]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d151      	bne.n	8005724 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2201      	movs	r2, #1
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 ff6b 	bl	8006564 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a2a      	ldr	r2, [pc, #168]	; (800573c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_TIM_PWM_Start_DMA+0x350>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a28      	ldr	r2, [pc, #160]	; (8005740 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_TIM_PWM_Start_DMA+0x350>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a27      	ldr	r2, [pc, #156]	; (8005744 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_TIM_PWM_Start_DMA+0x354>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x356>
 80056b0:	2300      	movs	r3, #0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1c      	ldr	r2, [pc, #112]	; (800573c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d009      	beq.n	80056e4 <HAL_TIM_PWM_Start_DMA+0x388>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d8:	d004      	beq.n	80056e4 <HAL_TIM_PWM_Start_DMA+0x388>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a18      	ldr	r2, [pc, #96]	; (8005740 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d115      	bne.n	8005710 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	4b17      	ldr	r3, [pc, #92]	; (8005748 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d015      	beq.n	8005722 <HAL_TIM_PWM_Start_DMA+0x3c6>
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d011      	beq.n	8005722 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0201 	orr.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570e:	e008      	b.n	8005722 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e000      	b.n	8005724 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005722:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	08005e8f 	.word	0x08005e8f
 8005734:	08005f37 	.word	0x08005f37
 8005738:	08005dfd 	.word	0x08005dfd
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	00010007 	.word	0x00010007

0800574c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b0c      	cmp	r3, #12
 800575e:	d855      	bhi.n	800580c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800579d 	.word	0x0800579d
 800576c:	0800580d 	.word	0x0800580d
 8005770:	0800580d 	.word	0x0800580d
 8005774:	0800580d 	.word	0x0800580d
 8005778:	080057b9 	.word	0x080057b9
 800577c:	0800580d 	.word	0x0800580d
 8005780:	0800580d 	.word	0x0800580d
 8005784:	0800580d 	.word	0x0800580d
 8005788:	080057d5 	.word	0x080057d5
 800578c:	0800580d 	.word	0x0800580d
 8005790:	0800580d 	.word	0x0800580d
 8005794:	0800580d 	.word	0x0800580d
 8005798:	080057f1 	.word	0x080057f1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fe f84d 	bl	8003850 <HAL_DMA_Abort_IT>
      break;
 80057b6:	e02c      	b.n	8005812 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fe f83f 	bl	8003850 <HAL_DMA_Abort_IT>
      break;
 80057d2:	e01e      	b.n	8005812 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe f831 	bl	8003850 <HAL_DMA_Abort_IT>
      break;
 80057ee:	e010      	b.n	8005812 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	4618      	mov	r0, r3
 8005806:	f7fe f823 	bl	8003850 <HAL_DMA_Abort_IT>
      break;
 800580a:	e002      	b.n	8005812 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
      break;
 8005810:	bf00      	nop
  }

  if (status == HAL_OK)
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d176      	bne.n	8005906 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2200      	movs	r2, #0
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fe9f 	bl	8006564 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a39      	ldr	r2, [pc, #228]	; (8005910 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d009      	beq.n	8005844 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a37      	ldr	r2, [pc, #220]	; (8005914 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a36      	ldr	r2, [pc, #216]	; (8005918 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d101      	bne.n	8005848 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8005848:	2300      	movs	r3, #0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d017      	beq.n	800587e <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	f241 1311 	movw	r3, #4369	; 0x1111
 8005858:	4013      	ands	r3, r2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10f      	bne.n	800587e <HAL_TIM_PWM_Stop_DMA+0x132>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6a1a      	ldr	r2, [r3, #32]
 8005864:	f240 4344 	movw	r3, #1092	; 0x444
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d107      	bne.n	800587e <HAL_TIM_PWM_Stop_DMA+0x132>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800587c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6a1a      	ldr	r2, [r3, #32]
 8005884:	f241 1311 	movw	r3, #4369	; 0x1111
 8005888:	4013      	ands	r3, r2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10f      	bne.n	80058ae <HAL_TIM_PWM_Stop_DMA+0x162>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6a1a      	ldr	r2, [r3, #32]
 8005894:	f240 4344 	movw	r3, #1092	; 0x444
 8005898:	4013      	ands	r3, r2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d107      	bne.n	80058ae <HAL_TIM_PWM_Stop_DMA+0x162>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d104      	bne.n	80058be <HAL_TIM_PWM_Stop_DMA+0x172>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058bc:	e023      	b.n	8005906 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d104      	bne.n	80058ce <HAL_TIM_PWM_Stop_DMA+0x182>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058cc:	e01b      	b.n	8005906 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Stop_DMA+0x192>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058dc:	e013      	b.n	8005906 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b0c      	cmp	r3, #12
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058ec:	e00b      	b.n	8005906 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058fc:	e003      	b.n	8005906 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400

0800591c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b02      	cmp	r3, #2
 8005930:	d122      	bne.n	8005978 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b02      	cmp	r3, #2
 800593e:	d11b      	bne.n	8005978 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0202 	mvn.w	r2, #2
 8005948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa1a 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fa0c 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fa1d 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b04      	cmp	r3, #4
 8005984:	d122      	bne.n	80059cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b04      	cmp	r3, #4
 8005992:	d11b      	bne.n	80059cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0204 	mvn.w	r2, #4
 800599c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f9f0 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 80059b8:	e005      	b.n	80059c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f9e2 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f9f3 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d122      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d11b      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0208 	mvn.w	r2, #8
 80059f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2204      	movs	r2, #4
 80059f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f9c6 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005a0c:	e005      	b.n	8005a1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9b8 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f9c9 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d122      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d11b      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0210 	mvn.w	r2, #16
 8005a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2208      	movs	r2, #8
 8005a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f99c 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005a60:	e005      	b.n	8005a6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f98e 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f99f 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d10e      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d107      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0201 	mvn.w	r2, #1
 8005a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fb fc02 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aaa:	2b80      	cmp	r3, #128	; 0x80
 8005aac:	d10e      	bne.n	8005acc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab8:	2b80      	cmp	r3, #128	; 0x80
 8005aba:	d107      	bne.n	8005acc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fe5a 	bl	8006780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ada:	d10e      	bne.n	8005afa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	2b80      	cmp	r3, #128	; 0x80
 8005ae8:	d107      	bne.n	8005afa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fe4d 	bl	8006794 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d10e      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b40      	cmp	r3, #64	; 0x40
 8005b14:	d107      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f957 	bl	8005dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d10e      	bne.n	8005b52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	d107      	bne.n	8005b52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f06f 0220 	mvn.w	r2, #32
 8005b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fe0d 	bl	800676c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e0ff      	b.n	8005d7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b14      	cmp	r3, #20
 8005b86:	f200 80f0 	bhi.w	8005d6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b8a:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005be5 	.word	0x08005be5
 8005b94:	08005d6b 	.word	0x08005d6b
 8005b98:	08005d6b 	.word	0x08005d6b
 8005b9c:	08005d6b 	.word	0x08005d6b
 8005ba0:	08005c25 	.word	0x08005c25
 8005ba4:	08005d6b 	.word	0x08005d6b
 8005ba8:	08005d6b 	.word	0x08005d6b
 8005bac:	08005d6b 	.word	0x08005d6b
 8005bb0:	08005c67 	.word	0x08005c67
 8005bb4:	08005d6b 	.word	0x08005d6b
 8005bb8:	08005d6b 	.word	0x08005d6b
 8005bbc:	08005d6b 	.word	0x08005d6b
 8005bc0:	08005ca7 	.word	0x08005ca7
 8005bc4:	08005d6b 	.word	0x08005d6b
 8005bc8:	08005d6b 	.word	0x08005d6b
 8005bcc:	08005d6b 	.word	0x08005d6b
 8005bd0:	08005ce9 	.word	0x08005ce9
 8005bd4:	08005d6b 	.word	0x08005d6b
 8005bd8:	08005d6b 	.word	0x08005d6b
 8005bdc:	08005d6b 	.word	0x08005d6b
 8005be0:	08005d29 	.word	0x08005d29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fa3c 	bl	8006068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0208 	orr.w	r2, r2, #8
 8005bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0204 	bic.w	r2, r2, #4
 8005c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6999      	ldr	r1, [r3, #24]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	619a      	str	r2, [r3, #24]
      break;
 8005c22:	e0a5      	b.n	8005d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fa98 	bl	8006160 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6999      	ldr	r1, [r3, #24]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	021a      	lsls	r2, r3, #8
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	619a      	str	r2, [r3, #24]
      break;
 8005c64:	e084      	b.n	8005d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 faf1 	bl	8006254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69da      	ldr	r2, [r3, #28]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f042 0208 	orr.w	r2, r2, #8
 8005c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0204 	bic.w	r2, r2, #4
 8005c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69d9      	ldr	r1, [r3, #28]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	61da      	str	r2, [r3, #28]
      break;
 8005ca4:	e064      	b.n	8005d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fb49 	bl	8006344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69d9      	ldr	r1, [r3, #28]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	021a      	lsls	r2, r3, #8
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	61da      	str	r2, [r3, #28]
      break;
 8005ce6:	e043      	b.n	8005d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fb86 	bl	8006400 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0208 	orr.w	r2, r2, #8
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0204 	bic.w	r2, r2, #4
 8005d12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	691a      	ldr	r2, [r3, #16]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d26:	e023      	b.n	8005d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fbbe 	bl	80064b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	021a      	lsls	r2, r3, #8
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d68:	e002      	b.n	8005d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop

08005d84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d107      	bne.n	8005e24 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e22:	e02a      	b.n	8005e7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d107      	bne.n	8005e3e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2202      	movs	r2, #2
 8005e32:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e3c:	e01d      	b.n	8005e7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d107      	bne.n	8005e58 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e56:	e010      	b.n	8005e7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d107      	bne.n	8005e72 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2208      	movs	r2, #8
 8005e66:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e70:	e003      	b.n	8005e7a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff ffb4 	bl	8005de8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	771a      	strb	r2, [r3, #28]
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d10b      	bne.n	8005ebe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d136      	bne.n	8005f22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ebc:	e031      	b.n	8005f22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d10b      	bne.n	8005ee0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d125      	bne.n	8005f22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ede:	e020      	b.n	8005f22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d10b      	bne.n	8005f02 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2204      	movs	r2, #4
 8005eee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d114      	bne.n	8005f22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f00:	e00f      	b.n	8005f22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d10a      	bne.n	8005f22 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2208      	movs	r2, #8
 8005f10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff ff42 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	771a      	strb	r2, [r3, #28]
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d103      	bne.n	8005f56 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	771a      	strb	r2, [r3, #28]
 8005f54:	e019      	b.n	8005f8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d103      	bne.n	8005f68 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2202      	movs	r2, #2
 8005f64:	771a      	strb	r2, [r3, #28]
 8005f66:	e010      	b.n	8005f8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d103      	bne.n	8005f7a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2204      	movs	r2, #4
 8005f76:	771a      	strb	r2, [r3, #28]
 8005f78:	e007      	b.n	8005f8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d102      	bne.n	8005f8a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2208      	movs	r2, #8
 8005f88:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7ff ff18 	bl	8005dc0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	771a      	strb	r2, [r3, #28]
}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a2a      	ldr	r2, [pc, #168]	; (800605c <TIM_Base_SetConfig+0xbc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d003      	beq.n	8005fc0 <TIM_Base_SetConfig+0x20>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbe:	d108      	bne.n	8005fd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a21      	ldr	r2, [pc, #132]	; (800605c <TIM_Base_SetConfig+0xbc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x52>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe0:	d007      	beq.n	8005ff2 <TIM_Base_SetConfig+0x52>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a1e      	ldr	r2, [pc, #120]	; (8006060 <TIM_Base_SetConfig+0xc0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_Base_SetConfig+0x52>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <TIM_Base_SetConfig+0xc4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d108      	bne.n	8006004 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a0c      	ldr	r2, [pc, #48]	; (800605c <TIM_Base_SetConfig+0xbc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d007      	beq.n	8006040 <TIM_Base_SetConfig+0xa0>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a0b      	ldr	r2, [pc, #44]	; (8006060 <TIM_Base_SetConfig+0xc0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_Base_SetConfig+0xa0>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a0a      	ldr	r2, [pc, #40]	; (8006064 <TIM_Base_SetConfig+0xc4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d103      	bne.n	8006048 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	615a      	str	r2, [r3, #20]
}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400

08006068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f023 0201 	bic.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f023 0302 	bic.w	r3, r3, #2
 80060b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a24      	ldr	r2, [pc, #144]	; (8006154 <TIM_OC1_SetConfig+0xec>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d007      	beq.n	80060d8 <TIM_OC1_SetConfig+0x70>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a23      	ldr	r2, [pc, #140]	; (8006158 <TIM_OC1_SetConfig+0xf0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d003      	beq.n	80060d8 <TIM_OC1_SetConfig+0x70>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a22      	ldr	r2, [pc, #136]	; (800615c <TIM_OC1_SetConfig+0xf4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d10c      	bne.n	80060f2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f023 0308 	bic.w	r3, r3, #8
 80060de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f023 0304 	bic.w	r3, r3, #4
 80060f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a17      	ldr	r2, [pc, #92]	; (8006154 <TIM_OC1_SetConfig+0xec>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d007      	beq.n	800610a <TIM_OC1_SetConfig+0xa2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a16      	ldr	r2, [pc, #88]	; (8006158 <TIM_OC1_SetConfig+0xf0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d003      	beq.n	800610a <TIM_OC1_SetConfig+0xa2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a15      	ldr	r2, [pc, #84]	; (800615c <TIM_OC1_SetConfig+0xf4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d111      	bne.n	800612e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	621a      	str	r2, [r3, #32]
}
 8006148:	bf00      	nop
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	40012c00 	.word	0x40012c00
 8006158:	40014000 	.word	0x40014000
 800615c:	40014400 	.word	0x40014400

08006160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f023 0210 	bic.w	r2, r3, #16
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800618e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	021b      	lsls	r3, r3, #8
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f023 0320 	bic.w	r3, r3, #32
 80061ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a22      	ldr	r2, [pc, #136]	; (8006248 <TIM_OC2_SetConfig+0xe8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d10d      	bne.n	80061e0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a19      	ldr	r2, [pc, #100]	; (8006248 <TIM_OC2_SetConfig+0xe8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d007      	beq.n	80061f8 <TIM_OC2_SetConfig+0x98>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a18      	ldr	r2, [pc, #96]	; (800624c <TIM_OC2_SetConfig+0xec>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d003      	beq.n	80061f8 <TIM_OC2_SetConfig+0x98>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a17      	ldr	r2, [pc, #92]	; (8006250 <TIM_OC2_SetConfig+0xf0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d113      	bne.n	8006220 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4313      	orrs	r3, r2
 8006212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	621a      	str	r2, [r3, #32]
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40014000 	.word	0x40014000
 8006250:	40014400 	.word	0x40014400

08006254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0303 	bic.w	r3, r3, #3
 800628e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a21      	ldr	r2, [pc, #132]	; (8006338 <TIM_OC3_SetConfig+0xe4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d10d      	bne.n	80062d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a18      	ldr	r2, [pc, #96]	; (8006338 <TIM_OC3_SetConfig+0xe4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d007      	beq.n	80062ea <TIM_OC3_SetConfig+0x96>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a17      	ldr	r2, [pc, #92]	; (800633c <TIM_OC3_SetConfig+0xe8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d003      	beq.n	80062ea <TIM_OC3_SetConfig+0x96>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a16      	ldr	r2, [pc, #88]	; (8006340 <TIM_OC3_SetConfig+0xec>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d113      	bne.n	8006312 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	621a      	str	r2, [r3, #32]
}
 800632c:	bf00      	nop
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	40012c00 	.word	0x40012c00
 800633c:	40014000 	.word	0x40014000
 8006340:	40014400 	.word	0x40014400

08006344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800637e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	021b      	lsls	r3, r3, #8
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	031b      	lsls	r3, r3, #12
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a14      	ldr	r2, [pc, #80]	; (80063f4 <TIM_OC4_SetConfig+0xb0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d007      	beq.n	80063b8 <TIM_OC4_SetConfig+0x74>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a13      	ldr	r2, [pc, #76]	; (80063f8 <TIM_OC4_SetConfig+0xb4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_OC4_SetConfig+0x74>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a12      	ldr	r2, [pc, #72]	; (80063fc <TIM_OC4_SetConfig+0xb8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d109      	bne.n	80063cc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	019b      	lsls	r3, r3, #6
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	621a      	str	r2, [r3, #32]
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40012c00 	.word	0x40012c00
 80063f8:	40014000 	.word	0x40014000
 80063fc:	40014400 	.word	0x40014400

08006400 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800642e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006444:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	041b      	lsls	r3, r3, #16
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <TIM_OC5_SetConfig+0xa4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d007      	beq.n	800646a <TIM_OC5_SetConfig+0x6a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a12      	ldr	r2, [pc, #72]	; (80064a8 <TIM_OC5_SetConfig+0xa8>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d003      	beq.n	800646a <TIM_OC5_SetConfig+0x6a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a11      	ldr	r2, [pc, #68]	; (80064ac <TIM_OC5_SetConfig+0xac>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d109      	bne.n	800647e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006470:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	621a      	str	r2, [r3, #32]
}
 8006498:	bf00      	nop
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40014000 	.word	0x40014000
 80064ac:	40014400 	.word	0x40014400

080064b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	051b      	lsls	r3, r3, #20
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a14      	ldr	r2, [pc, #80]	; (8006558 <TIM_OC6_SetConfig+0xa8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d007      	beq.n	800651c <TIM_OC6_SetConfig+0x6c>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a13      	ldr	r2, [pc, #76]	; (800655c <TIM_OC6_SetConfig+0xac>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC6_SetConfig+0x6c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a12      	ldr	r2, [pc, #72]	; (8006560 <TIM_OC6_SetConfig+0xb0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d109      	bne.n	8006530 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	029b      	lsls	r3, r3, #10
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	40012c00 	.word	0x40012c00
 800655c:	40014000 	.word	0x40014000
 8006560:	40014400 	.word	0x40014400

08006564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	2201      	movs	r2, #1
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a1a      	ldr	r2, [r3, #32]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	43db      	mvns	r3, r3
 8006586:	401a      	ands	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a1a      	ldr	r2, [r3, #32]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	fa01 f303 	lsl.w	r3, r1, r3
 800659c:	431a      	orrs	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	621a      	str	r2, [r3, #32]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
	...

080065b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e04f      	b.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a21      	ldr	r2, [pc, #132]	; (8006674 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d108      	bne.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a14      	ldr	r2, [pc, #80]	; (8006674 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d009      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006630:	d004      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a10      	ldr	r2, [pc, #64]	; (8006678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d10c      	bne.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006642:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	4313      	orrs	r3, r2
 800664c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40014000 	.word	0x40014000

0800667c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006694:	2302      	movs	r3, #2
 8006696:	e060      	b.n	800675a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	041b      	lsls	r3, r3, #16
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a14      	ldr	r2, [pc, #80]	; (8006768 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d115      	bne.n	8006748 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	051b      	lsls	r3, r3, #20
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40012c00 	.word	0x40012c00

0800676c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e040      	b.n	800683c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fc facc 	bl	8002d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2224      	movs	r2, #36	; 0x24
 80067d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fce6 	bl	80071b8 <UART_SetConfig>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e022      	b.n	800683c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 ff06 	bl	8007610 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 ff8d 	bl	8007754 <UART_CheckIdleState>
 800683a:	4603      	mov	r3, r0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	; 0x28
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	4613      	mov	r3, r2
 8006852:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006858:	2b20      	cmp	r3, #32
 800685a:	f040 8082 	bne.w	8006962 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_UART_Transmit+0x26>
 8006864:	88fb      	ldrh	r3, [r7, #6]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e07a      	b.n	8006964 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_UART_Transmit+0x38>
 8006878:	2302      	movs	r3, #2
 800687a:	e073      	b.n	8006964 <HAL_UART_Transmit+0x120>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2221      	movs	r2, #33	; 0x21
 8006890:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006892:	f7fc fd99 	bl	80033c8 <HAL_GetTick>
 8006896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	88fa      	ldrh	r2, [r7, #6]
 800689c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	88fa      	ldrh	r2, [r7, #6]
 80068a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b0:	d108      	bne.n	80068c4 <HAL_UART_Transmit+0x80>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	e003      	b.n	80068cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068c8:	2300      	movs	r3, #0
 80068ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80068d4:	e02d      	b.n	8006932 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2200      	movs	r2, #0
 80068de:	2180      	movs	r1, #128	; 0x80
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 ff80 	bl	80077e6 <UART_WaitOnFlagUntilTimeout>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e039      	b.n	8006964 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10b      	bne.n	800690e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	881a      	ldrh	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006902:	b292      	uxth	r2, r2
 8006904:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	3302      	adds	r3, #2
 800690a:	61bb      	str	r3, [r7, #24]
 800690c:	e008      	b.n	8006920 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	b292      	uxth	r2, r2
 8006918:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	3301      	adds	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1cb      	bne.n	80068d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2200      	movs	r2, #0
 8006946:	2140      	movs	r1, #64	; 0x40
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 ff4c 	bl	80077e6 <UART_WaitOnFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e005      	b.n	8006964 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	e000      	b.n	8006964 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006962:	2302      	movs	r3, #2
  }
}
 8006964:	4618      	mov	r0, r3
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800696c:	b480      	push	{r7}
 800696e:	b08b      	sub	sp, #44	; 0x2c
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800697e:	2b20      	cmp	r3, #32
 8006980:	d156      	bne.n	8006a30 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <HAL_UART_Transmit_IT+0x22>
 8006988:	88fb      	ldrh	r3, [r7, #6]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e04f      	b.n	8006a32 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_UART_Transmit_IT+0x34>
 800699c:	2302      	movs	r3, #2
 800699e:	e048      	b.n	8006a32 <HAL_UART_Transmit_IT+0xc6>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	88fa      	ldrh	r2, [r7, #6]
 80069b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	88fa      	ldrh	r2, [r7, #6]
 80069ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2221      	movs	r2, #33	; 0x21
 80069d0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069da:	d107      	bne.n	80069ec <HAL_UART_Transmit_IT+0x80>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d103      	bne.n	80069ec <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4a16      	ldr	r2, [pc, #88]	; (8006a40 <HAL_UART_Transmit_IT+0xd4>)
 80069e8:	669a      	str	r2, [r3, #104]	; 0x68
 80069ea:	e002      	b.n	80069f2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a15      	ldr	r2, [pc, #84]	; (8006a44 <HAL_UART_Transmit_IT+0xd8>)
 80069f0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	613b      	str	r3, [r7, #16]
   return(result);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	623b      	str	r3, [r7, #32]
 8006a1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	69f9      	ldr	r1, [r7, #28]
 8006a1e:	6a3a      	ldr	r2, [r7, #32]
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e6      	bne.n	80069fa <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e000      	b.n	8006a32 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006a30:	2302      	movs	r3, #2
  }
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	372c      	adds	r7, #44	; 0x2c
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	0800801f 	.word	0x0800801f
 8006a44:	08007f67 	.word	0x08007f67

08006a48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	; 0x28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	4613      	mov	r3, r2
 8006a54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d142      	bne.n	8006ae4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <HAL_UART_Receive_IT+0x22>
 8006a64:	88fb      	ldrh	r3, [r7, #6]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e03b      	b.n	8006ae6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_UART_Receive_IT+0x34>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e034      	b.n	8006ae6 <HAL_UART_Receive_IT+0x9e>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a18      	ldr	r2, [pc, #96]	; (8006af0 <HAL_UART_Receive_IT+0xa8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d01f      	beq.n	8006ad4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d018      	beq.n	8006ad4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	623b      	str	r3, [r7, #32]
 8006ac2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	69f9      	ldr	r1, [r7, #28]
 8006ac6:	6a3a      	ldr	r2, [r7, #32]
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e6      	bne.n	8006aa2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 ff48 	bl	8007970 <UART_Start_Receive_IT>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	e000      	b.n	8006ae6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006ae4:	2302      	movs	r3, #2
  }
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3728      	adds	r7, #40	; 0x28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	40008000 	.word	0x40008000

08006af4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	; 0x28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	4613      	mov	r3, r2
 8006b00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d142      	bne.n	8006b90 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_UART_Receive_DMA+0x22>
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e03b      	b.n	8006b92 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_UART_Receive_DMA+0x34>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e034      	b.n	8006b92 <HAL_UART_Receive_DMA+0x9e>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a18      	ldr	r2, [pc, #96]	; (8006b9c <HAL_UART_Receive_DMA+0xa8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d01f      	beq.n	8006b80 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d018      	beq.n	8006b80 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	623b      	str	r3, [r7, #32]
 8006b6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	69f9      	ldr	r1, [r7, #28]
 8006b72:	6a3a      	ldr	r2, [r7, #32]
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e6      	bne.n	8006b4e <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	461a      	mov	r2, r3
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 ffbc 	bl	8007b04 <UART_Start_Receive_DMA>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	e000      	b.n	8006b92 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006b90:	2302      	movs	r3, #2
  }
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3728      	adds	r7, #40	; 0x28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40008000 	.word	0x40008000

08006ba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b0ba      	sub	sp, #232	; 0xe8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bca:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bce:	4013      	ands	r3, r2
 8006bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d115      	bne.n	8006c08 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00f      	beq.n	8006c08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bec:	f003 0320 	and.w	r3, r3, #32
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 82a6 	beq.w	800714a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4798      	blx	r3
      }
      return;
 8006c06:	e2a0      	b.n	800714a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 8117 	beq.w	8006e40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c22:	4b85      	ldr	r3, [pc, #532]	; (8006e38 <HAL_UART_IRQHandler+0x298>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 810a 	beq.w	8006e40 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d011      	beq.n	8006c5c <HAL_UART_IRQHandler+0xbc>
 8006c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c52:	f043 0201 	orr.w	r2, r3, #1
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d011      	beq.n	8006c8c <HAL_UART_IRQHandler+0xec>
 8006c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c82:	f043 0204 	orr.w	r2, r3, #4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d011      	beq.n	8006cbc <HAL_UART_IRQHandler+0x11c>
 8006c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2204      	movs	r2, #4
 8006caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb2:	f043 0202 	orr.w	r2, r3, #2
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d017      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d105      	bne.n	8006ce0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cee:	f043 0208 	orr.w	r2, r3, #8
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d012      	beq.n	8006d2a <HAL_UART_IRQHandler+0x18a>
 8006d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00c      	beq.n	8006d2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d20:	f043 0220 	orr.w	r2, r3, #32
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 820c 	beq.w	800714e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00d      	beq.n	8006d5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d005      	beq.n	8006d82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d04f      	beq.n	8006e22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 ff8a 	bl	8007c9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d92:	2b40      	cmp	r3, #64	; 0x40
 8006d94:	d141      	bne.n	8006e1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1d9      	bne.n	8006d96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d013      	beq.n	8006e12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dee:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <HAL_UART_IRQHandler+0x29c>)
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fc fd2a 	bl	8003850 <HAL_DMA_Abort_IT>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d017      	beq.n	8006e32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e10:	e00f      	b.n	8006e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9ba 	bl	800718c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e18:	e00b      	b.n	8006e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f9b6 	bl	800718c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e20:	e007      	b.n	8006e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f9b2 	bl	800718c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006e30:	e18d      	b.n	800714e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e32:	bf00      	nop
    return;
 8006e34:	e18b      	b.n	800714e <HAL_UART_IRQHandler+0x5ae>
 8006e36:	bf00      	nop
 8006e38:	04000120 	.word	0x04000120
 8006e3c:	08007f3b 	.word	0x08007f3b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	f040 8146 	bne.w	80070d6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 813f 	beq.w	80070d6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 8138 	beq.w	80070d6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2210      	movs	r2, #16
 8006e6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e78:	2b40      	cmp	r3, #64	; 0x40
 8006e7a:	f040 80b4 	bne.w	8006fe6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 815f 	beq.w	8007152 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	f080 8157 	bcs.w	8007152 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 8085 	bne.w	8006fca <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006eee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ef6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1da      	bne.n	8006ec0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f1c:	f023 0301 	bic.w	r3, r3, #1
 8006f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e1      	bne.n	8006f0a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3308      	adds	r3, #8
 8006f66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e3      	bne.n	8006f46 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2220      	movs	r2, #32
 8006f82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9a:	f023 0310 	bic.w	r3, r3, #16
 8006f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fac:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e4      	bne.n	8006f8a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fc fc05 	bl	80037d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f8de 	bl	80071a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fe4:	e0b5      	b.n	8007152 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 80a7 	beq.w	8007156 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 80a2 	beq.w	8007156 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007022:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007026:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007034:	647b      	str	r3, [r7, #68]	; 0x44
 8007036:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800703a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e4      	bne.n	8007012 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3308      	adds	r3, #8
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	623b      	str	r3, [r7, #32]
   return(result);
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	f023 0301 	bic.w	r3, r3, #1
 800705e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3308      	adds	r3, #8
 8007068:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800706c:	633a      	str	r2, [r7, #48]	; 0x30
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007070:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007074:	e841 2300 	strex	r3, r2, [r1]
 8007078:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1e3      	bne.n	8007048 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0310 	bic.w	r3, r3, #16
 80070a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	69b9      	ldr	r1, [r7, #24]
 80070ba:	69fa      	ldr	r2, [r7, #28]
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	617b      	str	r3, [r7, #20]
   return(result);
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e4      	bne.n	8007092 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f866 	bl	80071a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070d4:	e03f      	b.n	8007156 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <HAL_UART_IRQHandler+0x560>
 80070e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d008      	beq.n	8007100 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f97a 	bl	80083f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070fe:	e02d      	b.n	800715c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00e      	beq.n	800712a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01c      	beq.n	800715a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	4798      	blx	r3
    }
    return;
 8007128:	e017      	b.n	800715a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800712a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007132:	2b00      	cmp	r3, #0
 8007134:	d012      	beq.n	800715c <HAL_UART_IRQHandler+0x5bc>
 8007136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00c      	beq.n	800715c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 ffcb 	bl	80080de <UART_EndTransmit_IT>
    return;
 8007148:	e008      	b.n	800715c <HAL_UART_IRQHandler+0x5bc>
      return;
 800714a:	bf00      	nop
 800714c:	e006      	b.n	800715c <HAL_UART_IRQHandler+0x5bc>
    return;
 800714e:	bf00      	nop
 8007150:	e004      	b.n	800715c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007152:	bf00      	nop
 8007154:	e002      	b.n	800715c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007156:	bf00      	nop
 8007158:	e000      	b.n	800715c <HAL_UART_IRQHandler+0x5bc>
    return;
 800715a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800715c:	37e8      	adds	r7, #232	; 0xe8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop

08007164 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071bc:	b08a      	sub	sp, #40	; 0x28
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	431a      	orrs	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	4313      	orrs	r3, r2
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4bb4      	ldr	r3, [pc, #720]	; (80074b8 <UART_SetConfig+0x300>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071f0:	430b      	orrs	r3, r1
 80071f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4aa9      	ldr	r2, [pc, #676]	; (80074bc <UART_SetConfig+0x304>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007220:	4313      	orrs	r3, r2
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007234:	430a      	orrs	r2, r1
 8007236:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4aa0      	ldr	r2, [pc, #640]	; (80074c0 <UART_SetConfig+0x308>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d126      	bne.n	8007290 <UART_SetConfig+0xd8>
 8007242:	4ba0      	ldr	r3, [pc, #640]	; (80074c4 <UART_SetConfig+0x30c>)
 8007244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	2b03      	cmp	r3, #3
 800724e:	d81b      	bhi.n	8007288 <UART_SetConfig+0xd0>
 8007250:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <UART_SetConfig+0xa0>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	08007269 	.word	0x08007269
 800725c:	08007279 	.word	0x08007279
 8007260:	08007271 	.word	0x08007271
 8007264:	08007281 	.word	0x08007281
 8007268:	2301      	movs	r3, #1
 800726a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800726e:	e080      	b.n	8007372 <UART_SetConfig+0x1ba>
 8007270:	2302      	movs	r3, #2
 8007272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007276:	e07c      	b.n	8007372 <UART_SetConfig+0x1ba>
 8007278:	2304      	movs	r3, #4
 800727a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800727e:	e078      	b.n	8007372 <UART_SetConfig+0x1ba>
 8007280:	2308      	movs	r3, #8
 8007282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007286:	e074      	b.n	8007372 <UART_SetConfig+0x1ba>
 8007288:	2310      	movs	r3, #16
 800728a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800728e:	e070      	b.n	8007372 <UART_SetConfig+0x1ba>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a8c      	ldr	r2, [pc, #560]	; (80074c8 <UART_SetConfig+0x310>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d138      	bne.n	800730c <UART_SetConfig+0x154>
 800729a:	4b8a      	ldr	r3, [pc, #552]	; (80074c4 <UART_SetConfig+0x30c>)
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a0:	f003 030c 	and.w	r3, r3, #12
 80072a4:	2b0c      	cmp	r3, #12
 80072a6:	d82d      	bhi.n	8007304 <UART_SetConfig+0x14c>
 80072a8:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <UART_SetConfig+0xf8>)
 80072aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ae:	bf00      	nop
 80072b0:	080072e5 	.word	0x080072e5
 80072b4:	08007305 	.word	0x08007305
 80072b8:	08007305 	.word	0x08007305
 80072bc:	08007305 	.word	0x08007305
 80072c0:	080072f5 	.word	0x080072f5
 80072c4:	08007305 	.word	0x08007305
 80072c8:	08007305 	.word	0x08007305
 80072cc:	08007305 	.word	0x08007305
 80072d0:	080072ed 	.word	0x080072ed
 80072d4:	08007305 	.word	0x08007305
 80072d8:	08007305 	.word	0x08007305
 80072dc:	08007305 	.word	0x08007305
 80072e0:	080072fd 	.word	0x080072fd
 80072e4:	2300      	movs	r3, #0
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ea:	e042      	b.n	8007372 <UART_SetConfig+0x1ba>
 80072ec:	2302      	movs	r3, #2
 80072ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f2:	e03e      	b.n	8007372 <UART_SetConfig+0x1ba>
 80072f4:	2304      	movs	r3, #4
 80072f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072fa:	e03a      	b.n	8007372 <UART_SetConfig+0x1ba>
 80072fc:	2308      	movs	r3, #8
 80072fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007302:	e036      	b.n	8007372 <UART_SetConfig+0x1ba>
 8007304:	2310      	movs	r3, #16
 8007306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800730a:	e032      	b.n	8007372 <UART_SetConfig+0x1ba>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a6a      	ldr	r2, [pc, #424]	; (80074bc <UART_SetConfig+0x304>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d12a      	bne.n	800736c <UART_SetConfig+0x1b4>
 8007316:	4b6b      	ldr	r3, [pc, #428]	; (80074c4 <UART_SetConfig+0x30c>)
 8007318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800731c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007324:	d01a      	beq.n	800735c <UART_SetConfig+0x1a4>
 8007326:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800732a:	d81b      	bhi.n	8007364 <UART_SetConfig+0x1ac>
 800732c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007330:	d00c      	beq.n	800734c <UART_SetConfig+0x194>
 8007332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007336:	d815      	bhi.n	8007364 <UART_SetConfig+0x1ac>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <UART_SetConfig+0x18c>
 800733c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007340:	d008      	beq.n	8007354 <UART_SetConfig+0x19c>
 8007342:	e00f      	b.n	8007364 <UART_SetConfig+0x1ac>
 8007344:	2300      	movs	r3, #0
 8007346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800734a:	e012      	b.n	8007372 <UART_SetConfig+0x1ba>
 800734c:	2302      	movs	r3, #2
 800734e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007352:	e00e      	b.n	8007372 <UART_SetConfig+0x1ba>
 8007354:	2304      	movs	r3, #4
 8007356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800735a:	e00a      	b.n	8007372 <UART_SetConfig+0x1ba>
 800735c:	2308      	movs	r3, #8
 800735e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007362:	e006      	b.n	8007372 <UART_SetConfig+0x1ba>
 8007364:	2310      	movs	r3, #16
 8007366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800736a:	e002      	b.n	8007372 <UART_SetConfig+0x1ba>
 800736c:	2310      	movs	r3, #16
 800736e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a51      	ldr	r2, [pc, #324]	; (80074bc <UART_SetConfig+0x304>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d17a      	bne.n	8007472 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800737c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007380:	2b08      	cmp	r3, #8
 8007382:	d824      	bhi.n	80073ce <UART_SetConfig+0x216>
 8007384:	a201      	add	r2, pc, #4	; (adr r2, 800738c <UART_SetConfig+0x1d4>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073cf 	.word	0x080073cf
 8007394:	080073b9 	.word	0x080073b9
 8007398:	080073cf 	.word	0x080073cf
 800739c:	080073bf 	.word	0x080073bf
 80073a0:	080073cf 	.word	0x080073cf
 80073a4:	080073cf 	.word	0x080073cf
 80073a8:	080073cf 	.word	0x080073cf
 80073ac:	080073c7 	.word	0x080073c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b0:	f7fd fb10 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 80073b4:	61f8      	str	r0, [r7, #28]
        break;
 80073b6:	e010      	b.n	80073da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b8:	4b44      	ldr	r3, [pc, #272]	; (80074cc <UART_SetConfig+0x314>)
 80073ba:	61fb      	str	r3, [r7, #28]
        break;
 80073bc:	e00d      	b.n	80073da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073be:	f7fd fa71 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 80073c2:	61f8      	str	r0, [r7, #28]
        break;
 80073c4:	e009      	b.n	80073da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ca:	61fb      	str	r3, [r7, #28]
        break;
 80073cc:	e005      	b.n	80073da <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8107 	beq.w	80075f0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	4613      	mov	r3, r2
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	4413      	add	r3, r2
 80073ec:	69fa      	ldr	r2, [r7, #28]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d305      	bcc.n	80073fe <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d903      	bls.n	8007406 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007404:	e0f4      	b.n	80075f0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2200      	movs	r2, #0
 800740a:	461c      	mov	r4, r3
 800740c:	4615      	mov	r5, r2
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	022b      	lsls	r3, r5, #8
 8007418:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800741c:	0222      	lsls	r2, r4, #8
 800741e:	68f9      	ldr	r1, [r7, #12]
 8007420:	6849      	ldr	r1, [r1, #4]
 8007422:	0849      	lsrs	r1, r1, #1
 8007424:	2000      	movs	r0, #0
 8007426:	4688      	mov	r8, r1
 8007428:	4681      	mov	r9, r0
 800742a:	eb12 0a08 	adds.w	sl, r2, r8
 800742e:	eb43 0b09 	adc.w	fp, r3, r9
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007440:	4650      	mov	r0, sl
 8007442:	4659      	mov	r1, fp
 8007444:	f7f9 fa8a 	bl	800095c <__aeabi_uldivmod>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	4613      	mov	r3, r2
 800744e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007456:	d308      	bcc.n	800746a <UART_SetConfig+0x2b2>
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800745e:	d204      	bcs.n	800746a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	60da      	str	r2, [r3, #12]
 8007468:	e0c2      	b.n	80075f0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007470:	e0be      	b.n	80075f0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800747a:	d16a      	bne.n	8007552 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800747c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007480:	2b08      	cmp	r3, #8
 8007482:	d834      	bhi.n	80074ee <UART_SetConfig+0x336>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <UART_SetConfig+0x2d4>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074b1 	.word	0x080074b1
 8007490:	080074d1 	.word	0x080074d1
 8007494:	080074d9 	.word	0x080074d9
 8007498:	080074ef 	.word	0x080074ef
 800749c:	080074df 	.word	0x080074df
 80074a0:	080074ef 	.word	0x080074ef
 80074a4:	080074ef 	.word	0x080074ef
 80074a8:	080074ef 	.word	0x080074ef
 80074ac:	080074e7 	.word	0x080074e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b0:	f7fd fa90 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 80074b4:	61f8      	str	r0, [r7, #28]
        break;
 80074b6:	e020      	b.n	80074fa <UART_SetConfig+0x342>
 80074b8:	efff69f3 	.word	0xefff69f3
 80074bc:	40008000 	.word	0x40008000
 80074c0:	40013800 	.word	0x40013800
 80074c4:	40021000 	.word	0x40021000
 80074c8:	40004400 	.word	0x40004400
 80074cc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d0:	f7fd fa96 	bl	8004a00 <HAL_RCC_GetPCLK2Freq>
 80074d4:	61f8      	str	r0, [r7, #28]
        break;
 80074d6:	e010      	b.n	80074fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074d8:	4b4c      	ldr	r3, [pc, #304]	; (800760c <UART_SetConfig+0x454>)
 80074da:	61fb      	str	r3, [r7, #28]
        break;
 80074dc:	e00d      	b.n	80074fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074de:	f7fd f9e1 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 80074e2:	61f8      	str	r0, [r7, #28]
        break;
 80074e4:	e009      	b.n	80074fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ea:	61fb      	str	r3, [r7, #28]
        break;
 80074ec:	e005      	b.n	80074fa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80074f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d077      	beq.n	80075f0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	005a      	lsls	r2, r3, #1
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	085b      	lsrs	r3, r3, #1
 800750a:	441a      	add	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	fbb2 f3f3 	udiv	r3, r2, r3
 8007514:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b0f      	cmp	r3, #15
 800751a:	d916      	bls.n	800754a <UART_SetConfig+0x392>
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007522:	d212      	bcs.n	800754a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f023 030f 	bic.w	r3, r3, #15
 800752c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	b29b      	uxth	r3, r3
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	b29a      	uxth	r2, r3
 800753a:	8afb      	ldrh	r3, [r7, #22]
 800753c:	4313      	orrs	r3, r2
 800753e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	8afa      	ldrh	r2, [r7, #22]
 8007546:	60da      	str	r2, [r3, #12]
 8007548:	e052      	b.n	80075f0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007550:	e04e      	b.n	80075f0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007556:	2b08      	cmp	r3, #8
 8007558:	d827      	bhi.n	80075aa <UART_SetConfig+0x3f2>
 800755a:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <UART_SetConfig+0x3a8>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	08007585 	.word	0x08007585
 8007564:	0800758d 	.word	0x0800758d
 8007568:	08007595 	.word	0x08007595
 800756c:	080075ab 	.word	0x080075ab
 8007570:	0800759b 	.word	0x0800759b
 8007574:	080075ab 	.word	0x080075ab
 8007578:	080075ab 	.word	0x080075ab
 800757c:	080075ab 	.word	0x080075ab
 8007580:	080075a3 	.word	0x080075a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007584:	f7fd fa26 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8007588:	61f8      	str	r0, [r7, #28]
        break;
 800758a:	e014      	b.n	80075b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800758c:	f7fd fa38 	bl	8004a00 <HAL_RCC_GetPCLK2Freq>
 8007590:	61f8      	str	r0, [r7, #28]
        break;
 8007592:	e010      	b.n	80075b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007594:	4b1d      	ldr	r3, [pc, #116]	; (800760c <UART_SetConfig+0x454>)
 8007596:	61fb      	str	r3, [r7, #28]
        break;
 8007598:	e00d      	b.n	80075b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759a:	f7fd f983 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 800759e:	61f8      	str	r0, [r7, #28]
        break;
 80075a0:	e009      	b.n	80075b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075a6:	61fb      	str	r3, [r7, #28]
        break;
 80075a8:	e005      	b.n	80075b6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80075b4:	bf00      	nop
    }

    if (pclk != 0U)
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d019      	beq.n	80075f0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	085a      	lsrs	r2, r3, #1
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	441a      	add	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	2b0f      	cmp	r3, #15
 80075d4:	d909      	bls.n	80075ea <UART_SetConfig+0x432>
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075dc:	d205      	bcs.n	80075ea <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60da      	str	r2, [r3, #12]
 80075e8:	e002      	b.n	80075f0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80075fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007600:	4618      	mov	r0, r3
 8007602:	3728      	adds	r7, #40	; 0x28
 8007604:	46bd      	mov	sp, r7
 8007606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800760a:	bf00      	nop
 800760c:	00f42400 	.word	0x00f42400

08007610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00a      	beq.n	800767e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	f003 0310 	and.w	r3, r3, #16
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01a      	beq.n	8007726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800770e:	d10a      	bne.n	8007726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00a      	beq.n	8007748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	605a      	str	r2, [r3, #4]
  }
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af02      	add	r7, sp, #8
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007764:	f7fb fe30 	bl	80033c8 <HAL_GetTick>
 8007768:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0308 	and.w	r3, r3, #8
 8007774:	2b08      	cmp	r3, #8
 8007776:	d10e      	bne.n	8007796 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007778:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f82d 	bl	80077e6 <UART_WaitOnFlagUntilTimeout>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e023      	b.n	80077de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d10e      	bne.n	80077c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f817 	bl	80077e6 <UART_WaitOnFlagUntilTimeout>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e00d      	b.n	80077de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b09c      	sub	sp, #112	; 0x70
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	603b      	str	r3, [r7, #0]
 80077f2:	4613      	mov	r3, r2
 80077f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077f6:	e0a5      	b.n	8007944 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fe:	f000 80a1 	beq.w	8007944 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007802:	f7fb fde1 	bl	80033c8 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800780e:	429a      	cmp	r2, r3
 8007810:	d302      	bcc.n	8007818 <UART_WaitOnFlagUntilTimeout+0x32>
 8007812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007814:	2b00      	cmp	r3, #0
 8007816:	d13e      	bne.n	8007896 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007828:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800782c:	667b      	str	r3, [r7, #100]	; 0x64
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007838:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800783c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e6      	bne.n	8007818 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800785a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785c:	f023 0301 	bic.w	r3, r3, #1
 8007860:	663b      	str	r3, [r7, #96]	; 0x60
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3308      	adds	r3, #8
 8007868:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800786a:	64ba      	str	r2, [r7, #72]	; 0x48
 800786c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e5      	bne.n	800784a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e067      	b.n	8007966 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d04f      	beq.n	8007944 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078b2:	d147      	bne.n	8007944 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078bc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078dc:	637b      	str	r3, [r7, #52]	; 0x34
 80078de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e6      	bne.n	80078be <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f023 0301 	bic.w	r3, r3, #1
 8007906:	66bb      	str	r3, [r7, #104]	; 0x68
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3308      	adds	r3, #8
 800790e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007910:	623a      	str	r2, [r7, #32]
 8007912:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	69f9      	ldr	r1, [r7, #28]
 8007916:	6a3a      	ldr	r2, [r7, #32]
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	61bb      	str	r3, [r7, #24]
   return(result);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e5      	bne.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2220      	movs	r2, #32
 8007928:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2220      	movs	r2, #32
 800792e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2220      	movs	r2, #32
 8007934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e010      	b.n	8007966 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	69da      	ldr	r2, [r3, #28]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	4013      	ands	r3, r2
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	429a      	cmp	r2, r3
 8007952:	bf0c      	ite	eq
 8007954:	2301      	moveq	r3, #1
 8007956:	2300      	movne	r3, #0
 8007958:	b2db      	uxtb	r3, r3
 800795a:	461a      	mov	r2, r3
 800795c:	79fb      	ldrb	r3, [r7, #7]
 800795e:	429a      	cmp	r2, r3
 8007960:	f43f af4a 	beq.w	80077f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3770      	adds	r7, #112	; 0x70
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007970:	b480      	push	{r7}
 8007972:	b097      	sub	sp, #92	; 0x5c
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	88fa      	ldrh	r2, [r7, #6]
 8007988:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a2:	d10e      	bne.n	80079c2 <UART_Start_Receive_IT+0x52>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d105      	bne.n	80079b8 <UART_Start_Receive_IT+0x48>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80079b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079b6:	e02d      	b.n	8007a14 <UART_Start_Receive_IT+0xa4>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	22ff      	movs	r2, #255	; 0xff
 80079bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079c0:	e028      	b.n	8007a14 <UART_Start_Receive_IT+0xa4>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10d      	bne.n	80079e6 <UART_Start_Receive_IT+0x76>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <UART_Start_Receive_IT+0x6c>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	22ff      	movs	r2, #255	; 0xff
 80079d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079da:	e01b      	b.n	8007a14 <UART_Start_Receive_IT+0xa4>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	227f      	movs	r2, #127	; 0x7f
 80079e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079e4:	e016      	b.n	8007a14 <UART_Start_Receive_IT+0xa4>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ee:	d10d      	bne.n	8007a0c <UART_Start_Receive_IT+0x9c>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <UART_Start_Receive_IT+0x92>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	227f      	movs	r2, #127	; 0x7f
 80079fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a00:	e008      	b.n	8007a14 <UART_Start_Receive_IT+0xa4>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	223f      	movs	r2, #63	; 0x3f
 8007a06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a0a:	e003      	b.n	8007a14 <UART_Start_Receive_IT+0xa4>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2222      	movs	r2, #34	; 0x22
 8007a20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3308      	adds	r3, #8
 8007a28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	f043 0301 	orr.w	r3, r3, #1
 8007a38:	657b      	str	r3, [r7, #84]	; 0x54
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3308      	adds	r3, #8
 8007a40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a42:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e5      	bne.n	8007a22 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5e:	d107      	bne.n	8007a70 <UART_Start_Receive_IT+0x100>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d103      	bne.n	8007a70 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4a24      	ldr	r2, [pc, #144]	; (8007afc <UART_Start_Receive_IT+0x18c>)
 8007a6c:	665a      	str	r2, [r3, #100]	; 0x64
 8007a6e:	e002      	b.n	8007a76 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4a23      	ldr	r2, [pc, #140]	; (8007b00 <UART_Start_Receive_IT+0x190>)
 8007a74:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d019      	beq.n	8007aba <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	e853 3f00 	ldrex	r3, [r3]
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e6      	bne.n	8007a86 <UART_Start_Receive_IT+0x116>
 8007ab8:	e018      	b.n	8007aec <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f043 0320 	orr.w	r3, r3, #32
 8007ace:	653b      	str	r3, [r7, #80]	; 0x50
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad8:	623b      	str	r3, [r7, #32]
 8007ada:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	69f9      	ldr	r1, [r7, #28]
 8007ade:	6a3a      	ldr	r2, [r7, #32]
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e6      	bne.n	8007aba <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	375c      	adds	r7, #92	; 0x5c
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	08008293 	.word	0x08008293
 8007b00:	08008133 	.word	0x08008133

08007b04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b096      	sub	sp, #88	; 0x58
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	88fa      	ldrh	r2, [r7, #6]
 8007b1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2222      	movs	r2, #34	; 0x22
 8007b2c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d02b      	beq.n	8007b8e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	4a42      	ldr	r2, [pc, #264]	; (8007c44 <UART_Start_Receive_DMA+0x140>)
 8007b3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b42:	4a41      	ldr	r2, [pc, #260]	; (8007c48 <UART_Start_Receive_DMA+0x144>)
 8007b44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	4a40      	ldr	r2, [pc, #256]	; (8007c4c <UART_Start_Receive_DMA+0x148>)
 8007b4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b52:	2200      	movs	r2, #0
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3324      	adds	r3, #36	; 0x24
 8007b60:	4619      	mov	r1, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	461a      	mov	r2, r3
 8007b68:	88fb      	ldrh	r3, [r7, #6]
 8007b6a:	f7fb fdd3 	bl	8003714 <HAL_DMA_Start_IT>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00c      	beq.n	8007b8e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2210      	movs	r2, #16
 8007b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2220      	movs	r2, #32
 8007b88:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e055      	b.n	8007c3a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d018      	beq.n	8007bd0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bbe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e6      	bne.n	8007b9e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	f043 0301 	orr.w	r3, r3, #1
 8007be6:	653b      	str	r3, [r7, #80]	; 0x50
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3308      	adds	r3, #8
 8007bee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bf0:	637a      	str	r2, [r7, #52]	; 0x34
 8007bf2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e5      	bne.n	8007bd0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3308      	adds	r3, #8
 8007c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	613b      	str	r3, [r7, #16]
   return(result);
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	3308      	adds	r3, #8
 8007c22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c24:	623a      	str	r2, [r7, #32]
 8007c26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	69f9      	ldr	r1, [r7, #28]
 8007c2a:	6a3a      	ldr	r2, [r7, #32]
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e5      	bne.n	8007c04 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3758      	adds	r7, #88	; 0x58
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	08007d63 	.word	0x08007d63
 8007c48:	08007e87 	.word	0x08007e87
 8007c4c:	08007ebf 	.word	0x08007ebf

08007c50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b089      	sub	sp, #36	; 0x24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c6c:	61fb      	str	r3, [r7, #28]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6979      	ldr	r1, [r7, #20]
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	613b      	str	r3, [r7, #16]
   return(result);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e6      	bne.n	8007c58 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007c90:	bf00      	nop
 8007c92:	3724      	adds	r7, #36	; 0x24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b095      	sub	sp, #84	; 0x54
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc2:	643b      	str	r3, [r7, #64]	; 0x40
 8007cc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e6      	bne.n	8007ca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e5      	bne.n	8007cd6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d118      	bne.n	8007d44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f023 0310 	bic.w	r3, r3, #16
 8007d26:	647b      	str	r3, [r7, #68]	; 0x44
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d30:	61bb      	str	r3, [r7, #24]
 8007d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6979      	ldr	r1, [r7, #20]
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e6      	bne.n	8007d12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2220      	movs	r2, #32
 8007d48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007d56:	bf00      	nop
 8007d58:	3754      	adds	r7, #84	; 0x54
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b09c      	sub	sp, #112	; 0x70
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0320 	and.w	r3, r3, #32
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d170      	bne.n	8007e60 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8007d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d80:	2200      	movs	r2, #0
 8007d82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8e:	e853 3f00 	ldrex	r3, [r3]
 8007d92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	461a      	mov	r2, r3
 8007da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007da6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007daa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dac:	e841 2300 	strex	r3, r2, [r1]
 8007db0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e6      	bne.n	8007d86 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	f023 0301 	bic.w	r3, r3, #1
 8007dce:	667b      	str	r3, [r7, #100]	; 0x64
 8007dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007dd8:	647a      	str	r2, [r7, #68]	; 0x44
 8007dda:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e5      	bne.n	8007db8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	623b      	str	r3, [r7, #32]
   return(result);
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e02:	663b      	str	r3, [r7, #96]	; 0x60
 8007e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3308      	adds	r3, #8
 8007e0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e0c:	633a      	str	r2, [r7, #48]	; 0x30
 8007e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e5      	bne.n	8007dec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e22:	2220      	movs	r2, #32
 8007e24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d118      	bne.n	8007e60 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0310 	bic.w	r3, r3, #16
 8007e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	69b9      	ldr	r1, [r7, #24]
 8007e52:	69fa      	ldr	r2, [r7, #28]
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	617b      	str	r3, [r7, #20]
   return(result);
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e6      	bne.n	8007e2e <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d107      	bne.n	8007e78 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e72:	f7ff f995 	bl	80071a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e76:	e002      	b.n	8007e7e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8007e78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e7a:	f7fb fa03 	bl	8003284 <HAL_UART_RxCpltCallback>
}
 8007e7e:	bf00      	nop
 8007e80:	3770      	adds	r7, #112	; 0x70
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d109      	bne.n	8007eb0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ea2:	085b      	lsrs	r3, r3, #1
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff f979 	bl	80071a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007eae:	e002      	b.n	8007eb6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f7ff f961 	bl	8007178 <HAL_UART_RxHalfCpltCallback>
}
 8007eb6:	bf00      	nop
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b086      	sub	sp, #24
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ed0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee2:	2b80      	cmp	r3, #128	; 0x80
 8007ee4:	d109      	bne.n	8007efa <UART_DMAError+0x3c>
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	2b21      	cmp	r3, #33	; 0x21
 8007eea:	d106      	bne.n	8007efa <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007ef4:	6978      	ldr	r0, [r7, #20]
 8007ef6:	f7ff feab 	bl	8007c50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f04:	2b40      	cmp	r3, #64	; 0x40
 8007f06:	d109      	bne.n	8007f1c <UART_DMAError+0x5e>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2b22      	cmp	r3, #34	; 0x22
 8007f0c:	d106      	bne.n	8007f1c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007f16:	6978      	ldr	r0, [r7, #20]
 8007f18:	f7ff fec0 	bl	8007c9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f22:	f043 0210 	orr.w	r2, r3, #16
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f2c:	6978      	ldr	r0, [r7, #20]
 8007f2e:	f7ff f92d 	bl	800718c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f32:	bf00      	nop
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7ff f917 	bl	800718c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f5e:	bf00      	nop
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b08f      	sub	sp, #60	; 0x3c
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f72:	2b21      	cmp	r3, #33	; 0x21
 8007f74:	d14d      	bne.n	8008012 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d132      	bne.n	8007fe8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f96:	637b      	str	r3, [r7, #52]	; 0x34
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fa2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa8:	e841 2300 	strex	r3, r2, [r1]
 8007fac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e6      	bne.n	8007f82 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	61bb      	str	r3, [r7, #24]
 8007fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	6979      	ldr	r1, [r7, #20]
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e6      	bne.n	8007fb4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007fe6:	e014      	b.n	8008012 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fec:	781a      	ldrb	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	b292      	uxth	r2, r2
 8007ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008006:	b29b      	uxth	r3, r3
 8008008:	3b01      	subs	r3, #1
 800800a:	b29a      	uxth	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008012:	bf00      	nop
 8008014:	373c      	adds	r7, #60	; 0x3c
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800801e:	b480      	push	{r7}
 8008020:	b091      	sub	sp, #68	; 0x44
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800802a:	2b21      	cmp	r3, #33	; 0x21
 800802c:	d151      	bne.n	80080d2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d132      	bne.n	80080a0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	623b      	str	r3, [r7, #32]
   return(result);
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800804e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	633b      	str	r3, [r7, #48]	; 0x30
 800805a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800805e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e6      	bne.n	800803a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	60fb      	str	r3, [r7, #12]
   return(result);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008080:	637b      	str	r3, [r7, #52]	; 0x34
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808a:	61fb      	str	r3, [r7, #28]
 800808c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	69b9      	ldr	r1, [r7, #24]
 8008090:	69fa      	ldr	r2, [r7, #28]
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	617b      	str	r3, [r7, #20]
   return(result);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e6      	bne.n	800806c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800809e:	e018      	b.n	80080d2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80080a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a8:	881a      	ldrh	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080b2:	b292      	uxth	r2, r2
 80080b4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ba:	1c9a      	adds	r2, r3, #2
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80080d2:	bf00      	nop
 80080d4:	3744      	adds	r7, #68	; 0x44
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b088      	sub	sp, #32
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	e853 3f00 	ldrex	r3, [r3]
 80080f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080fa:	61fb      	str	r3, [r7, #28]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	61bb      	str	r3, [r7, #24]
 8008106:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008108:	6979      	ldr	r1, [r7, #20]
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	e841 2300 	strex	r3, r2, [r1]
 8008110:	613b      	str	r3, [r7, #16]
   return(result);
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e6      	bne.n	80080e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2220      	movs	r2, #32
 800811c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff f81d 	bl	8007164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800812a:	bf00      	nop
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b096      	sub	sp, #88	; 0x58
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008140:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008148:	2b22      	cmp	r3, #34	; 0x22
 800814a:	f040 8094 	bne.w	8008276 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008154:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008158:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800815c:	b2d9      	uxtb	r1, r3
 800815e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008162:	b2da      	uxtb	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008168:	400a      	ands	r2, r1
 800816a:	b2d2      	uxtb	r2, r2
 800816c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800817e:	b29b      	uxth	r3, r3
 8008180:	3b01      	subs	r3, #1
 8008182:	b29a      	uxth	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008190:	b29b      	uxth	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d179      	bne.n	800828a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	e853 3f00 	ldrex	r3, [r3]
 80081a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081aa:	653b      	str	r3, [r7, #80]	; 0x50
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b4:	647b      	str	r3, [r7, #68]	; 0x44
 80081b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081bc:	e841 2300 	strex	r3, r2, [r1]
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1e6      	bne.n	8008196 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3308      	adds	r3, #8
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	623b      	str	r3, [r7, #32]
   return(result);
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	f023 0301 	bic.w	r3, r3, #1
 80081de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3308      	adds	r3, #8
 80081e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081e8:	633a      	str	r2, [r7, #48]	; 0x30
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f0:	e841 2300 	strex	r3, r2, [r1]
 80081f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e5      	bne.n	80081c8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820c:	2b01      	cmp	r3, #1
 800820e:	d12e      	bne.n	800826e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	60fb      	str	r3, [r7, #12]
   return(result);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0310 	bic.w	r3, r3, #16
 800822a:	64bb      	str	r3, [r7, #72]	; 0x48
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008234:	61fb      	str	r3, [r7, #28]
 8008236:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	69b9      	ldr	r1, [r7, #24]
 800823a:	69fa      	ldr	r2, [r7, #28]
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	617b      	str	r3, [r7, #20]
   return(result);
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e6      	bne.n	8008216 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	f003 0310 	and.w	r3, r3, #16
 8008252:	2b10      	cmp	r3, #16
 8008254:	d103      	bne.n	800825e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2210      	movs	r2, #16
 800825c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7fe ff9a 	bl	80071a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800826c:	e00d      	b.n	800828a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7fb f808 	bl	8003284 <HAL_UART_RxCpltCallback>
}
 8008274:	e009      	b.n	800828a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	8b1b      	ldrh	r3, [r3, #24]
 800827c:	b29a      	uxth	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0208 	orr.w	r2, r2, #8
 8008286:	b292      	uxth	r2, r2
 8008288:	831a      	strh	r2, [r3, #24]
}
 800828a:	bf00      	nop
 800828c:	3758      	adds	r7, #88	; 0x58
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b096      	sub	sp, #88	; 0x58
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a8:	2b22      	cmp	r3, #34	; 0x22
 80082aa:	f040 8094 	bne.w	80083d6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082bc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80082be:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80082c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082c6:	4013      	ands	r3, r2
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d2:	1c9a      	adds	r2, r3, #2
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d179      	bne.n	80083ea <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fe:	e853 3f00 	ldrex	r3, [r3]
 8008302:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800830a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	461a      	mov	r2, r3
 8008312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008314:	643b      	str	r3, [r7, #64]	; 0x40
 8008316:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008318:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800831a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800831c:	e841 2300 	strex	r3, r2, [r1]
 8008320:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1e6      	bne.n	80082f6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3308      	adds	r3, #8
 800832e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	e853 3f00 	ldrex	r3, [r3]
 8008336:	61fb      	str	r3, [r7, #28]
   return(result);
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	f023 0301 	bic.w	r3, r3, #1
 800833e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3308      	adds	r3, #8
 8008346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800834a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800834e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008350:	e841 2300 	strex	r3, r2, [r1]
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1e5      	bne.n	8008328 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2220      	movs	r2, #32
 8008360:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836c:	2b01      	cmp	r3, #1
 800836e:	d12e      	bne.n	80083ce <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	60bb      	str	r3, [r7, #8]
   return(result);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f023 0310 	bic.w	r3, r3, #16
 800838a:	647b      	str	r3, [r7, #68]	; 0x44
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008394:	61bb      	str	r3, [r7, #24]
 8008396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6979      	ldr	r1, [r7, #20]
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	613b      	str	r3, [r7, #16]
   return(result);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e6      	bne.n	8008376 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d103      	bne.n	80083be <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2210      	movs	r2, #16
 80083bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7fe feea 	bl	80071a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083cc:	e00d      	b.n	80083ea <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fa ff58 	bl	8003284 <HAL_UART_RxCpltCallback>
}
 80083d4:	e009      	b.n	80083ea <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	8b1b      	ldrh	r3, [r3, #24]
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0208 	orr.w	r2, r2, #8
 80083e6:	b292      	uxth	r2, r2
 80083e8:	831a      	strh	r2, [r3, #24]
}
 80083ea:	bf00      	nop
 80083ec:	3758      	adds	r7, #88	; 0x58
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
	...

08008408 <__NVIC_SetPriority>:
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	6039      	str	r1, [r7, #0]
 8008412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008418:	2b00      	cmp	r3, #0
 800841a:	db0a      	blt.n	8008432 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	b2da      	uxtb	r2, r3
 8008420:	490c      	ldr	r1, [pc, #48]	; (8008454 <__NVIC_SetPriority+0x4c>)
 8008422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008426:	0112      	lsls	r2, r2, #4
 8008428:	b2d2      	uxtb	r2, r2
 800842a:	440b      	add	r3, r1
 800842c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008430:	e00a      	b.n	8008448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	b2da      	uxtb	r2, r3
 8008436:	4908      	ldr	r1, [pc, #32]	; (8008458 <__NVIC_SetPriority+0x50>)
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	3b04      	subs	r3, #4
 8008440:	0112      	lsls	r2, r2, #4
 8008442:	b2d2      	uxtb	r2, r2
 8008444:	440b      	add	r3, r1
 8008446:	761a      	strb	r2, [r3, #24]
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	e000e100 	.word	0xe000e100
 8008458:	e000ed00 	.word	0xe000ed00

0800845c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800845c:	b580      	push	{r7, lr}
 800845e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008460:	4b05      	ldr	r3, [pc, #20]	; (8008478 <SysTick_Handler+0x1c>)
 8008462:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008464:	f002 fa74 	bl	800a950 <xTaskGetSchedulerState>
 8008468:	4603      	mov	r3, r0
 800846a:	2b01      	cmp	r3, #1
 800846c:	d001      	beq.n	8008472 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800846e:	f003 fb5b 	bl	800bb28 <xPortSysTickHandler>
  }
}
 8008472:	bf00      	nop
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	e000e010 	.word	0xe000e010

0800847c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008480:	2100      	movs	r1, #0
 8008482:	f06f 0004 	mvn.w	r0, #4
 8008486:	f7ff ffbf 	bl	8008408 <__NVIC_SetPriority>
#endif
}
 800848a:	bf00      	nop
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008496:	f3ef 8305 	mrs	r3, IPSR
 800849a:	603b      	str	r3, [r7, #0]
  return(result);
 800849c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80084a2:	f06f 0305 	mvn.w	r3, #5
 80084a6:	607b      	str	r3, [r7, #4]
 80084a8:	e00c      	b.n	80084c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084aa:	4b0a      	ldr	r3, [pc, #40]	; (80084d4 <osKernelInitialize+0x44>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d105      	bne.n	80084be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80084b2:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <osKernelInitialize+0x44>)
 80084b4:	2201      	movs	r2, #1
 80084b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	607b      	str	r3, [r7, #4]
 80084bc:	e002      	b.n	80084c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80084be:	f04f 33ff 	mov.w	r3, #4294967295
 80084c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084c4:	687b      	ldr	r3, [r7, #4]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	20002370 	.word	0x20002370

080084d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084de:	f3ef 8305 	mrs	r3, IPSR
 80084e2:	603b      	str	r3, [r7, #0]
  return(result);
 80084e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80084ea:	f06f 0305 	mvn.w	r3, #5
 80084ee:	607b      	str	r3, [r7, #4]
 80084f0:	e010      	b.n	8008514 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80084f2:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <osKernelStart+0x48>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d109      	bne.n	800850e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80084fa:	f7ff ffbf 	bl	800847c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80084fe:	4b08      	ldr	r3, [pc, #32]	; (8008520 <osKernelStart+0x48>)
 8008500:	2202      	movs	r2, #2
 8008502:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008504:	f001 fdc8 	bl	800a098 <vTaskStartScheduler>
      stat = osOK;
 8008508:	2300      	movs	r3, #0
 800850a:	607b      	str	r3, [r7, #4]
 800850c:	e002      	b.n	8008514 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800850e:	f04f 33ff 	mov.w	r3, #4294967295
 8008512:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008514:	687b      	ldr	r3, [r7, #4]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20002370 	.word	0x20002370

08008524 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008524:	b580      	push	{r7, lr}
 8008526:	b08e      	sub	sp, #56	; 0x38
 8008528:	af04      	add	r7, sp, #16
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008530:	2300      	movs	r3, #0
 8008532:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008534:	f3ef 8305 	mrs	r3, IPSR
 8008538:	617b      	str	r3, [r7, #20]
  return(result);
 800853a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800853c:	2b00      	cmp	r3, #0
 800853e:	d17f      	bne.n	8008640 <osThreadNew+0x11c>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d07c      	beq.n	8008640 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800854a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800854c:	2318      	movs	r3, #24
 800854e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008550:	2300      	movs	r3, #0
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008554:	f04f 33ff 	mov.w	r3, #4294967295
 8008558:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d045      	beq.n	80085ec <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <osThreadNew+0x4a>
        name = attr->name;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d008      	beq.n	8008594 <osThreadNew+0x70>
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	2b38      	cmp	r3, #56	; 0x38
 8008586:	d805      	bhi.n	8008594 <osThreadNew+0x70>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <osThreadNew+0x74>
        return (NULL);
 8008594:	2300      	movs	r3, #0
 8008596:	e054      	b.n	8008642 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	089b      	lsrs	r3, r3, #2
 80085a6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00e      	beq.n	80085ce <osThreadNew+0xaa>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	2bbb      	cmp	r3, #187	; 0xbb
 80085b6:	d90a      	bls.n	80085ce <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d006      	beq.n	80085ce <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <osThreadNew+0xaa>
        mem = 1;
 80085c8:	2301      	movs	r3, #1
 80085ca:	61bb      	str	r3, [r7, #24]
 80085cc:	e010      	b.n	80085f0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10c      	bne.n	80085f0 <osThreadNew+0xcc>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d108      	bne.n	80085f0 <osThreadNew+0xcc>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d104      	bne.n	80085f0 <osThreadNew+0xcc>
          mem = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	e001      	b.n	80085f0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80085ec:	2300      	movs	r3, #0
 80085ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d110      	bne.n	8008618 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085fe:	9202      	str	r2, [sp, #8]
 8008600:	9301      	str	r3, [sp, #4]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	6a3a      	ldr	r2, [r7, #32]
 800860a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f001 fae5 	bl	8009bdc <xTaskCreateStatic>
 8008612:	4603      	mov	r3, r0
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	e013      	b.n	8008640 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d110      	bne.n	8008640 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	b29a      	uxth	r2, r3
 8008622:	f107 0310 	add.w	r3, r7, #16
 8008626:	9301      	str	r3, [sp, #4]
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f001 fb30 	bl	8009c96 <xTaskCreate>
 8008636:	4603      	mov	r3, r0
 8008638:	2b01      	cmp	r3, #1
 800863a:	d001      	beq.n	8008640 <osThreadNew+0x11c>
            hTask = NULL;
 800863c:	2300      	movs	r3, #0
 800863e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008640:	693b      	ldr	r3, [r7, #16]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3728      	adds	r7, #40	; 0x28
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800864a:	b580      	push	{r7, lr}
 800864c:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800864e:	2000      	movs	r0, #0
 8008650:	f001 fc7c 	bl	8009f4c <vTaskDelete>
#endif
  for (;;);
 8008654:	e7fe      	b.n	8008654 <osThreadExit+0xa>

08008656 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800865e:	f3ef 8305 	mrs	r3, IPSR
 8008662:	60bb      	str	r3, [r7, #8]
  return(result);
 8008664:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <osDelay+0x1c>
    stat = osErrorISR;
 800866a:	f06f 0305 	mvn.w	r3, #5
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e007      	b.n	8008682 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <osDelay+0x2c>
      vTaskDelay(ticks);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 fcd7 	bl	800a030 <vTaskDelay>
    }
  }

  return (stat);
 8008682:	68fb      	ldr	r3, [r7, #12]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f003 f865 	bl	800b764 <pvTimerGetTimerID>
 800869a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d005      	beq.n	80086ae <TimerCallback+0x22>
    callb->func (callb->arg);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	6852      	ldr	r2, [r2, #4]
 80086aa:	4610      	mov	r0, r2
 80086ac:	4798      	blx	r3
  }
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08c      	sub	sp, #48	; 0x30
 80086bc:	af02      	add	r7, sp, #8
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	607a      	str	r2, [r7, #4]
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	460b      	mov	r3, r1
 80086c6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086cc:	f3ef 8305 	mrs	r3, IPSR
 80086d0:	613b      	str	r3, [r7, #16]
  return(result);
 80086d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d163      	bne.n	80087a0 <osTimerNew+0xe8>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d060      	beq.n	80087a0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80086de:	2008      	movs	r0, #8
 80086e0:	f003 fab2 	bl	800bc48 <pvPortMalloc>
 80086e4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d059      	beq.n	80087a0 <osTimerNew+0xe8>
      callb->func = func;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d102      	bne.n	8008704 <osTimerNew+0x4c>
        reload = pdFALSE;
 80086fe:	2300      	movs	r3, #0
 8008700:	61fb      	str	r3, [r7, #28]
 8008702:	e001      	b.n	8008708 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008704:	2301      	movs	r3, #1
 8008706:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008708:	f04f 33ff 	mov.w	r3, #4294967295
 800870c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800870e:	2300      	movs	r3, #0
 8008710:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01c      	beq.n	8008752 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <osTimerNew+0x6e>
          name = attr->name;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d006      	beq.n	800873c <osTimerNew+0x84>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	2b2b      	cmp	r3, #43	; 0x2b
 8008734:	d902      	bls.n	800873c <osTimerNew+0x84>
          mem = 1;
 8008736:	2301      	movs	r3, #1
 8008738:	61bb      	str	r3, [r7, #24]
 800873a:	e00c      	b.n	8008756 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d108      	bne.n	8008756 <osTimerNew+0x9e>
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d104      	bne.n	8008756 <osTimerNew+0x9e>
            mem = 0;
 800874c:	2300      	movs	r3, #0
 800874e:	61bb      	str	r3, [r7, #24]
 8008750:	e001      	b.n	8008756 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d10c      	bne.n	8008776 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	4b12      	ldr	r3, [pc, #72]	; (80087ac <osTimerNew+0xf4>)
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	69fa      	ldr	r2, [r7, #28]
 800876a:	2101      	movs	r1, #1
 800876c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800876e:	f002 fc7a 	bl	800b066 <xTimerCreateStatic>
 8008772:	6238      	str	r0, [r7, #32]
 8008774:	e00b      	b.n	800878e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d108      	bne.n	800878e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800877c:	4b0b      	ldr	r3, [pc, #44]	; (80087ac <osTimerNew+0xf4>)
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	2101      	movs	r1, #1
 8008786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008788:	f002 fc4c 	bl	800b024 <xTimerCreate>
 800878c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d105      	bne.n	80087a0 <osTimerNew+0xe8>
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <osTimerNew+0xe8>
        vPortFree (callb);
 800879a:	6978      	ldr	r0, [r7, #20]
 800879c:	f003 fb20 	bl	800bde0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80087a0:	6a3b      	ldr	r3, [r7, #32]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3728      	adds	r7, #40	; 0x28
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	0800868d 	.word	0x0800868d

080087b0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08a      	sub	sp, #40	; 0x28
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80087bc:	2300      	movs	r3, #0
 80087be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087c0:	f3ef 8305 	mrs	r3, IPSR
 80087c4:	613b      	str	r3, [r7, #16]
  return(result);
 80087c6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d175      	bne.n	80088b8 <osSemaphoreNew+0x108>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d072      	beq.n	80088b8 <osSemaphoreNew+0x108>
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d86e      	bhi.n	80088b8 <osSemaphoreNew+0x108>
    mem = -1;
 80087da:	f04f 33ff 	mov.w	r3, #4294967295
 80087de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d015      	beq.n	8008812 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d006      	beq.n	80087fc <osSemaphoreNew+0x4c>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	2b4f      	cmp	r3, #79	; 0x4f
 80087f4:	d902      	bls.n	80087fc <osSemaphoreNew+0x4c>
        mem = 1;
 80087f6:	2301      	movs	r3, #1
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	e00c      	b.n	8008816 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d108      	bne.n	8008816 <osSemaphoreNew+0x66>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <osSemaphoreNew+0x66>
          mem = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	61bb      	str	r3, [r7, #24]
 8008810:	e001      	b.n	8008816 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881c:	d04c      	beq.n	80088b8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d128      	bne.n	8008876 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d10a      	bne.n	8008840 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	2203      	movs	r2, #3
 8008830:	9200      	str	r2, [sp, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	2100      	movs	r1, #0
 8008836:	2001      	movs	r0, #1
 8008838:	f000 fa2a 	bl	8008c90 <xQueueGenericCreateStatic>
 800883c:	61f8      	str	r0, [r7, #28]
 800883e:	e005      	b.n	800884c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008840:	2203      	movs	r2, #3
 8008842:	2100      	movs	r1, #0
 8008844:	2001      	movs	r0, #1
 8008846:	f000 fa9b 	bl	8008d80 <xQueueGenericCreate>
 800884a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d022      	beq.n	8008898 <osSemaphoreNew+0xe8>
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d01f      	beq.n	8008898 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008858:	2300      	movs	r3, #0
 800885a:	2200      	movs	r2, #0
 800885c:	2100      	movs	r1, #0
 800885e:	69f8      	ldr	r0, [r7, #28]
 8008860:	f000 fb56 	bl	8008f10 <xQueueGenericSend>
 8008864:	4603      	mov	r3, r0
 8008866:	2b01      	cmp	r3, #1
 8008868:	d016      	beq.n	8008898 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800886a:	69f8      	ldr	r0, [r7, #28]
 800886c:	f000 ffe2 	bl	8009834 <vQueueDelete>
            hSemaphore = NULL;
 8008870:	2300      	movs	r3, #0
 8008872:	61fb      	str	r3, [r7, #28]
 8008874:	e010      	b.n	8008898 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d108      	bne.n	800888e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	461a      	mov	r2, r3
 8008882:	68b9      	ldr	r1, [r7, #8]
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 fad8 	bl	8008e3a <xQueueCreateCountingSemaphoreStatic>
 800888a:	61f8      	str	r0, [r7, #28]
 800888c:	e004      	b.n	8008898 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800888e:	68b9      	ldr	r1, [r7, #8]
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 fb09 	bl	8008ea8 <xQueueCreateCountingSemaphore>
 8008896:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00c      	beq.n	80088b8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d003      	beq.n	80088ac <osSemaphoreNew+0xfc>
          name = attr->name;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	617b      	str	r3, [r7, #20]
 80088aa:	e001      	b.n	80088b0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80088ac:	2300      	movs	r3, #0
 80088ae:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80088b0:	6979      	ldr	r1, [r7, #20]
 80088b2:	69f8      	ldr	r0, [r7, #28]
 80088b4:	f001 f90a 	bl	8009acc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80088b8:	69fb      	ldr	r3, [r7, #28]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3720      	adds	r7, #32
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d103      	bne.n	80088e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80088dc:	f06f 0303 	mvn.w	r3, #3
 80088e0:	617b      	str	r3, [r7, #20]
 80088e2:	e039      	b.n	8008958 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e4:	f3ef 8305 	mrs	r3, IPSR
 80088e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80088ea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d022      	beq.n	8008936 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80088f6:	f06f 0303 	mvn.w	r3, #3
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	e02c      	b.n	8008958 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80088fe:	2300      	movs	r3, #0
 8008900:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008902:	f107 0308 	add.w	r3, r7, #8
 8008906:	461a      	mov	r2, r3
 8008908:	2100      	movs	r1, #0
 800890a:	6938      	ldr	r0, [r7, #16]
 800890c:	f000 ff12 	bl	8009734 <xQueueReceiveFromISR>
 8008910:	4603      	mov	r3, r0
 8008912:	2b01      	cmp	r3, #1
 8008914:	d003      	beq.n	800891e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008916:	f06f 0302 	mvn.w	r3, #2
 800891a:	617b      	str	r3, [r7, #20]
 800891c:	e01c      	b.n	8008958 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d019      	beq.n	8008958 <osSemaphoreAcquire+0x94>
 8008924:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <osSemaphoreAcquire+0xa0>)
 8008926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	e010      	b.n	8008958 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6938      	ldr	r0, [r7, #16]
 800893a:	f000 fdef 	bl	800951c <xQueueSemaphoreTake>
 800893e:	4603      	mov	r3, r0
 8008940:	2b01      	cmp	r3, #1
 8008942:	d009      	beq.n	8008958 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800894a:	f06f 0301 	mvn.w	r3, #1
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	e002      	b.n	8008958 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008952:	f06f 0302 	mvn.w	r3, #2
 8008956:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008958:	697b      	ldr	r3, [r7, #20]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	e000ed04 	.word	0xe000ed04

08008968 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d103      	bne.n	8008986 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800897e:	f06f 0303 	mvn.w	r3, #3
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	e02c      	b.n	80089e0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008986:	f3ef 8305 	mrs	r3, IPSR
 800898a:	60fb      	str	r3, [r7, #12]
  return(result);
 800898c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800898e:	2b00      	cmp	r3, #0
 8008990:	d01a      	beq.n	80089c8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008992:	2300      	movs	r3, #0
 8008994:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008996:	f107 0308 	add.w	r3, r7, #8
 800899a:	4619      	mov	r1, r3
 800899c:	6938      	ldr	r0, [r7, #16]
 800899e:	f000 fc50 	bl	8009242 <xQueueGiveFromISR>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d003      	beq.n	80089b0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80089a8:	f06f 0302 	mvn.w	r3, #2
 80089ac:	617b      	str	r3, [r7, #20]
 80089ae:	e017      	b.n	80089e0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d014      	beq.n	80089e0 <osSemaphoreRelease+0x78>
 80089b6:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <osSemaphoreRelease+0x84>)
 80089b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	e00b      	b.n	80089e0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80089c8:	2300      	movs	r3, #0
 80089ca:	2200      	movs	r2, #0
 80089cc:	2100      	movs	r1, #0
 80089ce:	6938      	ldr	r0, [r7, #16]
 80089d0:	f000 fa9e 	bl	8008f10 <xQueueGenericSend>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d002      	beq.n	80089e0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80089da:	f06f 0302 	mvn.w	r3, #2
 80089de:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80089e0:	697b      	ldr	r3, [r7, #20]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3718      	adds	r7, #24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	e000ed04 	.word	0xe000ed04

080089f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4a07      	ldr	r2, [pc, #28]	; (8008a1c <vApplicationGetIdleTaskMemory+0x2c>)
 8008a00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4a06      	ldr	r2, [pc, #24]	; (8008a20 <vApplicationGetIdleTaskMemory+0x30>)
 8008a06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a0e:	601a      	str	r2, [r3, #0]
}
 8008a10:	bf00      	nop
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	20002374 	.word	0x20002374
 8008a20:	20002430 	.word	0x20002430

08008a24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4a07      	ldr	r2, [pc, #28]	; (8008a50 <vApplicationGetTimerTaskMemory+0x2c>)
 8008a34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4a06      	ldr	r2, [pc, #24]	; (8008a54 <vApplicationGetTimerTaskMemory+0x30>)
 8008a3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a42:	601a      	str	r2, [r3, #0]
}
 8008a44:	bf00      	nop
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	20002830 	.word	0x20002830
 8008a54:	200028ec 	.word	0x200028ec

08008a58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f103 0208 	add.w	r2, r3, #8
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f103 0208 	add.w	r2, r3, #8
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f103 0208 	add.w	r2, r3, #8
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008aa6:	bf00      	nop
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b085      	sub	sp, #20
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	601a      	str	r2, [r3, #0]
}
 8008aee:	bf00      	nop
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008afa:	b480      	push	{r7}
 8008afc:	b085      	sub	sp, #20
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b10:	d103      	bne.n	8008b1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e00c      	b.n	8008b34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	e002      	b.n	8008b28 <vListInsert+0x2e>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d2f6      	bcs.n	8008b22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	601a      	str	r2, [r3, #0]
}
 8008b60:	bf00      	nop
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6892      	ldr	r2, [r2, #8]
 8008b82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6852      	ldr	r2, [r2, #4]
 8008b8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d103      	bne.n	8008ba0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	1e5a      	subs	r2, r3, #1
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10a      	bne.n	8008bea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008bea:	f002 ff0b 	bl	800ba04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008bfa:	fb01 f303 	mul.w	r3, r1, r3
 8008bfe:	441a      	add	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	68f9      	ldr	r1, [r7, #12]
 8008c1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c20:	fb01 f303 	mul.w	r3, r1, r3
 8008c24:	441a      	add	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	22ff      	movs	r2, #255	; 0xff
 8008c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	22ff      	movs	r2, #255	; 0xff
 8008c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d114      	bne.n	8008c6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01a      	beq.n	8008c7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3310      	adds	r3, #16
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 fcbd 	bl	800a5cc <xTaskRemoveFromEventList>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d012      	beq.n	8008c7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c58:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <xQueueGenericReset+0xcc>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	e009      	b.n	8008c7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3310      	adds	r3, #16
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff fef2 	bl	8008a58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3324      	adds	r3, #36	; 0x24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff feed 	bl	8008a58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c7e:	f002 fef1 	bl	800ba64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c82:	2301      	movs	r3, #1
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	e000ed04 	.word	0xe000ed04

08008c90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08e      	sub	sp, #56	; 0x38
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <xQueueGenericCreateStatic+0x52>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <xQueueGenericCreateStatic+0x56>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e000      	b.n	8008ce8 <xQueueGenericCreateStatic+0x58>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10a      	bne.n	8008d02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	623b      	str	r3, [r7, #32]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d102      	bne.n	8008d0e <xQueueGenericCreateStatic+0x7e>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <xQueueGenericCreateStatic+0x82>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e000      	b.n	8008d14 <xQueueGenericCreateStatic+0x84>
 8008d12:	2300      	movs	r3, #0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	61fb      	str	r3, [r7, #28]
}
 8008d2a:	bf00      	nop
 8008d2c:	e7fe      	b.n	8008d2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d2e:	2350      	movs	r3, #80	; 0x50
 8008d30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b50      	cmp	r3, #80	; 0x50
 8008d36:	d00a      	beq.n	8008d4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	61bb      	str	r3, [r7, #24]
}
 8008d4a:	bf00      	nop
 8008d4c:	e7fe      	b.n	8008d4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00d      	beq.n	8008d76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 f83f 	bl	8008df4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3730      	adds	r7, #48	; 0x30
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08a      	sub	sp, #40	; 0x28
 8008d84:	af02      	add	r7, sp, #8
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10a      	bne.n	8008daa <xQueueGenericCreate+0x2a>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	613b      	str	r3, [r7, #16]
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	fb02 f303 	mul.w	r3, r2, r3
 8008db2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	3350      	adds	r3, #80	; 0x50
 8008db8:	4618      	mov	r0, r3
 8008dba:	f002 ff45 	bl	800bc48 <pvPortMalloc>
 8008dbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d011      	beq.n	8008dea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	3350      	adds	r3, #80	; 0x50
 8008dce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008dd8:	79fa      	ldrb	r2, [r7, #7]
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	4613      	mov	r3, r2
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	68b9      	ldr	r1, [r7, #8]
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 f805 	bl	8008df4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008dea:	69bb      	ldr	r3, [r7, #24]
	}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3720      	adds	r7, #32
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d103      	bne.n	8008e10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	e002      	b.n	8008e16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e22:	2101      	movs	r1, #1
 8008e24:	69b8      	ldr	r0, [r7, #24]
 8008e26:	f7ff fecb 	bl	8008bc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	78fa      	ldrb	r2, [r7, #3]
 8008e2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e32:	bf00      	nop
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b08a      	sub	sp, #40	; 0x28
 8008e3e:	af02      	add	r7, sp, #8
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	60b9      	str	r1, [r7, #8]
 8008e44:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	61bb      	str	r3, [r7, #24]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d90a      	bls.n	8008e80 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	617b      	str	r3, [r7, #20]
}
 8008e7c:	bf00      	nop
 8008e7e:	e7fe      	b.n	8008e7e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e80:	2302      	movs	r3, #2
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	2100      	movs	r1, #0
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f7ff ff00 	bl	8008c90 <xQueueGenericCreateStatic>
 8008e90:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
	}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3720      	adds	r7, #32
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	613b      	str	r3, [r7, #16]
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d90a      	bls.n	8008eec <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	60fb      	str	r3, [r7, #12]
}
 8008ee8:	bf00      	nop
 8008eea:	e7fe      	b.n	8008eea <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008eec:	2202      	movs	r2, #2
 8008eee:	2100      	movs	r1, #0
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff ff45 	bl	8008d80 <xQueueGenericCreate>
 8008ef6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d002      	beq.n	8008f04 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f04:	697b      	ldr	r3, [r7, #20]
	}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
	...

08008f10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08e      	sub	sp, #56	; 0x38
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10a      	bne.n	8008f42 <xQueueGenericSend+0x32>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f3e:	bf00      	nop
 8008f40:	e7fe      	b.n	8008f40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d103      	bne.n	8008f50 <xQueueGenericSend+0x40>
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <xQueueGenericSend+0x44>
 8008f50:	2301      	movs	r3, #1
 8008f52:	e000      	b.n	8008f56 <xQueueGenericSend+0x46>
 8008f54:	2300      	movs	r3, #0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <xQueueGenericSend+0x60>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d103      	bne.n	8008f7e <xQueueGenericSend+0x6e>
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d101      	bne.n	8008f82 <xQueueGenericSend+0x72>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <xQueueGenericSend+0x74>
 8008f82:	2300      	movs	r3, #0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10a      	bne.n	8008f9e <xQueueGenericSend+0x8e>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	623b      	str	r3, [r7, #32]
}
 8008f9a:	bf00      	nop
 8008f9c:	e7fe      	b.n	8008f9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f9e:	f001 fcd7 	bl	800a950 <xTaskGetSchedulerState>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d102      	bne.n	8008fae <xQueueGenericSend+0x9e>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <xQueueGenericSend+0xa2>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <xQueueGenericSend+0xa4>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <xQueueGenericSend+0xbe>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	61fb      	str	r3, [r7, #28]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fce:	f002 fd19 	bl	800ba04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d302      	bcc.n	8008fe4 <xQueueGenericSend+0xd4>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d129      	bne.n	8009038 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	68b9      	ldr	r1, [r7, #8]
 8008fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fea:	f000 fc5e 	bl	80098aa <prvCopyDataToQueue>
 8008fee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d010      	beq.n	800901a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	3324      	adds	r3, #36	; 0x24
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f001 fae5 	bl	800a5cc <xTaskRemoveFromEventList>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d013      	beq.n	8009030 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009008:	4b3f      	ldr	r3, [pc, #252]	; (8009108 <xQueueGenericSend+0x1f8>)
 800900a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800900e:	601a      	str	r2, [r3, #0]
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	e00a      	b.n	8009030 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009020:	4b39      	ldr	r3, [pc, #228]	; (8009108 <xQueueGenericSend+0x1f8>)
 8009022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009030:	f002 fd18 	bl	800ba64 <vPortExitCritical>
				return pdPASS;
 8009034:	2301      	movs	r3, #1
 8009036:	e063      	b.n	8009100 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d103      	bne.n	8009046 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800903e:	f002 fd11 	bl	800ba64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009042:	2300      	movs	r3, #0
 8009044:	e05c      	b.n	8009100 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009048:	2b00      	cmp	r3, #0
 800904a:	d106      	bne.n	800905a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800904c:	f107 0314 	add.w	r3, r7, #20
 8009050:	4618      	mov	r0, r3
 8009052:	f001 fb1f 	bl	800a694 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009056:	2301      	movs	r3, #1
 8009058:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800905a:	f002 fd03 	bl	800ba64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800905e:	f001 f88b 	bl	800a178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009062:	f002 fccf 	bl	800ba04 <vPortEnterCritical>
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800906c:	b25b      	sxtb	r3, r3
 800906e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009072:	d103      	bne.n	800907c <xQueueGenericSend+0x16c>
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009082:	b25b      	sxtb	r3, r3
 8009084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009088:	d103      	bne.n	8009092 <xQueueGenericSend+0x182>
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009092:	f002 fce7 	bl	800ba64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009096:	1d3a      	adds	r2, r7, #4
 8009098:	f107 0314 	add.w	r3, r7, #20
 800909c:	4611      	mov	r1, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 fb0e 	bl	800a6c0 <xTaskCheckForTimeOut>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d124      	bne.n	80090f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ac:	f000 fcf5 	bl	8009a9a <prvIsQueueFull>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d018      	beq.n	80090e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	3310      	adds	r3, #16
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	4611      	mov	r1, r2
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fa34 	bl	800a52c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090c6:	f000 fc80 	bl	80099ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090ca:	f001 f863 	bl	800a194 <xTaskResumeAll>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f47f af7c 	bne.w	8008fce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80090d6:	4b0c      	ldr	r3, [pc, #48]	; (8009108 <xQueueGenericSend+0x1f8>)
 80090d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	e772      	b.n	8008fce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ea:	f000 fc6e 	bl	80099ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090ee:	f001 f851 	bl	800a194 <xTaskResumeAll>
 80090f2:	e76c      	b.n	8008fce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090f6:	f000 fc68 	bl	80099ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090fa:	f001 f84b 	bl	800a194 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009100:	4618      	mov	r0, r3
 8009102:	3738      	adds	r7, #56	; 0x38
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b090      	sub	sp, #64	; 0x40
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009136:	bf00      	nop
 8009138:	e7fe      	b.n	8009138 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d103      	bne.n	8009148 <xQueueGenericSendFromISR+0x3c>
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <xQueueGenericSendFromISR+0x40>
 8009148:	2301      	movs	r3, #1
 800914a:	e000      	b.n	800914e <xQueueGenericSendFromISR+0x42>
 800914c:	2300      	movs	r3, #0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10a      	bne.n	8009168 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009164:	bf00      	nop
 8009166:	e7fe      	b.n	8009166 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b02      	cmp	r3, #2
 800916c:	d103      	bne.n	8009176 <xQueueGenericSendFromISR+0x6a>
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009172:	2b01      	cmp	r3, #1
 8009174:	d101      	bne.n	800917a <xQueueGenericSendFromISR+0x6e>
 8009176:	2301      	movs	r3, #1
 8009178:	e000      	b.n	800917c <xQueueGenericSendFromISR+0x70>
 800917a:	2300      	movs	r3, #0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10a      	bne.n	8009196 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	623b      	str	r3, [r7, #32]
}
 8009192:	bf00      	nop
 8009194:	e7fe      	b.n	8009194 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009196:	f002 fd17 	bl	800bbc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800919a:	f3ef 8211 	mrs	r2, BASEPRI
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	61fa      	str	r2, [r7, #28]
 80091b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091be:	429a      	cmp	r2, r3
 80091c0:	d302      	bcc.n	80091c8 <xQueueGenericSendFromISR+0xbc>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d12f      	bne.n	8009228 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091de:	f000 fb64 	bl	80098aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ea:	d112      	bne.n	8009212 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d016      	beq.n	8009222 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	3324      	adds	r3, #36	; 0x24
 80091f8:	4618      	mov	r0, r3
 80091fa:	f001 f9e7 	bl	800a5cc <xTaskRemoveFromEventList>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00e      	beq.n	8009222 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00b      	beq.n	8009222 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	e007      	b.n	8009222 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009212:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009216:	3301      	adds	r3, #1
 8009218:	b2db      	uxtb	r3, r3
 800921a:	b25a      	sxtb	r2, r3
 800921c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009222:	2301      	movs	r3, #1
 8009224:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009226:	e001      	b.n	800922c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009228:	2300      	movs	r3, #0
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800922c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009236:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800923a:	4618      	mov	r0, r3
 800923c:	3740      	adds	r7, #64	; 0x40
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b08e      	sub	sp, #56	; 0x38
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10a      	bne.n	800926c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	623b      	str	r3, [r7, #32]
}
 8009268:	bf00      	nop
 800926a:	e7fe      	b.n	800926a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00a      	beq.n	800928a <xQueueGiveFromISR+0x48>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	61fb      	str	r3, [r7, #28]
}
 8009286:	bf00      	nop
 8009288:	e7fe      	b.n	8009288 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800928a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d103      	bne.n	800929a <xQueueGiveFromISR+0x58>
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <xQueueGiveFromISR+0x5c>
 800929a:	2301      	movs	r3, #1
 800929c:	e000      	b.n	80092a0 <xQueueGiveFromISR+0x5e>
 800929e:	2300      	movs	r3, #0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <xQueueGiveFromISR+0x78>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	61bb      	str	r3, [r7, #24]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092ba:	f002 fc85 	bl	800bbc8 <vPortValidateInterruptPriority>
	__asm volatile
 80092be:	f3ef 8211 	mrs	r2, BASEPRI
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	617a      	str	r2, [r7, #20]
 80092d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80092d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d22b      	bcs.n	8009342 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009304:	d112      	bne.n	800932c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	2b00      	cmp	r3, #0
 800930c:	d016      	beq.n	800933c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	3324      	adds	r3, #36	; 0x24
 8009312:	4618      	mov	r0, r3
 8009314:	f001 f95a 	bl	800a5cc <xTaskRemoveFromEventList>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00e      	beq.n	800933c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2201      	movs	r2, #1
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	e007      	b.n	800933c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800932c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009330:	3301      	adds	r3, #1
 8009332:	b2db      	uxtb	r3, r3
 8009334:	b25a      	sxtb	r2, r3
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800933c:	2301      	movs	r3, #1
 800933e:	637b      	str	r3, [r7, #52]	; 0x34
 8009340:	e001      	b.n	8009346 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009342:	2300      	movs	r3, #0
 8009344:	637b      	str	r3, [r7, #52]	; 0x34
 8009346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009348:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f383 8811 	msr	BASEPRI, r3
}
 8009350:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009354:	4618      	mov	r0, r3
 8009356:	3738      	adds	r7, #56	; 0x38
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08c      	sub	sp, #48	; 0x30
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009368:	2300      	movs	r3, #0
 800936a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <xQueueReceive+0x30>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	623b      	str	r3, [r7, #32]
}
 8009388:	bf00      	nop
 800938a:	e7fe      	b.n	800938a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d103      	bne.n	800939a <xQueueReceive+0x3e>
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <xQueueReceive+0x42>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <xQueueReceive+0x44>
 800939e:	2300      	movs	r3, #0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xQueueReceive+0x5e>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	61fb      	str	r3, [r7, #28]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093ba:	f001 fac9 	bl	800a950 <xTaskGetSchedulerState>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d102      	bne.n	80093ca <xQueueReceive+0x6e>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <xQueueReceive+0x72>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e000      	b.n	80093d0 <xQueueReceive+0x74>
 80093ce:	2300      	movs	r3, #0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10a      	bne.n	80093ea <xQueueReceive+0x8e>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	61bb      	str	r3, [r7, #24]
}
 80093e6:	bf00      	nop
 80093e8:	e7fe      	b.n	80093e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093ea:	f002 fb0b 	bl	800ba04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d01f      	beq.n	800943a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093fa:	68b9      	ldr	r1, [r7, #8]
 80093fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093fe:	f000 fabe 	bl	800997e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	1e5a      	subs	r2, r3, #1
 8009406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009408:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00f      	beq.n	8009432 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009414:	3310      	adds	r3, #16
 8009416:	4618      	mov	r0, r3
 8009418:	f001 f8d8 	bl	800a5cc <xTaskRemoveFromEventList>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d007      	beq.n	8009432 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009422:	4b3d      	ldr	r3, [pc, #244]	; (8009518 <xQueueReceive+0x1bc>)
 8009424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009432:	f002 fb17 	bl	800ba64 <vPortExitCritical>
				return pdPASS;
 8009436:	2301      	movs	r3, #1
 8009438:	e069      	b.n	800950e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009440:	f002 fb10 	bl	800ba64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009444:	2300      	movs	r3, #0
 8009446:	e062      	b.n	800950e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d106      	bne.n	800945c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800944e:	f107 0310 	add.w	r3, r7, #16
 8009452:	4618      	mov	r0, r3
 8009454:	f001 f91e 	bl	800a694 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009458:	2301      	movs	r3, #1
 800945a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800945c:	f002 fb02 	bl	800ba64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009460:	f000 fe8a 	bl	800a178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009464:	f002 face 	bl	800ba04 <vPortEnterCritical>
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800946e:	b25b      	sxtb	r3, r3
 8009470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009474:	d103      	bne.n	800947e <xQueueReceive+0x122>
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009484:	b25b      	sxtb	r3, r3
 8009486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948a:	d103      	bne.n	8009494 <xQueueReceive+0x138>
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009494:	f002 fae6 	bl	800ba64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009498:	1d3a      	adds	r2, r7, #4
 800949a:	f107 0310 	add.w	r3, r7, #16
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f001 f90d 	bl	800a6c0 <xTaskCheckForTimeOut>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d123      	bne.n	80094f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ae:	f000 fade 	bl	8009a6e <prvIsQueueEmpty>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d017      	beq.n	80094e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	3324      	adds	r3, #36	; 0x24
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	4611      	mov	r1, r2
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 f833 	bl	800a52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c8:	f000 fa7f 	bl	80099ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094cc:	f000 fe62 	bl	800a194 <xTaskResumeAll>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d189      	bne.n	80093ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80094d6:	4b10      	ldr	r3, [pc, #64]	; (8009518 <xQueueReceive+0x1bc>)
 80094d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	e780      	b.n	80093ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ea:	f000 fa6e 	bl	80099ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094ee:	f000 fe51 	bl	800a194 <xTaskResumeAll>
 80094f2:	e77a      	b.n	80093ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094f6:	f000 fa68 	bl	80099ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094fa:	f000 fe4b 	bl	800a194 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009500:	f000 fab5 	bl	8009a6e <prvIsQueueEmpty>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	f43f af6f 	beq.w	80093ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800950c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800950e:	4618      	mov	r0, r3
 8009510:	3730      	adds	r7, #48	; 0x30
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	e000ed04 	.word	0xe000ed04

0800951c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08e      	sub	sp, #56	; 0x38
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009526:	2300      	movs	r3, #0
 8009528:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800952e:	2300      	movs	r3, #0
 8009530:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10a      	bne.n	800954e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	623b      	str	r3, [r7, #32]
}
 800954a:	bf00      	nop
 800954c:	e7fe      	b.n	800954c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	61fb      	str	r3, [r7, #28]
}
 8009568:	bf00      	nop
 800956a:	e7fe      	b.n	800956a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800956c:	f001 f9f0 	bl	800a950 <xTaskGetSchedulerState>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d102      	bne.n	800957c <xQueueSemaphoreTake+0x60>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <xQueueSemaphoreTake+0x64>
 800957c:	2301      	movs	r3, #1
 800957e:	e000      	b.n	8009582 <xQueueSemaphoreTake+0x66>
 8009580:	2300      	movs	r3, #0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10a      	bne.n	800959c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	61bb      	str	r3, [r7, #24]
}
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800959c:	f002 fa32 	bl	800ba04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80095a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d024      	beq.n	80095f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	1e5a      	subs	r2, r3, #1
 80095b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d104      	bne.n	80095c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80095bc:	f001 fb3e 	bl	800ac3c <pvTaskIncrementMutexHeldCount>
 80095c0:	4602      	mov	r2, r0
 80095c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00f      	beq.n	80095ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d0:	3310      	adds	r3, #16
 80095d2:	4618      	mov	r0, r3
 80095d4:	f000 fffa 	bl	800a5cc <xTaskRemoveFromEventList>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d007      	beq.n	80095ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095de:	4b54      	ldr	r3, [pc, #336]	; (8009730 <xQueueSemaphoreTake+0x214>)
 80095e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095ee:	f002 fa39 	bl	800ba64 <vPortExitCritical>
				return pdPASS;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e097      	b.n	8009726 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d111      	bne.n	8009620 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00a      	beq.n	8009618 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	617b      	str	r3, [r7, #20]
}
 8009614:	bf00      	nop
 8009616:	e7fe      	b.n	8009616 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009618:	f002 fa24 	bl	800ba64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800961c:	2300      	movs	r3, #0
 800961e:	e082      	b.n	8009726 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009622:	2b00      	cmp	r3, #0
 8009624:	d106      	bne.n	8009634 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009626:	f107 030c 	add.w	r3, r7, #12
 800962a:	4618      	mov	r0, r3
 800962c:	f001 f832 	bl	800a694 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009630:	2301      	movs	r3, #1
 8009632:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009634:	f002 fa16 	bl	800ba64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009638:	f000 fd9e 	bl	800a178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800963c:	f002 f9e2 	bl	800ba04 <vPortEnterCritical>
 8009640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009646:	b25b      	sxtb	r3, r3
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964c:	d103      	bne.n	8009656 <xQueueSemaphoreTake+0x13a>
 800964e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800965c:	b25b      	sxtb	r3, r3
 800965e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009662:	d103      	bne.n	800966c <xQueueSemaphoreTake+0x150>
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800966c:	f002 f9fa 	bl	800ba64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009670:	463a      	mov	r2, r7
 8009672:	f107 030c 	add.w	r3, r7, #12
 8009676:	4611      	mov	r1, r2
 8009678:	4618      	mov	r0, r3
 800967a:	f001 f821 	bl	800a6c0 <xTaskCheckForTimeOut>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d132      	bne.n	80096ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009686:	f000 f9f2 	bl	8009a6e <prvIsQueueEmpty>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d026      	beq.n	80096de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d109      	bne.n	80096ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009698:	f002 f9b4 	bl	800ba04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f001 f973 	bl	800a98c <xTaskPriorityInherit>
 80096a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80096a8:	f002 f9dc 	bl	800ba64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ae:	3324      	adds	r3, #36	; 0x24
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	4611      	mov	r1, r2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 ff39 	bl	800a52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096bc:	f000 f985 	bl	80099ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096c0:	f000 fd68 	bl	800a194 <xTaskResumeAll>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f47f af68 	bne.w	800959c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80096cc:	4b18      	ldr	r3, [pc, #96]	; (8009730 <xQueueSemaphoreTake+0x214>)
 80096ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	e75e      	b.n	800959c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80096de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096e0:	f000 f973 	bl	80099ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096e4:	f000 fd56 	bl	800a194 <xTaskResumeAll>
 80096e8:	e758      	b.n	800959c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80096ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096ec:	f000 f96d 	bl	80099ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096f0:	f000 fd50 	bl	800a194 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096f6:	f000 f9ba 	bl	8009a6e <prvIsQueueEmpty>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f43f af4d 	beq.w	800959c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00d      	beq.n	8009724 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009708:	f002 f97c 	bl	800ba04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800970c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800970e:	f000 f8b4 	bl	800987a <prvGetDisinheritPriorityAfterTimeout>
 8009712:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800971a:	4618      	mov	r0, r3
 800971c:	f001 fa0c 	bl	800ab38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009720:	f002 f9a0 	bl	800ba64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009724:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009726:	4618      	mov	r0, r3
 8009728:	3738      	adds	r7, #56	; 0x38
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08e      	sub	sp, #56	; 0x38
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	623b      	str	r3, [r7, #32]
}
 800975c:	bf00      	nop
 800975e:	e7fe      	b.n	800975e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d103      	bne.n	800976e <xQueueReceiveFromISR+0x3a>
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <xQueueReceiveFromISR+0x3e>
 800976e:	2301      	movs	r3, #1
 8009770:	e000      	b.n	8009774 <xQueueReceiveFromISR+0x40>
 8009772:	2300      	movs	r3, #0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10a      	bne.n	800978e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	61fb      	str	r3, [r7, #28]
}
 800978a:	bf00      	nop
 800978c:	e7fe      	b.n	800978c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800978e:	f002 fa1b 	bl	800bbc8 <vPortValidateInterruptPriority>
	__asm volatile
 8009792:	f3ef 8211 	mrs	r2, BASEPRI
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	61ba      	str	r2, [r7, #24]
 80097a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80097aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d02f      	beq.n	800981a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80097ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097c8:	f000 f8d9 	bl	800997e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ce:	1e5a      	subs	r2, r3, #1
 80097d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80097d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097dc:	d112      	bne.n	8009804 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d016      	beq.n	8009814 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	3310      	adds	r3, #16
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 feee 	bl	800a5cc <xTaskRemoveFromEventList>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00e      	beq.n	8009814 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00b      	beq.n	8009814 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	e007      	b.n	8009814 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009808:	3301      	adds	r3, #1
 800980a:	b2db      	uxtb	r3, r3
 800980c:	b25a      	sxtb	r2, r3
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009814:	2301      	movs	r3, #1
 8009816:	637b      	str	r3, [r7, #52]	; 0x34
 8009818:	e001      	b.n	800981e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800981a:	2300      	movs	r3, #0
 800981c:	637b      	str	r3, [r7, #52]	; 0x34
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f383 8811 	msr	BASEPRI, r3
}
 8009828:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800982a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800982c:	4618      	mov	r0, r3
 800982e:	3738      	adds	r7, #56	; 0x38
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10a      	bne.n	800985c <vQueueDelete+0x28>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	60bb      	str	r3, [r7, #8]
}
 8009858:	bf00      	nop
 800985a:	e7fe      	b.n	800985a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f95f 	bl	8009b20 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f002 fab7 	bl	800bde0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800987a:	b480      	push	{r7}
 800987c:	b085      	sub	sp, #20
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009886:	2b00      	cmp	r3, #0
 8009888:	d006      	beq.n	8009898 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	e001      	b.n	800989c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800989c:	68fb      	ldr	r3, [r7, #12]
	}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b086      	sub	sp, #24
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	60f8      	str	r0, [r7, #12]
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10d      	bne.n	80098e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d14d      	bne.n	800996c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f001 f8c1 	bl	800aa5c <xTaskPriorityDisinherit>
 80098da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	609a      	str	r2, [r3, #8]
 80098e2:	e043      	b.n	800996c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d119      	bne.n	800991e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6858      	ldr	r0, [r3, #4]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f2:	461a      	mov	r2, r3
 80098f4:	68b9      	ldr	r1, [r7, #8]
 80098f6:	f002 fbb7 	bl	800c068 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	685a      	ldr	r2, [r3, #4]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009902:	441a      	add	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	429a      	cmp	r2, r3
 8009912:	d32b      	bcc.n	800996c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	605a      	str	r2, [r3, #4]
 800991c:	e026      	b.n	800996c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	68d8      	ldr	r0, [r3, #12]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009926:	461a      	mov	r2, r3
 8009928:	68b9      	ldr	r1, [r7, #8]
 800992a:	f002 fb9d 	bl	800c068 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009936:	425b      	negs	r3, r3
 8009938:	441a      	add	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	68da      	ldr	r2, [r3, #12]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d207      	bcs.n	800995a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689a      	ldr	r2, [r3, #8]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009952:	425b      	negs	r3, r3
 8009954:	441a      	add	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b02      	cmp	r3, #2
 800995e:	d105      	bne.n	800996c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	3b01      	subs	r3, #1
 800996a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009974:	697b      	ldr	r3, [r7, #20]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b082      	sub	sp, #8
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998c:	2b00      	cmp	r3, #0
 800998e:	d018      	beq.n	80099c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68da      	ldr	r2, [r3, #12]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009998:	441a      	add	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68da      	ldr	r2, [r3, #12]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d303      	bcc.n	80099b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68d9      	ldr	r1, [r3, #12]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	461a      	mov	r2, r3
 80099bc:	6838      	ldr	r0, [r7, #0]
 80099be:	f002 fb53 	bl	800c068 <memcpy>
	}
}
 80099c2:	bf00      	nop
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80099d2:	f002 f817 	bl	800ba04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099de:	e011      	b.n	8009a04 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d012      	beq.n	8009a0e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3324      	adds	r3, #36	; 0x24
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 fded 	bl	800a5cc <xTaskRemoveFromEventList>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80099f8:	f000 fec4 	bl	800a784 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	dce9      	bgt.n	80099e0 <prvUnlockQueue+0x16>
 8009a0c:	e000      	b.n	8009a10 <prvUnlockQueue+0x46>
					break;
 8009a0e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	22ff      	movs	r2, #255	; 0xff
 8009a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009a18:	f002 f824 	bl	800ba64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a1c:	f001 fff2 	bl	800ba04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a26:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a28:	e011      	b.n	8009a4e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d012      	beq.n	8009a58 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3310      	adds	r3, #16
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fdc8 	bl	800a5cc <xTaskRemoveFromEventList>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a42:	f000 fe9f 	bl	800a784 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	dce9      	bgt.n	8009a2a <prvUnlockQueue+0x60>
 8009a56:	e000      	b.n	8009a5a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a58:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	22ff      	movs	r2, #255	; 0xff
 8009a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a62:	f001 ffff 	bl	800ba64 <vPortExitCritical>
}
 8009a66:	bf00      	nop
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a76:	f001 ffc5 	bl	800ba04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d102      	bne.n	8009a88 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a82:	2301      	movs	r3, #1
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	e001      	b.n	8009a8c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a8c:	f001 ffea 	bl	800ba64 <vPortExitCritical>

	return xReturn;
 8009a90:	68fb      	ldr	r3, [r7, #12]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009aa2:	f001 ffaf 	bl	800ba04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d102      	bne.n	8009ab8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	60fb      	str	r3, [r7, #12]
 8009ab6:	e001      	b.n	8009abc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009abc:	f001 ffd2 	bl	800ba64 <vPortExitCritical>

	return xReturn;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
	...

08009acc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	e014      	b.n	8009b06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009adc:	4a0f      	ldr	r2, [pc, #60]	; (8009b1c <vQueueAddToRegistry+0x50>)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10b      	bne.n	8009b00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ae8:	490c      	ldr	r1, [pc, #48]	; (8009b1c <vQueueAddToRegistry+0x50>)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009af2:	4a0a      	ldr	r2, [pc, #40]	; (8009b1c <vQueueAddToRegistry+0x50>)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	00db      	lsls	r3, r3, #3
 8009af8:	4413      	add	r3, r2
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009afe:	e006      	b.n	8009b0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	3301      	adds	r3, #1
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b07      	cmp	r3, #7
 8009b0a:	d9e7      	bls.n	8009adc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b0c:	bf00      	nop
 8009b0e:	bf00      	nop
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	200030ec 	.word	0x200030ec

08009b20 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	e016      	b.n	8009b5c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009b2e:	4a10      	ldr	r2, [pc, #64]	; (8009b70 <vQueueUnregisterQueue+0x50>)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	00db      	lsls	r3, r3, #3
 8009b34:	4413      	add	r3, r2
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d10b      	bne.n	8009b56 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009b3e:	4a0c      	ldr	r2, [pc, #48]	; (8009b70 <vQueueUnregisterQueue+0x50>)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2100      	movs	r1, #0
 8009b44:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009b48:	4a09      	ldr	r2, [pc, #36]	; (8009b70 <vQueueUnregisterQueue+0x50>)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	4413      	add	r3, r2
 8009b50:	2200      	movs	r2, #0
 8009b52:	605a      	str	r2, [r3, #4]
				break;
 8009b54:	e006      	b.n	8009b64 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b07      	cmp	r3, #7
 8009b60:	d9e5      	bls.n	8009b2e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009b62:	bf00      	nop
 8009b64:	bf00      	nop
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	200030ec 	.word	0x200030ec

08009b74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b84:	f001 ff3e 	bl	800ba04 <vPortEnterCritical>
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b8e:	b25b      	sxtb	r3, r3
 8009b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b94:	d103      	bne.n	8009b9e <vQueueWaitForMessageRestricted+0x2a>
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ba4:	b25b      	sxtb	r3, r3
 8009ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009baa:	d103      	bne.n	8009bb4 <vQueueWaitForMessageRestricted+0x40>
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bb4:	f001 ff56 	bl	800ba64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d106      	bne.n	8009bce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	3324      	adds	r3, #36	; 0x24
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	68b9      	ldr	r1, [r7, #8]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fcd3 	bl	800a574 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009bce:	6978      	ldr	r0, [r7, #20]
 8009bd0:	f7ff fefb 	bl	80099ca <prvUnlockQueue>
	}
 8009bd4:	bf00      	nop
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08e      	sub	sp, #56	; 0x38
 8009be0:	af04      	add	r7, sp, #16
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	623b      	str	r3, [r7, #32]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10a      	bne.n	8009c22 <xTaskCreateStatic+0x46>
	__asm volatile
 8009c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	61fb      	str	r3, [r7, #28]
}
 8009c1e:	bf00      	nop
 8009c20:	e7fe      	b.n	8009c20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c22:	23bc      	movs	r3, #188	; 0xbc
 8009c24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	2bbc      	cmp	r3, #188	; 0xbc
 8009c2a:	d00a      	beq.n	8009c42 <xTaskCreateStatic+0x66>
	__asm volatile
 8009c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	61bb      	str	r3, [r7, #24]
}
 8009c3e:	bf00      	nop
 8009c40:	e7fe      	b.n	8009c40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d01e      	beq.n	8009c88 <xTaskCreateStatic+0xac>
 8009c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d01b      	beq.n	8009c88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c62:	2300      	movs	r3, #0
 8009c64:	9303      	str	r3, [sp, #12]
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	9302      	str	r3, [sp, #8]
 8009c6a:	f107 0314 	add.w	r3, r7, #20
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	68b9      	ldr	r1, [r7, #8]
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 f850 	bl	8009d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c82:	f000 f8f3 	bl	8009e6c <prvAddNewTaskToReadyList>
 8009c86:	e001      	b.n	8009c8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c8c:	697b      	ldr	r3, [r7, #20]
	}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3728      	adds	r7, #40	; 0x28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b08c      	sub	sp, #48	; 0x30
 8009c9a:	af04      	add	r7, sp, #16
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	603b      	str	r3, [r7, #0]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4618      	mov	r0, r3
 8009cac:	f001 ffcc 	bl	800bc48 <pvPortMalloc>
 8009cb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00e      	beq.n	8009cd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009cb8:	20bc      	movs	r0, #188	; 0xbc
 8009cba:	f001 ffc5 	bl	800bc48 <pvPortMalloc>
 8009cbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	631a      	str	r2, [r3, #48]	; 0x30
 8009ccc:	e005      	b.n	8009cda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009cce:	6978      	ldr	r0, [r7, #20]
 8009cd0:	f002 f886 	bl	800bde0 <vPortFree>
 8009cd4:	e001      	b.n	8009cda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d017      	beq.n	8009d10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ce8:	88fa      	ldrh	r2, [r7, #6]
 8009cea:	2300      	movs	r3, #0
 8009cec:	9303      	str	r3, [sp, #12]
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	9302      	str	r3, [sp, #8]
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	68b9      	ldr	r1, [r7, #8]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 f80e 	bl	8009d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d04:	69f8      	ldr	r0, [r7, #28]
 8009d06:	f000 f8b1 	bl	8009e6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	61bb      	str	r3, [r7, #24]
 8009d0e:	e002      	b.n	8009d16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d10:	f04f 33ff 	mov.w	r3, #4294967295
 8009d14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d16:	69bb      	ldr	r3, [r7, #24]
	}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3720      	adds	r7, #32
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b088      	sub	sp, #32
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	461a      	mov	r2, r3
 8009d38:	21a5      	movs	r1, #165	; 0xa5
 8009d3a:	f002 f9a3 	bl	800c084 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	f023 0307 	bic.w	r3, r3, #7
 8009d56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	f003 0307 	and.w	r3, r3, #7
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00a      	beq.n	8009d78 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	617b      	str	r3, [r7, #20]
}
 8009d74:	bf00      	nop
 8009d76:	e7fe      	b.n	8009d76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d01f      	beq.n	8009dbe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d7e:	2300      	movs	r3, #0
 8009d80:	61fb      	str	r3, [r7, #28]
 8009d82:	e012      	b.n	8009daa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	4413      	add	r3, r2
 8009d8a:	7819      	ldrb	r1, [r3, #0]
 8009d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	4413      	add	r3, r2
 8009d92:	3334      	adds	r3, #52	; 0x34
 8009d94:	460a      	mov	r2, r1
 8009d96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d006      	beq.n	8009db2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	3301      	adds	r3, #1
 8009da8:	61fb      	str	r3, [r7, #28]
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	2b0f      	cmp	r3, #15
 8009dae:	d9e9      	bls.n	8009d84 <prvInitialiseNewTask+0x64>
 8009db0:	e000      	b.n	8009db4 <prvInitialiseNewTask+0x94>
			{
				break;
 8009db2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009dbc:	e003      	b.n	8009dc6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	2b37      	cmp	r3, #55	; 0x37
 8009dca:	d901      	bls.n	8009dd0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009dcc:	2337      	movs	r3, #55	; 0x37
 8009dce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	2200      	movs	r2, #0
 8009de0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de4:	3304      	adds	r3, #4
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe fe56 	bl	8008a98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dee:	3318      	adds	r3, #24
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe fe51 	bl	8008a98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	3354      	adds	r3, #84	; 0x54
 8009e20:	2260      	movs	r2, #96	; 0x60
 8009e22:	2100      	movs	r1, #0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f002 f92d 	bl	800c084 <memset>
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	4a0c      	ldr	r2, [pc, #48]	; (8009e60 <prvInitialiseNewTask+0x140>)
 8009e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8009e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e32:	4a0c      	ldr	r2, [pc, #48]	; (8009e64 <prvInitialiseNewTask+0x144>)
 8009e34:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	4a0b      	ldr	r2, [pc, #44]	; (8009e68 <prvInitialiseNewTask+0x148>)
 8009e3a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	68f9      	ldr	r1, [r7, #12]
 8009e40:	69b8      	ldr	r0, [r7, #24]
 8009e42:	f001 fcaf 	bl	800b7a4 <pxPortInitialiseStack>
 8009e46:	4602      	mov	r2, r0
 8009e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e58:	bf00      	nop
 8009e5a:	3720      	adds	r7, #32
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	0800e5c0 	.word	0x0800e5c0
 8009e64:	0800e5e0 	.word	0x0800e5e0
 8009e68:	0800e5a0 	.word	0x0800e5a0

08009e6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e74:	f001 fdc6 	bl	800ba04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e78:	4b2d      	ldr	r3, [pc, #180]	; (8009f30 <prvAddNewTaskToReadyList+0xc4>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	4a2c      	ldr	r2, [pc, #176]	; (8009f30 <prvAddNewTaskToReadyList+0xc4>)
 8009e80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e82:	4b2c      	ldr	r3, [pc, #176]	; (8009f34 <prvAddNewTaskToReadyList+0xc8>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d109      	bne.n	8009e9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e8a:	4a2a      	ldr	r2, [pc, #168]	; (8009f34 <prvAddNewTaskToReadyList+0xc8>)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e90:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <prvAddNewTaskToReadyList+0xc4>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d110      	bne.n	8009eba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e98:	f000 fc98 	bl	800a7cc <prvInitialiseTaskLists>
 8009e9c:	e00d      	b.n	8009eba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e9e:	4b26      	ldr	r3, [pc, #152]	; (8009f38 <prvAddNewTaskToReadyList+0xcc>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d109      	bne.n	8009eba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ea6:	4b23      	ldr	r3, [pc, #140]	; (8009f34 <prvAddNewTaskToReadyList+0xc8>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d802      	bhi.n	8009eba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009eb4:	4a1f      	ldr	r2, [pc, #124]	; (8009f34 <prvAddNewTaskToReadyList+0xc8>)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009eba:	4b20      	ldr	r3, [pc, #128]	; (8009f3c <prvAddNewTaskToReadyList+0xd0>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	4a1e      	ldr	r2, [pc, #120]	; (8009f3c <prvAddNewTaskToReadyList+0xd0>)
 8009ec2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ec4:	4b1d      	ldr	r3, [pc, #116]	; (8009f3c <prvAddNewTaskToReadyList+0xd0>)
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed0:	4b1b      	ldr	r3, [pc, #108]	; (8009f40 <prvAddNewTaskToReadyList+0xd4>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d903      	bls.n	8009ee0 <prvAddNewTaskToReadyList+0x74>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	4a18      	ldr	r2, [pc, #96]	; (8009f40 <prvAddNewTaskToReadyList+0xd4>)
 8009ede:	6013      	str	r3, [r2, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4413      	add	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4a15      	ldr	r2, [pc, #84]	; (8009f44 <prvAddNewTaskToReadyList+0xd8>)
 8009eee:	441a      	add	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	f7fe fddb 	bl	8008ab2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009efc:	f001 fdb2 	bl	800ba64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f00:	4b0d      	ldr	r3, [pc, #52]	; (8009f38 <prvAddNewTaskToReadyList+0xcc>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00e      	beq.n	8009f26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f08:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <prvAddNewTaskToReadyList+0xc8>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d207      	bcs.n	8009f26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f16:	4b0c      	ldr	r3, [pc, #48]	; (8009f48 <prvAddNewTaskToReadyList+0xdc>)
 8009f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f26:	bf00      	nop
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20003600 	.word	0x20003600
 8009f34:	2000312c 	.word	0x2000312c
 8009f38:	2000360c 	.word	0x2000360c
 8009f3c:	2000361c 	.word	0x2000361c
 8009f40:	20003608 	.word	0x20003608
 8009f44:	20003130 	.word	0x20003130
 8009f48:	e000ed04 	.word	0xe000ed04

08009f4c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009f54:	f001 fd56 	bl	800ba04 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d102      	bne.n	8009f64 <vTaskDelete+0x18>
 8009f5e:	4b2c      	ldr	r3, [pc, #176]	; (800a010 <vTaskDelete+0xc4>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	e000      	b.n	8009f66 <vTaskDelete+0x1a>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7fe fdfd 	bl	8008b6c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d004      	beq.n	8009f84 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3318      	adds	r3, #24
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe fdf4 	bl	8008b6c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009f84:	4b23      	ldr	r3, [pc, #140]	; (800a014 <vTaskDelete+0xc8>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	4a22      	ldr	r2, [pc, #136]	; (800a014 <vTaskDelete+0xc8>)
 8009f8c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009f8e:	4b20      	ldr	r3, [pc, #128]	; (800a010 <vTaskDelete+0xc4>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d10b      	bne.n	8009fb0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	481e      	ldr	r0, [pc, #120]	; (800a018 <vTaskDelete+0xcc>)
 8009fa0:	f7fe fd87 	bl	8008ab2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009fa4:	4b1d      	ldr	r3, [pc, #116]	; (800a01c <vTaskDelete+0xd0>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	4a1c      	ldr	r2, [pc, #112]	; (800a01c <vTaskDelete+0xd0>)
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	e009      	b.n	8009fc4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009fb0:	4b1b      	ldr	r3, [pc, #108]	; (800a020 <vTaskDelete+0xd4>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	4a1a      	ldr	r2, [pc, #104]	; (800a020 <vTaskDelete+0xd4>)
 8009fb8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 fc74 	bl	800a8a8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009fc0:	f000 fca6 	bl	800a910 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009fc4:	f001 fd4e 	bl	800ba64 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009fc8:	4b16      	ldr	r3, [pc, #88]	; (800a024 <vTaskDelete+0xd8>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d01b      	beq.n	800a008 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009fd0:	4b0f      	ldr	r3, [pc, #60]	; (800a010 <vTaskDelete+0xc4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d116      	bne.n	800a008 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009fda:	4b13      	ldr	r3, [pc, #76]	; (800a028 <vTaskDelete+0xdc>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00a      	beq.n	8009ff8 <vTaskDelete+0xac>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	60bb      	str	r3, [r7, #8]
}
 8009ff4:	bf00      	nop
 8009ff6:	e7fe      	b.n	8009ff6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <vTaskDelete+0xe0>)
 8009ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a008:	bf00      	nop
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	2000312c 	.word	0x2000312c
 800a014:	2000361c 	.word	0x2000361c
 800a018:	200035d4 	.word	0x200035d4
 800a01c:	200035e8 	.word	0x200035e8
 800a020:	20003600 	.word	0x20003600
 800a024:	2000360c 	.word	0x2000360c
 800a028:	20003628 	.word	0x20003628
 800a02c:	e000ed04 	.word	0xe000ed04

0800a030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a038:	2300      	movs	r3, #0
 800a03a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d017      	beq.n	800a072 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a042:	4b13      	ldr	r3, [pc, #76]	; (800a090 <vTaskDelay+0x60>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <vTaskDelay+0x30>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	60bb      	str	r3, [r7, #8]
}
 800a05c:	bf00      	nop
 800a05e:	e7fe      	b.n	800a05e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a060:	f000 f88a 	bl	800a178 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a064:	2100      	movs	r1, #0
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 ff40 	bl	800aeec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a06c:	f000 f892 	bl	800a194 <xTaskResumeAll>
 800a070:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d107      	bne.n	800a088 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a078:	4b06      	ldr	r3, [pc, #24]	; (800a094 <vTaskDelay+0x64>)
 800a07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07e:	601a      	str	r2, [r3, #0]
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a088:	bf00      	nop
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	20003628 	.word	0x20003628
 800a094:	e000ed04 	.word	0xe000ed04

0800a098 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08a      	sub	sp, #40	; 0x28
 800a09c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0a6:	463a      	mov	r2, r7
 800a0a8:	1d39      	adds	r1, r7, #4
 800a0aa:	f107 0308 	add.w	r3, r7, #8
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe fc9e 	bl	80089f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	9202      	str	r2, [sp, #8]
 800a0bc:	9301      	str	r3, [sp, #4]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	460a      	mov	r2, r1
 800a0c6:	4924      	ldr	r1, [pc, #144]	; (800a158 <vTaskStartScheduler+0xc0>)
 800a0c8:	4824      	ldr	r0, [pc, #144]	; (800a15c <vTaskStartScheduler+0xc4>)
 800a0ca:	f7ff fd87 	bl	8009bdc <xTaskCreateStatic>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	4a23      	ldr	r2, [pc, #140]	; (800a160 <vTaskStartScheduler+0xc8>)
 800a0d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0d4:	4b22      	ldr	r3, [pc, #136]	; (800a160 <vTaskStartScheduler+0xc8>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	e001      	b.n	800a0e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d102      	bne.n	800a0f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0ec:	f000 ff52 	bl	800af94 <xTimerCreateTimerTask>
 800a0f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d11b      	bne.n	800a130 <vTaskStartScheduler+0x98>
	__asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	613b      	str	r3, [r7, #16]
}
 800a10a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a10c:	4b15      	ldr	r3, [pc, #84]	; (800a164 <vTaskStartScheduler+0xcc>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3354      	adds	r3, #84	; 0x54
 800a112:	4a15      	ldr	r2, [pc, #84]	; (800a168 <vTaskStartScheduler+0xd0>)
 800a114:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a116:	4b15      	ldr	r3, [pc, #84]	; (800a16c <vTaskStartScheduler+0xd4>)
 800a118:	f04f 32ff 	mov.w	r2, #4294967295
 800a11c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a11e:	4b14      	ldr	r3, [pc, #80]	; (800a170 <vTaskStartScheduler+0xd8>)
 800a120:	2201      	movs	r2, #1
 800a122:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a124:	4b13      	ldr	r3, [pc, #76]	; (800a174 <vTaskStartScheduler+0xdc>)
 800a126:	2200      	movs	r2, #0
 800a128:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a12a:	f001 fbc9 	bl	800b8c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a12e:	e00e      	b.n	800a14e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a136:	d10a      	bne.n	800a14e <vTaskStartScheduler+0xb6>
	__asm volatile
 800a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	60fb      	str	r3, [r7, #12]
}
 800a14a:	bf00      	nop
 800a14c:	e7fe      	b.n	800a14c <vTaskStartScheduler+0xb4>
}
 800a14e:	bf00      	nop
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	0800c348 	.word	0x0800c348
 800a15c:	0800a79d 	.word	0x0800a79d
 800a160:	20003624 	.word	0x20003624
 800a164:	2000312c 	.word	0x2000312c
 800a168:	20000018 	.word	0x20000018
 800a16c:	20003620 	.word	0x20003620
 800a170:	2000360c 	.word	0x2000360c
 800a174:	20003604 	.word	0x20003604

0800a178 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a17c:	4b04      	ldr	r3, [pc, #16]	; (800a190 <vTaskSuspendAll+0x18>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3301      	adds	r3, #1
 800a182:	4a03      	ldr	r2, [pc, #12]	; (800a190 <vTaskSuspendAll+0x18>)
 800a184:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a186:	bf00      	nop
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	20003628 	.word	0x20003628

0800a194 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1a2:	4b42      	ldr	r3, [pc, #264]	; (800a2ac <xTaskResumeAll+0x118>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10a      	bne.n	800a1c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	603b      	str	r3, [r7, #0]
}
 800a1bc:	bf00      	nop
 800a1be:	e7fe      	b.n	800a1be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1c0:	f001 fc20 	bl	800ba04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1c4:	4b39      	ldr	r3, [pc, #228]	; (800a2ac <xTaskResumeAll+0x118>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	4a38      	ldr	r2, [pc, #224]	; (800a2ac <xTaskResumeAll+0x118>)
 800a1cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ce:	4b37      	ldr	r3, [pc, #220]	; (800a2ac <xTaskResumeAll+0x118>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d162      	bne.n	800a29c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1d6:	4b36      	ldr	r3, [pc, #216]	; (800a2b0 <xTaskResumeAll+0x11c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d05e      	beq.n	800a29c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1de:	e02f      	b.n	800a240 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1e0:	4b34      	ldr	r3, [pc, #208]	; (800a2b4 <xTaskResumeAll+0x120>)
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3318      	adds	r3, #24
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7fe fcbd 	bl	8008b6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe fcb8 	bl	8008b6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a200:	4b2d      	ldr	r3, [pc, #180]	; (800a2b8 <xTaskResumeAll+0x124>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	429a      	cmp	r2, r3
 800a206:	d903      	bls.n	800a210 <xTaskResumeAll+0x7c>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20c:	4a2a      	ldr	r2, [pc, #168]	; (800a2b8 <xTaskResumeAll+0x124>)
 800a20e:	6013      	str	r3, [r2, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a214:	4613      	mov	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4413      	add	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4a27      	ldr	r2, [pc, #156]	; (800a2bc <xTaskResumeAll+0x128>)
 800a21e:	441a      	add	r2, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	3304      	adds	r3, #4
 800a224:	4619      	mov	r1, r3
 800a226:	4610      	mov	r0, r2
 800a228:	f7fe fc43 	bl	8008ab2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a230:	4b23      	ldr	r3, [pc, #140]	; (800a2c0 <xTaskResumeAll+0x12c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a236:	429a      	cmp	r2, r3
 800a238:	d302      	bcc.n	800a240 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a23a:	4b22      	ldr	r3, [pc, #136]	; (800a2c4 <xTaskResumeAll+0x130>)
 800a23c:	2201      	movs	r2, #1
 800a23e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a240:	4b1c      	ldr	r3, [pc, #112]	; (800a2b4 <xTaskResumeAll+0x120>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1cb      	bne.n	800a1e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a24e:	f000 fb5f 	bl	800a910 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a252:	4b1d      	ldr	r3, [pc, #116]	; (800a2c8 <xTaskResumeAll+0x134>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d010      	beq.n	800a280 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a25e:	f000 f847 	bl	800a2f0 <xTaskIncrementTick>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a268:	4b16      	ldr	r3, [pc, #88]	; (800a2c4 <xTaskResumeAll+0x130>)
 800a26a:	2201      	movs	r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3b01      	subs	r3, #1
 800a272:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1f1      	bne.n	800a25e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a27a:	4b13      	ldr	r3, [pc, #76]	; (800a2c8 <xTaskResumeAll+0x134>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a280:	4b10      	ldr	r3, [pc, #64]	; (800a2c4 <xTaskResumeAll+0x130>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d009      	beq.n	800a29c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a288:	2301      	movs	r3, #1
 800a28a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a28c:	4b0f      	ldr	r3, [pc, #60]	; (800a2cc <xTaskResumeAll+0x138>)
 800a28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a29c:	f001 fbe2 	bl	800ba64 <vPortExitCritical>

	return xAlreadyYielded;
 800a2a0:	68bb      	ldr	r3, [r7, #8]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20003628 	.word	0x20003628
 800a2b0:	20003600 	.word	0x20003600
 800a2b4:	200035c0 	.word	0x200035c0
 800a2b8:	20003608 	.word	0x20003608
 800a2bc:	20003130 	.word	0x20003130
 800a2c0:	2000312c 	.word	0x2000312c
 800a2c4:	20003614 	.word	0x20003614
 800a2c8:	20003610 	.word	0x20003610
 800a2cc:	e000ed04 	.word	0xe000ed04

0800a2d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2d6:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <xTaskGetTickCount+0x1c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2dc:	687b      	ldr	r3, [r7, #4]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	20003604 	.word	0x20003604

0800a2f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2fa:	4b4f      	ldr	r3, [pc, #316]	; (800a438 <xTaskIncrementTick+0x148>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f040 808f 	bne.w	800a422 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a304:	4b4d      	ldr	r3, [pc, #308]	; (800a43c <xTaskIncrementTick+0x14c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3301      	adds	r3, #1
 800a30a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a30c:	4a4b      	ldr	r2, [pc, #300]	; (800a43c <xTaskIncrementTick+0x14c>)
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d120      	bne.n	800a35a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a318:	4b49      	ldr	r3, [pc, #292]	; (800a440 <xTaskIncrementTick+0x150>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00a      	beq.n	800a338 <xTaskIncrementTick+0x48>
	__asm volatile
 800a322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	603b      	str	r3, [r7, #0]
}
 800a334:	bf00      	nop
 800a336:	e7fe      	b.n	800a336 <xTaskIncrementTick+0x46>
 800a338:	4b41      	ldr	r3, [pc, #260]	; (800a440 <xTaskIncrementTick+0x150>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	4b41      	ldr	r3, [pc, #260]	; (800a444 <xTaskIncrementTick+0x154>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a3f      	ldr	r2, [pc, #252]	; (800a440 <xTaskIncrementTick+0x150>)
 800a344:	6013      	str	r3, [r2, #0]
 800a346:	4a3f      	ldr	r2, [pc, #252]	; (800a444 <xTaskIncrementTick+0x154>)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	4b3e      	ldr	r3, [pc, #248]	; (800a448 <xTaskIncrementTick+0x158>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3301      	adds	r3, #1
 800a352:	4a3d      	ldr	r2, [pc, #244]	; (800a448 <xTaskIncrementTick+0x158>)
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	f000 fadb 	bl	800a910 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a35a:	4b3c      	ldr	r3, [pc, #240]	; (800a44c <xTaskIncrementTick+0x15c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	429a      	cmp	r2, r3
 800a362:	d349      	bcc.n	800a3f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a364:	4b36      	ldr	r3, [pc, #216]	; (800a440 <xTaskIncrementTick+0x150>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d104      	bne.n	800a378 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a36e:	4b37      	ldr	r3, [pc, #220]	; (800a44c <xTaskIncrementTick+0x15c>)
 800a370:	f04f 32ff 	mov.w	r2, #4294967295
 800a374:	601a      	str	r2, [r3, #0]
					break;
 800a376:	e03f      	b.n	800a3f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a378:	4b31      	ldr	r3, [pc, #196]	; (800a440 <xTaskIncrementTick+0x150>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d203      	bcs.n	800a398 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a390:	4a2e      	ldr	r2, [pc, #184]	; (800a44c <xTaskIncrementTick+0x15c>)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a396:	e02f      	b.n	800a3f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	3304      	adds	r3, #4
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fe fbe5 	bl	8008b6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d004      	beq.n	800a3b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	3318      	adds	r3, #24
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fbdc 	bl	8008b6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b8:	4b25      	ldr	r3, [pc, #148]	; (800a450 <xTaskIncrementTick+0x160>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d903      	bls.n	800a3c8 <xTaskIncrementTick+0xd8>
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c4:	4a22      	ldr	r2, [pc, #136]	; (800a450 <xTaskIncrementTick+0x160>)
 800a3c6:	6013      	str	r3, [r2, #0]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4413      	add	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4a1f      	ldr	r2, [pc, #124]	; (800a454 <xTaskIncrementTick+0x164>)
 800a3d6:	441a      	add	r2, r3
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	3304      	adds	r3, #4
 800a3dc:	4619      	mov	r1, r3
 800a3de:	4610      	mov	r0, r2
 800a3e0:	f7fe fb67 	bl	8008ab2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e8:	4b1b      	ldr	r3, [pc, #108]	; (800a458 <xTaskIncrementTick+0x168>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d3b8      	bcc.n	800a364 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3f6:	e7b5      	b.n	800a364 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3f8:	4b17      	ldr	r3, [pc, #92]	; (800a458 <xTaskIncrementTick+0x168>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fe:	4915      	ldr	r1, [pc, #84]	; (800a454 <xTaskIncrementTick+0x164>)
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	440b      	add	r3, r1
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d901      	bls.n	800a414 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a410:	2301      	movs	r3, #1
 800a412:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a414:	4b11      	ldr	r3, [pc, #68]	; (800a45c <xTaskIncrementTick+0x16c>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d007      	beq.n	800a42c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a41c:	2301      	movs	r3, #1
 800a41e:	617b      	str	r3, [r7, #20]
 800a420:	e004      	b.n	800a42c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a422:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <xTaskIncrementTick+0x170>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	3301      	adds	r3, #1
 800a428:	4a0d      	ldr	r2, [pc, #52]	; (800a460 <xTaskIncrementTick+0x170>)
 800a42a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a42c:	697b      	ldr	r3, [r7, #20]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20003628 	.word	0x20003628
 800a43c:	20003604 	.word	0x20003604
 800a440:	200035b8 	.word	0x200035b8
 800a444:	200035bc 	.word	0x200035bc
 800a448:	20003618 	.word	0x20003618
 800a44c:	20003620 	.word	0x20003620
 800a450:	20003608 	.word	0x20003608
 800a454:	20003130 	.word	0x20003130
 800a458:	2000312c 	.word	0x2000312c
 800a45c:	20003614 	.word	0x20003614
 800a460:	20003610 	.word	0x20003610

0800a464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a46a:	4b2a      	ldr	r3, [pc, #168]	; (800a514 <vTaskSwitchContext+0xb0>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a472:	4b29      	ldr	r3, [pc, #164]	; (800a518 <vTaskSwitchContext+0xb4>)
 800a474:	2201      	movs	r2, #1
 800a476:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a478:	e046      	b.n	800a508 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a47a:	4b27      	ldr	r3, [pc, #156]	; (800a518 <vTaskSwitchContext+0xb4>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a480:	4b26      	ldr	r3, [pc, #152]	; (800a51c <vTaskSwitchContext+0xb8>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	e010      	b.n	800a4aa <vTaskSwitchContext+0x46>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	607b      	str	r3, [r7, #4]
}
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <vTaskSwitchContext+0x3e>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	491d      	ldr	r1, [pc, #116]	; (800a520 <vTaskSwitchContext+0xbc>)
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	440b      	add	r3, r1
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d0e4      	beq.n	800a488 <vTaskSwitchContext+0x24>
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4a15      	ldr	r2, [pc, #84]	; (800a520 <vTaskSwitchContext+0xbc>)
 800a4ca:	4413      	add	r3, r2
 800a4cc:	60bb      	str	r3, [r7, #8]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	605a      	str	r2, [r3, #4]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	3308      	adds	r3, #8
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d104      	bne.n	800a4ee <vTaskSwitchContext+0x8a>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	605a      	str	r2, [r3, #4]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	4a0b      	ldr	r2, [pc, #44]	; (800a524 <vTaskSwitchContext+0xc0>)
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	4a08      	ldr	r2, [pc, #32]	; (800a51c <vTaskSwitchContext+0xb8>)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4fe:	4b09      	ldr	r3, [pc, #36]	; (800a524 <vTaskSwitchContext+0xc0>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3354      	adds	r3, #84	; 0x54
 800a504:	4a08      	ldr	r2, [pc, #32]	; (800a528 <vTaskSwitchContext+0xc4>)
 800a506:	6013      	str	r3, [r2, #0]
}
 800a508:	bf00      	nop
 800a50a:	3714      	adds	r7, #20
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	20003628 	.word	0x20003628
 800a518:	20003614 	.word	0x20003614
 800a51c:	20003608 	.word	0x20003608
 800a520:	20003130 	.word	0x20003130
 800a524:	2000312c 	.word	0x2000312c
 800a528:	20000018 	.word	0x20000018

0800a52c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10a      	bne.n	800a552 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	60fb      	str	r3, [r7, #12]
}
 800a54e:	bf00      	nop
 800a550:	e7fe      	b.n	800a550 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a552:	4b07      	ldr	r3, [pc, #28]	; (800a570 <vTaskPlaceOnEventList+0x44>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3318      	adds	r3, #24
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7fe facd 	bl	8008afa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a560:	2101      	movs	r1, #1
 800a562:	6838      	ldr	r0, [r7, #0]
 800a564:	f000 fcc2 	bl	800aeec <prvAddCurrentTaskToDelayedList>
}
 800a568:	bf00      	nop
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	2000312c 	.word	0x2000312c

0800a574 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10a      	bne.n	800a59c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58a:	f383 8811 	msr	BASEPRI, r3
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	f3bf 8f4f 	dsb	sy
 800a596:	617b      	str	r3, [r7, #20]
}
 800a598:	bf00      	nop
 800a59a:	e7fe      	b.n	800a59a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a59c:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	3318      	adds	r3, #24
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f7fe fa84 	bl	8008ab2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5b6:	6879      	ldr	r1, [r7, #4]
 800a5b8:	68b8      	ldr	r0, [r7, #8]
 800a5ba:	f000 fc97 	bl	800aeec <prvAddCurrentTaskToDelayedList>
	}
 800a5be:	bf00      	nop
 800a5c0:	3718      	adds	r7, #24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	2000312c 	.word	0x2000312c

0800a5cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10a      	bne.n	800a5f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	60fb      	str	r3, [r7, #12]
}
 800a5f4:	bf00      	nop
 800a5f6:	e7fe      	b.n	800a5f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	3318      	adds	r3, #24
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fe fab5 	bl	8008b6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a602:	4b1e      	ldr	r3, [pc, #120]	; (800a67c <xTaskRemoveFromEventList+0xb0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d11d      	bne.n	800a646 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	3304      	adds	r3, #4
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe faac 	bl	8008b6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a618:	4b19      	ldr	r3, [pc, #100]	; (800a680 <xTaskRemoveFromEventList+0xb4>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d903      	bls.n	800a628 <xTaskRemoveFromEventList+0x5c>
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a624:	4a16      	ldr	r2, [pc, #88]	; (800a680 <xTaskRemoveFromEventList+0xb4>)
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4a13      	ldr	r2, [pc, #76]	; (800a684 <xTaskRemoveFromEventList+0xb8>)
 800a636:	441a      	add	r2, r3
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	3304      	adds	r3, #4
 800a63c:	4619      	mov	r1, r3
 800a63e:	4610      	mov	r0, r2
 800a640:	f7fe fa37 	bl	8008ab2 <vListInsertEnd>
 800a644:	e005      	b.n	800a652 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	3318      	adds	r3, #24
 800a64a:	4619      	mov	r1, r3
 800a64c:	480e      	ldr	r0, [pc, #56]	; (800a688 <xTaskRemoveFromEventList+0xbc>)
 800a64e:	f7fe fa30 	bl	8008ab2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a656:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <xTaskRemoveFromEventList+0xc0>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d905      	bls.n	800a66c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a660:	2301      	movs	r3, #1
 800a662:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a664:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <xTaskRemoveFromEventList+0xc4>)
 800a666:	2201      	movs	r2, #1
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e001      	b.n	800a670 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a66c:	2300      	movs	r3, #0
 800a66e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a670:	697b      	ldr	r3, [r7, #20]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3718      	adds	r7, #24
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	20003628 	.word	0x20003628
 800a680:	20003608 	.word	0x20003608
 800a684:	20003130 	.word	0x20003130
 800a688:	200035c0 	.word	0x200035c0
 800a68c:	2000312c 	.word	0x2000312c
 800a690:	20003614 	.word	0x20003614

0800a694 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a69c:	4b06      	ldr	r3, [pc, #24]	; (800a6b8 <vTaskInternalSetTimeOutState+0x24>)
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6a4:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <vTaskInternalSetTimeOutState+0x28>)
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	605a      	str	r2, [r3, #4]
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	20003618 	.word	0x20003618
 800a6bc:	20003604 	.word	0x20003604

0800a6c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10a      	bne.n	800a6e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	613b      	str	r3, [r7, #16]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10a      	bne.n	800a702 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	60fb      	str	r3, [r7, #12]
}
 800a6fe:	bf00      	nop
 800a700:	e7fe      	b.n	800a700 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a702:	f001 f97f 	bl	800ba04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a706:	4b1d      	ldr	r3, [pc, #116]	; (800a77c <xTaskCheckForTimeOut+0xbc>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	69ba      	ldr	r2, [r7, #24]
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71e:	d102      	bne.n	800a726 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a720:	2300      	movs	r3, #0
 800a722:	61fb      	str	r3, [r7, #28]
 800a724:	e023      	b.n	800a76e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	4b15      	ldr	r3, [pc, #84]	; (800a780 <xTaskCheckForTimeOut+0xc0>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d007      	beq.n	800a742 <xTaskCheckForTimeOut+0x82>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	69ba      	ldr	r2, [r7, #24]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d302      	bcc.n	800a742 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a73c:	2301      	movs	r3, #1
 800a73e:	61fb      	str	r3, [r7, #28]
 800a740:	e015      	b.n	800a76e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d20b      	bcs.n	800a764 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	1ad2      	subs	r2, r2, r3
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff ff9b 	bl	800a694 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a75e:	2300      	movs	r3, #0
 800a760:	61fb      	str	r3, [r7, #28]
 800a762:	e004      	b.n	800a76e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	2200      	movs	r2, #0
 800a768:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a76a:	2301      	movs	r3, #1
 800a76c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a76e:	f001 f979 	bl	800ba64 <vPortExitCritical>

	return xReturn;
 800a772:	69fb      	ldr	r3, [r7, #28]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3720      	adds	r7, #32
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	20003604 	.word	0x20003604
 800a780:	20003618 	.word	0x20003618

0800a784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a784:	b480      	push	{r7}
 800a786:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a788:	4b03      	ldr	r3, [pc, #12]	; (800a798 <vTaskMissedYield+0x14>)
 800a78a:	2201      	movs	r2, #1
 800a78c:	601a      	str	r2, [r3, #0]
}
 800a78e:	bf00      	nop
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	20003614 	.word	0x20003614

0800a79c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7a4:	f000 f852 	bl	800a84c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7a8:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <prvIdleTask+0x28>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d9f9      	bls.n	800a7a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a7b0:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <prvIdleTask+0x2c>)
 800a7b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7b6:	601a      	str	r2, [r3, #0]
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a7c0:	e7f0      	b.n	800a7a4 <prvIdleTask+0x8>
 800a7c2:	bf00      	nop
 800a7c4:	20003130 	.word	0x20003130
 800a7c8:	e000ed04 	.word	0xe000ed04

0800a7cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	607b      	str	r3, [r7, #4]
 800a7d6:	e00c      	b.n	800a7f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4a12      	ldr	r2, [pc, #72]	; (800a82c <prvInitialiseTaskLists+0x60>)
 800a7e4:	4413      	add	r3, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe f936 	bl	8008a58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	607b      	str	r3, [r7, #4]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b37      	cmp	r3, #55	; 0x37
 800a7f6:	d9ef      	bls.n	800a7d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7f8:	480d      	ldr	r0, [pc, #52]	; (800a830 <prvInitialiseTaskLists+0x64>)
 800a7fa:	f7fe f92d 	bl	8008a58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7fe:	480d      	ldr	r0, [pc, #52]	; (800a834 <prvInitialiseTaskLists+0x68>)
 800a800:	f7fe f92a 	bl	8008a58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a804:	480c      	ldr	r0, [pc, #48]	; (800a838 <prvInitialiseTaskLists+0x6c>)
 800a806:	f7fe f927 	bl	8008a58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a80a:	480c      	ldr	r0, [pc, #48]	; (800a83c <prvInitialiseTaskLists+0x70>)
 800a80c:	f7fe f924 	bl	8008a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a810:	480b      	ldr	r0, [pc, #44]	; (800a840 <prvInitialiseTaskLists+0x74>)
 800a812:	f7fe f921 	bl	8008a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a816:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <prvInitialiseTaskLists+0x78>)
 800a818:	4a05      	ldr	r2, [pc, #20]	; (800a830 <prvInitialiseTaskLists+0x64>)
 800a81a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a81c:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <prvInitialiseTaskLists+0x7c>)
 800a81e:	4a05      	ldr	r2, [pc, #20]	; (800a834 <prvInitialiseTaskLists+0x68>)
 800a820:	601a      	str	r2, [r3, #0]
}
 800a822:	bf00      	nop
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20003130 	.word	0x20003130
 800a830:	20003590 	.word	0x20003590
 800a834:	200035a4 	.word	0x200035a4
 800a838:	200035c0 	.word	0x200035c0
 800a83c:	200035d4 	.word	0x200035d4
 800a840:	200035ec 	.word	0x200035ec
 800a844:	200035b8 	.word	0x200035b8
 800a848:	200035bc 	.word	0x200035bc

0800a84c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a852:	e019      	b.n	800a888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a854:	f001 f8d6 	bl	800ba04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a858:	4b10      	ldr	r3, [pc, #64]	; (800a89c <prvCheckTasksWaitingTermination+0x50>)
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3304      	adds	r3, #4
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe f981 	bl	8008b6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a86a:	4b0d      	ldr	r3, [pc, #52]	; (800a8a0 <prvCheckTasksWaitingTermination+0x54>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3b01      	subs	r3, #1
 800a870:	4a0b      	ldr	r2, [pc, #44]	; (800a8a0 <prvCheckTasksWaitingTermination+0x54>)
 800a872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a874:	4b0b      	ldr	r3, [pc, #44]	; (800a8a4 <prvCheckTasksWaitingTermination+0x58>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3b01      	subs	r3, #1
 800a87a:	4a0a      	ldr	r2, [pc, #40]	; (800a8a4 <prvCheckTasksWaitingTermination+0x58>)
 800a87c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a87e:	f001 f8f1 	bl	800ba64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f810 	bl	800a8a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a888:	4b06      	ldr	r3, [pc, #24]	; (800a8a4 <prvCheckTasksWaitingTermination+0x58>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e1      	bne.n	800a854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a890:	bf00      	nop
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	200035d4 	.word	0x200035d4
 800a8a0:	20003600 	.word	0x20003600
 800a8a4:	200035e8 	.word	0x200035e8

0800a8a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3354      	adds	r3, #84	; 0x54
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f001 fbfb 	bl	800c0b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d108      	bne.n	800a8d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f001 fa89 	bl	800bde0 <vPortFree>
				vPortFree( pxTCB );
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f001 fa86 	bl	800bde0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8d4:	e018      	b.n	800a908 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d103      	bne.n	800a8e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f001 fa7d 	bl	800bde0 <vPortFree>
	}
 800a8e6:	e00f      	b.n	800a908 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d00a      	beq.n	800a908 <prvDeleteTCB+0x60>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	60fb      	str	r3, [r7, #12]
}
 800a904:	bf00      	nop
 800a906:	e7fe      	b.n	800a906 <prvDeleteTCB+0x5e>
	}
 800a908:	bf00      	nop
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a916:	4b0c      	ldr	r3, [pc, #48]	; (800a948 <prvResetNextTaskUnblockTime+0x38>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d104      	bne.n	800a92a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a920:	4b0a      	ldr	r3, [pc, #40]	; (800a94c <prvResetNextTaskUnblockTime+0x3c>)
 800a922:	f04f 32ff 	mov.w	r2, #4294967295
 800a926:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a928:	e008      	b.n	800a93c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a92a:	4b07      	ldr	r3, [pc, #28]	; (800a948 <prvResetNextTaskUnblockTime+0x38>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	4a04      	ldr	r2, [pc, #16]	; (800a94c <prvResetNextTaskUnblockTime+0x3c>)
 800a93a:	6013      	str	r3, [r2, #0]
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	200035b8 	.word	0x200035b8
 800a94c:	20003620 	.word	0x20003620

0800a950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a956:	4b0b      	ldr	r3, [pc, #44]	; (800a984 <xTaskGetSchedulerState+0x34>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d102      	bne.n	800a964 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a95e:	2301      	movs	r3, #1
 800a960:	607b      	str	r3, [r7, #4]
 800a962:	e008      	b.n	800a976 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a964:	4b08      	ldr	r3, [pc, #32]	; (800a988 <xTaskGetSchedulerState+0x38>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d102      	bne.n	800a972 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a96c:	2302      	movs	r3, #2
 800a96e:	607b      	str	r3, [r7, #4]
 800a970:	e001      	b.n	800a976 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a972:	2300      	movs	r3, #0
 800a974:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a976:	687b      	ldr	r3, [r7, #4]
	}
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	2000360c 	.word	0x2000360c
 800a988:	20003628 	.word	0x20003628

0800a98c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a998:	2300      	movs	r3, #0
 800a99a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d051      	beq.n	800aa46 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a6:	4b2a      	ldr	r3, [pc, #168]	; (800aa50 <xTaskPriorityInherit+0xc4>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d241      	bcs.n	800aa34 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	db06      	blt.n	800a9c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9b8:	4b25      	ldr	r3, [pc, #148]	; (800aa50 <xTaskPriorityInherit+0xc4>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	6959      	ldr	r1, [r3, #20]
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4a1f      	ldr	r2, [pc, #124]	; (800aa54 <xTaskPriorityInherit+0xc8>)
 800a9d8:	4413      	add	r3, r2
 800a9da:	4299      	cmp	r1, r3
 800a9dc:	d122      	bne.n	800aa24 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fe f8c2 	bl	8008b6c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a9e8:	4b19      	ldr	r3, [pc, #100]	; (800aa50 <xTaskPriorityInherit+0xc4>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f6:	4b18      	ldr	r3, [pc, #96]	; (800aa58 <xTaskPriorityInherit+0xcc>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d903      	bls.n	800aa06 <xTaskPriorityInherit+0x7a>
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa02:	4a15      	ldr	r2, [pc, #84]	; (800aa58 <xTaskPriorityInherit+0xcc>)
 800aa04:	6013      	str	r3, [r2, #0]
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	4413      	add	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	4a10      	ldr	r2, [pc, #64]	; (800aa54 <xTaskPriorityInherit+0xc8>)
 800aa14:	441a      	add	r2, r3
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	3304      	adds	r3, #4
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	f7fe f848 	bl	8008ab2 <vListInsertEnd>
 800aa22:	e004      	b.n	800aa2e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa24:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <xTaskPriorityInherit+0xc4>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	e008      	b.n	800aa46 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa38:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <xTaskPriorityInherit+0xc4>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d201      	bcs.n	800aa46 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aa42:	2301      	movs	r3, #1
 800aa44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa46:	68fb      	ldr	r3, [r7, #12]
	}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	2000312c 	.word	0x2000312c
 800aa54:	20003130 	.word	0x20003130
 800aa58:	20003608 	.word	0x20003608

0800aa5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d056      	beq.n	800ab20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa72:	4b2e      	ldr	r3, [pc, #184]	; (800ab2c <xTaskPriorityDisinherit+0xd0>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d00a      	beq.n	800aa92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	60fb      	str	r3, [r7, #12]
}
 800aa8e:	bf00      	nop
 800aa90:	e7fe      	b.n	800aa90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10a      	bne.n	800aab0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	60bb      	str	r3, [r7, #8]
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aab4:	1e5a      	subs	r2, r3, #1
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d02c      	beq.n	800ab20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d128      	bne.n	800ab20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	3304      	adds	r3, #4
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe f84a 	bl	8008b6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf0:	4b0f      	ldr	r3, [pc, #60]	; (800ab30 <xTaskPriorityDisinherit+0xd4>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d903      	bls.n	800ab00 <xTaskPriorityDisinherit+0xa4>
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	4a0c      	ldr	r2, [pc, #48]	; (800ab30 <xTaskPriorityDisinherit+0xd4>)
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab04:	4613      	mov	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4a09      	ldr	r2, [pc, #36]	; (800ab34 <xTaskPriorityDisinherit+0xd8>)
 800ab0e:	441a      	add	r2, r3
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	3304      	adds	r3, #4
 800ab14:	4619      	mov	r1, r3
 800ab16:	4610      	mov	r0, r2
 800ab18:	f7fd ffcb 	bl	8008ab2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab20:	697b      	ldr	r3, [r7, #20]
	}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	2000312c 	.word	0x2000312c
 800ab30:	20003608 	.word	0x20003608
 800ab34:	20003130 	.word	0x20003130

0800ab38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b088      	sub	sp, #32
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ab46:	2301      	movs	r3, #1
 800ab48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d06a      	beq.n	800ac26 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10a      	bne.n	800ab6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	60fb      	str	r3, [r7, #12]
}
 800ab6a:	bf00      	nop
 800ab6c:	e7fe      	b.n	800ab6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab72:	683a      	ldr	r2, [r7, #0]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d902      	bls.n	800ab7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	61fb      	str	r3, [r7, #28]
 800ab7c:	e002      	b.n	800ab84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab88:	69fa      	ldr	r2, [r7, #28]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d04b      	beq.n	800ac26 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d146      	bne.n	800ac26 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ab98:	4b25      	ldr	r3, [pc, #148]	; (800ac30 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	69ba      	ldr	r2, [r7, #24]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d10a      	bne.n	800abb8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	60bb      	str	r3, [r7, #8]
}
 800abb4:	bf00      	nop
 800abb6:	e7fe      	b.n	800abb6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	69fa      	ldr	r2, [r7, #28]
 800abc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	db04      	blt.n	800abd6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	6959      	ldr	r1, [r3, #20]
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	4613      	mov	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4a13      	ldr	r2, [pc, #76]	; (800ac34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800abe6:	4413      	add	r3, r2
 800abe8:	4299      	cmp	r1, r3
 800abea:	d11c      	bne.n	800ac26 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	3304      	adds	r3, #4
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fd ffbb 	bl	8008b6c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfa:	4b0f      	ldr	r3, [pc, #60]	; (800ac38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d903      	bls.n	800ac0a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac06:	4a0c      	ldr	r2, [pc, #48]	; (800ac38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4a07      	ldr	r2, [pc, #28]	; (800ac34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ac18:	441a      	add	r2, r3
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	4619      	mov	r1, r3
 800ac20:	4610      	mov	r0, r2
 800ac22:	f7fd ff46 	bl	8008ab2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac26:	bf00      	nop
 800ac28:	3720      	adds	r7, #32
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	2000312c 	.word	0x2000312c
 800ac34:	20003130 	.word	0x20003130
 800ac38:	20003608 	.word	0x20003608

0800ac3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ac3c:	b480      	push	{r7}
 800ac3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ac40:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d004      	beq.n	800ac52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ac48:	4b05      	ldr	r3, [pc, #20]	; (800ac60 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac4e:	3201      	adds	r2, #1
 800ac50:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ac52:	4b03      	ldr	r3, [pc, #12]	; (800ac60 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac54:	681b      	ldr	r3, [r3, #0]
	}
 800ac56:	4618      	mov	r0, r3
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	2000312c 	.word	0x2000312c

0800ac64 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ac72:	f000 fec7 	bl	800ba04 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ac76:	4b29      	ldr	r3, [pc, #164]	; (800ad1c <xTaskNotifyWait+0xb8>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d01c      	beq.n	800acbe <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ac84:	4b25      	ldr	r3, [pc, #148]	; (800ad1c <xTaskNotifyWait+0xb8>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	43d2      	mvns	r2, r2
 800ac90:	400a      	ands	r2, r1
 800ac92:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ac96:	4b21      	ldr	r3, [pc, #132]	; (800ad1c <xTaskNotifyWait+0xb8>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00b      	beq.n	800acbe <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aca6:	2101      	movs	r1, #1
 800aca8:	6838      	ldr	r0, [r7, #0]
 800acaa:	f000 f91f 	bl	800aeec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800acae:	4b1c      	ldr	r3, [pc, #112]	; (800ad20 <xTaskNotifyWait+0xbc>)
 800acb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb4:	601a      	str	r2, [r3, #0]
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800acbe:	f000 fed1 	bl	800ba64 <vPortExitCritical>

		taskENTER_CRITICAL();
 800acc2:	f000 fe9f 	bl	800ba04 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d005      	beq.n	800acd8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800accc:	4b13      	ldr	r3, [pc, #76]	; (800ad1c <xTaskNotifyWait+0xb8>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800acd8:	4b10      	ldr	r3, [pc, #64]	; (800ad1c <xTaskNotifyWait+0xb8>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d002      	beq.n	800acec <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ace6:	2300      	movs	r3, #0
 800ace8:	617b      	str	r3, [r7, #20]
 800acea:	e00a      	b.n	800ad02 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800acec:	4b0b      	ldr	r3, [pc, #44]	; (800ad1c <xTaskNotifyWait+0xb8>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	43d2      	mvns	r2, r2
 800acf8:	400a      	ands	r2, r1
 800acfa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800acfe:	2301      	movs	r3, #1
 800ad00:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad02:	4b06      	ldr	r3, [pc, #24]	; (800ad1c <xTaskNotifyWait+0xb8>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800ad0c:	f000 feaa 	bl	800ba64 <vPortExitCritical>

		return xReturn;
 800ad10:	697b      	ldr	r3, [r7, #20]
	}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	2000312c 	.word	0x2000312c
 800ad20:	e000ed04 	.word	0xe000ed04

0800ad24 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08e      	sub	sp, #56	; 0x38
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	603b      	str	r3, [r7, #0]
 800ad30:	4613      	mov	r3, r2
 800ad32:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ad34:	2301      	movs	r3, #1
 800ad36:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad54:	f000 ff38 	bl	800bbc8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ad5c:	f3ef 8211 	mrs	r2, BASEPRI
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	623a      	str	r2, [r7, #32]
 800ad72:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ad74:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad76:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d004      	beq.n	800ad88 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ad8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad94:	2202      	movs	r2, #2
 800ad96:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800ad9a:	79fb      	ldrb	r3, [r7, #7]
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	d82f      	bhi.n	800ae00 <xTaskGenericNotifyFromISR+0xdc>
 800ada0:	a201      	add	r2, pc, #4	; (adr r2, 800ada8 <xTaskGenericNotifyFromISR+0x84>)
 800ada2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada6:	bf00      	nop
 800ada8:	0800ae23 	.word	0x0800ae23
 800adac:	0800adbd 	.word	0x0800adbd
 800adb0:	0800adcf 	.word	0x0800adcf
 800adb4:	0800addf 	.word	0x0800addf
 800adb8:	0800ade9 	.word	0x0800ade9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800adbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	431a      	orrs	r2, r3
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800adcc:	e02c      	b.n	800ae28 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800addc:	e024      	b.n	800ae28 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ade6:	e01f      	b.n	800ae28 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ade8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800adec:	2b02      	cmp	r3, #2
 800adee:	d004      	beq.n	800adfa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800adf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800adf8:	e016      	b.n	800ae28 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800adfe:	e013      	b.n	800ae28 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ae06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0a:	d00c      	beq.n	800ae26 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	61bb      	str	r3, [r7, #24]
}
 800ae1e:	bf00      	nop
 800ae20:	e7fe      	b.n	800ae20 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800ae22:	bf00      	nop
 800ae24:	e000      	b.n	800ae28 <xTaskGenericNotifyFromISR+0x104>
					break;
 800ae26:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ae28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d146      	bne.n	800aebe <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00a      	beq.n	800ae4e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800ae38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3c:	f383 8811 	msr	BASEPRI, r3
 800ae40:	f3bf 8f6f 	isb	sy
 800ae44:	f3bf 8f4f 	dsb	sy
 800ae48:	617b      	str	r3, [r7, #20]
}
 800ae4a:	bf00      	nop
 800ae4c:	e7fe      	b.n	800ae4c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae4e:	4b21      	ldr	r3, [pc, #132]	; (800aed4 <xTaskGenericNotifyFromISR+0x1b0>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d11d      	bne.n	800ae92 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	3304      	adds	r3, #4
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fd fe86 	bl	8008b6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae64:	4b1c      	ldr	r3, [pc, #112]	; (800aed8 <xTaskGenericNotifyFromISR+0x1b4>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d903      	bls.n	800ae74 <xTaskGenericNotifyFromISR+0x150>
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae70:	4a19      	ldr	r2, [pc, #100]	; (800aed8 <xTaskGenericNotifyFromISR+0x1b4>)
 800ae72:	6013      	str	r3, [r2, #0]
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae78:	4613      	mov	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4a16      	ldr	r2, [pc, #88]	; (800aedc <xTaskGenericNotifyFromISR+0x1b8>)
 800ae82:	441a      	add	r2, r3
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	3304      	adds	r3, #4
 800ae88:	4619      	mov	r1, r3
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	f7fd fe11 	bl	8008ab2 <vListInsertEnd>
 800ae90:	e005      	b.n	800ae9e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	3318      	adds	r3, #24
 800ae96:	4619      	mov	r1, r3
 800ae98:	4811      	ldr	r0, [pc, #68]	; (800aee0 <xTaskGenericNotifyFromISR+0x1bc>)
 800ae9a:	f7fd fe0a 	bl	8008ab2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea2:	4b10      	ldr	r3, [pc, #64]	; (800aee4 <xTaskGenericNotifyFromISR+0x1c0>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d908      	bls.n	800aebe <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800aeac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800aeb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800aeb8:	4b0b      	ldr	r3, [pc, #44]	; (800aee8 <xTaskGenericNotifyFromISR+0x1c4>)
 800aeba:	2201      	movs	r2, #1
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f383 8811 	msr	BASEPRI, r3
}
 800aec8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800aeca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800aecc:	4618      	mov	r0, r3
 800aece:	3738      	adds	r7, #56	; 0x38
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20003628 	.word	0x20003628
 800aed8:	20003608 	.word	0x20003608
 800aedc:	20003130 	.word	0x20003130
 800aee0:	200035c0 	.word	0x200035c0
 800aee4:	2000312c 	.word	0x2000312c
 800aee8:	20003614 	.word	0x20003614

0800aeec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aef6:	4b21      	ldr	r3, [pc, #132]	; (800af7c <prvAddCurrentTaskToDelayedList+0x90>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aefc:	4b20      	ldr	r3, [pc, #128]	; (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3304      	adds	r3, #4
 800af02:	4618      	mov	r0, r3
 800af04:	f7fd fe32 	bl	8008b6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0e:	d10a      	bne.n	800af26 <prvAddCurrentTaskToDelayedList+0x3a>
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d007      	beq.n	800af26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af16:	4b1a      	ldr	r3, [pc, #104]	; (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3304      	adds	r3, #4
 800af1c:	4619      	mov	r1, r3
 800af1e:	4819      	ldr	r0, [pc, #100]	; (800af84 <prvAddCurrentTaskToDelayedList+0x98>)
 800af20:	f7fd fdc7 	bl	8008ab2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af24:	e026      	b.n	800af74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4413      	add	r3, r2
 800af2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af2e:	4b14      	ldr	r3, [pc, #80]	; (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d209      	bcs.n	800af52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af3e:	4b12      	ldr	r3, [pc, #72]	; (800af88 <prvAddCurrentTaskToDelayedList+0x9c>)
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	4b0f      	ldr	r3, [pc, #60]	; (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3304      	adds	r3, #4
 800af48:	4619      	mov	r1, r3
 800af4a:	4610      	mov	r0, r2
 800af4c:	f7fd fdd5 	bl	8008afa <vListInsert>
}
 800af50:	e010      	b.n	800af74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af52:	4b0e      	ldr	r3, [pc, #56]	; (800af8c <prvAddCurrentTaskToDelayedList+0xa0>)
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	4b0a      	ldr	r3, [pc, #40]	; (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3304      	adds	r3, #4
 800af5c:	4619      	mov	r1, r3
 800af5e:	4610      	mov	r0, r2
 800af60:	f7fd fdcb 	bl	8008afa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af64:	4b0a      	ldr	r3, [pc, #40]	; (800af90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d202      	bcs.n	800af74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800af6e:	4a08      	ldr	r2, [pc, #32]	; (800af90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	6013      	str	r3, [r2, #0]
}
 800af74:	bf00      	nop
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	20003604 	.word	0x20003604
 800af80:	2000312c 	.word	0x2000312c
 800af84:	200035ec 	.word	0x200035ec
 800af88:	200035bc 	.word	0x200035bc
 800af8c:	200035b8 	.word	0x200035b8
 800af90:	20003620 	.word	0x20003620

0800af94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b08a      	sub	sp, #40	; 0x28
 800af98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af9e:	f000 fba1 	bl	800b6e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800afa2:	4b1c      	ldr	r3, [pc, #112]	; (800b014 <xTimerCreateTimerTask+0x80>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d021      	beq.n	800afee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800afaa:	2300      	movs	r3, #0
 800afac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800afae:	2300      	movs	r3, #0
 800afb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800afb2:	1d3a      	adds	r2, r7, #4
 800afb4:	f107 0108 	add.w	r1, r7, #8
 800afb8:	f107 030c 	add.w	r3, r7, #12
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fd fd31 	bl	8008a24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800afc2:	6879      	ldr	r1, [r7, #4]
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	9202      	str	r2, [sp, #8]
 800afca:	9301      	str	r3, [sp, #4]
 800afcc:	2305      	movs	r3, #5
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	2300      	movs	r3, #0
 800afd2:	460a      	mov	r2, r1
 800afd4:	4910      	ldr	r1, [pc, #64]	; (800b018 <xTimerCreateTimerTask+0x84>)
 800afd6:	4811      	ldr	r0, [pc, #68]	; (800b01c <xTimerCreateTimerTask+0x88>)
 800afd8:	f7fe fe00 	bl	8009bdc <xTaskCreateStatic>
 800afdc:	4603      	mov	r3, r0
 800afde:	4a10      	ldr	r2, [pc, #64]	; (800b020 <xTimerCreateTimerTask+0x8c>)
 800afe0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800afe2:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <xTimerCreateTimerTask+0x8c>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800afea:	2301      	movs	r3, #1
 800afec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10a      	bne.n	800b00a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	613b      	str	r3, [r7, #16]
}
 800b006:	bf00      	nop
 800b008:	e7fe      	b.n	800b008 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b00a:	697b      	ldr	r3, [r7, #20]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	2000365c 	.word	0x2000365c
 800b018:	0800c350 	.word	0x0800c350
 800b01c:	0800b28d 	.word	0x0800b28d
 800b020:	20003660 	.word	0x20003660

0800b024 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b024:	b580      	push	{r7, lr}
 800b026:	b088      	sub	sp, #32
 800b028:	af02      	add	r7, sp, #8
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
 800b030:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b032:	202c      	movs	r0, #44	; 0x2c
 800b034:	f000 fe08 	bl	800bc48 <pvPortMalloc>
 800b038:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00d      	beq.n	800b05c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	9301      	str	r3, [sp, #4]
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	68b9      	ldr	r1, [r7, #8]
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f000 f843 	bl	800b0e2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b05c:	697b      	ldr	r3, [r7, #20]
	}
 800b05e:	4618      	mov	r0, r3
 800b060:	3718      	adds	r7, #24
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b066:	b580      	push	{r7, lr}
 800b068:	b08a      	sub	sp, #40	; 0x28
 800b06a:	af02      	add	r7, sp, #8
 800b06c:	60f8      	str	r0, [r7, #12]
 800b06e:	60b9      	str	r1, [r7, #8]
 800b070:	607a      	str	r2, [r7, #4]
 800b072:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b074:	232c      	movs	r3, #44	; 0x2c
 800b076:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	2b2c      	cmp	r3, #44	; 0x2c
 800b07c:	d00a      	beq.n	800b094 <xTimerCreateStatic+0x2e>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	61bb      	str	r3, [r7, #24]
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b094:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <xTimerCreateStatic+0x4c>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	617b      	str	r3, [r7, #20]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00d      	beq.n	800b0d8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	2202      	movs	r2, #2
 800b0c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	9301      	str	r3, [sp, #4]
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	68b9      	ldr	r1, [r7, #8]
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f000 f805 	bl	800b0e2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b0d8:	69fb      	ldr	r3, [r7, #28]
	}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3720      	adds	r7, #32
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b086      	sub	sp, #24
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
 800b0ee:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10a      	bne.n	800b10c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	617b      	str	r3, [r7, #20]
}
 800b108:	bf00      	nop
 800b10a:	e7fe      	b.n	800b10a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d01e      	beq.n	800b150 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b112:	f000 fae7 	bl	800b6e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	6a3a      	ldr	r2, [r7, #32]
 800b12c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	3304      	adds	r3, #4
 800b132:	4618      	mov	r0, r3
 800b134:	f7fd fcb0 	bl	8008a98 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d008      	beq.n	800b150 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b144:	f043 0304 	orr.w	r3, r3, #4
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b150:	bf00      	nop
 800b152:	3718      	adds	r7, #24
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b08a      	sub	sp, #40	; 0x28
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b166:	2300      	movs	r3, #0
 800b168:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10a      	bne.n	800b186 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	623b      	str	r3, [r7, #32]
}
 800b182:	bf00      	nop
 800b184:	e7fe      	b.n	800b184 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b186:	4b1a      	ldr	r3, [pc, #104]	; (800b1f0 <xTimerGenericCommand+0x98>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d02a      	beq.n	800b1e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	2b05      	cmp	r3, #5
 800b19e:	dc18      	bgt.n	800b1d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b1a0:	f7ff fbd6 	bl	800a950 <xTaskGetSchedulerState>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d109      	bne.n	800b1be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b1aa:	4b11      	ldr	r3, [pc, #68]	; (800b1f0 <xTimerGenericCommand+0x98>)
 800b1ac:	6818      	ldr	r0, [r3, #0]
 800b1ae:	f107 0110 	add.w	r1, r7, #16
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1b6:	f7fd feab 	bl	8008f10 <xQueueGenericSend>
 800b1ba:	6278      	str	r0, [r7, #36]	; 0x24
 800b1bc:	e012      	b.n	800b1e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b1be:	4b0c      	ldr	r3, [pc, #48]	; (800b1f0 <xTimerGenericCommand+0x98>)
 800b1c0:	6818      	ldr	r0, [r3, #0]
 800b1c2:	f107 0110 	add.w	r1, r7, #16
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f7fd fea1 	bl	8008f10 <xQueueGenericSend>
 800b1ce:	6278      	str	r0, [r7, #36]	; 0x24
 800b1d0:	e008      	b.n	800b1e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b1d2:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <xTimerGenericCommand+0x98>)
 800b1d4:	6818      	ldr	r0, [r3, #0]
 800b1d6:	f107 0110 	add.w	r1, r7, #16
 800b1da:	2300      	movs	r3, #0
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	f7fd ff95 	bl	800910c <xQueueGenericSendFromISR>
 800b1e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3728      	adds	r7, #40	; 0x28
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	2000365c 	.word	0x2000365c

0800b1f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b088      	sub	sp, #32
 800b1f8:	af02      	add	r7, sp, #8
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1fe:	4b22      	ldr	r3, [pc, #136]	; (800b288 <prvProcessExpiredTimer+0x94>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	3304      	adds	r3, #4
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fd fcad 	bl	8008b6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b218:	f003 0304 	and.w	r3, r3, #4
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d022      	beq.n	800b266 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	699a      	ldr	r2, [r3, #24]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	18d1      	adds	r1, r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	6978      	ldr	r0, [r7, #20]
 800b22e:	f000 f8d1 	bl	800b3d4 <prvInsertTimerInActiveList>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d01f      	beq.n	800b278 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b238:	2300      	movs	r3, #0
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	2300      	movs	r3, #0
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	2100      	movs	r1, #0
 800b242:	6978      	ldr	r0, [r7, #20]
 800b244:	f7ff ff88 	bl	800b158 <xTimerGenericCommand>
 800b248:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d113      	bne.n	800b278 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	60fb      	str	r3, [r7, #12]
}
 800b262:	bf00      	nop
 800b264:	e7fe      	b.n	800b264 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b26c:	f023 0301 	bic.w	r3, r3, #1
 800b270:	b2da      	uxtb	r2, r3
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	6a1b      	ldr	r3, [r3, #32]
 800b27c:	6978      	ldr	r0, [r7, #20]
 800b27e:	4798      	blx	r3
}
 800b280:	bf00      	nop
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	20003654 	.word	0x20003654

0800b28c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b294:	f107 0308 	add.w	r3, r7, #8
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 f857 	bl	800b34c <prvGetNextExpireTime>
 800b29e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 f803 	bl	800b2b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b2aa:	f000 f8d5 	bl	800b458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2ae:	e7f1      	b.n	800b294 <prvTimerTask+0x8>

0800b2b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b2ba:	f7fe ff5d 	bl	800a178 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2be:	f107 0308 	add.w	r3, r7, #8
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 f866 	bl	800b394 <prvSampleTimeNow>
 800b2c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d130      	bne.n	800b332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10a      	bne.n	800b2ec <prvProcessTimerOrBlockTask+0x3c>
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d806      	bhi.n	800b2ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b2de:	f7fe ff59 	bl	800a194 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b2e2:	68f9      	ldr	r1, [r7, #12]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff ff85 	bl	800b1f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b2ea:	e024      	b.n	800b336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d008      	beq.n	800b304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b2f2:	4b13      	ldr	r3, [pc, #76]	; (800b340 <prvProcessTimerOrBlockTask+0x90>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <prvProcessTimerOrBlockTask+0x50>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e000      	b.n	800b302 <prvProcessTimerOrBlockTask+0x52>
 800b300:	2300      	movs	r3, #0
 800b302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b304:	4b0f      	ldr	r3, [pc, #60]	; (800b344 <prvProcessTimerOrBlockTask+0x94>)
 800b306:	6818      	ldr	r0, [r3, #0]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	4619      	mov	r1, r3
 800b312:	f7fe fc2f 	bl	8009b74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b316:	f7fe ff3d 	bl	800a194 <xTaskResumeAll>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10a      	bne.n	800b336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b320:	4b09      	ldr	r3, [pc, #36]	; (800b348 <prvProcessTimerOrBlockTask+0x98>)
 800b322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b326:	601a      	str	r2, [r3, #0]
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	f3bf 8f6f 	isb	sy
}
 800b330:	e001      	b.n	800b336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b332:	f7fe ff2f 	bl	800a194 <xTaskResumeAll>
}
 800b336:	bf00      	nop
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20003658 	.word	0x20003658
 800b344:	2000365c 	.word	0x2000365c
 800b348:	e000ed04 	.word	0xe000ed04

0800b34c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b354:	4b0e      	ldr	r3, [pc, #56]	; (800b390 <prvGetNextExpireTime+0x44>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <prvGetNextExpireTime+0x16>
 800b35e:	2201      	movs	r2, #1
 800b360:	e000      	b.n	800b364 <prvGetNextExpireTime+0x18>
 800b362:	2200      	movs	r2, #0
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d105      	bne.n	800b37c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b370:	4b07      	ldr	r3, [pc, #28]	; (800b390 <prvGetNextExpireTime+0x44>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	e001      	b.n	800b380 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b37c:	2300      	movs	r3, #0
 800b37e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b380:	68fb      	ldr	r3, [r7, #12]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	20003654 	.word	0x20003654

0800b394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b39c:	f7fe ff98 	bl	800a2d0 <xTaskGetTickCount>
 800b3a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b3a2:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <prvSampleTimeNow+0x3c>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d205      	bcs.n	800b3b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b3ac:	f000 f936 	bl	800b61c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	e002      	b.n	800b3be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b3be:	4a04      	ldr	r2, [pc, #16]	; (800b3d0 <prvSampleTimeNow+0x3c>)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20003664 	.word	0x20003664

0800b3d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d812      	bhi.n	800b420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	429a      	cmp	r2, r3
 800b406:	d302      	bcc.n	800b40e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b408:	2301      	movs	r3, #1
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	e01b      	b.n	800b446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b40e:	4b10      	ldr	r3, [pc, #64]	; (800b450 <prvInsertTimerInActiveList+0x7c>)
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3304      	adds	r3, #4
 800b416:	4619      	mov	r1, r3
 800b418:	4610      	mov	r0, r2
 800b41a:	f7fd fb6e 	bl	8008afa <vListInsert>
 800b41e:	e012      	b.n	800b446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	429a      	cmp	r2, r3
 800b426:	d206      	bcs.n	800b436 <prvInsertTimerInActiveList+0x62>
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d302      	bcc.n	800b436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b430:	2301      	movs	r3, #1
 800b432:	617b      	str	r3, [r7, #20]
 800b434:	e007      	b.n	800b446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b436:	4b07      	ldr	r3, [pc, #28]	; (800b454 <prvInsertTimerInActiveList+0x80>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3304      	adds	r3, #4
 800b43e:	4619      	mov	r1, r3
 800b440:	4610      	mov	r0, r2
 800b442:	f7fd fb5a 	bl	8008afa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b446:	697b      	ldr	r3, [r7, #20]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20003658 	.word	0x20003658
 800b454:	20003654 	.word	0x20003654

0800b458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08e      	sub	sp, #56	; 0x38
 800b45c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b45e:	e0ca      	b.n	800b5f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	da18      	bge.n	800b498 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b466:	1d3b      	adds	r3, r7, #4
 800b468:	3304      	adds	r3, #4
 800b46a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10a      	bne.n	800b488 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	61fb      	str	r3, [r7, #28]
}
 800b484:	bf00      	nop
 800b486:	e7fe      	b.n	800b486 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b48e:	6850      	ldr	r0, [r2, #4]
 800b490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b492:	6892      	ldr	r2, [r2, #8]
 800b494:	4611      	mov	r1, r2
 800b496:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f2c0 80aa 	blt.w	800b5f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a6:	695b      	ldr	r3, [r3, #20]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d004      	beq.n	800b4b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ae:	3304      	adds	r3, #4
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fd fb5b 	bl	8008b6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff ff6b 	bl	800b394 <prvSampleTimeNow>
 800b4be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b09      	cmp	r3, #9
 800b4c4:	f200 8097 	bhi.w	800b5f6 <prvProcessReceivedCommands+0x19e>
 800b4c8:	a201      	add	r2, pc, #4	; (adr r2, 800b4d0 <prvProcessReceivedCommands+0x78>)
 800b4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ce:	bf00      	nop
 800b4d0:	0800b4f9 	.word	0x0800b4f9
 800b4d4:	0800b4f9 	.word	0x0800b4f9
 800b4d8:	0800b4f9 	.word	0x0800b4f9
 800b4dc:	0800b56d 	.word	0x0800b56d
 800b4e0:	0800b581 	.word	0x0800b581
 800b4e4:	0800b5cb 	.word	0x0800b5cb
 800b4e8:	0800b4f9 	.word	0x0800b4f9
 800b4ec:	0800b4f9 	.word	0x0800b4f9
 800b4f0:	0800b56d 	.word	0x0800b56d
 800b4f4:	0800b581 	.word	0x0800b581
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4fe:	f043 0301 	orr.w	r3, r3, #1
 800b502:	b2da      	uxtb	r2, r3
 800b504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50e:	699b      	ldr	r3, [r3, #24]
 800b510:	18d1      	adds	r1, r2, r3
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b518:	f7ff ff5c 	bl	800b3d4 <prvInsertTimerInActiveList>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d069      	beq.n	800b5f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b528:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b530:	f003 0304 	and.w	r3, r3, #4
 800b534:	2b00      	cmp	r3, #0
 800b536:	d05e      	beq.n	800b5f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	441a      	add	r2, r3
 800b540:	2300      	movs	r3, #0
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	2300      	movs	r3, #0
 800b546:	2100      	movs	r1, #0
 800b548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b54a:	f7ff fe05 	bl	800b158 <xTimerGenericCommand>
 800b54e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b550:	6a3b      	ldr	r3, [r7, #32]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d14f      	bne.n	800b5f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	61bb      	str	r3, [r7, #24]
}
 800b568:	bf00      	nop
 800b56a:	e7fe      	b.n	800b56a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b572:	f023 0301 	bic.w	r3, r3, #1
 800b576:	b2da      	uxtb	r2, r3
 800b578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b57e:	e03a      	b.n	800b5f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b586:	f043 0301 	orr.w	r3, r3, #1
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10a      	bne.n	800b5b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	617b      	str	r3, [r7, #20]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	699a      	ldr	r2, [r3, #24]
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	18d1      	adds	r1, r2, r3
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5c4:	f7ff ff06 	bl	800b3d4 <prvInsertTimerInActiveList>
					break;
 800b5c8:	e015      	b.n	800b5f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5d0:	f003 0302 	and.w	r3, r3, #2
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d103      	bne.n	800b5e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b5d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5da:	f000 fc01 	bl	800bde0 <vPortFree>
 800b5de:	e00a      	b.n	800b5f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5e6:	f023 0301 	bic.w	r3, r3, #1
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b5f2:	e000      	b.n	800b5f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b5f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5f6:	4b08      	ldr	r3, [pc, #32]	; (800b618 <prvProcessReceivedCommands+0x1c0>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	1d39      	adds	r1, r7, #4
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fd feac 	bl	800935c <xQueueReceive>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	f47f af2a 	bne.w	800b460 <prvProcessReceivedCommands+0x8>
	}
}
 800b60c:	bf00      	nop
 800b60e:	bf00      	nop
 800b610:	3730      	adds	r7, #48	; 0x30
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	2000365c 	.word	0x2000365c

0800b61c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b622:	e048      	b.n	800b6b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b624:	4b2d      	ldr	r3, [pc, #180]	; (800b6dc <prvSwitchTimerLists+0xc0>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b62e:	4b2b      	ldr	r3, [pc, #172]	; (800b6dc <prvSwitchTimerLists+0xc0>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	3304      	adds	r3, #4
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fd fa95 	bl	8008b6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b650:	f003 0304 	and.w	r3, r3, #4
 800b654:	2b00      	cmp	r3, #0
 800b656:	d02e      	beq.n	800b6b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	693a      	ldr	r2, [r7, #16]
 800b65e:	4413      	add	r3, r2
 800b660:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	429a      	cmp	r2, r3
 800b668:	d90e      	bls.n	800b688 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b676:	4b19      	ldr	r3, [pc, #100]	; (800b6dc <prvSwitchTimerLists+0xc0>)
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	3304      	adds	r3, #4
 800b67e:	4619      	mov	r1, r3
 800b680:	4610      	mov	r0, r2
 800b682:	f7fd fa3a 	bl	8008afa <vListInsert>
 800b686:	e016      	b.n	800b6b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b688:	2300      	movs	r3, #0
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	2300      	movs	r3, #0
 800b68e:	693a      	ldr	r2, [r7, #16]
 800b690:	2100      	movs	r1, #0
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f7ff fd60 	bl	800b158 <xTimerGenericCommand>
 800b698:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	603b      	str	r3, [r7, #0]
}
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6b6:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <prvSwitchTimerLists+0xc0>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1b1      	bne.n	800b624 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b6c0:	4b06      	ldr	r3, [pc, #24]	; (800b6dc <prvSwitchTimerLists+0xc0>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b6c6:	4b06      	ldr	r3, [pc, #24]	; (800b6e0 <prvSwitchTimerLists+0xc4>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a04      	ldr	r2, [pc, #16]	; (800b6dc <prvSwitchTimerLists+0xc0>)
 800b6cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b6ce:	4a04      	ldr	r2, [pc, #16]	; (800b6e0 <prvSwitchTimerLists+0xc4>)
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	6013      	str	r3, [r2, #0]
}
 800b6d4:	bf00      	nop
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	20003654 	.word	0x20003654
 800b6e0:	20003658 	.word	0x20003658

0800b6e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b6ea:	f000 f98b 	bl	800ba04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b6ee:	4b15      	ldr	r3, [pc, #84]	; (800b744 <prvCheckForValidListAndQueue+0x60>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d120      	bne.n	800b738 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b6f6:	4814      	ldr	r0, [pc, #80]	; (800b748 <prvCheckForValidListAndQueue+0x64>)
 800b6f8:	f7fd f9ae 	bl	8008a58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b6fc:	4813      	ldr	r0, [pc, #76]	; (800b74c <prvCheckForValidListAndQueue+0x68>)
 800b6fe:	f7fd f9ab 	bl	8008a58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b702:	4b13      	ldr	r3, [pc, #76]	; (800b750 <prvCheckForValidListAndQueue+0x6c>)
 800b704:	4a10      	ldr	r2, [pc, #64]	; (800b748 <prvCheckForValidListAndQueue+0x64>)
 800b706:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b708:	4b12      	ldr	r3, [pc, #72]	; (800b754 <prvCheckForValidListAndQueue+0x70>)
 800b70a:	4a10      	ldr	r2, [pc, #64]	; (800b74c <prvCheckForValidListAndQueue+0x68>)
 800b70c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b70e:	2300      	movs	r3, #0
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	4b11      	ldr	r3, [pc, #68]	; (800b758 <prvCheckForValidListAndQueue+0x74>)
 800b714:	4a11      	ldr	r2, [pc, #68]	; (800b75c <prvCheckForValidListAndQueue+0x78>)
 800b716:	2110      	movs	r1, #16
 800b718:	200a      	movs	r0, #10
 800b71a:	f7fd fab9 	bl	8008c90 <xQueueGenericCreateStatic>
 800b71e:	4603      	mov	r3, r0
 800b720:	4a08      	ldr	r2, [pc, #32]	; (800b744 <prvCheckForValidListAndQueue+0x60>)
 800b722:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b724:	4b07      	ldr	r3, [pc, #28]	; (800b744 <prvCheckForValidListAndQueue+0x60>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d005      	beq.n	800b738 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b72c:	4b05      	ldr	r3, [pc, #20]	; (800b744 <prvCheckForValidListAndQueue+0x60>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	490b      	ldr	r1, [pc, #44]	; (800b760 <prvCheckForValidListAndQueue+0x7c>)
 800b732:	4618      	mov	r0, r3
 800b734:	f7fe f9ca 	bl	8009acc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b738:	f000 f994 	bl	800ba64 <vPortExitCritical>
}
 800b73c:	bf00      	nop
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	2000365c 	.word	0x2000365c
 800b748:	2000362c 	.word	0x2000362c
 800b74c:	20003640 	.word	0x20003640
 800b750:	20003654 	.word	0x20003654
 800b754:	20003658 	.word	0x20003658
 800b758:	20003708 	.word	0x20003708
 800b75c:	20003668 	.word	0x20003668
 800b760:	0800c358 	.word	0x0800c358

0800b764 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b086      	sub	sp, #24
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10a      	bne.n	800b78c <pvTimerGetTimerID+0x28>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	60fb      	str	r3, [r7, #12]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b78c:	f000 f93a 	bl	800ba04 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	69db      	ldr	r3, [r3, #28]
 800b794:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b796:	f000 f965 	bl	800ba64 <vPortExitCritical>

	return pvReturn;
 800b79a:	693b      	ldr	r3, [r7, #16]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3718      	adds	r7, #24
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	3b04      	subs	r3, #4
 800b7b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3b04      	subs	r3, #4
 800b7c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	f023 0201 	bic.w	r2, r3, #1
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3b04      	subs	r3, #4
 800b7d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7d4:	4a0c      	ldr	r2, [pc, #48]	; (800b808 <pxPortInitialiseStack+0x64>)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3b14      	subs	r3, #20
 800b7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3b04      	subs	r3, #4
 800b7ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f06f 0202 	mvn.w	r2, #2
 800b7f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	3b20      	subs	r3, #32
 800b7f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	0800b80d 	.word	0x0800b80d

0800b80c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b812:	2300      	movs	r3, #0
 800b814:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b816:	4b12      	ldr	r3, [pc, #72]	; (800b860 <prvTaskExitError+0x54>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81e:	d00a      	beq.n	800b836 <prvTaskExitError+0x2a>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	60fb      	str	r3, [r7, #12]
}
 800b832:	bf00      	nop
 800b834:	e7fe      	b.n	800b834 <prvTaskExitError+0x28>
	__asm volatile
 800b836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83a:	f383 8811 	msr	BASEPRI, r3
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	f3bf 8f4f 	dsb	sy
 800b846:	60bb      	str	r3, [r7, #8]
}
 800b848:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b84a:	bf00      	nop
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d0fc      	beq.n	800b84c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b852:	bf00      	nop
 800b854:	bf00      	nop
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr
 800b860:	20000014 	.word	0x20000014
	...

0800b870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b870:	4b07      	ldr	r3, [pc, #28]	; (800b890 <pxCurrentTCBConst2>)
 800b872:	6819      	ldr	r1, [r3, #0]
 800b874:	6808      	ldr	r0, [r1, #0]
 800b876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87a:	f380 8809 	msr	PSP, r0
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f04f 0000 	mov.w	r0, #0
 800b886:	f380 8811 	msr	BASEPRI, r0
 800b88a:	4770      	bx	lr
 800b88c:	f3af 8000 	nop.w

0800b890 <pxCurrentTCBConst2>:
 800b890:	2000312c 	.word	0x2000312c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b894:	bf00      	nop
 800b896:	bf00      	nop

0800b898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b898:	4808      	ldr	r0, [pc, #32]	; (800b8bc <prvPortStartFirstTask+0x24>)
 800b89a:	6800      	ldr	r0, [r0, #0]
 800b89c:	6800      	ldr	r0, [r0, #0]
 800b89e:	f380 8808 	msr	MSP, r0
 800b8a2:	f04f 0000 	mov.w	r0, #0
 800b8a6:	f380 8814 	msr	CONTROL, r0
 800b8aa:	b662      	cpsie	i
 800b8ac:	b661      	cpsie	f
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	df00      	svc	0
 800b8b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8ba:	bf00      	nop
 800b8bc:	e000ed08 	.word	0xe000ed08

0800b8c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8c6:	4b46      	ldr	r3, [pc, #280]	; (800b9e0 <xPortStartScheduler+0x120>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a46      	ldr	r2, [pc, #280]	; (800b9e4 <xPortStartScheduler+0x124>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d10a      	bne.n	800b8e6 <xPortStartScheduler+0x26>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	613b      	str	r3, [r7, #16]
}
 800b8e2:	bf00      	nop
 800b8e4:	e7fe      	b.n	800b8e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8e6:	4b3e      	ldr	r3, [pc, #248]	; (800b9e0 <xPortStartScheduler+0x120>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a3f      	ldr	r2, [pc, #252]	; (800b9e8 <xPortStartScheduler+0x128>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d10a      	bne.n	800b906 <xPortStartScheduler+0x46>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	60fb      	str	r3, [r7, #12]
}
 800b902:	bf00      	nop
 800b904:	e7fe      	b.n	800b904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b906:	4b39      	ldr	r3, [pc, #228]	; (800b9ec <xPortStartScheduler+0x12c>)
 800b908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	22ff      	movs	r2, #255	; 0xff
 800b916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b920:	78fb      	ldrb	r3, [r7, #3]
 800b922:	b2db      	uxtb	r3, r3
 800b924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	4b31      	ldr	r3, [pc, #196]	; (800b9f0 <xPortStartScheduler+0x130>)
 800b92c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b92e:	4b31      	ldr	r3, [pc, #196]	; (800b9f4 <xPortStartScheduler+0x134>)
 800b930:	2207      	movs	r2, #7
 800b932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b934:	e009      	b.n	800b94a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b936:	4b2f      	ldr	r3, [pc, #188]	; (800b9f4 <xPortStartScheduler+0x134>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	4a2d      	ldr	r2, [pc, #180]	; (800b9f4 <xPortStartScheduler+0x134>)
 800b93e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b940:	78fb      	ldrb	r3, [r7, #3]
 800b942:	b2db      	uxtb	r3, r3
 800b944:	005b      	lsls	r3, r3, #1
 800b946:	b2db      	uxtb	r3, r3
 800b948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b94a:	78fb      	ldrb	r3, [r7, #3]
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b952:	2b80      	cmp	r3, #128	; 0x80
 800b954:	d0ef      	beq.n	800b936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b956:	4b27      	ldr	r3, [pc, #156]	; (800b9f4 <xPortStartScheduler+0x134>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f1c3 0307 	rsb	r3, r3, #7
 800b95e:	2b04      	cmp	r3, #4
 800b960:	d00a      	beq.n	800b978 <xPortStartScheduler+0xb8>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	60bb      	str	r3, [r7, #8]
}
 800b974:	bf00      	nop
 800b976:	e7fe      	b.n	800b976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b978:	4b1e      	ldr	r3, [pc, #120]	; (800b9f4 <xPortStartScheduler+0x134>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	021b      	lsls	r3, r3, #8
 800b97e:	4a1d      	ldr	r2, [pc, #116]	; (800b9f4 <xPortStartScheduler+0x134>)
 800b980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b982:	4b1c      	ldr	r3, [pc, #112]	; (800b9f4 <xPortStartScheduler+0x134>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b98a:	4a1a      	ldr	r2, [pc, #104]	; (800b9f4 <xPortStartScheduler+0x134>)
 800b98c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	b2da      	uxtb	r2, r3
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b996:	4b18      	ldr	r3, [pc, #96]	; (800b9f8 <xPortStartScheduler+0x138>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a17      	ldr	r2, [pc, #92]	; (800b9f8 <xPortStartScheduler+0x138>)
 800b99c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b9a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9a2:	4b15      	ldr	r3, [pc, #84]	; (800b9f8 <xPortStartScheduler+0x138>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a14      	ldr	r2, [pc, #80]	; (800b9f8 <xPortStartScheduler+0x138>)
 800b9a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b9ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9ae:	f000 f8dd 	bl	800bb6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b9b2:	4b12      	ldr	r3, [pc, #72]	; (800b9fc <xPortStartScheduler+0x13c>)
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b9b8:	f000 f8fc 	bl	800bbb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9bc:	4b10      	ldr	r3, [pc, #64]	; (800ba00 <xPortStartScheduler+0x140>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a0f      	ldr	r2, [pc, #60]	; (800ba00 <xPortStartScheduler+0x140>)
 800b9c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b9c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b9c8:	f7ff ff66 	bl	800b898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b9cc:	f7fe fd4a 	bl	800a464 <vTaskSwitchContext>
	prvTaskExitError();
 800b9d0:	f7ff ff1c 	bl	800b80c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3718      	adds	r7, #24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	e000ed00 	.word	0xe000ed00
 800b9e4:	410fc271 	.word	0x410fc271
 800b9e8:	410fc270 	.word	0x410fc270
 800b9ec:	e000e400 	.word	0xe000e400
 800b9f0:	20003758 	.word	0x20003758
 800b9f4:	2000375c 	.word	0x2000375c
 800b9f8:	e000ed20 	.word	0xe000ed20
 800b9fc:	20000014 	.word	0x20000014
 800ba00:	e000ef34 	.word	0xe000ef34

0800ba04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	607b      	str	r3, [r7, #4]
}
 800ba1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba1e:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <vPortEnterCritical+0x58>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3301      	adds	r3, #1
 800ba24:	4a0d      	ldr	r2, [pc, #52]	; (800ba5c <vPortEnterCritical+0x58>)
 800ba26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba28:	4b0c      	ldr	r3, [pc, #48]	; (800ba5c <vPortEnterCritical+0x58>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d10f      	bne.n	800ba50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba30:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <vPortEnterCritical+0x5c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00a      	beq.n	800ba50 <vPortEnterCritical+0x4c>
	__asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	603b      	str	r3, [r7, #0]
}
 800ba4c:	bf00      	nop
 800ba4e:	e7fe      	b.n	800ba4e <vPortEnterCritical+0x4a>
	}
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	20000014 	.word	0x20000014
 800ba60:	e000ed04 	.word	0xe000ed04

0800ba64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba6a:	4b12      	ldr	r3, [pc, #72]	; (800bab4 <vPortExitCritical+0x50>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d10a      	bne.n	800ba88 <vPortExitCritical+0x24>
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	607b      	str	r3, [r7, #4]
}
 800ba84:	bf00      	nop
 800ba86:	e7fe      	b.n	800ba86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba88:	4b0a      	ldr	r3, [pc, #40]	; (800bab4 <vPortExitCritical+0x50>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	4a09      	ldr	r2, [pc, #36]	; (800bab4 <vPortExitCritical+0x50>)
 800ba90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba92:	4b08      	ldr	r3, [pc, #32]	; (800bab4 <vPortExitCritical+0x50>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d105      	bne.n	800baa6 <vPortExitCritical+0x42>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	f383 8811 	msr	BASEPRI, r3
}
 800baa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800baa6:	bf00      	nop
 800baa8:	370c      	adds	r7, #12
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	20000014 	.word	0x20000014
	...

0800bac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bac0:	f3ef 8009 	mrs	r0, PSP
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	4b15      	ldr	r3, [pc, #84]	; (800bb20 <pxCurrentTCBConst>)
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	f01e 0f10 	tst.w	lr, #16
 800bad0:	bf08      	it	eq
 800bad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bada:	6010      	str	r0, [r2, #0]
 800badc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bae4:	f380 8811 	msr	BASEPRI, r0
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f7fe fcb8 	bl	800a464 <vTaskSwitchContext>
 800baf4:	f04f 0000 	mov.w	r0, #0
 800baf8:	f380 8811 	msr	BASEPRI, r0
 800bafc:	bc09      	pop	{r0, r3}
 800bafe:	6819      	ldr	r1, [r3, #0]
 800bb00:	6808      	ldr	r0, [r1, #0]
 800bb02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb06:	f01e 0f10 	tst.w	lr, #16
 800bb0a:	bf08      	it	eq
 800bb0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb10:	f380 8809 	msr	PSP, r0
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	f3af 8000 	nop.w

0800bb20 <pxCurrentTCBConst>:
 800bb20:	2000312c 	.word	0x2000312c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb24:	bf00      	nop
 800bb26:	bf00      	nop

0800bb28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	607b      	str	r3, [r7, #4]
}
 800bb40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb42:	f7fe fbd5 	bl	800a2f0 <xTaskIncrementTick>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d003      	beq.n	800bb54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb4c:	4b06      	ldr	r3, [pc, #24]	; (800bb68 <xPortSysTickHandler+0x40>)
 800bb4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb52:	601a      	str	r2, [r3, #0]
 800bb54:	2300      	movs	r3, #0
 800bb56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	f383 8811 	msr	BASEPRI, r3
}
 800bb5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	e000ed04 	.word	0xe000ed04

0800bb6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb70:	4b0b      	ldr	r3, [pc, #44]	; (800bba0 <vPortSetupTimerInterrupt+0x34>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb76:	4b0b      	ldr	r3, [pc, #44]	; (800bba4 <vPortSetupTimerInterrupt+0x38>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb7c:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <vPortSetupTimerInterrupt+0x3c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a0a      	ldr	r2, [pc, #40]	; (800bbac <vPortSetupTimerInterrupt+0x40>)
 800bb82:	fba2 2303 	umull	r2, r3, r2, r3
 800bb86:	099b      	lsrs	r3, r3, #6
 800bb88:	4a09      	ldr	r2, [pc, #36]	; (800bbb0 <vPortSetupTimerInterrupt+0x44>)
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb8e:	4b04      	ldr	r3, [pc, #16]	; (800bba0 <vPortSetupTimerInterrupt+0x34>)
 800bb90:	2207      	movs	r2, #7
 800bb92:	601a      	str	r2, [r3, #0]
}
 800bb94:	bf00      	nop
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	e000e010 	.word	0xe000e010
 800bba4:	e000e018 	.word	0xe000e018
 800bba8:	20000000 	.word	0x20000000
 800bbac:	10624dd3 	.word	0x10624dd3
 800bbb0:	e000e014 	.word	0xe000e014

0800bbb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bbb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bbc4 <vPortEnableVFP+0x10>
 800bbb8:	6801      	ldr	r1, [r0, #0]
 800bbba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bbbe:	6001      	str	r1, [r0, #0]
 800bbc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bbc2:	bf00      	nop
 800bbc4:	e000ed88 	.word	0xe000ed88

0800bbc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbce:	f3ef 8305 	mrs	r3, IPSR
 800bbd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b0f      	cmp	r3, #15
 800bbd8:	d914      	bls.n	800bc04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbda:	4a17      	ldr	r2, [pc, #92]	; (800bc38 <vPortValidateInterruptPriority+0x70>)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	4413      	add	r3, r2
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbe4:	4b15      	ldr	r3, [pc, #84]	; (800bc3c <vPortValidateInterruptPriority+0x74>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	7afa      	ldrb	r2, [r7, #11]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d20a      	bcs.n	800bc04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	607b      	str	r3, [r7, #4]
}
 800bc00:	bf00      	nop
 800bc02:	e7fe      	b.n	800bc02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc04:	4b0e      	ldr	r3, [pc, #56]	; (800bc40 <vPortValidateInterruptPriority+0x78>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc0c:	4b0d      	ldr	r3, [pc, #52]	; (800bc44 <vPortValidateInterruptPriority+0x7c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d90a      	bls.n	800bc2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	603b      	str	r3, [r7, #0]
}
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <vPortValidateInterruptPriority+0x60>
	}
 800bc2a:	bf00      	nop
 800bc2c:	3714      	adds	r7, #20
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	e000e3f0 	.word	0xe000e3f0
 800bc3c:	20003758 	.word	0x20003758
 800bc40:	e000ed0c 	.word	0xe000ed0c
 800bc44:	2000375c 	.word	0x2000375c

0800bc48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08a      	sub	sp, #40	; 0x28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc50:	2300      	movs	r3, #0
 800bc52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc54:	f7fe fa90 	bl	800a178 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc58:	4b5b      	ldr	r3, [pc, #364]	; (800bdc8 <pvPortMalloc+0x180>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc60:	f000 f920 	bl	800bea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc64:	4b59      	ldr	r3, [pc, #356]	; (800bdcc <pvPortMalloc+0x184>)
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f040 8093 	bne.w	800bd98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d01d      	beq.n	800bcb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bc78:	2208      	movs	r2, #8
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f003 0307 	and.w	r3, r3, #7
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d014      	beq.n	800bcb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f023 0307 	bic.w	r3, r3, #7
 800bc90:	3308      	adds	r3, #8
 800bc92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f003 0307 	and.w	r3, r3, #7
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00a      	beq.n	800bcb4 <pvPortMalloc+0x6c>
	__asm volatile
 800bc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	617b      	str	r3, [r7, #20]
}
 800bcb0:	bf00      	nop
 800bcb2:	e7fe      	b.n	800bcb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d06e      	beq.n	800bd98 <pvPortMalloc+0x150>
 800bcba:	4b45      	ldr	r3, [pc, #276]	; (800bdd0 <pvPortMalloc+0x188>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d869      	bhi.n	800bd98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bcc4:	4b43      	ldr	r3, [pc, #268]	; (800bdd4 <pvPortMalloc+0x18c>)
 800bcc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bcc8:	4b42      	ldr	r3, [pc, #264]	; (800bdd4 <pvPortMalloc+0x18c>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcce:	e004      	b.n	800bcda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d903      	bls.n	800bcec <pvPortMalloc+0xa4>
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1f1      	bne.n	800bcd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bcec:	4b36      	ldr	r3, [pc, #216]	; (800bdc8 <pvPortMalloc+0x180>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d050      	beq.n	800bd98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bcf6:	6a3b      	ldr	r3, [r7, #32]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2208      	movs	r2, #8
 800bcfc:	4413      	add	r3, r2
 800bcfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	6a3b      	ldr	r3, [r7, #32]
 800bd06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	685a      	ldr	r2, [r3, #4]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	1ad2      	subs	r2, r2, r3
 800bd10:	2308      	movs	r3, #8
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d91f      	bls.n	800bd58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	f003 0307 	and.w	r3, r3, #7
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00a      	beq.n	800bd40 <pvPortMalloc+0xf8>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	613b      	str	r3, [r7, #16]
}
 800bd3c:	bf00      	nop
 800bd3e:	e7fe      	b.n	800bd3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	685a      	ldr	r2, [r3, #4]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	1ad2      	subs	r2, r2, r3
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd52:	69b8      	ldr	r0, [r7, #24]
 800bd54:	f000 f908 	bl	800bf68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd58:	4b1d      	ldr	r3, [pc, #116]	; (800bdd0 <pvPortMalloc+0x188>)
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	4a1b      	ldr	r2, [pc, #108]	; (800bdd0 <pvPortMalloc+0x188>)
 800bd64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd66:	4b1a      	ldr	r3, [pc, #104]	; (800bdd0 <pvPortMalloc+0x188>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	4b1b      	ldr	r3, [pc, #108]	; (800bdd8 <pvPortMalloc+0x190>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d203      	bcs.n	800bd7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd72:	4b17      	ldr	r3, [pc, #92]	; (800bdd0 <pvPortMalloc+0x188>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a18      	ldr	r2, [pc, #96]	; (800bdd8 <pvPortMalloc+0x190>)
 800bd78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7c:	685a      	ldr	r2, [r3, #4]
 800bd7e:	4b13      	ldr	r3, [pc, #76]	; (800bdcc <pvPortMalloc+0x184>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	431a      	orrs	r2, r3
 800bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd8e:	4b13      	ldr	r3, [pc, #76]	; (800bddc <pvPortMalloc+0x194>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3301      	adds	r3, #1
 800bd94:	4a11      	ldr	r2, [pc, #68]	; (800bddc <pvPortMalloc+0x194>)
 800bd96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd98:	f7fe f9fc 	bl	800a194 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	f003 0307 	and.w	r3, r3, #7
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00a      	beq.n	800bdbc <pvPortMalloc+0x174>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	60fb      	str	r3, [r7, #12]
}
 800bdb8:	bf00      	nop
 800bdba:	e7fe      	b.n	800bdba <pvPortMalloc+0x172>
	return pvReturn;
 800bdbc:	69fb      	ldr	r3, [r7, #28]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3728      	adds	r7, #40	; 0x28
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20005e78 	.word	0x20005e78
 800bdcc:	20005e8c 	.word	0x20005e8c
 800bdd0:	20005e7c 	.word	0x20005e7c
 800bdd4:	20005e70 	.word	0x20005e70
 800bdd8:	20005e80 	.word	0x20005e80
 800bddc:	20005e84 	.word	0x20005e84

0800bde0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d04d      	beq.n	800be8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bdf2:	2308      	movs	r3, #8
 800bdf4:	425b      	negs	r3, r3
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	685a      	ldr	r2, [r3, #4]
 800be04:	4b24      	ldr	r3, [pc, #144]	; (800be98 <vPortFree+0xb8>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4013      	ands	r3, r2
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10a      	bne.n	800be24 <vPortFree+0x44>
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	60fb      	str	r3, [r7, #12]
}
 800be20:	bf00      	nop
 800be22:	e7fe      	b.n	800be22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00a      	beq.n	800be42 <vPortFree+0x62>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	60bb      	str	r3, [r7, #8]
}
 800be3e:	bf00      	nop
 800be40:	e7fe      	b.n	800be40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	4b14      	ldr	r3, [pc, #80]	; (800be98 <vPortFree+0xb8>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4013      	ands	r3, r2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d01e      	beq.n	800be8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d11a      	bne.n	800be8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	685a      	ldr	r2, [r3, #4]
 800be5c:	4b0e      	ldr	r3, [pc, #56]	; (800be98 <vPortFree+0xb8>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	43db      	mvns	r3, r3
 800be62:	401a      	ands	r2, r3
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be68:	f7fe f986 	bl	800a178 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	685a      	ldr	r2, [r3, #4]
 800be70:	4b0a      	ldr	r3, [pc, #40]	; (800be9c <vPortFree+0xbc>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4413      	add	r3, r2
 800be76:	4a09      	ldr	r2, [pc, #36]	; (800be9c <vPortFree+0xbc>)
 800be78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be7a:	6938      	ldr	r0, [r7, #16]
 800be7c:	f000 f874 	bl	800bf68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be80:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <vPortFree+0xc0>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3301      	adds	r3, #1
 800be86:	4a06      	ldr	r2, [pc, #24]	; (800bea0 <vPortFree+0xc0>)
 800be88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800be8a:	f7fe f983 	bl	800a194 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be8e:	bf00      	nop
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20005e8c 	.word	0x20005e8c
 800be9c:	20005e7c 	.word	0x20005e7c
 800bea0:	20005e88 	.word	0x20005e88

0800bea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800beaa:	f242 7310 	movw	r3, #10000	; 0x2710
 800beae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800beb0:	4b27      	ldr	r3, [pc, #156]	; (800bf50 <prvHeapInit+0xac>)
 800beb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f003 0307 	and.w	r3, r3, #7
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00c      	beq.n	800bed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	3307      	adds	r3, #7
 800bec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f023 0307 	bic.w	r3, r3, #7
 800beca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800becc:	68ba      	ldr	r2, [r7, #8]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	4a1f      	ldr	r2, [pc, #124]	; (800bf50 <prvHeapInit+0xac>)
 800bed4:	4413      	add	r3, r2
 800bed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bedc:	4a1d      	ldr	r2, [pc, #116]	; (800bf54 <prvHeapInit+0xb0>)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bee2:	4b1c      	ldr	r3, [pc, #112]	; (800bf54 <prvHeapInit+0xb0>)
 800bee4:	2200      	movs	r2, #0
 800bee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	4413      	add	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bef0:	2208      	movs	r2, #8
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	1a9b      	subs	r3, r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f023 0307 	bic.w	r3, r3, #7
 800befe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4a15      	ldr	r2, [pc, #84]	; (800bf58 <prvHeapInit+0xb4>)
 800bf04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf06:	4b14      	ldr	r3, [pc, #80]	; (800bf58 <prvHeapInit+0xb4>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf0e:	4b12      	ldr	r3, [pc, #72]	; (800bf58 <prvHeapInit+0xb4>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2200      	movs	r2, #0
 800bf14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	1ad2      	subs	r2, r2, r3
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf24:	4b0c      	ldr	r3, [pc, #48]	; (800bf58 <prvHeapInit+0xb4>)
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	4a0a      	ldr	r2, [pc, #40]	; (800bf5c <prvHeapInit+0xb8>)
 800bf32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	4a09      	ldr	r2, [pc, #36]	; (800bf60 <prvHeapInit+0xbc>)
 800bf3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf3c:	4b09      	ldr	r3, [pc, #36]	; (800bf64 <prvHeapInit+0xc0>)
 800bf3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf42:	601a      	str	r2, [r3, #0]
}
 800bf44:	bf00      	nop
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr
 800bf50:	20003760 	.word	0x20003760
 800bf54:	20005e70 	.word	0x20005e70
 800bf58:	20005e78 	.word	0x20005e78
 800bf5c:	20005e80 	.word	0x20005e80
 800bf60:	20005e7c 	.word	0x20005e7c
 800bf64:	20005e8c 	.word	0x20005e8c

0800bf68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf70:	4b28      	ldr	r3, [pc, #160]	; (800c014 <prvInsertBlockIntoFreeList+0xac>)
 800bf72:	60fb      	str	r3, [r7, #12]
 800bf74:	e002      	b.n	800bf7c <prvInsertBlockIntoFreeList+0x14>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d8f7      	bhi.n	800bf76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	4413      	add	r3, r2
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d108      	bne.n	800bfaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	685a      	ldr	r2, [r3, #4]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	441a      	add	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	441a      	add	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d118      	bne.n	800bff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	4b15      	ldr	r3, [pc, #84]	; (800c018 <prvInsertBlockIntoFreeList+0xb0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d00d      	beq.n	800bfe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	685a      	ldr	r2, [r3, #4]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	441a      	add	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	601a      	str	r2, [r3, #0]
 800bfe4:	e008      	b.n	800bff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bfe6:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <prvInsertBlockIntoFreeList+0xb0>)
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	601a      	str	r2, [r3, #0]
 800bfee:	e003      	b.n	800bff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d002      	beq.n	800c006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c006:	bf00      	nop
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	20005e70 	.word	0x20005e70
 800c018:	20005e78 	.word	0x20005e78

0800c01c <__libc_init_array>:
 800c01c:	b570      	push	{r4, r5, r6, lr}
 800c01e:	4d0d      	ldr	r5, [pc, #52]	; (800c054 <__libc_init_array+0x38>)
 800c020:	4c0d      	ldr	r4, [pc, #52]	; (800c058 <__libc_init_array+0x3c>)
 800c022:	1b64      	subs	r4, r4, r5
 800c024:	10a4      	asrs	r4, r4, #2
 800c026:	2600      	movs	r6, #0
 800c028:	42a6      	cmp	r6, r4
 800c02a:	d109      	bne.n	800c040 <__libc_init_array+0x24>
 800c02c:	4d0b      	ldr	r5, [pc, #44]	; (800c05c <__libc_init_array+0x40>)
 800c02e:	4c0c      	ldr	r4, [pc, #48]	; (800c060 <__libc_init_array+0x44>)
 800c030:	f000 f8f2 	bl	800c218 <_init>
 800c034:	1b64      	subs	r4, r4, r5
 800c036:	10a4      	asrs	r4, r4, #2
 800c038:	2600      	movs	r6, #0
 800c03a:	42a6      	cmp	r6, r4
 800c03c:	d105      	bne.n	800c04a <__libc_init_array+0x2e>
 800c03e:	bd70      	pop	{r4, r5, r6, pc}
 800c040:	f855 3b04 	ldr.w	r3, [r5], #4
 800c044:	4798      	blx	r3
 800c046:	3601      	adds	r6, #1
 800c048:	e7ee      	b.n	800c028 <__libc_init_array+0xc>
 800c04a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c04e:	4798      	blx	r3
 800c050:	3601      	adds	r6, #1
 800c052:	e7f2      	b.n	800c03a <__libc_init_array+0x1e>
 800c054:	0800e608 	.word	0x0800e608
 800c058:	0800e608 	.word	0x0800e608
 800c05c:	0800e608 	.word	0x0800e608
 800c060:	0800e60c 	.word	0x0800e60c

0800c064 <__retarget_lock_acquire_recursive>:
 800c064:	4770      	bx	lr

0800c066 <__retarget_lock_release_recursive>:
 800c066:	4770      	bx	lr

0800c068 <memcpy>:
 800c068:	440a      	add	r2, r1
 800c06a:	4291      	cmp	r1, r2
 800c06c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c070:	d100      	bne.n	800c074 <memcpy+0xc>
 800c072:	4770      	bx	lr
 800c074:	b510      	push	{r4, lr}
 800c076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c07a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c07e:	4291      	cmp	r1, r2
 800c080:	d1f9      	bne.n	800c076 <memcpy+0xe>
 800c082:	bd10      	pop	{r4, pc}

0800c084 <memset>:
 800c084:	4402      	add	r2, r0
 800c086:	4603      	mov	r3, r0
 800c088:	4293      	cmp	r3, r2
 800c08a:	d100      	bne.n	800c08e <memset+0xa>
 800c08c:	4770      	bx	lr
 800c08e:	f803 1b01 	strb.w	r1, [r3], #1
 800c092:	e7f9      	b.n	800c088 <memset+0x4>

0800c094 <cleanup_glue>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	460c      	mov	r4, r1
 800c098:	6809      	ldr	r1, [r1, #0]
 800c09a:	4605      	mov	r5, r0
 800c09c:	b109      	cbz	r1, 800c0a2 <cleanup_glue+0xe>
 800c09e:	f7ff fff9 	bl	800c094 <cleanup_glue>
 800c0a2:	4621      	mov	r1, r4
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0aa:	f000 b869 	b.w	800c180 <_free_r>
	...

0800c0b0 <_reclaim_reent>:
 800c0b0:	4b2c      	ldr	r3, [pc, #176]	; (800c164 <_reclaim_reent+0xb4>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4283      	cmp	r3, r0
 800c0b6:	b570      	push	{r4, r5, r6, lr}
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	d051      	beq.n	800c160 <_reclaim_reent+0xb0>
 800c0bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c0be:	b143      	cbz	r3, 800c0d2 <_reclaim_reent+0x22>
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d14a      	bne.n	800c15c <_reclaim_reent+0xac>
 800c0c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0c8:	6819      	ldr	r1, [r3, #0]
 800c0ca:	b111      	cbz	r1, 800c0d2 <_reclaim_reent+0x22>
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 f857 	bl	800c180 <_free_r>
 800c0d2:	6961      	ldr	r1, [r4, #20]
 800c0d4:	b111      	cbz	r1, 800c0dc <_reclaim_reent+0x2c>
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f000 f852 	bl	800c180 <_free_r>
 800c0dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c0de:	b111      	cbz	r1, 800c0e6 <_reclaim_reent+0x36>
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f000 f84d 	bl	800c180 <_free_r>
 800c0e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c0e8:	b111      	cbz	r1, 800c0f0 <_reclaim_reent+0x40>
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f000 f848 	bl	800c180 <_free_r>
 800c0f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c0f2:	b111      	cbz	r1, 800c0fa <_reclaim_reent+0x4a>
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f000 f843 	bl	800c180 <_free_r>
 800c0fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c0fc:	b111      	cbz	r1, 800c104 <_reclaim_reent+0x54>
 800c0fe:	4620      	mov	r0, r4
 800c100:	f000 f83e 	bl	800c180 <_free_r>
 800c104:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c106:	b111      	cbz	r1, 800c10e <_reclaim_reent+0x5e>
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 f839 	bl	800c180 <_free_r>
 800c10e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c110:	b111      	cbz	r1, 800c118 <_reclaim_reent+0x68>
 800c112:	4620      	mov	r0, r4
 800c114:	f000 f834 	bl	800c180 <_free_r>
 800c118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c11a:	b111      	cbz	r1, 800c122 <_reclaim_reent+0x72>
 800c11c:	4620      	mov	r0, r4
 800c11e:	f000 f82f 	bl	800c180 <_free_r>
 800c122:	69a3      	ldr	r3, [r4, #24]
 800c124:	b1e3      	cbz	r3, 800c160 <_reclaim_reent+0xb0>
 800c126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c128:	4620      	mov	r0, r4
 800c12a:	4798      	blx	r3
 800c12c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c12e:	b1b9      	cbz	r1, 800c160 <_reclaim_reent+0xb0>
 800c130:	4620      	mov	r0, r4
 800c132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c136:	f7ff bfad 	b.w	800c094 <cleanup_glue>
 800c13a:	5949      	ldr	r1, [r1, r5]
 800c13c:	b941      	cbnz	r1, 800c150 <_reclaim_reent+0xa0>
 800c13e:	3504      	adds	r5, #4
 800c140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c142:	2d80      	cmp	r5, #128	; 0x80
 800c144:	68d9      	ldr	r1, [r3, #12]
 800c146:	d1f8      	bne.n	800c13a <_reclaim_reent+0x8a>
 800c148:	4620      	mov	r0, r4
 800c14a:	f000 f819 	bl	800c180 <_free_r>
 800c14e:	e7ba      	b.n	800c0c6 <_reclaim_reent+0x16>
 800c150:	680e      	ldr	r6, [r1, #0]
 800c152:	4620      	mov	r0, r4
 800c154:	f000 f814 	bl	800c180 <_free_r>
 800c158:	4631      	mov	r1, r6
 800c15a:	e7ef      	b.n	800c13c <_reclaim_reent+0x8c>
 800c15c:	2500      	movs	r5, #0
 800c15e:	e7ef      	b.n	800c140 <_reclaim_reent+0x90>
 800c160:	bd70      	pop	{r4, r5, r6, pc}
 800c162:	bf00      	nop
 800c164:	20000018 	.word	0x20000018

0800c168 <__malloc_lock>:
 800c168:	4801      	ldr	r0, [pc, #4]	; (800c170 <__malloc_lock+0x8>)
 800c16a:	f7ff bf7b 	b.w	800c064 <__retarget_lock_acquire_recursive>
 800c16e:	bf00      	nop
 800c170:	20005e90 	.word	0x20005e90

0800c174 <__malloc_unlock>:
 800c174:	4801      	ldr	r0, [pc, #4]	; (800c17c <__malloc_unlock+0x8>)
 800c176:	f7ff bf76 	b.w	800c066 <__retarget_lock_release_recursive>
 800c17a:	bf00      	nop
 800c17c:	20005e90 	.word	0x20005e90

0800c180 <_free_r>:
 800c180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c182:	2900      	cmp	r1, #0
 800c184:	d044      	beq.n	800c210 <_free_r+0x90>
 800c186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c18a:	9001      	str	r0, [sp, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f1a1 0404 	sub.w	r4, r1, #4
 800c192:	bfb8      	it	lt
 800c194:	18e4      	addlt	r4, r4, r3
 800c196:	f7ff ffe7 	bl	800c168 <__malloc_lock>
 800c19a:	4a1e      	ldr	r2, [pc, #120]	; (800c214 <_free_r+0x94>)
 800c19c:	9801      	ldr	r0, [sp, #4]
 800c19e:	6813      	ldr	r3, [r2, #0]
 800c1a0:	b933      	cbnz	r3, 800c1b0 <_free_r+0x30>
 800c1a2:	6063      	str	r3, [r4, #4]
 800c1a4:	6014      	str	r4, [r2, #0]
 800c1a6:	b003      	add	sp, #12
 800c1a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1ac:	f7ff bfe2 	b.w	800c174 <__malloc_unlock>
 800c1b0:	42a3      	cmp	r3, r4
 800c1b2:	d908      	bls.n	800c1c6 <_free_r+0x46>
 800c1b4:	6825      	ldr	r5, [r4, #0]
 800c1b6:	1961      	adds	r1, r4, r5
 800c1b8:	428b      	cmp	r3, r1
 800c1ba:	bf01      	itttt	eq
 800c1bc:	6819      	ldreq	r1, [r3, #0]
 800c1be:	685b      	ldreq	r3, [r3, #4]
 800c1c0:	1949      	addeq	r1, r1, r5
 800c1c2:	6021      	streq	r1, [r4, #0]
 800c1c4:	e7ed      	b.n	800c1a2 <_free_r+0x22>
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	b10b      	cbz	r3, 800c1d0 <_free_r+0x50>
 800c1cc:	42a3      	cmp	r3, r4
 800c1ce:	d9fa      	bls.n	800c1c6 <_free_r+0x46>
 800c1d0:	6811      	ldr	r1, [r2, #0]
 800c1d2:	1855      	adds	r5, r2, r1
 800c1d4:	42a5      	cmp	r5, r4
 800c1d6:	d10b      	bne.n	800c1f0 <_free_r+0x70>
 800c1d8:	6824      	ldr	r4, [r4, #0]
 800c1da:	4421      	add	r1, r4
 800c1dc:	1854      	adds	r4, r2, r1
 800c1de:	42a3      	cmp	r3, r4
 800c1e0:	6011      	str	r1, [r2, #0]
 800c1e2:	d1e0      	bne.n	800c1a6 <_free_r+0x26>
 800c1e4:	681c      	ldr	r4, [r3, #0]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	6053      	str	r3, [r2, #4]
 800c1ea:	4421      	add	r1, r4
 800c1ec:	6011      	str	r1, [r2, #0]
 800c1ee:	e7da      	b.n	800c1a6 <_free_r+0x26>
 800c1f0:	d902      	bls.n	800c1f8 <_free_r+0x78>
 800c1f2:	230c      	movs	r3, #12
 800c1f4:	6003      	str	r3, [r0, #0]
 800c1f6:	e7d6      	b.n	800c1a6 <_free_r+0x26>
 800c1f8:	6825      	ldr	r5, [r4, #0]
 800c1fa:	1961      	adds	r1, r4, r5
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	bf04      	itt	eq
 800c200:	6819      	ldreq	r1, [r3, #0]
 800c202:	685b      	ldreq	r3, [r3, #4]
 800c204:	6063      	str	r3, [r4, #4]
 800c206:	bf04      	itt	eq
 800c208:	1949      	addeq	r1, r1, r5
 800c20a:	6021      	streq	r1, [r4, #0]
 800c20c:	6054      	str	r4, [r2, #4]
 800c20e:	e7ca      	b.n	800c1a6 <_free_r+0x26>
 800c210:	b003      	add	sp, #12
 800c212:	bd30      	pop	{r4, r5, pc}
 800c214:	20005e94 	.word	0x20005e94

0800c218 <_init>:
 800c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21a:	bf00      	nop
 800c21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21e:	bc08      	pop	{r3}
 800c220:	469e      	mov	lr, r3
 800c222:	4770      	bx	lr

0800c224 <_fini>:
 800c224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c226:	bf00      	nop
 800c228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c22a:	bc08      	pop	{r3}
 800c22c:	469e      	mov	lr, r3
 800c22e:	4770      	bx	lr
