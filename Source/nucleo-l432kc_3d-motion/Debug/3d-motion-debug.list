
3d-motion-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000896c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08008b00  08008b00  00018b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b90  08008b90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b98  08008b98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b9c  08008b9c  00018b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  20000070  08008c10  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011e8  08008c10  000211e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019913  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003356  00000000  00000000  000399b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003cd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003e120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004068  00000000  00000000  0003f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab09  00000000  00000000  00043440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf906  00000000  00000000  0005df49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d84f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000585c  00000000  00000000  0012d8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ae4 	.word	0x08008ae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008ae4 	.word	0x08008ae4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_uldivmod>:
 8000aa8:	b953      	cbnz	r3, 8000ac0 <__aeabi_uldivmod+0x18>
 8000aaa:	b94a      	cbnz	r2, 8000ac0 <__aeabi_uldivmod+0x18>
 8000aac:	2900      	cmp	r1, #0
 8000aae:	bf08      	it	eq
 8000ab0:	2800      	cmpeq	r0, #0
 8000ab2:	bf1c      	itt	ne
 8000ab4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab8:	f04f 30ff 	movne.w	r0, #4294967295
 8000abc:	f000 b974 	b.w	8000da8 <__aeabi_idiv0>
 8000ac0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac8:	f000 f806 	bl	8000ad8 <__udivmoddi4>
 8000acc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad4:	b004      	add	sp, #16
 8000ad6:	4770      	bx	lr

08000ad8 <__udivmoddi4>:
 8000ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000adc:	9d08      	ldr	r5, [sp, #32]
 8000ade:	4604      	mov	r4, r0
 8000ae0:	468e      	mov	lr, r1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d14d      	bne.n	8000b82 <__udivmoddi4+0xaa>
 8000ae6:	428a      	cmp	r2, r1
 8000ae8:	4694      	mov	ip, r2
 8000aea:	d969      	bls.n	8000bc0 <__udivmoddi4+0xe8>
 8000aec:	fab2 f282 	clz	r2, r2
 8000af0:	b152      	cbz	r2, 8000b08 <__udivmoddi4+0x30>
 8000af2:	fa01 f302 	lsl.w	r3, r1, r2
 8000af6:	f1c2 0120 	rsb	r1, r2, #32
 8000afa:	fa20 f101 	lsr.w	r1, r0, r1
 8000afe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b02:	ea41 0e03 	orr.w	lr, r1, r3
 8000b06:	4094      	lsls	r4, r2
 8000b08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b0c:	0c21      	lsrs	r1, r4, #16
 8000b0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b12:	fa1f f78c 	uxth.w	r7, ip
 8000b16:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b1e:	fb06 f107 	mul.w	r1, r6, r7
 8000b22:	4299      	cmp	r1, r3
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x64>
 8000b26:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 811f 	bcs.w	8000d70 <__udivmoddi4+0x298>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 811c 	bls.w	8000d70 <__udivmoddi4+0x298>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 f707 	mul.w	r7, r0, r7
 8000b50:	42a7      	cmp	r7, r4
 8000b52:	d90a      	bls.n	8000b6a <__udivmoddi4+0x92>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5c:	f080 810a 	bcs.w	8000d74 <__udivmoddi4+0x29c>
 8000b60:	42a7      	cmp	r7, r4
 8000b62:	f240 8107 	bls.w	8000d74 <__udivmoddi4+0x29c>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6e:	1be4      	subs	r4, r4, r7
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa4>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xc2>
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	f000 80ef 	beq.w	8000d6a <__udivmoddi4+0x292>
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b92:	4630      	mov	r0, r6
 8000b94:	4631      	mov	r1, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f683 	clz	r6, r3
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d14a      	bne.n	8000c38 <__udivmoddi4+0x160>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd4>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80f9 	bhi.w	8000d9e <__udivmoddi4+0x2c6>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	469e      	mov	lr, r3
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa4>
 8000bba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa4>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xec>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 8092 	bne.w	8000cf2 <__udivmoddi4+0x21a>
 8000bce:	eba1 010c 	sub.w	r1, r1, ip
 8000bd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd6:	fa1f fe8c 	uxth.w	lr, ip
 8000bda:	2601      	movs	r6, #1
 8000bdc:	0c20      	lsrs	r0, r4, #16
 8000bde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be2:	fb07 1113 	mls	r1, r7, r3, r1
 8000be6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bea:	fb0e f003 	mul.w	r0, lr, r3
 8000bee:	4288      	cmp	r0, r1
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x12c>
 8000bf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x12a>
 8000bfc:	4288      	cmp	r0, r1
 8000bfe:	f200 80cb 	bhi.w	8000d98 <__udivmoddi4+0x2c0>
 8000c02:	4643      	mov	r3, r8
 8000c04:	1a09      	subs	r1, r1, r0
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c14:	fb0e fe00 	mul.w	lr, lr, r0
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x156>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d202      	bcs.n	8000c2c <__udivmoddi4+0x154>
 8000c26:	45a6      	cmp	lr, r4
 8000c28:	f200 80bb 	bhi.w	8000da2 <__udivmoddi4+0x2ca>
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	eba4 040e 	sub.w	r4, r4, lr
 8000c32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c36:	e79c      	b.n	8000b72 <__udivmoddi4+0x9a>
 8000c38:	f1c6 0720 	rsb	r7, r6, #32
 8000c3c:	40b3      	lsls	r3, r6
 8000c3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c46:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c4e:	431c      	orrs	r4, r3
 8000c50:	40f9      	lsrs	r1, r7
 8000c52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c56:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fa1f fe8c 	uxth.w	lr, ip
 8000c64:	fb09 1118 	mls	r1, r9, r8, r1
 8000c68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000c70:	4288      	cmp	r0, r1
 8000c72:	fa02 f206 	lsl.w	r2, r2, r6
 8000c76:	d90b      	bls.n	8000c90 <__udivmoddi4+0x1b8>
 8000c78:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c80:	f080 8088 	bcs.w	8000d94 <__udivmoddi4+0x2bc>
 8000c84:	4288      	cmp	r0, r1
 8000c86:	f240 8085 	bls.w	8000d94 <__udivmoddi4+0x2bc>
 8000c8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8e:	4461      	add	r1, ip
 8000c90:	1a09      	subs	r1, r1, r0
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c98:	fb09 1110 	mls	r1, r9, r0, r1
 8000c9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca4:	458e      	cmp	lr, r1
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x1e2>
 8000ca8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb0:	d26c      	bcs.n	8000d8c <__udivmoddi4+0x2b4>
 8000cb2:	458e      	cmp	lr, r1
 8000cb4:	d96a      	bls.n	8000d8c <__udivmoddi4+0x2b4>
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	4461      	add	r1, ip
 8000cba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc2:	eba1 010e 	sub.w	r1, r1, lr
 8000cc6:	42a1      	cmp	r1, r4
 8000cc8:	46c8      	mov	r8, r9
 8000cca:	46a6      	mov	lr, r4
 8000ccc:	d356      	bcc.n	8000d7c <__udivmoddi4+0x2a4>
 8000cce:	d053      	beq.n	8000d78 <__udivmoddi4+0x2a0>
 8000cd0:	b15d      	cbz	r5, 8000cea <__udivmoddi4+0x212>
 8000cd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000cd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000cda:	fa01 f707 	lsl.w	r7, r1, r7
 8000cde:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce2:	40f1      	lsrs	r1, r6
 8000ce4:	431f      	orrs	r7, r3
 8000ce6:	e9c5 7100 	strd	r7, r1, [r5]
 8000cea:	2600      	movs	r6, #0
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	40d8      	lsrs	r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000d00:	4091      	lsls	r1, r2
 8000d02:	4301      	orrs	r1, r0
 8000d04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d10:	fb07 3610 	mls	r6, r7, r0, r3
 8000d14:	0c0b      	lsrs	r3, r1, #16
 8000d16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d1e:	429e      	cmp	r6, r3
 8000d20:	fa04 f402 	lsl.w	r4, r4, r2
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x260>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2e:	d22f      	bcs.n	8000d90 <__udivmoddi4+0x2b8>
 8000d30:	429e      	cmp	r6, r3
 8000d32:	d92d      	bls.n	8000d90 <__udivmoddi4+0x2b8>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1b9b      	subs	r3, r3, r6
 8000d3a:	b289      	uxth	r1, r1
 8000d3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d40:	fb07 3316 	mls	r3, r7, r6, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb06 f30e 	mul.w	r3, r6, lr
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x28a>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d58:	d216      	bcs.n	8000d88 <__udivmoddi4+0x2b0>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d914      	bls.n	8000d88 <__udivmoddi4+0x2b0>
 8000d5e:	3e02      	subs	r6, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	1ac9      	subs	r1, r1, r3
 8000d64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d68:	e738      	b.n	8000bdc <__udivmoddi4+0x104>
 8000d6a:	462e      	mov	r6, r5
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	e705      	b.n	8000b7c <__udivmoddi4+0xa4>
 8000d70:	4606      	mov	r6, r0
 8000d72:	e6e3      	b.n	8000b3c <__udivmoddi4+0x64>
 8000d74:	4618      	mov	r0, r3
 8000d76:	e6f8      	b.n	8000b6a <__udivmoddi4+0x92>
 8000d78:	454b      	cmp	r3, r9
 8000d7a:	d2a9      	bcs.n	8000cd0 <__udivmoddi4+0x1f8>
 8000d7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d84:	3801      	subs	r0, #1
 8000d86:	e7a3      	b.n	8000cd0 <__udivmoddi4+0x1f8>
 8000d88:	4646      	mov	r6, r8
 8000d8a:	e7ea      	b.n	8000d62 <__udivmoddi4+0x28a>
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	e794      	b.n	8000cba <__udivmoddi4+0x1e2>
 8000d90:	4640      	mov	r0, r8
 8000d92:	e7d1      	b.n	8000d38 <__udivmoddi4+0x260>
 8000d94:	46d0      	mov	r8, sl
 8000d96:	e77b      	b.n	8000c90 <__udivmoddi4+0x1b8>
 8000d98:	3b02      	subs	r3, #2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	e732      	b.n	8000c04 <__udivmoddi4+0x12c>
 8000d9e:	4630      	mov	r0, r6
 8000da0:	e709      	b.n	8000bb6 <__udivmoddi4+0xde>
 8000da2:	4464      	add	r4, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e742      	b.n	8000c2e <__udivmoddi4+0x156>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <error_handler>:
volatile BOOL usTimeout = FALSE;
/*
 * TODO: Insert Doxy here
 */
void error_handler(char *str, UINT16 offset, UINT16 errval)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
	//printf(" \n\r ...ERROR...\n\r ");
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <i2c_cmd_WrRd>:
 * @param ucData_rd Pointer to data buffer from slave
 * @param bAdjust Use 1st 2 bytes returned as new length (=TRUE)
 * @return I2C_SUCCESS(=0), I2C_BUF_OVRFLO(=0x22)
 */
UINT8 i2c_cmd_WrRd(UINT8 ucCmd, UINT8 ucBytes_wr, UINT8 *ucData_wr, UINT16 usBytes_rd, UINT8 *ucData_rd, BOOL bAdjust)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	60ba      	str	r2, [r7, #8]
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	73fb      	strb	r3, [r7, #15]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	73bb      	strb	r3, [r7, #14]
	if (ucBytes_wr > BUF_150)
 8000dd6:	7bbb      	ldrb	r3, [r7, #14]
 8000dd8:	2b96      	cmp	r3, #150	; 0x96
 8000dda:	d901      	bls.n	8000de0 <i2c_cmd_WrRd+0x1c>
	{
		return I2C_BUF_OVRFLO;
 8000ddc:	2322      	movs	r3, #34	; 0x22
 8000dde:	e05c      	b.n	8000e9a <i2c_cmd_WrRd+0xd6>
	}

	//rn im quite clueless why sht not working, so ill just try crit sec \_°-°_/ */
	switch (ucCmd)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d02c      	beq.n	8000e40 <i2c_cmd_WrRd+0x7c>
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	dc4f      	bgt.n	8000e8a <i2c_cmd_WrRd+0xc6>
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d002      	beq.n	8000df4 <i2c_cmd_WrRd+0x30>
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d013      	beq.n	8000e1a <i2c_cmd_WrRd+0x56>
			}
			break;

		default:
			/* You shall not be here >.< */
			break;
 8000df2:	e04a      	b.n	8000e8a <i2c_cmd_WrRd+0xc6>
			if (HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR, ucData_wr, ucBytes_wr, 2000) != HAL_OK)
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000dfc:	9200      	str	r2, [sp, #0]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	4828      	ldr	r0, [pc, #160]	; (8000ea4 <i2c_cmd_WrRd+0xe0>)
 8000e04:	f002 fffa 	bl	8003dfc <HAL_I2C_Master_Transmit>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d03f      	beq.n	8000e8e <i2c_cmd_WrRd+0xca>
				error_handler("i2c ", 0, I2C_ERROR);
 8000e0e:	2221      	movs	r2, #33	; 0x21
 8000e10:	2100      	movs	r1, #0
 8000e12:	4825      	ldr	r0, [pc, #148]	; (8000ea8 <i2c_cmd_WrRd+0xe4>)
 8000e14:	f7ff ffca 	bl	8000dac <error_handler>
			break;
 8000e18:	e039      	b.n	8000e8e <i2c_cmd_WrRd+0xca>
			if (HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDR, ucData_rd, usBytes_rd, 2000) != HAL_OK)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e22:	9200      	str	r2, [sp, #0]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	481e      	ldr	r0, [pc, #120]	; (8000ea4 <i2c_cmd_WrRd+0xe0>)
 8000e2a:	f003 f8db 	bl	8003fe4 <HAL_I2C_Master_Receive>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d02e      	beq.n	8000e92 <i2c_cmd_WrRd+0xce>
				error_handler("i2c ", 0, I2C_ERROR);
 8000e34:	2221      	movs	r2, #33	; 0x21
 8000e36:	2100      	movs	r1, #0
 8000e38:	481b      	ldr	r0, [pc, #108]	; (8000ea8 <i2c_cmd_WrRd+0xe4>)
 8000e3a:	f7ff ffb7 	bl	8000dac <error_handler>
			break;
 8000e3e:	e028      	b.n	8000e92 <i2c_cmd_WrRd+0xce>
			if (HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR, ucData_wr, ucBytes_wr, 2000) != HAL_OK)
 8000e40:	7bbb      	ldrb	r3, [r7, #14]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e48:	9200      	str	r2, [sp, #0]
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	4815      	ldr	r0, [pc, #84]	; (8000ea4 <i2c_cmd_WrRd+0xe0>)
 8000e50:	f002 ffd4 	bl	8003dfc <HAL_I2C_Master_Transmit>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d004      	beq.n	8000e64 <i2c_cmd_WrRd+0xa0>
 				error_handler("i2c ", 0, I2C_ERROR);
 8000e5a:	2221      	movs	r2, #33	; 0x21
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <i2c_cmd_WrRd+0xe4>)
 8000e60:	f7ff ffa4 	bl	8000dac <error_handler>
			if (HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDR, ucData_rd, usBytes_rd, 2000) != HAL_OK)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e6c:	9200      	str	r2, [sp, #0]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <i2c_cmd_WrRd+0xe0>)
 8000e74:	f003 f8b6 	bl	8003fe4 <HAL_I2C_Master_Receive>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <i2c_cmd_WrRd+0xd2>
				error_handler("i2c ", 0, I2C_ERROR);
 8000e7e:	2221      	movs	r2, #33	; 0x21
 8000e80:	2100      	movs	r1, #0
 8000e82:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <i2c_cmd_WrRd+0xe4>)
 8000e84:	f7ff ff92 	bl	8000dac <error_handler>
			break;
 8000e88:	e005      	b.n	8000e96 <i2c_cmd_WrRd+0xd2>
			break;
 8000e8a:	bf00      	nop
 8000e8c:	e004      	b.n	8000e98 <i2c_cmd_WrRd+0xd4>
			break;
 8000e8e:	bf00      	nop
 8000e90:	e002      	b.n	8000e98 <i2c_cmd_WrRd+0xd4>
			break;
 8000e92:	bf00      	nop
 8000e94:	e000      	b.n	8000e98 <i2c_cmd_WrRd+0xd4>
			break;
 8000e96:	bf00      	nop
	}


	/* TODO: Where's this defined and what if error occurs? */
	return I2C_SUCCESS;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20001070 	.word	0x20001070
 8000ea8:	08008b00 	.word	0x08008b00

08000eac <_accel>:

extern char state;

char flag = 1;

void _accel() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0
	UINT8 ucRetStat;                                      // return status value
	UINT16 wdata;                                    // pre-exponent-scaled data
	double dDataX = 0, dDataY = 0, dDataZ = 0; // Data field variables
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	f04f 0300 	mov.w	r3, #0
 8000ec6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dMult = 1; // Multiplier for data fields : sets them to appropriate order of magnitude
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	4b7e      	ldr	r3, [pc, #504]	; (80010d4 <_accel+0x228>)
 8000edc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	UINT16 wRMWdata;           // temporary data for Read-Modify-Write VREG data

	// Enable the Accelerometer
	// To support multi-threaded applications, Read-Modify-Write the VREG:
	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS) // Read data from the Sensor Hub Configuration register
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f001 fb09 	bl	80024fc <HOST_SF_LIB_VREG_read>
 8000eea:	4603      	mov	r3, r0
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d112      	bne.n	8000f1a <_accel+0x6e>
	{
		if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata | VREG_SHC_ACC_EN))) // Enable the accelerometer (ACC_EN)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	4619      	mov	r1, r3
 8000efc:	2000      	movs	r0, #0
 8000efe:	f001 fb67 	bl	80025d0 <HOST_SF_LIB_VREG_write>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00c      	beq.n	8000f26 <_accel+0x7a>
			error_handler("VRWr", VREG_SHC, ucRetStat);  // error display
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	2100      	movs	r1, #0
 8000f12:	4871      	ldr	r0, [pc, #452]	; (80010d8 <_accel+0x22c>)
 8000f14:	f7ff ff4a 	bl	8000dac <error_handler>
 8000f18:	e005      	b.n	8000f26 <_accel+0x7a>
	} else
		error_handler("VRRd", VREG_SHC, ucRetStat);       // error display
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	486e      	ldr	r0, [pc, #440]	; (80010dc <_accel+0x230>)
 8000f22:	f7ff ff43 	bl	8000dac <error_handler>

	if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_ACSEN, 0x14))) // Change Accelerometer sensitivity
 8000f26:	2114      	movs	r1, #20
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f001 fb51 	bl	80025d0 <HOST_SF_LIB_VREG_write>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d005      	beq.n	8000f44 <_accel+0x98>
		error_handler("VRWr", VREG_ACSEN, ucRetStat);     // error display
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4866      	ldr	r0, [pc, #408]	; (80010d8 <_accel+0x22c>)
 8000f40:	f7ff ff34 	bl	8000dac <error_handler>

	if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_ACDXR, 0x64))) // Change acc data rate
 8000f44:	2164      	movs	r1, #100	; 0x64
 8000f46:	200c      	movs	r0, #12
 8000f48:	f001 fb42 	bl	80025d0 <HOST_SF_LIB_VREG_write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d005      	beq.n	8000f62 <_accel+0xb6>
		error_handler("VRWr", VREG_ACDXR, ucRetStat);     // error display
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	210c      	movs	r1, #12
 8000f5c:	485e      	ldr	r0, [pc, #376]	; (80010d8 <_accel+0x22c>)
 8000f5e:	f7ff ff25 	bl	8000dac <error_handler>

	dMult = ret_exponent(ACCEL_VREG_OFFSET); // Get unit exponent for this sensor's data
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 fe30 	bl	8001bc8 <ret_exponent>
 8000f68:	ed87 0b04 	vstr	d0, [r7, #16]

	// get acc readings
	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ACXD, &wdata))) // Read data from the accelerometer datax register
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	4619      	mov	r1, r3
 8000f72:	2016      	movs	r0, #22
 8000f74:	f001 fac2 	bl	80024fc <HOST_SF_LIB_VREG_read>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <_accel+0xe2>
		error_handler("VRRd", VREG_ACXD, ucRetStat);  // error display
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	461a      	mov	r2, r3
 8000f86:	2116      	movs	r1, #22
 8000f88:	4854      	ldr	r0, [pc, #336]	; (80010dc <_accel+0x230>)
 8000f8a:	f7ff ff0f 	bl	8000dac <error_handler>

	dDataX = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fa6e 	bl	8000474 <__aeabi_i2d>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fa0:	f7ff fad2 	bl	8000548 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ACYD, &wdata))) // Read data from the accelerometer datay register
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2017      	movs	r0, #23
 8000fb4:	f001 faa2 	bl	80024fc <HOST_SF_LIB_VREG_read>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <_accel+0x122>
		error_handler("VRRd", VREG_ACYD, ucRetStat);  // error display
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2117      	movs	r1, #23
 8000fc8:	4844      	ldr	r0, [pc, #272]	; (80010dc <_accel+0x230>)
 8000fca:	f7ff feef 	bl	8000dac <error_handler>

	dDataY = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa4e 	bl	8000474 <__aeabi_i2d>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fe0:	f7ff fab2 	bl	8000548 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ACZD, &wdata))) // Read data from the accelerometer dataz register
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2018      	movs	r0, #24
 8000ff4:	f001 fa82 	bl	80024fc <HOST_SF_LIB_VREG_read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <_accel+0x162>
		error_handler("VRRd", VREG_ACZD, ucRetStat);  // error display
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	461a      	mov	r2, r3
 8001006:	2118      	movs	r1, #24
 8001008:	4834      	ldr	r0, [pc, #208]	; (80010dc <_accel+0x230>)
 800100a:	f7ff fecf 	bl	8000dac <error_handler>

	dDataZ = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa2e 	bl	8000474 <__aeabi_i2d>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001020:	f7ff fa92 	bl	8000548 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	e9c7 2306 	strd	r2, r3, [r7, #24]

	if (prev_dat[0] != dDataX || prev_dat[1] != dDataY || prev_dat[2] != dDataZ) // Ensure that this data has not yet been displayed
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <_accel+0x234>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001036:	f7ff fcef 	bl	8000a18 <__aeabi_dcmpeq>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <_accel+0x1bc>
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <_accel+0x234>)
 8001042:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001046:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800104a:	f7ff fce5 	bl	8000a18 <__aeabi_dcmpeq>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d009      	beq.n	8001068 <_accel+0x1bc>
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <_accel+0x234>)
 8001056:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800105a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800105e:	f7ff fcdb 	bl	8000a18 <__aeabi_dcmpeq>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10e      	bne.n	8001086 <_accel+0x1da>
			{
		prev_dat[0] = dDataX; // Store the current data values for later reference
 8001068:	491d      	ldr	r1, [pc, #116]	; (80010e0 <_accel+0x234>)
 800106a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800106e:	e9c1 2300 	strd	r2, r3, [r1]
		prev_dat[1] = dDataY;
 8001072:	491b      	ldr	r1, [pc, #108]	; (80010e0 <_accel+0x234>)
 8001074:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001078:	e9c1 2302 	strd	r2, r3, [r1, #8]
		prev_dat[2] = dDataZ;
 800107c:	4918      	ldr	r1, [pc, #96]	; (80010e0 <_accel+0x234>)
 800107e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001082:	e9c1 2304 	strd	r2, r3, [r1, #16]
	} //NOTE: If data does not change in response to movement of sensor, SSC7150 not sending EC_DATA_AVAIL interrupts and 'may' need POR

		//Disable the Accelerometer on exit
		if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS) // Read data from the Sensor Hub Configuration register
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	2000      	movs	r0, #0
 800108c:	f001 fa36 	bl	80024fc <HOST_SF_LIB_VREG_read>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d112      	bne.n	80010c0 <_accel+0x214>
		{
			if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f023 0310 	bic.w	r3, r3, #16
 80010a0:	4619      	mov	r1, r3
 80010a2:	2000      	movs	r0, #0
 80010a4:	f001 fa94 	bl	80025d0 <HOST_SF_LIB_VREG_write>
 80010a8:	4603      	mov	r3, r0
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00c      	beq.n	80010cc <_accel+0x220>
					wRMWdata & ~VREG_SHC_ACC_EN))) // Disable the accelerometer (clear the ACC_EN bit)
				error_handler("VRWr", VREG_SHC, ucRetStat); // error display
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	461a      	mov	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <_accel+0x22c>)
 80010ba:	f7ff fe77 	bl	8000dac <error_handler>
		} else
			error_handler("VRRd", VREG_SHC, ucRetStat);   // error display
}
 80010be:	e005      	b.n	80010cc <_accel+0x220>
			error_handler("VRRd", VREG_SHC, ucRetStat);   // error display
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	461a      	mov	r2, r3
 80010c4:	2100      	movs	r1, #0
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <_accel+0x230>)
 80010c8:	f7ff fe70 	bl	8000dac <error_handler>
}
 80010cc:	bf00      	nop
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	3ff00000 	.word	0x3ff00000
 80010d8:	08008b08 	.word	0x08008b08
 80010dc:	08008b10 	.word	0x08008b10
 80010e0:	20000090 	.word	0x20000090

080010e4 <hid_i2c_descriptor_handler>:
* @note        Retrieve either the descriptor or report tables from the SSC7150 device Note: call GET_HID_DESC 1st
* @param ucCmd_req command to execute (GET_HID_DESC/GET_RPT_DESC)
* @return completion_status 0=SUCCESS, 0x10=ID_FAIL, 0x11=HID_DESC_FAIL, 0x12=RPT_DESC_FAIL, 0x14=REP_PARS_FAIL
*/
UINT16 hid_i2c_descriptor_handler(UINT8 ucCmd_req)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b090      	sub	sp, #64	; 0x40
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
    UINT8 ucRet = FALSE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    UINT8 ucTx_data[BUF_40];                                        // buffer for general writes to i2c slave

    
    switch(ucCmd_req)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d003      	beq.n	8001102 <hid_i2c_descriptor_handler+0x1e>
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	f000 8095 	beq.w	800122a <hid_i2c_descriptor_handler+0x146>
 8001100:	e0ba      	b.n	8001278 <hid_i2c_descriptor_handler+0x194>
    {  
        case GET_HID_DESC:                                          //read the HID Config Descriptor from SSC7150
            ucTx_data[0] = HID_DESC_CMD_LSB;                        // HID descriptor table request is 0x00 01
 8001102:	2301      	movs	r3, #1
 8001104:	733b      	strb	r3, [r7, #12]
            ucTx_data[1] = HID_DESC_CMD_MSB;
 8001106:	2300      	movs	r3, #0
 8001108:	737b      	strb	r3, [r7, #13]

            ucRet = i2c_cmd_WrRd ( WR_RD,                           //read the HID Config Descriptor from SSC7150
 800110a:	f107 020c 	add.w	r2, r7, #12
 800110e:	2300      	movs	r3, #0
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	231e      	movs	r3, #30
 8001118:	2102      	movs	r1, #2
 800111a:	2003      	movs	r0, #3
 800111c:	f7ff fe52 	bl	8000dc4 <i2c_cmd_WrRd>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                DESC_CMD_LEN,                       //num of cmd bytes
                                ucTx_data,                          //cmd buf 
                                HID_CNFG_LEN,                       //num of bytes to read
                                HID_DESC,                           //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly
            if (ucRet)
 8001126:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <hid_i2c_descriptor_handler+0x4e>
                return HID_DESC_FAIL;                               //read HID Config Descriptor failed
 800112e:	2311      	movs	r3, #17
 8001130:	e0a3      	b.n	800127a <hid_i2c_descriptor_handler+0x196>
            
            HID_FIELD.wHIDDescLen = ( (HID_DESC[1] << BYTE_SHIFT) | HID_DESC[0] );  // As an error check, parse out descriptor table length
 8001132:	4b54      	ldr	r3, [pc, #336]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	4a52      	ldr	r2, [pc, #328]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 800113a:	7812      	ldrb	r2, [r2, #0]
 800113c:	4313      	orrs	r3, r2
 800113e:	461a      	mov	r2, r3
 8001140:	4b51      	ldr	r3, [pc, #324]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 8001142:	601a      	str	r2, [r3, #0]
                
            if (HID_FIELD.wHIDDescLen != HID_CNFG_LEN)              // If descriptor table length != 30 there is a problem with the transmission
 8001144:	4b50      	ldr	r3, [pc, #320]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b1e      	cmp	r3, #30
 800114a:	d001      	beq.n	8001150 <hid_i2c_descriptor_handler+0x6c>
                return HID_DESC_FAIL;
 800114c:	2311      	movs	r3, #17
 800114e:	e094      	b.n	800127a <hid_i2c_descriptor_handler+0x196>
                
            HID_FIELD.wRepDescLen = ( (HID_DESC[5] << BYTE_SHIFT) | HID_DESC[4] );  // Parse out report descriptor length and store in appropriate variable
 8001150:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 8001152:	795b      	ldrb	r3, [r3, #5]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	4a4b      	ldr	r2, [pc, #300]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 8001158:	7912      	ldrb	r2, [r2, #4]
 800115a:	4313      	orrs	r3, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 8001160:	605a      	str	r2, [r3, #4]
                
            if ( !HID_FIELD.wRepDescLen || HID_FIELD.wRepDescLen == 0xFFFF || (HID_FIELD.wRepDescLen > HID_RPT_LEN) ) // Check to see if the report descriptor size is valid
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00b      	beq.n	8001182 <hid_i2c_descriptor_handler+0x9e>
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001172:	4293      	cmp	r3, r2
 8001174:	d005      	beq.n	8001182 <hid_i2c_descriptor_handler+0x9e>
 8001176:	4b44      	ldr	r3, [pc, #272]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800117e:	4293      	cmp	r3, r2
 8001180:	d901      	bls.n	8001186 <hid_i2c_descriptor_handler+0xa2>
                return HID_DESC_FAIL;
 8001182:	2311      	movs	r3, #17
 8001184:	e079      	b.n	800127a <hid_i2c_descriptor_handler+0x196>
                
            HID_FIELD.wRepDescReg = ( (HID_DESC[6] << BYTE_SHIFT) | HID_DESC[7] ); // Parse out report descriptor register and store in appropriate variable
 8001186:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 8001188:	799b      	ldrb	r3, [r3, #6]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	4a3d      	ldr	r2, [pc, #244]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 800118e:	79d2      	ldrb	r2, [r2, #7]
 8001190:	4313      	orrs	r3, r2
 8001192:	461a      	mov	r2, r3
 8001194:	4b3c      	ldr	r3, [pc, #240]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 8001196:	609a      	str	r2, [r3, #8]

            HID_FIELD.wCmdReg = ( (HID_DESC[17] << BYTE_SHIFT) | HID_DESC[16] ); // Parse out command register and store in appropriate variable
 8001198:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 800119a:	7c5b      	ldrb	r3, [r3, #17]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	4a39      	ldr	r2, [pc, #228]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 80011a0:	7c12      	ldrb	r2, [r2, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 80011a8:	611a      	str	r2, [r3, #16]

            HID_FIELD.wDatReg = ( (HID_DESC[19] << BYTE_SHIFT) | HID_DESC[18] ); // Parse out data register and store in appropriate variable
 80011aa:	4b36      	ldr	r3, [pc, #216]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 80011ac:	7cdb      	ldrb	r3, [r3, #19]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	4a34      	ldr	r2, [pc, #208]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 80011b2:	7c92      	ldrb	r2, [r2, #18]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b33      	ldr	r3, [pc, #204]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 80011ba:	615a      	str	r2, [r3, #20]

            if ( !( HID_FIELD.wVenID = ( (HID_DESC[21] << BYTE_SHIFT) | HID_DESC[20] )) ) // Parse out vendor ID and store in appropriate variable
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 80011be:	7d5b      	ldrb	r3, [r3, #21]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	4a30      	ldr	r2, [pc, #192]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 80011c4:	7d12      	ldrb	r2, [r2, #20]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <hid_i2c_descriptor_handler+0xf6>
                return ID_FAIL;
 80011d6:	2310      	movs	r3, #16
 80011d8:	e04f      	b.n	800127a <hid_i2c_descriptor_handler+0x196>

            if ( !( HID_FIELD.wProdID = ( (HID_DESC[23] << BYTE_SHIFT) | HID_DESC[22] )) ) // Parse out product ID and store in appropriate variable
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 80011dc:	7ddb      	ldrb	r3, [r3, #23]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	4a28      	ldr	r2, [pc, #160]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 80011e2:	7d92      	ldrb	r2, [r2, #22]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 80011ea:	61da      	str	r2, [r3, #28]
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <hid_i2c_descriptor_handler+0x114>
                return ID_FAIL;
 80011f4:	2310      	movs	r3, #16
 80011f6:	e040      	b.n	800127a <hid_i2c_descriptor_handler+0x196>
                
            HID_FIELD.wVerID = ( (HID_DESC[25] << BYTE_SHIFT) | HID_DESC[24] ); // Parse out version ID and store in appropriate variable
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 80011fa:	7e5b      	ldrb	r3, [r3, #25]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	4a21      	ldr	r2, [pc, #132]	; (8001284 <hid_i2c_descriptor_handler+0x1a0>)
 8001200:	7e12      	ldrb	r2, [r2, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 8001208:	621a      	str	r2, [r3, #32]
             
            _VREGS.IDs.PID = HID_FIELD.wProdID;                      // Update virtual register fields
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a1f      	ldr	r2, [pc, #124]	; (800128c <hid_i2c_descriptor_handler+0x1a8>)
 8001210:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
            _VREGS.IDs.VID = HID_FIELD.wVenID;
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a1c      	ldr	r2, [pc, #112]	; (800128c <hid_i2c_descriptor_handler+0x1a8>)
 800121a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
            _VREGS.IDs.DID = HID_FIELD.wVerID;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a1a      	ldr	r2, [pc, #104]	; (800128c <hid_i2c_descriptor_handler+0x1a8>)
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

            break;
 8001228:	e026      	b.n	8001278 <hid_i2c_descriptor_handler+0x194>

        case GET_RPT_DESC:                                          //read HID Report Descriptor table from SSC7150
            
            ucTx_data[0] = (HID_FIELD.wRepDescReg >> BYTE_SHIFT);   // Report table request is 0x02 00
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	b2db      	uxtb	r3, r3
 8001232:	733b      	strb	r3, [r7, #12]
            ucTx_data[1] = HID_FIELD.wRepDescReg;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	737b      	strb	r3, [r7, #13]

            ucRet = i2c_cmd_WrRd (WR_RD,                            //read the HID Report Descriptor from SSC7150
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <hid_i2c_descriptor_handler+0x1a4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	2100      	movs	r1, #0
 8001246:	9101      	str	r1, [sp, #4]
 8001248:	4911      	ldr	r1, [pc, #68]	; (8001290 <hid_i2c_descriptor_handler+0x1ac>)
 800124a:	9100      	str	r1, [sp, #0]
 800124c:	2102      	movs	r1, #2
 800124e:	2003      	movs	r0, #3
 8001250:	f7ff fdb8 	bl	8000dc4 <i2c_cmd_WrRd>
 8001254:	4603      	mov	r3, r0
 8001256:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                DESC_CMD_LEN,                       //num of cmd bytes
                                ucTx_data,                          //cmd buf
                                HID_FIELD.wRepDescLen,              //num of bytes to read
                                RPT_DESC,                           //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly
            if (ucRet)
 800125a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <hid_i2c_descriptor_handler+0x182>
                return RPT_DESC_FAIL;                               // Attempt to acquire the report descriptor table from the HID device
 8001262:	2312      	movs	r3, #18
 8001264:	e009      	b.n	800127a <hid_i2c_descriptor_handler+0x196>
            
            if (report_parse(RPT_DESC))                             // Parse the descriptor for sensor information
 8001266:	480a      	ldr	r0, [pc, #40]	; (8001290 <hid_i2c_descriptor_handler+0x1ac>)
 8001268:	f000 f9f6 	bl	8001658 <report_parse>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <hid_i2c_descriptor_handler+0x192>
                return REP_PARS_FAIL;  
 8001272:	2314      	movs	r3, #20
 8001274:	e001      	b.n	800127a <hid_i2c_descriptor_handler+0x196>
            
            break;
 8001276:	bf00      	nop
    }

    return SUCCESS;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3738      	adds	r7, #56	; 0x38
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000017c 	.word	0x2000017c
 8001288:	20000158 	.word	0x20000158
 800128c:	20000f4c 	.word	0x20000f4c
 8001290:	2000019c 	.word	0x2000019c

08001294 <hid_i2c_cmd_process>:
* @param ucCmd_req command 
* @param ucReport_id sensor id 
* @return completion_status 0=SUCCESS, failcode: 0x16=GET_FEAT_FAIL, 0x17=SET_FEAT_FAIL, 0x18=RESET_FAIL, 0x19=SET_RPT_FAIL, 0x1A=POWER_ON_FAIL, 0x1B=SLEEP_CMD_FAIL, 0x1C=HID_GET_RPT_INPT_FAIL, 0x1D=HID_GET_RPT_FEAT_FAIL 
*/
UINT8 hid_i2c_cmd_process(UINT8 *ucCmdDatbuf, UINT8 ucCmd_req, UINT8 ucReport_id)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b092      	sub	sp, #72	; 0x48
 8001298:	af02      	add	r7, sp, #8
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
 80012a0:	4613      	mov	r3, r2
 80012a2:	70bb      	strb	r3, [r7, #2]
    UINT8 ucRetStat;
    UINT8 ucTx_data[BUF_40];                   
    UINT8 ucSensPtr, ucTmpPtr;
    UINT8 ucCmdBufMaxSize = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    UINT16 *usVREGSptr = (UINT16 *)&_VREGS;                          // Pointer to individual virtual registers; initialized to start of _VREGS struct
 80012aa:	4b7b      	ldr	r3, [pc, #492]	; (8001498 <hid_i2c_cmd_process+0x204>)
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38

    
    switch(ucCmd_req)
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	f200 81ba 	bhi.w	800162c <hid_i2c_cmd_process+0x398>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <hid_i2c_cmd_process+0x2c>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012dd 	.word	0x080012dd
 80012c4:	080013b9 	.word	0x080013b9
 80012c8:	080013fd 	.word	0x080013fd
 80012cc:	08001441 	.word	0x08001441
 80012d0:	0800145d 	.word	0x0800145d
 80012d4:	0800162d 	.word	0x0800162d
 80012d8:	080015f9 	.word	0x080015f9
    {
        
        case RESET_DEV_CMD:                                         //HID Reset command                      
            ucTx_data[0] = HID_FIELD.wCmdReg;                       //command field bytes from HID config table                    
 80012dc:	4b6f      	ldr	r3, [pc, #444]	; (800149c <hid_i2c_cmd_process+0x208>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	733b      	strb	r3, [r7, #12]
            ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);       
 80012e4:	4b6d      	ldr	r3, [pc, #436]	; (800149c <hid_i2c_cmd_process+0x208>)
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	737b      	strb	r3, [r7, #13]
            ucTx_data[2] = RESET_CMD_LSB;                           //HID Reset command opcode low byte              
 80012ee:	2300      	movs	r3, #0
 80012f0:	73bb      	strb	r3, [r7, #14]
            ucTx_data[3] = RESET_CMD_MSB;                           //HID Reset command opcode high byte
 80012f2:	2301      	movs	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]

            // send the reset command to SSC7150
            ucRetStat = i2c_cmd_WrRd (WRITE,                        //WRITE command packet to SSC7150 
 80012f6:	f107 020c 	add.w	r2, r7, #12
 80012fa:	2300      	movs	r3, #0
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2300      	movs	r3, #0
 8001304:	2104      	movs	r1, #4
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff fd5c 	bl	8000dc4 <i2c_cmd_WrRd>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                                ucTx_data,                          //cmd buf 
                                0,                                  //num of bytes to read             
                                ucCmdDatbuf,                        //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly
            
            if (ucRetStat != SUCCESS)
 8001312:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <hid_i2c_cmd_process+0x8a>
                return RESET_FAIL;
 800131a:	2318      	movs	r3, #24
 800131c:	e190      	b.n	8001640 <hid_i2c_cmd_process+0x3ac>


            usTimeout = FALSE;
 800131e:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <hid_i2c_cmd_process+0x20c>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Stop_IT(&htim7);
 8001324:	485f      	ldr	r0, [pc, #380]	; (80014a4 <hid_i2c_cmd_process+0x210>)
 8001326:	f005 fa59 	bl	80067dc <HAL_TIM_Base_Stop_IT>
            __HAL_TIM_SET_COUNTER(&htim7, 0);
 800132a:	4b5e      	ldr	r3, [pc, #376]	; (80014a4 <hid_i2c_cmd_process+0x210>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(&htim7);
 8001332:	485c      	ldr	r0, [pc, #368]	; (80014a4 <hid_i2c_cmd_process+0x210>)
 8001334:	f005 f9fe 	bl	8006734 <HAL_TIM_Base_Start_IT>

            while (!usTimeout)                                       // wait up to API spec timeout to respond with EC_DATA avail interrupt
 8001338:	e004      	b.n	8001344 <hid_i2c_cmd_process+0xb0>
            {    
                if (EC_DATA_AVAIL)                                  // EC interrupt asserted (data is available)
 800133a:	4b5b      	ldr	r3, [pc, #364]	; (80014a8 <hid_i2c_cmd_process+0x214>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d105      	bne.n	8001350 <hid_i2c_cmd_process+0xbc>
            while (!usTimeout)                                       // wait up to API spec timeout to respond with EC_DATA avail interrupt
 8001344:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <hid_i2c_cmd_process+0x20c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f5      	beq.n	800133a <hid_i2c_cmd_process+0xa6>
 800134e:	e000      	b.n	8001352 <hid_i2c_cmd_process+0xbe>
                    break; 
 8001350:	bf00      	nop
            }

            /* Stop The Timer */
            HAL_TIM_Base_Stop_IT(&htim7);
 8001352:	4854      	ldr	r0, [pc, #336]	; (80014a4 <hid_i2c_cmd_process+0x210>)
 8001354:	f005 fa42 	bl	80067dc <HAL_TIM_Base_Stop_IT>
            __HAL_TIM_SET_COUNTER(&htim7, 0);
 8001358:	4b52      	ldr	r3, [pc, #328]	; (80014a4 <hid_i2c_cmd_process+0x210>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	; 0x24


            if (usTimeout)
 8001360:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <hid_i2c_cmd_process+0x20c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <hid_i2c_cmd_process+0xda>
                return RESET_FAIL;                                  // timeout occured without device responding with interrupt
 800136a:	2318      	movs	r3, #24
 800136c:	e168      	b.n	8001640 <hid_i2c_cmd_process+0x3ac>
                
            ucRetStat = i2c_cmd_WrRd (READ,                         // EC_DATA_AVAIL flag was set indicating SSC7150 has data available to be read in response to the RESET CMD
 800136e:	f107 020c 	add.w	r2, r7, #12
 8001372:	2300      	movs	r3, #0
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2302      	movs	r3, #2
 800137c:	2100      	movs	r1, #0
 800137e:	2002      	movs	r0, #2
 8001380:	f7ff fd20 	bl	8000dc4 <i2c_cmd_WrRd>
 8001384:	4603      	mov	r3, r0
 8001386:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                                    ucTx_data,                      //cmd buf
                                    2,                              //num of bytes to read
                                    ucCmdDatbuf,                    //recv buf 
                                    FALSE);                         //flag indicating that we specified the number of bytes to read explicitly
                
            if (ucRetStat != SUCCESS)
 800138a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <hid_i2c_cmd_process+0x102>
                return RESET_FAIL; 
 8001392:	2318      	movs	r3, #24
 8001394:	e154      	b.n	8001640 <hid_i2c_cmd_process+0x3ac>
            
            if (ucCmdDatbuf[0] != 0 && ucCmdDatbuf[1] != 0)         // expect 1st two bytes of data packet from SSC7150 in response to RESET command to be "00 00"
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <hid_i2c_cmd_process+0x118>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3301      	adds	r3, #1
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <hid_i2c_cmd_process+0x118>
                return RESET_FAIL;                                  // invalid data found
 80013a8:	2318      	movs	r3, #24
 80013aa:	e149      	b.n	8001640 <hid_i2c_cmd_process+0x3ac>
 
            _VREGS.SHC.reset = VREG_RESET_SUCCESS;                   // Clear the reset VREG to indicate successful 
 80013ac:	4a3a      	ldr	r2, [pc, #232]	; (8001498 <hid_i2c_cmd_process+0x204>)
 80013ae:	7813      	ldrb	r3, [r2, #0]
 80013b0:	f36f 03c3 	bfc	r3, #3, #1
 80013b4:	7013      	strb	r3, [r2, #0]
                   
            break;
 80013b6:	e142      	b.n	800163e <hid_i2c_cmd_process+0x3aa>


        case POWER_ON:      
            ucTx_data[0] = HID_FIELD.wCmdReg;                       //command field bytes from HID config table 
 80013b8:	4b38      	ldr	r3, [pc, #224]	; (800149c <hid_i2c_cmd_process+0x208>)
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	733b      	strb	r3, [r7, #12]
            ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);                              
 80013c0:	4b36      	ldr	r3, [pc, #216]	; (800149c <hid_i2c_cmd_process+0x208>)
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	737b      	strb	r3, [r7, #13]
            ucTx_data[2] = POWER_CMD_LSB;                           //HID Power command opcode low  byte for POWER Device ON
 80013ca:	2300      	movs	r3, #0
 80013cc:	73bb      	strb	r3, [r7, #14]
            ucTx_data[3] = POWER_CMD_MSB;                           //HID Power command opcode high byte
 80013ce:	2308      	movs	r3, #8
 80013d0:	73fb      	strb	r3, [r7, #15]

            ucRetStat = i2c_cmd_WrRd (WRITE,                        // Issue power on command to SSC7150
 80013d2:	f107 020c 	add.w	r2, r7, #12
 80013d6:	2300      	movs	r3, #0
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2300      	movs	r3, #0
 80013e0:	2104      	movs	r1, #4
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff fcee 	bl	8000dc4 <i2c_cmd_WrRd>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                                ucTx_data,                          //cmd buf
                                0,                                  //num of bytes to read
                                ucCmdDatbuf,                        //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly

            if (ucRetStat != SUCCESS)
 80013ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 811c 	beq.w	8001630 <hid_i2c_cmd_process+0x39c>
                return POWER_ON_FAIL;                               // command failed
 80013f8:	231a      	movs	r3, #26
 80013fa:	e121      	b.n	8001640 <hid_i2c_cmd_process+0x3ac>
            break;


        case SLEEP:         

            ucTx_data[0] = HID_FIELD.wCmdReg;                       //command field bytes from HID config table
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <hid_i2c_cmd_process+0x208>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	733b      	strb	r3, [r7, #12]
            ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);            
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <hid_i2c_cmd_process+0x208>)
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	b2db      	uxtb	r3, r3
 800140c:	737b      	strb	r3, [r7, #13]
            ucTx_data[2] = SLEEP_ON_LSB;                            //HID Power command opcode low byte for Device SLEEP
 800140e:	2301      	movs	r3, #1
 8001410:	73bb      	strb	r3, [r7, #14]
            ucTx_data[3] = POWER_CMD_MSB;                           //HID Power command opcode high byte
 8001412:	2308      	movs	r3, #8
 8001414:	73fb      	strb	r3, [r7, #15]

            ucRetStat = i2c_cmd_WrRd (WRITE,                        // Issue sleep command to SSC7150
 8001416:	f107 020c 	add.w	r2, r7, #12
 800141a:	2300      	movs	r3, #0
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2300      	movs	r3, #0
 8001424:	2104      	movs	r1, #4
 8001426:	2001      	movs	r0, #1
 8001428:	f7ff fccc 	bl	8000dc4 <i2c_cmd_WrRd>
 800142c:	4603      	mov	r3, r0
 800142e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                                ucTx_data,                          //cmd buf 
                                0,                                  //num of bytes to read
                                ucCmdDatbuf,                        //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly

            if (ucRetStat != SUCCESS)
 8001432:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 80fc 	beq.w	8001634 <hid_i2c_cmd_process+0x3a0>
                return SLEEP_CMD_FAIL;                              // command failed         
 800143c:	231b      	movs	r3, #27
 800143e:	e0ff      	b.n	8001640 <hid_i2c_cmd_process+0x3ac>
            
            break;

        case HID_GET_RPT_INPT:
                        
            ucCmdDatbuf[0] = ucReport_id;                           //the HOST_SF_LIB_HID_Get_Report expects the sensor id in byte[0] of passed buffer
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	78ba      	ldrb	r2, [r7, #2]
 8001444:	701a      	strb	r2, [r3, #0]
                        
            if ( HOST_SF_LIB_HID_Get_Report(GET_RRT_INPT, ucCmdDatbuf, 0) )
 8001446:	2200      	movs	r2, #0
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	2010      	movs	r0, #16
 800144c:	f000 fca6 	bl	8001d9c <HOST_SF_LIB_HID_Get_Report>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80f0 	beq.w	8001638 <hid_i2c_cmd_process+0x3a4>
                return HID_GET_RPT_FEAT_FAIL;                       // command failed
 8001458:	231d      	movs	r3, #29
 800145a:	e0f1      	b.n	8001640 <hid_i2c_cmd_process+0x3ac>
            break;


        case HID_GET_RPT_FEAT:

            ucCmdDatbuf[0] = ucReport_id;                           //the HOST_SF_LIB_HID_Get_Report expects the sensor id in byte[0] of passed buffer
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	78ba      	ldrb	r2, [r7, #2]
 8001460:	701a      	strb	r2, [r3, #0]
                        
            if ( HOST_SF_LIB_HID_Get_Report(GET_RPT_FEAT, ucCmdDatbuf, 0) )
 8001462:	2200      	movs	r2, #0
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	2030      	movs	r0, #48	; 0x30
 8001468:	f000 fc98 	bl	8001d9c <HOST_SF_LIB_HID_Get_Report>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <hid_i2c_cmd_process+0x1e2>
                return HID_GET_RPT_FEAT_FAIL;                       // command failed
 8001472:	231d      	movs	r3, #29
 8001474:	e0e4      	b.n	8001640 <hid_i2c_cmd_process+0x3ac>

            if ((ucCmdDatbuf[2] == 0) || (ucCmdDatbuf[2] > NUM_SENS) ) // check for valid ID range in feature report
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3302      	adds	r3, #2
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <hid_i2c_cmd_process+0x1f6>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3302      	adds	r3, #2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b0c      	cmp	r3, #12
 8001488:	d901      	bls.n	800148e <hid_i2c_cmd_process+0x1fa>
                return HID_GET_RPT_FEAT_FAIL;                       // invalid reportID
 800148a:	231d      	movs	r3, #29
 800148c:	e0d8      	b.n	8001640 <hid_i2c_cmd_process+0x3ac>
                       
            //now parse the parameters in returned report feature based on offsets derived earlier from parsing the HID Report Descriptor
            for (ucSensPtr = 0; ucSensPtr < NUM_SENS; ucSensPtr++)  // traverse through the sensor list looking for matching sesnor id
 800148e:	2300      	movs	r3, #0
 8001490:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001494:	e0a8      	b.n	80015e8 <hid_i2c_cmd_process+0x354>
 8001496:	bf00      	nop
 8001498:	20000f4c 	.word	0x20000f4c
 800149c:	20000158 	.word	0x20000158
 80014a0:	2000008d 	.word	0x2000008d
 80014a4:	200010c4 	.word	0x200010c4
 80014a8:	2000008c 	.word	0x2000008c
            {          
                if (SENSOR[ucSensPtr].id == ucReport_id)
 80014ac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80014b0:	4965      	ldr	r1, [pc, #404]	; (8001648 <hid_i2c_cmd_process+0x3b4>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	78ba      	ldrb	r2, [r7, #2]
 80014be:	429a      	cmp	r2, r3
 80014c0:	f040 808d 	bne.w	80015de <hid_i2c_cmd_process+0x34a>
                {        
                    usVREGSptr = &_VREGS.sensitivity.ACSEN + ucSensPtr; // Set pointer to appropriate sensitivity register (as offset from accelerometer sensitivity VREG02)
 80014c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4a60      	ldr	r2, [pc, #384]	; (800164c <hid_i2c_cmd_process+0x3b8>)
 80014cc:	4413      	add	r3, r2
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
                    
                    //retrieve offset pointer to sensitivty parameters for this sensor device (from the Report Descriptor table). Add offset to initial pointer for the actual desired "ACSEN" data within the feature report packet and store this value in VREG register 
                    *usVREGSptr = ( (ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset + GF_SENS_OFFSET_MSB] << BYTE_SHIFT) | ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset + GF_SENS_OFFSET_LSB]); // Use info about offsets to set _VREGS to appropriate data
 80014d0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80014d4:	495c      	ldr	r1, [pc, #368]	; (8001648 <hid_i2c_cmd_process+0x3b4>)
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	440b      	add	r3, r1
 80014de:	3303      	adds	r3, #3
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	3307      	adds	r3, #7
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	0219      	lsls	r1, r3, #8
 80014ec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80014f0:	4855      	ldr	r0, [pc, #340]	; (8001648 <hid_i2c_cmd_process+0x3b4>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	4403      	add	r3, r0
 80014fa:	3303      	adds	r3, #3
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	3306      	adds	r3, #6
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	430b      	orrs	r3, r1
 8001508:	461a      	mov	r2, r3
 800150a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150c:	601a      	str	r2, [r3, #0]
                    
                    usVREGSptr = &_VREGS.data_rt.ACDXR + ucSensPtr;  // Set pointer to appropriate data rate register
 800150e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4a4e      	ldr	r2, [pc, #312]	; (8001650 <hid_i2c_cmd_process+0x3bc>)
 8001516:	4413      	add	r3, r2
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
                    
                    *usVREGSptr = ((ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset + GF_DATR_OFFSET_MSB] << BYTE_SHIFT) | ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset + GF_DATR_OFFSET_LSB]); //point to appropriate data fields within the feature report and store in VREG reg
 800151a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800151e:	494a      	ldr	r1, [pc, #296]	; (8001648 <hid_i2c_cmd_process+0x3b4>)
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	440b      	add	r3, r1
 8001528:	3302      	adds	r3, #2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3304      	adds	r3, #4
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	0219      	lsls	r1, r3, #8
 8001536:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800153a:	4843      	ldr	r0, [pc, #268]	; (8001648 <hid_i2c_cmd_process+0x3b4>)
 800153c:	4613      	mov	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	4403      	add	r3, r0
 8001544:	3302      	adds	r3, #2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	3303      	adds	r3, #3
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	430b      	orrs	r3, r1
 8001552:	461a      	mov	r2, r3
 8001554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001556:	601a      	str	r2, [r3, #0]

                    usVREGSptr = (UINT16 *)&(_VREGS.expo.exp1);      //point to appropriate data fields within the feature report and store in VREG reg  NOTE: each exponent VREG holds 4 devices' 4bit exponent value fields
 8001558:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <hid_i2c_cmd_process+0x3c0>)
 800155a:	63bb      	str	r3, [r7, #56]	; 0x38
                    if (ucSensPtr > 3)                              // sensor indexes from 4 to 7 = sensors that have unit exponents in the 2nd exponent register (VREG37)
 800155c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001560:	2b03      	cmp	r3, #3
 8001562:	d902      	bls.n	800156a <hid_i2c_cmd_process+0x2d6>
                        usVREGSptr++;                               // Increment ptr to VREG exponent register to be searched
 8001564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001566:	3304      	adds	r3, #4
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (ucSensPtr > 7)                              // sensor indexes > 7 = sensors that have unit exponents in the 3rd exponent register (VREG38)
 800156a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800156e:	2b07      	cmp	r3, #7
 8001570:	d902      	bls.n	8001578 <hid_i2c_cmd_process+0x2e4>
                        usVREGSptr++;                               // Increment ptr to VREG exponent register to be searched
 8001572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001574:	3304      	adds	r3, #4
 8001576:	63bb      	str	r3, [r7, #56]	; 0x38

                    ucTmpPtr= ucSensPtr % 4;                        // Find the appropriate offset for this sensor's unit exponent
 8001578:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                    *usVREGSptr &= ~(0xF << (4*ucTmpPtr));          // Clear unit exponent data   
 8001584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	210f      	movs	r1, #15
 8001590:	fa01 f202 	lsl.w	r2, r1, r2
 8001594:	43d2      	mvns	r2, r2
 8001596:	401a      	ands	r2, r3
 8001598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800159a:	601a      	str	r2, [r3, #0]

                    if (SENSOR[ucSensPtr].DatExp)
 800159c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80015a0:	4929      	ldr	r1, [pc, #164]	; (8001648 <hid_i2c_cmd_process+0x3b4>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	3306      	adds	r3, #6
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d020      	beq.n	80015f4 <hid_i2c_cmd_process+0x360>
                    {
                       *usVREGSptr |= (SENSOR[ucSensPtr].DatExp << (4*ucTmpPtr));  // Set the unit exponent data to the appropriate VREG  
 80015b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80015ba:	4823      	ldr	r0, [pc, #140]	; (8001648 <hid_i2c_cmd_process+0x3b4>)
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	4403      	add	r3, r0
 80015c4:	3306      	adds	r3, #6
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	ea41 0203 	orr.w	r2, r1, r3
 80015d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015da:	601a      	str	r2, [r3, #0]
                    }

                    break;              
 80015dc:	e00a      	b.n	80015f4 <hid_i2c_cmd_process+0x360>
            for (ucSensPtr = 0; ucSensPtr < NUM_SENS; ucSensPtr++)  // traverse through the sensor list looking for matching sesnor id
 80015de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015e2:	3301      	adds	r3, #1
 80015e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80015e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015ec:	2b0b      	cmp	r3, #11
 80015ee:	f67f af5d 	bls.w	80014ac <hid_i2c_cmd_process+0x218>
                }   
            }                        

            break;
 80015f2:	e024      	b.n	800163e <hid_i2c_cmd_process+0x3aa>
                    break;              
 80015f4:	bf00      	nop
            break;
 80015f6:	e022      	b.n	800163e <hid_i2c_cmd_process+0x3aa>
     
        case HID_SET_RPT_FEAT:
            //for non-Vendor commands, the sensor id is NOT passed in byte[0] to 'HOST_SF_LIB_HID_Set_Report'
            ucCmdBufMaxSize = ucCmdDatbuf[RPT_SIZE_LSB];            //get size of GetReportFeature Packet
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            
            if ((ucCmdBufMaxSize == 0) || (ucCmdBufMaxSize == 0xFF)) //is the size reasonable?
 8001600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <hid_i2c_cmd_process+0x37c>
 8001608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800160c:	2bff      	cmp	r3, #255	; 0xff
 800160e:	d101      	bne.n	8001614 <hid_i2c_cmd_process+0x380>
                return SET_FEAT_FAIL;
 8001610:	2317      	movs	r3, #23
 8001612:	e015      	b.n	8001640 <hid_i2c_cmd_process+0x3ac>
                                        
            if ( HOST_SF_LIB_HID_Set_Report(SET_RPT_FEAT, ucCmdDatbuf, ucCmdBufMaxSize) )
 8001614:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001618:	461a      	mov	r2, r3
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	2030      	movs	r0, #48	; 0x30
 800161e:	f000 fb3d 	bl	8001c9c <HOST_SF_LIB_HID_Set_Report>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d009      	beq.n	800163c <hid_i2c_cmd_process+0x3a8>
                return SET_FEAT_FAIL;                               // command failed
 8001628:	2317      	movs	r3, #23
 800162a:	e009      	b.n	8001640 <hid_i2c_cmd_process+0x3ac>

            break;

        default:
            break;
 800162c:	bf00      	nop
 800162e:	e006      	b.n	800163e <hid_i2c_cmd_process+0x3aa>
            break;
 8001630:	bf00      	nop
 8001632:	e004      	b.n	800163e <hid_i2c_cmd_process+0x3aa>
            break;
 8001634:	bf00      	nop
 8001636:	e002      	b.n	800163e <hid_i2c_cmd_process+0x3aa>
            break;
 8001638:	bf00      	nop
 800163a:	e000      	b.n	800163e <hid_i2c_cmd_process+0x3aa>
            break;
 800163c:	bf00      	nop
    }

    return SUCCESS;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3740      	adds	r7, #64	; 0x40
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000b0 	.word	0x200000b0
 800164c:	20000f54 	.word	0x20000f54
 8001650:	20000f7c 	.word	0x20000f7c
 8001654:	20001030 	.word	0x20001030

08001658 <report_parse>:
* @note        Parse data retrieved from SSC7150 HID Report Descriptor, calls and populate required local structs
* @param *ucBuf Buffer holding the report descriptor table
* @return completion_status 0=SUCCESS, failcodes: 0x14=REP_PARS_FAIL, 0x15=NO_EOC_FAIL 
*/
UINT8 report_parse(UINT8 *ucBuf)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
    UINT8 *ucBptr = ucBuf;                                          // HID Descriptor byte pointer
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	617b      	str	r3, [r7, #20]
    UINT8 *ucStrt = ucBptr;                                         // Pointer to hold start address for later reference
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	60fb      	str	r3, [r7, #12]
    UINT8 ucSensptr = 0;                                            // sensor number variable for struct array traverse
 8001668:	2300      	movs	r3, #0
 800166a:	74fb      	strb	r3, [r7, #19]
    UINT8 ucUsageOffset;                                            // offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data
    BOOL bFlag = FALSE;                                             // Flag variable to notify that desired fields have been reached
 800166c:	2300      	movs	r3, #0
 800166e:	747b      	strb	r3, [r7, #17]

   

    memset(TEMP_SF, 0xFF, sizeof(TEMP_SF));                         // Set all of the structs in the TEMP array to 0xFF so we can know if a sensor wasn't found in the report
 8001670:	2254      	movs	r2, #84	; 0x54
 8001672:	21ff      	movs	r1, #255	; 0xff
 8001674:	489a      	ldr	r0, [pc, #616]	; (80018e0 <report_parse+0x288>)
 8001676:	f006 fb11 	bl	8007c9c <memset>
    
    while( (ucBptr - ucStrt) <= HID_FIELD.wRepDescLen )             // Continue looping until end of report
 800167a:	e196      	b.n	80019aa <report_parse+0x352>
    {
        if ( *ucBptr == HID_COLLECTION )                            // Look for HID_COLLECTION(Physical) which should be start of REPORT ID (sensor device) info in report descriptor table  
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2ba1      	cmp	r3, #161	; 0xa1
 8001682:	d12e      	bne.n	80016e2 <report_parse+0x8a>
        {
            ucBptr++;                                               // Increment the pointer to look at the next byte
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
            
            if ( *(ucBptr++) == HID_PHYSICAL && *(ucBptr++) == HID_REPORT_ID ) // Check if the next two bytes meet the next required identifier needs   
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	617a      	str	r2, [r7, #20]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d125      	bne.n	80016e2 <report_parse+0x8a>
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	617a      	str	r2, [r7, #20]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b85      	cmp	r3, #133	; 0x85
 80016a0:	d11f      	bne.n	80016e2 <report_parse+0x8a>
            {
                ucUsageOffset = 0;                                  // clear offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data                                    
 80016a2:	2300      	movs	r3, #0
 80016a4:	74bb      	strb	r3, [r7, #18]
                TEMP_SF[ucSensptr].id = *ucBptr;                    // Store first sensor device ID number in out temp struct
 80016a6:	7cfa      	ldrb	r2, [r7, #19]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	7818      	ldrb	r0, [r3, #0]
 80016ac:	498c      	ldr	r1, [pc, #560]	; (80018e0 <report_parse+0x288>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	1a9b      	subs	r3, r3, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	4602      	mov	r2, r0
 80016b8:	701a      	strb	r2, [r3, #0]
                
                while(*(ucBptr++) != HID_USAGE_SENSOR_TYPE);        // Parse until sensor type indicator found  (in HID table: HID_USAGE_SENSOR_TYPE_MOTION_ACCELEROMETER_3D)
 80016ba:	bf00      	nop
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	617a      	str	r2, [r7, #20]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	d1f9      	bne.n	80016bc <report_parse+0x64>
                
                TEMP_SF[ucSensptr].type = *ucBptr;                  // Store sensor type in struct      
 80016c8:	7cfa      	ldrb	r2, [r7, #19]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	7818      	ldrb	r0, [r3, #0]
 80016ce:	4984      	ldr	r1, [pc, #528]	; (80018e0 <report_parse+0x288>)
 80016d0:	4613      	mov	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	3301      	adds	r3, #1
 80016da:	4602      	mov	r2, r0
 80016dc:	701a      	strb	r2, [r3, #0]
                bFlag = TRUE;                                       // Set the flag to show we are in a field of data that we desire
 80016de:	2301      	movs	r3, #1
 80016e0:	747b      	strb	r3, [r7, #17]
            }
        }
        
        if ( *ucBptr == HID_END_COLLECTION )                        // Look for end of this sensor's collection 
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2bc0      	cmp	r3, #192	; 0xc0
 80016e8:	d12f      	bne.n	800174a <report_parse+0xf2>
        {
            ucBptr++;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
            
            if( *ucBptr == HID_END_COLLECTION ) 
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2bc0      	cmp	r3, #192	; 0xc0
 80016f6:	f000 8162 	beq.w	80019be <report_parse+0x366>
                break;                                              // end of the report has occurred
            
            else if(*(ucBptr++) == HID_REPORT_ID)                   // Next report ID has been found
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	617a      	str	r2, [r7, #20]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b85      	cmp	r3, #133	; 0x85
 8001704:	d121      	bne.n	800174a <report_parse+0xf2>
            {   
                ucUsageOffset = 0;                                  // clear offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data
 8001706:	2300      	movs	r3, #0
 8001708:	74bb      	strb	r3, [r7, #18]
                TEMP_SF[ucSensptr].id = *ucBptr;                    // Store location of sensor ID within the HID Report in struct
 800170a:	7cfa      	ldrb	r2, [r7, #19]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	7818      	ldrb	r0, [r3, #0]
 8001710:	4973      	ldr	r1, [pc, #460]	; (80018e0 <report_parse+0x288>)
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	440b      	add	r3, r1
 800171a:	4602      	mov	r2, r0
 800171c:	701a      	strb	r2, [r3, #0]
                
                while(*(ucBptr++) != HID_USAGE_SENSOR_TYPE);        // Look for sensor type identifier (ie HID_USAGE_SENSOR_TYPE_MOTION_ACCELEROMETER_3D)
 800171e:	bf00      	nop
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	617a      	str	r2, [r7, #20]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b09      	cmp	r3, #9
 800172a:	d1f9      	bne.n	8001720 <report_parse+0xc8>
                
                TEMP_SF[ucSensptr].type = *(ucBptr++);              // Store location of sensor type within the HID Report in struct   
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	617a      	str	r2, [r7, #20]
 8001732:	7cfa      	ldrb	r2, [r7, #19]
 8001734:	7818      	ldrb	r0, [r3, #0]
 8001736:	496a      	ldr	r1, [pc, #424]	; (80018e0 <report_parse+0x288>)
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	440b      	add	r3, r1
 8001740:	3301      	adds	r3, #1
 8001742:	4602      	mov	r2, r0
 8001744:	701a      	strb	r2, [r3, #0]
                bFlag = TRUE;                                       // Set the flag to show we are in a field of data that we desire
 8001746:	2301      	movs	r3, #1
 8001748:	747b      	strb	r3, [r7, #17]
            }
        }

        if (bFlag)                                                  // Check if we should proceed parsing within the HID_USAGE_SENSOR_Properties or simply continue incrementing until a new ID is found
 800174a:	7c7b      	ldrb	r3, [r7, #17]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8129 	beq.w	80019a4 <report_parse+0x34c>
        {
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant features HID_USAGE_SENSOR_Properties
 8001752:	e0b8      	b.n	80018c6 <report_parse+0x26e>
            {
                if (*ucBptr == HID_USAGE_SENSOR_PROPERTY)             
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b0a      	cmp	r3, #10
 800175a:	f040 80b1 	bne.w	80018c0 <report_parse+0x268>
                {
                    ucBptr++;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_CONN_TYPE) // Seach for sensor connection type and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b09      	cmp	r3, #9
 800176a:	d10b      	bne.n	8001784 <report_parse+0x12c>
                    {
                        ucBptr++;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE (0x0A,0x09,0x03) 
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	617a      	str	r2, [r7, #20]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d102      	bne.n	8001784 <report_parse+0x12c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 800177e:	7cbb      	ldrb	r3, [r7, #18]
 8001780:	3301      	adds	r3, #1
 8001782:	74bb      	strb	r3, [r7, #18]
                    }
                    
                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_RPT_STATE)  // Search for reporting state and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b16      	cmp	r3, #22
 800178a:	d10b      	bne.n	80017a4 <report_parse+0x14c>
                    {
                        ucBptr++;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL (0x0A,0x0E,0x03) 
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	617a      	str	r2, [r7, #20]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d102      	bne.n	80017a4 <report_parse+0x14c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 800179e:	7cbb      	ldrb	r3, [r7, #18]
 80017a0:	3301      	adds	r3, #1
 80017a2:	74bb      	strb	r3, [r7, #18]
                    }

                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_PWR_STATE)  // Search for power state and increment offset variable because this field is undesired  (in HID table : HID_USAGE_SENSOR_PROPERTY_POWER_STATE)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b19      	cmp	r3, #25
 80017aa:	d10b      	bne.n	80017c4 <report_parse+0x16c>
                    {
                        ucBptr++;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_POWER_STATE (0x0A,0x19,0x03) 
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	617a      	str	r2, [r7, #20]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d102      	bne.n	80017c4 <report_parse+0x16c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80017be:	7cbb      	ldrb	r3, [r7, #18]
 80017c0:	3301      	adds	r3, #1
 80017c2:	74bb      	strb	r3, [r7, #18]
                     }

                    if (*ucBptr == HID_USAGE_SENSOR_STATE_1)        // Search for sensor state and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_STATE)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d10b      	bne.n	80017e4 <report_parse+0x18c>
                    {
                        ucBptr++;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x02)                    // last parameter of HID_USAGE_SENSOR_STATE (0x0A,0x01,0x02) 
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	617a      	str	r2, [r7, #20]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d102      	bne.n	80017e4 <report_parse+0x18c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80017de:	7cbb      	ldrb	r3, [r7, #18]
 80017e0:	3301      	adds	r3, #1
 80017e2:	74bb      	strb	r3, [r7, #18]
                     }

                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_RPT_INT)  // Search for reporting interval. We desire this value so store it in our struct and then increment the offset  (in HID table:HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b0e      	cmp	r3, #14
 80017ea:	d113      	bne.n	8001814 <report_parse+0x1bc>
                    {
                        ucBptr++;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL (0x0A,0x0E,0x03)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	617a      	str	r2, [r7, #20]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d10a      	bne.n	8001814 <report_parse+0x1bc>
                            TEMP_SF[ucSensptr].DatRtOffset = ucUsageOffset++; //save & increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80017fe:	7cba      	ldrb	r2, [r7, #18]
 8001800:	1c53      	adds	r3, r2, #1
 8001802:	74bb      	strb	r3, [r7, #18]
 8001804:	7cf9      	ldrb	r1, [r7, #19]
 8001806:	4836      	ldr	r0, [pc, #216]	; (80018e0 <report_parse+0x288>)
 8001808:	460b      	mov	r3, r1
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	1a5b      	subs	r3, r3, r1
 800180e:	4403      	add	r3, r0
 8001810:	3302      	adds	r3, #2
 8001812:	701a      	strb	r2, [r3, #0]
                    }

                    ucBptr++;                                       //increment position ptr
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]

                    // NOTE: There is a different identifier for RAW data and that is why two identifiers are checked for here
                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_ACCU) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_ACCU) )  // Search for sensor accuracy & increment offset variable because this field is undesired (in HID table:HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_ACCURACY))
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b44      	cmp	r3, #68	; 0x44
 8001820:	d003      	beq.n	800182a <report_parse+0x1d2>
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b45      	cmp	r3, #69	; 0x45
 8001828:	d102      	bne.n	8001830 <report_parse+0x1d8>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 800182a:	7cbb      	ldrb	r3, [r7, #18]
 800182c:	3301      	adds	r3, #1
 800182e:	74bb      	strb	r3, [r7, #18]

                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_RES) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_RES) )    // Search for sensor resolution and increment offset variable because this field is undesired (in HID table: HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_RESOLUTION))
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b54      	cmp	r3, #84	; 0x54
 8001836:	d003      	beq.n	8001840 <report_parse+0x1e8>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b55      	cmp	r3, #85	; 0x55
 800183e:	d102      	bne.n	8001846 <report_parse+0x1ee>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001840:	7cbb      	ldrb	r3, [r7, #18]
 8001842:	3301      	adds	r3, #1
 8001844:	74bb      	strb	r3, [r7, #18]

                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_MOD_SENS) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_SENS) )  // Search for sensor sensitivity (HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_CHANGE_SENSITIVITY_ABS))
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b14      	cmp	r3, #20
 800184c:	d003      	beq.n	8001856 <report_parse+0x1fe>
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b15      	cmp	r3, #21
 8001854:	d11d      	bne.n	8001892 <report_parse+0x23a>
                    {
                        TEMP_SF[ucSensptr].SensOffset = ucUsageOffset++; //save & increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)                         
 8001856:	7cba      	ldrb	r2, [r7, #18]
 8001858:	1c53      	adds	r3, r2, #1
 800185a:	74bb      	strb	r3, [r7, #18]
 800185c:	7cf9      	ldrb	r1, [r7, #19]
 800185e:	4820      	ldr	r0, [pc, #128]	; (80018e0 <report_parse+0x288>)
 8001860:	460b      	mov	r3, r1
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	1a5b      	subs	r3, r3, r1
 8001866:	4403      	add	r3, r0
 8001868:	3303      	adds	r3, #3
 800186a:	701a      	strb	r2, [r3, #0]
                        
                        while(*(ucBptr++) != HID_UNIT_EXP);         // Increment until exponent value of the data is found
 800186c:	bf00      	nop
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	617a      	str	r2, [r7, #20]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b55      	cmp	r3, #85	; 0x55
 8001878:	d1f9      	bne.n	800186e <report_parse+0x216>
                        
                        TEMP_SF[ucSensptr].SensExp = *ucBptr;       // Store this value in the temp struct
 800187a:	7cfa      	ldrb	r2, [r7, #19]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	7818      	ldrb	r0, [r3, #0]
 8001880:	4917      	ldr	r1, [pc, #92]	; (80018e0 <report_parse+0x288>)
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	440b      	add	r3, r1
 800188a:	3304      	adds	r3, #4
 800188c:	4602      	mov	r2, r0
 800188e:	701a      	strb	r2, [r3, #0]
                            break;
 8001890:	e022      	b.n	80018d8 <report_parse+0x280>
                    }

                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_MOD_MAX) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_MAX) )   // Search for sensor MAX val and increment offset variable because this field is undesired HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_MAX)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b24      	cmp	r3, #36	; 0x24
 8001898:	d003      	beq.n	80018a2 <report_parse+0x24a>
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b25      	cmp	r3, #37	; 0x25
 80018a0:	d102      	bne.n	80018a8 <report_parse+0x250>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80018a2:	7cbb      	ldrb	r3, [r7, #18]
 80018a4:	3301      	adds	r3, #1
 80018a6:	74bb      	strb	r3, [r7, #18]
                    
                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_MOD_MIN)  || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_MIN) )  // Search for sensor MIN val and increment offset variable because this field is undesired HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_MIN)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b34      	cmp	r3, #52	; 0x34
 80018ae:	d003      	beq.n	80018b8 <report_parse+0x260>
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b35      	cmp	r3, #53	; 0x35
 80018b6:	d106      	bne.n	80018c6 <report_parse+0x26e>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80018b8:	7cbb      	ldrb	r3, [r7, #18]
 80018ba:	3301      	adds	r3, #1
 80018bc:	74bb      	strb	r3, [r7, #18]
 80018be:	e002      	b.n	80018c6 <report_parse+0x26e>
                }
                
                else ucBptr++;                                      // If a new identifier has not yet been reached, continue traversing report descriptor 
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant features HID_USAGE_SENSOR_Properties
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <report_parse+0x28c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	f67f af3e 	bls.w	8001754 <report_parse+0xfc>
            }
            
            ucUsageOffset = 0;                                      //reset HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80018d8:	2300      	movs	r3, #0
 80018da:	74bb      	strb	r3, [r7, #18]
            
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant input features
 80018dc:	e054      	b.n	8001988 <report_parse+0x330>
 80018de:	bf00      	nop
 80018e0:	20000104 	.word	0x20000104
 80018e4:	20000158 	.word	0x20000158
            {
                if(*ucBptr == HID_USAGE_SENSOR_)                         
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b0a      	cmp	r3, #10
 80018ee:	d148      	bne.n	8001982 <report_parse+0x32a>
                {
                    ucBptr++;                                       // Continue to next byte
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
                    
                    if (*ucBptr == HID_USAGE_SENSOR_STATE_1)                  
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d10b      	bne.n	8001916 <report_parse+0x2be>
                    {
                        ucBptr++;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
                        if(*(ucBptr++) == HID_USAGE_SENSOR_STATE_2) // Search for HID usage sensor state and increment offset variable because this field is undesired
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	617a      	str	r2, [r7, #20]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d102      	bne.n	8001916 <report_parse+0x2be>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001910:	7cbb      	ldrb	r3, [r7, #18]
 8001912:	3301      	adds	r3, #1
 8001914:	74bb      	strb	r3, [r7, #18]
                    }

                    if (*ucBptr == HID_USAGE_SENSOR_EVENT_1)               
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d134      	bne.n	8001988 <report_parse+0x330>
                    {
                        ucBptr++;                                   // Continue to next byte
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == HID_USAGE_SENSOR_EVENT_2)   // Search for HID usage sensor event and increment the offset variable
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	617a      	str	r2, [r7, #20]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d12b      	bne.n	8001988 <report_parse+0x330>
                        {    
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001930:	7cbb      	ldrb	r3, [r7, #18]
 8001932:	3301      	adds	r3, #1
 8001934:	74bb      	strb	r3, [r7, #18]
                            while(*(ucBptr++) != HID_END_COLLECTION); // end of the sensor event field signifies the start of desired input data
 8001936:	bf00      	nop
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	617a      	str	r2, [r7, #20]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2bc0      	cmp	r3, #192	; 0xc0
 8001942:	d1f9      	bne.n	8001938 <report_parse+0x2e0>
                            
                            TEMP_SF[ucSensptr].DatOffset = ucUsageOffset + 3; //save HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data) NOTE: offset an additional 3 for extra data received on GPIO interrupt
 8001944:	7cfa      	ldrb	r2, [r7, #19]
 8001946:	7cbb      	ldrb	r3, [r7, #18]
 8001948:	3303      	adds	r3, #3
 800194a:	b2d8      	uxtb	r0, r3
 800194c:	4999      	ldr	r1, [pc, #612]	; (8001bb4 <report_parse+0x55c>)
 800194e:	4613      	mov	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	440b      	add	r3, r1
 8001956:	3305      	adds	r3, #5
 8001958:	4602      	mov	r2, r0
 800195a:	701a      	strb	r2, [r3, #0]
                            
                            while(*(ucBptr++) != HID_UNIT_EXP);     // Search for, and store, the unit exponent value for the input data
 800195c:	bf00      	nop
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	617a      	str	r2, [r7, #20]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b55      	cmp	r3, #85	; 0x55
 8001968:	d1f9      	bne.n	800195e <report_parse+0x306>
                            
                            TEMP_SF[ucSensptr].DatExp = *ucBptr;
 800196a:	7cfa      	ldrb	r2, [r7, #19]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	7818      	ldrb	r0, [r3, #0]
 8001970:	4990      	ldr	r1, [pc, #576]	; (8001bb4 <report_parse+0x55c>)
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	440b      	add	r3, r1
 800197a:	3306      	adds	r3, #6
 800197c:	4602      	mov	r2, r0
 800197e:	701a      	strb	r2, [r3, #0]
                            
                            break;
 8001980:	e00a      	b.n	8001998 <report_parse+0x340>
                        }
                    }
                }
                else ucBptr++;                                      // If desired identifiers haven't been reached, continue traversing HID Report Descriptor
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant input features
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	461a      	mov	r2, r3
 8001990:	4b89      	ldr	r3, [pc, #548]	; (8001bb8 <report_parse+0x560>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	d9a7      	bls.n	80018e8 <report_parse+0x290>
            }
            
            bFlag = FALSE;                                          // Reset the flag to 0 to show that we are done with descriptor data from this report ID
 8001998:	2300      	movs	r3, #0
 800199a:	747b      	strb	r3, [r7, #17]
            ucSensptr++;                                            // Increment to the next sensor in the struct array of sensors
 800199c:	7cfb      	ldrb	r3, [r7, #19]
 800199e:	3301      	adds	r3, #1
 80019a0:	74fb      	strb	r3, [r7, #19]
 80019a2:	e002      	b.n	80019aa <report_parse+0x352>
        }

        else ucBptr++;                                              // If desired identifiers haven't been reached, continue traversing HID Report Descriptor
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
    while( (ucBptr - ucStrt) <= HID_FIELD.wRepDescLen )             // Continue looping until end of report
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <report_parse+0x560>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	f67f ae60 	bls.w	800167c <report_parse+0x24>
 80019bc:	e000      	b.n	80019c0 <report_parse+0x368>
                break;                                              // end of the report has occurred
 80019be:	bf00      	nop
    }

    if ((ucBptr - ucStrt) > (HID_FIELD.wRepDescLen + 1))            // Sanity check to ensure the loop exited at the end of the report descriptor
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b7b      	ldr	r3, [pc, #492]	; (8001bb8 <report_parse+0x560>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	3301      	adds	r3, #1
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d901      	bls.n	80019d6 <report_parse+0x37e>
        return NO_EOC_FAIL;
 80019d2:	2315      	movs	r3, #21
 80019d4:	e0e9      	b.n	8001baa <report_parse+0x552>

    for(ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)           // Sanity check to see if the desired fields were parsed correctly
 80019d6:	2300      	movs	r3, #0
 80019d8:	74fb      	strb	r3, [r7, #19]
 80019da:	e01a      	b.n	8001a12 <report_parse+0x3ba>
    {
        if (TEMP_SF[ucSensptr].id == 0xFF)                          // If the ID == 0xFF it means that the sensor isn't present in the device
 80019dc:	7cfa      	ldrb	r2, [r7, #19]
 80019de:	4975      	ldr	r1, [pc, #468]	; (8001bb4 <report_parse+0x55c>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2bff      	cmp	r3, #255	; 0xff
 80019ec:	d00d      	beq.n	8001a0a <report_parse+0x3b2>
            continue;
        if (TEMP_SF[ucSensptr].id != (ucSensptr+1))                 // Make sure every filled struct has a valid sensor ID
 80019ee:	7cfa      	ldrb	r2, [r7, #19]
 80019f0:	4970      	ldr	r1, [pc, #448]	; (8001bb4 <report_parse+0x55c>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	1a9b      	subs	r3, r3, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	7cfb      	ldrb	r3, [r7, #19]
 8001a00:	3301      	adds	r3, #1
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d002      	beq.n	8001a0c <report_parse+0x3b4>
             return REP_PARS_FAIL; 
 8001a06:	2314      	movs	r3, #20
 8001a08:	e0cf      	b.n	8001baa <report_parse+0x552>
            continue;
 8001a0a:	bf00      	nop
    for(ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)           // Sanity check to see if the desired fields were parsed correctly
 8001a0c:	7cfb      	ldrb	r3, [r7, #19]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	74fb      	strb	r3, [r7, #19]
 8001a12:	7cfb      	ldrb	r3, [r7, #19]
 8001a14:	2b0b      	cmp	r3, #11
 8001a16:	d9e1      	bls.n	80019dc <report_parse+0x384>
    }

    memset(&SENSOR, 0xFF, sizeof(SENSOR));                          // Init & Rearrange structs into order compatible with _VREGS structure            
 8001a18:	2254      	movs	r2, #84	; 0x54
 8001a1a:	21ff      	movs	r1, #255	; 0xff
 8001a1c:	4867      	ldr	r0, [pc, #412]	; (8001bbc <report_parse+0x564>)
 8001a1e:	f006 f93d 	bl	8007c9c <memset>

    for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)          // go through the entire sensor list looking for sensor types
 8001a22:	2300      	movs	r3, #0
 8001a24:	74fb      	strb	r3, [r7, #19]
 8001a26:	e0bb      	b.n	8001ba0 <report_parse+0x548>
    {
        if (TEMP_SF[ucSensptr].type == ACCEL_SENSOR_TYPE)           // Sensor type identifier for accelerometer
 8001a28:	7cfa      	ldrb	r2, [r7, #19]
 8001a2a:	4962      	ldr	r1, [pc, #392]	; (8001bb4 <report_parse+0x55c>)
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	3301      	adds	r3, #1
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b73      	cmp	r3, #115	; 0x73
 8001a3a:	d112      	bne.n	8001a62 <report_parse+0x40a>
        {
            SENSOR[ACCEL_VREG_OFFSET] = TEMP_SF[ucSensptr];         // Store this struct as the first in the new order
 8001a3c:	7cfa      	ldrb	r2, [r7, #19]
 8001a3e:	485f      	ldr	r0, [pc, #380]	; (8001bbc <report_parse+0x564>)
 8001a40:	495c      	ldr	r1, [pc, #368]	; (8001bb4 <report_parse+0x55c>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	18ca      	adds	r2, r1, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6810      	ldr	r0, [r2, #0]
 8001a4e:	6018      	str	r0, [r3, #0]
 8001a50:	8891      	ldrh	r1, [r2, #4]
 8001a52:	7992      	ldrb	r2, [r2, #6]
 8001a54:	8099      	strh	r1, [r3, #4]
 8001a56:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.accel = TRUE;                                  // VREG01 accelerometer available bit(0) set
 8001a58:	4a59      	ldr	r2, [pc, #356]	; (8001bc0 <report_parse+0x568>)
 8001a5a:	7913      	ldrb	r3, [r2, #4]
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == GYRO_SENSOR_TYPE)            // Sensor type identifier for gyrometer
 8001a62:	7cfa      	ldrb	r2, [r7, #19]
 8001a64:	4953      	ldr	r1, [pc, #332]	; (8001bb4 <report_parse+0x55c>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3301      	adds	r3, #1
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b76      	cmp	r3, #118	; 0x76
 8001a74:	d112      	bne.n	8001a9c <report_parse+0x444>
        {
            SENSOR[GYRO_VREG_OFFSET] = TEMP_SF[ucSensptr];          // Store this struct as the second in the new order
 8001a76:	7cfa      	ldrb	r2, [r7, #19]
 8001a78:	4950      	ldr	r1, [pc, #320]	; (8001bbc <report_parse+0x564>)
 8001a7a:	484e      	ldr	r0, [pc, #312]	; (8001bb4 <report_parse+0x55c>)
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	18c2      	adds	r2, r0, r3
 8001a84:	1dcb      	adds	r3, r1, #7
 8001a86:	6811      	ldr	r1, [r2, #0]
 8001a88:	6019      	str	r1, [r3, #0]
 8001a8a:	8891      	ldrh	r1, [r2, #4]
 8001a8c:	7992      	ldrb	r2, [r2, #6]
 8001a8e:	8099      	strh	r1, [r3, #4]
 8001a90:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.gyro = TRUE;                                   // VREG01 gyrometer available bit(1) set
 8001a92:	4a4b      	ldr	r2, [pc, #300]	; (8001bc0 <report_parse+0x568>)
 8001a94:	7913      	ldrb	r3, [r2, #4]
 8001a96:	f043 0302 	orr.w	r3, r3, #2
 8001a9a:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == CMP_SENSOR_TYPE)             // Sensor type identifier for compass
 8001a9c:	7cfa      	ldrb	r2, [r7, #19]
 8001a9e:	4945      	ldr	r1, [pc, #276]	; (8001bb4 <report_parse+0x55c>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b83      	cmp	r3, #131	; 0x83
 8001aae:	d113      	bne.n	8001ad8 <report_parse+0x480>
        {
            SENSOR[CMP_VREG_OFFSET] = TEMP_SF[ucSensptr];           // Store this struct as the third in the new order
 8001ab0:	7cfa      	ldrb	r2, [r7, #19]
 8001ab2:	4942      	ldr	r1, [pc, #264]	; (8001bbc <report_parse+0x564>)
 8001ab4:	483f      	ldr	r0, [pc, #252]	; (8001bb4 <report_parse+0x55c>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	1a9b      	subs	r3, r3, r2
 8001abc:	18c2      	adds	r2, r0, r3
 8001abe:	f101 030e 	add.w	r3, r1, #14
 8001ac2:	6811      	ldr	r1, [r2, #0]
 8001ac4:	6019      	str	r1, [r3, #0]
 8001ac6:	8891      	ldrh	r1, [r2, #4]
 8001ac8:	7992      	ldrb	r2, [r2, #6]
 8001aca:	8099      	strh	r1, [r3, #4]
 8001acc:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.cmp = TRUE;                                    // VREG01 compass available bit(2) set
 8001ace:	4a3c      	ldr	r2, [pc, #240]	; (8001bc0 <report_parse+0x568>)
 8001ad0:	7913      	ldrb	r3, [r2, #4]
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == ORI_SENSOR_TYPE)             // Sensor type identifier for orientation sensor
 8001ad8:	7cfa      	ldrb	r2, [r7, #19]
 8001ada:	4936      	ldr	r1, [pc, #216]	; (8001bb4 <report_parse+0x55c>)
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b8a      	cmp	r3, #138	; 0x8a
 8001aea:	d113      	bne.n	8001b14 <report_parse+0x4bc>
        {
            SENSOR[ORI_VREG_OFFSET] = TEMP_SF[ucSensptr];           // Store this struct as the fourth in the new order
 8001aec:	7cfa      	ldrb	r2, [r7, #19]
 8001aee:	4933      	ldr	r1, [pc, #204]	; (8001bbc <report_parse+0x564>)
 8001af0:	4830      	ldr	r0, [pc, #192]	; (8001bb4 <report_parse+0x55c>)
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	18c2      	adds	r2, r0, r3
 8001afa:	f101 0315 	add.w	r3, r1, #21
 8001afe:	6811      	ldr	r1, [r2, #0]
 8001b00:	6019      	str	r1, [r3, #0]
 8001b02:	8891      	ldrh	r1, [r2, #4]
 8001b04:	7992      	ldrb	r2, [r2, #6]
 8001b06:	8099      	strh	r1, [r3, #4]
 8001b08:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.ori = TRUE;                                    // VREG01 orientation available bit(3) set
 8001b0a:	4a2d      	ldr	r2, [pc, #180]	; (8001bc0 <report_parse+0x568>)
 8001b0c:	7913      	ldrb	r3, [r2, #4]
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == INCL_SENSOR_TYPE)            // Sensor type identifier for inclinometer
 8001b14:	7cfa      	ldrb	r2, [r7, #19]
 8001b16:	4927      	ldr	r1, [pc, #156]	; (8001bb4 <report_parse+0x55c>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	3301      	adds	r3, #1
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b86      	cmp	r3, #134	; 0x86
 8001b26:	d113      	bne.n	8001b50 <report_parse+0x4f8>
        {
            SENSOR[INCL_VREG_OFFSET] = TEMP_SF[ucSensptr];          // Store this struct as the fifth in the new order
 8001b28:	7cfa      	ldrb	r2, [r7, #19]
 8001b2a:	4924      	ldr	r1, [pc, #144]	; (8001bbc <report_parse+0x564>)
 8001b2c:	4821      	ldr	r0, [pc, #132]	; (8001bb4 <report_parse+0x55c>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	18c2      	adds	r2, r0, r3
 8001b36:	f101 031c 	add.w	r3, r1, #28
 8001b3a:	6810      	ldr	r0, [r2, #0]
 8001b3c:	6018      	str	r0, [r3, #0]
 8001b3e:	8891      	ldrh	r1, [r2, #4]
 8001b40:	7992      	ldrb	r2, [r2, #6]
 8001b42:	8099      	strh	r1, [r3, #4]
 8001b44:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.incl = TRUE;                                   // VREG01 gyrometer available bit(4) set
 8001b46:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <report_parse+0x568>)
 8001b48:	7913      	ldrb	r3, [r2, #4]
 8001b4a:	f043 0310 	orr.w	r3, r3, #16
 8001b4e:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == RAW_SENSOR_TYPE)             // Sensor type identifier for raw data
 8001b50:	7cfa      	ldrb	r2, [r7, #19]
 8001b52:	4918      	ldr	r1, [pc, #96]	; (8001bb4 <report_parse+0x55c>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2be1      	cmp	r3, #225	; 0xe1
 8001b62:	d11a      	bne.n	8001b9a <report_parse+0x542>
        {                                                           // NOTE: there is no VREG01 bit for raw sensors available 
            SENSOR[RAW_VREG_OFFSET+RAW_SENSOR_CNT] = TEMP_SF[ucSensptr]; // Store this struct as the 8th/9th/10th in the new order
 8001b64:	7cfa      	ldrb	r2, [r7, #19]
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <report_parse+0x56c>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	1dd9      	adds	r1, r3, #7
 8001b6c:	4813      	ldr	r0, [pc, #76]	; (8001bbc <report_parse+0x564>)
 8001b6e:	460b      	mov	r3, r1
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	1a5b      	subs	r3, r3, r1
 8001b74:	4418      	add	r0, r3
 8001b76:	490f      	ldr	r1, [pc, #60]	; (8001bb4 <report_parse+0x55c>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	18ca      	adds	r2, r1, r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	6811      	ldr	r1, [r2, #0]
 8001b84:	6019      	str	r1, [r3, #0]
 8001b86:	8891      	ldrh	r1, [r2, #4]
 8001b88:	7992      	ldrb	r2, [r2, #6]
 8001b8a:	8099      	strh	r1, [r3, #4]
 8001b8c:	719a      	strb	r2, [r3, #6]
            RAW_SENSOR_CNT++;                                       // NOTE: pre-production SSC7150 F/W only enumerates 1 RAW sensor, so keep running count
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <report_parse+0x56c>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <report_parse+0x56c>)
 8001b98:	701a      	strb	r2, [r3, #0]
    for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)          // go through the entire sensor list looking for sensor types
 8001b9a:	7cfb      	ldrb	r3, [r7, #19]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	74fb      	strb	r3, [r7, #19]
 8001ba0:	7cfb      	ldrb	r3, [r7, #19]
 8001ba2:	2b0b      	cmp	r3, #11
 8001ba4:	f67f af40 	bls.w	8001a28 <report_parse+0x3d0>
        }     
    }
    
    return SUCCESS;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000104 	.word	0x20000104
 8001bb8:	20000158 	.word	0x20000158
 8001bbc:	200000b0 	.word	0x200000b0
 8001bc0:	20000f4c 	.word	0x20000f4c
 8001bc4:	20000f48 	.word	0x20000f48

08001bc8 <ret_exponent>:
* @note        Returns the exponent scaler for a requested data field
* @param ucAdj_SensN sensor num of interest
* @return dMult multiplier value
*/ 
double ret_exponent (UINT8 ucAdj_SensN)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
    UINT8 ucVreg_ptr = VREG_EXP1;                                   // VREG36 is start of exponent values
 8001bd2:	2339      	movs	r3, #57	; 0x39
 8001bd4:	77fb      	strb	r3, [r7, #31]
    UINT8 ucRet;                                                    // Function status variable
    double dMult = 1;                                               // Unit exponent scaler to be returned
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <ret_exponent+0xd0>)
 8001bdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    UINT16 wExpo;                                                   // 'Buffer' to hold the exponent register's contents
    UINT8 ucTemp_expo = 0;                                          // Variable to hold the 4 bit exponent value
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]


    if (ucAdj_SensN > 3)                                            // sensor indexes from 4 to 7 = sensors that have unit exponents in the 2nd exponent register (VREG37)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d902      	bls.n	8001bf0 <ret_exponent+0x28>
        ucVreg_ptr++;                                               // Increment ptr to VREG exponent register to be searched
 8001bea:	7ffb      	ldrb	r3, [r7, #31]
 8001bec:	3301      	adds	r3, #1
 8001bee:	77fb      	strb	r3, [r7, #31]

    if (ucAdj_SensN > 7)                                            // sensor indexes > 7 = sensors that have unit exponents in the 3rd exponent register (VREG38)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b07      	cmp	r3, #7
 8001bf4:	d902      	bls.n	8001bfc <ret_exponent+0x34>
        ucVreg_ptr++;                                               // Increment ptr to VREG exponent register to be searched
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	77fb      	strb	r3, [r7, #31]
      
    ucAdj_SensN= ucAdj_SensN % 4;                                   // Find the appropriate offset for this sensor's unit exponent
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	71fb      	strb	r3, [r7, #7]


    ucRet = HOST_SF_LIB_VREG_read (ucVreg_ptr, &wExpo);             // Read this sesnor's data unit exponent value from the VREG
 8001c04:	f107 0208 	add.w	r2, r7, #8
 8001c08:	7ffb      	ldrb	r3, [r7, #31]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 fc75 	bl	80024fc <HOST_SF_LIB_VREG_read>
 8001c12:	4603      	mov	r3, r0
 8001c14:	73bb      	strb	r3, [r7, #14]
    
    ucTemp_expo = (UINT8)((wExpo >> (4 * ucAdj_SensN)) & 0xF);       // get the 4 exp bits for desired sensor
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	73fb      	strb	r3, [r7, #15]

    if (ucTemp_expo >= 0 && ucTemp_expo <= 7)                        // These values are all positive exponents
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	d80d      	bhi.n	8001c4a <ret_exponent+0x82>
        dMult = pow(10, ucTemp_expo);
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc0f 	bl	8000454 <__aeabi_ui2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	ec43 2b11 	vmov	d1, r2, r3
 8001c3e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001c90 <ret_exponent+0xc8>
 8001c42:	f006 f833 	bl	8007cac <pow>
 8001c46:	ed87 0b04 	vstr	d0, [r7, #16]

    if(ucTemp_expo >= 8 && ucTemp_expo <= 0x0F)                      // These values are all negative exponents (ie. to right of decimal place)
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	2b07      	cmp	r3, #7
 8001c4e:	d914      	bls.n	8001c7a <ret_exponent+0xb2>
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b0f      	cmp	r3, #15
 8001c54:	d811      	bhi.n	8001c7a <ret_exponent+0xb2>
        dMult = pow(10, (int16_t)(-16 + ucTemp_expo));
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b10      	subs	r3, #16
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc07 	bl	8000474 <__aeabi_i2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	ec43 2b11 	vmov	d1, r2, r3
 8001c6e:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8001c90 <ret_exponent+0xc8>
 8001c72:	f006 f81b 	bl	8007cac <pow>
 8001c76:	ed87 0b04 	vstr	d0, [r7, #16]

    return dMult;                                                    //return Unit exponent scaler
 8001c7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c7e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c82:	eeb0 0a47 	vmov.f32	s0, s14
 8001c86:	eef0 0a67 	vmov.f32	s1, s15
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40240000 	.word	0x40240000
 8001c98:	3ff00000 	.word	0x3ff00000

08001c9c <HOST_SF_LIB_HID_Set_Report>:
* @param ReportBuffer pointer to data that needs to be sent to the device
* @param size specifies the size, in bytes,of the report buffer 
* @return completion_status 0=SUCCESS, failcode: 0x19=SET_RPT_FAIL
*/
UINT8 HOST_SF_LIB_HID_Set_Report(UINT8 type, UINT8 *ReportBuffer, UINT8 size)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b0ac      	sub	sp, #176	; 0xb0
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	71bb      	strb	r3, [r7, #6]
    UINT8 ucTx_data[BUF_150];
    UINT8 ucRetStat;
    UINT8 ucCmdBytePtr;
    BOOL bVendorCmd = FALSE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

    if (size <= 0 || size >= (BUF_150 - RPT_LEN))
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HOST_SF_LIB_HID_Set_Report+0x22>
 8001cb8:	79bb      	ldrb	r3, [r7, #6]
 8001cba:	2b8f      	cmp	r3, #143	; 0x8f
 8001cbc:	d901      	bls.n	8001cc2 <HOST_SF_LIB_HID_Set_Report+0x26>
        return SET_RPT_FAIL;
 8001cbe:	2319      	movs	r3, #25
 8001cc0:	e066      	b.n	8001d90 <HOST_SF_LIB_HID_Set_Report+0xf4>
    
    if (ReportBuffer[0] == FLASH_UPDATE_RPT_ID)                     // the flash update (Vendor) commands have a different format
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b0e      	cmp	r3, #14
 8001cc8:	d102      	bne.n	8001cd0 <HOST_SF_LIB_HID_Set_Report+0x34>
        bVendorCmd = TRUE;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
    
    ucTx_data[0] = HID_FIELD.wCmdReg;                               //command field bytes from HID config table
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	733b      	strb	r3, [r7, #12]
    ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);               // Command register MSB
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	737b      	strb	r3, [r7, #13]
    if (bVendorCmd)
 8001ce2:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <HOST_SF_LIB_HID_Set_Report+0x5c>
        ucTx_data[2] = type | ReportBuffer[0];                      // HID Set command opcode low byte which includes the sensor's ReportID, high byte report type
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	73bb      	strb	r3, [r7, #14]
 8001cf6:	e006      	b.n	8001d06 <HOST_SF_LIB_HID_Set_Report+0x6a>
    else
        ucTx_data[2] = type | ReportBuffer[2];
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	73bb      	strb	r3, [r7, #14]
    ucTx_data[3] = SET_OPCODE;                                      // HID SetReport command opcode high byte
 8001d06:	2303      	movs	r3, #3
 8001d08:	73fb      	strb	r3, [r7, #15]
    ucTx_data[4] = HID_FIELD.wDatReg;                               //data field bytes from HID config table
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	743b      	strb	r3, [r7, #16]
    ucTx_data[5] = (HID_FIELD.wDatReg >> BYTE_SHIFT);
 8001d12:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	747b      	strb	r3, [r7, #17]

    ucCmdBytePtr = RPT_LEN;
 8001d1c:	2306      	movs	r3, #6
 8001d1e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
    if (bVendorCmd)                                                 // flash update (vendor) commands have a different format
 8001d22:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HOST_SF_LIB_HID_Set_Report+0x96>
        ReportBuffer++;                                             //skips 1st byte of input buffer
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	e012      	b.n	8001d58 <HOST_SF_LIB_HID_Set_Report+0xbc>
    else size++;
 8001d32:	79bb      	ldrb	r3, [r7, #6]
 8001d34:	3301      	adds	r3, #1
 8001d36:	71bb      	strb	r3, [r7, #6]

    while (size--)
 8001d38:	e00e      	b.n	8001d58 <HOST_SF_LIB_HID_Set_Report+0xbc>
    {
        ucTx_data[ucCmdBytePtr++] = *(ReportBuffer++);              // Append input to the command
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	603a      	str	r2, [r7, #0]
 8001d40:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8001d44:	1c51      	adds	r1, r2, #1
 8001d46:	f887 10a7 	strb.w	r1, [r7, #167]	; 0xa7
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	f101 03a8 	add.w	r3, r1, #168	; 0xa8
 8001d52:	443b      	add	r3, r7
 8001d54:	f803 2c9c 	strb.w	r2, [r3, #-156]
    while (size--)
 8001d58:	79bb      	ldrb	r3, [r7, #6]
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	71ba      	strb	r2, [r7, #6]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1eb      	bne.n	8001d3a <HOST_SF_LIB_HID_Set_Report+0x9e>
    }

    ucRetStat = i2c_cmd_WrRd (WRITE,                                //issue SetReportOutput command to SSC7150
 8001d62:	f107 020c 	add.w	r2, r7, #12
 8001d66:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2300      	movs	r3, #0
 8001d74:	2001      	movs	r0, #1
 8001d76:	f7ff f825 	bl	8000dc4 <i2c_cmd_WrRd>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
                        ucTx_data,                                  //cmd buf
                        0,                                          //num of bytes to read initially
                        0,                                          //recv buf
                        FALSE);                                     //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

    if (ucRetStat != SUCCESS)
 8001d80:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HOST_SF_LIB_HID_Set_Report+0xf0>
    {
        return SET_RPT_FAIL;
 8001d88:	2319      	movs	r3, #25
 8001d8a:	e001      	b.n	8001d90 <HOST_SF_LIB_HID_Set_Report+0xf4>
    }

    return ucRetStat;
 8001d8c:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	37a8      	adds	r7, #168	; 0xa8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000158 	.word	0x20000158

08001d9c <HOST_SF_LIB_HID_Get_Report>:
* @param ReportBuffer pointer towhich the feature report data is read into 
* @param size specifies the size, in bytes, of the report buffer 
* @return completion_status 0=I2C_SUCCESS, failcode: 0x1C=HID_GET_RPT_INPT_FAIL,0x1D=HID_GET_RPT_FEAT_FAIL
*/
UINT8 HOST_SF_LIB_HID_Get_Report(UINT8 type, UINT8* ReportBuffer, UINT8 size)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b0aa      	sub	sp, #168	; 0xa8
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
 8001da8:	4613      	mov	r3, r2
 8001daa:	71bb      	strb	r3, [r7, #6]
    UINT8 ucTx_data[BUF_150];
    UINT8 ucRetStat;
    UINT8 ucCmdBytePtr;

    ucTx_data[0] = HID_FIELD.wCmdReg;                               //command field bytes from HID config table
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	723b      	strb	r3, [r7, #8]
    ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);               // Command register MSB
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	727b      	strb	r3, [r7, #9]
    ucTx_data[2] = type | ReportBuffer[0];                          // HID Get command opcode low byte which includes the sensor's ReportID, high byte report type
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	72bb      	strb	r3, [r7, #10]
    ucTx_data[3] = GET_RPT_CMD_MSB;                                 // HID GetReport command opcode high byte
 8001dca:	2302      	movs	r3, #2
 8001dcc:	72fb      	strb	r3, [r7, #11]
    ucTx_data[4] = HID_FIELD.wDatReg;                               //data field bytes from HID config table
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	733b      	strb	r3, [r7, #12]
    ucTx_data[5] = (HID_FIELD.wDatReg >> BYTE_SHIFT);
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	737b      	strb	r3, [r7, #13]

    ucCmdBytePtr = RPT_LEN;
 8001de0:	2306      	movs	r3, #6
 8001de2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    ucRetStat = i2c_cmd_WrRd (WR_RD,                                 //issue SetReportOutput command to SSC7150
 8001de6:	f107 0208 	add.w	r2, r7, #8
 8001dea:	f897 109f 	ldrb.w	r1, [r7, #159]	; 0x9f
 8001dee:	2301      	movs	r3, #1
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2303      	movs	r3, #3
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f7fe ffe3 	bl	8000dc4 <i2c_cmd_WrRd>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
                        ucTx_data,                                  //cmd buf
                        BYTE_ADJ_VAL,                               //num of bytes to read initially
                        ReportBuffer,                               //recv buf
                        TRUE);                                      //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

    if (ucRetStat != SUCCESS)
 8001e04:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <HOST_SF_LIB_HID_Get_Report+0x7e>
    {
        if (type == GET_RPT_FEAT)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2b30      	cmp	r3, #48	; 0x30
 8001e10:	d101      	bne.n	8001e16 <HOST_SF_LIB_HID_Get_Report+0x7a>
            return HID_GET_RPT_FEAT_FAIL;
 8001e12:	231d      	movs	r3, #29
 8001e14:	e003      	b.n	8001e1e <HOST_SF_LIB_HID_Get_Report+0x82>
        else
            return HID_GET_RPT_INPT_FAIL;
 8001e16:	231c      	movs	r3, #28
 8001e18:	e001      	b.n	8001e1e <HOST_SF_LIB_HID_Get_Report+0x82>
    }

    return ucRetStat;
 8001e1a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	37a0      	adds	r7, #160	; 0xa0
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000158 	.word	0x20000158

08001e2c <Wake_signal>:

/** Wake_signal
* @brief: assert wake signal on PA0, wait 1 ms, deassert
*/
void Wake_signal()
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	/* assert wake signal */
    HAL_GPIO_WritePin(MOTION_WAKE_PIN_GPIO_Port, MOTION_WAKE_PIN_Pin, GPIO_PIN_RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2101      	movs	r1, #1
 8001e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e38:	f001 ff20 	bl	8003c7c <HAL_GPIO_WritePin>

    /* spec says 3�s assertion, let's use ms delay and wait ~2 ms */
    HAL_Delay(10);
 8001e3c:	200a      	movs	r0, #10
 8001e3e:	f001 fc1f 	bl	8003680 <HAL_Delay>

    /* de asser wake signal */
    HAL_GPIO_WritePin(MOTION_WAKE_PIN_GPIO_Port, MOTION_WAKE_PIN_Pin, GPIO_PIN_SET);
 8001e42:	2201      	movs	r2, #1
 8001e44:	2101      	movs	r1, #1
 8001e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4a:	f001 ff17 	bl	8003c7c <HAL_GPIO_WritePin>
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <Reset_signal>:

/** Reset_signal
 * @brief: assert wake signal on PB1, wait 1 ms, deassert
 */
void Reset_signal()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	/* assert reset signal */
	HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	4806      	ldr	r0, [pc, #24]	; (8001e78 <Reset_signal+0x24>)
 8001e5e:	f001 ff0d 	bl	8003c7c <HAL_GPIO_WritePin>

	/* spec says 3�s assertion, let's use ms delay and wait ~2 ms */
	HAL_Delay(10);
 8001e62:	200a      	movs	r0, #10
 8001e64:	f001 fc0c 	bl	8003680 <HAL_Delay>

	/* de asser reset signal */
	HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_SET);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <Reset_signal+0x24>)
 8001e6e:	f001 ff05 	bl	8003c7c <HAL_GPIO_WritePin>
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	48000400 	.word	0x48000400

08001e7c <VREG_init>:
* @note        Inits VREG registers, get HID config & report descriptor tables, retrieves all device features
* @param 
* @return error status 0=SUCCESS, failcodes: 0x11=HID_DESC_FAIL, 0x12=RPT_DESC_FAIL, 0x18=RESET_FAIL 
*/ 
UINT8 VREG_init() 
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af00      	add	r7, sp, #0
    UINT8 ucBuf[BUF_40];                                           
    UINT8 ucSensor_num;
    
    /* sets the virtual registers to 0x00 */
    memset(&_VREGS, 0x00, sizeof(_VREGS));                            // Initialize VREG registers 
 8001e82:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001e86:	2100      	movs	r1, #0
 8001e88:	4841      	ldr	r0, [pc, #260]	; (8001f90 <VREG_init+0x114>)
 8001e8a:	f005 ff07 	bl	8007c9c <memset>

    
    if ( hid_i2c_descriptor_handler(GET_HID_DESC) )                 // get HID descriptor from SSC7150
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f7ff f928 	bl	80010e4 <hid_i2c_descriptor_handler>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <VREG_init+0x30>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // update status register (VREG 0x3F) for failure to get HID descriptor
 8001e9a:	4a3d      	ldr	r2, [pc, #244]	; (8001f90 <VREG_init+0x114>)
 8001e9c:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8001ea0:	f043 0318 	orr.w	r3, r3, #24
 8001ea4:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return HID_DESC_FAIL;
 8001ea8:	2311      	movs	r3, #17
 8001eaa:	e06c      	b.n	8001f86 <VREG_init+0x10a>
    }        
    
    hid_i2c_cmd_process(ucBuf, POWER_ON, ARB_ID);                   // Issue HID Power ON command to SSC7150 (NOTE: 'ucBuf' and 'ARB_ID' are don't cares for POWER_ON command)
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f9ee 	bl	8001294 <hid_i2c_cmd_process>
    
    _VREGS.SHC.reset = VREG_RESET_INIT;                              //set the SHC reset bit to indicate this operation has not yet completed successfully
 8001eb8:	4a35      	ldr	r2, [pc, #212]	; (8001f90 <VREG_init+0x114>)
 8001eba:	7813      	ldrb	r3, [r2, #0]
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	7013      	strb	r3, [r2, #0]
    if ( hid_i2c_cmd_process (ucBuf, RESET_DEV_CMD, ARB_ID) )       // Issue HID Reset command  (NOTE: 'ucBuf' and 'ARB_ID' are don't cares for RESET_REG command)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff f9e3 	bl	8001294 <hid_i2c_cmd_process>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <VREG_init+0x6a>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // If HID Reset fails, update status register (VREG 0x3F)
 8001ed4:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <VREG_init+0x114>)
 8001ed6:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8001eda:	f043 0318 	orr.w	r3, r3, #24
 8001ede:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return RESET_FAIL;
 8001ee2:	2318      	movs	r3, #24
 8001ee4:	e04f      	b.n	8001f86 <VREG_init+0x10a>
    }    
    
    if ( hid_i2c_descriptor_handler(GET_RPT_DESC) )                 // Get HID Report descriptor from SSC7150 
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f7ff f8fc 	bl	80010e4 <hid_i2c_descriptor_handler>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <VREG_init+0x88>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // HID report descriptor error, update status register (VREG 0x3F)
 8001ef2:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <VREG_init+0x114>)
 8001ef4:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8001ef8:	f043 0318 	orr.w	r3, r3, #24
 8001efc:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return RPT_DESC_FAIL;
 8001f00:	2312      	movs	r3, #18
 8001f02:	e040      	b.n	8001f86 <VREG_init+0x10a>
    }       
    
    for (ucSensor_num = 0; ucSensor_num <= NUM_SENS; ucSensor_num++) //go through the sensor list but only GetFeatureReport for valid ids   
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001f0a:	e025      	b.n	8001f58 <VREG_init+0xdc>
    {
        if (SENSOR[ucSensor_num].id != 0xFF && SENSOR[ucSensor_num].id != 0)
 8001f0c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001f10:	4920      	ldr	r1, [pc, #128]	; (8001f94 <VREG_init+0x118>)
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2bff      	cmp	r3, #255	; 0xff
 8001f1e:	d016      	beq.n	8001f4e <VREG_init+0xd2>
 8001f20:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001f24:	491b      	ldr	r1, [pc, #108]	; (8001f94 <VREG_init+0x118>)
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00c      	beq.n	8001f4e <VREG_init+0xd2>
        {
            hid_i2c_cmd_process(ucBuf, HID_GET_RPT_FEAT, SENSOR[ucSensor_num].id);  // Get feature report for all valid sensors and update _VREGS register
 8001f34:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001f38:	4916      	ldr	r1, [pc, #88]	; (8001f94 <VREG_init+0x118>)
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2105      	movs	r1, #5
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff f9a3 	bl	8001294 <hid_i2c_cmd_process>
    for (ucSensor_num = 0; ucSensor_num <= NUM_SENS; ucSensor_num++) //go through the sensor list but only GetFeatureReport for valid ids   
 8001f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f52:	3301      	adds	r3, #1
 8001f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001f58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d9d5      	bls.n	8001f0c <VREG_init+0x90>
        }
    }

    
    _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_SUCCESS;          // HID startup successful, update status register (VREG 0x3F) 
 8001f60:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <VREG_init+0x114>)
 8001f62:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8001f66:	2101      	movs	r1, #1
 8001f68:	f361 03c4 	bfi	r3, r1, #3, #2
 8001f6c:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108

    _VREGS.SHC.SHwake = TRUE;                                        // HID device is now awake and ready for operation
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <VREG_init+0x114>)
 8001f72:	7813      	ldrb	r3, [r2, #0]
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	7013      	strb	r3, [r2, #0]
    _VREGS.SHC.SHstart = TRUE;
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <VREG_init+0x114>)
 8001f7c:	7813      	ldrb	r3, [r2, #0]
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	7013      	strb	r3, [r2, #0]

    return SUCCESS;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3730      	adds	r7, #48	; 0x30
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000f4c 	.word	0x20000f4c
 8001f94:	200000b0 	.word	0x200000b0

08001f98 <set_state_data>:
* @note        Set and confirm new features for a device 
* @param GET_SET_PARAMS structure containing  power state (=2: FULL, =3: LOW),sensor ID, New data rate,New sensitivity
* @return error status 0=SUCCESS, failcodes: 0x17=SET_FEAT_FAIL 
*/ 
UINT8 set_state_data(GET_SET_PARAMS SET_PARAMS)    
{
 8001f98:	b084      	sub	sp, #16
 8001f9a:	b5b0      	push	{r4, r5, r7, lr}
 8001f9c:	b096      	sub	sp, #88	; 0x58
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    UINT8 ucGetFeatBuf[BUF_40];                                     // GetFeature report buffer
    UINT8 ucSetFeatBuf[BUF_40];                                     // SetFeature report buffer
    UINT8 ucRetryCnt, ucGSptr, ucBufSize;


    if ( hid_i2c_cmd_process(ucGetFeatBuf, HID_GET_RPT_FEAT, SET_PARAMS.ucid) ) // Issue a get report feature command and store the get features in ucGetFeatBuf
 8001fa8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb0:	2105      	movs	r1, #5
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f96e 	bl	8001294 <hid_i2c_cmd_process>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <set_state_data+0x2a>
        return SET_FEAT_FAIL;  
 8001fbe:	2317      	movs	r3, #23
 8001fc0:	e073      	b.n	80020aa <set_state_data+0x112>
    
    memcpy(&ucSetFeatBuf, &ucGetFeatBuf, BUF_40);                   // Copy GetFeatBuff to bufs to use for set feature command
 8001fc2:	1d3c      	adds	r4, r7, #4
 8001fc4:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8001fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fd4:	e884 0003 	stmia.w	r4, {r0, r1}

    // Modify fields that we would like to set in bufs (sensor state, power state, data rate, sensitivity)
    ucSetFeatBuf[RPT_REPORT_STATE] = HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_ALL_EVENTS_ENUM;   
 8001fd8:	2302      	movs	r3, #2
 8001fda:	723b      	strb	r3, [r7, #8]
    ucSetFeatBuf[RPT_PWR_STATE] = SET_PARAMS.ucPowerState;          //update the Power state parameter
 8001fdc:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001fe0:	727b      	strb	r3, [r7, #9]

    if (SET_PARAMS.bDataRateValid)                                  // update data rate value?
 8001fe2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d006      	beq.n	8001ff8 <set_state_data+0x60>
    {
        ucSetFeatBuf[RPT_REPORT_INTVAL_LSB] = (UINT8) SET_PARAMS.usDataRateVal; //update 16 bit data rate value
 8001fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	72fb      	strb	r3, [r7, #11]
        ucSetFeatBuf[RPT_REPORT_INTVAL_MSB] = (UINT8) (SET_PARAMS.usDataRateVal >> BYTE_SHIFT);
 8001ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	733b      	strb	r3, [r7, #12]
    }
    
    if (SET_PARAMS.bSensitivityValid)                               // update sensitivity value?
 8001ff8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <set_state_data+0x76>
    {
        ucSetFeatBuf[RPT_CHG_SENS_LSB] = (UINT8) SET_PARAMS.usSensitivityVal; //update 16 bit sensitivity value
 8002000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002002:	b2db      	uxtb	r3, r3
 8002004:	747b      	strb	r3, [r7, #17]
        ucSetFeatBuf[RPT_CHG_SENS_MSB] = (UINT8) (SET_PARAMS.usSensitivityVal >> BYTE_SHIFT);
 8002006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	b2db      	uxtb	r3, r3
 800200c:	74bb      	strb	r3, [r7, #18]
    }

    for (ucRetryCnt = 0; ucRetryCnt < MAX_RETRIES; ucRetryCnt++)    // API spec requires 3 attempts at setting new features. 
 800200e:	2300      	movs	r3, #0
 8002010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002014:	e03c      	b.n	8002090 <set_state_data+0xf8>
    {
        hid_i2c_cmd_process(ucSetFeatBuf, HID_SET_RPT_FEAT, SET_PARAMS.ucid);  // Send HID_SetFeature command to SSC7150 to update new features to the device
 8002016:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2107      	movs	r1, #7
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f938 	bl	8001294 <hid_i2c_cmd_process>
        hid_i2c_cmd_process(ucGetFeatBuf, HID_GET_RPT_FEAT, SET_PARAMS.ucid);  // Send HID_GetFeature command to SSC7150 to check if new feature request to device were updated
 8002024:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8002028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202c:	2105      	movs	r1, #5
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f930 	bl	8001294 <hid_i2c_cmd_process>
        
        ucBufSize = ucGetFeatBuf[RPT_SIZE_LSB];                     // size (in bytes) of packet is in 1st byte
 8002034:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002038:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        for (ucGSptr = 0; ucGSptr < ucBufSize; ucGSptr++)           // Check to see if the features have been updated
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002042:	e012      	b.n	800206a <set_state_data+0xd2>
        {
            if ( ucGetFeatBuf[ucGSptr] != ucSetFeatBuf[ucGSptr] ) 
 8002044:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002048:	3358      	adds	r3, #88	; 0x58
 800204a:	443b      	add	r3, r7
 800204c:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8002050:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002054:	3358      	adds	r3, #88	; 0x58
 8002056:	443b      	add	r3, r7
 8002058:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800205c:	429a      	cmp	r2, r3
 800205e:	d10b      	bne.n	8002078 <set_state_data+0xe0>
        for (ucGSptr = 0; ucGSptr < ucBufSize; ucGSptr++)           // Check to see if the features have been updated
 8002060:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002064:	3301      	adds	r3, #1
 8002066:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800206a:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800206e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002072:	429a      	cmp	r2, r3
 8002074:	d3e6      	bcc.n	8002044 <set_state_data+0xac>
 8002076:	e000      	b.n	800207a <set_state_data+0xe2>
                break;                                              //no they weren't, try again
 8002078:	bf00      	nop
        }

        if ( ucGSptr == ucBufSize )                                 //that's the whole packet, ALL data matches
 800207a:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800207e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002082:	429a      	cmp	r2, r3
 8002084:	d009      	beq.n	800209a <set_state_data+0x102>
    for (ucRetryCnt = 0; ucRetryCnt < MAX_RETRIES; ucRetryCnt++)    // API spec requires 3 attempts at setting new features. 
 8002086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800208a:	3301      	adds	r3, #1
 800208c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002090:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002094:	2b02      	cmp	r3, #2
 8002096:	d9be      	bls.n	8002016 <set_state_data+0x7e>
 8002098:	e000      	b.n	800209c <set_state_data+0x104>
            break;                                                  //we're done
 800209a:	bf00      	nop
    }

    if (ucRetryCnt == MAX_RETRIES)
 800209c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d101      	bne.n	80020a8 <set_state_data+0x110>
        return SET_FEAT_FAIL;                                       // Return error code
 80020a4:	2317      	movs	r3, #23
 80020a6:	e000      	b.n	80020aa <set_state_data+0x112>
    
    else return SUCCESS;                                            // Return successful
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3758      	adds	r7, #88	; 0x58
 80020ae:	46bd      	mov	sp, r7
 80020b0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80020b4:	b004      	add	sp, #16
 80020b6:	4770      	bx	lr

080020b8 <parse_update_VREG_data>:
* @param ucSensorNum Sensor data struct checked for unit exponent value
* @param ucInpRep Pointer to input report data buffer
* @return 
*/ 
void parse_update_VREG_data (UINT8 ucSensorNum, UINT8 *ucInpRep)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]

    switch (ucSensorNum)                                            //update VREG data registers with their respective data.
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	2b09      	cmp	r3, #9
 80020c8:	f200 820d 	bhi.w	80024e6 <parse_update_VREG_data+0x42e>
 80020cc:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <parse_update_VREG_data+0x1c>)
 80020ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d2:	bf00      	nop
 80020d4:	080020fd 	.word	0x080020fd
 80020d8:	08002165 	.word	0x08002165
 80020dc:	080021cd 	.word	0x080021cd
 80020e0:	080021f3 	.word	0x080021f3
 80020e4:	08002285 	.word	0x08002285
 80020e8:	080024e7 	.word	0x080024e7
 80020ec:	080024e7 	.word	0x080024e7
 80020f0:	080022ff 	.word	0x080022ff
 80020f4:	0800237d 	.word	0x0800237d
 80020f8:	0800246f 	.word	0x0800246f
    {     
        case ACCEL_VREG_OFFSET:                                     // Accelerometer data has been read
 
            _VREGS._data.ACXD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset]);    // parse data from data offset found in report descriptor
 80020fc:	4b9d      	ldr	r3, [pc, #628]	; (8002374 <parse_update_VREG_data+0x2bc>)
 80020fe:	795b      	ldrb	r3, [r3, #5]
 8002100:	3301      	adds	r3, #1
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	4a9a      	ldr	r2, [pc, #616]	; (8002374 <parse_update_VREG_data+0x2bc>)
 800210c:	7952      	ldrb	r2, [r2, #5]
 800210e:	4611      	mov	r1, r2
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	440a      	add	r2, r1
 8002114:	7812      	ldrb	r2, [r2, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	461a      	mov	r2, r3
 800211a:	4b97      	ldr	r3, [pc, #604]	; (8002378 <parse_update_VREG_data+0x2c0>)
 800211c:	659a      	str	r2, [r3, #88]	; 0x58
            _VREGS._data.ACYD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 2]);
 800211e:	4b95      	ldr	r3, [pc, #596]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002120:	795b      	ldrb	r3, [r3, #5]
 8002122:	3303      	adds	r3, #3
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	4a91      	ldr	r2, [pc, #580]	; (8002374 <parse_update_VREG_data+0x2bc>)
 800212e:	7952      	ldrb	r2, [r2, #5]
 8002130:	3202      	adds	r2, #2
 8002132:	6839      	ldr	r1, [r7, #0]
 8002134:	440a      	add	r2, r1
 8002136:	7812      	ldrb	r2, [r2, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	461a      	mov	r2, r3
 800213c:	4b8e      	ldr	r3, [pc, #568]	; (8002378 <parse_update_VREG_data+0x2c0>)
 800213e:	65da      	str	r2, [r3, #92]	; 0x5c
            _VREGS._data.ACZD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 4]);
 8002140:	4b8c      	ldr	r3, [pc, #560]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002142:	795b      	ldrb	r3, [r3, #5]
 8002144:	3305      	adds	r3, #5
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	4a89      	ldr	r2, [pc, #548]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002150:	7952      	ldrb	r2, [r2, #5]
 8002152:	3204      	adds	r2, #4
 8002154:	6839      	ldr	r1, [r7, #0]
 8002156:	440a      	add	r2, r1
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	461a      	mov	r2, r3
 800215e:	4b86      	ldr	r3, [pc, #536]	; (8002378 <parse_update_VREG_data+0x2c0>)
 8002160:	661a      	str	r2, [r3, #96]	; 0x60
            break;
 8002162:	e1c1      	b.n	80024e8 <parse_update_VREG_data+0x430>

        case GYRO_VREG_OFFSET:                                      // Gyrometer data has been read
 
            _VREGS._data.GYXD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset]);
 8002164:	4b83      	ldr	r3, [pc, #524]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002166:	7b1b      	ldrb	r3, [r3, #12]
 8002168:	3301      	adds	r3, #1
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	4413      	add	r3, r2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	4a80      	ldr	r2, [pc, #512]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002174:	7b12      	ldrb	r2, [r2, #12]
 8002176:	4611      	mov	r1, r2
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	440a      	add	r2, r1
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	461a      	mov	r2, r3
 8002182:	4b7d      	ldr	r3, [pc, #500]	; (8002378 <parse_update_VREG_data+0x2c0>)
 8002184:	671a      	str	r2, [r3, #112]	; 0x70
            _VREGS._data.GYYD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 2]);
 8002186:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002188:	7b1b      	ldrb	r3, [r3, #12]
 800218a:	3303      	adds	r3, #3
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	4a77      	ldr	r2, [pc, #476]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002196:	7b12      	ldrb	r2, [r2, #12]
 8002198:	3202      	adds	r2, #2
 800219a:	6839      	ldr	r1, [r7, #0]
 800219c:	440a      	add	r2, r1
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b74      	ldr	r3, [pc, #464]	; (8002378 <parse_update_VREG_data+0x2c0>)
 80021a6:	675a      	str	r2, [r3, #116]	; 0x74
            _VREGS._data.GYZD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 4]);
 80021a8:	4b72      	ldr	r3, [pc, #456]	; (8002374 <parse_update_VREG_data+0x2bc>)
 80021aa:	7b1b      	ldrb	r3, [r3, #12]
 80021ac:	3305      	adds	r3, #5
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	4a6f      	ldr	r2, [pc, #444]	; (8002374 <parse_update_VREG_data+0x2bc>)
 80021b8:	7b12      	ldrb	r2, [r2, #12]
 80021ba:	3204      	adds	r2, #4
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	440a      	add	r2, r1
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b6c      	ldr	r3, [pc, #432]	; (8002378 <parse_update_VREG_data+0x2c0>)
 80021c8:	679a      	str	r2, [r3, #120]	; 0x78
            break;
 80021ca:	e18d      	b.n	80024e8 <parse_update_VREG_data+0x430>

        case CMP_VREG_OFFSET:                                       // Compass data has been read
  
            _VREGS._data.CMD = ((ucInpRep[SENSOR[CMP_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[CMP_VREG_OFFSET].DatOffset]);
 80021cc:	4b69      	ldr	r3, [pc, #420]	; (8002374 <parse_update_VREG_data+0x2bc>)
 80021ce:	7cdb      	ldrb	r3, [r3, #19]
 80021d0:	3301      	adds	r3, #1
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	4a66      	ldr	r2, [pc, #408]	; (8002374 <parse_update_VREG_data+0x2bc>)
 80021dc:	7cd2      	ldrb	r2, [r2, #19]
 80021de:	4611      	mov	r1, r2
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	440a      	add	r2, r1
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b63      	ldr	r3, [pc, #396]	; (8002378 <parse_update_VREG_data+0x2c0>)
 80021ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            break;
 80021f0:	e17a      	b.n	80024e8 <parse_update_VREG_data+0x430>
        
        case ORI_VREG_OFFSET:                                       // Orientation data has been read

            _VREGS._data.ORXD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset]);
 80021f2:	4b60      	ldr	r3, [pc, #384]	; (8002374 <parse_update_VREG_data+0x2bc>)
 80021f4:	7e9b      	ldrb	r3, [r3, #26]
 80021f6:	3301      	adds	r3, #1
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	4a5c      	ldr	r2, [pc, #368]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002202:	7e92      	ldrb	r2, [r2, #26]
 8002204:	4611      	mov	r1, r2
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	440a      	add	r2, r1
 800220a:	7812      	ldrb	r2, [r2, #0]
 800220c:	4313      	orrs	r3, r2
 800220e:	461a      	mov	r2, r3
 8002210:	4b59      	ldr	r3, [pc, #356]	; (8002378 <parse_update_VREG_data+0x2c0>)
 8002212:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            _VREGS._data.ORYD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 2]);
 8002216:	4b57      	ldr	r3, [pc, #348]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002218:	7e9b      	ldrb	r3, [r3, #26]
 800221a:	3303      	adds	r3, #3
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	4a53      	ldr	r2, [pc, #332]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002226:	7e92      	ldrb	r2, [r2, #26]
 8002228:	3202      	adds	r2, #2
 800222a:	6839      	ldr	r1, [r7, #0]
 800222c:	440a      	add	r2, r1
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	4313      	orrs	r3, r2
 8002232:	461a      	mov	r2, r3
 8002234:	4b50      	ldr	r3, [pc, #320]	; (8002378 <parse_update_VREG_data+0x2c0>)
 8002236:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            _VREGS._data.ORZD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 4]);
 800223a:	4b4e      	ldr	r3, [pc, #312]	; (8002374 <parse_update_VREG_data+0x2bc>)
 800223c:	7e9b      	ldrb	r3, [r3, #26]
 800223e:	3305      	adds	r3, #5
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	4a4a      	ldr	r2, [pc, #296]	; (8002374 <parse_update_VREG_data+0x2bc>)
 800224a:	7e92      	ldrb	r2, [r2, #26]
 800224c:	3204      	adds	r2, #4
 800224e:	6839      	ldr	r1, [r7, #0]
 8002250:	440a      	add	r2, r1
 8002252:	7812      	ldrb	r2, [r2, #0]
 8002254:	4313      	orrs	r3, r2
 8002256:	461a      	mov	r2, r3
 8002258:	4b47      	ldr	r3, [pc, #284]	; (8002378 <parse_update_VREG_data+0x2c0>)
 800225a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
            _VREGS._data.ORWD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 7] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 6]);
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002260:	7e9b      	ldrb	r3, [r3, #26]
 8002262:	3307      	adds	r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	4a41      	ldr	r2, [pc, #260]	; (8002374 <parse_update_VREG_data+0x2bc>)
 800226e:	7e92      	ldrb	r2, [r2, #26]
 8002270:	3206      	adds	r2, #6
 8002272:	6839      	ldr	r1, [r7, #0]
 8002274:	440a      	add	r2, r1
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	4313      	orrs	r3, r2
 800227a:	461a      	mov	r2, r3
 800227c:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <parse_update_VREG_data+0x2c0>)
 800227e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            break;
 8002282:	e131      	b.n	80024e8 <parse_update_VREG_data+0x430>
       
        case INCL_VREG_OFFSET:                                      // Inclinometer data has been read

            _VREGS._data.INXD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset]);
 8002284:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002286:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800228a:	3301      	adds	r3, #1
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	4413      	add	r3, r2
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	4a37      	ldr	r2, [pc, #220]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002296:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800229a:	4611      	mov	r1, r2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	440a      	add	r2, r1
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b34      	ldr	r3, [pc, #208]	; (8002378 <parse_update_VREG_data+0x2c0>)
 80022a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            _VREGS._data.INYD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 2]);
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <parse_update_VREG_data+0x2bc>)
 80022ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022b2:	3303      	adds	r3, #3
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	4a2d      	ldr	r2, [pc, #180]	; (8002374 <parse_update_VREG_data+0x2bc>)
 80022be:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80022c2:	3202      	adds	r2, #2
 80022c4:	6839      	ldr	r1, [r7, #0]
 80022c6:	440a      	add	r2, r1
 80022c8:	7812      	ldrb	r2, [r2, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <parse_update_VREG_data+0x2c0>)
 80022d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
            _VREGS._data.INZD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 4]);
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <parse_update_VREG_data+0x2bc>)
 80022d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022da:	3305      	adds	r3, #5
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	4a23      	ldr	r2, [pc, #140]	; (8002374 <parse_update_VREG_data+0x2bc>)
 80022e6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80022ea:	3204      	adds	r2, #4
 80022ec:	6839      	ldr	r1, [r7, #0]
 80022ee:	440a      	add	r2, r1
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <parse_update_VREG_data+0x2c0>)
 80022f8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
            break;
 80022fc:	e0f4      	b.n	80024e8 <parse_update_VREG_data+0x430>

        case RAW_ACC_VREG_OFFSET:                                   // Raw data has been read
            
            _VREGS._data.RACXD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset]);
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002300:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002304:	3301      	adds	r3, #1
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	4a19      	ldr	r2, [pc, #100]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002310:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8002314:	4611      	mov	r1, r2
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	440a      	add	r2, r1
 800231a:	7812      	ldrb	r2, [r2, #0]
 800231c:	4313      	orrs	r3, r2
 800231e:	461a      	mov	r2, r3
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <parse_update_VREG_data+0x2c0>)
 8002322:	665a      	str	r2, [r3, #100]	; 0x64
            _VREGS._data.RACYD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 2]);
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002326:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800232a:	3303      	adds	r3, #3
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <parse_update_VREG_data+0x2bc>)
 8002336:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800233a:	3202      	adds	r2, #2
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	440a      	add	r2, r1
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	4313      	orrs	r3, r2
 8002344:	461a      	mov	r2, r3
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <parse_update_VREG_data+0x2c0>)
 8002348:	669a      	str	r2, [r3, #104]	; 0x68
            _VREGS._data.RACZD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 4]);
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <parse_update_VREG_data+0x2bc>)
 800234c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002350:	3305      	adds	r3, #5
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	4413      	add	r3, r2
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	4a06      	ldr	r2, [pc, #24]	; (8002374 <parse_update_VREG_data+0x2bc>)
 800235c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8002360:	3204      	adds	r2, #4
 8002362:	6839      	ldr	r1, [r7, #0]
 8002364:	440a      	add	r2, r1
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	461a      	mov	r2, r3
 800236c:	4b02      	ldr	r3, [pc, #8]	; (8002378 <parse_update_VREG_data+0x2c0>)
 800236e:	66da      	str	r2, [r3, #108]	; 0x6c
            break;
 8002370:	e0ba      	b.n	80024e8 <parse_update_VREG_data+0x430>
 8002372:	bf00      	nop
 8002374:	200000b0 	.word	0x200000b0
 8002378:	20000f4c 	.word	0x20000f4c
       
        case RAW_MAG_VREG_OFFSET:                                   // Raw MAG data has been read
            
            _VREGS._data.MGFXD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset]);
 800237c:	4b5d      	ldr	r3, [pc, #372]	; (80024f4 <parse_update_VREG_data+0x43c>)
 800237e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002382:	3301      	adds	r3, #1
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	4413      	add	r3, r2
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	4a59      	ldr	r2, [pc, #356]	; (80024f4 <parse_update_VREG_data+0x43c>)
 800238e:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002392:	4611      	mov	r1, r2
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	440a      	add	r2, r1
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	461a      	mov	r2, r3
 800239e:	4b56      	ldr	r3, [pc, #344]	; (80024f8 <parse_update_VREG_data+0x440>)
 80023a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            _VREGS._data.MGFYD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 2]);
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <parse_update_VREG_data+0x43c>)
 80023a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023aa:	3303      	adds	r3, #3
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	4a4f      	ldr	r2, [pc, #316]	; (80024f4 <parse_update_VREG_data+0x43c>)
 80023b6:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80023ba:	3202      	adds	r2, #2
 80023bc:	6839      	ldr	r1, [r7, #0]
 80023be:	440a      	add	r2, r1
 80023c0:	7812      	ldrb	r2, [r2, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <parse_update_VREG_data+0x440>)
 80023c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            _VREGS._data.MGFZD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 4]);
 80023cc:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <parse_update_VREG_data+0x43c>)
 80023ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d2:	3305      	adds	r3, #5
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	4a45      	ldr	r2, [pc, #276]	; (80024f4 <parse_update_VREG_data+0x43c>)
 80023de:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80023e2:	3204      	adds	r2, #4
 80023e4:	6839      	ldr	r1, [r7, #0]
 80023e6:	440a      	add	r2, r1
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <parse_update_VREG_data+0x440>)
 80023f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            _VREGS._data.RMGXD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 7] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 6]);
 80023f4:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <parse_update_VREG_data+0x43c>)
 80023f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fa:	3307      	adds	r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	4a3b      	ldr	r2, [pc, #236]	; (80024f4 <parse_update_VREG_data+0x43c>)
 8002406:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800240a:	3206      	adds	r2, #6
 800240c:	6839      	ldr	r1, [r7, #0]
 800240e:	440a      	add	r2, r1
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	461a      	mov	r2, r3
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <parse_update_VREG_data+0x440>)
 8002418:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            _VREGS._data.RMGYD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 9] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 8]);
 800241c:	4b35      	ldr	r3, [pc, #212]	; (80024f4 <parse_update_VREG_data+0x43c>)
 800241e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002422:	3309      	adds	r3, #9
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	4a31      	ldr	r2, [pc, #196]	; (80024f4 <parse_update_VREG_data+0x43c>)
 800242e:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002432:	3208      	adds	r2, #8
 8002434:	6839      	ldr	r1, [r7, #0]
 8002436:	440a      	add	r2, r1
 8002438:	7812      	ldrb	r2, [r2, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <parse_update_VREG_data+0x440>)
 8002440:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            _VREGS._data.RMGZD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 11] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 10]);
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <parse_update_VREG_data+0x43c>)
 8002446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244a:	330b      	adds	r3, #11
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <parse_update_VREG_data+0x43c>)
 8002456:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800245a:	320a      	adds	r2, #10
 800245c:	6839      	ldr	r1, [r7, #0]
 800245e:	440a      	add	r2, r1
 8002460:	7812      	ldrb	r2, [r2, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <parse_update_VREG_data+0x440>)
 8002468:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            break;
 800246c:	e03c      	b.n	80024e8 <parse_update_VREG_data+0x430>
        
        case RAW_GYR_VREG_OFFSET:                                   // Raw GYRO data has been read
            
            _VREGS._data.RGYXD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset]);
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <parse_update_VREG_data+0x43c>)
 8002470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002474:	3301      	adds	r3, #1
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4413      	add	r3, r2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <parse_update_VREG_data+0x43c>)
 8002480:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8002484:	4611      	mov	r1, r2
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	440a      	add	r2, r1
 800248a:	7812      	ldrb	r2, [r2, #0]
 800248c:	4313      	orrs	r3, r2
 800248e:	461a      	mov	r2, r3
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <parse_update_VREG_data+0x440>)
 8002492:	67da      	str	r2, [r3, #124]	; 0x7c
            _VREGS._data.RGYYD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 2]);
 8002494:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <parse_update_VREG_data+0x43c>)
 8002496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800249a:	3303      	adds	r3, #3
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <parse_update_VREG_data+0x43c>)
 80024a6:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 80024aa:	3202      	adds	r2, #2
 80024ac:	6839      	ldr	r1, [r7, #0]
 80024ae:	440a      	add	r2, r1
 80024b0:	7812      	ldrb	r2, [r2, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <parse_update_VREG_data+0x440>)
 80024b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            _VREGS._data.RGYZD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 4]);
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <parse_update_VREG_data+0x43c>)
 80024be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c2:	3305      	adds	r3, #5
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <parse_update_VREG_data+0x43c>)
 80024ce:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 80024d2:	3204      	adds	r2, #4
 80024d4:	6839      	ldr	r1, [r7, #0]
 80024d6:	440a      	add	r2, r1
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <parse_update_VREG_data+0x440>)
 80024e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
 80024e4:	e000      	b.n	80024e8 <parse_update_VREG_data+0x430>

        default:
            break;
 80024e6:	bf00      	nop
    }
    return;
 80024e8:	bf00      	nop
}
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	200000b0 	.word	0x200000b0
 80024f8:	20000f4c 	.word	0x20000f4c

080024fc <HOST_SF_LIB_VREG_read>:
* @param ucRegOffset VREG register of interest
* @param usData Ptr for 16 bit value
* @return completion status 0=SUCCESS, failcodes: 0x31=HID_INT_FAIL, 0x33=VREG_OFFSET_ERR,  
*/ 
UINT8 HOST_SF_LIB_VREG_read(UINT8 ucRegOffset, UINT16 *usData)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b090      	sub	sp, #64	; 0x40
 8002500:	af02      	add	r7, sp, #8
 8002502:	4603      	mov	r3, r0
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	71fb      	strb	r3, [r7, #7]
    UINT8 ucRet = FALSE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    UINT8 ucRx_data[BUF_40];
    UINT8 ucSensorNum;
    UINT16 *usRegPtr;                                               // Pointer to individual register

    if (ucRegOffset > VREG_MAX_OFFSET)                              //make sure this is within the VREG register set 
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b3f      	cmp	r3, #63	; 0x3f
 8002512:	d901      	bls.n	8002518 <HOST_SF_LIB_VREG_read+0x1c>
        return VREG_OFFSET_ERR;
 8002514:	2333      	movs	r3, #51	; 0x33
 8002516:	e050      	b.n	80025ba <HOST_SF_LIB_VREG_read+0xbe>

    usRegPtr = (UINT16 *)&_VREGS.SHC;                                // Set the pointer to SHC (VREG00 register)
 8002518:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <HOST_SF_LIB_VREG_read+0xc8>)
 800251a:	633b      	str	r3, [r7, #48]	; 0x30

    if (EC_DATA_AVAIL)                                              //SSC7150 sensor has data available for us to read
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HOST_SF_LIB_VREG_read+0xcc>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d03f      	beq.n	80025a6 <HOST_SF_LIB_VREG_read+0xaa>
    {       
        ucRet = i2c_cmd_WrRd (READ,                                  // Read the data from the SSC7150
 8002526:	2301      	movs	r3, #1
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2303      	movs	r3, #3
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	2002      	movs	r0, #2
 8002538:	f7fe fc44 	bl	8000dc4 <i2c_cmd_WrRd>
 800253c:	4603      	mov	r3, r0
 800253e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                            0,                                      //num of cmd bytes
                            0,                                      //cmd buf (ignored)
                            BYTE_ADJ_VAL,                           //num of bytes to read
                            ucRx_data,                              //recv buf 
                            TRUE);                                  //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"
        if (ucRet) 
 8002542:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HOST_SF_LIB_VREG_read+0x52>
            return HID_INT_FAIL;
 800254a:	2331      	movs	r3, #49	; 0x31
 800254c:	e035      	b.n	80025ba <HOST_SF_LIB_VREG_read+0xbe>

        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data 
 800254e:	2300      	movs	r3, #0
 8002550:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002554:	e023      	b.n	800259e <HOST_SF_LIB_VREG_read+0xa2>
        {              
            if (ucRx_data[2] == SENSOR[ucSensorNum].id)          //1st two bytes of read data packet hold size of packet, then data begins at byte 2
 8002556:	7ab9      	ldrb	r1, [r7, #10]
 8002558:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800255c:	481b      	ldr	r0, [pc, #108]	; (80025cc <HOST_SF_LIB_VREG_read+0xd0>)
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	4403      	add	r3, r0
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4299      	cmp	r1, r3
 800256a:	d113      	bne.n	8002594 <HOST_SF_LIB_VREG_read+0x98>
            {
                if (*usRegPtr & (1 << (ucSensorNum + VREG_SHC_ACC_EN_VAL))) // If the incoming data belongs to an enabled sensor (in SHC (VREGS00))
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002574:	3204      	adds	r2, #4
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f202 	lsl.w	r2, r1, r2
 800257c:	4013      	ands	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HOST_SF_LIB_VREG_read+0x98>
                {
                    parse_update_VREG_data(ucSensorNum, ucRx_data); //store data in appropriate VREG data registers
 8002582:	f107 0208 	add.w	r2, r7, #8
 8002586:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fd93 	bl	80020b8 <parse_update_VREG_data>
                    break;                                          //found correct enabled sensor, no reason to look further
 8002592:	e008      	b.n	80025a6 <HOST_SF_LIB_VREG_read+0xaa>
        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data 
 8002594:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002598:	3301      	adds	r3, #1
 800259a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800259e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025a2:	2b0b      	cmp	r3, #11
 80025a4:	d9d7      	bls.n	8002556 <HOST_SF_LIB_VREG_read+0x5a>
                }
            }            
        }   
    }

    usRegPtr += (UINT16) ucRegOffset;                               //point to VREG specified by input parameter 'ucRegOffset'
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ac:	4413      	add	r3, r2
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
    *usData = *usRegPtr;                                            //return the register contents specified by the read command
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	601a      	str	r2, [r3, #0]
    return SUCCESS;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3738      	adds	r7, #56	; 0x38
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000f4c 	.word	0x20000f4c
 80025c8:	2000008c 	.word	0x2000008c
 80025cc:	200000b0 	.word	0x200000b0

080025d0 <HOST_SF_LIB_VREG_write>:
* @param ucRegOffset VREG register of interest
* @param usData Data to be written to device
* @return completion status 0=SUCCESS, failcodes: 0x32=VREG_ACCESS_ERR, 0x33=VREG_OFFSET_ERR, 0x31=HID_INT_FAIL, 0x17=SET_FEAT_FAIL, 0x18=RESET_FAIL, 0x1E=WAKE_CMD_FAIL, 0x1B=SLEEP_CMD_FAIL 
*/ 
UINT8 HOST_SF_LIB_VREG_write(UINT8 ucRegOffset, UINT16 usData)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b094      	sub	sp, #80	; 0x50
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	4603      	mov	r3, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	71fb      	strb	r3, [r7, #7]
    UINT8 ucRet = FALSE;
 80025dc:	2300      	movs	r3, #0
 80025de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    UINT16 *usRegPtr, *usStat_ptr, *usSHC_ptr;                      // Pointer to individual register
    UINT16 usMask;
    UINT8 ucRx_data[BUF_40];                                        // local buffer for i2c comm
    UINT8 ucId = 0xFF;
 80025e2:	23ff      	movs	r3, #255	; 0xff
 80025e4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    UINT8 ucBitOffset, ucAdjustedPtr, ucSensorNum, usTmpStatptr, ucTmpStatVal, ucTmpPtr;


    if (ucRegOffset > VREG_MAX_OFFSET)                              //make sure this is within the VREG register set 
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2b3f      	cmp	r3, #63	; 0x3f
 80025ec:	d901      	bls.n	80025f2 <HOST_SF_LIB_VREG_write+0x22>
        return VREG_OFFSET_ERR;
 80025ee:	2333      	movs	r3, #51	; 0x33
 80025f0:	e3a9      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>

    if ( (ucRegOffset == VREG_SL || (ucRegOffset >= VREG_ACXD && ucRegOffset <= VREG_EXPCSS3) ) ) // If the requested register is READ ONLY, return an error
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d005      	beq.n	8002604 <HOST_SF_LIB_VREG_write+0x34>
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	2b15      	cmp	r3, #21
 80025fc:	d904      	bls.n	8002608 <HOST_SF_LIB_VREG_write+0x38>
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	2b3e      	cmp	r3, #62	; 0x3e
 8002602:	d801      	bhi.n	8002608 <HOST_SF_LIB_VREG_write+0x38>
         return VREG_ACCESS_ERR;
 8002604:	2332      	movs	r3, #50	; 0x32
 8002606:	e39e      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>

    usSHC_ptr = (UINT16 *)&_VREGS.SHC;                               // Set pointers to SHC (VREG00 register)
 8002608:	4ba9      	ldr	r3, [pc, #676]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
  
    usPREV_SHC_STATE = *usSHC_ptr;                                  //save previous state of SHC VREG contents for comparison 
 800260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4aa8      	ldr	r2, [pc, #672]	; (80028b4 <HOST_SF_LIB_VREG_write+0x2e4>)
 8002612:	6013      	str	r3, [r2, #0]

    usRegPtr = usSHC_ptr + (UINT16)ucRegOffset;                     //point to VREG specified by input parameter 'ucRegOffset'
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800261a:	4413      	add	r3, r2
 800261c:	637b      	str	r3, [r7, #52]	; 0x34

    if (_VREGS.SHC.SHstart)                                          // this bit set during VREG_init and after RESET (no user access to this bit)
 800261e:	4ba4      	ldr	r3, [pc, #656]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8346 	beq.w	8002cba <HOST_SF_LIB_VREG_write+0x6ea>
    { 
        SET_PARAMS.ucPowerState = FULL_POWER;                       //initialize parameters for SetFeature call (NOTE: set to LOW_POWER when disabling sensor)
 800262e:	4ba2      	ldr	r3, [pc, #648]	; (80028b8 <HOST_SF_LIB_VREG_write+0x2e8>)
 8002630:	2202      	movs	r2, #2
 8002632:	705a      	strb	r2, [r3, #1]
        SET_PARAMS.bSensitivityValid = FALSE;
 8002634:	4ba0      	ldr	r3, [pc, #640]	; (80028b8 <HOST_SF_LIB_VREG_write+0x2e8>)
 8002636:	2200      	movs	r2, #0
 8002638:	721a      	strb	r2, [r3, #8]
        SET_PARAMS.bDataRateValid = FALSE;
 800263a:	4b9f      	ldr	r3, [pc, #636]	; (80028b8 <HOST_SF_LIB_VREG_write+0x2e8>)
 800263c:	2200      	movs	r2, #0
 800263e:	741a      	strb	r2, [r3, #16]
        
        if (ucRegOffset == VREG_SHC)                                // If the command will be written to the SHC register
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 819b 	bne.w	800297e <HOST_SF_LIB_VREG_write+0x3ae>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Set the status register pointer to the first status register
 8002648:	4b9c      	ldr	r3, [pc, #624]	; (80028bc <HOST_SF_LIB_VREG_write+0x2ec>)
 800264a:	647b      	str	r3, [r7, #68]	; 0x44

       /*****************RESET COMMAND********************/
            if (usData & VREG_SHC_RST_BIT)                          // Reset bit has been set
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02a      	beq.n	80026ac <HOST_SF_LIB_VREG_write+0xdc>
            {
                if (!hid_i2c_cmd_process(0, RESET_DEV_CMD, ARB_ID)) // Issue the reset command (parameters 1 and 3 are not used)
 8002656:	2201      	movs	r2, #1
 8002658:	2101      	movs	r1, #1
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe fe1a 	bl	8001294 <hid_i2c_cmd_process>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d119      	bne.n	800269a <HOST_SF_LIB_VREG_write+0xca>
                {
                    memset(&_VREGS, 0x00, sizeof(_VREGS));            // Initialize VREG registers to POR values
 8002666:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800266a:	2100      	movs	r1, #0
 800266c:	4890      	ldr	r0, [pc, #576]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 800266e:	f005 fb15 	bl	8007c9c <memset>
                    _VREGS.stat.stat4.ResetStatus = VREG_RST_CMD_SUCCESS; // Status update to notify command set succesful
 8002672:	4a8f      	ldr	r2, [pc, #572]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 8002674:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8002678:	2101      	movs	r1, #1
 800267a:	f361 1346 	bfi	r3, r1, #5, #2
 800267e:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
                    _VREGS.SHC.SHstart = TRUE;
 8002682:	4a8b      	ldr	r2, [pc, #556]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 8002684:	7813      	ldrb	r3, [r2, #0]
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	7013      	strb	r3, [r2, #0]
                    _VREGS.SHC.SHwake = TRUE;
 800268c:	4a88      	ldr	r2, [pc, #544]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 800268e:	7813      	ldrb	r3, [r2, #0]
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	7013      	strb	r3, [r2, #0]
                    return SUCCESS;                                 //return success (all VREG bits have been reset to POR values)
 8002696:	2300      	movs	r3, #0
 8002698:	e355      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>
                }
                else
                {
                    _VREGS.stat.stat4.ResetStatus = VREG_RESET_CMD_FAIL; // Status update to notify command set error occurred
 800269a:	4a85      	ldr	r2, [pc, #532]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 800269c:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 80026a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026a4:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
                    return RESET_FAIL;
 80026a8:	2318      	movs	r3, #24
 80026aa:	e34c      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>
                }
            }

       /*****************WAKE COMMAND********************/
            if (usData & VREG_SHC_WAKE_BIT)                         // wake bit set?
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d032      	beq.n	800271c <HOST_SF_LIB_VREG_write+0x14c>
            {
                if ((usPREV_SHC_STATE & VREG_SHC_WAKE_BIT) == 0)    // this bit was not previously set, issue wake command
 80026b6:	4b7f      	ldr	r3, [pc, #508]	; (80028b4 <HOST_SF_LIB_VREG_write+0x2e4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d12c      	bne.n	800271c <HOST_SF_LIB_VREG_write+0x14c>
                {
                    Wake_signal();                                   //assert wake signal (1 ms toggle of RE9 signal to SSC150)
 80026c2:	f7ff fbb3 	bl	8001e2c <Wake_signal>

                    HAL_Delay(12);                                      //wait 12 ms (11 ms min per spec) after wake signal and before sending POWER_ON command to SSC7150
 80026c6:	200c      	movs	r0, #12
 80026c8:	f000 ffda 	bl	8003680 <HAL_Delay>
                                        
                    if (!hid_i2c_cmd_process(0, POWER_ON, ARB_ID))  // Issue the wake command (parameters 1 and 3 are not used)
 80026cc:	2201      	movs	r2, #1
 80026ce:	2102      	movs	r1, #2
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe fddf 	bl	8001294 <hid_i2c_cmd_process>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d115      	bne.n	8002708 <HOST_SF_LIB_VREG_write+0x138>
                    {
                        _VREGS.SHC.sleep = FALSE;                    //clear the sleep bit as per API spec
 80026dc:	4a74      	ldr	r2, [pc, #464]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 80026de:	7813      	ldrb	r3, [r2, #0]
 80026e0:	f36f 0341 	bfc	r3, #1, #1
 80026e4:	7013      	strb	r3, [r2, #0]
                        _VREGS.SHC.SHwake = TRUE;
 80026e6:	4a72      	ldr	r2, [pc, #456]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 80026e8:	7813      	ldrb	r3, [r2, #0]
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	7013      	strb	r3, [r2, #0]
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_WAKE_SUCCESS; // Status update to notify command set succesful
 80026f0:	4a6f      	ldr	r2, [pc, #444]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 80026f2:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 80026f6:	2102      	movs	r1, #2
 80026f8:	f361 13c9 	bfi	r3, r1, #7, #3
 80026fc:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                                                
                        //spec says must wait a minimum of 30 ms before next command to SSC7150, so let's wait here...
                        HAL_Delay(31);                                  //dDlay_ms 31 ms (30 ms min per spec)
 8002700:	201f      	movs	r0, #31
 8002702:	f000 ffbd 	bl	8003680 <HAL_Delay>
 8002706:	e009      	b.n	800271c <HOST_SF_LIB_VREG_write+0x14c>
                    }
                    else
                    {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_WAKE_FAIL; // Status update to notify command set error occurred
 8002708:	4a69      	ldr	r2, [pc, #420]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 800270a:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 800270e:	2106      	movs	r1, #6
 8002710:	f361 13c9 	bfi	r3, r1, #7, #3
 8002714:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        return WAKE_CMD_FAIL;
 8002718:	231e      	movs	r3, #30
 800271a:	e314      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>
                    }
                }
            }
            
            /*****************SLEEP COMMAND********************/
            if (usData & VREG_SHC_SLP_BIT)                          //sleep bit set?
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03a      	beq.n	800279c <HOST_SF_LIB_VREG_write+0x1cc>
            {
                //check if any sensors are enabled, if they are then CLEAR SHC Sleep bit and return without setting status bit as per API spec
                if ( (usData & ~(VREG_SHC_SLP_BIT | VREG_SHC_START_BIT) ) > (VREG_SHC_SLP_BIT | VREG_SHC_START_BIT | VREG_SHC_WAKE_BIT) )
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f023 0306 	bic.w	r3, r3, #6
 800272c:	2b07      	cmp	r3, #7
 800272e:	d906      	bls.n	800273e <HOST_SF_LIB_VREG_write+0x16e>
                {
                    _VREGS.SHC.sleep = FALSE;
 8002730:	4a5f      	ldr	r2, [pc, #380]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 8002732:	7813      	ldrb	r3, [r2, #0]
 8002734:	f36f 0341 	bfc	r3, #1, #1
 8002738:	7013      	strb	r3, [r2, #0]
                    return SUCCESS;                                 //although the sleep command wasn't issued, don't return any error because user shouldn't issue sleep with any sensors enabled
 800273a:	2300      	movs	r3, #0
 800273c:	e303      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>
                }

                if ((usPREV_SHC_STATE & VREG_SHC_SLP_BIT) == 0)     // this bit was not previously set, issue sleep command
 800273e:	4b5d      	ldr	r3, [pc, #372]	; (80028b4 <HOST_SF_LIB_VREG_write+0x2e4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d128      	bne.n	800279c <HOST_SF_LIB_VREG_write+0x1cc>
                {
                    if (!hid_i2c_cmd_process(0, SLEEP, ARB_ID))     // Issue the sleep command (parameters 1 and 3 are not used)
 800274a:	2201      	movs	r2, #1
 800274c:	2103      	movs	r1, #3
 800274e:	2000      	movs	r0, #0
 8002750:	f7fe fda0 	bl	8001294 <hid_i2c_cmd_process>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <HOST_SF_LIB_VREG_write+0x1b8>
                    {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_SLEEP_SUCCESS; // Status update to notify command set succesful
 800275a:	4a55      	ldr	r2, [pc, #340]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 800275c:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 8002760:	2101      	movs	r1, #1
 8002762:	f361 13c9 	bfi	r3, r1, #7, #3
 8002766:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        _VREGS.SHC.sleep = TRUE;                     // Set SHC (VREG00) to show SSC7150 device is asleep   
 800276a:	4a51      	ldr	r2, [pc, #324]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 800276c:	7813      	ldrb	r3, [r2, #0]
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	7013      	strb	r3, [r2, #0]
                        _VREGS.SHC.SHwake = FALSE;                   // Clear SHC (VREG00) bit that shows device is not awake
 8002774:	4a4e      	ldr	r2, [pc, #312]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 8002776:	7813      	ldrb	r3, [r2, #0]
 8002778:	f36f 0300 	bfc	r3, #0, #1
 800277c:	7013      	strb	r3, [r2, #0]
                        
                        //spec says must wait a minimum of 70 ms before wake command, so let's wait here...
                        HAL_Delay(71);                                  //dDlay_ms 71 ms (70 ms min per spec)
 800277e:	2047      	movs	r0, #71	; 0x47
 8002780:	f000 ff7e 	bl	8003680 <HAL_Delay>
                                                
                        return SUCCESS;                             // no need to continue checking (since we already checked if any sensors were enabled) and we won't wake & sleep at the same time
 8002784:	2300      	movs	r3, #0
 8002786:	e2de      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>
                   }
                   else
                   {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_SLEEP_FAIL;  // Status update to notify command set error occurred
 8002788:	4a49      	ldr	r2, [pc, #292]	; (80028b0 <HOST_SF_LIB_VREG_write+0x2e0>)
 800278a:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 800278e:	2105      	movs	r1, #5
 8002790:	f361 13c9 	bfi	r3, r1, #7, #3
 8002794:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        return SLEEP_CMD_FAIL;
 8002798:	231b      	movs	r3, #27
 800279a:	e2d4      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>
                   }
                }
            }

        /*****************ENABLE SENSOR COMMANDS********************/
            ucTmpStatVal = 0;                                       //initialize for the case of disabling ALL sensors
 800279c:	2300      	movs	r3, #0
 800279e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            
            for (ucBitOffset = VREG_SHC_ACC_EN_VAL; ucBitOffset <= VREG_SHC_RAWGYR_EN_VAL; ucBitOffset++) // Runs through bits relevant to sensor enable/disable (in VREG00) and executes command
 80027a2:	2304      	movs	r3, #4
 80027a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80027a8:	e0de      	b.n	8002968 <HOST_SF_LIB_VREG_write+0x398>
            {
                ucAdjustedPtr = ucBitOffset;
 80027aa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80027ae:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            
                if (ucBitOffset == VREG_SHC_RAWMAG_EN_VAL)          // bit 12 in VREG00 corresponds to Raw Mag. This is bit0 of VREG3D (Stat2)
 80027b2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80027b6:	2b0c      	cmp	r3, #12
 80027b8:	d102      	bne.n	80027c0 <HOST_SF_LIB_VREG_write+0x1f0>
                    usStat_ptr++;                                   //  so we need to increment the status reg pointer
 80027ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027bc:	3304      	adds	r3, #4
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
            
                if ( ((1 << ucBitOffset) & usData) || (usPREV_SHC_STATE & (1 << ucBitOffset)) ) //is enable bit set now OR was it previously set?
 80027c0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80027c4:	2201      	movs	r2, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <HOST_SF_LIB_VREG_write+0x21c>
 80027d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80027d8:	2201      	movs	r2, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HOST_SF_LIB_VREG_write+0x2e4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80b9 	beq.w	800295e <HOST_SF_LIB_VREG_write+0x38e>
                {

                    usTmpStatptr = ucBitOffset;                     // do some pre-calculation for sensor stat bit position
 80027ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80027f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

                    if (usTmpStatptr >= VREG_SHC_RAWMAG_EN_VAL)     // Set appropriate offset if the sensor falls in stat2
 80027f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027f8:	2b0b      	cmp	r3, #11
 80027fa:	d904      	bls.n	8002806 <HOST_SF_LIB_VREG_write+0x236>
                        usTmpStatptr = ucBitOffset - 8;
 80027fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002800:	3b08      	subs	r3, #8
 8002802:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    ucTmpStatVal = VREG_ENABLE_SUCCESS;             // success status value for VREG status reg
 8002806:	2301      	movs	r3, #1
 8002808:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


                    if ((1 << ucBitOffset) & usData)                // this sensor's enable bit is set
 800280c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002810:	2201      	movs	r2, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	461a      	mov	r2, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d051      	beq.n	80028c4 <HOST_SF_LIB_VREG_write+0x2f4>
                    {
                        if ((usPREV_SHC_STATE & (1 << ucBitOffset)) == 0) // this bit was not previously set, need to set this sensor to FULL_POWER      
 8002820:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002824:	2201      	movs	r2, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	461a      	mov	r2, r3
 800282c:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <HOST_SF_LIB_VREG_write+0x2e4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 8093 	bne.w	800295e <HOST_SF_LIB_VREG_write+0x38e>
                        {                           
                            SET_PARAMS.ucid = SENSOR[ucAdjustedPtr - VREG_SHC_ACC_EN_VAL].id;
 8002838:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800283c:	1f1a      	subs	r2, r3, #4
 800283e:	4920      	ldr	r1, [pc, #128]	; (80028c0 <HOST_SF_LIB_VREG_write+0x2f0>)
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	440b      	add	r3, r1
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HOST_SF_LIB_VREG_write+0x2e8>)
 800284c:	701a      	strb	r2, [r3, #0]
                            
                            if (set_state_data(SET_PARAMS))         // Set this sensor to FULL POWER
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <HOST_SF_LIB_VREG_write+0x2e8>)
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	9200      	str	r2, [sp, #0]
 8002854:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002856:	f7ff fb9f 	bl	8001f98 <set_state_data>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HOST_SF_LIB_VREG_write+0x296>
                                ucTmpStatVal = VREG_ENA_DIS_FAIL;   // Error occurred, write an error code to the sensor status register
 8002860:	2303      	movs	r3, #3
 8002862:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                            *usStat_ptr &= ~(STATUS1_MASK << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); //clear stat bits before updating
 8002866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800286e:	3a04      	subs	r2, #4
 8002870:	0052      	lsls	r2, r2, #1
 8002872:	2103      	movs	r1, #3
 8002874:	fa01 f202 	lsl.w	r2, r1, r2
 8002878:	43d2      	mvns	r2, r2
 800287a:	401a      	ands	r2, r3
 800287c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800287e:	601a      	str	r2, [r3, #0]
                            *usStat_ptr |= (ucTmpStatVal << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL)));  // Write applicable status value to VREG status register
 8002880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8002888:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800288c:	3a04      	subs	r2, #4
 800288e:	0052      	lsls	r2, r2, #1
 8002890:	fa01 f202 	lsl.w	r2, r1, r2
 8002894:	431a      	orrs	r2, r3
 8002896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002898:	601a      	str	r2, [r3, #0]
                            *usSHC_ptr |= (1 << ucBitOffset);       // Set the sensor enable bit in VREG00          
 800289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f202 	lsl.w	r2, r1, r2
 80028a8:	431a      	orrs	r2, r3
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e056      	b.n	800295e <HOST_SF_LIB_VREG_write+0x38e>
 80028b0:	20000f4c 	.word	0x20000f4c
 80028b4:	2000106c 	.word	0x2000106c
 80028b8:	20001058 	.word	0x20001058
 80028bc:	20001048 	.word	0x20001048
 80028c0:	200000b0 	.word	0x200000b0
                        }
                        //else if this sensor's enable bit was previously set, no need to do anything 
                    }

                    else if (usPREV_SHC_STATE & (1 << ucBitOffset)) // this sensor's enable bit is not set now, but it was enabled previously, send LOW POWER command 
 80028c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80028c8:	2201      	movs	r2, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	4bac      	ldr	r3, [pc, #688]	; (8002b84 <HOST_SF_LIB_VREG_write+0x5b4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d041      	beq.n	800295e <HOST_SF_LIB_VREG_write+0x38e>
                    {
                        ucTmpStatVal = VREG_DISABLE_SUCCESS;        //successful disable status value
 80028da:	2302      	movs	r3, #2
 80028dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                        SET_PARAMS.ucid = SENSOR[ucAdjustedPtr - VREG_SHC_ACC_EN_VAL].id;
 80028e0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80028e4:	1f1a      	subs	r2, r3, #4
 80028e6:	49a8      	ldr	r1, [pc, #672]	; (8002b88 <HOST_SF_LIB_VREG_write+0x5b8>)
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	4ba6      	ldr	r3, [pc, #664]	; (8002b8c <HOST_SF_LIB_VREG_write+0x5bc>)
 80028f4:	701a      	strb	r2, [r3, #0]
                        SET_PARAMS.ucPowerState = LOW_POWER;        //set sensor to LOW POWER
 80028f6:	4ba5      	ldr	r3, [pc, #660]	; (8002b8c <HOST_SF_LIB_VREG_write+0x5bc>)
 80028f8:	2203      	movs	r2, #3
 80028fa:	705a      	strb	r2, [r3, #1]
                        if (set_state_data(SET_PARAMS))             // Sensor should be disabled
 80028fc:	4ba3      	ldr	r3, [pc, #652]	; (8002b8c <HOST_SF_LIB_VREG_write+0x5bc>)
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	9200      	str	r2, [sp, #0]
 8002902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002904:	f7ff fb48 	bl	8001f98 <set_state_data>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HOST_SF_LIB_VREG_write+0x344>
                            ucTmpStatVal = VREG_ENA_DIS_FAIL;       // Error occurred, write an error code to the sensor status register
 800290e:	2303      	movs	r3, #3
 8002910:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                        *usStat_ptr &= ~(STATUS1_MASK << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); //clear stat bits before updating
 8002914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800291c:	3a04      	subs	r2, #4
 800291e:	0052      	lsls	r2, r2, #1
 8002920:	2103      	movs	r1, #3
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	43d2      	mvns	r2, r2
 8002928:	401a      	ands	r2, r3
 800292a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292c:	601a      	str	r2, [r3, #0]
                        *usStat_ptr |= (ucTmpStatVal << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); // Write appropriate status value to the status register
 800292e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8002936:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800293a:	3a04      	subs	r2, #4
 800293c:	0052      	lsls	r2, r2, #1
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	431a      	orrs	r2, r3
 8002944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002946:	601a      	str	r2, [r3, #0]
                        *usSHC_ptr &= ~(1 << ucBitOffset);          // Clear the sensor enable bit in VREG00        
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8002950:	2101      	movs	r1, #1
 8002952:	fa01 f202 	lsl.w	r2, r1, r2
 8002956:	43d2      	mvns	r2, r2
 8002958:	401a      	ands	r2, r3
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	601a      	str	r2, [r3, #0]
            for (ucBitOffset = VREG_SHC_ACC_EN_VAL; ucBitOffset <= VREG_SHC_RAWGYR_EN_VAL; ucBitOffset++) // Runs through bits relevant to sensor enable/disable (in VREG00) and executes command
 800295e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002962:	3301      	adds	r3, #1
 8002964:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8002968:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800296c:	2b0d      	cmp	r3, #13
 800296e:	f67f af1c 	bls.w	80027aa <HOST_SF_LIB_VREG_write+0x1da>
                    }
                }
            }
            
            if (ucTmpStatVal == VREG_ENA_DIS_FAIL) 
 8002972:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002976:	2b03      	cmp	r3, #3
 8002978:	d101      	bne.n	800297e <HOST_SF_LIB_VREG_write+0x3ae>
                return SET_FEAT_FAIL;
 800297a:	2317      	movs	r3, #23
 800297c:	e1e3      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>
        }   //end of SHC register

    /*****************SENSITIVITY-CHANGE COMMAND********************/
        if (ucRegOffset >= VREG_ACSEN && ucRegOffset <= VREG_RGYSEN) // data will be written to VREG sensitivity register
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	2b01      	cmp	r3, #1
 8002982:	f240 80a1 	bls.w	8002ac8 <HOST_SF_LIB_VREG_write+0x4f8>
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	2b0b      	cmp	r3, #11
 800298a:	f200 809d 	bhi.w	8002ac8 <HOST_SF_LIB_VREG_write+0x4f8>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Reset the status register pointer to the first status register (VREG3C)
 800298e:	4b80      	ldr	r3, [pc, #512]	; (8002b90 <HOST_SF_LIB_VREG_write+0x5c0>)
 8002990:	647b      	str	r3, [r7, #68]	; 0x44
            usStat_ptr++;                                           // Increment to status register (VREG3D) for change in sensitivity (CS) stat bits
 8002992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002994:	3304      	adds	r3, #4
 8002996:	647b      	str	r3, [r7, #68]	; 0x44
        
            for (ucTmpPtr = VREG_ACSEN; ucTmpPtr <= VREG_RGYSEN; ucTmpPtr++) // Loop through the VREG sensitivity registers
 8002998:	2302      	movs	r3, #2
 800299a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800299e:	e024      	b.n	80029ea <HOST_SF_LIB_VREG_write+0x41a>
            {
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 80029a0:	79fa      	ldrb	r2, [r7, #7]
 80029a2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d11a      	bne.n	80029e0 <HOST_SF_LIB_VREG_write+0x410>
                    (*usSHC_ptr & (1 << (ucTmpPtr + VREG_ACSEN))) )
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80029b2:	3202      	adds	r2, #2
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ba:	4013      	ands	r3, r2
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00f      	beq.n	80029e0 <HOST_SF_LIB_VREG_write+0x410>
                {
                    ucAdjustedPtr = ucTmpPtr - VREG_ACSEN;          //offset from first sensitivity VREG
 80029c0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80029c4:	3b02      	subs	r3, #2
 80029c6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                    
                    ucId = SENSOR[ucAdjustedPtr].id;                // Set variable equal to id of current sensor
 80029ca:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80029ce:	496e      	ldr	r1, [pc, #440]	; (8002b88 <HOST_SF_LIB_VREG_write+0x5b8>)
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                    break;
 80029de:	e008      	b.n	80029f2 <HOST_SF_LIB_VREG_write+0x422>
            for (ucTmpPtr = VREG_ACSEN; ucTmpPtr <= VREG_RGYSEN; ucTmpPtr++) // Loop through the VREG sensitivity registers
 80029e0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80029e4:	3301      	adds	r3, #1
 80029e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80029ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80029ee:	2b0b      	cmp	r3, #11
 80029f0:	d9d6      	bls.n	80029a0 <HOST_SF_LIB_VREG_write+0x3d0>
                }
            }
            
            if ((ucTmpPtr - VREG_ACSEN) < 4)                        // Sensitivity status of accel, gyro, compass, and orientation, are in VREG 0x3D (3-bits each) starting at bit 4
 80029f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d809      	bhi.n	8002a0e <HOST_SF_LIB_VREG_write+0x43e>
                ucAdjustedPtr = (3*ucAdjustedPtr) + 4;              // calculate proper ptr value
 80029fa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80029fe:	461a      	mov	r2, r3
 8002a00:	0052      	lsls	r2, r2, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	3304      	adds	r3, #4
 8002a08:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002a0c:	e01a      	b.n	8002a44 <HOST_SF_LIB_VREG_write+0x474>
                    
            else if ((ucTmpPtr - VREG_ACSEN) >= 4 && (ucTmpPtr - VREG_ACSEN) < 9) //Sensitivity status of inclinometer, 2 reserved sensors, raw accelerometr, and raw manometer are in VREG 0x3E
 8002a0e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d910      	bls.n	8002a38 <HOST_SF_LIB_VREG_write+0x468>
 8002a16:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002a1a:	2b0a      	cmp	r3, #10
 8002a1c:	d80c      	bhi.n	8002a38 <HOST_SF_LIB_VREG_write+0x468>
            {
                usStat_ptr++;                                       // point to next VREG status register (VREG3E)
 8002a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a20:	3304      	adds	r3, #4
 8002a22:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 3 * (-(4 - (ucTmpPtr - VREG_ACSEN))); // calculate proper ptr value
 8002a24:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002a28:	461a      	mov	r2, r3
 8002a2a:	0052      	lsls	r2, r2, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	3b12      	subs	r3, #18
 8002a32:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002a36:	e005      	b.n	8002a44 <HOST_SF_LIB_VREG_write+0x474>
            }

            else                                                    
            {                                                       // Last sensor (raw gyrometer) is in VREG 0x3F
                usStat_ptr += 2;                                    // pointer to last VREG status register
 8002a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            SET_PARAMS.ucid = ucId;
 8002a44:	4a51      	ldr	r2, [pc, #324]	; (8002b8c <HOST_SF_LIB_VREG_write+0x5bc>)
 8002a46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002a4a:	7013      	strb	r3, [r2, #0]
            SET_PARAMS.bSensitivityValid = TRUE;                    //update with valid sensitivity value
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <HOST_SF_LIB_VREG_write+0x5bc>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	721a      	strb	r2, [r3, #8]
            SET_PARAMS.usSensitivityVal = usData;
 8002a52:	4a4e      	ldr	r2, [pc, #312]	; (8002b8c <HOST_SF_LIB_VREG_write+0x5bc>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6053      	str	r3, [r2, #4]
 
            if (set_state_data(SET_PARAMS))                         // If sensor is enabled, sensitivity register will be written to
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HOST_SF_LIB_VREG_write+0x5bc>)
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a60:	f7ff fa9a 	bl	8001f98 <set_state_data>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HOST_SF_LIB_VREG_write+0x4c8>
            {
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them 
 8002a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002a72:	2107      	movs	r1, #7
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	43d2      	mvns	r2, r2
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a7e:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_SENS_FAIL << ucAdjustedPtr);   // Set status bits with Update Sensitivity error (one-shot status that is only valid immediately after a VREGWrite to Sensitivity update because it is shared with Data Rate update)
 8002a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002a88:	2105      	movs	r1, #5
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a92:	601a      	str	r2, [r3, #0]
                return SET_FEAT_FAIL;
 8002a94:	2317      	movs	r3, #23
 8002a96:	e156      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>
            }
            
            else
            {
                *usRegPtr = usData;                                 // write succesful, update new sensitivity value in sensitivity register
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	601a      	str	r2, [r3, #0]
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them            
 8002a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002aa6:	2107      	movs	r1, #7
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	43d2      	mvns	r2, r2
 8002aae:	401a      	ands	r2, r3
 8002ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab2:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_SENS_SUCCESS << ucAdjustedPtr); // set status bits with Update Sensitivity Success status (one-shot status that is only valid immediately after a VREGWrite to Sensitivity update because it is shared with Data Rate update)
 8002ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002abc:	2101      	movs	r1, #1
 8002abe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac6:	601a      	str	r2, [r3, #0]
            }
        }                                                           //end of SENSITIVITY command
    
    /*****************DATA-RATE-CHANGE COMMAND********************/
        if (ucRegOffset >= VREG_ACDXR && ucRegOffset <= VREG_RGYDR) // data will be written to VREG data rate register
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	2b0b      	cmp	r3, #11
 8002acc:	f240 80aa 	bls.w	8002c24 <HOST_SF_LIB_VREG_write+0x654>
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	2b15      	cmp	r3, #21
 8002ad4:	f200 80a6 	bhi.w	8002c24 <HOST_SF_LIB_VREG_write+0x654>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Set the status register pointer to the first status register
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HOST_SF_LIB_VREG_write+0x5c0>)
 8002ada:	647b      	str	r3, [r7, #68]	; 0x44
            usStat_ptr++;                                           // Increment to status register (VREG3D) for data rate stat bits
 8002adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ade:	3304      	adds	r3, #4
 8002ae0:	647b      	str	r3, [r7, #68]	; 0x44

            for(ucTmpPtr = VREG_ACDXR; ucTmpPtr <= VREG_RGYDR; ucTmpPtr++) // Loop through VREG data rate registers
 8002ae2:	230c      	movs	r3, #12
 8002ae4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002ae8:	e024      	b.n	8002b34 <HOST_SF_LIB_VREG_write+0x564>
            {
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 8002aea:	79fa      	ldrb	r2, [r7, #7]
 8002aec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d11a      	bne.n	8002b2a <HOST_SF_LIB_VREG_write+0x55a>
                    (*usSHC_ptr & (1 << (ucTmpPtr - 8))) )
 8002af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002afc:	3a08      	subs	r2, #8
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	4013      	ands	r3, r2
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00f      	beq.n	8002b2a <HOST_SF_LIB_VREG_write+0x55a>
                {
                    ucAdjustedPtr = ucTmpPtr - VREG_ACDXR;          //offset from first data rate VREG
 8002b0a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002b0e:	3b0c      	subs	r3, #12
 8002b10:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                    

                    ucId = SENSOR[ucAdjustedPtr].id;                // Set variable equal to id of current sensor
 8002b14:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002b18:	491b      	ldr	r1, [pc, #108]	; (8002b88 <HOST_SF_LIB_VREG_write+0x5b8>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	440b      	add	r3, r1
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                    break;
 8002b28:	e008      	b.n	8002b3c <HOST_SF_LIB_VREG_write+0x56c>
            for(ucTmpPtr = VREG_ACDXR; ucTmpPtr <= VREG_RGYDR; ucTmpPtr++) // Loop through VREG data rate registers
 8002b2a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002b34:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002b38:	2b15      	cmp	r3, #21
 8002b3a:	d9d6      	bls.n	8002aea <HOST_SF_LIB_VREG_write+0x51a>
                }
            }
            
            if ((ucTmpPtr - VREG_ACDXR) < 4)                        // Data rate status of accel, gyro, compass, and orientation, are in VREG 0x3D (3-bits each) starting at bit 4
 8002b3c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	d809      	bhi.n	8002b58 <HOST_SF_LIB_VREG_write+0x588>
                ucAdjustedPtr = (3*ucAdjustedPtr) + 4;              // calculate proper ptr value
 8002b44:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002b48:	461a      	mov	r2, r3
 8002b4a:	0052      	lsls	r2, r2, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	3304      	adds	r3, #4
 8002b52:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002b56:	e023      	b.n	8002ba0 <HOST_SF_LIB_VREG_write+0x5d0>
                
            else if ((ucTmpPtr - VREG_ACDXR) >= 4 && (ucTmpPtr - VREG_ACDXR) < 9) //Data rate status of inclinometer, 2 reserved sensors, raw accelerometr, and raw manometer are found in VREG 0x3E
 8002b58:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002b5c:	2b0f      	cmp	r3, #15
 8002b5e:	d919      	bls.n	8002b94 <HOST_SF_LIB_VREG_write+0x5c4>
 8002b60:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002b64:	2b14      	cmp	r3, #20
 8002b66:	d815      	bhi.n	8002b94 <HOST_SF_LIB_VREG_write+0x5c4>
            {
                usStat_ptr++;                                       // point to next VREG status register
 8002b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 3 * (-(4 - (ucTmpPtr - VREG_ACDXR))); // calculate proper ptr value
 8002b6e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002b72:	461a      	mov	r2, r3
 8002b74:	0052      	lsls	r2, r2, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3b30      	subs	r3, #48	; 0x30
 8002b7c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002b80:	e00e      	b.n	8002ba0 <HOST_SF_LIB_VREG_write+0x5d0>
 8002b82:	bf00      	nop
 8002b84:	2000106c 	.word	0x2000106c
 8002b88:	200000b0 	.word	0x200000b0
 8002b8c:	20001058 	.word	0x20001058
 8002b90:	20001048 	.word	0x20001048
            }
              
            else            
            {                                                       // Last sensor (raw gyrometer) is in VREG 0x3F
                usStat_ptr += 2;                                    // pointer to last VREG status register
 8002b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b96:	3308      	adds	r3, #8
 8002b98:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }
                
            SET_PARAMS.ucid = ucId;
 8002ba0:	4a6b      	ldr	r2, [pc, #428]	; (8002d50 <HOST_SF_LIB_VREG_write+0x780>)
 8002ba2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ba6:	7013      	strb	r3, [r2, #0]
            SET_PARAMS.bDataRateValid = TRUE;                       //update sensor with valid data rate value
 8002ba8:	4b69      	ldr	r3, [pc, #420]	; (8002d50 <HOST_SF_LIB_VREG_write+0x780>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	741a      	strb	r2, [r3, #16]
            SET_PARAMS.usDataRateVal = usData;
 8002bae:	4a68      	ldr	r2, [pc, #416]	; (8002d50 <HOST_SF_LIB_VREG_write+0x780>)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	60d3      	str	r3, [r2, #12]
            
            if (set_state_data(SET_PARAMS))                         // If sensor is enabled, data rate register will be written to
 8002bb4:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <HOST_SF_LIB_VREG_write+0x780>)
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	9200      	str	r2, [sp, #0]
 8002bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bbc:	f7ff f9ec 	bl	8001f98 <set_state_data>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <HOST_SF_LIB_VREG_write+0x624>
            {
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them   
 8002bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002bce:	2107      	movs	r1, #7
 8002bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd4:	43d2      	mvns	r2, r2
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bda:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_DATARATE_FAIL << ucAdjustedPtr); // Update status bits with error (one-shot status that is only valid immediately after a VREGWrite to Data Rate update because it is shared with Sensitivity update)
 8002bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002be4:	2106      	movs	r1, #6
 8002be6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bea:	431a      	orrs	r2, r3
 8002bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bee:	601a      	str	r2, [r3, #0]
                return SET_FEAT_FAIL;
 8002bf0:	2317      	movs	r3, #23
 8002bf2:	e0a8      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>
            }
            
            else
            {
                *usRegPtr = usData;                                 // write succesful, update new sensitivity value in sensitivity register
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	601a      	str	r2, [r3, #0]
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them    
 8002bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002c02:	2107      	movs	r1, #7
 8002c04:	fa01 f202 	lsl.w	r2, r1, r2
 8002c08:	43d2      	mvns	r2, r2
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0e:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_DATARATE_SUCCESS << ucAdjustedPtr); // Update status bits with success status (one-shot status that is only valid immediately after a VREGWrite to Data Rate update because it is shared with Sensitivity update)
 8002c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002c18:	2102      	movs	r1, #2
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c22:	601a      	str	r2, [r3, #0]
            }
        }                                                           //end of DATA_RATE command

    /*****************STATUS-BIT-CLEAR COMMAND********************/
        if (ucRegOffset >= VREG_STAT1 && ucRegOffset <= VREG_STAT4) // offset is in status registers field
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2b3e      	cmp	r3, #62	; 0x3e
 8002c28:	d947      	bls.n	8002cba <HOST_SF_LIB_VREG_write+0x6ea>
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	2b42      	cmp	r3, #66	; 0x42
 8002c2e:	d844      	bhi.n	8002cba <HOST_SF_LIB_VREG_write+0x6ea>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Reset the status register pointer to the first status register
 8002c30:	4b48      	ldr	r3, [pc, #288]	; (8002d54 <HOST_SF_LIB_VREG_write+0x784>)
 8002c32:	647b      	str	r3, [r7, #68]	; 0x44
                
            for (ucTmpPtr = 0; ucTmpPtr < 8; ucTmpPtr++)            //validate current status field = enable_disable_failed
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002c3a:	e03a      	b.n	8002cb2 <HOST_SF_LIB_VREG_write+0x6e2>
            {
                usMask = (VREG_ENA_DIS_FAIL << (ucTmpPtr * 2) );    //mask individual sensor status fields
 8002c3c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
                if ( ( usData & usMask) == 0 )                      //clear these stat bits from input data if valid fields exist in status register
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d129      	bne.n	8002ca8 <HOST_SF_LIB_VREG_write+0x6d8>
                {
                    if ( ucRegOffset == VREG_STAT1)                 //all 8 sensor status fields are valid for possilbe update
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	2b3f      	cmp	r3, #63	; 0x3f
 8002c58:	d10e      	bne.n	8002c78 <HOST_SF_LIB_VREG_write+0x6a8>
                    {
                        if (( *usStat_ptr & usMask) == usMask )     //valid status field contents
 8002c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	4013      	ands	r3, r2
 8002c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d11f      	bne.n	8002ca8 <HOST_SF_LIB_VREG_write+0x6d8>
                        {
                            *usStat_ptr &= ~usMask;                 //clear these two bits of status field preserving the rest of the register
 8002c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	401a      	ands	r2, r3
 8002c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e017      	b.n	8002ca8 <HOST_SF_LIB_VREG_write+0x6d8>
                        }
                    }
                    else if ((ucRegOffset == VREG_STAT2) && (ucTmpPtr < 2)) // only 1st two status fields of VREG_STAT2 are valid for possible update
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d114      	bne.n	8002ca8 <HOST_SF_LIB_VREG_write+0x6d8>
 8002c7e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d810      	bhi.n	8002ca8 <HOST_SF_LIB_VREG_write+0x6d8>
                    {
                        if (( *(usStat_ptr+1) & usMask) == usMask ) //valid status field contents
 8002c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c88:	3304      	adds	r3, #4
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	4013      	ands	r3, r2
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d108      	bne.n	8002ca8 <HOST_SF_LIB_VREG_write+0x6d8>
                        {
                            *(usStat_ptr+1) &= ~usMask;             //clear these two bits of status field preserving the rest of the register
 8002c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c98:	3304      	adds	r3, #4
 8002c9a:	6819      	ldr	r1, [r3, #0]
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
            for (ucTmpPtr = 0; ucTmpPtr < 8; ucTmpPtr++)            //validate current status field = enable_disable_failed
 8002ca8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002cac:	3301      	adds	r3, #1
 8002cae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002cb2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d9c0      	bls.n	8002c3c <HOST_SF_LIB_VREG_write+0x66c>
                }
            }
        }
    }

    if (EC_DATA_AVAIL)                                              // Check if the device has new data
 8002cba:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HOST_SF_LIB_VREG_write+0x788>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d03f      	beq.n	8002d44 <HOST_SF_LIB_VREG_write+0x774>
    {                                                              
         ucRet = i2c_cmd_WrRd (READ,                                // Read the data from the SSC7150
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	f107 0308 	add.w	r3, r7, #8
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2303      	movs	r3, #3
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f7fe f875 	bl	8000dc4 <i2c_cmd_WrRd>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                            0,                                      //cmd buf (ignored)
                            BYTE_ADJ_VAL,                           //num of bytes to read
                            ucRx_data,                              //recv buf 
                            TRUE);                                  //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

       if (ucRet) 
 8002ce0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HOST_SF_LIB_VREG_write+0x71c>
           return HID_INT_FAIL;
 8002ce8:	2331      	movs	r3, #49	; 0x31
 8002cea:	e02c      	b.n	8002d46 <HOST_SF_LIB_VREG_write+0x776>

        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data
 8002cec:	2300      	movs	r3, #0
 8002cee:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8002cf2:	e023      	b.n	8002d3c <HOST_SF_LIB_VREG_write+0x76c>
        {          
            if (ucRx_data[2] == SENSOR[ucSensorNum].id)           //1st two bytes of read data packet hold size of packet, then data begins at byte 2
 8002cf4:	7ab9      	ldrb	r1, [r7, #10]
 8002cf6:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002cfa:	4818      	ldr	r0, [pc, #96]	; (8002d5c <HOST_SF_LIB_VREG_write+0x78c>)
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	4403      	add	r3, r0
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	4299      	cmp	r1, r3
 8002d08:	d113      	bne.n	8002d32 <HOST_SF_LIB_VREG_write+0x762>
            {
                if (*usSHC_ptr & (1 << (ucTmpPtr + VREG_SHC_ACC_EN_VAL))) // If the incoming data belongs to an enabled sensor, store it in VREG data registers
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002d12:	3204      	adds	r2, #4
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HOST_SF_LIB_VREG_write+0x762>
                { 
                    parse_update_VREG_data(ucSensorNum, ucRx_data);
 8002d20:	f107 0208 	add.w	r2, r7, #8
 8002d24:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff f9c4 	bl	80020b8 <parse_update_VREG_data>
                    break;
 8002d30:	e008      	b.n	8002d44 <HOST_SF_LIB_VREG_write+0x774>
        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data
 8002d32:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002d36:	3301      	adds	r3, #1
 8002d38:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8002d3c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002d40:	2b0b      	cmp	r3, #11
 8002d42:	d9d7      	bls.n	8002cf4 <HOST_SF_LIB_VREG_write+0x724>
                }
            }
        }
    }
    
    return SUCCESS;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3748      	adds	r7, #72	; 0x48
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20001058 	.word	0x20001058
 8002d54:	20001048 	.word	0x20001048
 8002d58:	2000008c 	.word	0x2000008c
 8002d5c:	200000b0 	.word	0x200000b0

08002d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d64:	f000 fc53 	bl	800360e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d68:	f000 f82c 	bl	8002dc4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d6c:	f000 f934 	bl	8002fd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002d70:	f000 f902 	bl	8002f78 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002d74:	f000 f88a 	bl	8002e8c <MX_I2C1_Init>
  MX_TIM7_Init();
 8002d78:	f000 f8c8 	bl	8002f0c <MX_TIM7_Init>

  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8002d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d80:	f000 fc7e 	bl	8003680 <HAL_Delay>
  /* Wake Up the Device */
  Wake_signal();
 8002d84:	f7ff f852 	bl	8001e2c <Wake_signal>
  HAL_Delay(100);
 8002d88:	2064      	movs	r0, #100	; 0x64
 8002d8a:	f000 fc79 	bl	8003680 <HAL_Delay>
  /* Reset the Device */
  Reset_signal();
 8002d8e:	f7ff f861 	bl	8001e54 <Reset_signal>
  /* Wake Up the Device */
  HAL_Delay(100);
 8002d92:	2064      	movs	r0, #100	; 0x64
 8002d94:	f000 fc74 	bl	8003680 <HAL_Delay>
  Wake_signal();
 8002d98:	f7ff f848 	bl	8001e2c <Wake_signal>
  HAL_Delay(100);
 8002d9c:	2064      	movs	r0, #100	; 0x64
 8002d9e:	f000 fc6f 	bl	8003680 <HAL_Delay>

  /* Initialize the Virtual Register Bank */
  while(VREG_init())
 8002da2:	e003      	b.n	8002dac <main+0x4c>
  {
	  HAL_Delay(1000);
 8002da4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002da8:	f000 fc6a 	bl	8003680 <HAL_Delay>
  while(VREG_init())
 8002dac:	f7ff f866 	bl	8001e7c <VREG_init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f6      	bne.n	8002da4 <main+0x44>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  _accel();
 8002db6:	f7fe f879 	bl	8000eac <_accel>
	  HAL_Delay(1000);
 8002dba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dbe:	f000 fc5f 	bl	8003680 <HAL_Delay>
	  _accel();
 8002dc2:	e7f8      	b.n	8002db6 <main+0x56>

08002dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b096      	sub	sp, #88	; 0x58
 8002dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	2244      	movs	r2, #68	; 0x44
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 ff62 	bl	8007c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dd8:	463b      	mov	r3, r7
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002de6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002dea:	f002 fa93 	bl	8005314 <HAL_PWREx_ControlVoltageScaling>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002df4:	f000 f9c4 	bl	8003180 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002df8:	f002 fa6e 	bl	80052d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <SystemClock_Config+0xc4>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <SystemClock_Config+0xc4>)
 8002e04:	f023 0318 	bic.w	r3, r3, #24
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002e0c:	2314      	movs	r3, #20
 8002e0e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002e10:	2301      	movs	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002e14:	2301      	movs	r3, #1
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002e1c:	2360      	movs	r3, #96	; 0x60
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e20:	2302      	movs	r3, #2
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002e24:	2301      	movs	r3, #1
 8002e26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 18;
 8002e2c:	2312      	movs	r3, #18
 8002e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002e30:	2307      	movs	r3, #7
 8002e32:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e34:	2302      	movs	r3, #2
 8002e36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	4618      	mov	r0, r3
 8002e42:	f002 fabd 	bl	80053c0 <HAL_RCC_OscConfig>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002e4c:	f000 f998 	bl	8003180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e50:	230f      	movs	r3, #15
 8002e52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e54:	2303      	movs	r3, #3
 8002e56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e64:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e66:	463b      	mov	r3, r7
 8002e68:	2102      	movs	r1, #2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f002 febc 	bl	8005be8 <HAL_RCC_ClockConfig>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002e76:	f000 f983 	bl	8003180 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002e7a:	f003 fb01 	bl	8006480 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002e7e:	bf00      	nop
 8002e80:	3758      	adds	r7, #88	; 0x58
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000

08002e8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002e92:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <MX_I2C1_Init+0x78>)
 8002e94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002e98:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <MX_I2C1_Init+0x7c>)
 8002e9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 128;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ec6:	480e      	ldr	r0, [pc, #56]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002ec8:	f000 ff08 	bl	8003cdc <HAL_I2C_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ed2:	f000 f955 	bl	8003180 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4809      	ldr	r0, [pc, #36]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002eda:	f002 f965 	bl	80051a8 <HAL_I2CEx_ConfigAnalogFilter>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ee4:	f000 f94c 	bl	8003180 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4805      	ldr	r0, [pc, #20]	; (8002f00 <MX_I2C1_Init+0x74>)
 8002eec:	f002 f9a7 	bl	800523e <HAL_I2CEx_ConfigDigitalFilter>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ef6:	f000 f943 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20001070 	.word	0x20001070
 8002f04:	40005400 	.word	0x40005400
 8002f08:	00301739 	.word	0x00301739

08002f0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <MX_TIM7_Init+0x64>)
 8002f1e:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <MX_TIM7_Init+0x68>)
 8002f20:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 60000-1;
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <MX_TIM7_Init+0x64>)
 8002f24:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002f28:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <MX_TIM7_Init+0x64>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <MX_TIM7_Init+0x64>)
 8002f32:	2232      	movs	r2, #50	; 0x32
 8002f34:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <MX_TIM7_Init+0x64>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <MX_TIM7_Init+0x64>)
 8002f3e:	f003 fba1 	bl	8006684 <HAL_TIM_Base_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002f48:	f000 f91a 	bl	8003180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f54:	1d3b      	adds	r3, r7, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	4805      	ldr	r0, [pc, #20]	; (8002f70 <MX_TIM7_Init+0x64>)
 8002f5a:	f003 fe19 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002f64:	f000 f90c 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	200010c4 	.word	0x200010c4
 8002f74:	40001400 	.word	0x40001400

08002f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <MX_USART2_UART_Init+0x58>)
 8002f7e:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <MX_USART2_UART_Init+0x5c>)
 8002f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <MX_USART2_UART_Init+0x58>)
 8002f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MX_USART2_UART_Init+0x58>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <MX_USART2_UART_Init+0x58>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <MX_USART2_UART_Init+0x58>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <MX_USART2_UART_Init+0x58>)
 8002f9e:	220c      	movs	r2, #12
 8002fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <MX_USART2_UART_Init+0x58>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <MX_USART2_UART_Init+0x58>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <MX_USART2_UART_Init+0x58>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <MX_USART2_UART_Init+0x58>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fba:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <MX_USART2_UART_Init+0x58>)
 8002fbc:	f003 fe6c 	bl	8006c98 <HAL_UART_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002fc6:	f000 f8db 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20001110 	.word	0x20001110
 8002fd4:	40004400 	.word	0x40004400

08002fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fde:	f107 030c 	add.w	r3, r7, #12
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fee:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <MX_GPIO_Init+0xec>)
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <MX_GPIO_Init+0xec>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ffa:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <MX_GPIO_Init+0xec>)
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <MX_GPIO_Init+0xec>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	4a2e      	ldr	r2, [pc, #184]	; (80030c4 <MX_GPIO_Init+0xec>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003012:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <MX_GPIO_Init+0xec>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800301e:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <MX_GPIO_Init+0xec>)
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	4a28      	ldr	r2, [pc, #160]	; (80030c4 <MX_GPIO_Init+0xec>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <MX_GPIO_Init+0xec>)
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTION_WAKE_PIN_GPIO_Port, MOTION_WAKE_PIN_Pin, GPIO_PIN_SET);
 8003036:	2201      	movs	r2, #1
 8003038:	2101      	movs	r1, #1
 800303a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800303e:	f000 fe1d 	bl	8003c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_SET);
 8003042:	2201      	movs	r2, #1
 8003044:	2102      	movs	r1, #2
 8003046:	4820      	ldr	r0, [pc, #128]	; (80030c8 <MX_GPIO_Init+0xf0>)
 8003048:	f000 fe18 	bl	8003c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800304c:	2200      	movs	r2, #0
 800304e:	2108      	movs	r1, #8
 8003050:	481d      	ldr	r0, [pc, #116]	; (80030c8 <MX_GPIO_Init+0xf0>)
 8003052:	f000 fe13 	bl	8003c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTION_WAKE_PIN_Pin */
  GPIO_InitStruct.Pin = MOTION_WAKE_PIN_Pin;
 8003056:	2301      	movs	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305a:	2301      	movs	r3, #1
 800305c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003062:	2302      	movs	r3, #2
 8003064:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTION_WAKE_PIN_GPIO_Port, &GPIO_InitStruct);
 8003066:	f107 030c 	add.w	r3, r7, #12
 800306a:	4619      	mov	r1, r3
 800306c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003070:	f000 fc9a 	bl	80039a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTION_EXTI_PIN_Pin */
  GPIO_InitStruct.Pin = MOTION_EXTI_PIN_Pin;
 8003074:	2308      	movs	r3, #8
 8003076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003078:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800307c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800307e:	2301      	movs	r3, #1
 8003080:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTION_EXTI_PIN_GPIO_Port, &GPIO_InitStruct);
 8003082:	f107 030c 	add.w	r3, r7, #12
 8003086:	4619      	mov	r1, r3
 8003088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800308c:	f000 fc8c 	bl	80039a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_RESET_PIN_Pin LD3_Pin */
  GPIO_InitStruct.Pin = MOTION_RESET_PIN_Pin|LD3_Pin;
 8003090:	230a      	movs	r3, #10
 8003092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003094:	2301      	movs	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800309c:	2302      	movs	r3, #2
 800309e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	4619      	mov	r1, r3
 80030a6:	4808      	ldr	r0, [pc, #32]	; (80030c8 <MX_GPIO_Init+0xf0>)
 80030a8:	f000 fc7e 	bl	80039a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 6, 0);
 80030ac:	2200      	movs	r2, #0
 80030ae:	2106      	movs	r1, #6
 80030b0:	2009      	movs	r0, #9
 80030b2:	f000 fbc1 	bl	8003838 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80030b6:	2009      	movs	r0, #9
 80030b8:	f000 fbda 	bl	8003870 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80030bc:	bf00      	nop
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000
 80030c8:	48000400 	.word	0x48000400

080030cc <HAL_GPIO_EXTI_Callback>:
 * 			Sets the Interrupt to fire on opposite Signal-Edge.
 * @param: The Pin from where the Interrupt came from
 * TODO: Directly Write to the Registers without using the HAL functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]

#ifdef NDEBUG
	  static size_t profiler_exti3CallBack = 0;
	  ++profiler_exti3CallBack;
 80030d6:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_GPIO_EXTI_Callback+0x70>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3301      	adds	r3, #1
 80030dc:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_GPIO_EXTI_Callback+0x70>)
 80030de:	6013      	str	r3, [r2, #0]
#endif

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 030c 	add.w	r3, r7, #12
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]

    /* Check if the INT Source is our Data Available PIN */
    if(GPIO_Pin == MOTION_EXTI_PIN_Pin)
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d11e      	bne.n	8003134 <HAL_GPIO_EXTI_Callback+0x68>
    {
    	/*If no data available, but INT Line was driven LOW */
        if (!EC_DATA_AVAIL)
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_GPIO_EXTI_Callback+0x74>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_GPIO_EXTI_Callback+0x42>
        {
        	/* INT1 Edge configured to interrupt on rising edge (wait for end of data) */
            GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003100:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003104:	613b      	str	r3, [r7, #16]

            /*Toggle EC_DATA_AVAIL flag to notify data received */
            EC_DATA_AVAIL = TRUE;
 8003106:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <HAL_GPIO_EXTI_Callback+0x74>)
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e005      	b.n	800311a <HAL_GPIO_EXTI_Callback+0x4e>
        }
        /* if data was available and INT line got driven HIGH */
        else
        {
        	/* INT1 Edge configured to interrupt on falling edge (data is no longer available) */
            GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800310e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003112:	613b      	str	r3, [r7, #16]

            /*Toggle EC_DATA_AVAIL flag to notify that there is no new data rn */
            EC_DATA_AVAIL = FALSE;
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_GPIO_EXTI_Callback+0x74>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
        }

		GPIO_InitStruct.Pin = MOTION_EXTI_PIN_Pin;
 800311a:	2308      	movs	r3, #8
 800311c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003122:	2302      	movs	r3, #2
 8003124:	61bb      	str	r3, [r7, #24]

        /* Re-Initialize the Portpin to Trigger on falling/rising Edge */
        HAL_GPIO_Init(MOTION_EXTI_PIN_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 030c 	add.w	r3, r7, #12
 800312a:	4619      	mov	r1, r3
 800312c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003130:	f000 fc3a 	bl	80039a8 <HAL_GPIO_Init>
    }
}
 8003134:	bf00      	nop
 8003136:	3720      	adds	r7, #32
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20001194 	.word	0x20001194
 8003140:	2000008c 	.word	0x2000008c

08003144 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a08      	ldr	r2, [pc, #32]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003156:	f000 fa73 	bl	8003640 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* Interrupt Fires at around 5 seconds after start of Timer 7*/
  if (htim->Instance == TIM7) {
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a06      	ldr	r2, [pc, #24]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d102      	bne.n	800316a <HAL_TIM_PeriodElapsedCallback+0x26>
    usTimeout = TRUE;
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40014400 	.word	0x40014400
 8003178:	40001400 	.word	0x40001400
 800317c:	2000008d 	.word	0x2000008d

08003180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003184:	b672      	cpsid	i
}
 8003186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  while (1)
 8003188:	e7fe      	b.n	8003188 <Error_Handler+0x8>
	...

0800318c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <HAL_MspInit+0x44>)
 8003194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003196:	4a0e      	ldr	r2, [pc, #56]	; (80031d0 <HAL_MspInit+0x44>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6613      	str	r3, [r2, #96]	; 0x60
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <HAL_MspInit+0x44>)
 80031a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_MspInit+0x44>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_MspInit+0x44>)
 80031b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6593      	str	r3, [r2, #88]	; 0x58
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_MspInit+0x44>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000

080031d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b09e      	sub	sp, #120	; 0x78
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031ec:	f107 0310 	add.w	r3, r7, #16
 80031f0:	2254      	movs	r2, #84	; 0x54
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f004 fd51 	bl	8007c9c <memset>
  if(hi2c->Instance==I2C1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2c      	ldr	r2, [pc, #176]	; (80032b0 <HAL_I2C_MspInit+0xdc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d151      	bne.n	80032a8 <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003204:	2340      	movs	r3, #64	; 0x40
 8003206:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003208:	2300      	movs	r3, #0
 800320a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800320c:	f107 0310 	add.w	r3, r7, #16
 8003210:	4618      	mov	r0, r3
 8003212:	f002 ff3f 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800321c:	f7ff ffb0 	bl	8003180 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003220:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <HAL_I2C_MspInit+0xe0>)
 8003222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003224:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <HAL_I2C_MspInit+0xe0>)
 8003226:	f043 0302 	orr.w	r3, r3, #2
 800322a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800322c:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <HAL_I2C_MspInit+0xe0>)
 800322e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = CLICK_I2C1_SCK_Pin|CLICK_I2C1_SDA_Pin;
 8003238:	23c0      	movs	r3, #192	; 0xc0
 800323a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800323c:	2312      	movs	r3, #18
 800323e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003244:	2303      	movs	r3, #3
 8003246:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003248:	2304      	movs	r3, #4
 800324a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003250:	4619      	mov	r1, r3
 8003252:	4819      	ldr	r0, [pc, #100]	; (80032b8 <HAL_I2C_MspInit+0xe4>)
 8003254:	f000 fba8 	bl	80039a8 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_I2C_MspInit+0xe8>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a17      	ldr	r2, [pc, #92]	; (80032bc <HAL_I2C_MspInit+0xe8>)
 800325e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003262:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003264:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_I2C_MspInit+0xe8>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_I2C_MspInit+0xe8>)
 800326a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326e:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_I2C_MspInit+0xe0>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <HAL_I2C_MspInit+0xe0>)
 8003276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800327a:	6593      	str	r3, [r2, #88]	; 0x58
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <HAL_I2C_MspInit+0xe0>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2100      	movs	r1, #0
 800328c:	201f      	movs	r0, #31
 800328e:	f000 fad3 	bl	8003838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003292:	201f      	movs	r0, #31
 8003294:	f000 faec 	bl	8003870 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003298:	2200      	movs	r2, #0
 800329a:	2100      	movs	r1, #0
 800329c:	2020      	movs	r0, #32
 800329e:	f000 facb 	bl	8003838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80032a2:	2020      	movs	r0, #32
 80032a4:	f000 fae4 	bl	8003870 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032a8:	bf00      	nop
 80032aa:	3778      	adds	r7, #120	; 0x78
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40005400 	.word	0x40005400
 80032b4:	40021000 	.word	0x40021000
 80032b8:	48000400 	.word	0x48000400
 80032bc:	40010000 	.word	0x40010000

080032c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <HAL_TIM_Base_MspInit+0x44>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d113      	bne.n	80032fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <HAL_TIM_Base_MspInit+0x48>)
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <HAL_TIM_Base_MspInit+0x48>)
 80032d8:	f043 0320 	orr.w	r3, r3, #32
 80032dc:	6593      	str	r3, [r2, #88]	; 0x58
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_TIM_Base_MspInit+0x48>)
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2106      	movs	r1, #6
 80032ee:	2037      	movs	r0, #55	; 0x37
 80032f0:	f000 faa2 	bl	8003838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80032f4:	2037      	movs	r0, #55	; 0x37
 80032f6:	f000 fabb 	bl	8003870 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40001400 	.word	0x40001400
 8003308:	40021000 	.word	0x40021000

0800330c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b09e      	sub	sp, #120	; 0x78
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003324:	f107 0310 	add.w	r3, r7, #16
 8003328:	2254      	movs	r2, #84	; 0x54
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f004 fcb5 	bl	8007c9c <memset>
  if(huart->Instance==USART2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2c      	ldr	r2, [pc, #176]	; (80033e8 <HAL_UART_MspInit+0xdc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d150      	bne.n	80033de <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800333c:	2302      	movs	r3, #2
 800333e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003340:	2300      	movs	r3, #0
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003344:	f107 0310 	add.w	r3, r7, #16
 8003348:	4618      	mov	r0, r3
 800334a:	f002 fea3 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003354:	f7ff ff14 	bl	8003180 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003358:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_UART_MspInit+0xe0>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	4a23      	ldr	r2, [pc, #140]	; (80033ec <HAL_UART_MspInit+0xe0>)
 800335e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003362:	6593      	str	r3, [r2, #88]	; 0x58
 8003364:	4b21      	ldr	r3, [pc, #132]	; (80033ec <HAL_UART_MspInit+0xe0>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003370:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <HAL_UART_MspInit+0xe0>)
 8003372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003374:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_UART_MspInit+0xe0>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_UART_MspInit+0xe0>)
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003388:	2304      	movs	r3, #4
 800338a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338c:	2302      	movs	r3, #2
 800338e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003394:	2303      	movs	r3, #3
 8003396:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003398:	2307      	movs	r3, #7
 800339a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800339c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80033a0:	4619      	mov	r1, r3
 80033a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a6:	f000 faff 	bl	80039a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80033aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b0:	2302      	movs	r3, #2
 80033b2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80033bc:	2303      	movs	r3, #3
 80033be:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80033c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80033c4:	4619      	mov	r1, r3
 80033c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ca:	f000 faed 	bl	80039a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2100      	movs	r1, #0
 80033d2:	2026      	movs	r0, #38	; 0x26
 80033d4:	f000 fa30 	bl	8003838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033d8:	2026      	movs	r0, #38	; 0x26
 80033da:	f000 fa49 	bl	8003870 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033de:	bf00      	nop
 80033e0:	3778      	adds	r7, #120	; 0x78
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40004400 	.word	0x40004400
 80033ec:	40021000 	.word	0x40021000

080033f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08c      	sub	sp, #48	; 0x30
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80033fe:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <HAL_InitTick+0xcc>)
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <HAL_InitTick+0xcc>)
 8003404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003408:	6613      	str	r3, [r2, #96]	; 0x60
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <HAL_InitTick+0xcc>)
 800340c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003416:	f107 020c 	add.w	r2, r7, #12
 800341a:	f107 0310 	add.w	r3, r7, #16
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f002 fda5 	bl	8005f70 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003426:	f002 fd8d 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 800342a:	4603      	mov	r3, r0
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_InitTick+0xd0>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	0c9b      	lsrs	r3, r3, #18
 800343a:	3b01      	subs	r3, #1
 800343c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800343e:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <HAL_InitTick+0xd4>)
 8003440:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <HAL_InitTick+0xd8>)
 8003442:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8003444:	4b1f      	ldr	r3, [pc, #124]	; (80034c4 <HAL_InitTick+0xd4>)
 8003446:	f240 32e7 	movw	r2, #999	; 0x3e7
 800344a:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800344c:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <HAL_InitTick+0xd4>)
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8003452:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <HAL_InitTick+0xd4>)
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_InitTick+0xd4>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800345e:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <HAL_InitTick+0xd4>)
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8003464:	4817      	ldr	r0, [pc, #92]	; (80034c4 <HAL_InitTick+0xd4>)
 8003466:	f003 f90d 	bl	8006684 <HAL_TIM_Base_Init>
 800346a:	4603      	mov	r3, r0
 800346c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11b      	bne.n	80034b0 <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8003478:	4812      	ldr	r0, [pc, #72]	; (80034c4 <HAL_InitTick+0xd4>)
 800347a:	f003 f95b 	bl	8006734 <HAL_TIM_Base_Start_IT>
 800347e:	4603      	mov	r3, r0
 8003480:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003488:	2b00      	cmp	r3, #0
 800348a:	d111      	bne.n	80034b0 <HAL_InitTick+0xc0>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800348c:	2019      	movs	r0, #25
 800348e:	f000 f9ef 	bl	8003870 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b0f      	cmp	r3, #15
 8003496:	d808      	bhi.n	80034aa <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003498:	2200      	movs	r2, #0
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	2019      	movs	r0, #25
 800349e:	f000 f9cb 	bl	8003838 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <HAL_InitTick+0xdc>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	e002      	b.n	80034b0 <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80034b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3730      	adds	r7, #48	; 0x30
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	431bde83 	.word	0x431bde83
 80034c4:	20001198 	.word	0x20001198
 80034c8:	40014400 	.word	0x40014400
 80034cc:	20000004 	.word	0x20000004

080034d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <NMI_Handler+0x4>

080034d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034da:	e7fe      	b.n	80034da <HardFault_Handler+0x4>

080034dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e0:	e7fe      	b.n	80034e0 <MemManage_Handler+0x4>

080034e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034e6:	e7fe      	b.n	80034e6 <BusFault_Handler+0x4>

080034e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034ec:	e7fe      	b.n	80034ec <UsageFault_Handler+0x4>

080034ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MOTION_EXTI_PIN_Pin);
 800352a:	2008      	movs	r0, #8
 800352c:	f000 fbbe 	bl	8003cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}

08003534 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800353a:	f003 f97e 	bl	800683a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20001198 	.word	0x20001198

08003548 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800354c:	4802      	ldr	r0, [pc, #8]	; (8003558 <I2C1_EV_IRQHandler+0x10>)
 800354e:	f000 fe3f 	bl	80041d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20001070 	.word	0x20001070

0800355c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <I2C1_ER_IRQHandler+0x10>)
 8003562:	f000 fe4f 	bl	8004204 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20001070 	.word	0x20001070

08003570 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <USART2_IRQHandler+0x10>)
 8003576:	f003 fbdd 	bl	8006d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20001110 	.word	0x20001110

08003584 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <TIM7_IRQHandler+0x10>)
 800358a:	f003 f956 	bl	800683a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200010c4 	.word	0x200010c4

08003598 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <SystemInit+0x20>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	4a05      	ldr	r2, [pc, #20]	; (80035b8 <SystemInit+0x20>)
 80035a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035c0:	f7ff ffea 	bl	8003598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
   ldr r0, =_sdata
 80035c4:	480c      	ldr	r0, [pc, #48]	; (80035f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80035c6:	490d      	ldr	r1, [pc, #52]	; (80035fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80035c8:	4a0d      	ldr	r2, [pc, #52]	; (8003600 <LoopForever+0xe>)
  movs r3, #0
 80035ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035cc:	e002      	b.n	80035d4 <LoopCopyDataInit>

080035ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d2:	3304      	adds	r3, #4

080035d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d8:	d3f9      	bcc.n	80035ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035dc:	4c0a      	ldr	r4, [pc, #40]	; (8003608 <LoopForever+0x16>)
  movs r3, #0
 80035de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e0:	e001      	b.n	80035e6 <LoopFillZerobss>

080035e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e4:	3204      	adds	r2, #4

080035e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e8:	d3fb      	bcc.n	80035e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035ea:	f004 fb33 	bl	8007c54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035ee:	f7ff fbb7 	bl	8002d60 <main>

080035f2 <LoopForever>:

LoopForever:
    b LoopForever
 80035f2:	e7fe      	b.n	80035f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80035f4:	20010000 	.word	0x20010000
   ldr r0, =_sdata
 80035f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003600:	08008ba0 	.word	0x08008ba0
  ldr r2, =_sbss
 8003604:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003608:	200011e8 	.word	0x200011e8

0800360c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800360c:	e7fe      	b.n	800360c <ADC1_IRQHandler>

0800360e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003618:	2003      	movs	r0, #3
 800361a:	f000 f902 	bl	8003822 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800361e:	200f      	movs	r0, #15
 8003620:	f7ff fee6 	bl	80033f0 <HAL_InitTick>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	71fb      	strb	r3, [r7, #7]
 800362e:	e001      	b.n	8003634 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003630:	f7ff fdac 	bl	800318c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003634:	79fb      	ldrb	r3, [r7, #7]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_IncTick+0x20>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_IncTick+0x24>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4413      	add	r3, r2
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <HAL_IncTick+0x24>)
 8003652:	6013      	str	r3, [r2, #0]
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000008 	.word	0x20000008
 8003664:	200011e4 	.word	0x200011e4

08003668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return uwTick;
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_GetTick+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	200011e4 	.word	0x200011e4

08003680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003688:	f7ff ffee 	bl	8003668 <HAL_GetTick>
 800368c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d005      	beq.n	80036a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_Delay+0x44>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036a6:	bf00      	nop
 80036a8:	f7ff ffde 	bl	8003668 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d8f7      	bhi.n	80036a8 <HAL_Delay+0x28>
  {
  }
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000008 	.word	0x20000008

080036c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <__NVIC_SetPriorityGrouping+0x44>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036e4:	4013      	ands	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036fa:	4a04      	ldr	r2, [pc, #16]	; (800370c <__NVIC_SetPriorityGrouping+0x44>)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	60d3      	str	r3, [r2, #12]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <__NVIC_GetPriorityGrouping+0x18>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	f003 0307 	and.w	r3, r3, #7
}
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	2b00      	cmp	r3, #0
 800373c:	db0b      	blt.n	8003756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	f003 021f 	and.w	r2, r3, #31
 8003744:	4907      	ldr	r1, [pc, #28]	; (8003764 <__NVIC_EnableIRQ+0x38>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2001      	movs	r0, #1
 800374e:	fa00 f202 	lsl.w	r2, r0, r2
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000e100 	.word	0xe000e100

08003768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	6039      	str	r1, [r7, #0]
 8003772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	2b00      	cmp	r3, #0
 800377a:	db0a      	blt.n	8003792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	490c      	ldr	r1, [pc, #48]	; (80037b4 <__NVIC_SetPriority+0x4c>)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	0112      	lsls	r2, r2, #4
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	440b      	add	r3, r1
 800378c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003790:	e00a      	b.n	80037a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4908      	ldr	r1, [pc, #32]	; (80037b8 <__NVIC_SetPriority+0x50>)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	3b04      	subs	r3, #4
 80037a0:	0112      	lsls	r2, r2, #4
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	440b      	add	r3, r1
 80037a6:	761a      	strb	r2, [r3, #24]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000e100 	.word	0xe000e100
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f1c3 0307 	rsb	r3, r3, #7
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	bf28      	it	cs
 80037da:	2304      	movcs	r3, #4
 80037dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3304      	adds	r3, #4
 80037e2:	2b06      	cmp	r3, #6
 80037e4:	d902      	bls.n	80037ec <NVIC_EncodePriority+0x30>
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3b03      	subs	r3, #3
 80037ea:	e000      	b.n	80037ee <NVIC_EncodePriority+0x32>
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f0:	f04f 32ff 	mov.w	r2, #4294967295
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43da      	mvns	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	401a      	ands	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003804:	f04f 31ff 	mov.w	r1, #4294967295
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	43d9      	mvns	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	4313      	orrs	r3, r2
         );
}
 8003816:	4618      	mov	r0, r3
 8003818:	3724      	adds	r7, #36	; 0x24
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff ff4c 	bl	80036c8 <__NVIC_SetPriorityGrouping>
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800384a:	f7ff ff61 	bl	8003710 <__NVIC_GetPriorityGrouping>
 800384e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	6978      	ldr	r0, [r7, #20]
 8003856:	f7ff ffb1 	bl	80037bc <NVIC_EncodePriority>
 800385a:	4602      	mov	r2, r0
 800385c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff80 	bl	8003768 <__NVIC_SetPriority>
}
 8003868:	bf00      	nop
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff ff54 	bl	800372c <__NVIC_EnableIRQ>
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d008      	beq.n	80038b6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2204      	movs	r2, #4
 80038a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e022      	b.n	80038fc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 020e 	bic.w	r2, r2, #14
 80038c4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f003 021c 	and.w	r2, r3, #28
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2101      	movs	r1, #1
 80038e4:	fa01 f202 	lsl.w	r2, r1, r2
 80038e8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d005      	beq.n	800392c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2204      	movs	r2, #4
 8003924:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
 800392a:	e029      	b.n	8003980 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 020e 	bic.w	r2, r2, #14
 800393a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	f003 021c 	and.w	r2, r3, #28
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	2101      	movs	r1, #1
 800395a:	fa01 f202 	lsl.w	r2, r1, r2
 800395e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
    }
  }
  return status;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003998:	b2db      	uxtb	r3, r3
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039b6:	e148      	b.n	8003c4a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	2101      	movs	r1, #1
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	4013      	ands	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 813a 	beq.w	8003c44 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d005      	beq.n	80039e8 <HAL_GPIO_Init+0x40>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d130      	bne.n	8003a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	2203      	movs	r2, #3
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a1e:	2201      	movs	r2, #1
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	f003 0201 	and.w	r2, r3, #1
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d017      	beq.n	8003a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d123      	bne.n	8003ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	220f      	movs	r2, #15
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	08da      	lsrs	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3208      	adds	r2, #8
 8003ad4:	6939      	ldr	r1, [r7, #16]
 8003ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4013      	ands	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0203 	and.w	r2, r3, #3
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8094 	beq.w	8003c44 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1c:	4b52      	ldr	r3, [pc, #328]	; (8003c68 <HAL_GPIO_Init+0x2c0>)
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	4a51      	ldr	r2, [pc, #324]	; (8003c68 <HAL_GPIO_Init+0x2c0>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6613      	str	r3, [r2, #96]	; 0x60
 8003b28:	4b4f      	ldr	r3, [pc, #316]	; (8003c68 <HAL_GPIO_Init+0x2c0>)
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b34:	4a4d      	ldr	r2, [pc, #308]	; (8003c6c <HAL_GPIO_Init+0x2c4>)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	220f      	movs	r2, #15
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b5e:	d00d      	beq.n	8003b7c <HAL_GPIO_Init+0x1d4>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a43      	ldr	r2, [pc, #268]	; (8003c70 <HAL_GPIO_Init+0x2c8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d007      	beq.n	8003b78 <HAL_GPIO_Init+0x1d0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a42      	ldr	r2, [pc, #264]	; (8003c74 <HAL_GPIO_Init+0x2cc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d101      	bne.n	8003b74 <HAL_GPIO_Init+0x1cc>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e004      	b.n	8003b7e <HAL_GPIO_Init+0x1d6>
 8003b74:	2307      	movs	r3, #7
 8003b76:	e002      	b.n	8003b7e <HAL_GPIO_Init+0x1d6>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_GPIO_Init+0x1d6>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	f002 0203 	and.w	r2, r2, #3
 8003b84:	0092      	lsls	r2, r2, #2
 8003b86:	4093      	lsls	r3, r2
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b8e:	4937      	ldr	r1, [pc, #220]	; (8003c6c <HAL_GPIO_Init+0x2c4>)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	3302      	adds	r3, #2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b9c:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bc0:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bc6:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bea:	4a23      	ldr	r2, [pc, #140]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bf0:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c3e:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3301      	adds	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f47f aeaf 	bne.w	80039b8 <HAL_GPIO_Init+0x10>
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	48000400 	.word	0x48000400
 8003c74:	48000800 	.word	0x48000800
 8003c78:	40010400 	.word	0x40010400

08003c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	807b      	strh	r3, [r7, #2]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c8c:	787b      	ldrb	r3, [r7, #1]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c92:	887a      	ldrh	r2, [r7, #2]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c98:	e002      	b.n	8003ca0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cb6:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d006      	beq.n	8003cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cc2:	4a05      	ldr	r2, [pc, #20]	; (8003cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff f9fe 	bl	80030cc <HAL_GPIO_EXTI_Callback>
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40010400 	.word	0x40010400

08003cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e081      	b.n	8003df2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fa66 	bl	80031d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	; 0x24
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d107      	bne.n	8003d56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	e006      	b.n	8003d64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d104      	bne.n	8003d76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69d9      	ldr	r1, [r3, #28]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	461a      	mov	r2, r3
 8003e08:	460b      	mov	r3, r1
 8003e0a:	817b      	strh	r3, [r7, #10]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	f040 80da 	bne.w	8003fd2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_I2C_Master_Transmit+0x30>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e0d3      	b.n	8003fd4 <HAL_I2C_Master_Transmit+0x1d8>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e34:	f7ff fc18 	bl	8003668 <HAL_GetTick>
 8003e38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	2319      	movs	r3, #25
 8003e40:	2201      	movs	r2, #1
 8003e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fefb 	bl	8004c42 <I2C_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e0be      	b.n	8003fd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2221      	movs	r2, #33	; 0x21
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2210      	movs	r2, #16
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	893a      	ldrh	r2, [r7, #8]
 8003e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2bff      	cmp	r3, #255	; 0xff
 8003e86:	d90e      	bls.n	8003ea6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	22ff      	movs	r2, #255	; 0xff
 8003e8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	8979      	ldrh	r1, [r7, #10]
 8003e96:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <HAL_I2C_Master_Transmit+0x1e0>)
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f001 f8f2 	bl	8005088 <I2C_TransferConfig>
 8003ea4:	e06c      	b.n	8003f80 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	8979      	ldrh	r1, [r7, #10]
 8003eb8:	4b48      	ldr	r3, [pc, #288]	; (8003fdc <HAL_I2C_Master_Transmit+0x1e0>)
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f001 f8e1 	bl	8005088 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ec6:	e05b      	b.n	8003f80 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	6a39      	ldr	r1, [r7, #32]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fef8 	bl	8004cc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e07b      	b.n	8003fd4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d034      	beq.n	8003f80 <HAL_I2C_Master_Transmit+0x184>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d130      	bne.n	8003f80 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	2200      	movs	r2, #0
 8003f26:	2180      	movs	r1, #128	; 0x80
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fe8a 	bl	8004c42 <I2C_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e04d      	b.n	8003fd4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2bff      	cmp	r3, #255	; 0xff
 8003f40:	d90e      	bls.n	8003f60 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	8979      	ldrh	r1, [r7, #10]
 8003f50:	2300      	movs	r3, #0
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f001 f895 	bl	8005088 <I2C_TransferConfig>
 8003f5e:	e00f      	b.n	8003f80 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	8979      	ldrh	r1, [r7, #10]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f001 f884 	bl	8005088 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d19e      	bne.n	8003ec8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	6a39      	ldr	r1, [r7, #32]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fed7 	bl	8004d42 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e01a      	b.n	8003fd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	80002000 	.word	0x80002000
 8003fe0:	fe00e800 	.word	0xfe00e800

08003fe4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	817b      	strh	r3, [r7, #10]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b20      	cmp	r3, #32
 8004002:	f040 80db 	bne.w	80041bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_I2C_Master_Receive+0x30>
 8004010:	2302      	movs	r3, #2
 8004012:	e0d4      	b.n	80041be <HAL_I2C_Master_Receive+0x1da>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800401c:	f7ff fb24 	bl	8003668 <HAL_GetTick>
 8004020:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	2319      	movs	r3, #25
 8004028:	2201      	movs	r2, #1
 800402a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fe07 	bl	8004c42 <I2C_WaitOnFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0bf      	b.n	80041be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2222      	movs	r2, #34	; 0x22
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2210      	movs	r2, #16
 800404a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	893a      	ldrh	r2, [r7, #8]
 800405e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2bff      	cmp	r3, #255	; 0xff
 800406e:	d90e      	bls.n	800408e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	22ff      	movs	r2, #255	; 0xff
 8004074:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	b2da      	uxtb	r2, r3
 800407c:	8979      	ldrh	r1, [r7, #10]
 800407e:	4b52      	ldr	r3, [pc, #328]	; (80041c8 <HAL_I2C_Master_Receive+0x1e4>)
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fffe 	bl	8005088 <I2C_TransferConfig>
 800408c:	e06d      	b.n	800416a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	b2da      	uxtb	r2, r3
 800409e:	8979      	ldrh	r1, [r7, #10]
 80040a0:	4b49      	ldr	r3, [pc, #292]	; (80041c8 <HAL_I2C_Master_Receive+0x1e4>)
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 ffed 	bl	8005088 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80040ae:	e05c      	b.n	800416a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	6a39      	ldr	r1, [r7, #32]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fe81 	bl	8004dbc <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e07c      	b.n	80041be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d034      	beq.n	800416a <HAL_I2C_Master_Receive+0x186>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d130      	bne.n	800416a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	2200      	movs	r2, #0
 8004110:	2180      	movs	r1, #128	; 0x80
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fd95 	bl	8004c42 <I2C_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e04d      	b.n	80041be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	2bff      	cmp	r3, #255	; 0xff
 800412a:	d90e      	bls.n	800414a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	22ff      	movs	r2, #255	; 0xff
 8004130:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004136:	b2da      	uxtb	r2, r3
 8004138:	8979      	ldrh	r1, [r7, #10]
 800413a:	2300      	movs	r3, #0
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 ffa0 	bl	8005088 <I2C_TransferConfig>
 8004148:	e00f      	b.n	800416a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	b2da      	uxtb	r2, r3
 800415a:	8979      	ldrh	r1, [r7, #10]
 800415c:	2300      	movs	r3, #0
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 ff8f 	bl	8005088 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d19d      	bne.n	80040b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	6a39      	ldr	r1, [r7, #32]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fde2 	bl	8004d42 <I2C_WaitOnSTOPFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e01a      	b.n	80041be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2220      	movs	r2, #32
 800418e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6859      	ldr	r1, [r3, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <HAL_I2C_Master_Receive+0x1e8>)
 800419c:	400b      	ands	r3, r1
 800419e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e000      	b.n	80041be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	80002400 	.word	0x80002400
 80041cc:	fe00e800 	.word	0xfe00e800

080041d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	68f9      	ldr	r1, [r7, #12]
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
  }
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d010      	beq.n	800424a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	09db      	lsrs	r3, r3, #7
 800422c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004248:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	0a9b      	lsrs	r3, r3, #10
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d010      	beq.n	8004278 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	09db      	lsrs	r3, r3, #7
 800425a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	f043 0208 	orr.w	r2, r3, #8
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004276:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	0a5b      	lsrs	r3, r3, #9
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	09db      	lsrs	r3, r3, #7
 8004288:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004294:	f043 0202 	orr.w	r2, r3, #2
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 030b 	and.w	r3, r3, #11
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fb89 	bl	80049d0 <I2C_ITError>
  }
}
 80042be:	bf00      	nop
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	460b      	mov	r3, r1
 80042f8:	70fb      	strb	r3, [r7, #3]
 80042fa:	4613      	mov	r3, r2
 80042fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <I2C_Slave_ISR_IT+0x24>
 8004366:	2302      	movs	r3, #2
 8004368:	e0ec      	b.n	8004544 <I2C_Slave_ISR_IT+0x1fe>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800438a:	6939      	ldr	r1, [r7, #16]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f9bf 	bl	8004710 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d04d      	beq.n	800443a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d047      	beq.n	800443a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d128      	bne.n	8004406 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b28      	cmp	r3, #40	; 0x28
 80043be:	d108      	bne.n	80043d2 <I2C_Slave_ISR_IT+0x8c>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043c6:	d104      	bne.n	80043d2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80043c8:	6939      	ldr	r1, [r7, #16]
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 faaa 	bl	8004924 <I2C_ITListenCplt>
 80043d0:	e032      	b.n	8004438 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b29      	cmp	r3, #41	; 0x29
 80043dc:	d10e      	bne.n	80043fc <I2C_Slave_ISR_IT+0xb6>
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043e4:	d00a      	beq.n	80043fc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2210      	movs	r2, #16
 80043ec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fbe5 	bl	8004bbe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f92d 	bl	8004654 <I2C_ITSlaveSeqCplt>
 80043fa:	e01d      	b.n	8004438 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2210      	movs	r2, #16
 8004402:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004404:	e096      	b.n	8004534 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2210      	movs	r2, #16
 800440c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f043 0204 	orr.w	r2, r3, #4
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <I2C_Slave_ISR_IT+0xe4>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004426:	f040 8085 	bne.w	8004534 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	4619      	mov	r1, r3
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 facd 	bl	80049d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004436:	e07d      	b.n	8004534 <I2C_Slave_ISR_IT+0x1ee>
 8004438:	e07c      	b.n	8004534 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d030      	beq.n	80044a8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	089b      	lsrs	r3, r3, #2
 800444a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02a      	beq.n	80044a8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d018      	beq.n	800448e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d14f      	bne.n	8004538 <I2C_Slave_ISR_IT+0x1f2>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800449e:	d04b      	beq.n	8004538 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f8d7 	bl	8004654 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80044a6:	e047      	b.n	8004538 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	08db      	lsrs	r3, r3, #3
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	08db      	lsrs	r3, r3, #3
 80044b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d004      	beq.n	80044ca <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80044c0:	6939      	ldr	r1, [r7, #16]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f842 	bl	800454c <I2C_ITAddrCplt>
 80044c8:	e037      	b.n	800453a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d031      	beq.n	800453a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d02b      	beq.n	800453a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d018      	beq.n	800451e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	851a      	strh	r2, [r3, #40]	; 0x28
 800451c:	e00d      	b.n	800453a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004524:	d002      	beq.n	800452c <I2C_Slave_ISR_IT+0x1e6>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f891 	bl	8004654 <I2C_ITSlaveSeqCplt>
 8004532:	e002      	b.n	800453a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004534:	bf00      	nop
 8004536:	e000      	b.n	800453a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004538:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004562:	2b28      	cmp	r3, #40	; 0x28
 8004564:	d16a      	bne.n	800463c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	b29b      	uxth	r3, r3
 8004580:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004584:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004592:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80045a0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d138      	bne.n	800461c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80045aa:	897b      	ldrh	r3, [r7, #10]
 80045ac:	09db      	lsrs	r3, r3, #7
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	89bb      	ldrh	r3, [r7, #12]
 80045b2:	4053      	eors	r3, r2
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f003 0306 	and.w	r3, r3, #6
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11c      	bne.n	80045f8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80045be:	897b      	ldrh	r3, [r7, #10]
 80045c0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d13b      	bne.n	800464c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2208      	movs	r2, #8
 80045e0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045ea:	89ba      	ldrh	r2, [r7, #12]
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	4619      	mov	r1, r3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff fe7c 	bl	80042ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045f6:	e029      	b.n	800464c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80045f8:	893b      	ldrh	r3, [r7, #8]
 80045fa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fd73 	bl	80050ec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800460e:	89ba      	ldrh	r2, [r7, #12]
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	4619      	mov	r1, r3
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff fe6a 	bl	80042ee <HAL_I2C_AddrCallback>
}
 800461a:	e017      	b.n	800464c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800461c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fd63 	bl	80050ec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800462e:	89ba      	ldrh	r2, [r7, #12]
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff fe5a 	bl	80042ee <HAL_I2C_AddrCallback>
}
 800463a:	e007      	b.n	800464c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2208      	movs	r2, #8
 8004642:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	0b9b      	lsrs	r3, r3, #14
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	e00d      	b.n	80046a6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	0bdb      	lsrs	r3, r3, #15
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b29      	cmp	r3, #41	; 0x29
 80046b0:	d112      	bne.n	80046d8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2228      	movs	r2, #40	; 0x28
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2221      	movs	r2, #33	; 0x21
 80046be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046c0:	2101      	movs	r1, #1
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fd12 	bl	80050ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff fdf8 	bl	80042c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80046d6:	e017      	b.n	8004708 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b2a      	cmp	r3, #42	; 0x2a
 80046e2:	d111      	bne.n	8004708 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2228      	movs	r2, #40	; 0x28
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2222      	movs	r2, #34	; 0x22
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046f2:	2102      	movs	r1, #2
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fcf9 	bl	80050ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fde9 	bl	80042da <HAL_I2C_SlaveRxCpltCallback>
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2220      	movs	r2, #32
 8004734:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b21      	cmp	r3, #33	; 0x21
 800473a:	d002      	beq.n	8004742 <I2C_ITSlaveCplt+0x32>
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b29      	cmp	r3, #41	; 0x29
 8004740:	d108      	bne.n	8004754 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004742:	f248 0101 	movw	r1, #32769	; 0x8001
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fcd0 	bl	80050ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2221      	movs	r2, #33	; 0x21
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
 8004752:	e00d      	b.n	8004770 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b22      	cmp	r3, #34	; 0x22
 8004758:	d002      	beq.n	8004760 <I2C_ITSlaveCplt+0x50>
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b2a      	cmp	r3, #42	; 0x2a
 800475e:	d107      	bne.n	8004770 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004760:	f248 0102 	movw	r1, #32770	; 0x8002
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fcc1 	bl	80050ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2222      	movs	r2, #34	; 0x22
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b64      	ldr	r3, [pc, #400]	; (800491c <I2C_ITSlaveCplt+0x20c>)
 800478c:	400b      	ands	r3, r1
 800478e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fa14 	bl	8004bbe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	0b9b      	lsrs	r3, r3, #14
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d013      	beq.n	80047ca <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d020      	beq.n	80047fc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047c8:	e018      	b.n	80047fc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	0bdb      	lsrs	r3, r3, #15
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d012      	beq.n	80047fc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047e4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d006      	beq.n	80047fc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d020      	beq.n	800484a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0304 	bic.w	r3, r3, #4
 800480e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00c      	beq.n	800484a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004858:	f043 0204 	orr.w	r2, r3, #4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8a7 	bl	80049d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b28      	cmp	r3, #40	; 0x28
 800488c:	d141      	bne.n	8004912 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800488e:	6979      	ldr	r1, [r7, #20]
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f847 	bl	8004924 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004896:	e03c      	b.n	8004912 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048a0:	d014      	beq.n	80048cc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff fed6 	bl	8004654 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <I2C_ITSlaveCplt+0x210>)
 80048ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fd20 	bl	800430a <HAL_I2C_ListenCpltCallback>
}
 80048ca:	e022      	b.n	8004912 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b22      	cmp	r3, #34	; 0x22
 80048d6:	d10e      	bne.n	80048f6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fcf3 	bl	80042da <HAL_I2C_SlaveRxCpltCallback>
}
 80048f4:	e00d      	b.n	8004912 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff fcda 	bl	80042c6 <HAL_I2C_SlaveTxCpltCallback>
}
 8004912:	bf00      	nop
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	fe00e800 	.word	0xfe00e800
 8004920:	ffff0000 	.word	0xffff0000

08004924 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a26      	ldr	r2, [pc, #152]	; (80049cc <I2C_ITListenCplt+0xa8>)
 8004932:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d022      	beq.n	80049a2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004978:	2b00      	cmp	r3, #0
 800497a:	d012      	beq.n	80049a2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499a:	f043 0204 	orr.w	r2, r3, #4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049a2:	f248 0103 	movw	r1, #32771	; 0x8003
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fba0 	bl	80050ec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2210      	movs	r2, #16
 80049b2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff fca4 	bl	800430a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	ffff0000 	.word	0xffff0000

080049d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a5d      	ldr	r2, [pc, #372]	; (8004b64 <I2C_ITError+0x194>)
 80049ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b28      	cmp	r3, #40	; 0x28
 8004a06:	d005      	beq.n	8004a14 <I2C_ITError+0x44>
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b29      	cmp	r3, #41	; 0x29
 8004a0c:	d002      	beq.n	8004a14 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b2a      	cmp	r3, #42	; 0x2a
 8004a12:	d10b      	bne.n	8004a2c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a14:	2103      	movs	r1, #3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fb68 	bl	80050ec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2228      	movs	r2, #40	; 0x28
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a50      	ldr	r2, [pc, #320]	; (8004b68 <I2C_ITError+0x198>)
 8004a28:	635a      	str	r2, [r3, #52]	; 0x34
 8004a2a:	e011      	b.n	8004a50 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a2c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fb5b 	bl	80050ec <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b60      	cmp	r3, #96	; 0x60
 8004a40:	d003      	beq.n	8004a4a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d039      	beq.n	8004ad2 <I2C_ITError+0x102>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b11      	cmp	r3, #17
 8004a62:	d002      	beq.n	8004a6a <I2C_ITError+0x9a>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b21      	cmp	r3, #33	; 0x21
 8004a68:	d133      	bne.n	8004ad2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a78:	d107      	bne.n	8004a8a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a88:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe ff7b 	bl	800398a <HAL_DMA_GetState>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d017      	beq.n	8004aca <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	4a33      	ldr	r2, [pc, #204]	; (8004b6c <I2C_ITError+0x19c>)
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe ff2a 	bl	8003908 <HAL_DMA_Abort_IT>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d04d      	beq.n	8004b56 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ac8:	e045      	b.n	8004b56 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f850 	bl	8004b70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ad0:	e041      	b.n	8004b56 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d039      	beq.n	8004b4e <I2C_ITError+0x17e>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b12      	cmp	r3, #18
 8004ade:	d002      	beq.n	8004ae6 <I2C_ITError+0x116>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b22      	cmp	r3, #34	; 0x22
 8004ae4:	d133      	bne.n	8004b4e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	d107      	bne.n	8004b06 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b04:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe ff3d 	bl	800398a <HAL_DMA_GetState>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d017      	beq.n	8004b46 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <I2C_ITError+0x19c>)
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe feec 	bl	8003908 <HAL_DMA_Abort_IT>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d011      	beq.n	8004b5a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b40:	4610      	mov	r0, r2
 8004b42:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b44:	e009      	b.n	8004b5a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f812 	bl	8004b70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b4c:	e005      	b.n	8004b5a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f80e 	bl	8004b70 <I2C_TreatErrorCallback>
  }
}
 8004b54:	e002      	b.n	8004b5c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b5a:	bf00      	nop
}
 8004b5c:	bf00      	nop
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	ffff0000 	.word	0xffff0000
 8004b68:	08004347 	.word	0x08004347
 8004b6c:	08004c07 	.word	0x08004c07

08004b70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b60      	cmp	r3, #96	; 0x60
 8004b82:	d10e      	bne.n	8004ba2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fbc9 	bl	8004332 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ba0:	e009      	b.n	8004bb6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff fbb4 	bl	800431e <HAL_I2C_ErrorCallback>
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d103      	bne.n	8004bdc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d007      	beq.n	8004bfa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699a      	ldr	r2, [r3, #24]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0201 	orr.w	r2, r2, #1
 8004bf8:	619a      	str	r2, [r3, #24]
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	2200      	movs	r2, #0
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	2200      	movs	r2, #0
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7ff ff9b 	bl	8004b70 <I2C_TreatErrorCallback>
}
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c52:	e022      	b.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d01e      	beq.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5c:	f7fe fd04 	bl	8003668 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d302      	bcc.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d113      	bne.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e00f      	b.n	8004cba <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699a      	ldr	r2, [r3, #24]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d0cd      	beq.n	8004c54 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cce:	e02c      	b.n	8004d2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f8eb 	bl	8004eb0 <I2C_IsErrorOccurred>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e02a      	b.n	8004d3a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d01e      	beq.n	8004d2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cec:	f7fe fcbc 	bl	8003668 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d113      	bne.n	8004d2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e007      	b.n	8004d3a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d1cb      	bne.n	8004cd0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d4e:	e028      	b.n	8004da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f8ab 	bl	8004eb0 <I2C_IsErrorOccurred>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e026      	b.n	8004db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d64:	f7fe fc80 	bl	8003668 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d302      	bcc.n	8004d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d113      	bne.n	8004da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	f043 0220 	orr.w	r2, r3, #32
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e007      	b.n	8004db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d1cf      	bne.n	8004d50 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dc8:	e064      	b.n	8004e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f86e 	bl	8004eb0 <I2C_IsErrorOccurred>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e062      	b.n	8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d138      	bne.n	8004e5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d105      	bne.n	8004e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e04e      	b.n	8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d107      	bne.n	8004e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2210      	movs	r2, #16
 8004e1a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2204      	movs	r2, #4
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44
 8004e22:	e002      	b.n	8004e2a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6859      	ldr	r1, [r3, #4]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004e3e:	400b      	ands	r3, r1
 8004e40:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e022      	b.n	8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7fe fc03 	bl	8003668 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10f      	bne.n	8004e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e78:	f043 0220 	orr.w	r2, r3, #32
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e007      	b.n	8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d193      	bne.n	8004dca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	fe00e800 	.word	0xfe00e800

08004eb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d075      	beq.n	8004fc8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ee4:	e056      	b.n	8004f94 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eec:	d052      	beq.n	8004f94 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004eee:	f7fe fbbb 	bl	8003668 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d302      	bcc.n	8004f04 <I2C_IsErrorOccurred+0x54>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d147      	bne.n	8004f94 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f26:	d12e      	bne.n	8004f86 <I2C_IsErrorOccurred+0xd6>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f2e:	d02a      	beq.n	8004f86 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d027      	beq.n	8004f86 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f46:	f7fe fb8f 	bl	8003668 <HAL_GetTick>
 8004f4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f4c:	e01b      	b.n	8004f86 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f4e:	f7fe fb8b 	bl	8003668 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b19      	cmp	r3, #25
 8004f5a:	d914      	bls.n	8004f86 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f60:	f043 0220 	orr.w	r2, r3, #32
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d1dc      	bne.n	8004f4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d003      	beq.n	8004faa <I2C_IsErrorOccurred+0xfa>
 8004fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d09d      	beq.n	8004ee6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	f043 0304 	orr.w	r3, r3, #4
 8004fc0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	f043 0308 	orr.w	r3, r3, #8
 8005002:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800500c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00b      	beq.n	8005036 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	f043 0302 	orr.w	r3, r3, #2
 8005024:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800502e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01c      	beq.n	8005078 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7ff fdbd 	bl	8004bbe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6859      	ldr	r1, [r3, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <I2C_IsErrorOccurred+0x1d4>)
 8005050:	400b      	ands	r3, r1
 8005052:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	431a      	orrs	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800507c:	4618      	mov	r0, r3
 800507e:	3728      	adds	r7, #40	; 0x28
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	fe00e800 	.word	0xfe00e800

08005088 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	817b      	strh	r3, [r7, #10]
 8005096:	4613      	mov	r3, r2
 8005098:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800509a:	897b      	ldrh	r3, [r7, #10]
 800509c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050a0:	7a7b      	ldrb	r3, [r7, #9]
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	0d5b      	lsrs	r3, r3, #21
 80050c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80050c6:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <I2C_TransferConfig+0x60>)
 80050c8:	430b      	orrs	r3, r1
 80050ca:	43db      	mvns	r3, r3
 80050cc:	ea02 0103 	and.w	r1, r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	03ff63ff 	.word	0x03ff63ff

080050ec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050fc:	887b      	ldrh	r3, [r7, #2]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00f      	beq.n	8005126 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800510c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005114:	b2db      	uxtb	r3, r3
 8005116:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800511a:	2b28      	cmp	r3, #40	; 0x28
 800511c:	d003      	beq.n	8005126 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005124:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005126:	887b      	ldrh	r3, [r7, #2]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00f      	beq.n	8005150 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005136:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005144:	2b28      	cmp	r3, #40	; 0x28
 8005146:	d003      	beq.n	8005150 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800514e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005150:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005154:	2b00      	cmp	r3, #0
 8005156:	da03      	bge.n	8005160 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800515e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	2b10      	cmp	r3, #16
 8005164:	d103      	bne.n	800516e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800516c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800516e:	887b      	ldrh	r3, [r7, #2]
 8005170:	2b20      	cmp	r3, #32
 8005172:	d103      	bne.n	800517c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f043 0320 	orr.w	r3, r3, #32
 800517a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800517c:	887b      	ldrh	r3, [r7, #2]
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	d103      	bne.n	800518a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005188:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	43da      	mvns	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	400a      	ands	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
}
 800519c:	bf00      	nop
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d138      	bne.n	8005230 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e032      	b.n	8005232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2224      	movs	r2, #36	; 0x24
 80051d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6819      	ldr	r1, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800523e:	b480      	push	{r7}
 8005240:	b085      	sub	sp, #20
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b20      	cmp	r3, #32
 8005252:	d139      	bne.n	80052c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800525e:	2302      	movs	r3, #2
 8005260:	e033      	b.n	80052ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2224      	movs	r2, #36	; 0x24
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005290:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e000      	b.n	80052ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a04      	ldr	r2, [pc, #16]	; (80052f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e6:	6013      	str	r3, [r2, #0]
}
 80052e8:	bf00      	nop
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40007000 	.word	0x40007000

080052f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80052fc:	4b04      	ldr	r3, [pc, #16]	; (8005310 <HAL_PWREx_GetVoltageRange+0x18>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005304:	4618      	mov	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40007000 	.word	0x40007000

08005314 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005322:	d130      	bne.n	8005386 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005324:	4b23      	ldr	r3, [pc, #140]	; (80053b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800532c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005330:	d038      	beq.n	80053a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005332:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800533a:	4a1e      	ldr	r2, [pc, #120]	; (80053b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800533c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005340:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005342:	4b1d      	ldr	r3, [pc, #116]	; (80053b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2232      	movs	r2, #50	; 0x32
 8005348:	fb02 f303 	mul.w	r3, r2, r3
 800534c:	4a1b      	ldr	r2, [pc, #108]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	0c9b      	lsrs	r3, r3, #18
 8005354:	3301      	adds	r3, #1
 8005356:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005358:	e002      	b.n	8005360 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3b01      	subs	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005360:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536c:	d102      	bne.n	8005374 <HAL_PWREx_ControlVoltageScaling+0x60>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f2      	bne.n	800535a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005380:	d110      	bne.n	80053a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e00f      	b.n	80053a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005386:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800538e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005392:	d007      	beq.n	80053a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005394:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800539c:	4a05      	ldr	r2, [pc, #20]	; (80053b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800539e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40007000 	.word	0x40007000
 80053b8:	20000000 	.word	0x20000000
 80053bc:	431bde83 	.word	0x431bde83

080053c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f000 bc02 	b.w	8005bd8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d4:	4b96      	ldr	r3, [pc, #600]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053de:	4b94      	ldr	r3, [pc, #592]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80e4 	beq.w	80055be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d007      	beq.n	800540c <HAL_RCC_OscConfig+0x4c>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b0c      	cmp	r3, #12
 8005400:	f040 808b 	bne.w	800551a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b01      	cmp	r3, #1
 8005408:	f040 8087 	bne.w	800551a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800540c:	4b88      	ldr	r3, [pc, #544]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_RCC_OscConfig+0x64>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e3d9      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	4b81      	ldr	r3, [pc, #516]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <HAL_RCC_OscConfig+0x7e>
 8005434:	4b7e      	ldr	r3, [pc, #504]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800543c:	e005      	b.n	800544a <HAL_RCC_OscConfig+0x8a>
 800543e:	4b7c      	ldr	r3, [pc, #496]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800544a:	4293      	cmp	r3, r2
 800544c:	d223      	bcs.n	8005496 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fdbe 	bl	8005fd4 <RCC_SetFlashLatencyFromMSIRange>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e3ba      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005462:	4b73      	ldr	r3, [pc, #460]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a72      	ldr	r2, [pc, #456]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005468:	f043 0308 	orr.w	r3, r3, #8
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	4b70      	ldr	r3, [pc, #448]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	496d      	ldr	r1, [pc, #436]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005480:	4b6b      	ldr	r3, [pc, #428]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	4968      	ldr	r1, [pc, #416]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
 8005494:	e025      	b.n	80054e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005496:	4b66      	ldr	r3, [pc, #408]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a65      	ldr	r2, [pc, #404]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800549c:	f043 0308 	orr.w	r3, r3, #8
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	4b63      	ldr	r3, [pc, #396]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	4960      	ldr	r1, [pc, #384]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054b4:	4b5e      	ldr	r3, [pc, #376]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	495b      	ldr	r1, [pc, #364]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fd7e 	bl	8005fd4 <RCC_SetFlashLatencyFromMSIRange>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e37a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054e2:	f000 fc81 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 80054e6:	4602      	mov	r2, r0
 80054e8:	4b51      	ldr	r3, [pc, #324]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	4950      	ldr	r1, [pc, #320]	; (8005634 <HAL_RCC_OscConfig+0x274>)
 80054f4:	5ccb      	ldrb	r3, [r1, r3]
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	fa22 f303 	lsr.w	r3, r2, r3
 80054fe:	4a4e      	ldr	r2, [pc, #312]	; (8005638 <HAL_RCC_OscConfig+0x278>)
 8005500:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005502:	4b4e      	ldr	r3, [pc, #312]	; (800563c <HAL_RCC_OscConfig+0x27c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f7fd ff72 	bl	80033f0 <HAL_InitTick>
 800550c:	4603      	mov	r3, r0
 800550e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d052      	beq.n	80055bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	e35e      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d032      	beq.n	8005588 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005522:	4b43      	ldr	r3, [pc, #268]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a42      	ldr	r2, [pc, #264]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800552e:	f7fe f89b 	bl	8003668 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005536:	f7fe f897 	bl	8003668 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e347      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005548:	4b39      	ldr	r3, [pc, #228]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005554:	4b36      	ldr	r3, [pc, #216]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a35      	ldr	r2, [pc, #212]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800555a:	f043 0308 	orr.w	r3, r3, #8
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	4b33      	ldr	r3, [pc, #204]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	4930      	ldr	r1, [pc, #192]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800556e:	4313      	orrs	r3, r2
 8005570:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005572:	4b2f      	ldr	r3, [pc, #188]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	492b      	ldr	r1, [pc, #172]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005582:	4313      	orrs	r3, r2
 8005584:	604b      	str	r3, [r1, #4]
 8005586:	e01a      	b.n	80055be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005588:	4b29      	ldr	r3, [pc, #164]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a28      	ldr	r2, [pc, #160]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005594:	f7fe f868 	bl	8003668 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800559c:	f7fe f864 	bl	8003668 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e314      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055ae:	4b20      	ldr	r3, [pc, #128]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x1dc>
 80055ba:	e000      	b.n	80055be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d073      	beq.n	80056b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_OscConfig+0x21c>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b0c      	cmp	r3, #12
 80055d4:	d10e      	bne.n	80055f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d10b      	bne.n	80055f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055dc:	4b14      	ldr	r3, [pc, #80]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d063      	beq.n	80056b0 <HAL_RCC_OscConfig+0x2f0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d15f      	bne.n	80056b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e2f1      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fc:	d106      	bne.n	800560c <HAL_RCC_OscConfig+0x24c>
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a0b      	ldr	r2, [pc, #44]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e025      	b.n	8005658 <HAL_RCC_OscConfig+0x298>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005614:	d114      	bne.n	8005640 <HAL_RCC_OscConfig+0x280>
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a05      	ldr	r2, [pc, #20]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800561c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	4b03      	ldr	r3, [pc, #12]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a02      	ldr	r2, [pc, #8]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e013      	b.n	8005658 <HAL_RCC_OscConfig+0x298>
 8005630:	40021000 	.word	0x40021000
 8005634:	08008b18 	.word	0x08008b18
 8005638:	20000000 	.word	0x20000000
 800563c:	20000004 	.word	0x20000004
 8005640:	4ba0      	ldr	r3, [pc, #640]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a9f      	ldr	r2, [pc, #636]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	4b9d      	ldr	r3, [pc, #628]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a9c      	ldr	r2, [pc, #624]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d013      	beq.n	8005688 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005660:	f7fe f802 	bl	8003668 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005668:	f7fd fffe 	bl	8003668 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	; 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e2ae      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800567a:	4b92      	ldr	r3, [pc, #584]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0x2a8>
 8005686:	e014      	b.n	80056b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fd ffee 	bl	8003668 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005690:	f7fd ffea 	bl	8003668 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	; 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e29a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056a2:	4b88      	ldr	r3, [pc, #544]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x2d0>
 80056ae:	e000      	b.n	80056b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d060      	beq.n	8005780 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_OscConfig+0x310>
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	d119      	bne.n	80056fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d116      	bne.n	80056fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d0:	4b7c      	ldr	r3, [pc, #496]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_OscConfig+0x328>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e277      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e8:	4b76      	ldr	r3, [pc, #472]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	4973      	ldr	r1, [pc, #460]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056fc:	e040      	b.n	8005780 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d023      	beq.n	800574e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005706:	4b6f      	ldr	r3, [pc, #444]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a6e      	ldr	r2, [pc, #440]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 800570c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005712:	f7fd ffa9 	bl	8003668 <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800571a:	f7fd ffa5 	bl	8003668 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e255      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800572c:	4b65      	ldr	r3, [pc, #404]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005738:	4b62      	ldr	r3, [pc, #392]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	061b      	lsls	r3, r3, #24
 8005746:	495f      	ldr	r1, [pc, #380]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005748:	4313      	orrs	r3, r2
 800574a:	604b      	str	r3, [r1, #4]
 800574c:	e018      	b.n	8005780 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800574e:	4b5d      	ldr	r3, [pc, #372]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a5c      	ldr	r2, [pc, #368]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575a:	f7fd ff85 	bl	8003668 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005762:	f7fd ff81 	bl	8003668 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e231      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005774:	4b53      	ldr	r3, [pc, #332]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f0      	bne.n	8005762 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d03c      	beq.n	8005806 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01c      	beq.n	80057ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005794:	4b4b      	ldr	r3, [pc, #300]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800579a:	4a4a      	ldr	r2, [pc, #296]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a4:	f7fd ff60 	bl	8003668 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ac:	f7fd ff5c 	bl	8003668 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e20c      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057be:	4b41      	ldr	r3, [pc, #260]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80057c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0ef      	beq.n	80057ac <HAL_RCC_OscConfig+0x3ec>
 80057cc:	e01b      	b.n	8005806 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ce:	4b3d      	ldr	r3, [pc, #244]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80057d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d4:	4a3b      	ldr	r2, [pc, #236]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057de:	f7fd ff43 	bl	8003668 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e6:	f7fd ff3f 	bl	8003668 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e1ef      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057f8:	4b32      	ldr	r3, [pc, #200]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80057fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1ef      	bne.n	80057e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 80a6 	beq.w	8005960 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005814:	2300      	movs	r3, #0
 8005816:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005818:	4b2a      	ldr	r3, [pc, #168]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 800581a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10d      	bne.n	8005840 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005824:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005828:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 800582a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582e:	6593      	str	r3, [r2, #88]	; 0x58
 8005830:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005838:	60bb      	str	r3, [r7, #8]
 800583a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800583c:	2301      	movs	r3, #1
 800583e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005840:	4b21      	ldr	r3, [pc, #132]	; (80058c8 <HAL_RCC_OscConfig+0x508>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d118      	bne.n	800587e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800584c:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <HAL_RCC_OscConfig+0x508>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <HAL_RCC_OscConfig+0x508>)
 8005852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005856:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005858:	f7fd ff06 	bl	8003668 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005860:	f7fd ff02 	bl	8003668 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e1b2      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <HAL_RCC_OscConfig+0x508>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d108      	bne.n	8005898 <HAL_RCC_OscConfig+0x4d8>
 8005886:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588c:	4a0d      	ldr	r2, [pc, #52]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005896:	e029      	b.n	80058ec <HAL_RCC_OscConfig+0x52c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b05      	cmp	r3, #5
 800589e:	d115      	bne.n	80058cc <HAL_RCC_OscConfig+0x50c>
 80058a0:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a6:	4a07      	ldr	r2, [pc, #28]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80058a8:	f043 0304 	orr.w	r3, r3, #4
 80058ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058b0:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	4a03      	ldr	r2, [pc, #12]	; (80058c4 <HAL_RCC_OscConfig+0x504>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058c0:	e014      	b.n	80058ec <HAL_RCC_OscConfig+0x52c>
 80058c2:	bf00      	nop
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40007000 	.word	0x40007000
 80058cc:	4b9a      	ldr	r3, [pc, #616]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d2:	4a99      	ldr	r2, [pc, #612]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058dc:	4b96      	ldr	r3, [pc, #600]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e2:	4a95      	ldr	r2, [pc, #596]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 80058e4:	f023 0304 	bic.w	r3, r3, #4
 80058e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d016      	beq.n	8005922 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f4:	f7fd feb8 	bl	8003668 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fa:	e00a      	b.n	8005912 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fc:	f7fd feb4 	bl	8003668 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	; 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e162      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005912:	4b89      	ldr	r3, [pc, #548]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0ed      	beq.n	80058fc <HAL_RCC_OscConfig+0x53c>
 8005920:	e015      	b.n	800594e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005922:	f7fd fea1 	bl	8003668 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005928:	e00a      	b.n	8005940 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592a:	f7fd fe9d 	bl	8003668 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f241 3288 	movw	r2, #5000	; 0x1388
 8005938:	4293      	cmp	r3, r2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e14b      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005940:	4b7d      	ldr	r3, [pc, #500]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1ed      	bne.n	800592a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800594e:	7ffb      	ldrb	r3, [r7, #31]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005954:	4b78      	ldr	r3, [pc, #480]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	4a77      	ldr	r2, [pc, #476]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 800595a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d03c      	beq.n	80059e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01c      	beq.n	80059ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005974:	4b70      	ldr	r3, [pc, #448]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800597a:	4a6f      	ldr	r2, [pc, #444]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005984:	f7fd fe70 	bl	8003668 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800598c:	f7fd fe6c 	bl	8003668 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e11c      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800599e:	4b66      	ldr	r3, [pc, #408]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 80059a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0ef      	beq.n	800598c <HAL_RCC_OscConfig+0x5cc>
 80059ac:	e01b      	b.n	80059e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059ae:	4b62      	ldr	r3, [pc, #392]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 80059b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b4:	4a60      	ldr	r2, [pc, #384]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059be:	f7fd fe53 	bl	8003668 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059c6:	f7fd fe4f 	bl	8003668 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e0ff      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059d8:	4b57      	ldr	r3, [pc, #348]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 80059da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1ef      	bne.n	80059c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80f3 	beq.w	8005bd6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	f040 80c9 	bne.w	8005b8c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059fa:	4b4f      	ldr	r3, [pc, #316]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f003 0203 	and.w	r2, r3, #3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d12c      	bne.n	8005a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d123      	bne.n	8005a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d11b      	bne.n	8005a68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d113      	bne.n	8005a68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d109      	bne.n	8005a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	3b01      	subs	r3, #1
 8005a62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d06b      	beq.n	8005b40 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2b0c      	cmp	r3, #12
 8005a6c:	d062      	beq.n	8005b34 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a6e:	4b32      	ldr	r3, [pc, #200]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e0ac      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a7e:	4b2e      	ldr	r3, [pc, #184]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a2d      	ldr	r2, [pc, #180]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005a84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a8a:	f7fd fded 	bl	8003668 <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a92:	f7fd fde9 	bl	8003668 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e099      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aa4:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f0      	bne.n	8005a92 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ab0:	4b21      	ldr	r3, [pc, #132]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <HAL_RCC_OscConfig+0x77c>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ac0:	3a01      	subs	r2, #1
 8005ac2:	0112      	lsls	r2, r2, #4
 8005ac4:	4311      	orrs	r1, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aca:	0212      	lsls	r2, r2, #8
 8005acc:	4311      	orrs	r1, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ad2:	0852      	lsrs	r2, r2, #1
 8005ad4:	3a01      	subs	r2, #1
 8005ad6:	0552      	lsls	r2, r2, #21
 8005ad8:	4311      	orrs	r1, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ade:	0852      	lsrs	r2, r2, #1
 8005ae0:	3a01      	subs	r2, #1
 8005ae2:	0652      	lsls	r2, r2, #25
 8005ae4:	4311      	orrs	r1, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005aea:	06d2      	lsls	r2, r2, #27
 8005aec:	430a      	orrs	r2, r1
 8005aee:	4912      	ldr	r1, [pc, #72]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005af4:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a0f      	ldr	r2, [pc, #60]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005afe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b00:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	4a0c      	ldr	r2, [pc, #48]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b0c:	f7fd fdac 	bl	8003668 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b14:	f7fd fda8 	bl	8003668 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e058      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b26:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <HAL_RCC_OscConfig+0x778>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b32:	e050      	b.n	8005bd6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e04f      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b40:	4b27      	ldr	r3, [pc, #156]	; (8005be0 <HAL_RCC_OscConfig+0x820>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d144      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b4c:	4b24      	ldr	r3, [pc, #144]	; (8005be0 <HAL_RCC_OscConfig+0x820>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <HAL_RCC_OscConfig+0x820>)
 8005b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b58:	4b21      	ldr	r3, [pc, #132]	; (8005be0 <HAL_RCC_OscConfig+0x820>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4a20      	ldr	r2, [pc, #128]	; (8005be0 <HAL_RCC_OscConfig+0x820>)
 8005b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b64:	f7fd fd80 	bl	8003668 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6c:	f7fd fd7c 	bl	8003668 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e02c      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b7e:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <HAL_RCC_OscConfig+0x820>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0x7ac>
 8005b8a:	e024      	b.n	8005bd6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b0c      	cmp	r3, #12
 8005b90:	d01f      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b92:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <HAL_RCC_OscConfig+0x820>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a12      	ldr	r2, [pc, #72]	; (8005be0 <HAL_RCC_OscConfig+0x820>)
 8005b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9e:	f7fd fd63 	bl	8003668 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba6:	f7fd fd5f 	bl	8003668 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e00f      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bb8:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <HAL_RCC_OscConfig+0x820>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f0      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <HAL_RCC_OscConfig+0x820>)
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	4905      	ldr	r1, [pc, #20]	; (8005be0 <HAL_RCC_OscConfig+0x820>)
 8005bca:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <HAL_RCC_OscConfig+0x824>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60cb      	str	r3, [r1, #12]
 8005bd0:	e001      	b.n	8005bd6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40021000 	.word	0x40021000
 8005be4:	feeefffc 	.word	0xfeeefffc

08005be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0e7      	b.n	8005dcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b75      	ldr	r3, [pc, #468]	; (8005dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d910      	bls.n	8005c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b72      	ldr	r3, [pc, #456]	; (8005dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 0207 	bic.w	r2, r3, #7
 8005c12:	4970      	ldr	r1, [pc, #448]	; (8005dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b6e      	ldr	r3, [pc, #440]	; (8005dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d001      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0cf      	b.n	8005dcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d010      	beq.n	8005c5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	4b66      	ldr	r3, [pc, #408]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d908      	bls.n	8005c5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c48:	4b63      	ldr	r3, [pc, #396]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4960      	ldr	r1, [pc, #384]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d04c      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d107      	bne.n	8005c7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c6e:	4b5a      	ldr	r3, [pc, #360]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d121      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0a6      	b.n	8005dcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d107      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c86:	4b54      	ldr	r3, [pc, #336]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d115      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e09a      	b.n	8005dcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d107      	bne.n	8005cae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c9e:	4b4e      	ldr	r3, [pc, #312]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d109      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e08e      	b.n	8005dcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cae:	4b4a      	ldr	r3, [pc, #296]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e086      	b.n	8005dcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cbe:	4b46      	ldr	r3, [pc, #280]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f023 0203 	bic.w	r2, r3, #3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4943      	ldr	r1, [pc, #268]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd0:	f7fd fcca 	bl	8003668 <HAL_GetTick>
 8005cd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd6:	e00a      	b.n	8005cee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd8:	f7fd fcc6 	bl	8003668 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e06e      	b.n	8005dcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cee:	4b3a      	ldr	r3, [pc, #232]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 020c 	and.w	r2, r3, #12
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d1eb      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d010      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	4b31      	ldr	r3, [pc, #196]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d208      	bcs.n	8005d2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d1c:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	492b      	ldr	r1, [pc, #172]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d2e:	4b29      	ldr	r3, [pc, #164]	; (8005dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d210      	bcs.n	8005d5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3c:	4b25      	ldr	r3, [pc, #148]	; (8005dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f023 0207 	bic.w	r2, r3, #7
 8005d44:	4923      	ldr	r1, [pc, #140]	; (8005dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4c:	4b21      	ldr	r3, [pc, #132]	; (8005dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d001      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e036      	b.n	8005dcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d6a:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	4918      	ldr	r1, [pc, #96]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d009      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d88:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4910      	ldr	r1, [pc, #64]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d9c:	f000 f824 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b0d      	ldr	r3, [pc, #52]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	091b      	lsrs	r3, r3, #4
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	490b      	ldr	r1, [pc, #44]	; (8005ddc <HAL_RCC_ClockConfig+0x1f4>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	fa22 f303 	lsr.w	r3, r2, r3
 8005db8:	4a09      	ldr	r2, [pc, #36]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005dba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <HAL_RCC_ClockConfig+0x1fc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fd fb15 	bl	80033f0 <HAL_InitTick>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8005dca:	7afb      	ldrb	r3, [r7, #11]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40022000 	.word	0x40022000
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	08008b18 	.word	0x08008b18
 8005de0:	20000000 	.word	0x20000000
 8005de4:	20000004 	.word	0x20000004

08005de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	; 0x24
 8005dec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	2300      	movs	r3, #0
 8005df4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005df6:	4b3e      	ldr	r3, [pc, #248]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 030c 	and.w	r3, r3, #12
 8005dfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e00:	4b3b      	ldr	r3, [pc, #236]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <HAL_RCC_GetSysClockFreq+0x34>
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b0c      	cmp	r3, #12
 8005e14:	d121      	bne.n	8005e5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d11e      	bne.n	8005e5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e1c:	4b34      	ldr	r3, [pc, #208]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d107      	bne.n	8005e38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e28:	4b31      	ldr	r3, [pc, #196]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e2e:	0a1b      	lsrs	r3, r3, #8
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	61fb      	str	r3, [r7, #28]
 8005e36:	e005      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e38:	4b2d      	ldr	r3, [pc, #180]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e44:	4a2b      	ldr	r2, [pc, #172]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10d      	bne.n	8005e70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e58:	e00a      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d102      	bne.n	8005e66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e60:	4b25      	ldr	r3, [pc, #148]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	e004      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d101      	bne.n	8005e70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e6c:	4b23      	ldr	r3, [pc, #140]	; (8005efc <HAL_RCC_GetSysClockFreq+0x114>)
 8005e6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2b0c      	cmp	r3, #12
 8005e74:	d134      	bne.n	8005ee0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e76:	4b1e      	ldr	r3, [pc, #120]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d003      	beq.n	8005e8e <HAL_RCC_GetSysClockFreq+0xa6>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d003      	beq.n	8005e94 <HAL_RCC_GetSysClockFreq+0xac>
 8005e8c:	e005      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e90:	617b      	str	r3, [r7, #20]
      break;
 8005e92:	e005      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e94:	4b19      	ldr	r3, [pc, #100]	; (8005efc <HAL_RCC_GetSysClockFreq+0x114>)
 8005e96:	617b      	str	r3, [r7, #20]
      break;
 8005e98:	e002      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	617b      	str	r3, [r7, #20]
      break;
 8005e9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ea0:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	091b      	lsrs	r3, r3, #4
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	3301      	adds	r3, #1
 8005eac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005eae:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	fb03 f202 	mul.w	r2, r3, r2
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ec6:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	0e5b      	lsrs	r3, r3, #25
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ede:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3724      	adds	r7, #36	; 0x24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	08008b30 	.word	0x08008b30
 8005ef8:	00f42400 	.word	0x00f42400
 8005efc:	007a1200 	.word	0x007a1200

08005f00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f04:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f06:	681b      	ldr	r3, [r3, #0]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000000 	.word	0x20000000

08005f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f1c:	f7ff fff0 	bl	8005f00 <HAL_RCC_GetHCLKFreq>
 8005f20:	4602      	mov	r2, r0
 8005f22:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	4904      	ldr	r1, [pc, #16]	; (8005f40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f2e:	5ccb      	ldrb	r3, [r1, r3]
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	08008b28 	.word	0x08008b28

08005f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f48:	f7ff ffda 	bl	8005f00 <HAL_RCC_GetHCLKFreq>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	0adb      	lsrs	r3, r3, #11
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	4904      	ldr	r1, [pc, #16]	; (8005f6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f5a:	5ccb      	ldrb	r3, [r1, r3]
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	08008b28 	.word	0x08008b28

08005f70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	220f      	movs	r2, #15
 8005f7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005f80:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0203 	and.w	r2, r3, #3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005f98:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005fa4:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <HAL_RCC_GetClockConfig+0x5c>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	08db      	lsrs	r3, r3, #3
 8005faa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005fb2:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <HAL_RCC_GetClockConfig+0x60>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0207 	and.w	r2, r3, #7
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	601a      	str	r2, [r3, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	40022000 	.word	0x40022000

08005fd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005fdc:	2300      	movs	r3, #0
 8005fde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005fe0:	4b2a      	ldr	r3, [pc, #168]	; (800608c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005fec:	f7ff f984 	bl	80052f8 <HAL_PWREx_GetVoltageRange>
 8005ff0:	6178      	str	r0, [r7, #20]
 8005ff2:	e014      	b.n	800601e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ff4:	4b25      	ldr	r3, [pc, #148]	; (800608c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff8:	4a24      	ldr	r2, [pc, #144]	; (800608c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8006000:	4b22      	ldr	r3, [pc, #136]	; (800608c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800600c:	f7ff f974 	bl	80052f8 <HAL_PWREx_GetVoltageRange>
 8006010:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006012:	4b1e      	ldr	r3, [pc, #120]	; (800608c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006016:	4a1d      	ldr	r2, [pc, #116]	; (800608c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800601c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006024:	d10b      	bne.n	800603e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b80      	cmp	r3, #128	; 0x80
 800602a:	d919      	bls.n	8006060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2ba0      	cmp	r3, #160	; 0xa0
 8006030:	d902      	bls.n	8006038 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006032:	2302      	movs	r3, #2
 8006034:	613b      	str	r3, [r7, #16]
 8006036:	e013      	b.n	8006060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006038:	2301      	movs	r3, #1
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	e010      	b.n	8006060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b80      	cmp	r3, #128	; 0x80
 8006042:	d902      	bls.n	800604a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006044:	2303      	movs	r3, #3
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	e00a      	b.n	8006060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d102      	bne.n	8006056 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006050:	2302      	movs	r3, #2
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	e004      	b.n	8006060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b70      	cmp	r3, #112	; 0x70
 800605a:	d101      	bne.n	8006060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800605c:	2301      	movs	r3, #1
 800605e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f023 0207 	bic.w	r2, r3, #7
 8006068:	4909      	ldr	r1, [pc, #36]	; (8006090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	429a      	cmp	r2, r3
 800607c:	d001      	beq.n	8006082 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e000      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40021000 	.word	0x40021000
 8006090:	40022000 	.word	0x40022000

08006094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800609c:	2300      	movs	r3, #0
 800609e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060a0:	2300      	movs	r3, #0
 80060a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d031      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060b8:	d01a      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80060ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060be:	d814      	bhi.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d009      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060c8:	d10f      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80060ca:	4b5d      	ldr	r3, [pc, #372]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	4a5c      	ldr	r2, [pc, #368]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060d6:	e00c      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 f9de 	bl	80064a0 <RCCEx_PLLSAI1_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060e8:	e003      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	74fb      	strb	r3, [r7, #19]
      break;
 80060ee:	e000      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80060f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060f2:	7cfb      	ldrb	r3, [r7, #19]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10b      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060f8:	4b51      	ldr	r3, [pc, #324]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006106:	494e      	ldr	r1, [pc, #312]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800610e:	e001      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006110:	7cfb      	ldrb	r3, [r7, #19]
 8006112:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 809e 	beq.w	800625e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006122:	2300      	movs	r3, #0
 8006124:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006126:	4b46      	ldr	r3, [pc, #280]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006136:	2300      	movs	r3, #0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00d      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800613c:	4b40      	ldr	r3, [pc, #256]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800613e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006140:	4a3f      	ldr	r2, [pc, #252]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006146:	6593      	str	r3, [r2, #88]	; 0x58
 8006148:	4b3d      	ldr	r3, [pc, #244]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800614a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006154:	2301      	movs	r3, #1
 8006156:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006158:	4b3a      	ldr	r3, [pc, #232]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a39      	ldr	r2, [pc, #228]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800615e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006162:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006164:	f7fd fa80 	bl	8003668 <HAL_GetTick>
 8006168:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800616a:	e009      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800616c:	f7fd fa7c 	bl	8003668 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d902      	bls.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	74fb      	strb	r3, [r7, #19]
        break;
 800617e:	e005      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006180:	4b30      	ldr	r3, [pc, #192]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0ef      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800618c:	7cfb      	ldrb	r3, [r7, #19]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d15a      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006192:	4b2b      	ldr	r3, [pc, #172]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01e      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d019      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061ae:	4b24      	ldr	r3, [pc, #144]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061ba:	4b21      	ldr	r3, [pc, #132]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c0:	4a1f      	ldr	r2, [pc, #124]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061ca:	4b1d      	ldr	r3, [pc, #116]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d0:	4a1b      	ldr	r2, [pc, #108]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061da:	4a19      	ldr	r2, [pc, #100]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d016      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fd fa3c 	bl	8003668 <HAL_GetTick>
 80061f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061f2:	e00b      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f4:	f7fd fa38 	bl	8003668 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006202:	4293      	cmp	r3, r2
 8006204:	d902      	bls.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	74fb      	strb	r3, [r7, #19]
            break;
 800620a:	e006      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ec      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800621a:	7cfb      	ldrb	r3, [r7, #19]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10b      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006220:	4b07      	ldr	r3, [pc, #28]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006226:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622e:	4904      	ldr	r1, [pc, #16]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006236:	e009      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006238:	7cfb      	ldrb	r3, [r7, #19]
 800623a:	74bb      	strb	r3, [r7, #18]
 800623c:	e006      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800623e:	bf00      	nop
 8006240:	40021000 	.word	0x40021000
 8006244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006248:	7cfb      	ldrb	r3, [r7, #19]
 800624a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800624c:	7c7b      	ldrb	r3, [r7, #17]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d105      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006252:	4b8a      	ldr	r3, [pc, #552]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006256:	4a89      	ldr	r2, [pc, #548]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800625c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800626a:	4b84      	ldr	r3, [pc, #528]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800626c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006270:	f023 0203 	bic.w	r2, r3, #3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	4980      	ldr	r1, [pc, #512]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800628c:	4b7b      	ldr	r3, [pc, #492]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800628e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006292:	f023 020c 	bic.w	r2, r3, #12
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	4978      	ldr	r1, [pc, #480]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800629c:	4313      	orrs	r3, r2
 800629e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062ae:	4b73      	ldr	r3, [pc, #460]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062bc:	496f      	ldr	r1, [pc, #444]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00a      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062d0:	4b6a      	ldr	r3, [pc, #424]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062de:	4967      	ldr	r1, [pc, #412]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062f2:	4b62      	ldr	r3, [pc, #392]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	495e      	ldr	r1, [pc, #376]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006314:	4b59      	ldr	r3, [pc, #356]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	4956      	ldr	r1, [pc, #344]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006336:	4b51      	ldr	r3, [pc, #324]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	494d      	ldr	r1, [pc, #308]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d028      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006358:	4b48      	ldr	r3, [pc, #288]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800635a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	4945      	ldr	r1, [pc, #276]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006368:	4313      	orrs	r3, r2
 800636a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006376:	d106      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006378:	4b40      	ldr	r3, [pc, #256]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	4a3f      	ldr	r2, [pc, #252]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800637e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006382:	60d3      	str	r3, [r2, #12]
 8006384:	e011      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800638e:	d10c      	bne.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3304      	adds	r3, #4
 8006394:	2101      	movs	r1, #1
 8006396:	4618      	mov	r0, r3
 8006398:	f000 f882 	bl	80064a0 <RCCEx_PLLSAI1_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80063a0:	7cfb      	ldrb	r3, [r7, #19]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80063a6:	7cfb      	ldrb	r3, [r7, #19]
 80063a8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d028      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063b6:	4b31      	ldr	r3, [pc, #196]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c4:	492d      	ldr	r1, [pc, #180]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063d4:	d106      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063d6:	4b29      	ldr	r3, [pc, #164]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	4a28      	ldr	r2, [pc, #160]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063e0:	60d3      	str	r3, [r2, #12]
 80063e2:	e011      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063ec:	d10c      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3304      	adds	r3, #4
 80063f2:	2101      	movs	r1, #1
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 f853 	bl	80064a0 <RCCEx_PLLSAI1_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063fe:	7cfb      	ldrb	r3, [r7, #19]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006404:	7cfb      	ldrb	r3, [r7, #19]
 8006406:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01c      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006414:	4b19      	ldr	r3, [pc, #100]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006422:	4916      	ldr	r1, [pc, #88]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800642e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006432:	d10c      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	2102      	movs	r1, #2
 800643a:	4618      	mov	r0, r3
 800643c:	f000 f830 	bl	80064a0 <RCCEx_PLLSAI1_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006444:	7cfb      	ldrb	r3, [r7, #19]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800644a:	7cfb      	ldrb	r3, [r7, #19]
 800644c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800645a:	4b08      	ldr	r3, [pc, #32]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006468:	4904      	ldr	r1, [pc, #16]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006470:	7cbb      	ldrb	r3, [r7, #18]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40021000 	.word	0x40021000

08006480 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a04      	ldr	r2, [pc, #16]	; (800649c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800648a:	f043 0304 	orr.w	r3, r3, #4
 800648e:	6013      	str	r3, [r2, #0]
}
 8006490:	bf00      	nop
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40021000 	.word	0x40021000

080064a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064ae:	4b74      	ldr	r3, [pc, #464]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d018      	beq.n	80064ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064ba:	4b71      	ldr	r3, [pc, #452]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f003 0203 	and.w	r2, r3, #3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d10d      	bne.n	80064e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
       ||
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80064d2:	4b6b      	ldr	r3, [pc, #428]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	091b      	lsrs	r3, r3, #4
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
       ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d047      	beq.n	8006576 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	73fb      	strb	r3, [r7, #15]
 80064ea:	e044      	b.n	8006576 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d018      	beq.n	8006526 <RCCEx_PLLSAI1_Config+0x86>
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d825      	bhi.n	8006544 <RCCEx_PLLSAI1_Config+0xa4>
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d002      	beq.n	8006502 <RCCEx_PLLSAI1_Config+0x62>
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d009      	beq.n	8006514 <RCCEx_PLLSAI1_Config+0x74>
 8006500:	e020      	b.n	8006544 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006502:	4b5f      	ldr	r3, [pc, #380]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d11d      	bne.n	800654a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006512:	e01a      	b.n	800654a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006514:	4b5a      	ldr	r3, [pc, #360]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800651c:	2b00      	cmp	r3, #0
 800651e:	d116      	bne.n	800654e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006524:	e013      	b.n	800654e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006526:	4b56      	ldr	r3, [pc, #344]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10f      	bne.n	8006552 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006532:	4b53      	ldr	r3, [pc, #332]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d109      	bne.n	8006552 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006542:	e006      	b.n	8006552 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
      break;
 8006548:	e004      	b.n	8006554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800654a:	bf00      	nop
 800654c:	e002      	b.n	8006554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800654e:	bf00      	nop
 8006550:	e000      	b.n	8006554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006552:	bf00      	nop
    }

    if(status == HAL_OK)
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10d      	bne.n	8006576 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800655a:	4b49      	ldr	r3, [pc, #292]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6819      	ldr	r1, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	3b01      	subs	r3, #1
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	430b      	orrs	r3, r1
 8006570:	4943      	ldr	r1, [pc, #268]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006572:	4313      	orrs	r3, r2
 8006574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d17c      	bne.n	8006676 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800657c:	4b40      	ldr	r3, [pc, #256]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a3f      	ldr	r2, [pc, #252]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006582:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006588:	f7fd f86e 	bl	8003668 <HAL_GetTick>
 800658c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800658e:	e009      	b.n	80065a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006590:	f7fd f86a 	bl	8003668 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d902      	bls.n	80065a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	73fb      	strb	r3, [r7, #15]
        break;
 80065a2:	e005      	b.n	80065b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065a4:	4b36      	ldr	r3, [pc, #216]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1ef      	bne.n	8006590 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d15f      	bne.n	8006676 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d110      	bne.n	80065de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065bc:	4b30      	ldr	r3, [pc, #192]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80065c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6892      	ldr	r2, [r2, #8]
 80065cc:	0211      	lsls	r1, r2, #8
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68d2      	ldr	r2, [r2, #12]
 80065d2:	06d2      	lsls	r2, r2, #27
 80065d4:	430a      	orrs	r2, r1
 80065d6:	492a      	ldr	r1, [pc, #168]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	610b      	str	r3, [r1, #16]
 80065dc:	e027      	b.n	800662e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d112      	bne.n	800660a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065e4:	4b26      	ldr	r3, [pc, #152]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80065ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6892      	ldr	r2, [r2, #8]
 80065f4:	0211      	lsls	r1, r2, #8
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6912      	ldr	r2, [r2, #16]
 80065fa:	0852      	lsrs	r2, r2, #1
 80065fc:	3a01      	subs	r2, #1
 80065fe:	0552      	lsls	r2, r2, #21
 8006600:	430a      	orrs	r2, r1
 8006602:	491f      	ldr	r1, [pc, #124]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006604:	4313      	orrs	r3, r2
 8006606:	610b      	str	r3, [r1, #16]
 8006608:	e011      	b.n	800662e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800660a:	4b1d      	ldr	r3, [pc, #116]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006612:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6892      	ldr	r2, [r2, #8]
 800661a:	0211      	lsls	r1, r2, #8
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6952      	ldr	r2, [r2, #20]
 8006620:	0852      	lsrs	r2, r2, #1
 8006622:	3a01      	subs	r2, #1
 8006624:	0652      	lsls	r2, r2, #25
 8006626:	430a      	orrs	r2, r1
 8006628:	4915      	ldr	r1, [pc, #84]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 800662a:	4313      	orrs	r3, r2
 800662c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800662e:	4b14      	ldr	r3, [pc, #80]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a13      	ldr	r2, [pc, #76]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006634:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006638:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663a:	f7fd f815 	bl	8003668 <HAL_GetTick>
 800663e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006640:	e009      	b.n	8006656 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006642:	f7fd f811 	bl	8003668 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d902      	bls.n	8006656 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	73fb      	strb	r3, [r7, #15]
          break;
 8006654:	e005      	b.n	8006662 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006656:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0ef      	beq.n	8006642 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d106      	bne.n	8006676 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	4903      	ldr	r1, [pc, #12]	; (8006680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006672:	4313      	orrs	r3, r2
 8006674:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006676:	7bfb      	ldrb	r3, [r7, #15]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40021000 	.word	0x40021000

08006684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e049      	b.n	800672a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fc fe08 	bl	80032c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3304      	adds	r3, #4
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f000 fa00 	bl	8006ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	d001      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e03b      	b.n	80067c4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a19      	ldr	r2, [pc, #100]	; (80067d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d009      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0x4e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006776:	d004      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0x4e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a15      	ldr	r2, [pc, #84]	; (80067d4 <HAL_TIM_Base_Start_IT+0xa0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d115      	bne.n	80067ae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <HAL_TIM_Base_Start_IT+0xa4>)
 800678a:	4013      	ands	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b06      	cmp	r3, #6
 8006792:	d015      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x8c>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679a:	d011      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0201 	orr.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ac:	e008      	b.n	80067c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e000      	b.n	80067c2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	40012c00 	.word	0x40012c00
 80067d4:	40014000 	.word	0x40014000
 80067d8:	00010007 	.word	0x00010007

080067dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6a1a      	ldr	r2, [r3, #32]
 80067fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10f      	bne.n	8006824 <HAL_TIM_Base_Stop_IT+0x48>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6a1a      	ldr	r2, [r3, #32]
 800680a:	f240 4344 	movw	r3, #1092	; 0x444
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d107      	bne.n	8006824 <HAL_TIM_Base_Stop_IT+0x48>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0201 	bic.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b02      	cmp	r3, #2
 800684e:	d122      	bne.n	8006896 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b02      	cmp	r3, #2
 800685c:	d11b      	bne.n	8006896 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f06f 0202 	mvn.w	r2, #2
 8006866:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f905 	bl	8006a8c <HAL_TIM_IC_CaptureCallback>
 8006882:	e005      	b.n	8006890 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f8f7 	bl	8006a78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f908 	bl	8006aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d122      	bne.n	80068ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d11b      	bne.n	80068ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f06f 0204 	mvn.w	r2, #4
 80068ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f8db 	bl	8006a8c <HAL_TIM_IC_CaptureCallback>
 80068d6:	e005      	b.n	80068e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f8cd 	bl	8006a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f8de 	bl	8006aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d122      	bne.n	800693e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f003 0308 	and.w	r3, r3, #8
 8006902:	2b08      	cmp	r3, #8
 8006904:	d11b      	bne.n	800693e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f06f 0208 	mvn.w	r2, #8
 800690e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2204      	movs	r2, #4
 8006914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f8b1 	bl	8006a8c <HAL_TIM_IC_CaptureCallback>
 800692a:	e005      	b.n	8006938 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f8a3 	bl	8006a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f8b4 	bl	8006aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b10      	cmp	r3, #16
 800694a:	d122      	bne.n	8006992 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b10      	cmp	r3, #16
 8006958:	d11b      	bne.n	8006992 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f06f 0210 	mvn.w	r2, #16
 8006962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2208      	movs	r2, #8
 8006968:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f887 	bl	8006a8c <HAL_TIM_IC_CaptureCallback>
 800697e:	e005      	b.n	800698c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f879 	bl	8006a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f88a 	bl	8006aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b01      	cmp	r3, #1
 800699e:	d10e      	bne.n	80069be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d107      	bne.n	80069be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f06f 0201 	mvn.w	r2, #1
 80069b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fc fbc3 	bl	8003144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c8:	2b80      	cmp	r3, #128	; 0x80
 80069ca:	d10e      	bne.n	80069ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d6:	2b80      	cmp	r3, #128	; 0x80
 80069d8:	d107      	bne.n	80069ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f943 	bl	8006c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f8:	d10e      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a04:	2b80      	cmp	r3, #128	; 0x80
 8006a06:	d107      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f936 	bl	8006c84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b40      	cmp	r3, #64	; 0x40
 8006a24:	d10e      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b40      	cmp	r3, #64	; 0x40
 8006a32:	d107      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f838 	bl	8006ab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d10e      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d107      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0220 	mvn.w	r2, #32
 8006a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f8f6 	bl	8006c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a70:	bf00      	nop
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a2a      	ldr	r2, [pc, #168]	; (8006b84 <TIM_Base_SetConfig+0xbc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_Base_SetConfig+0x20>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae6:	d108      	bne.n	8006afa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a21      	ldr	r2, [pc, #132]	; (8006b84 <TIM_Base_SetConfig+0xbc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00b      	beq.n	8006b1a <TIM_Base_SetConfig+0x52>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b08:	d007      	beq.n	8006b1a <TIM_Base_SetConfig+0x52>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a1e      	ldr	r2, [pc, #120]	; (8006b88 <TIM_Base_SetConfig+0xc0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_Base_SetConfig+0x52>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a1d      	ldr	r2, [pc, #116]	; (8006b8c <TIM_Base_SetConfig+0xc4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d108      	bne.n	8006b2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a0c      	ldr	r2, [pc, #48]	; (8006b84 <TIM_Base_SetConfig+0xbc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d007      	beq.n	8006b68 <TIM_Base_SetConfig+0xa0>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a0b      	ldr	r2, [pc, #44]	; (8006b88 <TIM_Base_SetConfig+0xc0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_Base_SetConfig+0xa0>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a0a      	ldr	r2, [pc, #40]	; (8006b8c <TIM_Base_SetConfig+0xc4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d103      	bne.n	8006b70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	615a      	str	r2, [r3, #20]
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40012c00 	.word	0x40012c00
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	40014400 	.word	0x40014400

08006b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e04f      	b.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a21      	ldr	r2, [pc, #132]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d108      	bne.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c10:	d004      	beq.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a10      	ldr	r2, [pc, #64]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d10c      	bne.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	40012c00 	.word	0x40012c00
 8006c58:	40014000 	.word	0x40014000

08006c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e040      	b.n	8006d2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fc fb26 	bl	800330c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2224      	movs	r2, #36	; 0x24
 8006cc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fb2e 	bl	8007338 <UART_SetConfig>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e022      	b.n	8006d2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fd4e 	bl	8007790 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fdd5 	bl	80078d4 <UART_CheckIdleState>
 8006d2a:	4603      	mov	r3, r0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b0ba      	sub	sp, #232	; 0xe8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d62:	4013      	ands	r3, r2
 8006d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d115      	bne.n	8006d9c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00f      	beq.n	8006d9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 82a6 	beq.w	80072de <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
      }
      return;
 8006d9a:	e2a0      	b.n	80072de <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006d9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 8117 	beq.w	8006fd4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d106      	bne.n	8006dc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006db2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006db6:	4b85      	ldr	r3, [pc, #532]	; (8006fcc <HAL_UART_IRQHandler+0x298>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 810a 	beq.w	8006fd4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d011      	beq.n	8006df0 <HAL_UART_IRQHandler+0xbc>
 8006dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006de6:	f043 0201 	orr.w	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d011      	beq.n	8006e20 <HAL_UART_IRQHandler+0xec>
 8006dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00b      	beq.n	8006e20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e16:	f043 0204 	orr.w	r2, r3, #4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d011      	beq.n	8006e50 <HAL_UART_IRQHandler+0x11c>
 8006e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2204      	movs	r2, #4
 8006e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e46:	f043 0202 	orr.w	r2, r3, #2
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d017      	beq.n	8006e8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d105      	bne.n	8006e74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2208      	movs	r2, #8
 8006e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e82:	f043 0208 	orr.w	r2, r3, #8
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d012      	beq.n	8006ebe <HAL_UART_IRQHandler+0x18a>
 8006e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00c      	beq.n	8006ebe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb4:	f043 0220 	orr.w	r2, r3, #32
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 820c 	beq.w	80072e2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00d      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d005      	beq.n	8006f16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d04f      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fde9 	bl	8007aee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d141      	bne.n	8006fae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3308      	adds	r3, #8
 8006f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1d9      	bne.n	8006f2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d013      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f82:	4a13      	ldr	r2, [pc, #76]	; (8006fd0 <HAL_UART_IRQHandler+0x29c>)
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fc fcbc 	bl	8003908 <HAL_DMA_Abort_IT>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d017      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa4:	e00f      	b.n	8006fc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f9b0 	bl	800730c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fac:	e00b      	b.n	8006fc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f9ac 	bl	800730c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb4:	e007      	b.n	8006fc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f9a8 	bl	800730c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006fc4:	e18d      	b.n	80072e2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc6:	bf00      	nop
    return;
 8006fc8:	e18b      	b.n	80072e2 <HAL_UART_IRQHandler+0x5ae>
 8006fca:	bf00      	nop
 8006fcc:	04000120 	.word	0x04000120
 8006fd0:	08007bb5 	.word	0x08007bb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	f040 8146 	bne.w	800726a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 813f 	beq.w	800726a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 8138 	beq.w	800726a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2210      	movs	r2, #16
 8007000:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	f040 80b4 	bne.w	800717a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800701e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 815f 	beq.w	80072e6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800702e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007032:	429a      	cmp	r2, r3
 8007034:	f080 8157 	bcs.w	80072e6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800703e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	f040 8085 	bne.w	800715e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800706c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007070:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800707e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007082:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800708a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007096:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1da      	bne.n	8007054 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3308      	adds	r3, #8
 80070a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070b0:	f023 0301 	bic.w	r3, r3, #1
 80070b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e1      	bne.n	800709e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3308      	adds	r3, #8
 80070e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3308      	adds	r3, #8
 80070fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007100:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007104:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800710c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e3      	bne.n	80070da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800712c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800712e:	f023 0310 	bic.w	r3, r3, #16
 8007132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007140:	65bb      	str	r3, [r7, #88]	; 0x58
 8007142:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800714e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e4      	bne.n	800711e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	4618      	mov	r0, r3
 800715a:	f7fc fb97 	bl	800388c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800716a:	b29b      	uxth	r3, r3
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	b29b      	uxth	r3, r3
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f8d4 	bl	8007320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007178:	e0b5      	b.n	80072e6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007186:	b29b      	uxth	r3, r3
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80a7 	beq.w	80072ea <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800719c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 80a2 	beq.w	80072ea <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071c8:	647b      	str	r3, [r7, #68]	; 0x44
 80071ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e4      	bne.n	80071a6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	623b      	str	r3, [r7, #32]
   return(result);
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3308      	adds	r3, #8
 80071fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007200:	633a      	str	r2, [r7, #48]	; 0x30
 8007202:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e3      	bne.n	80071dc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	60fb      	str	r3, [r7, #12]
   return(result);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0310 	bic.w	r3, r3, #16
 800723a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	69b9      	ldr	r1, [r7, #24]
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	617b      	str	r3, [r7, #20]
   return(result);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e4      	bne.n	8007226 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800725c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f85c 	bl	8007320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007268:	e03f      	b.n	80072ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <HAL_UART_IRQHandler+0x560>
 8007276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800727a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d008      	beq.n	8007294 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800728a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fcd1 	bl	8007c34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007292:	e02d      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00e      	beq.n	80072be <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01c      	beq.n	80072ee <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	4798      	blx	r3
    }
    return;
 80072bc:	e017      	b.n	80072ee <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d012      	beq.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
 80072ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00c      	beq.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fc82 	bl	8007be0 <UART_EndTransmit_IT>
    return;
 80072dc:	e008      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80072de:	bf00      	nop
 80072e0:	e006      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80072e2:	bf00      	nop
 80072e4:	e004      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80072e6:	bf00      	nop
 80072e8:	e002      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80072ea:	bf00      	nop
 80072ec:	e000      	b.n	80072f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80072ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80072f0:	37e8      	adds	r7, #232	; 0xe8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop

080072f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800733c:	b08a      	sub	sp, #40	; 0x28
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	431a      	orrs	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	431a      	orrs	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	4313      	orrs	r3, r2
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4bb4      	ldr	r3, [pc, #720]	; (8007638 <UART_SetConfig+0x300>)
 8007368:	4013      	ands	r3, r2
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007370:	430b      	orrs	r3, r1
 8007372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4aa9      	ldr	r2, [pc, #676]	; (800763c <UART_SetConfig+0x304>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d004      	beq.n	80073a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a0:	4313      	orrs	r3, r2
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b4:	430a      	orrs	r2, r1
 80073b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4aa0      	ldr	r2, [pc, #640]	; (8007640 <UART_SetConfig+0x308>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d126      	bne.n	8007410 <UART_SetConfig+0xd8>
 80073c2:	4ba0      	ldr	r3, [pc, #640]	; (8007644 <UART_SetConfig+0x30c>)
 80073c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c8:	f003 0303 	and.w	r3, r3, #3
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d81b      	bhi.n	8007408 <UART_SetConfig+0xd0>
 80073d0:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <UART_SetConfig+0xa0>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	080073e9 	.word	0x080073e9
 80073dc:	080073f9 	.word	0x080073f9
 80073e0:	080073f1 	.word	0x080073f1
 80073e4:	08007401 	.word	0x08007401
 80073e8:	2301      	movs	r3, #1
 80073ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ee:	e080      	b.n	80074f2 <UART_SetConfig+0x1ba>
 80073f0:	2302      	movs	r3, #2
 80073f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073f6:	e07c      	b.n	80074f2 <UART_SetConfig+0x1ba>
 80073f8:	2304      	movs	r3, #4
 80073fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073fe:	e078      	b.n	80074f2 <UART_SetConfig+0x1ba>
 8007400:	2308      	movs	r3, #8
 8007402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007406:	e074      	b.n	80074f2 <UART_SetConfig+0x1ba>
 8007408:	2310      	movs	r3, #16
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800740e:	e070      	b.n	80074f2 <UART_SetConfig+0x1ba>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a8c      	ldr	r2, [pc, #560]	; (8007648 <UART_SetConfig+0x310>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d138      	bne.n	800748c <UART_SetConfig+0x154>
 800741a:	4b8a      	ldr	r3, [pc, #552]	; (8007644 <UART_SetConfig+0x30c>)
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007420:	f003 030c 	and.w	r3, r3, #12
 8007424:	2b0c      	cmp	r3, #12
 8007426:	d82d      	bhi.n	8007484 <UART_SetConfig+0x14c>
 8007428:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <UART_SetConfig+0xf8>)
 800742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742e:	bf00      	nop
 8007430:	08007465 	.word	0x08007465
 8007434:	08007485 	.word	0x08007485
 8007438:	08007485 	.word	0x08007485
 800743c:	08007485 	.word	0x08007485
 8007440:	08007475 	.word	0x08007475
 8007444:	08007485 	.word	0x08007485
 8007448:	08007485 	.word	0x08007485
 800744c:	08007485 	.word	0x08007485
 8007450:	0800746d 	.word	0x0800746d
 8007454:	08007485 	.word	0x08007485
 8007458:	08007485 	.word	0x08007485
 800745c:	08007485 	.word	0x08007485
 8007460:	0800747d 	.word	0x0800747d
 8007464:	2300      	movs	r3, #0
 8007466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800746a:	e042      	b.n	80074f2 <UART_SetConfig+0x1ba>
 800746c:	2302      	movs	r3, #2
 800746e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007472:	e03e      	b.n	80074f2 <UART_SetConfig+0x1ba>
 8007474:	2304      	movs	r3, #4
 8007476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800747a:	e03a      	b.n	80074f2 <UART_SetConfig+0x1ba>
 800747c:	2308      	movs	r3, #8
 800747e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007482:	e036      	b.n	80074f2 <UART_SetConfig+0x1ba>
 8007484:	2310      	movs	r3, #16
 8007486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800748a:	e032      	b.n	80074f2 <UART_SetConfig+0x1ba>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a6a      	ldr	r2, [pc, #424]	; (800763c <UART_SetConfig+0x304>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d12a      	bne.n	80074ec <UART_SetConfig+0x1b4>
 8007496:	4b6b      	ldr	r3, [pc, #428]	; (8007644 <UART_SetConfig+0x30c>)
 8007498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074a4:	d01a      	beq.n	80074dc <UART_SetConfig+0x1a4>
 80074a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074aa:	d81b      	bhi.n	80074e4 <UART_SetConfig+0x1ac>
 80074ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b0:	d00c      	beq.n	80074cc <UART_SetConfig+0x194>
 80074b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b6:	d815      	bhi.n	80074e4 <UART_SetConfig+0x1ac>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <UART_SetConfig+0x18c>
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c0:	d008      	beq.n	80074d4 <UART_SetConfig+0x19c>
 80074c2:	e00f      	b.n	80074e4 <UART_SetConfig+0x1ac>
 80074c4:	2300      	movs	r3, #0
 80074c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ca:	e012      	b.n	80074f2 <UART_SetConfig+0x1ba>
 80074cc:	2302      	movs	r3, #2
 80074ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d2:	e00e      	b.n	80074f2 <UART_SetConfig+0x1ba>
 80074d4:	2304      	movs	r3, #4
 80074d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074da:	e00a      	b.n	80074f2 <UART_SetConfig+0x1ba>
 80074dc:	2308      	movs	r3, #8
 80074de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074e2:	e006      	b.n	80074f2 <UART_SetConfig+0x1ba>
 80074e4:	2310      	movs	r3, #16
 80074e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ea:	e002      	b.n	80074f2 <UART_SetConfig+0x1ba>
 80074ec:	2310      	movs	r3, #16
 80074ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a51      	ldr	r2, [pc, #324]	; (800763c <UART_SetConfig+0x304>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d17a      	bne.n	80075f2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007500:	2b08      	cmp	r3, #8
 8007502:	d824      	bhi.n	800754e <UART_SetConfig+0x216>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <UART_SetConfig+0x1d4>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007531 	.word	0x08007531
 8007510:	0800754f 	.word	0x0800754f
 8007514:	08007539 	.word	0x08007539
 8007518:	0800754f 	.word	0x0800754f
 800751c:	0800753f 	.word	0x0800753f
 8007520:	0800754f 	.word	0x0800754f
 8007524:	0800754f 	.word	0x0800754f
 8007528:	0800754f 	.word	0x0800754f
 800752c:	08007547 	.word	0x08007547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007530:	f7fe fcf2 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 8007534:	61f8      	str	r0, [r7, #28]
        break;
 8007536:	e010      	b.n	800755a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007538:	4b44      	ldr	r3, [pc, #272]	; (800764c <UART_SetConfig+0x314>)
 800753a:	61fb      	str	r3, [r7, #28]
        break;
 800753c:	e00d      	b.n	800755a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800753e:	f7fe fc53 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 8007542:	61f8      	str	r0, [r7, #28]
        break;
 8007544:	e009      	b.n	800755a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800754a:	61fb      	str	r3, [r7, #28]
        break;
 800754c:	e005      	b.n	800755a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8107 	beq.w	8007770 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	4613      	mov	r3, r2
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4413      	add	r3, r2
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	429a      	cmp	r2, r3
 8007570:	d305      	bcc.n	800757e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	429a      	cmp	r2, r3
 800757c:	d903      	bls.n	8007586 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007584:	e0f4      	b.n	8007770 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	2200      	movs	r2, #0
 800758a:	461c      	mov	r4, r3
 800758c:	4615      	mov	r5, r2
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	f04f 0300 	mov.w	r3, #0
 8007596:	022b      	lsls	r3, r5, #8
 8007598:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800759c:	0222      	lsls	r2, r4, #8
 800759e:	68f9      	ldr	r1, [r7, #12]
 80075a0:	6849      	ldr	r1, [r1, #4]
 80075a2:	0849      	lsrs	r1, r1, #1
 80075a4:	2000      	movs	r0, #0
 80075a6:	4688      	mov	r8, r1
 80075a8:	4681      	mov	r9, r0
 80075aa:	eb12 0a08 	adds.w	sl, r2, r8
 80075ae:	eb43 0b09 	adc.w	fp, r3, r9
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c0:	4650      	mov	r0, sl
 80075c2:	4659      	mov	r1, fp
 80075c4:	f7f9 fa70 	bl	8000aa8 <__aeabi_uldivmod>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4613      	mov	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075d6:	d308      	bcc.n	80075ea <UART_SetConfig+0x2b2>
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075de:	d204      	bcs.n	80075ea <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	60da      	str	r2, [r3, #12]
 80075e8:	e0c2      	b.n	8007770 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80075f0:	e0be      	b.n	8007770 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075fa:	d16a      	bne.n	80076d2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80075fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007600:	2b08      	cmp	r3, #8
 8007602:	d834      	bhi.n	800766e <UART_SetConfig+0x336>
 8007604:	a201      	add	r2, pc, #4	; (adr r2, 800760c <UART_SetConfig+0x2d4>)
 8007606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760a:	bf00      	nop
 800760c:	08007631 	.word	0x08007631
 8007610:	08007651 	.word	0x08007651
 8007614:	08007659 	.word	0x08007659
 8007618:	0800766f 	.word	0x0800766f
 800761c:	0800765f 	.word	0x0800765f
 8007620:	0800766f 	.word	0x0800766f
 8007624:	0800766f 	.word	0x0800766f
 8007628:	0800766f 	.word	0x0800766f
 800762c:	08007667 	.word	0x08007667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007630:	f7fe fc72 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 8007634:	61f8      	str	r0, [r7, #28]
        break;
 8007636:	e020      	b.n	800767a <UART_SetConfig+0x342>
 8007638:	efff69f3 	.word	0xefff69f3
 800763c:	40008000 	.word	0x40008000
 8007640:	40013800 	.word	0x40013800
 8007644:	40021000 	.word	0x40021000
 8007648:	40004400 	.word	0x40004400
 800764c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007650:	f7fe fc78 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 8007654:	61f8      	str	r0, [r7, #28]
        break;
 8007656:	e010      	b.n	800767a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007658:	4b4c      	ldr	r3, [pc, #304]	; (800778c <UART_SetConfig+0x454>)
 800765a:	61fb      	str	r3, [r7, #28]
        break;
 800765c:	e00d      	b.n	800767a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800765e:	f7fe fbc3 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 8007662:	61f8      	str	r0, [r7, #28]
        break;
 8007664:	e009      	b.n	800767a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766a:	61fb      	str	r3, [r7, #28]
        break;
 800766c:	e005      	b.n	800767a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007678:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d077      	beq.n	8007770 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	005a      	lsls	r2, r3, #1
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	085b      	lsrs	r3, r3, #1
 800768a:	441a      	add	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	fbb2 f3f3 	udiv	r3, r2, r3
 8007694:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	2b0f      	cmp	r3, #15
 800769a:	d916      	bls.n	80076ca <UART_SetConfig+0x392>
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a2:	d212      	bcs.n	80076ca <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f023 030f 	bic.w	r3, r3, #15
 80076ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	085b      	lsrs	r3, r3, #1
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	8afb      	ldrh	r3, [r7, #22]
 80076bc:	4313      	orrs	r3, r2
 80076be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	8afa      	ldrh	r2, [r7, #22]
 80076c6:	60da      	str	r2, [r3, #12]
 80076c8:	e052      	b.n	8007770 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076d0:	e04e      	b.n	8007770 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076d6:	2b08      	cmp	r3, #8
 80076d8:	d827      	bhi.n	800772a <UART_SetConfig+0x3f2>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <UART_SetConfig+0x3a8>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	08007705 	.word	0x08007705
 80076e4:	0800770d 	.word	0x0800770d
 80076e8:	08007715 	.word	0x08007715
 80076ec:	0800772b 	.word	0x0800772b
 80076f0:	0800771b 	.word	0x0800771b
 80076f4:	0800772b 	.word	0x0800772b
 80076f8:	0800772b 	.word	0x0800772b
 80076fc:	0800772b 	.word	0x0800772b
 8007700:	08007723 	.word	0x08007723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007704:	f7fe fc08 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 8007708:	61f8      	str	r0, [r7, #28]
        break;
 800770a:	e014      	b.n	8007736 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800770c:	f7fe fc1a 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 8007710:	61f8      	str	r0, [r7, #28]
        break;
 8007712:	e010      	b.n	8007736 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007714:	4b1d      	ldr	r3, [pc, #116]	; (800778c <UART_SetConfig+0x454>)
 8007716:	61fb      	str	r3, [r7, #28]
        break;
 8007718:	e00d      	b.n	8007736 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800771a:	f7fe fb65 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 800771e:	61f8      	str	r0, [r7, #28]
        break;
 8007720:	e009      	b.n	8007736 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007726:	61fb      	str	r3, [r7, #28]
        break;
 8007728:	e005      	b.n	8007736 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007734:	bf00      	nop
    }

    if (pclk != 0U)
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d019      	beq.n	8007770 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	085a      	lsrs	r2, r3, #1
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	441a      	add	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	fbb2 f3f3 	udiv	r3, r2, r3
 800774e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b0f      	cmp	r3, #15
 8007754:	d909      	bls.n	800776a <UART_SetConfig+0x432>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775c:	d205      	bcs.n	800776a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	e002      	b.n	8007770 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800777c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007780:	4618      	mov	r0, r3
 8007782:	3728      	adds	r7, #40	; 0x28
 8007784:	46bd      	mov	sp, r7
 8007786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800778a:	bf00      	nop
 800778c:	00f42400 	.word	0x00f42400

08007790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d01a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800788e:	d10a      	bne.n	80078a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078e4:	f7fb fec0 	bl	8003668 <HAL_GetTick>
 80078e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d10e      	bne.n	8007916 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f82d 	bl	8007966 <UART_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e023      	b.n	800795e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b04      	cmp	r3, #4
 8007922:	d10e      	bne.n	8007942 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f817 	bl	8007966 <UART_WaitOnFlagUntilTimeout>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e00d      	b.n	800795e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b09c      	sub	sp, #112	; 0x70
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	603b      	str	r3, [r7, #0]
 8007972:	4613      	mov	r3, r2
 8007974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007976:	e0a5      	b.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	f000 80a1 	beq.w	8007ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007982:	f7fb fe71 	bl	8003668 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800798e:	429a      	cmp	r2, r3
 8007990:	d302      	bcc.n	8007998 <UART_WaitOnFlagUntilTimeout+0x32>
 8007992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007994:	2b00      	cmp	r3, #0
 8007996:	d13e      	bne.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079ac:	667b      	str	r3, [r7, #100]	; 0x64
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e6      	bne.n	8007998 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3308      	adds	r3, #8
 80079d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	f023 0301 	bic.w	r3, r3, #1
 80079e0:	663b      	str	r3, [r7, #96]	; 0x60
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3308      	adds	r3, #8
 80079e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80079ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e5      	bne.n	80079ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e067      	b.n	8007ae6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d04f      	beq.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a32:	d147      	bne.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a3c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e6      	bne.n	8007a3e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f023 0301 	bic.w	r3, r3, #1
 8007a86:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a90:	623a      	str	r2, [r7, #32]
 8007a92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	69f9      	ldr	r1, [r7, #28]
 8007a96:	6a3a      	ldr	r2, [r7, #32]
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e5      	bne.n	8007a70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e010      	b.n	8007ae6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69da      	ldr	r2, [r3, #28]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4013      	ands	r3, r2
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	bf0c      	ite	eq
 8007ad4:	2301      	moveq	r3, #1
 8007ad6:	2300      	movne	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	461a      	mov	r2, r3
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	f43f af4a 	beq.w	8007978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3770      	adds	r7, #112	; 0x70
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b095      	sub	sp, #84	; 0x54
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afe:	e853 3f00 	ldrex	r3, [r3]
 8007b02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	461a      	mov	r2, r3
 8007b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b14:	643b      	str	r3, [r7, #64]	; 0x40
 8007b16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e6      	bne.n	8007af6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f023 0301 	bic.w	r3, r3, #1
 8007b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3308      	adds	r3, #8
 8007b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e5      	bne.n	8007b28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d118      	bne.n	8007b96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f023 0310 	bic.w	r3, r3, #16
 8007b78:	647b      	str	r3, [r7, #68]	; 0x44
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b82:	61bb      	str	r3, [r7, #24]
 8007b84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	6979      	ldr	r1, [r7, #20]
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e6      	bne.n	8007b64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007ba8:	bf00      	nop
 8007baa:	3754      	adds	r7, #84	; 0x54
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff fb9a 	bl	800730c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bd8:	bf00      	nop
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bfc:	61fb      	str	r3, [r7, #28]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	61bb      	str	r3, [r7, #24]
 8007c08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6979      	ldr	r1, [r7, #20]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	613b      	str	r3, [r7, #16]
   return(result);
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e6      	bne.n	8007be8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff fb66 	bl	80072f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c2c:	bf00      	nop
 8007c2e:	3720      	adds	r7, #32
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <__errno>:
 8007c48:	4b01      	ldr	r3, [pc, #4]	; (8007c50 <__errno+0x8>)
 8007c4a:	6818      	ldr	r0, [r3, #0]
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	2000000c 	.word	0x2000000c

08007c54 <__libc_init_array>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	4d0d      	ldr	r5, [pc, #52]	; (8007c8c <__libc_init_array+0x38>)
 8007c58:	4c0d      	ldr	r4, [pc, #52]	; (8007c90 <__libc_init_array+0x3c>)
 8007c5a:	1b64      	subs	r4, r4, r5
 8007c5c:	10a4      	asrs	r4, r4, #2
 8007c5e:	2600      	movs	r6, #0
 8007c60:	42a6      	cmp	r6, r4
 8007c62:	d109      	bne.n	8007c78 <__libc_init_array+0x24>
 8007c64:	4d0b      	ldr	r5, [pc, #44]	; (8007c94 <__libc_init_array+0x40>)
 8007c66:	4c0c      	ldr	r4, [pc, #48]	; (8007c98 <__libc_init_array+0x44>)
 8007c68:	f000 ff3c 	bl	8008ae4 <_init>
 8007c6c:	1b64      	subs	r4, r4, r5
 8007c6e:	10a4      	asrs	r4, r4, #2
 8007c70:	2600      	movs	r6, #0
 8007c72:	42a6      	cmp	r6, r4
 8007c74:	d105      	bne.n	8007c82 <__libc_init_array+0x2e>
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7c:	4798      	blx	r3
 8007c7e:	3601      	adds	r6, #1
 8007c80:	e7ee      	b.n	8007c60 <__libc_init_array+0xc>
 8007c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c86:	4798      	blx	r3
 8007c88:	3601      	adds	r6, #1
 8007c8a:	e7f2      	b.n	8007c72 <__libc_init_array+0x1e>
 8007c8c:	08008b98 	.word	0x08008b98
 8007c90:	08008b98 	.word	0x08008b98
 8007c94:	08008b98 	.word	0x08008b98
 8007c98:	08008b9c 	.word	0x08008b9c

08007c9c <memset>:
 8007c9c:	4402      	add	r2, r0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d100      	bne.n	8007ca6 <memset+0xa>
 8007ca4:	4770      	bx	lr
 8007ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8007caa:	e7f9      	b.n	8007ca0 <memset+0x4>

08007cac <pow>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	ed2d 8b02 	vpush	{d8}
 8007cb2:	eeb0 8a40 	vmov.f32	s16, s0
 8007cb6:	eef0 8a60 	vmov.f32	s17, s1
 8007cba:	ec55 4b11 	vmov	r4, r5, d1
 8007cbe:	f000 f867 	bl	8007d90 <__ieee754_pow>
 8007cc2:	4622      	mov	r2, r4
 8007cc4:	462b      	mov	r3, r5
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4629      	mov	r1, r5
 8007cca:	ec57 6b10 	vmov	r6, r7, d0
 8007cce:	f7f8 fed5 	bl	8000a7c <__aeabi_dcmpun>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d13b      	bne.n	8007d4e <pow+0xa2>
 8007cd6:	ec51 0b18 	vmov	r0, r1, d8
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f7f8 fe9b 	bl	8000a18 <__aeabi_dcmpeq>
 8007ce2:	b1b8      	cbz	r0, 8007d14 <pow+0x68>
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	4620      	mov	r0, r4
 8007cea:	4629      	mov	r1, r5
 8007cec:	f7f8 fe94 	bl	8000a18 <__aeabi_dcmpeq>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d146      	bne.n	8007d82 <pow+0xd6>
 8007cf4:	ec45 4b10 	vmov	d0, r4, r5
 8007cf8:	f000 fe63 	bl	80089c2 <finite>
 8007cfc:	b338      	cbz	r0, 8007d4e <pow+0xa2>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2300      	movs	r3, #0
 8007d02:	4620      	mov	r0, r4
 8007d04:	4629      	mov	r1, r5
 8007d06:	f7f8 fe91 	bl	8000a2c <__aeabi_dcmplt>
 8007d0a:	b300      	cbz	r0, 8007d4e <pow+0xa2>
 8007d0c:	f7ff ff9c 	bl	8007c48 <__errno>
 8007d10:	2322      	movs	r3, #34	; 0x22
 8007d12:	e01b      	b.n	8007d4c <pow+0xa0>
 8007d14:	ec47 6b10 	vmov	d0, r6, r7
 8007d18:	f000 fe53 	bl	80089c2 <finite>
 8007d1c:	b9e0      	cbnz	r0, 8007d58 <pow+0xac>
 8007d1e:	eeb0 0a48 	vmov.f32	s0, s16
 8007d22:	eef0 0a68 	vmov.f32	s1, s17
 8007d26:	f000 fe4c 	bl	80089c2 <finite>
 8007d2a:	b1a8      	cbz	r0, 8007d58 <pow+0xac>
 8007d2c:	ec45 4b10 	vmov	d0, r4, r5
 8007d30:	f000 fe47 	bl	80089c2 <finite>
 8007d34:	b180      	cbz	r0, 8007d58 <pow+0xac>
 8007d36:	4632      	mov	r2, r6
 8007d38:	463b      	mov	r3, r7
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	f7f8 fe9d 	bl	8000a7c <__aeabi_dcmpun>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d0e2      	beq.n	8007d0c <pow+0x60>
 8007d46:	f7ff ff7f 	bl	8007c48 <__errno>
 8007d4a:	2321      	movs	r3, #33	; 0x21
 8007d4c:	6003      	str	r3, [r0, #0]
 8007d4e:	ecbd 8b02 	vpop	{d8}
 8007d52:	ec47 6b10 	vmov	d0, r6, r7
 8007d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	4639      	mov	r1, r7
 8007d60:	f7f8 fe5a 	bl	8000a18 <__aeabi_dcmpeq>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d0f2      	beq.n	8007d4e <pow+0xa2>
 8007d68:	eeb0 0a48 	vmov.f32	s0, s16
 8007d6c:	eef0 0a68 	vmov.f32	s1, s17
 8007d70:	f000 fe27 	bl	80089c2 <finite>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d0ea      	beq.n	8007d4e <pow+0xa2>
 8007d78:	ec45 4b10 	vmov	d0, r4, r5
 8007d7c:	f000 fe21 	bl	80089c2 <finite>
 8007d80:	e7c3      	b.n	8007d0a <pow+0x5e>
 8007d82:	4f01      	ldr	r7, [pc, #4]	; (8007d88 <pow+0xdc>)
 8007d84:	2600      	movs	r6, #0
 8007d86:	e7e2      	b.n	8007d4e <pow+0xa2>
 8007d88:	3ff00000 	.word	0x3ff00000
 8007d8c:	00000000 	.word	0x00000000

08007d90 <__ieee754_pow>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	ed2d 8b06 	vpush	{d8-d10}
 8007d98:	b089      	sub	sp, #36	; 0x24
 8007d9a:	ed8d 1b00 	vstr	d1, [sp]
 8007d9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007da2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007da6:	ea58 0102 	orrs.w	r1, r8, r2
 8007daa:	ec57 6b10 	vmov	r6, r7, d0
 8007dae:	d115      	bne.n	8007ddc <__ieee754_pow+0x4c>
 8007db0:	19b3      	adds	r3, r6, r6
 8007db2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007db6:	4152      	adcs	r2, r2
 8007db8:	4299      	cmp	r1, r3
 8007dba:	4b89      	ldr	r3, [pc, #548]	; (8007fe0 <__ieee754_pow+0x250>)
 8007dbc:	4193      	sbcs	r3, r2
 8007dbe:	f080 84d2 	bcs.w	8008766 <__ieee754_pow+0x9d6>
 8007dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	4639      	mov	r1, r7
 8007dca:	f7f8 fa07 	bl	80001dc <__adddf3>
 8007dce:	ec41 0b10 	vmov	d0, r0, r1
 8007dd2:	b009      	add	sp, #36	; 0x24
 8007dd4:	ecbd 8b06 	vpop	{d8-d10}
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	4b81      	ldr	r3, [pc, #516]	; (8007fe4 <__ieee754_pow+0x254>)
 8007dde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007de2:	429c      	cmp	r4, r3
 8007de4:	ee10 aa10 	vmov	sl, s0
 8007de8:	463d      	mov	r5, r7
 8007dea:	dc06      	bgt.n	8007dfa <__ieee754_pow+0x6a>
 8007dec:	d101      	bne.n	8007df2 <__ieee754_pow+0x62>
 8007dee:	2e00      	cmp	r6, #0
 8007df0:	d1e7      	bne.n	8007dc2 <__ieee754_pow+0x32>
 8007df2:	4598      	cmp	r8, r3
 8007df4:	dc01      	bgt.n	8007dfa <__ieee754_pow+0x6a>
 8007df6:	d10f      	bne.n	8007e18 <__ieee754_pow+0x88>
 8007df8:	b172      	cbz	r2, 8007e18 <__ieee754_pow+0x88>
 8007dfa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007dfe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007e02:	ea55 050a 	orrs.w	r5, r5, sl
 8007e06:	d1dc      	bne.n	8007dc2 <__ieee754_pow+0x32>
 8007e08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007e0c:	18db      	adds	r3, r3, r3
 8007e0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007e12:	4152      	adcs	r2, r2
 8007e14:	429d      	cmp	r5, r3
 8007e16:	e7d0      	b.n	8007dba <__ieee754_pow+0x2a>
 8007e18:	2d00      	cmp	r5, #0
 8007e1a:	da3b      	bge.n	8007e94 <__ieee754_pow+0x104>
 8007e1c:	4b72      	ldr	r3, [pc, #456]	; (8007fe8 <__ieee754_pow+0x258>)
 8007e1e:	4598      	cmp	r8, r3
 8007e20:	dc51      	bgt.n	8007ec6 <__ieee754_pow+0x136>
 8007e22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007e26:	4598      	cmp	r8, r3
 8007e28:	f340 84ac 	ble.w	8008784 <__ieee754_pow+0x9f4>
 8007e2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007e30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e34:	2b14      	cmp	r3, #20
 8007e36:	dd0f      	ble.n	8007e58 <__ieee754_pow+0xc8>
 8007e38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007e3c:	fa22 f103 	lsr.w	r1, r2, r3
 8007e40:	fa01 f303 	lsl.w	r3, r1, r3
 8007e44:	4293      	cmp	r3, r2
 8007e46:	f040 849d 	bne.w	8008784 <__ieee754_pow+0x9f4>
 8007e4a:	f001 0101 	and.w	r1, r1, #1
 8007e4e:	f1c1 0302 	rsb	r3, r1, #2
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	b182      	cbz	r2, 8007e78 <__ieee754_pow+0xe8>
 8007e56:	e05f      	b.n	8007f18 <__ieee754_pow+0x188>
 8007e58:	2a00      	cmp	r2, #0
 8007e5a:	d15b      	bne.n	8007f14 <__ieee754_pow+0x184>
 8007e5c:	f1c3 0314 	rsb	r3, r3, #20
 8007e60:	fa48 f103 	asr.w	r1, r8, r3
 8007e64:	fa01 f303 	lsl.w	r3, r1, r3
 8007e68:	4543      	cmp	r3, r8
 8007e6a:	f040 8488 	bne.w	800877e <__ieee754_pow+0x9ee>
 8007e6e:	f001 0101 	and.w	r1, r1, #1
 8007e72:	f1c1 0302 	rsb	r3, r1, #2
 8007e76:	9304      	str	r3, [sp, #16]
 8007e78:	4b5c      	ldr	r3, [pc, #368]	; (8007fec <__ieee754_pow+0x25c>)
 8007e7a:	4598      	cmp	r8, r3
 8007e7c:	d132      	bne.n	8007ee4 <__ieee754_pow+0x154>
 8007e7e:	f1b9 0f00 	cmp.w	r9, #0
 8007e82:	f280 8478 	bge.w	8008776 <__ieee754_pow+0x9e6>
 8007e86:	4959      	ldr	r1, [pc, #356]	; (8007fec <__ieee754_pow+0x25c>)
 8007e88:	4632      	mov	r2, r6
 8007e8a:	463b      	mov	r3, r7
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	f7f8 fc85 	bl	800079c <__aeabi_ddiv>
 8007e92:	e79c      	b.n	8007dce <__ieee754_pow+0x3e>
 8007e94:	2300      	movs	r3, #0
 8007e96:	9304      	str	r3, [sp, #16]
 8007e98:	2a00      	cmp	r2, #0
 8007e9a:	d13d      	bne.n	8007f18 <__ieee754_pow+0x188>
 8007e9c:	4b51      	ldr	r3, [pc, #324]	; (8007fe4 <__ieee754_pow+0x254>)
 8007e9e:	4598      	cmp	r8, r3
 8007ea0:	d1ea      	bne.n	8007e78 <__ieee754_pow+0xe8>
 8007ea2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007ea6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007eaa:	ea53 030a 	orrs.w	r3, r3, sl
 8007eae:	f000 845a 	beq.w	8008766 <__ieee754_pow+0x9d6>
 8007eb2:	4b4f      	ldr	r3, [pc, #316]	; (8007ff0 <__ieee754_pow+0x260>)
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	dd08      	ble.n	8007eca <__ieee754_pow+0x13a>
 8007eb8:	f1b9 0f00 	cmp.w	r9, #0
 8007ebc:	f2c0 8457 	blt.w	800876e <__ieee754_pow+0x9de>
 8007ec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ec4:	e783      	b.n	8007dce <__ieee754_pow+0x3e>
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e7e5      	b.n	8007e96 <__ieee754_pow+0x106>
 8007eca:	f1b9 0f00 	cmp.w	r9, #0
 8007ece:	f04f 0000 	mov.w	r0, #0
 8007ed2:	f04f 0100 	mov.w	r1, #0
 8007ed6:	f6bf af7a 	bge.w	8007dce <__ieee754_pow+0x3e>
 8007eda:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007ede:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ee2:	e774      	b.n	8007dce <__ieee754_pow+0x3e>
 8007ee4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007ee8:	d106      	bne.n	8007ef8 <__ieee754_pow+0x168>
 8007eea:	4632      	mov	r2, r6
 8007eec:	463b      	mov	r3, r7
 8007eee:	4630      	mov	r0, r6
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	f7f8 fb29 	bl	8000548 <__aeabi_dmul>
 8007ef6:	e76a      	b.n	8007dce <__ieee754_pow+0x3e>
 8007ef8:	4b3e      	ldr	r3, [pc, #248]	; (8007ff4 <__ieee754_pow+0x264>)
 8007efa:	4599      	cmp	r9, r3
 8007efc:	d10c      	bne.n	8007f18 <__ieee754_pow+0x188>
 8007efe:	2d00      	cmp	r5, #0
 8007f00:	db0a      	blt.n	8007f18 <__ieee754_pow+0x188>
 8007f02:	ec47 6b10 	vmov	d0, r6, r7
 8007f06:	b009      	add	sp, #36	; 0x24
 8007f08:	ecbd 8b06 	vpop	{d8-d10}
 8007f0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	f000 bc6c 	b.w	80087ec <__ieee754_sqrt>
 8007f14:	2300      	movs	r3, #0
 8007f16:	9304      	str	r3, [sp, #16]
 8007f18:	ec47 6b10 	vmov	d0, r6, r7
 8007f1c:	f000 fd48 	bl	80089b0 <fabs>
 8007f20:	ec51 0b10 	vmov	r0, r1, d0
 8007f24:	f1ba 0f00 	cmp.w	sl, #0
 8007f28:	d129      	bne.n	8007f7e <__ieee754_pow+0x1ee>
 8007f2a:	b124      	cbz	r4, 8007f36 <__ieee754_pow+0x1a6>
 8007f2c:	4b2f      	ldr	r3, [pc, #188]	; (8007fec <__ieee754_pow+0x25c>)
 8007f2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d123      	bne.n	8007f7e <__ieee754_pow+0x1ee>
 8007f36:	f1b9 0f00 	cmp.w	r9, #0
 8007f3a:	da05      	bge.n	8007f48 <__ieee754_pow+0x1b8>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	2000      	movs	r0, #0
 8007f42:	492a      	ldr	r1, [pc, #168]	; (8007fec <__ieee754_pow+0x25c>)
 8007f44:	f7f8 fc2a 	bl	800079c <__aeabi_ddiv>
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	f6bf af40 	bge.w	8007dce <__ieee754_pow+0x3e>
 8007f4e:	9b04      	ldr	r3, [sp, #16]
 8007f50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007f54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007f58:	4323      	orrs	r3, r4
 8007f5a:	d108      	bne.n	8007f6e <__ieee754_pow+0x1de>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4610      	mov	r0, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	f7f8 f938 	bl	80001d8 <__aeabi_dsub>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	e78f      	b.n	8007e8e <__ieee754_pow+0xfe>
 8007f6e:	9b04      	ldr	r3, [sp, #16]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	f47f af2c 	bne.w	8007dce <__ieee754_pow+0x3e>
 8007f76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	e727      	b.n	8007dce <__ieee754_pow+0x3e>
 8007f7e:	0feb      	lsrs	r3, r5, #31
 8007f80:	3b01      	subs	r3, #1
 8007f82:	9306      	str	r3, [sp, #24]
 8007f84:	9a06      	ldr	r2, [sp, #24]
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	d102      	bne.n	8007f92 <__ieee754_pow+0x202>
 8007f8c:	4632      	mov	r2, r6
 8007f8e:	463b      	mov	r3, r7
 8007f90:	e7e6      	b.n	8007f60 <__ieee754_pow+0x1d0>
 8007f92:	4b19      	ldr	r3, [pc, #100]	; (8007ff8 <__ieee754_pow+0x268>)
 8007f94:	4598      	cmp	r8, r3
 8007f96:	f340 80fb 	ble.w	8008190 <__ieee754_pow+0x400>
 8007f9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007f9e:	4598      	cmp	r8, r3
 8007fa0:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <__ieee754_pow+0x260>)
 8007fa2:	dd0c      	ble.n	8007fbe <__ieee754_pow+0x22e>
 8007fa4:	429c      	cmp	r4, r3
 8007fa6:	dc0f      	bgt.n	8007fc8 <__ieee754_pow+0x238>
 8007fa8:	f1b9 0f00 	cmp.w	r9, #0
 8007fac:	da0f      	bge.n	8007fce <__ieee754_pow+0x23e>
 8007fae:	2000      	movs	r0, #0
 8007fb0:	b009      	add	sp, #36	; 0x24
 8007fb2:	ecbd 8b06 	vpop	{d8-d10}
 8007fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fba:	f000 bcf0 	b.w	800899e <__math_oflow>
 8007fbe:	429c      	cmp	r4, r3
 8007fc0:	dbf2      	blt.n	8007fa8 <__ieee754_pow+0x218>
 8007fc2:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <__ieee754_pow+0x25c>)
 8007fc4:	429c      	cmp	r4, r3
 8007fc6:	dd19      	ble.n	8007ffc <__ieee754_pow+0x26c>
 8007fc8:	f1b9 0f00 	cmp.w	r9, #0
 8007fcc:	dcef      	bgt.n	8007fae <__ieee754_pow+0x21e>
 8007fce:	2000      	movs	r0, #0
 8007fd0:	b009      	add	sp, #36	; 0x24
 8007fd2:	ecbd 8b06 	vpop	{d8-d10}
 8007fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fda:	f000 bcd7 	b.w	800898c <__math_uflow>
 8007fde:	bf00      	nop
 8007fe0:	fff00000 	.word	0xfff00000
 8007fe4:	7ff00000 	.word	0x7ff00000
 8007fe8:	433fffff 	.word	0x433fffff
 8007fec:	3ff00000 	.word	0x3ff00000
 8007ff0:	3fefffff 	.word	0x3fefffff
 8007ff4:	3fe00000 	.word	0x3fe00000
 8007ff8:	41e00000 	.word	0x41e00000
 8007ffc:	4b60      	ldr	r3, [pc, #384]	; (8008180 <__ieee754_pow+0x3f0>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	f7f8 f8ea 	bl	80001d8 <__aeabi_dsub>
 8008004:	a354      	add	r3, pc, #336	; (adr r3, 8008158 <__ieee754_pow+0x3c8>)
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	4604      	mov	r4, r0
 800800c:	460d      	mov	r5, r1
 800800e:	f7f8 fa9b 	bl	8000548 <__aeabi_dmul>
 8008012:	a353      	add	r3, pc, #332	; (adr r3, 8008160 <__ieee754_pow+0x3d0>)
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	4606      	mov	r6, r0
 800801a:	460f      	mov	r7, r1
 800801c:	4620      	mov	r0, r4
 800801e:	4629      	mov	r1, r5
 8008020:	f7f8 fa92 	bl	8000548 <__aeabi_dmul>
 8008024:	4b57      	ldr	r3, [pc, #348]	; (8008184 <__ieee754_pow+0x3f4>)
 8008026:	4682      	mov	sl, r0
 8008028:	468b      	mov	fp, r1
 800802a:	2200      	movs	r2, #0
 800802c:	4620      	mov	r0, r4
 800802e:	4629      	mov	r1, r5
 8008030:	f7f8 fa8a 	bl	8000548 <__aeabi_dmul>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	a14b      	add	r1, pc, #300	; (adr r1, 8008168 <__ieee754_pow+0x3d8>)
 800803a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800803e:	f7f8 f8cb 	bl	80001d8 <__aeabi_dsub>
 8008042:	4622      	mov	r2, r4
 8008044:	462b      	mov	r3, r5
 8008046:	f7f8 fa7f 	bl	8000548 <__aeabi_dmul>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	2000      	movs	r0, #0
 8008050:	494d      	ldr	r1, [pc, #308]	; (8008188 <__ieee754_pow+0x3f8>)
 8008052:	f7f8 f8c1 	bl	80001d8 <__aeabi_dsub>
 8008056:	4622      	mov	r2, r4
 8008058:	4680      	mov	r8, r0
 800805a:	4689      	mov	r9, r1
 800805c:	462b      	mov	r3, r5
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 fa71 	bl	8000548 <__aeabi_dmul>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4640      	mov	r0, r8
 800806c:	4649      	mov	r1, r9
 800806e:	f7f8 fa6b 	bl	8000548 <__aeabi_dmul>
 8008072:	a33f      	add	r3, pc, #252	; (adr r3, 8008170 <__ieee754_pow+0x3e0>)
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	f7f8 fa66 	bl	8000548 <__aeabi_dmul>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4650      	mov	r0, sl
 8008082:	4659      	mov	r1, fp
 8008084:	f7f8 f8a8 	bl	80001d8 <__aeabi_dsub>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4680      	mov	r8, r0
 800808e:	4689      	mov	r9, r1
 8008090:	4630      	mov	r0, r6
 8008092:	4639      	mov	r1, r7
 8008094:	f7f8 f8a2 	bl	80001dc <__adddf3>
 8008098:	2000      	movs	r0, #0
 800809a:	4632      	mov	r2, r6
 800809c:	463b      	mov	r3, r7
 800809e:	4604      	mov	r4, r0
 80080a0:	460d      	mov	r5, r1
 80080a2:	f7f8 f899 	bl	80001d8 <__aeabi_dsub>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4640      	mov	r0, r8
 80080ac:	4649      	mov	r1, r9
 80080ae:	f7f8 f893 	bl	80001d8 <__aeabi_dsub>
 80080b2:	9b04      	ldr	r3, [sp, #16]
 80080b4:	9a06      	ldr	r2, [sp, #24]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	4313      	orrs	r3, r2
 80080ba:	4682      	mov	sl, r0
 80080bc:	468b      	mov	fp, r1
 80080be:	f040 81e7 	bne.w	8008490 <__ieee754_pow+0x700>
 80080c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008178 <__ieee754_pow+0x3e8>
 80080c6:	eeb0 8a47 	vmov.f32	s16, s14
 80080ca:	eef0 8a67 	vmov.f32	s17, s15
 80080ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080d2:	2600      	movs	r6, #0
 80080d4:	4632      	mov	r2, r6
 80080d6:	463b      	mov	r3, r7
 80080d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080dc:	f7f8 f87c 	bl	80001d8 <__aeabi_dsub>
 80080e0:	4622      	mov	r2, r4
 80080e2:	462b      	mov	r3, r5
 80080e4:	f7f8 fa30 	bl	8000548 <__aeabi_dmul>
 80080e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ec:	4680      	mov	r8, r0
 80080ee:	4689      	mov	r9, r1
 80080f0:	4650      	mov	r0, sl
 80080f2:	4659      	mov	r1, fp
 80080f4:	f7f8 fa28 	bl	8000548 <__aeabi_dmul>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4640      	mov	r0, r8
 80080fe:	4649      	mov	r1, r9
 8008100:	f7f8 f86c 	bl	80001dc <__adddf3>
 8008104:	4632      	mov	r2, r6
 8008106:	463b      	mov	r3, r7
 8008108:	4680      	mov	r8, r0
 800810a:	4689      	mov	r9, r1
 800810c:	4620      	mov	r0, r4
 800810e:	4629      	mov	r1, r5
 8008110:	f7f8 fa1a 	bl	8000548 <__aeabi_dmul>
 8008114:	460b      	mov	r3, r1
 8008116:	4604      	mov	r4, r0
 8008118:	460d      	mov	r5, r1
 800811a:	4602      	mov	r2, r0
 800811c:	4649      	mov	r1, r9
 800811e:	4640      	mov	r0, r8
 8008120:	f7f8 f85c 	bl	80001dc <__adddf3>
 8008124:	4b19      	ldr	r3, [pc, #100]	; (800818c <__ieee754_pow+0x3fc>)
 8008126:	4299      	cmp	r1, r3
 8008128:	ec45 4b19 	vmov	d9, r4, r5
 800812c:	4606      	mov	r6, r0
 800812e:	460f      	mov	r7, r1
 8008130:	468b      	mov	fp, r1
 8008132:	f340 82f1 	ble.w	8008718 <__ieee754_pow+0x988>
 8008136:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800813a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800813e:	4303      	orrs	r3, r0
 8008140:	f000 81e4 	beq.w	800850c <__ieee754_pow+0x77c>
 8008144:	ec51 0b18 	vmov	r0, r1, d8
 8008148:	2200      	movs	r2, #0
 800814a:	2300      	movs	r3, #0
 800814c:	f7f8 fc6e 	bl	8000a2c <__aeabi_dcmplt>
 8008150:	3800      	subs	r0, #0
 8008152:	bf18      	it	ne
 8008154:	2001      	movne	r0, #1
 8008156:	e72b      	b.n	8007fb0 <__ieee754_pow+0x220>
 8008158:	60000000 	.word	0x60000000
 800815c:	3ff71547 	.word	0x3ff71547
 8008160:	f85ddf44 	.word	0xf85ddf44
 8008164:	3e54ae0b 	.word	0x3e54ae0b
 8008168:	55555555 	.word	0x55555555
 800816c:	3fd55555 	.word	0x3fd55555
 8008170:	652b82fe 	.word	0x652b82fe
 8008174:	3ff71547 	.word	0x3ff71547
 8008178:	00000000 	.word	0x00000000
 800817c:	bff00000 	.word	0xbff00000
 8008180:	3ff00000 	.word	0x3ff00000
 8008184:	3fd00000 	.word	0x3fd00000
 8008188:	3fe00000 	.word	0x3fe00000
 800818c:	408fffff 	.word	0x408fffff
 8008190:	4bd5      	ldr	r3, [pc, #852]	; (80084e8 <__ieee754_pow+0x758>)
 8008192:	402b      	ands	r3, r5
 8008194:	2200      	movs	r2, #0
 8008196:	b92b      	cbnz	r3, 80081a4 <__ieee754_pow+0x414>
 8008198:	4bd4      	ldr	r3, [pc, #848]	; (80084ec <__ieee754_pow+0x75c>)
 800819a:	f7f8 f9d5 	bl	8000548 <__aeabi_dmul>
 800819e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80081a2:	460c      	mov	r4, r1
 80081a4:	1523      	asrs	r3, r4, #20
 80081a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80081aa:	4413      	add	r3, r2
 80081ac:	9305      	str	r3, [sp, #20]
 80081ae:	4bd0      	ldr	r3, [pc, #832]	; (80084f0 <__ieee754_pow+0x760>)
 80081b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80081b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80081b8:	429c      	cmp	r4, r3
 80081ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80081be:	dd08      	ble.n	80081d2 <__ieee754_pow+0x442>
 80081c0:	4bcc      	ldr	r3, [pc, #816]	; (80084f4 <__ieee754_pow+0x764>)
 80081c2:	429c      	cmp	r4, r3
 80081c4:	f340 8162 	ble.w	800848c <__ieee754_pow+0x6fc>
 80081c8:	9b05      	ldr	r3, [sp, #20]
 80081ca:	3301      	adds	r3, #1
 80081cc:	9305      	str	r3, [sp, #20]
 80081ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80081d2:	2400      	movs	r4, #0
 80081d4:	00e3      	lsls	r3, r4, #3
 80081d6:	9307      	str	r3, [sp, #28]
 80081d8:	4bc7      	ldr	r3, [pc, #796]	; (80084f8 <__ieee754_pow+0x768>)
 80081da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081de:	ed93 7b00 	vldr	d7, [r3]
 80081e2:	4629      	mov	r1, r5
 80081e4:	ec53 2b17 	vmov	r2, r3, d7
 80081e8:	eeb0 9a47 	vmov.f32	s18, s14
 80081ec:	eef0 9a67 	vmov.f32	s19, s15
 80081f0:	4682      	mov	sl, r0
 80081f2:	f7f7 fff1 	bl	80001d8 <__aeabi_dsub>
 80081f6:	4652      	mov	r2, sl
 80081f8:	4606      	mov	r6, r0
 80081fa:	460f      	mov	r7, r1
 80081fc:	462b      	mov	r3, r5
 80081fe:	ec51 0b19 	vmov	r0, r1, d9
 8008202:	f7f7 ffeb 	bl	80001dc <__adddf3>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	2000      	movs	r0, #0
 800820c:	49bb      	ldr	r1, [pc, #748]	; (80084fc <__ieee754_pow+0x76c>)
 800820e:	f7f8 fac5 	bl	800079c <__aeabi_ddiv>
 8008212:	ec41 0b1a 	vmov	d10, r0, r1
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	4630      	mov	r0, r6
 800821c:	4639      	mov	r1, r7
 800821e:	f7f8 f993 	bl	8000548 <__aeabi_dmul>
 8008222:	2300      	movs	r3, #0
 8008224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008228:	9302      	str	r3, [sp, #8]
 800822a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800822e:	46ab      	mov	fp, r5
 8008230:	106d      	asrs	r5, r5, #1
 8008232:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008236:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800823a:	ec41 0b18 	vmov	d8, r0, r1
 800823e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008242:	2200      	movs	r2, #0
 8008244:	4640      	mov	r0, r8
 8008246:	4649      	mov	r1, r9
 8008248:	4614      	mov	r4, r2
 800824a:	461d      	mov	r5, r3
 800824c:	f7f8 f97c 	bl	8000548 <__aeabi_dmul>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4630      	mov	r0, r6
 8008256:	4639      	mov	r1, r7
 8008258:	f7f7 ffbe 	bl	80001d8 <__aeabi_dsub>
 800825c:	ec53 2b19 	vmov	r2, r3, d9
 8008260:	4606      	mov	r6, r0
 8008262:	460f      	mov	r7, r1
 8008264:	4620      	mov	r0, r4
 8008266:	4629      	mov	r1, r5
 8008268:	f7f7 ffb6 	bl	80001d8 <__aeabi_dsub>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4650      	mov	r0, sl
 8008272:	4659      	mov	r1, fp
 8008274:	f7f7 ffb0 	bl	80001d8 <__aeabi_dsub>
 8008278:	4642      	mov	r2, r8
 800827a:	464b      	mov	r3, r9
 800827c:	f7f8 f964 	bl	8000548 <__aeabi_dmul>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	f7f7 ffa6 	bl	80001d8 <__aeabi_dsub>
 800828c:	ec53 2b1a 	vmov	r2, r3, d10
 8008290:	f7f8 f95a 	bl	8000548 <__aeabi_dmul>
 8008294:	ec53 2b18 	vmov	r2, r3, d8
 8008298:	ec41 0b19 	vmov	d9, r0, r1
 800829c:	ec51 0b18 	vmov	r0, r1, d8
 80082a0:	f7f8 f952 	bl	8000548 <__aeabi_dmul>
 80082a4:	a37c      	add	r3, pc, #496	; (adr r3, 8008498 <__ieee754_pow+0x708>)
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	4604      	mov	r4, r0
 80082ac:	460d      	mov	r5, r1
 80082ae:	f7f8 f94b 	bl	8000548 <__aeabi_dmul>
 80082b2:	a37b      	add	r3, pc, #492	; (adr r3, 80084a0 <__ieee754_pow+0x710>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f7 ff90 	bl	80001dc <__adddf3>
 80082bc:	4622      	mov	r2, r4
 80082be:	462b      	mov	r3, r5
 80082c0:	f7f8 f942 	bl	8000548 <__aeabi_dmul>
 80082c4:	a378      	add	r3, pc, #480	; (adr r3, 80084a8 <__ieee754_pow+0x718>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f7f7 ff87 	bl	80001dc <__adddf3>
 80082ce:	4622      	mov	r2, r4
 80082d0:	462b      	mov	r3, r5
 80082d2:	f7f8 f939 	bl	8000548 <__aeabi_dmul>
 80082d6:	a376      	add	r3, pc, #472	; (adr r3, 80084b0 <__ieee754_pow+0x720>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f7f7 ff7e 	bl	80001dc <__adddf3>
 80082e0:	4622      	mov	r2, r4
 80082e2:	462b      	mov	r3, r5
 80082e4:	f7f8 f930 	bl	8000548 <__aeabi_dmul>
 80082e8:	a373      	add	r3, pc, #460	; (adr r3, 80084b8 <__ieee754_pow+0x728>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f7f7 ff75 	bl	80001dc <__adddf3>
 80082f2:	4622      	mov	r2, r4
 80082f4:	462b      	mov	r3, r5
 80082f6:	f7f8 f927 	bl	8000548 <__aeabi_dmul>
 80082fa:	a371      	add	r3, pc, #452	; (adr r3, 80084c0 <__ieee754_pow+0x730>)
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f7f7 ff6c 	bl	80001dc <__adddf3>
 8008304:	4622      	mov	r2, r4
 8008306:	4606      	mov	r6, r0
 8008308:	460f      	mov	r7, r1
 800830a:	462b      	mov	r3, r5
 800830c:	4620      	mov	r0, r4
 800830e:	4629      	mov	r1, r5
 8008310:	f7f8 f91a 	bl	8000548 <__aeabi_dmul>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	f7f8 f914 	bl	8000548 <__aeabi_dmul>
 8008320:	4642      	mov	r2, r8
 8008322:	4604      	mov	r4, r0
 8008324:	460d      	mov	r5, r1
 8008326:	464b      	mov	r3, r9
 8008328:	ec51 0b18 	vmov	r0, r1, d8
 800832c:	f7f7 ff56 	bl	80001dc <__adddf3>
 8008330:	ec53 2b19 	vmov	r2, r3, d9
 8008334:	f7f8 f908 	bl	8000548 <__aeabi_dmul>
 8008338:	4622      	mov	r2, r4
 800833a:	462b      	mov	r3, r5
 800833c:	f7f7 ff4e 	bl	80001dc <__adddf3>
 8008340:	4642      	mov	r2, r8
 8008342:	4682      	mov	sl, r0
 8008344:	468b      	mov	fp, r1
 8008346:	464b      	mov	r3, r9
 8008348:	4640      	mov	r0, r8
 800834a:	4649      	mov	r1, r9
 800834c:	f7f8 f8fc 	bl	8000548 <__aeabi_dmul>
 8008350:	4b6b      	ldr	r3, [pc, #428]	; (8008500 <__ieee754_pow+0x770>)
 8008352:	2200      	movs	r2, #0
 8008354:	4606      	mov	r6, r0
 8008356:	460f      	mov	r7, r1
 8008358:	f7f7 ff40 	bl	80001dc <__adddf3>
 800835c:	4652      	mov	r2, sl
 800835e:	465b      	mov	r3, fp
 8008360:	f7f7 ff3c 	bl	80001dc <__adddf3>
 8008364:	2000      	movs	r0, #0
 8008366:	4604      	mov	r4, r0
 8008368:	460d      	mov	r5, r1
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	f7f8 f8e9 	bl	8000548 <__aeabi_dmul>
 8008376:	4b62      	ldr	r3, [pc, #392]	; (8008500 <__ieee754_pow+0x770>)
 8008378:	4680      	mov	r8, r0
 800837a:	4689      	mov	r9, r1
 800837c:	2200      	movs	r2, #0
 800837e:	4620      	mov	r0, r4
 8008380:	4629      	mov	r1, r5
 8008382:	f7f7 ff29 	bl	80001d8 <__aeabi_dsub>
 8008386:	4632      	mov	r2, r6
 8008388:	463b      	mov	r3, r7
 800838a:	f7f7 ff25 	bl	80001d8 <__aeabi_dsub>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4650      	mov	r0, sl
 8008394:	4659      	mov	r1, fp
 8008396:	f7f7 ff1f 	bl	80001d8 <__aeabi_dsub>
 800839a:	ec53 2b18 	vmov	r2, r3, d8
 800839e:	f7f8 f8d3 	bl	8000548 <__aeabi_dmul>
 80083a2:	4622      	mov	r2, r4
 80083a4:	4606      	mov	r6, r0
 80083a6:	460f      	mov	r7, r1
 80083a8:	462b      	mov	r3, r5
 80083aa:	ec51 0b19 	vmov	r0, r1, d9
 80083ae:	f7f8 f8cb 	bl	8000548 <__aeabi_dmul>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4630      	mov	r0, r6
 80083b8:	4639      	mov	r1, r7
 80083ba:	f7f7 ff0f 	bl	80001dc <__adddf3>
 80083be:	4606      	mov	r6, r0
 80083c0:	460f      	mov	r7, r1
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4640      	mov	r0, r8
 80083c8:	4649      	mov	r1, r9
 80083ca:	f7f7 ff07 	bl	80001dc <__adddf3>
 80083ce:	a33e      	add	r3, pc, #248	; (adr r3, 80084c8 <__ieee754_pow+0x738>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	2000      	movs	r0, #0
 80083d6:	4604      	mov	r4, r0
 80083d8:	460d      	mov	r5, r1
 80083da:	f7f8 f8b5 	bl	8000548 <__aeabi_dmul>
 80083de:	4642      	mov	r2, r8
 80083e0:	ec41 0b18 	vmov	d8, r0, r1
 80083e4:	464b      	mov	r3, r9
 80083e6:	4620      	mov	r0, r4
 80083e8:	4629      	mov	r1, r5
 80083ea:	f7f7 fef5 	bl	80001d8 <__aeabi_dsub>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4630      	mov	r0, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f7 feef 	bl	80001d8 <__aeabi_dsub>
 80083fa:	a335      	add	r3, pc, #212	; (adr r3, 80084d0 <__ieee754_pow+0x740>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f7f8 f8a2 	bl	8000548 <__aeabi_dmul>
 8008404:	a334      	add	r3, pc, #208	; (adr r3, 80084d8 <__ieee754_pow+0x748>)
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	4606      	mov	r6, r0
 800840c:	460f      	mov	r7, r1
 800840e:	4620      	mov	r0, r4
 8008410:	4629      	mov	r1, r5
 8008412:	f7f8 f899 	bl	8000548 <__aeabi_dmul>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4630      	mov	r0, r6
 800841c:	4639      	mov	r1, r7
 800841e:	f7f7 fedd 	bl	80001dc <__adddf3>
 8008422:	9a07      	ldr	r2, [sp, #28]
 8008424:	4b37      	ldr	r3, [pc, #220]	; (8008504 <__ieee754_pow+0x774>)
 8008426:	4413      	add	r3, r2
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f7f7 fed6 	bl	80001dc <__adddf3>
 8008430:	4682      	mov	sl, r0
 8008432:	9805      	ldr	r0, [sp, #20]
 8008434:	468b      	mov	fp, r1
 8008436:	f7f8 f81d 	bl	8000474 <__aeabi_i2d>
 800843a:	9a07      	ldr	r2, [sp, #28]
 800843c:	4b32      	ldr	r3, [pc, #200]	; (8008508 <__ieee754_pow+0x778>)
 800843e:	4413      	add	r3, r2
 8008440:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008444:	4606      	mov	r6, r0
 8008446:	460f      	mov	r7, r1
 8008448:	4652      	mov	r2, sl
 800844a:	465b      	mov	r3, fp
 800844c:	ec51 0b18 	vmov	r0, r1, d8
 8008450:	f7f7 fec4 	bl	80001dc <__adddf3>
 8008454:	4642      	mov	r2, r8
 8008456:	464b      	mov	r3, r9
 8008458:	f7f7 fec0 	bl	80001dc <__adddf3>
 800845c:	4632      	mov	r2, r6
 800845e:	463b      	mov	r3, r7
 8008460:	f7f7 febc 	bl	80001dc <__adddf3>
 8008464:	2000      	movs	r0, #0
 8008466:	4632      	mov	r2, r6
 8008468:	463b      	mov	r3, r7
 800846a:	4604      	mov	r4, r0
 800846c:	460d      	mov	r5, r1
 800846e:	f7f7 feb3 	bl	80001d8 <__aeabi_dsub>
 8008472:	4642      	mov	r2, r8
 8008474:	464b      	mov	r3, r9
 8008476:	f7f7 feaf 	bl	80001d8 <__aeabi_dsub>
 800847a:	ec53 2b18 	vmov	r2, r3, d8
 800847e:	f7f7 feab 	bl	80001d8 <__aeabi_dsub>
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	4650      	mov	r0, sl
 8008488:	4659      	mov	r1, fp
 800848a:	e610      	b.n	80080ae <__ieee754_pow+0x31e>
 800848c:	2401      	movs	r4, #1
 800848e:	e6a1      	b.n	80081d4 <__ieee754_pow+0x444>
 8008490:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80084e0 <__ieee754_pow+0x750>
 8008494:	e617      	b.n	80080c6 <__ieee754_pow+0x336>
 8008496:	bf00      	nop
 8008498:	4a454eef 	.word	0x4a454eef
 800849c:	3fca7e28 	.word	0x3fca7e28
 80084a0:	93c9db65 	.word	0x93c9db65
 80084a4:	3fcd864a 	.word	0x3fcd864a
 80084a8:	a91d4101 	.word	0xa91d4101
 80084ac:	3fd17460 	.word	0x3fd17460
 80084b0:	518f264d 	.word	0x518f264d
 80084b4:	3fd55555 	.word	0x3fd55555
 80084b8:	db6fabff 	.word	0xdb6fabff
 80084bc:	3fdb6db6 	.word	0x3fdb6db6
 80084c0:	33333303 	.word	0x33333303
 80084c4:	3fe33333 	.word	0x3fe33333
 80084c8:	e0000000 	.word	0xe0000000
 80084cc:	3feec709 	.word	0x3feec709
 80084d0:	dc3a03fd 	.word	0xdc3a03fd
 80084d4:	3feec709 	.word	0x3feec709
 80084d8:	145b01f5 	.word	0x145b01f5
 80084dc:	be3e2fe0 	.word	0xbe3e2fe0
 80084e0:	00000000 	.word	0x00000000
 80084e4:	3ff00000 	.word	0x3ff00000
 80084e8:	7ff00000 	.word	0x7ff00000
 80084ec:	43400000 	.word	0x43400000
 80084f0:	0003988e 	.word	0x0003988e
 80084f4:	000bb679 	.word	0x000bb679
 80084f8:	08008b60 	.word	0x08008b60
 80084fc:	3ff00000 	.word	0x3ff00000
 8008500:	40080000 	.word	0x40080000
 8008504:	08008b80 	.word	0x08008b80
 8008508:	08008b70 	.word	0x08008b70
 800850c:	a3b5      	add	r3, pc, #724	; (adr r3, 80087e4 <__ieee754_pow+0xa54>)
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	4640      	mov	r0, r8
 8008514:	4649      	mov	r1, r9
 8008516:	f7f7 fe61 	bl	80001dc <__adddf3>
 800851a:	4622      	mov	r2, r4
 800851c:	ec41 0b1a 	vmov	d10, r0, r1
 8008520:	462b      	mov	r3, r5
 8008522:	4630      	mov	r0, r6
 8008524:	4639      	mov	r1, r7
 8008526:	f7f7 fe57 	bl	80001d8 <__aeabi_dsub>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	ec51 0b1a 	vmov	r0, r1, d10
 8008532:	f7f8 fa99 	bl	8000a68 <__aeabi_dcmpgt>
 8008536:	2800      	cmp	r0, #0
 8008538:	f47f ae04 	bne.w	8008144 <__ieee754_pow+0x3b4>
 800853c:	4aa4      	ldr	r2, [pc, #656]	; (80087d0 <__ieee754_pow+0xa40>)
 800853e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008542:	4293      	cmp	r3, r2
 8008544:	f340 8108 	ble.w	8008758 <__ieee754_pow+0x9c8>
 8008548:	151b      	asrs	r3, r3, #20
 800854a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800854e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008552:	fa4a f303 	asr.w	r3, sl, r3
 8008556:	445b      	add	r3, fp
 8008558:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800855c:	4e9d      	ldr	r6, [pc, #628]	; (80087d4 <__ieee754_pow+0xa44>)
 800855e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008562:	4116      	asrs	r6, r2
 8008564:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008568:	2000      	movs	r0, #0
 800856a:	ea23 0106 	bic.w	r1, r3, r6
 800856e:	f1c2 0214 	rsb	r2, r2, #20
 8008572:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008576:	fa4a fa02 	asr.w	sl, sl, r2
 800857a:	f1bb 0f00 	cmp.w	fp, #0
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4620      	mov	r0, r4
 8008584:	4629      	mov	r1, r5
 8008586:	bfb8      	it	lt
 8008588:	f1ca 0a00 	rsblt	sl, sl, #0
 800858c:	f7f7 fe24 	bl	80001d8 <__aeabi_dsub>
 8008590:	ec41 0b19 	vmov	d9, r0, r1
 8008594:	4642      	mov	r2, r8
 8008596:	464b      	mov	r3, r9
 8008598:	ec51 0b19 	vmov	r0, r1, d9
 800859c:	f7f7 fe1e 	bl	80001dc <__adddf3>
 80085a0:	a37b      	add	r3, pc, #492	; (adr r3, 8008790 <__ieee754_pow+0xa00>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	2000      	movs	r0, #0
 80085a8:	4604      	mov	r4, r0
 80085aa:	460d      	mov	r5, r1
 80085ac:	f7f7 ffcc 	bl	8000548 <__aeabi_dmul>
 80085b0:	ec53 2b19 	vmov	r2, r3, d9
 80085b4:	4606      	mov	r6, r0
 80085b6:	460f      	mov	r7, r1
 80085b8:	4620      	mov	r0, r4
 80085ba:	4629      	mov	r1, r5
 80085bc:	f7f7 fe0c 	bl	80001d8 <__aeabi_dsub>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4640      	mov	r0, r8
 80085c6:	4649      	mov	r1, r9
 80085c8:	f7f7 fe06 	bl	80001d8 <__aeabi_dsub>
 80085cc:	a372      	add	r3, pc, #456	; (adr r3, 8008798 <__ieee754_pow+0xa08>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f7 ffb9 	bl	8000548 <__aeabi_dmul>
 80085d6:	a372      	add	r3, pc, #456	; (adr r3, 80087a0 <__ieee754_pow+0xa10>)
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	4680      	mov	r8, r0
 80085de:	4689      	mov	r9, r1
 80085e0:	4620      	mov	r0, r4
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7f7 ffb0 	bl	8000548 <__aeabi_dmul>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4640      	mov	r0, r8
 80085ee:	4649      	mov	r1, r9
 80085f0:	f7f7 fdf4 	bl	80001dc <__adddf3>
 80085f4:	4604      	mov	r4, r0
 80085f6:	460d      	mov	r5, r1
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4630      	mov	r0, r6
 80085fe:	4639      	mov	r1, r7
 8008600:	f7f7 fdec 	bl	80001dc <__adddf3>
 8008604:	4632      	mov	r2, r6
 8008606:	463b      	mov	r3, r7
 8008608:	4680      	mov	r8, r0
 800860a:	4689      	mov	r9, r1
 800860c:	f7f7 fde4 	bl	80001d8 <__aeabi_dsub>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4620      	mov	r0, r4
 8008616:	4629      	mov	r1, r5
 8008618:	f7f7 fdde 	bl	80001d8 <__aeabi_dsub>
 800861c:	4642      	mov	r2, r8
 800861e:	4606      	mov	r6, r0
 8008620:	460f      	mov	r7, r1
 8008622:	464b      	mov	r3, r9
 8008624:	4640      	mov	r0, r8
 8008626:	4649      	mov	r1, r9
 8008628:	f7f7 ff8e 	bl	8000548 <__aeabi_dmul>
 800862c:	a35e      	add	r3, pc, #376	; (adr r3, 80087a8 <__ieee754_pow+0xa18>)
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	4604      	mov	r4, r0
 8008634:	460d      	mov	r5, r1
 8008636:	f7f7 ff87 	bl	8000548 <__aeabi_dmul>
 800863a:	a35d      	add	r3, pc, #372	; (adr r3, 80087b0 <__ieee754_pow+0xa20>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f7f7 fdca 	bl	80001d8 <__aeabi_dsub>
 8008644:	4622      	mov	r2, r4
 8008646:	462b      	mov	r3, r5
 8008648:	f7f7 ff7e 	bl	8000548 <__aeabi_dmul>
 800864c:	a35a      	add	r3, pc, #360	; (adr r3, 80087b8 <__ieee754_pow+0xa28>)
 800864e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008652:	f7f7 fdc3 	bl	80001dc <__adddf3>
 8008656:	4622      	mov	r2, r4
 8008658:	462b      	mov	r3, r5
 800865a:	f7f7 ff75 	bl	8000548 <__aeabi_dmul>
 800865e:	a358      	add	r3, pc, #352	; (adr r3, 80087c0 <__ieee754_pow+0xa30>)
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	f7f7 fdb8 	bl	80001d8 <__aeabi_dsub>
 8008668:	4622      	mov	r2, r4
 800866a:	462b      	mov	r3, r5
 800866c:	f7f7 ff6c 	bl	8000548 <__aeabi_dmul>
 8008670:	a355      	add	r3, pc, #340	; (adr r3, 80087c8 <__ieee754_pow+0xa38>)
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f7f7 fdb1 	bl	80001dc <__adddf3>
 800867a:	4622      	mov	r2, r4
 800867c:	462b      	mov	r3, r5
 800867e:	f7f7 ff63 	bl	8000548 <__aeabi_dmul>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4640      	mov	r0, r8
 8008688:	4649      	mov	r1, r9
 800868a:	f7f7 fda5 	bl	80001d8 <__aeabi_dsub>
 800868e:	4604      	mov	r4, r0
 8008690:	460d      	mov	r5, r1
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4640      	mov	r0, r8
 8008698:	4649      	mov	r1, r9
 800869a:	f7f7 ff55 	bl	8000548 <__aeabi_dmul>
 800869e:	2200      	movs	r2, #0
 80086a0:	ec41 0b19 	vmov	d9, r0, r1
 80086a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086a8:	4620      	mov	r0, r4
 80086aa:	4629      	mov	r1, r5
 80086ac:	f7f7 fd94 	bl	80001d8 <__aeabi_dsub>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	ec51 0b19 	vmov	r0, r1, d9
 80086b8:	f7f8 f870 	bl	800079c <__aeabi_ddiv>
 80086bc:	4632      	mov	r2, r6
 80086be:	4604      	mov	r4, r0
 80086c0:	460d      	mov	r5, r1
 80086c2:	463b      	mov	r3, r7
 80086c4:	4640      	mov	r0, r8
 80086c6:	4649      	mov	r1, r9
 80086c8:	f7f7 ff3e 	bl	8000548 <__aeabi_dmul>
 80086cc:	4632      	mov	r2, r6
 80086ce:	463b      	mov	r3, r7
 80086d0:	f7f7 fd84 	bl	80001dc <__adddf3>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4620      	mov	r0, r4
 80086da:	4629      	mov	r1, r5
 80086dc:	f7f7 fd7c 	bl	80001d8 <__aeabi_dsub>
 80086e0:	4642      	mov	r2, r8
 80086e2:	464b      	mov	r3, r9
 80086e4:	f7f7 fd78 	bl	80001d8 <__aeabi_dsub>
 80086e8:	460b      	mov	r3, r1
 80086ea:	4602      	mov	r2, r0
 80086ec:	493a      	ldr	r1, [pc, #232]	; (80087d8 <__ieee754_pow+0xa48>)
 80086ee:	2000      	movs	r0, #0
 80086f0:	f7f7 fd72 	bl	80001d8 <__aeabi_dsub>
 80086f4:	ec41 0b10 	vmov	d0, r0, r1
 80086f8:	ee10 3a90 	vmov	r3, s1
 80086fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008704:	da2b      	bge.n	800875e <__ieee754_pow+0x9ce>
 8008706:	4650      	mov	r0, sl
 8008708:	f000 f966 	bl	80089d8 <scalbn>
 800870c:	ec51 0b10 	vmov	r0, r1, d0
 8008710:	ec53 2b18 	vmov	r2, r3, d8
 8008714:	f7ff bbed 	b.w	8007ef2 <__ieee754_pow+0x162>
 8008718:	4b30      	ldr	r3, [pc, #192]	; (80087dc <__ieee754_pow+0xa4c>)
 800871a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800871e:	429e      	cmp	r6, r3
 8008720:	f77f af0c 	ble.w	800853c <__ieee754_pow+0x7ac>
 8008724:	4b2e      	ldr	r3, [pc, #184]	; (80087e0 <__ieee754_pow+0xa50>)
 8008726:	440b      	add	r3, r1
 8008728:	4303      	orrs	r3, r0
 800872a:	d009      	beq.n	8008740 <__ieee754_pow+0x9b0>
 800872c:	ec51 0b18 	vmov	r0, r1, d8
 8008730:	2200      	movs	r2, #0
 8008732:	2300      	movs	r3, #0
 8008734:	f7f8 f97a 	bl	8000a2c <__aeabi_dcmplt>
 8008738:	3800      	subs	r0, #0
 800873a:	bf18      	it	ne
 800873c:	2001      	movne	r0, #1
 800873e:	e447      	b.n	8007fd0 <__ieee754_pow+0x240>
 8008740:	4622      	mov	r2, r4
 8008742:	462b      	mov	r3, r5
 8008744:	f7f7 fd48 	bl	80001d8 <__aeabi_dsub>
 8008748:	4642      	mov	r2, r8
 800874a:	464b      	mov	r3, r9
 800874c:	f7f8 f982 	bl	8000a54 <__aeabi_dcmpge>
 8008750:	2800      	cmp	r0, #0
 8008752:	f43f aef3 	beq.w	800853c <__ieee754_pow+0x7ac>
 8008756:	e7e9      	b.n	800872c <__ieee754_pow+0x99c>
 8008758:	f04f 0a00 	mov.w	sl, #0
 800875c:	e71a      	b.n	8008594 <__ieee754_pow+0x804>
 800875e:	ec51 0b10 	vmov	r0, r1, d0
 8008762:	4619      	mov	r1, r3
 8008764:	e7d4      	b.n	8008710 <__ieee754_pow+0x980>
 8008766:	491c      	ldr	r1, [pc, #112]	; (80087d8 <__ieee754_pow+0xa48>)
 8008768:	2000      	movs	r0, #0
 800876a:	f7ff bb30 	b.w	8007dce <__ieee754_pow+0x3e>
 800876e:	2000      	movs	r0, #0
 8008770:	2100      	movs	r1, #0
 8008772:	f7ff bb2c 	b.w	8007dce <__ieee754_pow+0x3e>
 8008776:	4630      	mov	r0, r6
 8008778:	4639      	mov	r1, r7
 800877a:	f7ff bb28 	b.w	8007dce <__ieee754_pow+0x3e>
 800877e:	9204      	str	r2, [sp, #16]
 8008780:	f7ff bb7a 	b.w	8007e78 <__ieee754_pow+0xe8>
 8008784:	2300      	movs	r3, #0
 8008786:	f7ff bb64 	b.w	8007e52 <__ieee754_pow+0xc2>
 800878a:	bf00      	nop
 800878c:	f3af 8000 	nop.w
 8008790:	00000000 	.word	0x00000000
 8008794:	3fe62e43 	.word	0x3fe62e43
 8008798:	fefa39ef 	.word	0xfefa39ef
 800879c:	3fe62e42 	.word	0x3fe62e42
 80087a0:	0ca86c39 	.word	0x0ca86c39
 80087a4:	be205c61 	.word	0xbe205c61
 80087a8:	72bea4d0 	.word	0x72bea4d0
 80087ac:	3e663769 	.word	0x3e663769
 80087b0:	c5d26bf1 	.word	0xc5d26bf1
 80087b4:	3ebbbd41 	.word	0x3ebbbd41
 80087b8:	af25de2c 	.word	0xaf25de2c
 80087bc:	3f11566a 	.word	0x3f11566a
 80087c0:	16bebd93 	.word	0x16bebd93
 80087c4:	3f66c16c 	.word	0x3f66c16c
 80087c8:	5555553e 	.word	0x5555553e
 80087cc:	3fc55555 	.word	0x3fc55555
 80087d0:	3fe00000 	.word	0x3fe00000
 80087d4:	000fffff 	.word	0x000fffff
 80087d8:	3ff00000 	.word	0x3ff00000
 80087dc:	4090cbff 	.word	0x4090cbff
 80087e0:	3f6f3400 	.word	0x3f6f3400
 80087e4:	652b82fe 	.word	0x652b82fe
 80087e8:	3c971547 	.word	0x3c971547

080087ec <__ieee754_sqrt>:
 80087ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f0:	ec55 4b10 	vmov	r4, r5, d0
 80087f4:	4e55      	ldr	r6, [pc, #340]	; (800894c <__ieee754_sqrt+0x160>)
 80087f6:	43ae      	bics	r6, r5
 80087f8:	ee10 0a10 	vmov	r0, s0
 80087fc:	ee10 3a10 	vmov	r3, s0
 8008800:	462a      	mov	r2, r5
 8008802:	4629      	mov	r1, r5
 8008804:	d110      	bne.n	8008828 <__ieee754_sqrt+0x3c>
 8008806:	ee10 2a10 	vmov	r2, s0
 800880a:	462b      	mov	r3, r5
 800880c:	f7f7 fe9c 	bl	8000548 <__aeabi_dmul>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4620      	mov	r0, r4
 8008816:	4629      	mov	r1, r5
 8008818:	f7f7 fce0 	bl	80001dc <__adddf3>
 800881c:	4604      	mov	r4, r0
 800881e:	460d      	mov	r5, r1
 8008820:	ec45 4b10 	vmov	d0, r4, r5
 8008824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008828:	2d00      	cmp	r5, #0
 800882a:	dc10      	bgt.n	800884e <__ieee754_sqrt+0x62>
 800882c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008830:	4330      	orrs	r0, r6
 8008832:	d0f5      	beq.n	8008820 <__ieee754_sqrt+0x34>
 8008834:	b15d      	cbz	r5, 800884e <__ieee754_sqrt+0x62>
 8008836:	ee10 2a10 	vmov	r2, s0
 800883a:	462b      	mov	r3, r5
 800883c:	ee10 0a10 	vmov	r0, s0
 8008840:	f7f7 fcca 	bl	80001d8 <__aeabi_dsub>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	f7f7 ffa8 	bl	800079c <__aeabi_ddiv>
 800884c:	e7e6      	b.n	800881c <__ieee754_sqrt+0x30>
 800884e:	1512      	asrs	r2, r2, #20
 8008850:	d074      	beq.n	800893c <__ieee754_sqrt+0x150>
 8008852:	07d4      	lsls	r4, r2, #31
 8008854:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008858:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800885c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008860:	bf5e      	ittt	pl
 8008862:	0fda      	lsrpl	r2, r3, #31
 8008864:	005b      	lslpl	r3, r3, #1
 8008866:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800886a:	2400      	movs	r4, #0
 800886c:	0fda      	lsrs	r2, r3, #31
 800886e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008872:	107f      	asrs	r7, r7, #1
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	2516      	movs	r5, #22
 8008878:	4620      	mov	r0, r4
 800887a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800887e:	1886      	adds	r6, r0, r2
 8008880:	428e      	cmp	r6, r1
 8008882:	bfde      	ittt	le
 8008884:	1b89      	suble	r1, r1, r6
 8008886:	18b0      	addle	r0, r6, r2
 8008888:	18a4      	addle	r4, r4, r2
 800888a:	0049      	lsls	r1, r1, #1
 800888c:	3d01      	subs	r5, #1
 800888e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008892:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008896:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800889a:	d1f0      	bne.n	800887e <__ieee754_sqrt+0x92>
 800889c:	462a      	mov	r2, r5
 800889e:	f04f 0e20 	mov.w	lr, #32
 80088a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80088a6:	4281      	cmp	r1, r0
 80088a8:	eb06 0c05 	add.w	ip, r6, r5
 80088ac:	dc02      	bgt.n	80088b4 <__ieee754_sqrt+0xc8>
 80088ae:	d113      	bne.n	80088d8 <__ieee754_sqrt+0xec>
 80088b0:	459c      	cmp	ip, r3
 80088b2:	d811      	bhi.n	80088d8 <__ieee754_sqrt+0xec>
 80088b4:	f1bc 0f00 	cmp.w	ip, #0
 80088b8:	eb0c 0506 	add.w	r5, ip, r6
 80088bc:	da43      	bge.n	8008946 <__ieee754_sqrt+0x15a>
 80088be:	2d00      	cmp	r5, #0
 80088c0:	db41      	blt.n	8008946 <__ieee754_sqrt+0x15a>
 80088c2:	f100 0801 	add.w	r8, r0, #1
 80088c6:	1a09      	subs	r1, r1, r0
 80088c8:	459c      	cmp	ip, r3
 80088ca:	bf88      	it	hi
 80088cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80088d0:	eba3 030c 	sub.w	r3, r3, ip
 80088d4:	4432      	add	r2, r6
 80088d6:	4640      	mov	r0, r8
 80088d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80088dc:	f1be 0e01 	subs.w	lr, lr, #1
 80088e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80088e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80088e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80088ec:	d1db      	bne.n	80088a6 <__ieee754_sqrt+0xba>
 80088ee:	430b      	orrs	r3, r1
 80088f0:	d006      	beq.n	8008900 <__ieee754_sqrt+0x114>
 80088f2:	1c50      	adds	r0, r2, #1
 80088f4:	bf13      	iteet	ne
 80088f6:	3201      	addne	r2, #1
 80088f8:	3401      	addeq	r4, #1
 80088fa:	4672      	moveq	r2, lr
 80088fc:	f022 0201 	bicne.w	r2, r2, #1
 8008900:	1063      	asrs	r3, r4, #1
 8008902:	0852      	lsrs	r2, r2, #1
 8008904:	07e1      	lsls	r1, r4, #31
 8008906:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800890a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800890e:	bf48      	it	mi
 8008910:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008914:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008918:	4614      	mov	r4, r2
 800891a:	e781      	b.n	8008820 <__ieee754_sqrt+0x34>
 800891c:	0ad9      	lsrs	r1, r3, #11
 800891e:	3815      	subs	r0, #21
 8008920:	055b      	lsls	r3, r3, #21
 8008922:	2900      	cmp	r1, #0
 8008924:	d0fa      	beq.n	800891c <__ieee754_sqrt+0x130>
 8008926:	02cd      	lsls	r5, r1, #11
 8008928:	d50a      	bpl.n	8008940 <__ieee754_sqrt+0x154>
 800892a:	f1c2 0420 	rsb	r4, r2, #32
 800892e:	fa23 f404 	lsr.w	r4, r3, r4
 8008932:	1e55      	subs	r5, r2, #1
 8008934:	4093      	lsls	r3, r2
 8008936:	4321      	orrs	r1, r4
 8008938:	1b42      	subs	r2, r0, r5
 800893a:	e78a      	b.n	8008852 <__ieee754_sqrt+0x66>
 800893c:	4610      	mov	r0, r2
 800893e:	e7f0      	b.n	8008922 <__ieee754_sqrt+0x136>
 8008940:	0049      	lsls	r1, r1, #1
 8008942:	3201      	adds	r2, #1
 8008944:	e7ef      	b.n	8008926 <__ieee754_sqrt+0x13a>
 8008946:	4680      	mov	r8, r0
 8008948:	e7bd      	b.n	80088c6 <__ieee754_sqrt+0xda>
 800894a:	bf00      	nop
 800894c:	7ff00000 	.word	0x7ff00000

08008950 <with_errno>:
 8008950:	b570      	push	{r4, r5, r6, lr}
 8008952:	4604      	mov	r4, r0
 8008954:	460d      	mov	r5, r1
 8008956:	4616      	mov	r6, r2
 8008958:	f7ff f976 	bl	8007c48 <__errno>
 800895c:	4629      	mov	r1, r5
 800895e:	6006      	str	r6, [r0, #0]
 8008960:	4620      	mov	r0, r4
 8008962:	bd70      	pop	{r4, r5, r6, pc}

08008964 <xflow>:
 8008964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008966:	4614      	mov	r4, r2
 8008968:	461d      	mov	r5, r3
 800896a:	b108      	cbz	r0, 8008970 <xflow+0xc>
 800896c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008970:	e9cd 2300 	strd	r2, r3, [sp]
 8008974:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008978:	4620      	mov	r0, r4
 800897a:	4629      	mov	r1, r5
 800897c:	f7f7 fde4 	bl	8000548 <__aeabi_dmul>
 8008980:	2222      	movs	r2, #34	; 0x22
 8008982:	b003      	add	sp, #12
 8008984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008988:	f7ff bfe2 	b.w	8008950 <with_errno>

0800898c <__math_uflow>:
 800898c:	b508      	push	{r3, lr}
 800898e:	2200      	movs	r2, #0
 8008990:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008994:	f7ff ffe6 	bl	8008964 <xflow>
 8008998:	ec41 0b10 	vmov	d0, r0, r1
 800899c:	bd08      	pop	{r3, pc}

0800899e <__math_oflow>:
 800899e:	b508      	push	{r3, lr}
 80089a0:	2200      	movs	r2, #0
 80089a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80089a6:	f7ff ffdd 	bl	8008964 <xflow>
 80089aa:	ec41 0b10 	vmov	d0, r0, r1
 80089ae:	bd08      	pop	{r3, pc}

080089b0 <fabs>:
 80089b0:	ec51 0b10 	vmov	r0, r1, d0
 80089b4:	ee10 2a10 	vmov	r2, s0
 80089b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089bc:	ec43 2b10 	vmov	d0, r2, r3
 80089c0:	4770      	bx	lr

080089c2 <finite>:
 80089c2:	b082      	sub	sp, #8
 80089c4:	ed8d 0b00 	vstr	d0, [sp]
 80089c8:	9801      	ldr	r0, [sp, #4]
 80089ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80089ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80089d2:	0fc0      	lsrs	r0, r0, #31
 80089d4:	b002      	add	sp, #8
 80089d6:	4770      	bx	lr

080089d8 <scalbn>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	ec55 4b10 	vmov	r4, r5, d0
 80089de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80089e2:	4606      	mov	r6, r0
 80089e4:	462b      	mov	r3, r5
 80089e6:	b99a      	cbnz	r2, 8008a10 <scalbn+0x38>
 80089e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80089ec:	4323      	orrs	r3, r4
 80089ee:	d036      	beq.n	8008a5e <scalbn+0x86>
 80089f0:	4b39      	ldr	r3, [pc, #228]	; (8008ad8 <scalbn+0x100>)
 80089f2:	4629      	mov	r1, r5
 80089f4:	ee10 0a10 	vmov	r0, s0
 80089f8:	2200      	movs	r2, #0
 80089fa:	f7f7 fda5 	bl	8000548 <__aeabi_dmul>
 80089fe:	4b37      	ldr	r3, [pc, #220]	; (8008adc <scalbn+0x104>)
 8008a00:	429e      	cmp	r6, r3
 8008a02:	4604      	mov	r4, r0
 8008a04:	460d      	mov	r5, r1
 8008a06:	da10      	bge.n	8008a2a <scalbn+0x52>
 8008a08:	a32b      	add	r3, pc, #172	; (adr r3, 8008ab8 <scalbn+0xe0>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	e03a      	b.n	8008a86 <scalbn+0xae>
 8008a10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008a14:	428a      	cmp	r2, r1
 8008a16:	d10c      	bne.n	8008a32 <scalbn+0x5a>
 8008a18:	ee10 2a10 	vmov	r2, s0
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fbdc 	bl	80001dc <__adddf3>
 8008a24:	4604      	mov	r4, r0
 8008a26:	460d      	mov	r5, r1
 8008a28:	e019      	b.n	8008a5e <scalbn+0x86>
 8008a2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008a2e:	460b      	mov	r3, r1
 8008a30:	3a36      	subs	r2, #54	; 0x36
 8008a32:	4432      	add	r2, r6
 8008a34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008a38:	428a      	cmp	r2, r1
 8008a3a:	dd08      	ble.n	8008a4e <scalbn+0x76>
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	a120      	add	r1, pc, #128	; (adr r1, 8008ac0 <scalbn+0xe8>)
 8008a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a44:	da1c      	bge.n	8008a80 <scalbn+0xa8>
 8008a46:	a120      	add	r1, pc, #128	; (adr r1, 8008ac8 <scalbn+0xf0>)
 8008a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a4c:	e018      	b.n	8008a80 <scalbn+0xa8>
 8008a4e:	2a00      	cmp	r2, #0
 8008a50:	dd08      	ble.n	8008a64 <scalbn+0x8c>
 8008a52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008a5e:	ec45 4b10 	vmov	d0, r4, r5
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008a68:	da19      	bge.n	8008a9e <scalbn+0xc6>
 8008a6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008a6e:	429e      	cmp	r6, r3
 8008a70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008a74:	dd0a      	ble.n	8008a8c <scalbn+0xb4>
 8008a76:	a112      	add	r1, pc, #72	; (adr r1, 8008ac0 <scalbn+0xe8>)
 8008a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e2      	bne.n	8008a46 <scalbn+0x6e>
 8008a80:	a30f      	add	r3, pc, #60	; (adr r3, 8008ac0 <scalbn+0xe8>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 fd5f 	bl	8000548 <__aeabi_dmul>
 8008a8a:	e7cb      	b.n	8008a24 <scalbn+0x4c>
 8008a8c:	a10a      	add	r1, pc, #40	; (adr r1, 8008ab8 <scalbn+0xe0>)
 8008a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0b8      	beq.n	8008a08 <scalbn+0x30>
 8008a96:	a10e      	add	r1, pc, #56	; (adr r1, 8008ad0 <scalbn+0xf8>)
 8008a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a9c:	e7b4      	b.n	8008a08 <scalbn+0x30>
 8008a9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008aa2:	3236      	adds	r2, #54	; 0x36
 8008aa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008aa8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008aac:	4620      	mov	r0, r4
 8008aae:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <scalbn+0x108>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	e7e8      	b.n	8008a86 <scalbn+0xae>
 8008ab4:	f3af 8000 	nop.w
 8008ab8:	c2f8f359 	.word	0xc2f8f359
 8008abc:	01a56e1f 	.word	0x01a56e1f
 8008ac0:	8800759c 	.word	0x8800759c
 8008ac4:	7e37e43c 	.word	0x7e37e43c
 8008ac8:	8800759c 	.word	0x8800759c
 8008acc:	fe37e43c 	.word	0xfe37e43c
 8008ad0:	c2f8f359 	.word	0xc2f8f359
 8008ad4:	81a56e1f 	.word	0x81a56e1f
 8008ad8:	43500000 	.word	0x43500000
 8008adc:	ffff3cb0 	.word	0xffff3cb0
 8008ae0:	3c900000 	.word	0x3c900000

08008ae4 <_init>:
 8008ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae6:	bf00      	nop
 8008ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aea:	bc08      	pop	{r3}
 8008aec:	469e      	mov	lr, r3
 8008aee:	4770      	bx	lr

08008af0 <_fini>:
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	bf00      	nop
 8008af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af6:	bc08      	pop	{r3}
 8008af8:	469e      	mov	lr, r3
 8008afa:	4770      	bx	lr
