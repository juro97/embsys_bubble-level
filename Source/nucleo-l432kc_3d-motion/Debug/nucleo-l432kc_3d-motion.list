
nucleo-l432kc_3d-motion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800bc38  0800bc38  0001bc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be38  0800be38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800be38  0800be38  0001be38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be40  0800be40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be40  0800be40  0001be40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be44  0800be44  0001be44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800be48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cec  20000078  0800bebc  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004d64  0800bebc  00024d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247db  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b99  00000000  00000000  0004487f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00049418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019c0  00000000  00000000  0004afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008708  00000000  00000000  0004c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000254f1  00000000  00000000  000550a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbb11  00000000  00000000  0007a599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001560aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008010  00000000  00000000  001560fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc1c 	.word	0x0800bc1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800bc1c 	.word	0x0800bc1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5c:	f000 b974 	b.w	8000e48 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9d08      	ldr	r5, [sp, #32]
 8000b7e:	4604      	mov	r4, r0
 8000b80:	468e      	mov	lr, r1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d14d      	bne.n	8000c22 <__udivmoddi4+0xaa>
 8000b86:	428a      	cmp	r2, r1
 8000b88:	4694      	mov	ip, r2
 8000b8a:	d969      	bls.n	8000c60 <__udivmoddi4+0xe8>
 8000b8c:	fab2 f282 	clz	r2, r2
 8000b90:	b152      	cbz	r2, 8000ba8 <__udivmoddi4+0x30>
 8000b92:	fa01 f302 	lsl.w	r3, r1, r2
 8000b96:	f1c2 0120 	rsb	r1, r2, #32
 8000b9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ba6:	4094      	lsls	r4, r2
 8000ba8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bac:	0c21      	lsrs	r1, r4, #16
 8000bae:	fbbe f6f8 	udiv	r6, lr, r8
 8000bb2:	fa1f f78c 	uxth.w	r7, ip
 8000bb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bbe:	fb06 f107 	mul.w	r1, r6, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d90a      	bls.n	8000bdc <__udivmoddi4+0x64>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bce:	f080 811f 	bcs.w	8000e10 <__udivmoddi4+0x298>
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	f240 811c 	bls.w	8000e10 <__udivmoddi4+0x298>
 8000bd8:	3e02      	subs	r6, #2
 8000bda:	4463      	add	r3, ip
 8000bdc:	1a5b      	subs	r3, r3, r1
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bec:	fb00 f707 	mul.w	r7, r0, r7
 8000bf0:	42a7      	cmp	r7, r4
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x92>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfc:	f080 810a 	bcs.w	8000e14 <__udivmoddi4+0x29c>
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	f240 8107 	bls.w	8000e14 <__udivmoddi4+0x29c>
 8000c06:	4464      	add	r4, ip
 8000c08:	3802      	subs	r0, #2
 8000c0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0e:	1be4      	subs	r4, r4, r7
 8000c10:	2600      	movs	r6, #0
 8000c12:	b11d      	cbz	r5, 8000c1c <__udivmoddi4+0xa4>
 8000c14:	40d4      	lsrs	r4, r2
 8000c16:	2300      	movs	r3, #0
 8000c18:	e9c5 4300 	strd	r4, r3, [r5]
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0xc2>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	f000 80ef 	beq.w	8000e0a <__udivmoddi4+0x292>
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c32:	4630      	mov	r0, r6
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	fab3 f683 	clz	r6, r3
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d14a      	bne.n	8000cd8 <__udivmoddi4+0x160>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xd4>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 80f9 	bhi.w	8000e3e <__udivmoddi4+0x2c6>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	469e      	mov	lr, r3
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0e0      	beq.n	8000c1c <__udivmoddi4+0xa4>
 8000c5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c5e:	e7dd      	b.n	8000c1c <__udivmoddi4+0xa4>
 8000c60:	b902      	cbnz	r2, 8000c64 <__udivmoddi4+0xec>
 8000c62:	deff      	udf	#255	; 0xff
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	f040 8092 	bne.w	8000d92 <__udivmoddi4+0x21a>
 8000c6e:	eba1 010c 	sub.w	r1, r1, ip
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	0c20      	lsrs	r0, r4, #16
 8000c7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c82:	fb07 1113 	mls	r1, r7, r3, r1
 8000c86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8a:	fb0e f003 	mul.w	r0, lr, r3
 8000c8e:	4288      	cmp	r0, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x12c>
 8000c92:	eb1c 0101 	adds.w	r1, ip, r1
 8000c96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x12a>
 8000c9c:	4288      	cmp	r0, r1
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2c0>
 8000ca2:	4643      	mov	r3, r8
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x156>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x154>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2ca>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cd6:	e79c      	b.n	8000c12 <__udivmoddi4+0x9a>
 8000cd8:	f1c6 0720 	rsb	r7, r6, #32
 8000cdc:	40b3      	lsls	r3, r6
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cea:	fa01 f306 	lsl.w	r3, r1, r6
 8000cee:	431c      	orrs	r4, r3
 8000cf0:	40f9      	lsrs	r1, r7
 8000cf2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf6:	fa00 f306 	lsl.w	r3, r0, r6
 8000cfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cfe:	0c20      	lsrs	r0, r4, #16
 8000d00:	fa1f fe8c 	uxth.w	lr, ip
 8000d04:	fb09 1118 	mls	r1, r9, r8, r1
 8000d08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d10:	4288      	cmp	r0, r1
 8000d12:	fa02 f206 	lsl.w	r2, r2, r6
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b8>
 8000d18:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2bc>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2bc>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4461      	add	r1, ip
 8000d30:	1a09      	subs	r1, r1, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d38:	fb09 1110 	mls	r1, r9, r0, r1
 8000d3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d44:	458e      	cmp	lr, r1
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1e2>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2b4>
 8000d52:	458e      	cmp	lr, r1
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2b4>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4461      	add	r1, ip
 8000d5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d62:	eba1 010e 	sub.w	r1, r1, lr
 8000d66:	42a1      	cmp	r1, r4
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46a6      	mov	lr, r4
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x2a4>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x2a0>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x212>
 8000d72:	ebb3 0208 	subs.w	r2, r3, r8
 8000d76:	eb61 010e 	sbc.w	r1, r1, lr
 8000d7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d82:	40f1      	lsrs	r1, r6
 8000d84:	431f      	orrs	r7, r3
 8000d86:	e9c5 7100 	strd	r7, r1, [r5]
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	40d8      	lsrs	r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000da0:	4091      	lsls	r1, r2
 8000da2:	4301      	orrs	r1, r0
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db0:	fb07 3610 	mls	r6, r7, r0, r3
 8000db4:	0c0b      	lsrs	r3, r1, #16
 8000db6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dba:	fb00 f60e 	mul.w	r6, r0, lr
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x260>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b8>
 8000dd0:	429e      	cmp	r6, r3
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b8>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	b289      	uxth	r1, r1
 8000ddc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de0:	fb07 3316 	mls	r3, r7, r6, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x28a>
 8000df0:	eb1c 0101 	adds.w	r1, ip, r1
 8000df4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dfe:	3e02      	subs	r6, #2
 8000e00:	4461      	add	r1, ip
 8000e02:	1ac9      	subs	r1, r1, r3
 8000e04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0x104>
 8000e0a:	462e      	mov	r6, r5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e705      	b.n	8000c1c <__udivmoddi4+0xa4>
 8000e10:	4606      	mov	r6, r0
 8000e12:	e6e3      	b.n	8000bdc <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6f8      	b.n	8000c0a <__udivmoddi4+0x92>
 8000e18:	454b      	cmp	r3, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f8>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f8>
 8000e28:	4646      	mov	r6, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x28a>
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1e2>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x260>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b8>
 8000e38:	3b02      	subs	r3, #2
 8000e3a:	4461      	add	r1, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x12c>
 8000e3e:	4630      	mov	r0, r6
 8000e40:	e709      	b.n	8000c56 <__udivmoddi4+0xde>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x156>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of timeBaseTimer */
  timeBaseTimerHandle = osTimerNew(timeBaseCallback, osTimerPeriodic, NULL, &timeBaseTimer_attributes);
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_FREERTOS_Init+0x2c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	2101      	movs	r1, #1
 8000e56:	4809      	ldr	r0, [pc, #36]	; (8000e7c <MX_FREERTOS_Init+0x30>)
 8000e58:	f006 f892 	bl	8006f80 <osTimerNew>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <MX_FREERTOS_Init+0x34>)
 8000e60:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getDataTask */
  getDataTaskHandle = osThreadNew(StartGetDataTask, NULL, &getDataTask_attributes);
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <MX_FREERTOS_Init+0x38>)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <MX_FREERTOS_Init+0x3c>)
 8000e68:	f005 ffe2 	bl	8006e30 <osThreadNew>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <MX_FREERTOS_Init+0x40>)
 8000e70:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	0800bd14 	.word	0x0800bd14
 8000e7c:	08000f15 	.word	0x08000f15
 8000e80:	20000098 	.word	0x20000098
 8000e84:	0800bcf0 	.word	0x0800bcf0
 8000e88:	08000e91 	.word	0x08000e91
 8000e8c:	20000094 	.word	0x20000094

08000e90 <StartGetDataTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGetDataTask */
void StartGetDataTask(void *argument)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetDataTask */
	size_t state = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]

	printf("\r\n--3D-Motion-Click--\r\n");
 8000e9c:	481a      	ldr	r0, [pc, #104]	; (8000f08 <StartGetDataTask+0x78>)
 8000e9e:	f009 f879 	bl	8009f94 <puts>

	/* Send Reset Signal to the Module */
	Reset_signal();
 8000ea2:	f001 fc3b 	bl	800271c <Reset_signal>
	HAL_Delay(1000);
 8000ea6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eaa:	f002 fd3d 	bl	8003928 <HAL_Delay>

	/* Send Wake Signal to the Module */
	Wake_signal();
 8000eae:	f001 fc21 	bl	80026f4 <Wake_signal>
	HAL_Delay(1000);
 8000eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb6:	f002 fd37 	bl	8003928 <HAL_Delay>

	  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2107      	movs	r1, #7
 8000ebe:	2009      	movs	r0, #9
 8000ec0:	f002 fe0e 	bl	8003ae0 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ec4:	2009      	movs	r0, #9
 8000ec6:	f002 fe27 	bl	8003b18 <HAL_NVIC_EnableIRQ>

	/* Initialize the Virtual Register Bank */
	while(VREG_init())
 8000eca:	e00e      	b.n	8000eea <StartGetDataTask+0x5a>
	{
		printf("Init-Error\r\n");
 8000ecc:	480f      	ldr	r0, [pc, #60]	; (8000f0c <StartGetDataTask+0x7c>)
 8000ece:	f009 f861 	bl	8009f94 <puts>
		Reset_signal();
 8000ed2:	f001 fc23 	bl	800271c <Reset_signal>
		HAL_Delay(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eda:	f002 fd25 	bl	8003928 <HAL_Delay>
		Wake_signal();
 8000ede:	f001 fc09 	bl	80026f4 <Wake_signal>
		HAL_Delay(1000);
 8000ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee6:	f002 fd1f 	bl	8003928 <HAL_Delay>
	while(VREG_init())
 8000eea:	f001 fd49 	bl	8002980 <VREG_init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1eb      	bne.n	8000ecc <StartGetDataTask+0x3c>
	};
	printf("Init-OK\r\n");
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <StartGetDataTask+0x80>)
 8000ef6:	f009 f84d 	bl	8009f94 <puts>

	/* Infinite loop */
	for (;;)
	{
		/* TODO: Connection to Module Works, but Data Retrieval does NOT */
		_gyro();
 8000efa:	f000 fb0f 	bl	800151c <_gyro>
		HAL_Delay(100);
 8000efe:	2064      	movs	r0, #100	; 0x64
 8000f00:	f002 fd12 	bl	8003928 <HAL_Delay>
		_gyro();
 8000f04:	e7f9      	b.n	8000efa <StartGetDataTask+0x6a>
 8000f06:	bf00      	nop
 8000f08:	0800bc54 	.word	0x0800bc54
 8000f0c:	0800bc6c 	.word	0x0800bc6c
 8000f10:	0800bc78 	.word	0x0800bc78

08000f14 <timeBaseCallback>:
  /* USER CODE END StartGetDataTask */
}

/* timeBaseCallback function */
void timeBaseCallback(void *argument)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN timeBaseCallback */
	TIMER_10MS_FLG = TRUE;
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <timeBaseCallback+0x1c>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
  /* USER CODE END timeBaseCallback */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	200000f0 	.word	0x200000f0

08000f34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <MX_GPIO_Init+0xd4>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a2e      	ldr	r2, [pc, #184]	; (8001008 <MX_GPIO_Init+0xd4>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <MX_GPIO_Init+0xd4>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_GPIO_Init+0xd4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a28      	ldr	r2, [pc, #160]	; (8001008 <MX_GPIO_Init+0xd4>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_GPIO_Init+0xd4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MX_GPIO_Init+0xd4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a22      	ldr	r2, [pc, #136]	; (8001008 <MX_GPIO_Init+0xd4>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <MX_GPIO_Init+0xd4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTION_WAKE_PIN_GPIO_Port, MOTION_WAKE_PIN_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2101      	movs	r1, #1
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f002 ff33 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	481a      	ldr	r0, [pc, #104]	; (800100c <MX_GPIO_Init+0xd8>)
 8000fa4:	f002 ff2e 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTION_WAKE_PIN_Pin;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTION_WAKE_PIN_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f002 fdb7 	bl	8003b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTION_EXTI3_PIN_Pin;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fca:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTION_EXTI3_PIN_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f002 fda9 	bl	8003b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTION_RESET_PIN_Pin;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTION_RESET_PIN_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_GPIO_Init+0xd8>)
 8000ffa:	f002 fd9b 	bl	8003b34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/


}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400

08001010 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_I2C1_Init+0x74>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <MX_I2C1_Init+0x78>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_I2C1_Init+0x74>)
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <MX_I2C1_Init+0x7c>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_I2C1_Init+0x74>)
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_I2C1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_I2C1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_I2C1_Init+0x74>)
 800104c:	f002 fef2 	bl	8003e34 <HAL_I2C_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001056:	f000 f995 	bl	8001384 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <MX_I2C1_Init+0x74>)
 800105e:	f003 fbdb 	bl	8004818 <HAL_I2CEx_ConfigAnalogFilter>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001068:	f000 f98c 	bl	8001384 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_I2C1_Init+0x74>)
 8001070:	f003 fc1d 	bl	80048ae <HAL_I2CEx_ConfigDigitalFilter>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107a:	f000 f983 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000009c 	.word	0x2000009c
 8001088:	40005400 	.word	0x40005400
 800108c:	00702991 	.word	0x00702991

08001090 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b09e      	sub	sp, #120	; 0x78
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2254      	movs	r2, #84	; 0x54
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f008 fe4c 	bl	8009d4e <memset>
  if(i2cHandle->Instance==I2C1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a24      	ldr	r2, [pc, #144]	; (800114c <HAL_I2C_MspInit+0xbc>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d141      	bne.n	8001144 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010c0:	2340      	movs	r3, #64	; 0x40
 80010c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 fb19 	bl	8005704 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010d8:	f000 f954 	bl	8001384 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_I2C_MspInit+0xc0>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_I2C_MspInit+0xc0>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_I2C_MspInit+0xc0>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MOTION_I2C1_SCL_Pin|MOTION_I2C1_SDA_Pin;
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001104:	2304      	movs	r3, #4
 8001106:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <HAL_I2C_MspInit+0xc4>)
 8001110:	f002 fd10 	bl	8003b34 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <HAL_I2C_MspInit+0xc8>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <HAL_I2C_MspInit+0xc8>)
 800111a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111e:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <HAL_I2C_MspInit+0xc8>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <HAL_I2C_MspInit+0xc8>)
 8001126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112a:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_I2C_MspInit+0xc0>)
 800112e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_I2C_MspInit+0xc0>)
 8001132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001136:	6593      	str	r3, [r2, #88]	; 0x58
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_I2C_MspInit+0xc0>)
 800113a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001144:	bf00      	nop
 8001146:	3778      	adds	r7, #120	; 0x78
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40005400 	.word	0x40005400
 8001150:	40021000 	.word	0x40021000
 8001154:	48000400 	.word	0x48000400
 8001158:	40010000 	.word	0x40010000

0800115c <error_handler>:
volatile uint16_t status = 0;
volatile BOOL TIMER_10MS_FLG = FALSE;         // 10 msec timer interrupt flag
volatile BOOL EC_DATA_AVAIL = FALSE;          // EC data available for read flag

void error_handler(char *str, UINT16 offset, UINT16 errval)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	printf("\r\n ***Error in function: %s:%02X errval=0x%X*** \r\n", str, offset, errval);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <error_handler+0x20>)
 8001170:	f008 fe8a 	bl	8009e88 <iprintf>

	/*
	Error_Handler();
	 */
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	0800bc84 	.word	0x0800bc84

08001180 <i2c_cmd_WrRd>:
 * @param ucData_rd Pointer to data buffer from slave
 * @param bAdjust Use 1st 2 bytes returned as new length (=TRUE)
 * @return I2C_SUCCESS(=0), I2C_BUF_OVRFLO(=0x22)
 */
UINT8 i2c_cmd_WrRd(UINT8 ucCmd, UINT8 ucBytes_wr, UINT8 *ucData_wr, UINT16 ucBytes_rd, UINT8 *ucData_rd, BOOL bAdjust)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	60ba      	str	r2, [r7, #8]
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	460b      	mov	r3, r1
 8001190:	73bb      	strb	r3, [r7, #14]

	/* Sanity Check for Maximum Buffer Size */
	if (ucBytes_wr > BUF_150)
 8001192:	7bbb      	ldrb	r3, [r7, #14]
 8001194:	2b96      	cmp	r3, #150	; 0x96
 8001196:	d901      	bls.n	800119c <i2c_cmd_WrRd+0x1c>
	{
		return I2C_BUF_OVRFLO;
 8001198:	2322      	movs	r3, #34	; 0x22
 800119a:	e060      	b.n	800125e <i2c_cmd_WrRd+0xde>
	}

	switch (ucCmd)
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d02c      	beq.n	80011fc <i2c_cmd_WrRd+0x7c>
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	dc4f      	bgt.n	8001246 <i2c_cmd_WrRd+0xc6>
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d002      	beq.n	80011b0 <i2c_cmd_WrRd+0x30>
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d013      	beq.n	80011d6 <i2c_cmd_WrRd+0x56>
 80011ae:	e04a      	b.n	8001246 <i2c_cmd_WrRd+0xc6>
	{
		/* Perform a Single Write */
		case WRITE:
			if(HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR, ucData_wr, ucBytes_wr, I2_TIMEOUT_PERIOD) != HAL_OK)
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011b8:	9200      	str	r2, [sp, #0]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	482a      	ldr	r0, [pc, #168]	; (8001268 <i2c_cmd_WrRd+0xe8>)
 80011c0:	f002 fec8 	bl	8003f54 <HAL_I2C_Master_Transmit>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d043      	beq.n	8001252 <i2c_cmd_WrRd+0xd2>
			{
				error_handler("i2c ", 0, I2C_ERROR);
 80011ca:	2221      	movs	r2, #33	; 0x21
 80011cc:	2100      	movs	r1, #0
 80011ce:	4827      	ldr	r0, [pc, #156]	; (800126c <i2c_cmd_WrRd+0xec>)
 80011d0:	f7ff ffc4 	bl	800115c <error_handler>
			}
			break;
 80011d4:	e03d      	b.n	8001252 <i2c_cmd_WrRd+0xd2>

		/* Perform a Single Read */
		case READ:

			if(HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDR, ucData_rd, ucBytes_rd, I2_TIMEOUT_PERIOD) != HAL_OK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011de:	9200      	str	r2, [sp, #0]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	4820      	ldr	r0, [pc, #128]	; (8001268 <i2c_cmd_WrRd+0xe8>)
 80011e6:	f002 ffa9 	bl	800413c <HAL_I2C_Master_Receive>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d032      	beq.n	8001256 <i2c_cmd_WrRd+0xd6>
			{
				error_handler("i2c ", 0, I2C_ERROR);
 80011f0:	2221      	movs	r2, #33	; 0x21
 80011f2:	2100      	movs	r1, #0
 80011f4:	481d      	ldr	r0, [pc, #116]	; (800126c <i2c_cmd_WrRd+0xec>)
 80011f6:	f7ff ffb1 	bl	800115c <error_handler>
			}
			break;
 80011fa:	e02c      	b.n	8001256 <i2c_cmd_WrRd+0xd6>

		/* Perform a Write and Read Command */
		case WR_RD:
			if(HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR, ucData_wr, ucBytes_wr, I2_TIMEOUT_PERIOD) != HAL_OK)
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001204:	9200      	str	r2, [sp, #0]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	4817      	ldr	r0, [pc, #92]	; (8001268 <i2c_cmd_WrRd+0xe8>)
 800120c:	f002 fea2 	bl	8003f54 <HAL_I2C_Master_Transmit>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <i2c_cmd_WrRd+0xa0>
			{
				error_handler("i2c ", 0, I2C_ERROR);
 8001216:	2221      	movs	r2, #33	; 0x21
 8001218:	2100      	movs	r1, #0
 800121a:	4814      	ldr	r0, [pc, #80]	; (800126c <i2c_cmd_WrRd+0xec>)
 800121c:	f7ff ff9e 	bl	800115c <error_handler>
			}

			if(HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDR, ucData_rd, ucBytes_rd, I2_TIMEOUT_PERIOD) != HAL_OK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	b29b      	uxth	r3, r3
 8001224:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001228:	9200      	str	r2, [sp, #0]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	480e      	ldr	r0, [pc, #56]	; (8001268 <i2c_cmd_WrRd+0xe8>)
 8001230:	f002 ff84 	bl	800413c <HAL_I2C_Master_Receive>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00f      	beq.n	800125a <i2c_cmd_WrRd+0xda>
			{
				error_handler("i2c ", 0, I2C_ERROR);
 800123a:	2221      	movs	r2, #33	; 0x21
 800123c:	2100      	movs	r1, #0
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <i2c_cmd_WrRd+0xec>)
 8001240:	f7ff ff8c 	bl	800115c <error_handler>
			}
			break;
 8001244:	e009      	b.n	800125a <i2c_cmd_WrRd+0xda>
		default:
			error_handler("i2c ", 0, I2C_ERROR);
 8001246:	2221      	movs	r2, #33	; 0x21
 8001248:	2100      	movs	r1, #0
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <i2c_cmd_WrRd+0xec>)
 800124c:	f7ff ff86 	bl	800115c <error_handler>
 8001250:	e004      	b.n	800125c <i2c_cmd_WrRd+0xdc>
			break;
 8001252:	bf00      	nop
 8001254:	e002      	b.n	800125c <i2c_cmd_WrRd+0xdc>
			break;
 8001256:	bf00      	nop
 8001258:	e000      	b.n	800125c <i2c_cmd_WrRd+0xdc>
			break;
 800125a:	bf00      	nop
	}

	return I2C_SUCCESS;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000009c 	.word	0x2000009c
 800126c:	0800bcb8 	.word	0x0800bcb8

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f002 fb1f 	bl	80038b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f810 	bl	800129c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f7ff fe5a 	bl	8000f34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001280:	f001 faa2 	bl	80027c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001284:	f7ff fec4 	bl	8001010 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001288:	f001 fa6e 	bl	8002768 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800128c:	f005 fd86 	bl	8006d9c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001290:	f7ff fddc 	bl	8000e4c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001294:	f005 fda6 	bl	8006de4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001298:	e7fe      	b.n	8001298 <main+0x28>
	...

0800129c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b096      	sub	sp, #88	; 0x58
 80012a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2244      	movs	r2, #68	; 0x44
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f008 fd4f 	bl	8009d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b0:	463b      	mov	r3, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012c2:	f003 fb5f 	bl	8004984 <HAL_PWREx_ControlVoltageScaling>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012cc:	f000 f85a 	bl	8001384 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012d0:	f003 fb3a 	bl	8004948 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <SystemClock_Config+0xc0>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	4a20      	ldr	r2, [pc, #128]	; (800135c <SystemClock_Config+0xc0>)
 80012dc:	f023 0318 	bic.w	r3, r3, #24
 80012e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012e4:	2314      	movs	r3, #20
 80012e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012f4:	2360      	movs	r3, #96	; 0x60
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f8:	2302      	movs	r3, #2
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012fc:	2301      	movs	r3, #1
 80012fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001300:	2301      	movs	r3, #1
 8001302:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001304:	2328      	movs	r3, #40	; 0x28
 8001306:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001308:	2307      	movs	r3, #7
 800130a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800130c:	2302      	movs	r3, #2
 800130e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001310:	2302      	movs	r3, #2
 8001312:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fb89 	bl	8004a30 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001324:	f000 f82e 	bl	8001384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	230f      	movs	r3, #15
 800132a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132c:	2303      	movs	r3, #3
 800132e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	2104      	movs	r1, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f003 ff89 	bl	8005258 <HAL_RCC_ClockConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800134c:	f000 f81a 	bl	8001384 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001350:	f004 fbce 	bl	8005af0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001354:	bf00      	nop
 8001356:	3758      	adds	r7, #88	; 0x58
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000

08001360 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001372:	f002 fab9 	bl	80038e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40014400 	.word	0x40014400

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
}
 800138a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138c:	e7fe      	b.n	800138c <Error_Handler+0x8>
	...

08001390 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <RetargetInit+0x28>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <RetargetInit+0x2c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6898      	ldr	r0, [r3, #8]
 80013a4:	2300      	movs	r3, #0
 80013a6:	2202      	movs	r2, #2
 80013a8:	2100      	movs	r1, #0
 80013aa:	f008 fe75 	bl	800a098 <setvbuf>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200000f4 	.word	0x200000f4
 80013bc:	20000010 	.word	0x20000010

080013c0 <_isatty>:

int _isatty(int fd) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	db04      	blt.n	80013d8 <_isatty+0x18>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	dc01      	bgt.n	80013d8 <_isatty+0x18>
    return 1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e005      	b.n	80013e4 <_isatty+0x24>

  errno = EBADF;
 80013d8:	f008 fb88 	bl	8009aec <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	2209      	movs	r2, #9
 80013e0:	601a      	str	r2, [r3, #0]
  return 0;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_write>:

int _write(int fd, char* ptr, int len) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d002      	beq.n	8001404 <_write+0x18>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d111      	bne.n	8001428 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <_write+0x54>)
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	b29a      	uxth	r2, r3
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	f004 ff3d 	bl	8006290 <HAL_UART_Transmit>
 8001416:	4603      	mov	r3, r0
 8001418:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <_write+0x38>
      return len;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	e008      	b.n	8001436 <_write+0x4a>
    else
      return EIO;
 8001424:	2305      	movs	r3, #5
 8001426:	e006      	b.n	8001436 <_write+0x4a>
  }
  errno = EBADF;
 8001428:	f008 fb60 	bl	8009aec <__errno>
 800142c:	4603      	mov	r3, r0
 800142e:	2209      	movs	r2, #9
 8001430:	601a      	str	r2, [r3, #0]
  return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000f4 	.word	0x200000f4

08001444 <_close>:

int _close(int fd) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db04      	blt.n	800145c <_close+0x18>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b02      	cmp	r3, #2
 8001456:	dc01      	bgt.n	800145c <_close+0x18>
    return 0;
 8001458:	2300      	movs	r3, #0
 800145a:	e006      	b.n	800146a <_close+0x26>

  errno = EBADF;
 800145c:	f008 fb46 	bl	8009aec <__errno>
 8001460:	4603      	mov	r3, r0
 8001462:	2209      	movs	r2, #9
 8001464:	601a      	str	r2, [r3, #0]
  return -1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001472:	b580      	push	{r7, lr}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800147e:	f008 fb35 	bl	8009aec <__errno>
 8001482:	4603      	mov	r3, r0
 8001484:	2209      	movs	r2, #9
 8001486:	601a      	str	r2, [r3, #0]
  return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_read>:

int _read(int fd, char* ptr, int len) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d110      	bne.n	80014c8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <_read+0x4c>)
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	2201      	movs	r2, #1
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	f004 ff81 	bl	80063b8 <HAL_UART_Receive>
 80014b6:	4603      	mov	r3, r0
 80014b8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <_read+0x30>
      return 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e008      	b.n	80014d6 <_read+0x42>
    else
      return EIO;
 80014c4:	2305      	movs	r3, #5
 80014c6:	e006      	b.n	80014d6 <_read+0x42>
  }
  errno = EBADF;
 80014c8:	f008 fb10 	bl	8009aec <__errno>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2209      	movs	r2, #9
 80014d0:	601a      	str	r2, [r3, #0]
  return -1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000f4 	.word	0x200000f4

080014e4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db08      	blt.n	8001506 <_fstat+0x22>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	dc05      	bgt.n	8001506 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001500:	605a      	str	r2, [r3, #4]
    return 0;
 8001502:	2300      	movs	r3, #0
 8001504:	e005      	b.n	8001512 <_fstat+0x2e>
  }

  errno = EBADF;
 8001506:	f008 faf1 	bl	8009aec <__errno>
 800150a:	4603      	mov	r3, r0
 800150c:	2209      	movs	r2, #9
 800150e:	601a      	str	r2, [r3, #0]
  return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <_gyro>:
	}
}


void _gyro()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b09e      	sub	sp, #120	; 0x78
 8001520:	af00      	add	r7, sp, #0
	UINT8 ucRetStat;                                      // return status value
	UINT16 wdata;                                    // pre-exponent-scaled data
	double dDataX = 0, dDataY = 0, dDataZ = 0, dDataW = 0; // Data field variables
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double dMult = 1; // Multiplier for data fields : sets them to appropriate order of magnitude
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b7f      	ldr	r3, [pc, #508]	; (8001754 <_gyro+0x238>)
 8001558:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	char _x[15], _y[15], _z[15], _w[15];

	// Enable the Gyrometer
	// To support multi-threaded applications, Read-Modify-Write the VREG:
	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS) // Read data from the Sensor Hub Configuration register
 800155c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001560:	4619      	mov	r1, r3
 8001562:	2000      	movs	r0, #0
 8001564:	f001 fd4c 	bl	8003000 <HOST_SF_LIB_VREG_read>
 8001568:	4603      	mov	r3, r0
 800156a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800156e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001572:	2b00      	cmp	r3, #0
 8001574:	d115      	bne.n	80015a2 <_gyro+0x86>
			{
		if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC,
 8001576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001578:	f043 0320 	orr.w	r3, r3, #32
 800157c:	4619      	mov	r1, r3
 800157e:	2000      	movs	r0, #0
 8001580:	f001 fda8 	bl	80030d4 <HOST_SF_LIB_VREG_write>
 8001584:	4603      	mov	r3, r0
 8001586:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800158a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00e      	beq.n	80015b0 <_gyro+0x94>
				wRMWdata | VREG_SHC_GYRO_EN))) // Enable the Gyrometer (GYRO_EN)
			error_handler("VRWr", VREG_SHC, ucRetStat);  // error display
 8001592:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001596:	461a      	mov	r2, r3
 8001598:	2100      	movs	r1, #0
 800159a:	486f      	ldr	r0, [pc, #444]	; (8001758 <_gyro+0x23c>)
 800159c:	f7ff fdde 	bl	800115c <error_handler>
 80015a0:	e006      	b.n	80015b0 <_gyro+0x94>
	} else
		error_handler("VRRd", VREG_SHC, ucRetStat);       // error display
 80015a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015a6:	461a      	mov	r2, r3
 80015a8:	2100      	movs	r1, #0
 80015aa:	486c      	ldr	r0, [pc, #432]	; (800175c <_gyro+0x240>)
 80015ac:	f7ff fdd6 	bl	800115c <error_handler>

	if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_GYSEN, 0x01))) // Change gyro sensitivity
 80015b0:	2101      	movs	r1, #1
 80015b2:	2003      	movs	r0, #3
 80015b4:	f001 fd8e 	bl	80030d4 <HOST_SF_LIB_VREG_write>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80015be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <_gyro+0xb8>
		error_handler("VRWr", VREG_GYSEN, ucRetStat);     // error display
 80015c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015ca:	461a      	mov	r2, r3
 80015cc:	2103      	movs	r1, #3
 80015ce:	4862      	ldr	r0, [pc, #392]	; (8001758 <_gyro+0x23c>)
 80015d0:	f7ff fdc4 	bl	800115c <error_handler>

	if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_GYDR, 0x64))) // Change gyro data rate
 80015d4:	2164      	movs	r1, #100	; 0x64
 80015d6:	200d      	movs	r0, #13
 80015d8:	f001 fd7c 	bl	80030d4 <HOST_SF_LIB_VREG_write>
 80015dc:	4603      	mov	r3, r0
 80015de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80015e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <_gyro+0xdc>
		error_handler("VRWr", VREG_GYDR, ucRetStat);      // error display
 80015ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015ee:	461a      	mov	r2, r3
 80015f0:	210d      	movs	r1, #13
 80015f2:	4859      	ldr	r0, [pc, #356]	; (8001758 <_gyro+0x23c>)
 80015f4:	f7ff fdb2 	bl	800115c <error_handler>

	dMult = ret_exponent(GYRO_VREG_OFFSET); // Get unit exponent for this sensor's data
 80015f8:	2001      	movs	r0, #1
 80015fa:	f000 fe25 	bl	8002248 <ret_exponent>
 80015fe:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

	// get gyro readings
	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_GYXD, &wdata))) // Read data from the gyrometer datax register
 8001602:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001606:	4619      	mov	r1, r3
 8001608:	201c      	movs	r0, #28
 800160a:	f001 fcf9 	bl	8003000 <HOST_SF_LIB_VREG_read>
 800160e:	4603      	mov	r3, r0
 8001610:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001614:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <_gyro+0x10e>
		error_handler("VRRd", VREG_GYXD, ucRetStat);  // error display
 800161c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001620:	461a      	mov	r2, r3
 8001622:	211c      	movs	r1, #28
 8001624:	484d      	ldr	r0, [pc, #308]	; (800175c <_gyro+0x240>)
 8001626:	f7ff fd99 	bl	800115c <error_handler>

	dDataX = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 800162a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800162c:	b21b      	sxth	r3, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff70 	bl	8000514 <__aeabi_i2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800163c:	f7fe ffd4 	bl	80005e8 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_GYYD, &wdata))) // Read data from the gyrometer datay register
 8001648:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800164c:	4619      	mov	r1, r3
 800164e:	201d      	movs	r0, #29
 8001650:	f001 fcd6 	bl	8003000 <HOST_SF_LIB_VREG_read>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800165a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <_gyro+0x154>
		error_handler("VRRd", VREG_GYYD, ucRetStat);  // error display
 8001662:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001666:	461a      	mov	r2, r3
 8001668:	211d      	movs	r1, #29
 800166a:	483c      	ldr	r0, [pc, #240]	; (800175c <_gyro+0x240>)
 800166c:	f7ff fd76 	bl	800115c <error_handler>

	dDataY = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 8001670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001672:	b21b      	sxth	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff4d 	bl	8000514 <__aeabi_i2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001682:	f7fe ffb1 	bl	80005e8 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_GYZD, &wdata))) // Read data from the gyrometer dataz register
 800168e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001692:	4619      	mov	r1, r3
 8001694:	201e      	movs	r0, #30
 8001696:	f001 fcb3 	bl	8003000 <HOST_SF_LIB_VREG_read>
 800169a:	4603      	mov	r3, r0
 800169c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80016a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <_gyro+0x19a>
		error_handler("VRRd", VREG_GYZD, ucRetStat);  // error display
 80016a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016ac:	461a      	mov	r2, r3
 80016ae:	211e      	movs	r1, #30
 80016b0:	482a      	ldr	r0, [pc, #168]	; (800175c <_gyro+0x240>)
 80016b2:	f7ff fd53 	bl	800115c <error_handler>

	dDataZ = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 80016b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff2a 	bl	8000514 <__aeabi_i2d>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016c8:	f7fe ff8e 	bl	80005e8 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (prev_dat[0] != dDataX || prev_dat[1] != dDataY || prev_dat[2] != dDataZ) // Ensure that this data has not yet been displayed
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <_gyro+0x244>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80016de:	f7ff f9eb 	bl	8000ab8 <__aeabi_dcmpeq>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d013      	beq.n	8001710 <_gyro+0x1f4>
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <_gyro+0x244>)
 80016ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80016f2:	f7ff f9e1 	bl	8000ab8 <__aeabi_dcmpeq>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <_gyro+0x1f4>
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <_gyro+0x244>)
 80016fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001702:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001706:	f7ff f9d7 	bl	8000ab8 <__aeabi_dcmpeq>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10e      	bne.n	800172e <_gyro+0x212>
			{
		prev_dat[0] = dDataX; // Store the current data values for later reference
 8001710:	4913      	ldr	r1, [pc, #76]	; (8001760 <_gyro+0x244>)
 8001712:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001716:	e9c1 2300 	strd	r2, r3, [r1]
		prev_dat[1] = dDataY;
 800171a:	4911      	ldr	r1, [pc, #68]	; (8001760 <_gyro+0x244>)
 800171c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001720:	e9c1 2302 	strd	r2, r3, [r1, #8]
		prev_dat[2] = dDataZ;
 8001724:	490e      	ldr	r1, [pc, #56]	; (8001760 <_gyro+0x244>)
 8001726:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800172a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	} //NOTE: If data does not change in response to movement of sensor, SSC7150 not sending EC_DATA_AVAIL interrupts and 'may' need POR

	printf("%d\r\n", dDataX);
 800172e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <_gyro+0x248>)
 8001734:	f008 fba8 	bl	8009e88 <iprintf>
	printf("%d\r\n", dDataY);
 8001738:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <_gyro+0x248>)
 800173e:	f008 fba3 	bl	8009e88 <iprintf>
	printf("%d\r\n", dDataZ);
 8001742:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <_gyro+0x248>)
 8001748:	f008 fb9e 	bl	8009e88 <iprintf>
					wRMWdata & ~VREG_SHC_GYRO_EN))) // Disable the Gyrometer (clear the GYRO_EN bit)
				error_handler("VRWr", VREG_SHC, ucRetStat); // error display
		} else
			error_handler("VRRd", VREG_SHC, ucRetStat); // error display
			*/
}
 800174c:	bf00      	nop
 800174e:	3778      	adds	r7, #120	; 0x78
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	3ff00000 	.word	0x3ff00000
 8001758:	0800bcc0 	.word	0x0800bcc0
 800175c:	0800bcc8 	.word	0x0800bcc8
 8001760:	200000f8 	.word	0x200000f8
 8001764:	0800bcd0 	.word	0x0800bcd0

08001768 <hid_i2c_descriptor_handler>:
/** hid_i2c_descriptor_handler
 * @note        Retrieve either the descriptor or report tables from the SSC7150 device Note: call GET_HID_DESC 1st
 * @param ucCmd_req command to execute (GET_HID_DESC/GET_RPT_DESC)
 * @return completion_status 0=SUCCESS, 0x10=ID_FAIL, 0x11=HID_DESC_FAIL, 0x12=RPT_DESC_FAIL, 0x14=REP_PARS_FAIL
 */
UINT16 hid_i2c_descriptor_handler(UINT8 ucCmd_req) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b090      	sub	sp, #64	; 0x40
 800176c:	af02      	add	r7, sp, #8
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
	UINT8 ucRet = FALSE;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	UINT8 ucTx_data[BUF_40];           // buffer for general writes to i2c slave

	switch (ucCmd_req) {
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d003      	beq.n	8001786 <hid_i2c_descriptor_handler+0x1e>
 800177e:	2b02      	cmp	r3, #2
 8001780:	f000 8095 	beq.w	80018ae <hid_i2c_descriptor_handler+0x146>
 8001784:	e0ba      	b.n	80018fc <hid_i2c_descriptor_handler+0x194>
	case GET_HID_DESC:             //read the HID Config Descriptor from SSC7150
		ucTx_data[0] = HID_DESC_CMD_LSB; // HID descriptor table request is 0x00 01
 8001786:	2301      	movs	r3, #1
 8001788:	733b      	strb	r3, [r7, #12]
		ucTx_data[1] = HID_DESC_CMD_MSB;
 800178a:	2300      	movs	r3, #0
 800178c:	737b      	strb	r3, [r7, #13]

		ucRet = i2c_cmd_WrRd( WR_RD, //read the HID Config Descriptor from SSC7150
 800178e:	f107 020c 	add.w	r2, r7, #12
 8001792:	2300      	movs	r3, #0
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	231e      	movs	r3, #30
 800179c:	2102      	movs	r1, #2
 800179e:	2003      	movs	r0, #3
 80017a0:	f7ff fcee 	bl	8001180 <i2c_cmd_WrRd>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				DESC_CMD_LEN,                       //num of cmd bytes
				ucTx_data,                          //cmd buf 
				HID_CNFG_LEN,                       //num of bytes to read
				HID_DESC,                           //recv buf
				FALSE); //flag indicating that we specified the number of bytes to read explicitly
		if (ucRet)
 80017aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <hid_i2c_descriptor_handler+0x4e>
			return HID_DESC_FAIL;            //read HID Config Descriptor failed
 80017b2:	2311      	movs	r3, #17
 80017b4:	e0a3      	b.n	80018fe <hid_i2c_descriptor_handler+0x196>

		HID_FIELD.wHIDDescLen = ((HID_DESC[1] << BYTE_SHIFT) | HID_DESC[0]); // As an error check, parse out descriptor table length
 80017b6:	4b54      	ldr	r3, [pc, #336]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 80017b8:	785b      	ldrb	r3, [r3, #1]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 80017be:	7812      	ldrb	r2, [r2, #0]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b51      	ldr	r3, [pc, #324]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 80017c6:	601a      	str	r2, [r3, #0]

		if (HID_FIELD.wHIDDescLen != HID_CNFG_LEN) // If descriptor table length != 30 there is a problem with the transmission
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b1e      	cmp	r3, #30
 80017ce:	d001      	beq.n	80017d4 <hid_i2c_descriptor_handler+0x6c>
			return HID_DESC_FAIL;
 80017d0:	2311      	movs	r3, #17
 80017d2:	e094      	b.n	80018fe <hid_i2c_descriptor_handler+0x196>

		HID_FIELD.wRepDescLen = ((HID_DESC[5] << BYTE_SHIFT) | HID_DESC[4]); // Parse out report descriptor length and store in appropriate variable
 80017d4:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 80017d6:	795b      	ldrb	r3, [r3, #5]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	4a4b      	ldr	r2, [pc, #300]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 80017dc:	7912      	ldrb	r2, [r2, #4]
 80017de:	4313      	orrs	r3, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b4a      	ldr	r3, [pc, #296]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 80017e4:	605a      	str	r2, [r3, #4]

		if (!HID_FIELD.wRepDescLen || HID_FIELD.wRepDescLen == 0xFFFF
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <hid_i2c_descriptor_handler+0x9e>
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d005      	beq.n	8001806 <hid_i2c_descriptor_handler+0x9e>
				|| (HID_FIELD.wRepDescLen > HID_RPT_LEN)) // Check to see if the report descriptor size is valid
 80017fa:	4b44      	ldr	r3, [pc, #272]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <hid_i2c_descriptor_handler+0xa2>
			return HID_DESC_FAIL;
 8001806:	2311      	movs	r3, #17
 8001808:	e079      	b.n	80018fe <hid_i2c_descriptor_handler+0x196>

		HID_FIELD.wRepDescReg = ((HID_DESC[6] << BYTE_SHIFT) | HID_DESC[7]); // Parse out report descriptor register and store in appropriate variable
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 800180c:	799b      	ldrb	r3, [r3, #6]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 8001812:	79d2      	ldrb	r2, [r2, #7]
 8001814:	4313      	orrs	r3, r2
 8001816:	461a      	mov	r2, r3
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 800181a:	609a      	str	r2, [r3, #8]

		HID_FIELD.wCmdReg = ((HID_DESC[17] << BYTE_SHIFT) | HID_DESC[16]); // Parse out command register and store in appropriate variable
 800181c:	4b3a      	ldr	r3, [pc, #232]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 800181e:	7c5b      	ldrb	r3, [r3, #17]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	4a39      	ldr	r2, [pc, #228]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 8001824:	7c12      	ldrb	r2, [r2, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	461a      	mov	r2, r3
 800182a:	4b38      	ldr	r3, [pc, #224]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 800182c:	611a      	str	r2, [r3, #16]

		HID_FIELD.wDatReg = ((HID_DESC[19] << BYTE_SHIFT) | HID_DESC[18]); // Parse out data register and store in appropriate variable
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 8001830:	7cdb      	ldrb	r3, [r3, #19]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	4a34      	ldr	r2, [pc, #208]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 8001836:	7c92      	ldrb	r2, [r2, #18]
 8001838:	4313      	orrs	r3, r2
 800183a:	461a      	mov	r2, r3
 800183c:	4b33      	ldr	r3, [pc, #204]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 800183e:	615a      	str	r2, [r3, #20]

		if (!(HID_FIELD.wVenID = ((HID_DESC[21] << BYTE_SHIFT) | HID_DESC[20]))) // Parse out vendor ID and store in appropriate variable
 8001840:	4b31      	ldr	r3, [pc, #196]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 8001842:	7d5b      	ldrb	r3, [r3, #21]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	4a30      	ldr	r2, [pc, #192]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 8001848:	7d12      	ldrb	r2, [r2, #20]
 800184a:	4313      	orrs	r3, r2
 800184c:	461a      	mov	r2, r3
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 8001850:	619a      	str	r2, [r3, #24]
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <hid_i2c_descriptor_handler+0xf6>
			return ID_FAIL;
 800185a:	2310      	movs	r3, #16
 800185c:	e04f      	b.n	80018fe <hid_i2c_descriptor_handler+0x196>

		if (!(HID_FIELD.wProdID = ((HID_DESC[23] << BYTE_SHIFT) | HID_DESC[22]))) // Parse out product ID and store in appropriate variable
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 8001860:	7ddb      	ldrb	r3, [r3, #23]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	4a28      	ldr	r2, [pc, #160]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 8001866:	7d92      	ldrb	r2, [r2, #22]
 8001868:	4313      	orrs	r3, r2
 800186a:	461a      	mov	r2, r3
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 800186e:	61da      	str	r2, [r3, #28]
 8001870:	4b26      	ldr	r3, [pc, #152]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <hid_i2c_descriptor_handler+0x114>
			return ID_FAIL;
 8001878:	2310      	movs	r3, #16
 800187a:	e040      	b.n	80018fe <hid_i2c_descriptor_handler+0x196>

		HID_FIELD.wVerID = ((HID_DESC[25] << BYTE_SHIFT) | HID_DESC[24]); // Parse out version ID and store in appropriate variable
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 800187e:	7e5b      	ldrb	r3, [r3, #25]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	4a21      	ldr	r2, [pc, #132]	; (8001908 <hid_i2c_descriptor_handler+0x1a0>)
 8001884:	7e12      	ldrb	r2, [r2, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 800188c:	621a      	str	r2, [r3, #32]

		_VREGS.IDs.PID = HID_FIELD.wProdID;    // Update virtual register fields
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <hid_i2c_descriptor_handler+0x1a8>)
 8001894:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
		_VREGS.IDs.VID = HID_FIELD.wVenID;
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <hid_i2c_descriptor_handler+0x1a8>)
 800189e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
		_VREGS.IDs.DID = HID_FIELD.wVerID;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <hid_i2c_descriptor_handler+0x1a8>)
 80018a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

		break;
 80018ac:	e026      	b.n	80018fc <hid_i2c_descriptor_handler+0x194>

	case GET_RPT_DESC:           //read HID Report Descriptor table from SSC7150

		ucTx_data[0] = (HID_FIELD.wRepDescReg >> BYTE_SHIFT); // Report table request is 0x02 00
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	733b      	strb	r3, [r7, #12]
		ucTx_data[1] = HID_FIELD.wRepDescReg;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	737b      	strb	r3, [r7, #13]

		ucRet = i2c_cmd_WrRd(WR_RD, //read the HID Report Descriptor from SSC7150
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <hid_i2c_descriptor_handler+0x1a4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f107 020c 	add.w	r2, r7, #12
 80018c8:	2100      	movs	r1, #0
 80018ca:	9101      	str	r1, [sp, #4]
 80018cc:	4911      	ldr	r1, [pc, #68]	; (8001914 <hid_i2c_descriptor_handler+0x1ac>)
 80018ce:	9100      	str	r1, [sp, #0]
 80018d0:	2102      	movs	r1, #2
 80018d2:	2003      	movs	r0, #3
 80018d4:	f7ff fc54 	bl	8001180 <i2c_cmd_WrRd>
 80018d8:	4603      	mov	r3, r0
 80018da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				DESC_CMD_LEN,                       //num of cmd bytes
				ucTx_data,                          //cmd buf
				HID_FIELD.wRepDescLen,              //num of bytes to read
				RPT_DESC,                           //recv buf
				FALSE); //flag indicating that we specified the number of bytes to read explicitly
		if (ucRet)
 80018de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <hid_i2c_descriptor_handler+0x182>
			return RPT_DESC_FAIL; // Attempt to acquire the report descriptor table from the HID device
 80018e6:	2312      	movs	r3, #18
 80018e8:	e009      	b.n	80018fe <hid_i2c_descriptor_handler+0x196>

		if (report_parse(RPT_DESC)) // Parse the descriptor for sensor information
 80018ea:	480a      	ldr	r0, [pc, #40]	; (8001914 <hid_i2c_descriptor_handler+0x1ac>)
 80018ec:	f000 f9f2 	bl	8001cd4 <report_parse>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <hid_i2c_descriptor_handler+0x192>
			return REP_PARS_FAIL;
 80018f6:	2314      	movs	r3, #20
 80018f8:	e001      	b.n	80018fe <hid_i2c_descriptor_handler+0x196>

		break;
 80018fa:	bf00      	nop
	}

	return SUCCESS;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3738      	adds	r7, #56	; 0x38
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200001e4 	.word	0x200001e4
 800190c:	200001c0 	.word	0x200001c0
 8001910:	2000110c 	.word	0x2000110c
 8001914:	20000204 	.word	0x20000204

08001918 <hid_i2c_cmd_process>:
 * @param ucCmd_req command 
 * @param ucReport_id sensor id 
 * @return completion_status 0=SUCCESS, failcode: 0x16=GET_FEAT_FAIL, 0x17=SET_FEAT_FAIL, 0x18=RESET_FAIL, 0x19=SET_RPT_FAIL, 0x1A=POWER_ON_FAIL, 0x1B=SLEEP_CMD_FAIL, 0x1C=HID_GET_RPT_INPT_FAIL, 0x1D=HID_GET_RPT_FEAT_FAIL 
 */
UINT8 hid_i2c_cmd_process(UINT8 *ucCmdDatbuf, UINT8 ucCmd_req,
		UINT8 ucReport_id) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b092      	sub	sp, #72	; 0x48
 800191c:	af02      	add	r7, sp, #8
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	70fb      	strb	r3, [r7, #3]
 8001924:	4613      	mov	r3, r2
 8001926:	70bb      	strb	r3, [r7, #2]
	UINT8 ucRetStat;
	UINT8 ucTx_data[BUF_40];
	UINT8 ucSensPtr, ucTmpPtr;
	UINT8 ucCmdBufMaxSize = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	UINT16 usTimeout;
	UINT16 *usVREGSptr = (UINT16*) &_VREGS; // Pointer to individual virtual registers; initialized to start of _VREGS struct
 800192e:	4b79      	ldr	r3, [pc, #484]	; (8001b14 <hid_i2c_cmd_process+0x1fc>)
 8001930:	637b      	str	r3, [r7, #52]	; 0x34

	switch (ucCmd_req) {
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	3b01      	subs	r3, #1
 8001936:	2b06      	cmp	r3, #6
 8001938:	f200 81b6 	bhi.w	8001ca8 <hid_i2c_cmd_process+0x390>
 800193c:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <hid_i2c_cmd_process+0x2c>)
 800193e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001942:	bf00      	nop
 8001944:	08001961 	.word	0x08001961
 8001948:	08001a37 	.word	0x08001a37
 800194c:	08001a7b 	.word	0x08001a7b
 8001950:	08001abf 	.word	0x08001abf
 8001954:	08001adb 	.word	0x08001adb
 8001958:	08001ca9 	.word	0x08001ca9
 800195c:	08001c75 	.word	0x08001c75

	case RESET_DEV_CMD:                //HID Reset command                      
		ucTx_data[0] = HID_FIELD.wCmdReg; //command field bytes from HID config table                    
 8001960:	4b6d      	ldr	r3, [pc, #436]	; (8001b18 <hid_i2c_cmd_process+0x200>)
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	723b      	strb	r3, [r7, #8]
		ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);
 8001968:	4b6b      	ldr	r3, [pc, #428]	; (8001b18 <hid_i2c_cmd_process+0x200>)
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	b2db      	uxtb	r3, r3
 8001970:	727b      	strb	r3, [r7, #9]
		ucTx_data[2] = RESET_CMD_LSB; //HID Reset command opcode low byte              
 8001972:	2300      	movs	r3, #0
 8001974:	72bb      	strb	r3, [r7, #10]
		ucTx_data[3] = RESET_CMD_MSB;       //HID Reset command opcode high byte
 8001976:	2301      	movs	r3, #1
 8001978:	72fb      	strb	r3, [r7, #11]

		// send the reset command to SSC7150
		ucRetStat = i2c_cmd_WrRd(WRITE,       //WRITE command packet to SSC7150 
 800197a:	f107 0208 	add.w	r2, r7, #8
 800197e:	2300      	movs	r3, #0
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	2104      	movs	r1, #4
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff fbf8 	bl	8001180 <i2c_cmd_WrRd>
 8001990:	4603      	mov	r3, r0
 8001992:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				ucTx_data,                          //cmd buf 
				0,                           //num of bytes to read             
				ucCmdDatbuf,                        //recv buf
				FALSE); //flag indicating that we specified the number of bytes to read explicitly

		if (ucRetStat != SUCCESS)
 8001996:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <hid_i2c_cmd_process+0x8a>
			return RESET_FAIL;
 800199e:	2318      	movs	r3, #24
 80019a0:	e18c      	b.n	8001cbc <hid_i2c_cmd_process+0x3a4>

		TIMER_10MS_FLG = 0;                       // Prepare timer1 for counting
 80019a2:	4b5e      	ldr	r3, [pc, #376]	; (8001b1c <hid_i2c_cmd_process+0x204>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
		usTimeout = TIMEOUT_5SEC; // 5 sec (as per HID spec) timeout for reset command 
 80019a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38

		osTimerStart(&timeBaseTimerHandle, 10);
 80019ae:	210a      	movs	r1, #10
 80019b0:	485b      	ldr	r0, [pc, #364]	; (8001b20 <hid_i2c_cmd_process+0x208>)
 80019b2:	f005 fb61 	bl	8007078 <osTimerStart>
		while (usTimeout) // wait up to API spec timeout to respond with EC_DATA avail interrupt   
 80019b6:	e00f      	b.n	80019d8 <hid_i2c_cmd_process+0xc0>
		{
			if (EC_DATA_AVAIL)      // EC interrupt asserted (data is available)
 80019b8:	4b5a      	ldr	r3, [pc, #360]	; (8001b24 <hid_i2c_cmd_process+0x20c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10e      	bne.n	80019e0 <hid_i2c_cmd_process+0xc8>
				break;

			if (TIMER_10MS_FLG) {
 80019c2:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <hid_i2c_cmd_process+0x204>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <hid_i2c_cmd_process+0xc0>
				TIMER_10MS_FLG = 0;
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <hid_i2c_cmd_process+0x204>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
				usTimeout = usTimeout - 10;    // 1 msec expired, reduce counter
 80019d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d4:	3b0a      	subs	r3, #10
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
		while (usTimeout) // wait up to API spec timeout to respond with EC_DATA avail interrupt   
 80019d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ec      	bne.n	80019b8 <hid_i2c_cmd_process+0xa0>
 80019de:	e000      	b.n	80019e2 <hid_i2c_cmd_process+0xca>
				break;
 80019e0:	bf00      	nop
			}
		}

		if (!usTimeout)
 80019e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <hid_i2c_cmd_process+0xd4>
			return RESET_FAIL; // timeout occured without device responding with interrupt
 80019e8:	2318      	movs	r3, #24
 80019ea:	e167      	b.n	8001cbc <hid_i2c_cmd_process+0x3a4>

		ucRetStat = i2c_cmd_WrRd(READ, // EC_DATA_AVAIL flag was set indicating SSC7150 has data available to be read in response to the RESET CMD
 80019ec:	f107 0208 	add.w	r2, r7, #8
 80019f0:	2300      	movs	r3, #0
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2302      	movs	r3, #2
 80019fa:	2100      	movs	r1, #0
 80019fc:	2002      	movs	r0, #2
 80019fe:	f7ff fbbf 	bl	8001180 <i2c_cmd_WrRd>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				ucTx_data,                      //cmd buf
				2,                              //num of bytes to read
				ucCmdDatbuf,                    //recv buf 
				FALSE); //flag indicating that we specified the number of bytes to read explicitly

		if (ucRetStat != SUCCESS)
 8001a08:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <hid_i2c_cmd_process+0xfc>
			return RESET_FAIL;
 8001a10:	2318      	movs	r3, #24
 8001a12:	e153      	b.n	8001cbc <hid_i2c_cmd_process+0x3a4>

		if (ucCmdDatbuf[0] != 0 && ucCmdDatbuf[1] != 0) // expect 1st two bytes of data packet from SSC7150 in response to RESET command to be "00 00"
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <hid_i2c_cmd_process+0x112>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <hid_i2c_cmd_process+0x112>
			return RESET_FAIL;                             // invalid data found
 8001a26:	2318      	movs	r3, #24
 8001a28:	e148      	b.n	8001cbc <hid_i2c_cmd_process+0x3a4>

		_VREGS.SHC.reset = VREG_RESET_SUCCESS; // Clear the reset VREG to indicate successful 
 8001a2a:	4a3a      	ldr	r2, [pc, #232]	; (8001b14 <hid_i2c_cmd_process+0x1fc>)
 8001a2c:	7813      	ldrb	r3, [r2, #0]
 8001a2e:	f36f 03c3 	bfc	r3, #3, #1
 8001a32:	7013      	strb	r3, [r2, #0]

		break;
 8001a34:	e141      	b.n	8001cba <hid_i2c_cmd_process+0x3a2>

	case POWER_ON:
		ucTx_data[0] = HID_FIELD.wCmdReg; //command field bytes from HID config table 
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <hid_i2c_cmd_process+0x200>)
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	723b      	strb	r3, [r7, #8]
		ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <hid_i2c_cmd_process+0x200>)
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	727b      	strb	r3, [r7, #9]
		ucTx_data[2] = POWER_CMD_LSB; //HID Power command opcode low  byte for POWER Device ON
 8001a48:	2300      	movs	r3, #0
 8001a4a:	72bb      	strb	r3, [r7, #10]
		ucTx_data[3] = POWER_CMD_MSB;       //HID Power command opcode high byte
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	72fb      	strb	r3, [r7, #11]

		ucRetStat = i2c_cmd_WrRd(WRITE,     // Issue power on command to SSC7150
 8001a50:	f107 0208 	add.w	r2, r7, #8
 8001a54:	2300      	movs	r3, #0
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2104      	movs	r1, #4
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff fb8d 	bl	8001180 <i2c_cmd_WrRd>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				ucTx_data,                          //cmd buf
				0,                                  //num of bytes to read
				ucCmdDatbuf,                        //recv buf
				FALSE); //flag indicating that we specified the number of bytes to read explicitly

		if (ucRetStat != SUCCESS)
 8001a6c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 811b 	beq.w	8001cac <hid_i2c_cmd_process+0x394>
			return POWER_ON_FAIL;                              // command failed
 8001a76:	231a      	movs	r3, #26
 8001a78:	e120      	b.n	8001cbc <hid_i2c_cmd_process+0x3a4>

		break;

	case SLEEP:

		ucTx_data[0] = HID_FIELD.wCmdReg; //command field bytes from HID config table
 8001a7a:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <hid_i2c_cmd_process+0x200>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	723b      	strb	r3, [r7, #8]
		ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);
 8001a82:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <hid_i2c_cmd_process+0x200>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	727b      	strb	r3, [r7, #9]
		ucTx_data[2] = SLEEP_ON_LSB; //HID Power command opcode low byte for Device SLEEP
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	72bb      	strb	r3, [r7, #10]
		ucTx_data[3] = POWER_CMD_MSB;       //HID Power command opcode high byte
 8001a90:	2308      	movs	r3, #8
 8001a92:	72fb      	strb	r3, [r7, #11]

		ucRetStat = i2c_cmd_WrRd(WRITE,        // Issue sleep command to SSC7150
 8001a94:	f107 0208 	add.w	r2, r7, #8
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7ff fb6b 	bl	8001180 <i2c_cmd_WrRd>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				ucTx_data,                          //cmd buf 
				0,                                  //num of bytes to read
				ucCmdDatbuf,                        //recv buf
				FALSE); //flag indicating that we specified the number of bytes to read explicitly

		if (ucRetStat != SUCCESS)
 8001ab0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80fb 	beq.w	8001cb0 <hid_i2c_cmd_process+0x398>
			return SLEEP_CMD_FAIL;                    // command failed         
 8001aba:	231b      	movs	r3, #27
 8001abc:	e0fe      	b.n	8001cbc <hid_i2c_cmd_process+0x3a4>

		break;

	case HID_GET_RPT_INPT:

		ucCmdDatbuf[0] = ucReport_id; //the HOST_SF_LIB_HID_Get_Report expects the sensor id in byte[0] of passed buffer
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	78ba      	ldrb	r2, [r7, #2]
 8001ac2:	701a      	strb	r2, [r3, #0]

		if (HOST_SF_LIB_HID_Get_Report(GET_RRT_INPT, ucCmdDatbuf, 0))
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	2010      	movs	r0, #16
 8001aca:	f000 fca7 	bl	800241c <HOST_SF_LIB_HID_Get_Report>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80ef 	beq.w	8001cb4 <hid_i2c_cmd_process+0x39c>
			return HID_GET_RPT_FEAT_FAIL;                      // command failed
 8001ad6:	231d      	movs	r3, #29
 8001ad8:	e0f0      	b.n	8001cbc <hid_i2c_cmd_process+0x3a4>

		break;

	case HID_GET_RPT_FEAT:

		ucCmdDatbuf[0] = ucReport_id; //the HOST_SF_LIB_HID_Get_Report expects the sensor id in byte[0] of passed buffer
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	78ba      	ldrb	r2, [r7, #2]
 8001ade:	701a      	strb	r2, [r3, #0]

		if (HOST_SF_LIB_HID_Get_Report(GET_RPT_FEAT, ucCmdDatbuf, 0))
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	2030      	movs	r0, #48	; 0x30
 8001ae6:	f000 fc99 	bl	800241c <HOST_SF_LIB_HID_Get_Report>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <hid_i2c_cmd_process+0x1dc>
			return HID_GET_RPT_FEAT_FAIL;                      // command failed
 8001af0:	231d      	movs	r3, #29
 8001af2:	e0e3      	b.n	8001cbc <hid_i2c_cmd_process+0x3a4>

		if ((ucCmdDatbuf[2] == 0) || (ucCmdDatbuf[2] > NUM_SENS)) // check for valid ID range in feature report
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3302      	adds	r3, #2
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <hid_i2c_cmd_process+0x1f0>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3302      	adds	r3, #2
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d901      	bls.n	8001b0c <hid_i2c_cmd_process+0x1f4>
			return HID_GET_RPT_FEAT_FAIL;                    // invalid reportID
 8001b08:	231d      	movs	r3, #29
 8001b0a:	e0d7      	b.n	8001cbc <hid_i2c_cmd_process+0x3a4>

		//now parse the parameters in returned report feature based on offsets derived earlier from parsing the HID Report Descriptor
		for (ucSensPtr = 0; ucSensPtr < NUM_SENS; ucSensPtr++) // traverse through the sensor list looking for matching sesnor id
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001b12:	e0a7      	b.n	8001c64 <hid_i2c_cmd_process+0x34c>
 8001b14:	2000110c 	.word	0x2000110c
 8001b18:	200001c0 	.word	0x200001c0
 8001b1c:	200000f0 	.word	0x200000f0
 8001b20:	20000098 	.word	0x20000098
 8001b24:	200000f1 	.word	0x200000f1
				{
			if (SENSOR[ucSensPtr].id == ucReport_id) {
 8001b28:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001b2c:	4965      	ldr	r1, [pc, #404]	; (8001cc4 <hid_i2c_cmd_process+0x3ac>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	78ba      	ldrb	r2, [r7, #2]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	f040 808d 	bne.w	8001c5a <hid_i2c_cmd_process+0x342>
				usVREGSptr = &_VREGS.sensitivity.ACSEN + ucSensPtr; // Set pointer to appropriate sensitivity register (as offset from accelerometer sensitivity VREG02)
 8001b40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4a60      	ldr	r2, [pc, #384]	; (8001cc8 <hid_i2c_cmd_process+0x3b0>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34

				//retrieve offset pointer to sensitivty parameters for this sensor device (from the Report Descriptor table). Add offset to initial pointer for the actual desired "ACSEN" data within the feature report packet and store this value in VREG register 
				*usVREGSptr = ((ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset
 8001b4c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001b50:	495c      	ldr	r1, [pc, #368]	; (8001cc4 <hid_i2c_cmd_process+0x3ac>)
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	3303      	adds	r3, #3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	3307      	adds	r3, #7
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
						+ GF_SENS_OFFSET_MSB] << BYTE_SHIFT)
 8001b66:	0219      	lsls	r1, r3, #8
						| ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset
 8001b68:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001b6c:	4855      	ldr	r0, [pc, #340]	; (8001cc4 <hid_i2c_cmd_process+0x3ac>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	1a9b      	subs	r3, r3, r2
 8001b74:	4403      	add	r3, r0
 8001b76:	3303      	adds	r3, #3
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	3306      	adds	r3, #6
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	430b      	orrs	r3, r1
 8001b84:	461a      	mov	r2, r3
				*usVREGSptr = ((ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset
 8001b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b88:	601a      	str	r2, [r3, #0]
								+ GF_SENS_OFFSET_LSB]); // Use info about offsets to set _VREGS to appropriate data

				usVREGSptr = &_VREGS.data_rt.ACDXR + ucSensPtr; // Set pointer to appropriate data rate register
 8001b8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4a4e      	ldr	r2, [pc, #312]	; (8001ccc <hid_i2c_cmd_process+0x3b4>)
 8001b92:	4413      	add	r3, r2
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34

				*usVREGSptr = ((ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset
 8001b96:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001b9a:	494a      	ldr	r1, [pc, #296]	; (8001cc4 <hid_i2c_cmd_process+0x3ac>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
						+ GF_DATR_OFFSET_MSB] << BYTE_SHIFT)
 8001bb0:	0219      	lsls	r1, r3, #8
						| ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset
 8001bb2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001bb6:	4843      	ldr	r0, [pc, #268]	; (8001cc4 <hid_i2c_cmd_process+0x3ac>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	4403      	add	r3, r0
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	3303      	adds	r3, #3
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	461a      	mov	r2, r3
				*usVREGSptr = ((ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset
 8001bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd2:	601a      	str	r2, [r3, #0]
								+ GF_DATR_OFFSET_LSB]); //point to appropriate data fields within the feature report and store in VREG reg

				usVREGSptr = (UINT16*) &(_VREGS.expo.exp1); //point to appropriate data fields within the feature report and store in VREG reg  NOTE: each exponent VREG holds 4 devices' 4bit exponent value fields
 8001bd4:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <hid_i2c_cmd_process+0x3b8>)
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
				if (ucSensPtr > 3) // sensor indexes from 4 to 7 = sensors that have unit exponents in the 2nd exponent register (VREG37)
 8001bd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d902      	bls.n	8001be6 <hid_i2c_cmd_process+0x2ce>
					usVREGSptr++; // Increment ptr to VREG exponent register to be searched
 8001be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be2:	3304      	adds	r3, #4
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34

				if (ucSensPtr > 7) // sensor indexes > 7 = sensors that have unit exponents in the 3rd exponent register (VREG38)
 8001be6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bea:	2b07      	cmp	r3, #7
 8001bec:	d902      	bls.n	8001bf4 <hid_i2c_cmd_process+0x2dc>
					usVREGSptr++; // Increment ptr to VREG exponent register to be searched
 8001bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34

				ucTmpPtr = ucSensPtr % 4; // Find the appropriate offset for this sensor's unit exponent
 8001bf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

				*usVREGSptr &= ~(0xF << (4 * ucTmpPtr)); // Clear unit exponent data   
 8001c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001c08:	0092      	lsls	r2, r2, #2
 8001c0a:	210f      	movs	r1, #15
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	43d2      	mvns	r2, r2
 8001c12:	401a      	ands	r2, r3
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	601a      	str	r2, [r3, #0]

				if (SENSOR[ucSensPtr].DatExp) {
 8001c18:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001c1c:	4929      	ldr	r1, [pc, #164]	; (8001cc4 <hid_i2c_cmd_process+0x3ac>)
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	3306      	adds	r3, #6
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d020      	beq.n	8001c70 <hid_i2c_cmd_process+0x358>
					*usVREGSptr |= (SENSOR[ucSensPtr].DatExp << (4 * ucTmpPtr)); // Set the unit exponent data to the appropriate VREG  
 8001c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001c36:	4823      	ldr	r0, [pc, #140]	; (8001cc4 <hid_i2c_cmd_process+0x3ac>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	4403      	add	r3, r0
 8001c40:	3306      	adds	r3, #6
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	ea41 0203 	orr.w	r2, r1, r3
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	601a      	str	r2, [r3, #0]
				}

				break;
 8001c58:	e00a      	b.n	8001c70 <hid_i2c_cmd_process+0x358>
		for (ucSensPtr = 0; ucSensPtr < NUM_SENS; ucSensPtr++) // traverse through the sensor list looking for matching sesnor id
 8001c5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c68:	2b0b      	cmp	r3, #11
 8001c6a:	f67f af5d 	bls.w	8001b28 <hid_i2c_cmd_process+0x210>
			}
		}

		break;
 8001c6e:	e024      	b.n	8001cba <hid_i2c_cmd_process+0x3a2>
				break;
 8001c70:	bf00      	nop
		break;
 8001c72:	e022      	b.n	8001cba <hid_i2c_cmd_process+0x3a2>

	case HID_SET_RPT_FEAT:
		//for non-Vendor commands, the sensor id is NOT passed in byte[0] to 'HOST_SF_LIB_HID_Set_Report'
		ucCmdBufMaxSize = ucCmdDatbuf[RPT_SIZE_LSB]; //get size of GetReportFeature Packet
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if ((ucCmdBufMaxSize == 0) || (ucCmdBufMaxSize == 0xFF)) //is the size reasonable?
 8001c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <hid_i2c_cmd_process+0x374>
 8001c84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c88:	2bff      	cmp	r3, #255	; 0xff
 8001c8a:	d101      	bne.n	8001c90 <hid_i2c_cmd_process+0x378>
			return SET_FEAT_FAIL;
 8001c8c:	2317      	movs	r3, #23
 8001c8e:	e015      	b.n	8001cbc <hid_i2c_cmd_process+0x3a4>

		if (HOST_SF_LIB_HID_Set_Report(SET_RPT_FEAT, ucCmdDatbuf,
 8001c90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c94:	461a      	mov	r2, r3
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	2030      	movs	r0, #48	; 0x30
 8001c9a:	f000 fb3f 	bl	800231c <HOST_SF_LIB_HID_Set_Report>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <hid_i2c_cmd_process+0x3a0>
				ucCmdBufMaxSize))
			return SET_FEAT_FAIL;                              // command failed
 8001ca4:	2317      	movs	r3, #23
 8001ca6:	e009      	b.n	8001cbc <hid_i2c_cmd_process+0x3a4>

		break;

	default:
		break;
 8001ca8:	bf00      	nop
 8001caa:	e006      	b.n	8001cba <hid_i2c_cmd_process+0x3a2>
		break;
 8001cac:	bf00      	nop
 8001cae:	e004      	b.n	8001cba <hid_i2c_cmd_process+0x3a2>
		break;
 8001cb0:	bf00      	nop
 8001cb2:	e002      	b.n	8001cba <hid_i2c_cmd_process+0x3a2>
		break;
 8001cb4:	bf00      	nop
 8001cb6:	e000      	b.n	8001cba <hid_i2c_cmd_process+0x3a2>
		break;
 8001cb8:	bf00      	nop
	}

	return SUCCESS;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3740      	adds	r7, #64	; 0x40
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000118 	.word	0x20000118
 8001cc8:	20001114 	.word	0x20001114
 8001ccc:	2000113c 	.word	0x2000113c
 8001cd0:	200011f0 	.word	0x200011f0

08001cd4 <report_parse>:
/** report_parse
 * @note        Parse data retrieved from SSC7150 HID Report Descriptor, calls and populate required local structs
 * @param *ucBuf Buffer holding the report descriptor table
 * @return completion_status 0=SUCCESS, failcodes: 0x14=REP_PARS_FAIL, 0x15=NO_EOC_FAIL 
 */
UINT8 report_parse(UINT8 *ucBuf) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	UINT8 *ucBptr = ucBuf;                        // HID Descriptor byte pointer
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	617b      	str	r3, [r7, #20]
	UINT8 *ucStrt = ucBptr; // Pointer to hold start address for later reference
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	60fb      	str	r3, [r7, #12]
	UINT8 ucSensptr = 0;     // sensor number variable for struct array traverse
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	74fb      	strb	r3, [r7, #19]
	UINT8 ucUsageOffset; // offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data
	BOOL bFlag = FALSE; // Flag variable to notify that desired fields have been reached
 8001ce8:	2300      	movs	r3, #0
 8001cea:	747b      	strb	r3, [r7, #17]

	memset(TEMP_SF, 0xFF, sizeof(TEMP_SF)); // Set all of the structs in the TEMP array to 0xFF so we can know if a sensor wasn't found in the report
 8001cec:	2254      	movs	r2, #84	; 0x54
 8001cee:	21ff      	movs	r1, #255	; 0xff
 8001cf0:	489a      	ldr	r0, [pc, #616]	; (8001f5c <report_parse+0x288>)
 8001cf2:	f008 f82c 	bl	8009d4e <memset>

	while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Continue looping until end of report
 8001cf6:	e196      	b.n	8002026 <report_parse+0x352>
	{
		if (*ucBptr == HID_COLLECTION) // Look for HID_COLLECTION(Physical) which should be start of REPORT ID (sensor device) info in report descriptor table  
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2ba1      	cmp	r3, #161	; 0xa1
 8001cfe:	d12e      	bne.n	8001d5e <report_parse+0x8a>
		{
			ucBptr++;          // Increment the pointer to look at the next byte
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	3301      	adds	r3, #1
 8001d04:	617b      	str	r3, [r7, #20]

			if (*(ucBptr++) == HID_PHYSICAL && *(ucBptr++) == HID_REPORT_ID) // Check if the next two bytes meet the next required identifier needs   
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	617a      	str	r2, [r7, #20]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d125      	bne.n	8001d5e <report_parse+0x8a>
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	617a      	str	r2, [r7, #20]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b85      	cmp	r3, #133	; 0x85
 8001d1c:	d11f      	bne.n	8001d5e <report_parse+0x8a>
			{
				ucUsageOffset = 0; // clear offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data                                    
 8001d1e:	2300      	movs	r3, #0
 8001d20:	74bb      	strb	r3, [r7, #18]
				TEMP_SF[ucSensptr].id = *ucBptr; // Store first sensor device ID number in out temp struct
 8001d22:	7cfa      	ldrb	r2, [r7, #19]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	7818      	ldrb	r0, [r3, #0]
 8001d28:	498c      	ldr	r1, [pc, #560]	; (8001f5c <report_parse+0x288>)
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	4602      	mov	r2, r0
 8001d34:	701a      	strb	r2, [r3, #0]

				while (*(ucBptr++) != HID_USAGE_SENSOR_TYPE)
 8001d36:	bf00      	nop
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	617a      	str	r2, [r7, #20]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	d1f9      	bne.n	8001d38 <report_parse+0x64>
					; // Parse until sensor type indicator found  (in HID table: HID_USAGE_SENSOR_TYPE_MOTION_ACCELEROMETER_3D)

				TEMP_SF[ucSensptr].type = *ucBptr; // Store sensor type in struct      
 8001d44:	7cfa      	ldrb	r2, [r7, #19]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	7818      	ldrb	r0, [r3, #0]
 8001d4a:	4984      	ldr	r1, [pc, #528]	; (8001f5c <report_parse+0x288>)
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	3301      	adds	r3, #1
 8001d56:	4602      	mov	r2, r0
 8001d58:	701a      	strb	r2, [r3, #0]
				bFlag = TRUE; // Set the flag to show we are in a field of data that we desire
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	747b      	strb	r3, [r7, #17]
			}
		}

		if (*ucBptr == HID_END_COLLECTION) // Look for end of this sensor's collection 
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2bc0      	cmp	r3, #192	; 0xc0
 8001d64:	d12f      	bne.n	8001dc6 <report_parse+0xf2>
		{
			ucBptr++;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]

			if (*ucBptr == HID_END_COLLECTION)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2bc0      	cmp	r3, #192	; 0xc0
 8001d72:	f000 8162 	beq.w	800203a <report_parse+0x366>
				break;                         // end of the report has occurred

			else if (*(ucBptr++) == HID_REPORT_ID) // Next report ID has been found
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	617a      	str	r2, [r7, #20]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b85      	cmp	r3, #133	; 0x85
 8001d80:	d121      	bne.n	8001dc6 <report_parse+0xf2>
			{
				ucUsageOffset = 0; // clear offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data
 8001d82:	2300      	movs	r3, #0
 8001d84:	74bb      	strb	r3, [r7, #18]
				TEMP_SF[ucSensptr].id = *ucBptr; // Store location of sensor ID within the HID Report in struct
 8001d86:	7cfa      	ldrb	r2, [r7, #19]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	7818      	ldrb	r0, [r3, #0]
 8001d8c:	4973      	ldr	r1, [pc, #460]	; (8001f5c <report_parse+0x288>)
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	4602      	mov	r2, r0
 8001d98:	701a      	strb	r2, [r3, #0]

				while (*(ucBptr++) != HID_USAGE_SENSOR_TYPE)
 8001d9a:	bf00      	nop
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	617a      	str	r2, [r7, #20]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b09      	cmp	r3, #9
 8001da6:	d1f9      	bne.n	8001d9c <report_parse+0xc8>
					; // Look for sensor type identifier (ie HID_USAGE_SENSOR_TYPE_MOTION_ACCELEROMETER_3D)

				TEMP_SF[ucSensptr].type = *(ucBptr++); // Store location of sensor type within the HID Report in struct   
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	617a      	str	r2, [r7, #20]
 8001dae:	7cfa      	ldrb	r2, [r7, #19]
 8001db0:	7818      	ldrb	r0, [r3, #0]
 8001db2:	496a      	ldr	r1, [pc, #424]	; (8001f5c <report_parse+0x288>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	701a      	strb	r2, [r3, #0]
				bFlag = TRUE; // Set the flag to show we are in a field of data that we desire
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	747b      	strb	r3, [r7, #17]
			}
		}

		if (bFlag) // Check if we should proceed parsing within the HID_USAGE_SENSOR_Properties or simply continue incrementing until a new ID is found
 8001dc6:	7c7b      	ldrb	r3, [r7, #17]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 8129 	beq.w	8002020 <report_parse+0x34c>
		{
			while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Search for relevant features HID_USAGE_SENSOR_Properties
 8001dce:	e0b8      	b.n	8001f42 <report_parse+0x26e>
			{
				if (*ucBptr == HID_USAGE_SENSOR_PROPERTY) {
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b0a      	cmp	r3, #10
 8001dd6:	f040 80b1 	bne.w	8001f3c <report_parse+0x268>
					ucBptr++;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
					if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_CONN_TYPE) // Seach for sensor connection type and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	d10b      	bne.n	8001e00 <report_parse+0x12c>
					{
						ucBptr++;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == 0x03) // last parameter of HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE (0x0A,0x09,0x03) 
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	617a      	str	r2, [r7, #20]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d102      	bne.n	8001e00 <report_parse+0x12c>
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001dfa:	7cbb      	ldrb	r3, [r7, #18]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	74bb      	strb	r3, [r7, #18]
					}

					if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_RPT_STATE) // Search for reporting state and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b16      	cmp	r3, #22
 8001e06:	d10b      	bne.n	8001e20 <report_parse+0x14c>
					{
						ucBptr++;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == 0x03) // last parameter of HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL (0x0A,0x0E,0x03) 
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	617a      	str	r2, [r7, #20]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d102      	bne.n	8001e20 <report_parse+0x14c>
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001e1a:	7cbb      	ldrb	r3, [r7, #18]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	74bb      	strb	r3, [r7, #18]
					}

					if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_PWR_STATE) // Search for power state and increment offset variable because this field is undesired  (in HID table : HID_USAGE_SENSOR_PROPERTY_POWER_STATE)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b19      	cmp	r3, #25
 8001e26:	d10b      	bne.n	8001e40 <report_parse+0x16c>
					{
						ucBptr++;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == 0x03) // last parameter of HID_USAGE_SENSOR_PROPERTY_POWER_STATE (0x0A,0x19,0x03) 
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	617a      	str	r2, [r7, #20]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d102      	bne.n	8001e40 <report_parse+0x16c>
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001e3a:	7cbb      	ldrb	r3, [r7, #18]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	74bb      	strb	r3, [r7, #18]
					}

					if (*ucBptr == HID_USAGE_SENSOR_STATE_1) // Search for sensor state and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_STATE)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10b      	bne.n	8001e60 <report_parse+0x18c>
					{
						ucBptr++;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == 0x02) // last parameter of HID_USAGE_SENSOR_STATE (0x0A,0x01,0x02) 
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	617a      	str	r2, [r7, #20]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d102      	bne.n	8001e60 <report_parse+0x18c>
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001e5a:	7cbb      	ldrb	r3, [r7, #18]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	74bb      	strb	r3, [r7, #18]
					}

					if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_RPT_INT) // Search for reporting interval. We desire this value so store it in our struct and then increment the offset  (in HID table:HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b0e      	cmp	r3, #14
 8001e66:	d113      	bne.n	8001e90 <report_parse+0x1bc>
					{
						ucBptr++;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == 0x03) // last parameter of HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL (0x0A,0x0E,0x03)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	617a      	str	r2, [r7, #20]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d10a      	bne.n	8001e90 <report_parse+0x1bc>
							TEMP_SF[ucSensptr].DatRtOffset = ucUsageOffset++; //save & increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001e7a:	7cba      	ldrb	r2, [r7, #18]
 8001e7c:	1c53      	adds	r3, r2, #1
 8001e7e:	74bb      	strb	r3, [r7, #18]
 8001e80:	7cf9      	ldrb	r1, [r7, #19]
 8001e82:	4836      	ldr	r0, [pc, #216]	; (8001f5c <report_parse+0x288>)
 8001e84:	460b      	mov	r3, r1
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	1a5b      	subs	r3, r3, r1
 8001e8a:	4403      	add	r3, r0
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	701a      	strb	r2, [r3, #0]
					}

					ucBptr++;                           //increment position ptr
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]

					// NOTE: There is a different identifier for RAW data and that is why two identifiers are checked for here
					if ((*ucBptr == HID_USAGE_SENSOR_DATA_ACCU)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b44      	cmp	r3, #68	; 0x44
 8001e9c:	d003      	beq.n	8001ea6 <report_parse+0x1d2>
							|| (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_ACCU)) // Search for sensor accuracy & increment offset variable because this field is undesired (in HID table:HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_ACCURACY))
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b45      	cmp	r3, #69	; 0x45
 8001ea4:	d102      	bne.n	8001eac <report_parse+0x1d8>
						ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001ea6:	7cbb      	ldrb	r3, [r7, #18]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	74bb      	strb	r3, [r7, #18]

					if ((*ucBptr == HID_USAGE_SENSOR_DATA_RES)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b54      	cmp	r3, #84	; 0x54
 8001eb2:	d003      	beq.n	8001ebc <report_parse+0x1e8>
							|| (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_RES)) // Search for sensor resolution and increment offset variable because this field is undesired (in HID table: HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_RESOLUTION))
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b55      	cmp	r3, #85	; 0x55
 8001eba:	d102      	bne.n	8001ec2 <report_parse+0x1ee>
						ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001ebc:	7cbb      	ldrb	r3, [r7, #18]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	74bb      	strb	r3, [r7, #18]

					if ((*ucBptr == HID_USAGE_SENSOR_DATA_MOD_SENS)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b14      	cmp	r3, #20
 8001ec8:	d003      	beq.n	8001ed2 <report_parse+0x1fe>
							|| (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_SENS)) // Search for sensor sensitivity (HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_CHANGE_SENSITIVITY_ABS))
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b15      	cmp	r3, #21
 8001ed0:	d11d      	bne.n	8001f0e <report_parse+0x23a>
							{
						TEMP_SF[ucSensptr].SensOffset = ucUsageOffset++; //save & increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)                         
 8001ed2:	7cba      	ldrb	r2, [r7, #18]
 8001ed4:	1c53      	adds	r3, r2, #1
 8001ed6:	74bb      	strb	r3, [r7, #18]
 8001ed8:	7cf9      	ldrb	r1, [r7, #19]
 8001eda:	4820      	ldr	r0, [pc, #128]	; (8001f5c <report_parse+0x288>)
 8001edc:	460b      	mov	r3, r1
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	1a5b      	subs	r3, r3, r1
 8001ee2:	4403      	add	r3, r0
 8001ee4:	3303      	adds	r3, #3
 8001ee6:	701a      	strb	r2, [r3, #0]

						while (*(ucBptr++) != HID_UNIT_EXP)
 8001ee8:	bf00      	nop
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	617a      	str	r2, [r7, #20]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b55      	cmp	r3, #85	; 0x55
 8001ef4:	d1f9      	bne.n	8001eea <report_parse+0x216>
							; // Increment until exponent value of the data is found

						TEMP_SF[ucSensptr].SensExp = *ucBptr; // Store this value in the temp struct
 8001ef6:	7cfa      	ldrb	r2, [r7, #19]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	7818      	ldrb	r0, [r3, #0]
 8001efc:	4917      	ldr	r1, [pc, #92]	; (8001f5c <report_parse+0x288>)
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	3304      	adds	r3, #4
 8001f08:	4602      	mov	r2, r0
 8001f0a:	701a      	strb	r2, [r3, #0]
						break;
 8001f0c:	e022      	b.n	8001f54 <report_parse+0x280>
					}

					if ((*ucBptr == HID_USAGE_SENSOR_DATA_MOD_MAX)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b24      	cmp	r3, #36	; 0x24
 8001f14:	d003      	beq.n	8001f1e <report_parse+0x24a>
							|| (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_MAX)) // Search for sensor MAX val and increment offset variable because this field is undesired HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_MAX)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b25      	cmp	r3, #37	; 0x25
 8001f1c:	d102      	bne.n	8001f24 <report_parse+0x250>
						ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001f1e:	7cbb      	ldrb	r3, [r7, #18]
 8001f20:	3301      	adds	r3, #1
 8001f22:	74bb      	strb	r3, [r7, #18]

					if ((*ucBptr == HID_USAGE_SENSOR_DATA_MOD_MIN)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b34      	cmp	r3, #52	; 0x34
 8001f2a:	d003      	beq.n	8001f34 <report_parse+0x260>
							|| (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_MIN)) // Search for sensor MIN val and increment offset variable because this field is undesired HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_MIN)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b35      	cmp	r3, #53	; 0x35
 8001f32:	d106      	bne.n	8001f42 <report_parse+0x26e>
						ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001f34:	7cbb      	ldrb	r3, [r7, #18]
 8001f36:	3301      	adds	r3, #1
 8001f38:	74bb      	strb	r3, [r7, #18]
 8001f3a:	e002      	b.n	8001f42 <report_parse+0x26e>
				}

				else
					ucBptr++; // If a new identifier has not yet been reached, continue traversing report descriptor 
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
			while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Search for relevant features HID_USAGE_SENSOR_Properties
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <report_parse+0x28c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	f67f af3e 	bls.w	8001dd0 <report_parse+0xfc>
			}

			ucUsageOffset = 0; //reset HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001f54:	2300      	movs	r3, #0
 8001f56:	74bb      	strb	r3, [r7, #18]

			while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Search for relevant input features
 8001f58:	e054      	b.n	8002004 <report_parse+0x330>
 8001f5a:	bf00      	nop
 8001f5c:	2000016c 	.word	0x2000016c
 8001f60:	200001c0 	.word	0x200001c0
			{
				if (*ucBptr == HID_USAGE_SENSOR_) {
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b0a      	cmp	r3, #10
 8001f6a:	d148      	bne.n	8001ffe <report_parse+0x32a>
					ucBptr++;                           // Continue to next byte
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]

					if (*ucBptr == HID_USAGE_SENSOR_STATE_1) {
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d10b      	bne.n	8001f92 <report_parse+0x2be>
						ucBptr++;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == HID_USAGE_SENSOR_STATE_2) // Search for HID usage sensor state and increment offset variable because this field is undesired
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	617a      	str	r2, [r7, #20]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d102      	bne.n	8001f92 <report_parse+0x2be>
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001f8c:	7cbb      	ldrb	r3, [r7, #18]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	74bb      	strb	r3, [r7, #18]
					}

					if (*ucBptr == HID_USAGE_SENSOR_EVENT_1) {
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d134      	bne.n	8002004 <report_parse+0x330>
						ucBptr++;                       // Continue to next byte
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == HID_USAGE_SENSOR_EVENT_2) // Search for HID usage sensor event and increment the offset variable
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	617a      	str	r2, [r7, #20]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d12b      	bne.n	8002004 <report_parse+0x330>
						{
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8001fac:	7cbb      	ldrb	r3, [r7, #18]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	74bb      	strb	r3, [r7, #18]
							while (*(ucBptr++) != HID_END_COLLECTION)
 8001fb2:	bf00      	nop
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	617a      	str	r2, [r7, #20]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2bc0      	cmp	r3, #192	; 0xc0
 8001fbe:	d1f9      	bne.n	8001fb4 <report_parse+0x2e0>
								; // end of the sensor event field signifies the start of desired input data

							TEMP_SF[ucSensptr].DatOffset = ucUsageOffset + 3; //save HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data) NOTE: offset an additional 3 for extra data received on GPIO interrupt
 8001fc0:	7cfa      	ldrb	r2, [r7, #19]
 8001fc2:	7cbb      	ldrb	r3, [r7, #18]
 8001fc4:	3303      	adds	r3, #3
 8001fc6:	b2d8      	uxtb	r0, r3
 8001fc8:	4999      	ldr	r1, [pc, #612]	; (8002230 <report_parse+0x55c>)
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3305      	adds	r3, #5
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	701a      	strb	r2, [r3, #0]

							while (*(ucBptr++) != HID_UNIT_EXP)
 8001fd8:	bf00      	nop
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	617a      	str	r2, [r7, #20]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b55      	cmp	r3, #85	; 0x55
 8001fe4:	d1f9      	bne.n	8001fda <report_parse+0x306>
								; // Search for, and store, the unit exponent value for the input data

							TEMP_SF[ucSensptr].DatExp = *ucBptr;
 8001fe6:	7cfa      	ldrb	r2, [r7, #19]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	7818      	ldrb	r0, [r3, #0]
 8001fec:	4990      	ldr	r1, [pc, #576]	; (8002230 <report_parse+0x55c>)
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3306      	adds	r3, #6
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	701a      	strb	r2, [r3, #0]

							break;
 8001ffc:	e00a      	b.n	8002014 <report_parse+0x340>
						}
					}
				} else
					ucBptr++; // If desired identifiers haven't been reached, continue traversing HID Report Descriptor
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3301      	adds	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
			while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Search for relevant input features
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	461a      	mov	r2, r3
 800200c:	4b89      	ldr	r3, [pc, #548]	; (8002234 <report_parse+0x560>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	d9a7      	bls.n	8001f64 <report_parse+0x290>
			}

			bFlag = FALSE; // Reset the flag to 0 to show that we are done with descriptor data from this report ID
 8002014:	2300      	movs	r3, #0
 8002016:	747b      	strb	r3, [r7, #17]
			ucSensptr++; // Increment to the next sensor in the struct array of sensors
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	3301      	adds	r3, #1
 800201c:	74fb      	strb	r3, [r7, #19]
 800201e:	e002      	b.n	8002026 <report_parse+0x352>
		}

		else
			ucBptr++; // If desired identifiers haven't been reached, continue traversing HID Report Descriptor
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
	while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Continue looping until end of report
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	461a      	mov	r2, r3
 800202e:	4b81      	ldr	r3, [pc, #516]	; (8002234 <report_parse+0x560>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	f67f ae60 	bls.w	8001cf8 <report_parse+0x24>
 8002038:	e000      	b.n	800203c <report_parse+0x368>
				break;                         // end of the report has occurred
 800203a:	bf00      	nop
	}

	if ((ucBptr - ucStrt) > (HID_FIELD.wRepDescLen + 1)) // Sanity check to ensure the loop exited at the end of the report descriptor
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	461a      	mov	r2, r3
 8002044:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <report_parse+0x560>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	3301      	adds	r3, #1
 800204a:	429a      	cmp	r2, r3
 800204c:	d901      	bls.n	8002052 <report_parse+0x37e>
		return NO_EOC_FAIL;
 800204e:	2315      	movs	r3, #21
 8002050:	e0e9      	b.n	8002226 <report_parse+0x552>

	for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++) // Sanity check to see if the desired fields were parsed correctly
 8002052:	2300      	movs	r3, #0
 8002054:	74fb      	strb	r3, [r7, #19]
 8002056:	e01a      	b.n	800208e <report_parse+0x3ba>
			{
		if (TEMP_SF[ucSensptr].id == 0xFF) // If the ID == 0xFF it means that the sensor isn't present in the device
 8002058:	7cfa      	ldrb	r2, [r7, #19]
 800205a:	4975      	ldr	r1, [pc, #468]	; (8002230 <report_parse+0x55c>)
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	440b      	add	r3, r1
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2bff      	cmp	r3, #255	; 0xff
 8002068:	d00d      	beq.n	8002086 <report_parse+0x3b2>
			continue;
		if (TEMP_SF[ucSensptr].id != (ucSensptr + 1)) // Make sure every filled struct has a valid sensor ID
 800206a:	7cfa      	ldrb	r2, [r7, #19]
 800206c:	4970      	ldr	r1, [pc, #448]	; (8002230 <report_parse+0x55c>)
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	440b      	add	r3, r1
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	3301      	adds	r3, #1
 800207e:	429a      	cmp	r2, r3
 8002080:	d002      	beq.n	8002088 <report_parse+0x3b4>
			return REP_PARS_FAIL;
 8002082:	2314      	movs	r3, #20
 8002084:	e0cf      	b.n	8002226 <report_parse+0x552>
			continue;
 8002086:	bf00      	nop
	for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++) // Sanity check to see if the desired fields were parsed correctly
 8002088:	7cfb      	ldrb	r3, [r7, #19]
 800208a:	3301      	adds	r3, #1
 800208c:	74fb      	strb	r3, [r7, #19]
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b0b      	cmp	r3, #11
 8002092:	d9e1      	bls.n	8002058 <report_parse+0x384>
	}

	memset(&SENSOR, 0xFF, sizeof(SENSOR)); // Init & Rearrange structs into order compatible with _VREGS structure            
 8002094:	2254      	movs	r2, #84	; 0x54
 8002096:	21ff      	movs	r1, #255	; 0xff
 8002098:	4867      	ldr	r0, [pc, #412]	; (8002238 <report_parse+0x564>)
 800209a:	f007 fe58 	bl	8009d4e <memset>

	for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++) // go through the entire sensor list looking for sensor types
 800209e:	2300      	movs	r3, #0
 80020a0:	74fb      	strb	r3, [r7, #19]
 80020a2:	e0bb      	b.n	800221c <report_parse+0x548>
			{
		if (TEMP_SF[ucSensptr].type == ACCEL_SENSOR_TYPE) // Sensor type identifier for accelerometer
 80020a4:	7cfa      	ldrb	r2, [r7, #19]
 80020a6:	4962      	ldr	r1, [pc, #392]	; (8002230 <report_parse+0x55c>)
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	3301      	adds	r3, #1
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b73      	cmp	r3, #115	; 0x73
 80020b6:	d112      	bne.n	80020de <report_parse+0x40a>
		{
			SENSOR[ACCEL_VREG_OFFSET] = TEMP_SF[ucSensptr]; // Store this struct as the first in the new order
 80020b8:	7cfa      	ldrb	r2, [r7, #19]
 80020ba:	485f      	ldr	r0, [pc, #380]	; (8002238 <report_parse+0x564>)
 80020bc:	495c      	ldr	r1, [pc, #368]	; (8002230 <report_parse+0x55c>)
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	18ca      	adds	r2, r1, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	6810      	ldr	r0, [r2, #0]
 80020ca:	6018      	str	r0, [r3, #0]
 80020cc:	8891      	ldrh	r1, [r2, #4]
 80020ce:	7992      	ldrb	r2, [r2, #6]
 80020d0:	8099      	strh	r1, [r3, #4]
 80020d2:	719a      	strb	r2, [r3, #6]
			_VREGS.SL.accel = TRUE; // VREG01 accelerometer available bit(0) set
 80020d4:	4a59      	ldr	r2, [pc, #356]	; (800223c <report_parse+0x568>)
 80020d6:	7913      	ldrb	r3, [r2, #4]
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	7113      	strb	r3, [r2, #4]
		}

		if (TEMP_SF[ucSensptr].type == GYRO_SENSOR_TYPE) // Sensor type identifier for gyrometer
 80020de:	7cfa      	ldrb	r2, [r7, #19]
 80020e0:	4953      	ldr	r1, [pc, #332]	; (8002230 <report_parse+0x55c>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	3301      	adds	r3, #1
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b76      	cmp	r3, #118	; 0x76
 80020f0:	d112      	bne.n	8002118 <report_parse+0x444>
		{
			SENSOR[GYRO_VREG_OFFSET] = TEMP_SF[ucSensptr]; // Store this struct as the second in the new order
 80020f2:	7cfa      	ldrb	r2, [r7, #19]
 80020f4:	4950      	ldr	r1, [pc, #320]	; (8002238 <report_parse+0x564>)
 80020f6:	484e      	ldr	r0, [pc, #312]	; (8002230 <report_parse+0x55c>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	18c2      	adds	r2, r0, r3
 8002100:	1dcb      	adds	r3, r1, #7
 8002102:	6811      	ldr	r1, [r2, #0]
 8002104:	6019      	str	r1, [r3, #0]
 8002106:	8891      	ldrh	r1, [r2, #4]
 8002108:	7992      	ldrb	r2, [r2, #6]
 800210a:	8099      	strh	r1, [r3, #4]
 800210c:	719a      	strb	r2, [r3, #6]
			_VREGS.SL.gyro = TRUE;      // VREG01 gyrometer available bit(1) set
 800210e:	4a4b      	ldr	r2, [pc, #300]	; (800223c <report_parse+0x568>)
 8002110:	7913      	ldrb	r3, [r2, #4]
 8002112:	f043 0302 	orr.w	r3, r3, #2
 8002116:	7113      	strb	r3, [r2, #4]
		}

		if (TEMP_SF[ucSensptr].type == CMP_SENSOR_TYPE) // Sensor type identifier for compass
 8002118:	7cfa      	ldrb	r2, [r7, #19]
 800211a:	4945      	ldr	r1, [pc, #276]	; (8002230 <report_parse+0x55c>)
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	440b      	add	r3, r1
 8002124:	3301      	adds	r3, #1
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b83      	cmp	r3, #131	; 0x83
 800212a:	d113      	bne.n	8002154 <report_parse+0x480>
		{
			SENSOR[CMP_VREG_OFFSET] = TEMP_SF[ucSensptr]; // Store this struct as the third in the new order
 800212c:	7cfa      	ldrb	r2, [r7, #19]
 800212e:	4942      	ldr	r1, [pc, #264]	; (8002238 <report_parse+0x564>)
 8002130:	483f      	ldr	r0, [pc, #252]	; (8002230 <report_parse+0x55c>)
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	18c2      	adds	r2, r0, r3
 800213a:	f101 030e 	add.w	r3, r1, #14
 800213e:	6811      	ldr	r1, [r2, #0]
 8002140:	6019      	str	r1, [r3, #0]
 8002142:	8891      	ldrh	r1, [r2, #4]
 8002144:	7992      	ldrb	r2, [r2, #6]
 8002146:	8099      	strh	r1, [r3, #4]
 8002148:	719a      	strb	r2, [r3, #6]
			_VREGS.SL.cmp = TRUE;         // VREG01 compass available bit(2) set
 800214a:	4a3c      	ldr	r2, [pc, #240]	; (800223c <report_parse+0x568>)
 800214c:	7913      	ldrb	r3, [r2, #4]
 800214e:	f043 0304 	orr.w	r3, r3, #4
 8002152:	7113      	strb	r3, [r2, #4]
		}

		if (TEMP_SF[ucSensptr].type == ORI_SENSOR_TYPE) // Sensor type identifier for orientation sensor
 8002154:	7cfa      	ldrb	r2, [r7, #19]
 8002156:	4936      	ldr	r1, [pc, #216]	; (8002230 <report_parse+0x55c>)
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	440b      	add	r3, r1
 8002160:	3301      	adds	r3, #1
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b8a      	cmp	r3, #138	; 0x8a
 8002166:	d113      	bne.n	8002190 <report_parse+0x4bc>
		{
			SENSOR[ORI_VREG_OFFSET] = TEMP_SF[ucSensptr]; // Store this struct as the fourth in the new order
 8002168:	7cfa      	ldrb	r2, [r7, #19]
 800216a:	4933      	ldr	r1, [pc, #204]	; (8002238 <report_parse+0x564>)
 800216c:	4830      	ldr	r0, [pc, #192]	; (8002230 <report_parse+0x55c>)
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	18c2      	adds	r2, r0, r3
 8002176:	f101 0315 	add.w	r3, r1, #21
 800217a:	6811      	ldr	r1, [r2, #0]
 800217c:	6019      	str	r1, [r3, #0]
 800217e:	8891      	ldrh	r1, [r2, #4]
 8002180:	7992      	ldrb	r2, [r2, #6]
 8002182:	8099      	strh	r1, [r3, #4]
 8002184:	719a      	strb	r2, [r3, #6]
			_VREGS.SL.ori = TRUE;     // VREG01 orientation available bit(3) set
 8002186:	4a2d      	ldr	r2, [pc, #180]	; (800223c <report_parse+0x568>)
 8002188:	7913      	ldrb	r3, [r2, #4]
 800218a:	f043 0308 	orr.w	r3, r3, #8
 800218e:	7113      	strb	r3, [r2, #4]
		}

		if (TEMP_SF[ucSensptr].type == INCL_SENSOR_TYPE) // Sensor type identifier for inclinometer
 8002190:	7cfa      	ldrb	r2, [r7, #19]
 8002192:	4927      	ldr	r1, [pc, #156]	; (8002230 <report_parse+0x55c>)
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	440b      	add	r3, r1
 800219c:	3301      	adds	r3, #1
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b86      	cmp	r3, #134	; 0x86
 80021a2:	d113      	bne.n	80021cc <report_parse+0x4f8>
		{
			SENSOR[INCL_VREG_OFFSET] = TEMP_SF[ucSensptr]; // Store this struct as the fifth in the new order
 80021a4:	7cfa      	ldrb	r2, [r7, #19]
 80021a6:	4924      	ldr	r1, [pc, #144]	; (8002238 <report_parse+0x564>)
 80021a8:	4821      	ldr	r0, [pc, #132]	; (8002230 <report_parse+0x55c>)
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	18c2      	adds	r2, r0, r3
 80021b2:	f101 031c 	add.w	r3, r1, #28
 80021b6:	6810      	ldr	r0, [r2, #0]
 80021b8:	6018      	str	r0, [r3, #0]
 80021ba:	8891      	ldrh	r1, [r2, #4]
 80021bc:	7992      	ldrb	r2, [r2, #6]
 80021be:	8099      	strh	r1, [r3, #4]
 80021c0:	719a      	strb	r2, [r3, #6]
			_VREGS.SL.incl = TRUE;      // VREG01 gyrometer available bit(4) set
 80021c2:	4a1e      	ldr	r2, [pc, #120]	; (800223c <report_parse+0x568>)
 80021c4:	7913      	ldrb	r3, [r2, #4]
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	7113      	strb	r3, [r2, #4]
		}

		if (TEMP_SF[ucSensptr].type == RAW_SENSOR_TYPE) // Sensor type identifier for raw data
 80021cc:	7cfa      	ldrb	r2, [r7, #19]
 80021ce:	4918      	ldr	r1, [pc, #96]	; (8002230 <report_parse+0x55c>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	3301      	adds	r3, #1
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2be1      	cmp	r3, #225	; 0xe1
 80021de:	d11a      	bne.n	8002216 <report_parse+0x542>
		{             // NOTE: there is no VREG01 bit for raw sensors available 
			SENSOR[RAW_VREG_OFFSET + RAW_SENSOR_CNT] = TEMP_SF[ucSensptr]; // Store this struct as the 8th/9th/10th in the new order
 80021e0:	7cfa      	ldrb	r2, [r7, #19]
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <report_parse+0x56c>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	1dd9      	adds	r1, r3, #7
 80021e8:	4813      	ldr	r0, [pc, #76]	; (8002238 <report_parse+0x564>)
 80021ea:	460b      	mov	r3, r1
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	1a5b      	subs	r3, r3, r1
 80021f0:	4418      	add	r0, r3
 80021f2:	490f      	ldr	r1, [pc, #60]	; (8002230 <report_parse+0x55c>)
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	18ca      	adds	r2, r1, r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	6811      	ldr	r1, [r2, #0]
 8002200:	6019      	str	r1, [r3, #0]
 8002202:	8891      	ldrh	r1, [r2, #4]
 8002204:	7992      	ldrb	r2, [r2, #6]
 8002206:	8099      	strh	r1, [r3, #4]
 8002208:	719a      	strb	r2, [r3, #6]
			RAW_SENSOR_CNT++; // NOTE: pre-production SSC7150 F/W only enumerates 1 RAW sensor, so keep running count
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <report_parse+0x56c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <report_parse+0x56c>)
 8002214:	701a      	strb	r2, [r3, #0]
	for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++) // go through the entire sensor list looking for sensor types
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	3301      	adds	r3, #1
 800221a:	74fb      	strb	r3, [r7, #19]
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	2b0b      	cmp	r3, #11
 8002220:	f67f af40 	bls.w	80020a4 <report_parse+0x3d0>
		}
	}

	return SUCCESS;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000016c 	.word	0x2000016c
 8002234:	200001c0 	.word	0x200001c0
 8002238:	20000118 	.word	0x20000118
 800223c:	2000110c 	.word	0x2000110c
 8002240:	20000fb0 	.word	0x20000fb0
 8002244:	00000000 	.word	0x00000000

08002248 <ret_exponent>:
/** ret_exponent
 * @note        Returns the exponent scaler for a requested data field
 * @param ucAdj_SensN sensor num of interest
 * @return dMult multiplier value
 */
double ret_exponent(UINT8 ucAdj_SensN) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
	UINT8 ucVreg_ptr = VREG_EXP1;          // VREG36 is start of exponent values
 8002252:	2339      	movs	r3, #57	; 0x39
 8002254:	77fb      	strb	r3, [r7, #31]
	UINT8 ucRet;                                     // Function status variable
	double dMult = 1;                     // Unit exponent scaler to be returned
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <ret_exponent+0xd0>)
 800225c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	UINT16 wExpo;           // 'Buffer' to hold the exponent register's contents
	UINT8 ucTemp_expo = 0;          // Variable to hold the 4 bit exponent value
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]

	if (ucAdj_SensN > 3) // sensor indexes from 4 to 7 = sensors that have unit exponents in the 2nd exponent register (VREG37)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d902      	bls.n	8002270 <ret_exponent+0x28>
		ucVreg_ptr++;  // Increment ptr to VREG exponent register to be searched
 800226a:	7ffb      	ldrb	r3, [r7, #31]
 800226c:	3301      	adds	r3, #1
 800226e:	77fb      	strb	r3, [r7, #31]

	if (ucAdj_SensN > 7) // sensor indexes > 7 = sensors that have unit exponents in the 3rd exponent register (VREG38)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	2b07      	cmp	r3, #7
 8002274:	d902      	bls.n	800227c <ret_exponent+0x34>
		ucVreg_ptr++;  // Increment ptr to VREG exponent register to be searched
 8002276:	7ffb      	ldrb	r3, [r7, #31]
 8002278:	3301      	adds	r3, #1
 800227a:	77fb      	strb	r3, [r7, #31]

	ucAdj_SensN = ucAdj_SensN % 4; // Find the appropriate offset for this sensor's unit exponent
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	71fb      	strb	r3, [r7, #7]

	ucRet = HOST_SF_LIB_VREG_read(ucVreg_ptr, &wExpo); // Read this sesnor's data unit exponent value from the VREG
 8002284:	f107 0208 	add.w	r2, r7, #8
 8002288:	7ffb      	ldrb	r3, [r7, #31]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f000 feb7 	bl	8003000 <HOST_SF_LIB_VREG_read>
 8002292:	4603      	mov	r3, r0
 8002294:	73bb      	strb	r3, [r7, #14]

	ucTemp_expo = (UINT8) ((wExpo >> (4 * ucAdj_SensN)) & 0xF); // get the 4 exp bits for desired sensor
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	73fb      	strb	r3, [r7, #15]

	if (ucTemp_expo >= 0 && ucTemp_expo <= 7) // These values are all positive exponents
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b07      	cmp	r3, #7
 80022ac:	d80d      	bhi.n	80022ca <ret_exponent+0x82>
		dMult = pow(10, ucTemp_expo);
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f91f 	bl	80004f4 <__aeabi_ui2d>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	ec43 2b11 	vmov	d1, r2, r3
 80022be:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8002310 <ret_exponent+0xc8>
 80022c2:	f008 fd91 	bl	800ade8 <pow>
 80022c6:	ed87 0b04 	vstr	d0, [r7, #16]

	if (ucTemp_expo >= 8 && ucTemp_expo <= 0x0F) // These values are all negative exponents (ie. to right of decimal place)
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b07      	cmp	r3, #7
 80022ce:	d914      	bls.n	80022fa <ret_exponent+0xb2>
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	d811      	bhi.n	80022fa <ret_exponent+0xb2>
		dMult = pow(10, (int16_t) (-16 + ucTemp_expo));
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b10      	subs	r3, #16
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b21b      	sxth	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f917 	bl	8000514 <__aeabi_i2d>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	ec43 2b11 	vmov	d1, r2, r3
 80022ee:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8002310 <ret_exponent+0xc8>
 80022f2:	f008 fd79 	bl	800ade8 <pow>
 80022f6:	ed87 0b04 	vstr	d0, [r7, #16]

	return dMult;                                  //return Unit exponent scaler
 80022fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022fe:	ec43 2b17 	vmov	d7, r2, r3
}
 8002302:	eeb0 0a47 	vmov.f32	s0, s14
 8002306:	eef0 0a67 	vmov.f32	s1, s15
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	00000000 	.word	0x00000000
 8002314:	40240000 	.word	0x40240000
 8002318:	3ff00000 	.word	0x3ff00000

0800231c <HOST_SF_LIB_HID_Set_Report>:
 * @param type refers to feature or output report; type = 3 - feature, 2 - output
 * @param ReportBuffer pointer to data that needs to be sent to the device
 * @param size specifies the size, in bytes,of the report buffer 
 * @return completion_status 0=SUCCESS, failcode: 0x19=SET_RPT_FAIL
 */
UINT8 HOST_SF_LIB_HID_Set_Report(UINT8 type, UINT8 *ReportBuffer, UINT8 size) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b0ac      	sub	sp, #176	; 0xb0
 8002320:	af02      	add	r7, sp, #8
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
 8002328:	4613      	mov	r3, r2
 800232a:	71bb      	strb	r3, [r7, #6]
	UINT8 ucTx_data[BUF_150];
	UINT8 ucRetStat;
	UINT8 ucCmdBytePtr;
	BOOL bVendorCmd = FALSE;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

	if (size <= 0 || size >= (BUF_150 - RPT_LEN))
 8002332:	79bb      	ldrb	r3, [r7, #6]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HOST_SF_LIB_HID_Set_Report+0x22>
 8002338:	79bb      	ldrb	r3, [r7, #6]
 800233a:	2b8f      	cmp	r3, #143	; 0x8f
 800233c:	d901      	bls.n	8002342 <HOST_SF_LIB_HID_Set_Report+0x26>
		return SET_RPT_FAIL;
 800233e:	2319      	movs	r3, #25
 8002340:	e066      	b.n	8002410 <HOST_SF_LIB_HID_Set_Report+0xf4>

	if (ReportBuffer[0] == FLASH_UPDATE_RPT_ID) // the flash update (Vendor) commands have a different format
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b0e      	cmp	r3, #14
 8002348:	d102      	bne.n	8002350 <HOST_SF_LIB_HID_Set_Report+0x34>
		bVendorCmd = TRUE;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

	ucTx_data[0] = HID_FIELD.wCmdReg; //command field bytes from HID config table
 8002350:	4b31      	ldr	r3, [pc, #196]	; (8002418 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	733b      	strb	r3, [r7, #12]
	ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);    // Command register MSB
 8002358:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	b2db      	uxtb	r3, r3
 8002360:	737b      	strb	r3, [r7, #13]
	if (bVendorCmd)
 8002362:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <HOST_SF_LIB_HID_Set_Report+0x5c>
		ucTx_data[2] = type | ReportBuffer[0]; // HID Set command opcode low byte which includes the sensor's ReportID, high byte report type
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	4313      	orrs	r3, r2
 8002372:	b2db      	uxtb	r3, r3
 8002374:	73bb      	strb	r3, [r7, #14]
 8002376:	e006      	b.n	8002386 <HOST_SF_LIB_HID_Set_Report+0x6a>
	else
		ucTx_data[2] = type | ReportBuffer[2];
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	3302      	adds	r3, #2
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	4313      	orrs	r3, r2
 8002382:	b2db      	uxtb	r3, r3
 8002384:	73bb      	strb	r3, [r7, #14]
	ucTx_data[3] = SET_OPCODE;         // HID SetReport command opcode high byte
 8002386:	2303      	movs	r3, #3
 8002388:	73fb      	strb	r3, [r7, #15]
	ucTx_data[4] = HID_FIELD.wDatReg;   //data field bytes from HID config table
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	743b      	strb	r3, [r7, #16]
	ucTx_data[5] = (HID_FIELD.wDatReg >> BYTE_SHIFT);
 8002392:	4b21      	ldr	r3, [pc, #132]	; (8002418 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b2db      	uxtb	r3, r3
 800239a:	747b      	strb	r3, [r7, #17]

	ucCmdBytePtr = RPT_LEN;
 800239c:	2306      	movs	r3, #6
 800239e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	if (bVendorCmd)    // flash update (vendor) commands have a different format
 80023a2:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HOST_SF_LIB_HID_Set_Report+0x96>
		ReportBuffer++;                         //skips 1st byte of input buffer
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	e012      	b.n	80023d8 <HOST_SF_LIB_HID_Set_Report+0xbc>
	else
		size++;
 80023b2:	79bb      	ldrb	r3, [r7, #6]
 80023b4:	3301      	adds	r3, #1
 80023b6:	71bb      	strb	r3, [r7, #6]

	while (size--) {
 80023b8:	e00e      	b.n	80023d8 <HOST_SF_LIB_HID_Set_Report+0xbc>
		ucTx_data[ucCmdBytePtr++] = *(ReportBuffer++); // Append input to the command
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	603a      	str	r2, [r7, #0]
 80023c0:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80023c4:	1c51      	adds	r1, r2, #1
 80023c6:	f887 10a7 	strb.w	r1, [r7, #167]	; 0xa7
 80023ca:	4611      	mov	r1, r2
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	f101 03a8 	add.w	r3, r1, #168	; 0xa8
 80023d2:	443b      	add	r3, r7
 80023d4:	f803 2c9c 	strb.w	r2, [r3, #-156]
	while (size--) {
 80023d8:	79bb      	ldrb	r3, [r7, #6]
 80023da:	1e5a      	subs	r2, r3, #1
 80023dc:	71ba      	strb	r2, [r7, #6]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1eb      	bne.n	80023ba <HOST_SF_LIB_HID_Set_Report+0x9e>
	}

	ucRetStat = i2c_cmd_WrRd(WRITE,   //issue SetReportOutput command to SSC7150
 80023e2:	f107 020c 	add.w	r2, r7, #12
 80023e6:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 80023ea:	2300      	movs	r3, #0
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	2300      	movs	r3, #0
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2300      	movs	r3, #0
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7fe fec3 	bl	8001180 <i2c_cmd_WrRd>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
			ucTx_data,                                  //cmd buf
			0,                                  //num of bytes to read initially
			0,                                          //recv buf
			FALSE); //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

	if (ucRetStat != SUCCESS) {
 8002400:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HOST_SF_LIB_HID_Set_Report+0xf0>
		return SET_RPT_FAIL;
 8002408:	2319      	movs	r3, #25
 800240a:	e001      	b.n	8002410 <HOST_SF_LIB_HID_Set_Report+0xf4>
	}

	return ucRetStat;
 800240c:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
}
 8002410:	4618      	mov	r0, r3
 8002412:	37a8      	adds	r7, #168	; 0xa8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200001c0 	.word	0x200001c0

0800241c <HOST_SF_LIB_HID_Get_Report>:
 * @param type refers to feature or input report; type = 3 - feature, 1 - input
 * @param ReportBuffer pointer towhich the feature report data is read into 
 * @param size specifies the size, in bytes, of the report buffer 
 * @return completion_status 0=I2C_SUCCESS, failcode: 0x1C=HID_GET_RPT_INPT_FAIL,0x1D=HID_GET_RPT_FEAT_FAIL
 */
UINT8 HOST_SF_LIB_HID_Get_Report(UINT8 type, UINT8 *ReportBuffer, UINT8 size) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b0aa      	sub	sp, #168	; 0xa8
 8002420:	af02      	add	r7, sp, #8
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
 8002428:	4613      	mov	r3, r2
 800242a:	71bb      	strb	r3, [r7, #6]
	UINT8 ucTx_data[BUF_150];
	UINT8 ucRetStat;
	UINT8 ucCmdBytePtr;

	ucTx_data[0] = HID_FIELD.wCmdReg; //command field bytes from HID config table
 800242c:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	723b      	strb	r3, [r7, #8]
	ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);    // Command register MSB
 8002434:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	b2db      	uxtb	r3, r3
 800243c:	727b      	strb	r3, [r7, #9]
	ucTx_data[2] = type | ReportBuffer[0]; // HID Get command opcode low byte which includes the sensor's ReportID, high byte report type
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	781a      	ldrb	r2, [r3, #0]
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4313      	orrs	r3, r2
 8002446:	b2db      	uxtb	r3, r3
 8002448:	72bb      	strb	r3, [r7, #10]
	ucTx_data[3] = GET_RPT_CMD_MSB;    // HID GetReport command opcode high byte
 800244a:	2302      	movs	r3, #2
 800244c:	72fb      	strb	r3, [r7, #11]
	ucTx_data[4] = HID_FIELD.wDatReg;   //data field bytes from HID config table
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	733b      	strb	r3, [r7, #12]
	ucTx_data[5] = (HID_FIELD.wDatReg >> BYTE_SHIFT);
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	b2db      	uxtb	r3, r3
 800245e:	737b      	strb	r3, [r7, #13]

	ucCmdBytePtr = RPT_LEN;
 8002460:	2306      	movs	r3, #6
 8002462:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	ucRetStat = i2c_cmd_WrRd(WR_RD,   //issue SetReportOutput command to SSC7150
 8002466:	f107 0208 	add.w	r2, r7, #8
 800246a:	f897 109f 	ldrb.w	r1, [r7, #159]	; 0x9f
 800246e:	2301      	movs	r3, #1
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2303      	movs	r3, #3
 8002478:	2003      	movs	r0, #3
 800247a:	f7fe fe81 	bl	8001180 <i2c_cmd_WrRd>
 800247e:	4603      	mov	r3, r0
 8002480:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			ucTx_data,                                  //cmd buf
			BYTE_ADJ_VAL,                       //num of bytes to read initially
			ReportBuffer,                               //recv buf
			TRUE); //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

	if (ucRetStat != SUCCESS) {
 8002484:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HOST_SF_LIB_HID_Get_Report+0x7e>
		if (type == GET_RPT_FEAT)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	2b30      	cmp	r3, #48	; 0x30
 8002490:	d101      	bne.n	8002496 <HOST_SF_LIB_HID_Get_Report+0x7a>
			return HID_GET_RPT_FEAT_FAIL;
 8002492:	231d      	movs	r3, #29
 8002494:	e003      	b.n	800249e <HOST_SF_LIB_HID_Get_Report+0x82>
		else
			return HID_GET_RPT_INPT_FAIL;
 8002496:	231c      	movs	r3, #28
 8002498:	e001      	b.n	800249e <HOST_SF_LIB_HID_Get_Report+0x82>
	}

	return ucRetStat;
 800249a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
}
 800249e:	4618      	mov	r0, r3
 80024a0:	37a0      	adds	r7, #160	; 0xa0
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200001c0 	.word	0x200001c0

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_MspInit+0x4c>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <HAL_MspInit+0x4c>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6613      	str	r3, [r2, #96]	; 0x60
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_MspInit+0x4c>)
 80024c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_MspInit+0x4c>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_MspInit+0x4c>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6593      	str	r3, [r2, #88]	; 0x58
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_MspInit+0x4c>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	210f      	movs	r1, #15
 80024e6:	f06f 0001 	mvn.w	r0, #1
 80024ea:	f001 faf9 	bl	8003ae0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000

080024fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800250a:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <HAL_InitTick+0xc8>)
 800250c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250e:	4a2d      	ldr	r2, [pc, #180]	; (80025c4 <HAL_InitTick+0xc8>)
 8002510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002514:	6613      	str	r3, [r2, #96]	; 0x60
 8002516:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_InitTick+0xc8>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002522:	f107 020c 	add.w	r2, r7, #12
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f003 f857 	bl	80055e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002532:	f003 f83f 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
 8002536:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_InitTick+0xcc>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	0c9b      	lsrs	r3, r3, #18
 8002542:	3b01      	subs	r3, #1
 8002544:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002546:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_InitTick+0xd0>)
 8002548:	4a21      	ldr	r2, [pc, #132]	; (80025d0 <HAL_InitTick+0xd4>)
 800254a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_InitTick+0xd0>)
 800254e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002552:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <HAL_InitTick+0xd0>)
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <HAL_InitTick+0xd0>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <HAL_InitTick+0xd0>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002566:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_InitTick+0xd0>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 800256c:	4817      	ldr	r0, [pc, #92]	; (80025cc <HAL_InitTick+0xd0>)
 800256e:	f003 fbc1 	bl	8005cf4 <HAL_TIM_Base_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002578:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800257c:	2b00      	cmp	r3, #0
 800257e:	d11b      	bne.n	80025b8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8002580:	4812      	ldr	r0, [pc, #72]	; (80025cc <HAL_InitTick+0xd0>)
 8002582:	f003 fc19 	bl	8005db8 <HAL_TIM_Base_Start_IT>
 8002586:	4603      	mov	r3, r0
 8002588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800258c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002590:	2b00      	cmp	r3, #0
 8002592:	d111      	bne.n	80025b8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002594:	2019      	movs	r0, #25
 8002596:	f001 fabf 	bl	8003b18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d808      	bhi.n	80025b2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	2019      	movs	r0, #25
 80025a6:	f001 fa9b 	bl	8003ae0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_InitTick+0xd8>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e002      	b.n	80025b8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80025b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3730      	adds	r7, #48	; 0x30
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	431bde83 	.word	0x431bde83
 80025cc:	20000fb4 	.word	0x20000fb4
 80025d0:	40014400 	.word	0x40014400
 80025d4:	20000004 	.word	0x20000004

080025d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <NMI_Handler+0x4>

080025de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <HardFault_Handler+0x4>

080025e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <MemManage_Handler+0x4>

080025ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <BusFault_Handler+0x4>

080025f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <UsageFault_Handler+0x4>

080025f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <EXTI3_IRQHandler>:
#include "main.h"

extern volatile bool EC_DATA_AVAIL;

void EXTI3_IRQHandler(void)
  {
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
      /* USER CODE END EXTI3_IRQn 0 */

      /* USER CODE BEGIN EXTI3_IRQn 1 */

      /* Check if the INT Source is our Data Available PIN */
      if (!EC_DATA_AVAIL)
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <EXTI3_IRQHandler+0x68>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <EXTI3_IRQHandler+0x3a>
      {
          /* INT1 Edge configured to interrupt on rising edge (wait for end of data) */

          /* clear falling edge configuration for EXTI3 */
          EXTI->FTSR1 &= ~(1U << 3);
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <EXTI3_IRQHandler+0x6c>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <EXTI3_IRQHandler+0x6c>)
 800261e:	f023 0308 	bic.w	r3, r3, #8
 8002622:	60d3      	str	r3, [r2, #12]
          /* set rising edge configuration for EXTI3 */
          EXTI->RTSR1 |= (1U << 3);
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <EXTI3_IRQHandler+0x6c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a11      	ldr	r2, [pc, #68]	; (8002670 <EXTI3_IRQHandler+0x6c>)
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	6093      	str	r3, [r2, #8]

          /*Toggle EC_DATA_AVAIL flag to notify data received */
          EC_DATA_AVAIL = TRUE;
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <EXTI3_IRQHandler+0x68>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
          /* clear EXTI3 interrupt flag */
          EXTI->PR1 = (1U << 3);
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <EXTI3_IRQHandler+0x6c>)
 8002638:	2208      	movs	r2, #8
 800263a:	615a      	str	r2, [r3, #20]
          /* clear EXTI3 interrupt flag */
          EXTI->PR1 = (1U << 3);
      }

      /* USER CODE END EXTI3_IRQn 1 */
  }
 800263c:	e011      	b.n	8002662 <EXTI3_IRQHandler+0x5e>
          EXTI->RTSR1 &= ~(1U << 3);
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <EXTI3_IRQHandler+0x6c>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <EXTI3_IRQHandler+0x6c>)
 8002644:	f023 0308 	bic.w	r3, r3, #8
 8002648:	6093      	str	r3, [r2, #8]
          EXTI->FTSR1 |= (1U << 3);
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <EXTI3_IRQHandler+0x6c>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4a08      	ldr	r2, [pc, #32]	; (8002670 <EXTI3_IRQHandler+0x6c>)
 8002650:	f043 0308 	orr.w	r3, r3, #8
 8002654:	60d3      	str	r3, [r2, #12]
          EC_DATA_AVAIL = FALSE;
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <EXTI3_IRQHandler+0x68>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
          EXTI->PR1 = (1U << 3);
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <EXTI3_IRQHandler+0x6c>)
 800265e:	2208      	movs	r2, #8
 8002660:	615a      	str	r2, [r3, #20]
  }
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	200000f1 	.word	0x200000f1
 8002670:	40010400 	.word	0x40010400

08002674 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800267a:	f003 fbf1 	bl	8005e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000fb4 	.word	0x20000fb4

08002688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002690:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <_sbrk+0x5c>)
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <_sbrk+0x60>)
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <_sbrk+0x64>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <_sbrk+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b8:	f007 fa18 	bl	8009aec <__errno>
 80026bc:	4603      	mov	r3, r0
 80026be:	220c      	movs	r2, #12
 80026c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	e009      	b.n	80026dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	; (80026ec <_sbrk+0x64>)
 80026d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20010000 	.word	0x20010000
 80026e8:	00000400 	.word	0x00000400
 80026ec:	20001000 	.word	0x20001000
 80026f0:	20004d68 	.word	0x20004d68

080026f4 <Wake_signal>:
* @note        Assert Wake and Reset Signal on Specified Portpin with Delay According to Datasheet
* @param
* @return
*/
void Wake_signal()
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	/* Assert Wake Signal */
	 HAL_GPIO_WritePin(MOTION_WAKE_PIN_GPIO_Port, MOTION_WAKE_PIN_Pin, GPIO_PIN_RESET);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2101      	movs	r1, #1
 80026fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002700:	f001 fb80 	bl	8003e04 <HAL_GPIO_WritePin>
	/* Assert Wake Signal */
	//HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_SET);

	 /* TODO: (1/2) Test different Timing Variants because the 2ms according to the Reference Manual does not work! */
	/* Wait 2ms */
    HAL_Delay(20);
 8002704:	2014      	movs	r0, #20
 8002706:	f001 f90f 	bl	8003928 <HAL_Delay>

    /* De-Assert Wake Signal */
    HAL_GPIO_WritePin(MOTION_WAKE_PIN_GPIO_Port, MOTION_WAKE_PIN_Pin, GPIO_PIN_SET);
 800270a:	2201      	movs	r2, #1
 800270c:	2101      	movs	r1, #1
 800270e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002712:	f001 fb77 	bl	8003e04 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_RESET);
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <Reset_signal>:

void Reset_signal()
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	/* Assert Wake Signal */
	HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_RESET);
 8002720:	2200      	movs	r2, #0
 8002722:	2102      	movs	r1, #2
 8002724:	4806      	ldr	r0, [pc, #24]	; (8002740 <Reset_signal+0x24>)
 8002726:	f001 fb6d 	bl	8003e04 <HAL_GPIO_WritePin>

	/* TODO: (2/2) Test different Timing Variants because the 11ms according to the Reference Manual does not work! */
	/* Wait 11ms */
	HAL_Delay(20);
 800272a:	2014      	movs	r0, #20
 800272c:	f001 f8fc 	bl	8003928 <HAL_Delay>

	/* De-Assert Wake Signal */
	HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_SET);
 8002730:	2201      	movs	r2, #1
 8002732:	2102      	movs	r1, #2
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <Reset_signal+0x24>)
 8002736:	f001 fb65 	bl	8003e04 <HAL_GPIO_WritePin>
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	48000400 	.word	0x48000400

08002744 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <SystemInit+0x20>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <SystemInit+0x20>)
 8002750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <MX_USART1_UART_Init+0x58>)
 800276e:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <MX_USART1_UART_Init+0x5c>)
 8002770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <MX_USART1_UART_Init+0x58>)
 8002774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <MX_USART1_UART_Init+0x58>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <MX_USART1_UART_Init+0x58>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <MX_USART1_UART_Init+0x58>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <MX_USART1_UART_Init+0x58>)
 800278e:	220c      	movs	r2, #12
 8002790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <MX_USART1_UART_Init+0x58>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <MX_USART1_UART_Init+0x58>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <MX_USART1_UART_Init+0x58>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <MX_USART1_UART_Init+0x58>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027aa:	4805      	ldr	r0, [pc, #20]	; (80027c0 <MX_USART1_UART_Init+0x58>)
 80027ac:	f003 fd22 	bl	80061f4 <HAL_UART_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80027b6:	f7fe fde5 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20001004 	.word	0x20001004
 80027c4:	40013800 	.word	0x40013800

080027c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 80027ce:	4a16      	ldr	r2, [pc, #88]	; (8002828 <MX_USART2_UART_Init+0x60>)
 80027d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 80027d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 80027ee:	220c      	movs	r2, #12
 80027f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 8002806:	2200      	movs	r2, #0
 8002808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800280a:	4806      	ldr	r0, [pc, #24]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 800280c:	f003 fcf2 	bl	80061f4 <HAL_UART_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002816:	f7fe fdb5 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  RetargetInit(&huart2);
 800281a:	4802      	ldr	r0, [pc, #8]	; (8002824 <MX_USART2_UART_Init+0x5c>)
 800281c:	f7fe fdb8 	bl	8001390 <RetargetInit>
  /* USER CODE END USART2_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20001088 	.word	0x20001088
 8002828:	40004400 	.word	0x40004400

0800282c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b0a0      	sub	sp, #128	; 0x80
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002844:	f107 0318 	add.w	r3, r7, #24
 8002848:	2254      	movs	r2, #84	; 0x54
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f007 fa7e 	bl	8009d4e <memset>
  if(uartHandle->Instance==USART1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a47      	ldr	r2, [pc, #284]	; (8002974 <HAL_UART_MspInit+0x148>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d138      	bne.n	80028ce <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800285c:	2301      	movs	r3, #1
 800285e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002860:	2300      	movs	r3, #0
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002864:	f107 0318 	add.w	r3, r7, #24
 8002868:	4618      	mov	r0, r3
 800286a:	f002 ff4b 	bl	8005704 <HAL_RCCEx_PeriphCLKConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002874:	f7fe fd86 	bl	8001384 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002878:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <HAL_UART_MspInit+0x14c>)
 800287a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287c:	4a3e      	ldr	r2, [pc, #248]	; (8002978 <HAL_UART_MspInit+0x14c>)
 800287e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002882:	6613      	str	r3, [r2, #96]	; 0x60
 8002884:	4b3c      	ldr	r3, [pc, #240]	; (8002978 <HAL_UART_MspInit+0x14c>)
 8002886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_UART_MspInit+0x14c>)
 8002892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002894:	4a38      	ldr	r2, [pc, #224]	; (8002978 <HAL_UART_MspInit+0x14c>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800289c:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_UART_MspInit+0x14c>)
 800289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = WIFI_USART1_TX_Pin|WIFI_USART1_RX_Pin;
 80028a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ba:	2307      	movs	r3, #7
 80028bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028c2:	4619      	mov	r1, r3
 80028c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c8:	f001 f934 	bl	8003b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028cc:	e04d      	b.n	800296a <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2a      	ldr	r2, [pc, #168]	; (800297c <HAL_UART_MspInit+0x150>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d148      	bne.n	800296a <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028d8:	2302      	movs	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028dc:	2300      	movs	r3, #0
 80028de:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028e0:	f107 0318 	add.w	r3, r7, #24
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 ff0d 	bl	8005704 <HAL_RCCEx_PeriphCLKConfig>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80028f0:	f7fe fd48 	bl	8001384 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028f4:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_UART_MspInit+0x14c>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	4a1f      	ldr	r2, [pc, #124]	; (8002978 <HAL_UART_MspInit+0x14c>)
 80028fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_UART_MspInit+0x14c>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_UART_MspInit+0x14c>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002910:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_UART_MspInit+0x14c>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_UART_MspInit+0x14c>)
 800291a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002924:	2304      	movs	r3, #4
 8002926:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002930:	2303      	movs	r3, #3
 8002932:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002934:	2307      	movs	r3, #7
 8002936:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002938:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800293c:	4619      	mov	r1, r3
 800293e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002942:	f001 f8f7 	bl	8003b34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800294a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002958:	2303      	movs	r3, #3
 800295a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800295c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002960:	4619      	mov	r1, r3
 8002962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002966:	f001 f8e5 	bl	8003b34 <HAL_GPIO_Init>
}
 800296a:	bf00      	nop
 800296c:	3780      	adds	r7, #128	; 0x80
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40013800 	.word	0x40013800
 8002978:	40021000 	.word	0x40021000
 800297c:	40004400 	.word	0x40004400

08002980 <VREG_init>:
* @note        Inits VREG registers, get HID config & report descriptor tables, retrieves all device features
* @param 
* @return error status 0=SUCCESS, failcodes: 0x11=HID_DESC_FAIL, 0x12=RPT_DESC_FAIL, 0x18=RESET_FAIL 
*/ 
UINT8 VREG_init() 
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
    UINT8 ucBuf[BUF_40];                                           
    UINT8 ucSensor_num;
    
        
    memset(&_VREGS, 0x00, sizeof(_VREGS));                            // Initialize VREG registers 
 8002986:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800298a:	2100      	movs	r1, #0
 800298c:	4841      	ldr	r0, [pc, #260]	; (8002a94 <VREG_init+0x114>)
 800298e:	f007 f9de 	bl	8009d4e <memset>

    
    if ( hid_i2c_descriptor_handler(GET_HID_DESC) )                 // get HID descriptor from SSC7150
 8002992:	2001      	movs	r0, #1
 8002994:	f7fe fee8 	bl	8001768 <hid_i2c_descriptor_handler>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <VREG_init+0x30>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // update status register (VREG 0x3F) for failure to get HID descriptor
 800299e:	4a3d      	ldr	r2, [pc, #244]	; (8002a94 <VREG_init+0x114>)
 80029a0:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 80029a4:	f043 0318 	orr.w	r3, r3, #24
 80029a8:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return HID_DESC_FAIL;
 80029ac:	2311      	movs	r3, #17
 80029ae:	e06c      	b.n	8002a8a <VREG_init+0x10a>
    }        
    
    hid_i2c_cmd_process(ucBuf, POWER_ON, ARB_ID);                   // Issue HID Power ON command to SSC7150 (NOTE: 'ucBuf' and 'ARB_ID' are don't cares for POWER_ON command)
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2201      	movs	r2, #1
 80029b4:	2102      	movs	r1, #2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe ffae 	bl	8001918 <hid_i2c_cmd_process>
    
    _VREGS.SHC.reset = VREG_RESET_INIT;                              //set the SHC reset bit to indicate this operation has not yet completed successfully
 80029bc:	4a35      	ldr	r2, [pc, #212]	; (8002a94 <VREG_init+0x114>)
 80029be:	7813      	ldrb	r3, [r2, #0]
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	7013      	strb	r3, [r2, #0]
    if ( hid_i2c_cmd_process (ucBuf, RESET_DEV_CMD, ARB_ID) )       // Issue HID Reset command  (NOTE: 'ucBuf' and 'ARB_ID' are don't cares for RESET_REG command)
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	2201      	movs	r2, #1
 80029ca:	2101      	movs	r1, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe ffa3 	bl	8001918 <hid_i2c_cmd_process>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <VREG_init+0x6a>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // If HID Reset fails, update status register (VREG 0x3F)
 80029d8:	4a2e      	ldr	r2, [pc, #184]	; (8002a94 <VREG_init+0x114>)
 80029da:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 80029de:	f043 0318 	orr.w	r3, r3, #24
 80029e2:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return RESET_FAIL;
 80029e6:	2318      	movs	r3, #24
 80029e8:	e04f      	b.n	8002a8a <VREG_init+0x10a>
    }    
    
    if ( hid_i2c_descriptor_handler(GET_RPT_DESC) )                 // Get HID Report descriptor from SSC7150 
 80029ea:	2002      	movs	r0, #2
 80029ec:	f7fe febc 	bl	8001768 <hid_i2c_descriptor_handler>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <VREG_init+0x88>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // HID report descriptor error, update status register (VREG 0x3F)
 80029f6:	4a27      	ldr	r2, [pc, #156]	; (8002a94 <VREG_init+0x114>)
 80029f8:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 80029fc:	f043 0318 	orr.w	r3, r3, #24
 8002a00:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return RPT_DESC_FAIL;
 8002a04:	2312      	movs	r3, #18
 8002a06:	e040      	b.n	8002a8a <VREG_init+0x10a>
    }       
    
    for (ucSensor_num = 0; ucSensor_num <= NUM_SENS; ucSensor_num++) //go through the sensor list but only GetFeatureReport for valid ids   
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002a0e:	e025      	b.n	8002a5c <VREG_init+0xdc>
    {
        if (SENSOR[ucSensor_num].id != 0xFF && SENSOR[ucSensor_num].id != 0)
 8002a10:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002a14:	4920      	ldr	r1, [pc, #128]	; (8002a98 <VREG_init+0x118>)
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2bff      	cmp	r3, #255	; 0xff
 8002a22:	d016      	beq.n	8002a52 <VREG_init+0xd2>
 8002a24:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002a28:	491b      	ldr	r1, [pc, #108]	; (8002a98 <VREG_init+0x118>)
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00c      	beq.n	8002a52 <VREG_init+0xd2>
        {
            hid_i2c_cmd_process(ucBuf, HID_GET_RPT_FEAT, SENSOR[ucSensor_num].id);  // Get feature report for all valid sensors and update _VREGS register
 8002a38:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <VREG_init+0x118>)
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	2105      	movs	r1, #5
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe ff63 	bl	8001918 <hid_i2c_cmd_process>
    for (ucSensor_num = 0; ucSensor_num <= NUM_SENS; ucSensor_num++) //go through the sensor list but only GetFeatureReport for valid ids   
 8002a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a56:	3301      	adds	r3, #1
 8002a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a60:	2b0c      	cmp	r3, #12
 8002a62:	d9d5      	bls.n	8002a10 <VREG_init+0x90>
        }
    }

    
    _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_SUCCESS;          // HID startup successful, update status register (VREG 0x3F) 
 8002a64:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <VREG_init+0x114>)
 8002a66:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	f361 03c4 	bfi	r3, r1, #3, #2
 8002a70:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108

    _VREGS.SHC.SHwake = TRUE;                                        // HID device is now awake and ready for operation
 8002a74:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <VREG_init+0x114>)
 8002a76:	7813      	ldrb	r3, [r2, #0]
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	7013      	strb	r3, [r2, #0]
    _VREGS.SHC.SHstart = TRUE;
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <VREG_init+0x114>)
 8002a80:	7813      	ldrb	r3, [r2, #0]
 8002a82:	f043 0304 	orr.w	r3, r3, #4
 8002a86:	7013      	strb	r3, [r2, #0]

    return SUCCESS;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3730      	adds	r7, #48	; 0x30
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000110c 	.word	0x2000110c
 8002a98:	20000118 	.word	0x20000118

08002a9c <set_state_data>:
* @note        Set and confirm new features for a device 
* @param GET_SET_PARAMS structure containing  power state (=2: FULL, =3: LOW),sensor ID, New data rate,New sensitivity
* @return error status 0=SUCCESS, failcodes: 0x17=SET_FEAT_FAIL 
*/ 
UINT8 set_state_data(GET_SET_PARAMS SET_PARAMS)    
{
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	b5b0      	push	{r4, r5, r7, lr}
 8002aa0:	b096      	sub	sp, #88	; 0x58
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    UINT8 ucGetFeatBuf[BUF_40];                                     // GetFeature report buffer
    UINT8 ucSetFeatBuf[BUF_40];                                     // SetFeature report buffer
    UINT8 ucRetryCnt, ucGSptr, ucBufSize;


    if ( hid_i2c_cmd_process(ucGetFeatBuf, HID_GET_RPT_FEAT, SET_PARAMS.ucid) ) // Issue a get report feature command and store the get features in ucGetFeatBuf
 8002aac:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8002ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab4:	2105      	movs	r1, #5
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe ff2e 	bl	8001918 <hid_i2c_cmd_process>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <set_state_data+0x2a>
        return SET_FEAT_FAIL;  
 8002ac2:	2317      	movs	r3, #23
 8002ac4:	e073      	b.n	8002bae <set_state_data+0x112>
    
    memcpy(&ucSetFeatBuf, &ucGetFeatBuf, BUF_40);                   // Copy GetFeatBuff to bufs to use for set feature command
 8002ac6:	1d3c      	adds	r4, r7, #4
 8002ac8:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8002acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ad8:	e884 0003 	stmia.w	r4, {r0, r1}

    // Modify fields that we would like to set in bufs (sensor state, power state, data rate, sensitivity)
    ucSetFeatBuf[RPT_REPORT_STATE] = HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_ALL_EVENTS_ENUM;   
 8002adc:	2302      	movs	r3, #2
 8002ade:	723b      	strb	r3, [r7, #8]
    ucSetFeatBuf[RPT_PWR_STATE] = SET_PARAMS.ucPowerState;          //update the Power state parameter
 8002ae0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002ae4:	727b      	strb	r3, [r7, #9]

    if (SET_PARAMS.bDataRateValid)                                  // update data rate value?
 8002ae6:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <set_state_data+0x60>
    {
        ucSetFeatBuf[RPT_REPORT_INTVAL_LSB] = (UINT8) SET_PARAMS.usDataRateVal; //update 16 bit data rate value
 8002aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	72fb      	strb	r3, [r7, #11]
        ucSetFeatBuf[RPT_REPORT_INTVAL_MSB] = (UINT8) (SET_PARAMS.usDataRateVal >> BYTE_SHIFT);
 8002af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af6:	0a1b      	lsrs	r3, r3, #8
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	733b      	strb	r3, [r7, #12]
    }
    
    if (SET_PARAMS.bSensitivityValid)                               // update sensitivity value?
 8002afc:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <set_state_data+0x76>
    {
        ucSetFeatBuf[RPT_CHG_SENS_LSB] = (UINT8) SET_PARAMS.usSensitivityVal; //update 16 bit sensitivity value
 8002b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	747b      	strb	r3, [r7, #17]
        ucSetFeatBuf[RPT_CHG_SENS_MSB] = (UINT8) (SET_PARAMS.usSensitivityVal >> BYTE_SHIFT);
 8002b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	74bb      	strb	r3, [r7, #18]
    }

    for (ucRetryCnt = 0; ucRetryCnt < MAX_RETRIES; ucRetryCnt++)    // API spec requires 3 attempts at setting new features. 
 8002b12:	2300      	movs	r3, #0
 8002b14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002b18:	e03c      	b.n	8002b94 <set_state_data+0xf8>
    {
        hid_i2c_cmd_process(ucSetFeatBuf, HID_SET_RPT_FEAT, SET_PARAMS.ucid);  // Send HID_SetFeature command to SSC7150 to update new features to the device
 8002b1a:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	2107      	movs	r1, #7
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe fef8 	bl	8001918 <hid_i2c_cmd_process>
        hid_i2c_cmd_process(ucGetFeatBuf, HID_GET_RPT_FEAT, SET_PARAMS.ucid);  // Send HID_GetFeature command to SSC7150 to check if new feature request to device were updated
 8002b28:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8002b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b30:	2105      	movs	r1, #5
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fef0 	bl	8001918 <hid_i2c_cmd_process>
        
        ucBufSize = ucGetFeatBuf[RPT_SIZE_LSB];                     // size (in bytes) of packet is in 1st byte
 8002b38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b3c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        for (ucGSptr = 0; ucGSptr < ucBufSize; ucGSptr++)           // Check to see if the features have been updated
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002b46:	e012      	b.n	8002b6e <set_state_data+0xd2>
        {
            if ( ucGetFeatBuf[ucGSptr] != ucSetFeatBuf[ucGSptr] ) 
 8002b48:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002b4c:	3358      	adds	r3, #88	; 0x58
 8002b4e:	443b      	add	r3, r7
 8002b50:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8002b54:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002b58:	3358      	adds	r3, #88	; 0x58
 8002b5a:	443b      	add	r3, r7
 8002b5c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10b      	bne.n	8002b7c <set_state_data+0xe0>
        for (ucGSptr = 0; ucGSptr < ucBufSize; ucGSptr++)           // Check to see if the features have been updated
 8002b64:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002b6e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002b72:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d3e6      	bcc.n	8002b48 <set_state_data+0xac>
 8002b7a:	e000      	b.n	8002b7e <set_state_data+0xe2>
                break;                                              //no they weren't, try again
 8002b7c:	bf00      	nop
        }

        if ( ucGSptr == ucBufSize )                                 //that's the whole packet, ALL data matches
 8002b7e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002b82:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d009      	beq.n	8002b9e <set_state_data+0x102>
    for (ucRetryCnt = 0; ucRetryCnt < MAX_RETRIES; ucRetryCnt++)    // API spec requires 3 attempts at setting new features. 
 8002b8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002b94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d9be      	bls.n	8002b1a <set_state_data+0x7e>
 8002b9c:	e000      	b.n	8002ba0 <set_state_data+0x104>
            break;                                                  //we're done
 8002b9e:	bf00      	nop
    }

    if (ucRetryCnt == MAX_RETRIES)
 8002ba0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d101      	bne.n	8002bac <set_state_data+0x110>
        return SET_FEAT_FAIL;                                       // Return error code
 8002ba8:	2317      	movs	r3, #23
 8002baa:	e000      	b.n	8002bae <set_state_data+0x112>
    
    else return SUCCESS;                                            // Return successful
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3758      	adds	r7, #88	; 0x58
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002bb8:	b004      	add	sp, #16
 8002bba:	4770      	bx	lr

08002bbc <parse_update_VREG_data>:
* @param ucSensorNum Sensor data struct checked for unit exponent value
* @param ucInpRep Pointer to input report data buffer
* @return 
*/ 
void parse_update_VREG_data (UINT8 ucSensorNum, UINT8 *ucInpRep)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	71fb      	strb	r3, [r7, #7]

    switch (ucSensorNum)                                            //update VREG data registers with their respective data.
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	2b09      	cmp	r3, #9
 8002bcc:	f200 820d 	bhi.w	8002fea <parse_update_VREG_data+0x42e>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <parse_update_VREG_data+0x1c>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002c01 	.word	0x08002c01
 8002bdc:	08002c69 	.word	0x08002c69
 8002be0:	08002cd1 	.word	0x08002cd1
 8002be4:	08002cf7 	.word	0x08002cf7
 8002be8:	08002d89 	.word	0x08002d89
 8002bec:	08002feb 	.word	0x08002feb
 8002bf0:	08002feb 	.word	0x08002feb
 8002bf4:	08002e03 	.word	0x08002e03
 8002bf8:	08002e81 	.word	0x08002e81
 8002bfc:	08002f73 	.word	0x08002f73
    {     
        case ACCEL_VREG_OFFSET:                                     // Accelerometer data has been read
 
            _VREGS._data.ACXD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset]);    // parse data from data offset found in report descriptor
 8002c00:	4b9d      	ldr	r3, [pc, #628]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002c02:	795b      	ldrb	r3, [r3, #5]
 8002c04:	3301      	adds	r3, #1
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	4a9a      	ldr	r2, [pc, #616]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002c10:	7952      	ldrb	r2, [r2, #5]
 8002c12:	4611      	mov	r1, r2
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	440a      	add	r2, r1
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b97      	ldr	r3, [pc, #604]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002c20:	659a      	str	r2, [r3, #88]	; 0x58
            _VREGS._data.ACYD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 2]);
 8002c22:	4b95      	ldr	r3, [pc, #596]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002c24:	795b      	ldrb	r3, [r3, #5]
 8002c26:	3303      	adds	r3, #3
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	4a91      	ldr	r2, [pc, #580]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002c32:	7952      	ldrb	r2, [r2, #5]
 8002c34:	3202      	adds	r2, #2
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	440a      	add	r2, r1
 8002c3a:	7812      	ldrb	r2, [r2, #0]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4b8e      	ldr	r3, [pc, #568]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002c42:	65da      	str	r2, [r3, #92]	; 0x5c
            _VREGS._data.ACZD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 4]);
 8002c44:	4b8c      	ldr	r3, [pc, #560]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002c46:	795b      	ldrb	r3, [r3, #5]
 8002c48:	3305      	adds	r3, #5
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	4a89      	ldr	r2, [pc, #548]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002c54:	7952      	ldrb	r2, [r2, #5]
 8002c56:	3204      	adds	r2, #4
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	440a      	add	r2, r1
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4b86      	ldr	r3, [pc, #536]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002c64:	661a      	str	r2, [r3, #96]	; 0x60
            break;
 8002c66:	e1c1      	b.n	8002fec <parse_update_VREG_data+0x430>

        case GYRO_VREG_OFFSET:                                      // Gyrometer data has been read
 
            _VREGS._data.GYXD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset]);
 8002c68:	4b83      	ldr	r3, [pc, #524]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002c6a:	7b1b      	ldrb	r3, [r3, #12]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	4a80      	ldr	r2, [pc, #512]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002c78:	7b12      	ldrb	r2, [r2, #12]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	440a      	add	r2, r1
 8002c80:	7812      	ldrb	r2, [r2, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b7d      	ldr	r3, [pc, #500]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002c88:	671a      	str	r2, [r3, #112]	; 0x70
            _VREGS._data.GYYD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 2]);
 8002c8a:	4b7b      	ldr	r3, [pc, #492]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002c8c:	7b1b      	ldrb	r3, [r3, #12]
 8002c8e:	3303      	adds	r3, #3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	4a77      	ldr	r2, [pc, #476]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002c9a:	7b12      	ldrb	r2, [r2, #12]
 8002c9c:	3202      	adds	r2, #2
 8002c9e:	6839      	ldr	r1, [r7, #0]
 8002ca0:	440a      	add	r2, r1
 8002ca2:	7812      	ldrb	r2, [r2, #0]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b74      	ldr	r3, [pc, #464]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002caa:	675a      	str	r2, [r3, #116]	; 0x74
            _VREGS._data.GYZD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 4]);
 8002cac:	4b72      	ldr	r3, [pc, #456]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002cae:	7b1b      	ldrb	r3, [r3, #12]
 8002cb0:	3305      	adds	r3, #5
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	4a6f      	ldr	r2, [pc, #444]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002cbc:	7b12      	ldrb	r2, [r2, #12]
 8002cbe:	3204      	adds	r2, #4
 8002cc0:	6839      	ldr	r1, [r7, #0]
 8002cc2:	440a      	add	r2, r1
 8002cc4:	7812      	ldrb	r2, [r2, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002ccc:	679a      	str	r2, [r3, #120]	; 0x78
            break;
 8002cce:	e18d      	b.n	8002fec <parse_update_VREG_data+0x430>

        case CMP_VREG_OFFSET:                                       // Compass data has been read
  
            _VREGS._data.CMD = ((ucInpRep[SENSOR[CMP_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[CMP_VREG_OFFSET].DatOffset]);
 8002cd0:	4b69      	ldr	r3, [pc, #420]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002cd2:	7cdb      	ldrb	r3, [r3, #19]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	4413      	add	r3, r2
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	4a66      	ldr	r2, [pc, #408]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002ce0:	7cd2      	ldrb	r2, [r2, #19]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	440a      	add	r2, r1
 8002ce8:	7812      	ldrb	r2, [r2, #0]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b63      	ldr	r3, [pc, #396]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            break;
 8002cf4:	e17a      	b.n	8002fec <parse_update_VREG_data+0x430>
        
        case ORI_VREG_OFFSET:                                       // Orientation data has been read

            _VREGS._data.ORXD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset]);
 8002cf6:	4b60      	ldr	r3, [pc, #384]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002cf8:	7e9b      	ldrb	r3, [r3, #26]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	4a5c      	ldr	r2, [pc, #368]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002d06:	7e92      	ldrb	r2, [r2, #26]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	440a      	add	r2, r1
 8002d0e:	7812      	ldrb	r2, [r2, #0]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002d16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            _VREGS._data.ORYD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 2]);
 8002d1a:	4b57      	ldr	r3, [pc, #348]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002d1c:	7e9b      	ldrb	r3, [r3, #26]
 8002d1e:	3303      	adds	r3, #3
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	4413      	add	r3, r2
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	4a53      	ldr	r2, [pc, #332]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002d2a:	7e92      	ldrb	r2, [r2, #26]
 8002d2c:	3202      	adds	r2, #2
 8002d2e:	6839      	ldr	r1, [r7, #0]
 8002d30:	440a      	add	r2, r1
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b50      	ldr	r3, [pc, #320]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002d3a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            _VREGS._data.ORZD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 4]);
 8002d3e:	4b4e      	ldr	r3, [pc, #312]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002d40:	7e9b      	ldrb	r3, [r3, #26]
 8002d42:	3305      	adds	r3, #5
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	4a4a      	ldr	r2, [pc, #296]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002d4e:	7e92      	ldrb	r2, [r2, #26]
 8002d50:	3204      	adds	r2, #4
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	440a      	add	r2, r1
 8002d56:	7812      	ldrb	r2, [r2, #0]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002d5e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
            _VREGS._data.ORWD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 7] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 6]);
 8002d62:	4b45      	ldr	r3, [pc, #276]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002d64:	7e9b      	ldrb	r3, [r3, #26]
 8002d66:	3307      	adds	r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	4a41      	ldr	r2, [pc, #260]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002d72:	7e92      	ldrb	r2, [r2, #26]
 8002d74:	3206      	adds	r2, #6
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	440a      	add	r2, r1
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002d82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            break;
 8002d86:	e131      	b.n	8002fec <parse_update_VREG_data+0x430>
       
        case INCL_VREG_OFFSET:                                      // Inclinometer data has been read

            _VREGS._data.INXD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset]);
 8002d88:	4b3b      	ldr	r3, [pc, #236]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002d8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d8e:	3301      	adds	r3, #1
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	4a37      	ldr	r2, [pc, #220]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002d9a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002d9e:	4611      	mov	r1, r2
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	440a      	add	r2, r1
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b34      	ldr	r3, [pc, #208]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002dac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            _VREGS._data.INYD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 2]);
 8002db0:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002db2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002db6:	3303      	adds	r3, #3
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002dc2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002dc6:	3202      	adds	r2, #2
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	440a      	add	r2, r1
 8002dcc:	7812      	ldrb	r2, [r2, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002dd4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
            _VREGS._data.INZD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 4]);
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002dda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dde:	3305      	adds	r3, #5
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	4a23      	ldr	r2, [pc, #140]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002dea:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002dee:	3204      	adds	r2, #4
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	440a      	add	r2, r1
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002dfc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
            break;
 8002e00:	e0f4      	b.n	8002fec <parse_update_VREG_data+0x430>

        case RAW_ACC_VREG_OFFSET:                                   // Raw data has been read
            
            _VREGS._data.RACXD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset]);
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002e04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002e08:	3301      	adds	r3, #1
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002e14:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8002e18:	4611      	mov	r1, r2
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	440a      	add	r2, r1
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002e26:	665a      	str	r2, [r3, #100]	; 0x64
            _VREGS._data.RACYD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 2]);
 8002e28:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002e2a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002e2e:	3303      	adds	r3, #3
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002e3a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8002e3e:	3202      	adds	r2, #2
 8002e40:	6839      	ldr	r1, [r7, #0]
 8002e42:	440a      	add	r2, r1
 8002e44:	7812      	ldrb	r2, [r2, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002e4c:	669a      	str	r2, [r3, #104]	; 0x68
            _VREGS._data.RACZD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 4]);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002e50:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002e54:	3305      	adds	r3, #5
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	4413      	add	r3, r2
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <parse_update_VREG_data+0x2bc>)
 8002e60:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8002e64:	3204      	adds	r2, #4
 8002e66:	6839      	ldr	r1, [r7, #0]
 8002e68:	440a      	add	r2, r1
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <parse_update_VREG_data+0x2c0>)
 8002e72:	66da      	str	r2, [r3, #108]	; 0x6c
            break;
 8002e74:	e0ba      	b.n	8002fec <parse_update_VREG_data+0x430>
 8002e76:	bf00      	nop
 8002e78:	20000118 	.word	0x20000118
 8002e7c:	2000110c 	.word	0x2000110c
       
        case RAW_MAG_VREG_OFFSET:                                   // Raw MAG data has been read
            
            _VREGS._data.MGFXD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset]);
 8002e80:	4b5d      	ldr	r3, [pc, #372]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	3301      	adds	r3, #1
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	4a59      	ldr	r2, [pc, #356]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002e92:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002e96:	4611      	mov	r1, r2
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	440a      	add	r2, r1
 8002e9c:	7812      	ldrb	r2, [r2, #0]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <parse_update_VREG_data+0x440>)
 8002ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            _VREGS._data.MGFYD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 2]);
 8002ea8:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eae:	3303      	adds	r3, #3
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	4a4f      	ldr	r2, [pc, #316]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002eba:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002ebe:	3202      	adds	r2, #2
 8002ec0:	6839      	ldr	r1, [r7, #0]
 8002ec2:	440a      	add	r2, r1
 8002ec4:	7812      	ldrb	r2, [r2, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <parse_update_VREG_data+0x440>)
 8002ecc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            _VREGS._data.MGFZD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 4]);
 8002ed0:	4b49      	ldr	r3, [pc, #292]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed6:	3305      	adds	r3, #5
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	4a45      	ldr	r2, [pc, #276]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002ee2:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002ee6:	3204      	adds	r2, #4
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	440a      	add	r2, r1
 8002eec:	7812      	ldrb	r2, [r2, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b42      	ldr	r3, [pc, #264]	; (8002ffc <parse_update_VREG_data+0x440>)
 8002ef4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            _VREGS._data.RMGXD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 7] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 6]);
 8002ef8:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efe:	3307      	adds	r3, #7
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	4a3b      	ldr	r2, [pc, #236]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002f0a:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002f0e:	3206      	adds	r2, #6
 8002f10:	6839      	ldr	r1, [r7, #0]
 8002f12:	440a      	add	r2, r1
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <parse_update_VREG_data+0x440>)
 8002f1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            _VREGS._data.RMGYD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 9] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 8]);
 8002f20:	4b35      	ldr	r3, [pc, #212]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	3309      	adds	r3, #9
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	4a31      	ldr	r2, [pc, #196]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002f32:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002f36:	3208      	adds	r2, #8
 8002f38:	6839      	ldr	r1, [r7, #0]
 8002f3a:	440a      	add	r2, r1
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <parse_update_VREG_data+0x440>)
 8002f44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            _VREGS._data.RMGZD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 11] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 10]);
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4e:	330b      	adds	r3, #11
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002f5a:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002f5e:	320a      	adds	r2, #10
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	440a      	add	r2, r1
 8002f64:	7812      	ldrb	r2, [r2, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <parse_update_VREG_data+0x440>)
 8002f6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            break;
 8002f70:	e03c      	b.n	8002fec <parse_update_VREG_data+0x430>
        
        case RAW_GYR_VREG_OFFSET:                                   // Raw GYRO data has been read
            
            _VREGS._data.RGYXD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset]);
 8002f72:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f78:	3301      	adds	r3, #1
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002f84:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8002f88:	4611      	mov	r1, r2
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	440a      	add	r2, r1
 8002f8e:	7812      	ldrb	r2, [r2, #0]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	461a      	mov	r2, r3
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <parse_update_VREG_data+0x440>)
 8002f96:	67da      	str	r2, [r3, #124]	; 0x7c
            _VREGS._data.RGYYD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 2]);
 8002f98:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f9e:	3303      	adds	r3, #3
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002faa:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8002fae:	3202      	adds	r2, #2
 8002fb0:	6839      	ldr	r1, [r7, #0]
 8002fb2:	440a      	add	r2, r1
 8002fb4:	7812      	ldrb	r2, [r2, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <parse_update_VREG_data+0x440>)
 8002fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            _VREGS._data.RGYZD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 4]);
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fc6:	3305      	adds	r3, #5
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <parse_update_VREG_data+0x43c>)
 8002fd2:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8002fd6:	3204      	adds	r2, #4
 8002fd8:	6839      	ldr	r1, [r7, #0]
 8002fda:	440a      	add	r2, r1
 8002fdc:	7812      	ldrb	r2, [r2, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <parse_update_VREG_data+0x440>)
 8002fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
 8002fe8:	e000      	b.n	8002fec <parse_update_VREG_data+0x430>

        default:
            break;
 8002fea:	bf00      	nop
    }
    return;
 8002fec:	bf00      	nop
}
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	20000118 	.word	0x20000118
 8002ffc:	2000110c 	.word	0x2000110c

08003000 <HOST_SF_LIB_VREG_read>:
* @param ucRegOffset VREG register of interest
* @param usData Ptr for 16 bit value
* @return completion status 0=SUCCESS, failcodes: 0x31=HID_INT_FAIL, 0x33=VREG_OFFSET_ERR,  
*/ 
UINT8 HOST_SF_LIB_VREG_read(UINT8 ucRegOffset, UINT16 *usData)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b090      	sub	sp, #64	; 0x40
 8003004:	af02      	add	r7, sp, #8
 8003006:	4603      	mov	r3, r0
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	71fb      	strb	r3, [r7, #7]
    UINT8 ucRet = FALSE;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    UINT8 ucRx_data[BUF_40];
    UINT8 ucSensorNum;
    UINT16 *usRegPtr;                                               // Pointer to individual register

    if (ucRegOffset > VREG_MAX_OFFSET)                              //make sure this is within the VREG register set 
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	2b3f      	cmp	r3, #63	; 0x3f
 8003016:	d901      	bls.n	800301c <HOST_SF_LIB_VREG_read+0x1c>
        return VREG_OFFSET_ERR;
 8003018:	2333      	movs	r3, #51	; 0x33
 800301a:	e050      	b.n	80030be <HOST_SF_LIB_VREG_read+0xbe>

    usRegPtr = (UINT16 *)&_VREGS.SHC;                                // Set the pointer to SHC (VREG00 register)
 800301c:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <HOST_SF_LIB_VREG_read+0xc8>)
 800301e:	633b      	str	r3, [r7, #48]	; 0x30

    if (EC_DATA_AVAIL)                                              //SSC7150 sensor has data available for us to read
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <HOST_SF_LIB_VREG_read+0xcc>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03f      	beq.n	80030aa <HOST_SF_LIB_VREG_read+0xaa>
    {       
        ucRet = i2c_cmd_WrRd (READ,                                  // Read the data from the SSC7150
 800302a:	2301      	movs	r3, #1
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2303      	movs	r3, #3
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	2002      	movs	r0, #2
 800303c:	f7fe f8a0 	bl	8001180 <i2c_cmd_WrRd>
 8003040:	4603      	mov	r3, r0
 8003042:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                            0,                                      //num of cmd bytes
                            0,                                      //cmd buf (ignored)
                            BYTE_ADJ_VAL,                           //num of bytes to read
                            ucRx_data,                              //recv buf 
                            TRUE);                                  //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"
        if (ucRet) 
 8003046:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HOST_SF_LIB_VREG_read+0x52>
            return HID_INT_FAIL;
 800304e:	2331      	movs	r3, #49	; 0x31
 8003050:	e035      	b.n	80030be <HOST_SF_LIB_VREG_read+0xbe>

        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data 
 8003052:	2300      	movs	r3, #0
 8003054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003058:	e023      	b.n	80030a2 <HOST_SF_LIB_VREG_read+0xa2>
        {              
            if (ucRx_data[2] == SENSOR[ucSensorNum].id)          //1st two bytes of read data packet hold size of packet, then data begins at byte 2
 800305a:	7ab9      	ldrb	r1, [r7, #10]
 800305c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003060:	481b      	ldr	r0, [pc, #108]	; (80030d0 <HOST_SF_LIB_VREG_read+0xd0>)
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	4403      	add	r3, r0
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4299      	cmp	r1, r3
 800306e:	d113      	bne.n	8003098 <HOST_SF_LIB_VREG_read+0x98>
            {
                if (*usRegPtr & (1 << (ucSensorNum + VREG_SHC_ACC_EN_VAL))) // If the incoming data belongs to an enabled sensor (in SHC (VREGS00))
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003078:	3204      	adds	r2, #4
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f202 	lsl.w	r2, r1, r2
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HOST_SF_LIB_VREG_read+0x98>
                {
                    parse_update_VREG_data(ucSensorNum, ucRx_data); //store data in appropriate VREG data registers
 8003086:	f107 0208 	add.w	r2, r7, #8
 800308a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fd93 	bl	8002bbc <parse_update_VREG_data>
                    break;                                          //found correct enabled sensor, no reason to look further
 8003096:	e008      	b.n	80030aa <HOST_SF_LIB_VREG_read+0xaa>
        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data 
 8003098:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800309c:	3301      	adds	r3, #1
 800309e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80030a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030a6:	2b0b      	cmp	r3, #11
 80030a8:	d9d7      	bls.n	800305a <HOST_SF_LIB_VREG_read+0x5a>
                }
            }            
        }   
    }

    usRegPtr += (UINT16) ucRegOffset;                               //point to VREG specified by input parameter 'ucRegOffset'
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b0:	4413      	add	r3, r2
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
    *usData = *usRegPtr;                                            //return the register contents specified by the read command
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	601a      	str	r2, [r3, #0]
    return SUCCESS;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3738      	adds	r7, #56	; 0x38
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	2000110c 	.word	0x2000110c
 80030cc:	200000f1 	.word	0x200000f1
 80030d0:	20000118 	.word	0x20000118

080030d4 <HOST_SF_LIB_VREG_write>:
* @param ucRegOffset VREG register of interest
* @param usData Data to be written to device
* @return completion status 0=SUCCESS, failcodes: 0x32=VREG_ACCESS_ERR, 0x33=VREG_OFFSET_ERR, 0x31=HID_INT_FAIL, 0x17=SET_FEAT_FAIL, 0x18=RESET_FAIL, 0x1E=WAKE_CMD_FAIL, 0x1B=SLEEP_CMD_FAIL 
*/ 
UINT8 HOST_SF_LIB_VREG_write(UINT8 ucRegOffset, UINT16 usData)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b094      	sub	sp, #80	; 0x50
 80030d8:	af02      	add	r7, sp, #8
 80030da:	4603      	mov	r3, r0
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	71fb      	strb	r3, [r7, #7]
    UINT8 ucRet = FALSE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    UINT16 *usRegPtr, *usStat_ptr, *usSHC_ptr;                      // Pointer to individual register
    UINT16 usMask;
    UINT8 ucRx_data[BUF_40];                                        // local buffer for i2c comm
    UINT8 ucId = 0xFF;
 80030e6:	23ff      	movs	r3, #255	; 0xff
 80030e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    UINT8 ucBitOffset, ucAdjustedPtr, ucSensorNum, usTmpStatptr, ucTmpStatVal, ucTmpPtr;


    if (ucRegOffset > VREG_MAX_OFFSET)                              //make sure this is within the VREG register set 
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	2b3f      	cmp	r3, #63	; 0x3f
 80030f0:	d901      	bls.n	80030f6 <HOST_SF_LIB_VREG_write+0x22>
        return VREG_OFFSET_ERR;
 80030f2:	2333      	movs	r3, #51	; 0x33
 80030f4:	e3a9      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>

    if ( (ucRegOffset == VREG_SL || (ucRegOffset >= VREG_ACXD && ucRegOffset <= VREG_EXPCSS3) ) ) // If the requested register is READ ONLY, return an error
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d005      	beq.n	8003108 <HOST_SF_LIB_VREG_write+0x34>
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	2b15      	cmp	r3, #21
 8003100:	d904      	bls.n	800310c <HOST_SF_LIB_VREG_write+0x38>
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	2b3e      	cmp	r3, #62	; 0x3e
 8003106:	d801      	bhi.n	800310c <HOST_SF_LIB_VREG_write+0x38>
         return VREG_ACCESS_ERR;
 8003108:	2332      	movs	r3, #50	; 0x32
 800310a:	e39e      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>

    usSHC_ptr = (UINT16 *)&_VREGS.SHC;                               // Set pointers to SHC (VREG00 register)
 800310c:	4ba9      	ldr	r3, [pc, #676]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 800310e:	63bb      	str	r3, [r7, #56]	; 0x38
  
    usPREV_SHC_STATE = *usSHC_ptr;                                  //save previous state of SHC VREG contents for comparison 
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4aa8      	ldr	r2, [pc, #672]	; (80033b8 <HOST_SF_LIB_VREG_write+0x2e4>)
 8003116:	6013      	str	r3, [r2, #0]

    usRegPtr = usSHC_ptr + (UINT16)ucRegOffset;                     //point to VREG specified by input parameter 'ucRegOffset'
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800311e:	4413      	add	r3, r2
 8003120:	637b      	str	r3, [r7, #52]	; 0x34

    if (_VREGS.SHC.SHstart)                                          // this bit set during VREG_init and after RESET (no user access to this bit)
 8003122:	4ba4      	ldr	r3, [pc, #656]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8346 	beq.w	80037be <HOST_SF_LIB_VREG_write+0x6ea>
    { 
        SET_PARAMS.ucPowerState = FULL_POWER;                       //initialize parameters for SetFeature call (NOTE: set to LOW_POWER when disabling sensor)
 8003132:	4ba2      	ldr	r3, [pc, #648]	; (80033bc <HOST_SF_LIB_VREG_write+0x2e8>)
 8003134:	2202      	movs	r2, #2
 8003136:	705a      	strb	r2, [r3, #1]
        SET_PARAMS.bSensitivityValid = FALSE;
 8003138:	4ba0      	ldr	r3, [pc, #640]	; (80033bc <HOST_SF_LIB_VREG_write+0x2e8>)
 800313a:	2200      	movs	r2, #0
 800313c:	721a      	strb	r2, [r3, #8]
        SET_PARAMS.bDataRateValid = FALSE;
 800313e:	4b9f      	ldr	r3, [pc, #636]	; (80033bc <HOST_SF_LIB_VREG_write+0x2e8>)
 8003140:	2200      	movs	r2, #0
 8003142:	741a      	strb	r2, [r3, #16]
        
        if (ucRegOffset == VREG_SHC)                                // If the command will be written to the SHC register
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 819b 	bne.w	8003482 <HOST_SF_LIB_VREG_write+0x3ae>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Set the status register pointer to the first status register
 800314c:	4b9c      	ldr	r3, [pc, #624]	; (80033c0 <HOST_SF_LIB_VREG_write+0x2ec>)
 800314e:	647b      	str	r3, [r7, #68]	; 0x44

       /*****************RESET COMMAND********************/
            if (usData & VREG_SHC_RST_BIT)                          // Reset bit has been set
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02a      	beq.n	80031b0 <HOST_SF_LIB_VREG_write+0xdc>
            {
                if (!hid_i2c_cmd_process(0, RESET_DEV_CMD, ARB_ID)) // Issue the reset command (parameters 1 and 3 are not used)
 800315a:	2201      	movs	r2, #1
 800315c:	2101      	movs	r1, #1
 800315e:	2000      	movs	r0, #0
 8003160:	f7fe fbda 	bl	8001918 <hid_i2c_cmd_process>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d119      	bne.n	800319e <HOST_SF_LIB_VREG_write+0xca>
                {
                    memset(&_VREGS, 0x00, sizeof(_VREGS));            // Initialize VREG registers to POR values
 800316a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800316e:	2100      	movs	r1, #0
 8003170:	4890      	ldr	r0, [pc, #576]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003172:	f006 fdec 	bl	8009d4e <memset>
                    _VREGS.stat.stat4.ResetStatus = VREG_RST_CMD_SUCCESS; // Status update to notify command set succesful
 8003176:	4a8f      	ldr	r2, [pc, #572]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003178:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 800317c:	2101      	movs	r1, #1
 800317e:	f361 1346 	bfi	r3, r1, #5, #2
 8003182:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
                    _VREGS.SHC.SHstart = TRUE;
 8003186:	4a8b      	ldr	r2, [pc, #556]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003188:	7813      	ldrb	r3, [r2, #0]
 800318a:	f043 0304 	orr.w	r3, r3, #4
 800318e:	7013      	strb	r3, [r2, #0]
                    _VREGS.SHC.SHwake = TRUE;
 8003190:	4a88      	ldr	r2, [pc, #544]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003192:	7813      	ldrb	r3, [r2, #0]
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	7013      	strb	r3, [r2, #0]
                    return SUCCESS;                                 //return success (all VREG bits have been reset to POR values)
 800319a:	2300      	movs	r3, #0
 800319c:	e355      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>
                }
                else
                {
                    _VREGS.stat.stat4.ResetStatus = VREG_RESET_CMD_FAIL; // Status update to notify command set error occurred
 800319e:	4a85      	ldr	r2, [pc, #532]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 80031a0:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 80031a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031a8:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
                    return RESET_FAIL;
 80031ac:	2318      	movs	r3, #24
 80031ae:	e34c      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>
                }
            }

       /*****************WAKE COMMAND********************/
            if (usData & VREG_SHC_WAKE_BIT)                         // wake bit set?
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d032      	beq.n	8003220 <HOST_SF_LIB_VREG_write+0x14c>
            {
                if ((usPREV_SHC_STATE & VREG_SHC_WAKE_BIT) == 0)    // this bit was not previously set, issue wake command
 80031ba:	4b7f      	ldr	r3, [pc, #508]	; (80033b8 <HOST_SF_LIB_VREG_write+0x2e4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d12c      	bne.n	8003220 <HOST_SF_LIB_VREG_write+0x14c>
                {
                    Wake_signal();                                   //assert wake signal (1 ms toggle of RE9 signal to SSC150)
 80031c6:	f7ff fa95 	bl	80026f4 <Wake_signal>

                    HAL_Delay(12);                                      //wait 12 ms (11 ms min per spec) after wake signal and before sending POWER_ON command to SSC7150
 80031ca:	200c      	movs	r0, #12
 80031cc:	f000 fbac 	bl	8003928 <HAL_Delay>
                                        
                    if (!hid_i2c_cmd_process(0, POWER_ON, ARB_ID))  // Issue the wake command (parameters 1 and 3 are not used)
 80031d0:	2201      	movs	r2, #1
 80031d2:	2102      	movs	r1, #2
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fe fb9f 	bl	8001918 <hid_i2c_cmd_process>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d115      	bne.n	800320c <HOST_SF_LIB_VREG_write+0x138>
                    {
                        _VREGS.SHC.sleep = FALSE;                    //clear the sleep bit as per API spec
 80031e0:	4a74      	ldr	r2, [pc, #464]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 80031e2:	7813      	ldrb	r3, [r2, #0]
 80031e4:	f36f 0341 	bfc	r3, #1, #1
 80031e8:	7013      	strb	r3, [r2, #0]
                        _VREGS.SHC.SHwake = TRUE;
 80031ea:	4a72      	ldr	r2, [pc, #456]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 80031ec:	7813      	ldrb	r3, [r2, #0]
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	7013      	strb	r3, [r2, #0]
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_WAKE_SUCCESS; // Status update to notify command set succesful
 80031f4:	4a6f      	ldr	r2, [pc, #444]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 80031f6:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 80031fa:	2102      	movs	r1, #2
 80031fc:	f361 13c9 	bfi	r3, r1, #7, #3
 8003200:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                                                
                        //spec says must wait a minimum of 30 ms before next command to SSC7150, so let's wait here...
                        HAL_Delay(31);                                  //dDlay_ms 31 ms (30 ms min per spec)
 8003204:	201f      	movs	r0, #31
 8003206:	f000 fb8f 	bl	8003928 <HAL_Delay>
 800320a:	e009      	b.n	8003220 <HOST_SF_LIB_VREG_write+0x14c>
                    }
                    else
                    {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_WAKE_FAIL; // Status update to notify command set error occurred
 800320c:	4a69      	ldr	r2, [pc, #420]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 800320e:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 8003212:	2106      	movs	r1, #6
 8003214:	f361 13c9 	bfi	r3, r1, #7, #3
 8003218:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        return WAKE_CMD_FAIL;
 800321c:	231e      	movs	r3, #30
 800321e:	e314      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>
                    }
                }
            }
            
            /*****************SLEEP COMMAND********************/
            if (usData & VREG_SHC_SLP_BIT)                          //sleep bit set?
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d03a      	beq.n	80032a0 <HOST_SF_LIB_VREG_write+0x1cc>
            {
                //check if any sensors are enabled, if they are then CLEAR SHC Sleep bit and return without setting status bit as per API spec
                if ( (usData & ~(VREG_SHC_SLP_BIT | VREG_SHC_START_BIT) ) > (VREG_SHC_SLP_BIT | VREG_SHC_START_BIT | VREG_SHC_WAKE_BIT) )
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f023 0306 	bic.w	r3, r3, #6
 8003230:	2b07      	cmp	r3, #7
 8003232:	d906      	bls.n	8003242 <HOST_SF_LIB_VREG_write+0x16e>
                {
                    _VREGS.SHC.sleep = FALSE;
 8003234:	4a5f      	ldr	r2, [pc, #380]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003236:	7813      	ldrb	r3, [r2, #0]
 8003238:	f36f 0341 	bfc	r3, #1, #1
 800323c:	7013      	strb	r3, [r2, #0]
                    return SUCCESS;                                 //although the sleep command wasn't issued, don't return any error because user shouldn't issue sleep with any sensors enabled
 800323e:	2300      	movs	r3, #0
 8003240:	e303      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>
                }

                if ((usPREV_SHC_STATE & VREG_SHC_SLP_BIT) == 0)     // this bit was not previously set, issue sleep command
 8003242:	4b5d      	ldr	r3, [pc, #372]	; (80033b8 <HOST_SF_LIB_VREG_write+0x2e4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d128      	bne.n	80032a0 <HOST_SF_LIB_VREG_write+0x1cc>
                {
                    if (!hid_i2c_cmd_process(0, SLEEP, ARB_ID))     // Issue the sleep command (parameters 1 and 3 are not used)
 800324e:	2201      	movs	r2, #1
 8003250:	2103      	movs	r1, #3
 8003252:	2000      	movs	r0, #0
 8003254:	f7fe fb60 	bl	8001918 <hid_i2c_cmd_process>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d116      	bne.n	800328c <HOST_SF_LIB_VREG_write+0x1b8>
                    {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_SLEEP_SUCCESS; // Status update to notify command set succesful
 800325e:	4a55      	ldr	r2, [pc, #340]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003260:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 8003264:	2101      	movs	r1, #1
 8003266:	f361 13c9 	bfi	r3, r1, #7, #3
 800326a:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        _VREGS.SHC.sleep = TRUE;                     // Set SHC (VREG00) to show SSC7150 device is asleep   
 800326e:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003270:	7813      	ldrb	r3, [r2, #0]
 8003272:	f043 0302 	orr.w	r3, r3, #2
 8003276:	7013      	strb	r3, [r2, #0]
                        _VREGS.SHC.SHwake = FALSE;                   // Clear SHC (VREG00) bit that shows device is not awake
 8003278:	4a4e      	ldr	r2, [pc, #312]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 800327a:	7813      	ldrb	r3, [r2, #0]
 800327c:	f36f 0300 	bfc	r3, #0, #1
 8003280:	7013      	strb	r3, [r2, #0]
                        
                        //spec says must wait a minimum of 70 ms before wake command, so let's wait here...
                        HAL_Delay(71);                                  //dDlay_ms 71 ms (70 ms min per spec)
 8003282:	2047      	movs	r0, #71	; 0x47
 8003284:	f000 fb50 	bl	8003928 <HAL_Delay>
                                                
                        return SUCCESS;                             // no need to continue checking (since we already checked if any sensors were enabled) and we won't wake & sleep at the same time
 8003288:	2300      	movs	r3, #0
 800328a:	e2de      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>
                   }
                   else
                   {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_SLEEP_FAIL;  // Status update to notify command set error occurred
 800328c:	4a49      	ldr	r2, [pc, #292]	; (80033b4 <HOST_SF_LIB_VREG_write+0x2e0>)
 800328e:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 8003292:	2105      	movs	r1, #5
 8003294:	f361 13c9 	bfi	r3, r1, #7, #3
 8003298:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        return SLEEP_CMD_FAIL;
 800329c:	231b      	movs	r3, #27
 800329e:	e2d4      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>
                   }
                }
            }

        /*****************ENABLE SENSOR COMMANDS********************/
            ucTmpStatVal = 0;                                       //initialize for the case of disabling ALL sensors
 80032a0:	2300      	movs	r3, #0
 80032a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            
            for (ucBitOffset = VREG_SHC_ACC_EN_VAL; ucBitOffset <= VREG_SHC_RAWGYR_EN_VAL; ucBitOffset++) // Runs through bits relevant to sensor enable/disable (in VREG00) and executes command
 80032a6:	2304      	movs	r3, #4
 80032a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80032ac:	e0de      	b.n	800346c <HOST_SF_LIB_VREG_write+0x398>
            {
                ucAdjustedPtr = ucBitOffset;
 80032ae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80032b2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            
                if (ucBitOffset == VREG_SHC_RAWMAG_EN_VAL)          // bit 12 in VREG00 corresponds to Raw Mag. This is bit0 of VREG3D (Stat2)
 80032b6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d102      	bne.n	80032c4 <HOST_SF_LIB_VREG_write+0x1f0>
                    usStat_ptr++;                                   //  so we need to increment the status reg pointer
 80032be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c0:	3304      	adds	r3, #4
 80032c2:	647b      	str	r3, [r7, #68]	; 0x44
            
                if ( ((1 << ucBitOffset) & usData) || (usPREV_SHC_STATE & (1 << ucBitOffset)) ) //is enable bit set now OR was it previously set?
 80032c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80032c8:	2201      	movs	r2, #1
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HOST_SF_LIB_VREG_write+0x21c>
 80032d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80032dc:	2201      	movs	r2, #1
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <HOST_SF_LIB_VREG_write+0x2e4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80b9 	beq.w	8003462 <HOST_SF_LIB_VREG_write+0x38e>
                {

                    usTmpStatptr = ucBitOffset;                     // do some pre-calculation for sensor stat bit position
 80032f0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80032f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

                    if (usTmpStatptr >= VREG_SHC_RAWMAG_EN_VAL)     // Set appropriate offset if the sensor falls in stat2
 80032f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80032fc:	2b0b      	cmp	r3, #11
 80032fe:	d904      	bls.n	800330a <HOST_SF_LIB_VREG_write+0x236>
                        usTmpStatptr = ucBitOffset - 8;
 8003300:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003304:	3b08      	subs	r3, #8
 8003306:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    ucTmpStatVal = VREG_ENABLE_SUCCESS;             // success status value for VREG status reg
 800330a:	2301      	movs	r3, #1
 800330c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


                    if ((1 << ucBitOffset) & usData)                // this sensor's enable bit is set
 8003310:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003314:	2201      	movs	r2, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	461a      	mov	r2, r3
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d051      	beq.n	80033c8 <HOST_SF_LIB_VREG_write+0x2f4>
                    {
                        if ((usPREV_SHC_STATE & (1 << ucBitOffset)) == 0) // this bit was not previously set, need to set this sensor to FULL_POWER      
 8003324:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003328:	2201      	movs	r2, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	461a      	mov	r2, r3
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HOST_SF_LIB_VREG_write+0x2e4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 8093 	bne.w	8003462 <HOST_SF_LIB_VREG_write+0x38e>
                        {                           
                            SET_PARAMS.ucid = SENSOR[ucAdjustedPtr - VREG_SHC_ACC_EN_VAL].id;
 800333c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003340:	1f1a      	subs	r2, r3, #4
 8003342:	4920      	ldr	r1, [pc, #128]	; (80033c4 <HOST_SF_LIB_VREG_write+0x2f0>)
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	440b      	add	r3, r1
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HOST_SF_LIB_VREG_write+0x2e8>)
 8003350:	701a      	strb	r2, [r3, #0]
                            
                            if (set_state_data(SET_PARAMS))         // Set this sensor to FULL POWER
 8003352:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <HOST_SF_LIB_VREG_write+0x2e8>)
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	9200      	str	r2, [sp, #0]
 8003358:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800335a:	f7ff fb9f 	bl	8002a9c <set_state_data>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HOST_SF_LIB_VREG_write+0x296>
                                ucTmpStatVal = VREG_ENA_DIS_FAIL;   // Error occurred, write an error code to the sensor status register
 8003364:	2303      	movs	r3, #3
 8003366:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                            *usStat_ptr &= ~(STATUS1_MASK << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); //clear stat bits before updating
 800336a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003372:	3a04      	subs	r2, #4
 8003374:	0052      	lsls	r2, r2, #1
 8003376:	2103      	movs	r1, #3
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	43d2      	mvns	r2, r2
 800337e:	401a      	ands	r2, r3
 8003380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003382:	601a      	str	r2, [r3, #0]
                            *usStat_ptr |= (ucTmpStatVal << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL)));  // Write applicable status value to VREG status register
 8003384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 800338c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003390:	3a04      	subs	r2, #4
 8003392:	0052      	lsls	r2, r2, #1
 8003394:	fa01 f202 	lsl.w	r2, r1, r2
 8003398:	431a      	orrs	r2, r3
 800339a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339c:	601a      	str	r2, [r3, #0]
                            *usSHC_ptr |= (1 << ucBitOffset);       // Set the sensor enable bit in VREG00          
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ac:	431a      	orrs	r2, r3
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e056      	b.n	8003462 <HOST_SF_LIB_VREG_write+0x38e>
 80033b4:	2000110c 	.word	0x2000110c
 80033b8:	2000122c 	.word	0x2000122c
 80033bc:	20001218 	.word	0x20001218
 80033c0:	20001208 	.word	0x20001208
 80033c4:	20000118 	.word	0x20000118
                        }
                        //else if this sensor's enable bit was previously set, no need to do anything 
                    }

                    else if (usPREV_SHC_STATE & (1 << ucBitOffset)) // this sensor's enable bit is not set now, but it was enabled previously, send LOW POWER command 
 80033c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80033cc:	2201      	movs	r2, #1
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	4bac      	ldr	r3, [pc, #688]	; (8003688 <HOST_SF_LIB_VREG_write+0x5b4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d041      	beq.n	8003462 <HOST_SF_LIB_VREG_write+0x38e>
                    {
                        ucTmpStatVal = VREG_DISABLE_SUCCESS;        //successful disable status value
 80033de:	2302      	movs	r3, #2
 80033e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                        SET_PARAMS.ucid = SENSOR[ucAdjustedPtr - VREG_SHC_ACC_EN_VAL].id;
 80033e4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80033e8:	1f1a      	subs	r2, r3, #4
 80033ea:	49a8      	ldr	r1, [pc, #672]	; (800368c <HOST_SF_LIB_VREG_write+0x5b8>)
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	440b      	add	r3, r1
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	4ba6      	ldr	r3, [pc, #664]	; (8003690 <HOST_SF_LIB_VREG_write+0x5bc>)
 80033f8:	701a      	strb	r2, [r3, #0]
                        SET_PARAMS.ucPowerState = LOW_POWER;        //set sensor to LOW POWER
 80033fa:	4ba5      	ldr	r3, [pc, #660]	; (8003690 <HOST_SF_LIB_VREG_write+0x5bc>)
 80033fc:	2203      	movs	r2, #3
 80033fe:	705a      	strb	r2, [r3, #1]
                        if (set_state_data(SET_PARAMS))             // Sensor should be disabled
 8003400:	4ba3      	ldr	r3, [pc, #652]	; (8003690 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	9200      	str	r2, [sp, #0]
 8003406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003408:	f7ff fb48 	bl	8002a9c <set_state_data>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HOST_SF_LIB_VREG_write+0x344>
                            ucTmpStatVal = VREG_ENA_DIS_FAIL;       // Error occurred, write an error code to the sensor status register
 8003412:	2303      	movs	r3, #3
 8003414:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                        *usStat_ptr &= ~(STATUS1_MASK << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); //clear stat bits before updating
 8003418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003420:	3a04      	subs	r2, #4
 8003422:	0052      	lsls	r2, r2, #1
 8003424:	2103      	movs	r1, #3
 8003426:	fa01 f202 	lsl.w	r2, r1, r2
 800342a:	43d2      	mvns	r2, r2
 800342c:	401a      	ands	r2, r3
 800342e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003430:	601a      	str	r2, [r3, #0]
                        *usStat_ptr |= (ucTmpStatVal << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); // Write appropriate status value to the status register
 8003432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 800343a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800343e:	3a04      	subs	r2, #4
 8003440:	0052      	lsls	r2, r2, #1
 8003442:	fa01 f202 	lsl.w	r2, r1, r2
 8003446:	431a      	orrs	r2, r3
 8003448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344a:	601a      	str	r2, [r3, #0]
                        *usSHC_ptr &= ~(1 << ucBitOffset);          // Clear the sensor enable bit in VREG00        
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8003454:	2101      	movs	r1, #1
 8003456:	fa01 f202 	lsl.w	r2, r1, r2
 800345a:	43d2      	mvns	r2, r2
 800345c:	401a      	ands	r2, r3
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	601a      	str	r2, [r3, #0]
            for (ucBitOffset = VREG_SHC_ACC_EN_VAL; ucBitOffset <= VREG_SHC_RAWGYR_EN_VAL; ucBitOffset++) // Runs through bits relevant to sensor enable/disable (in VREG00) and executes command
 8003462:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003466:	3301      	adds	r3, #1
 8003468:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800346c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003470:	2b0d      	cmp	r3, #13
 8003472:	f67f af1c 	bls.w	80032ae <HOST_SF_LIB_VREG_write+0x1da>
                    }
                }
            }
            
            if (ucTmpStatVal == VREG_ENA_DIS_FAIL) 
 8003476:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800347a:	2b03      	cmp	r3, #3
 800347c:	d101      	bne.n	8003482 <HOST_SF_LIB_VREG_write+0x3ae>
                return SET_FEAT_FAIL;
 800347e:	2317      	movs	r3, #23
 8003480:	e1e3      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>
        }   //end of SHC register

    /*****************SENSITIVITY-CHANGE COMMAND********************/
        if (ucRegOffset >= VREG_ACSEN && ucRegOffset <= VREG_RGYSEN) // data will be written to VREG sensitivity register
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	2b01      	cmp	r3, #1
 8003486:	f240 80a1 	bls.w	80035cc <HOST_SF_LIB_VREG_write+0x4f8>
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	2b0b      	cmp	r3, #11
 800348e:	f200 809d 	bhi.w	80035cc <HOST_SF_LIB_VREG_write+0x4f8>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Reset the status register pointer to the first status register (VREG3C)
 8003492:	4b80      	ldr	r3, [pc, #512]	; (8003694 <HOST_SF_LIB_VREG_write+0x5c0>)
 8003494:	647b      	str	r3, [r7, #68]	; 0x44
            usStat_ptr++;                                           // Increment to status register (VREG3D) for change in sensitivity (CS) stat bits
 8003496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003498:	3304      	adds	r3, #4
 800349a:	647b      	str	r3, [r7, #68]	; 0x44
        
            for (ucTmpPtr = VREG_ACSEN; ucTmpPtr <= VREG_RGYSEN; ucTmpPtr++) // Loop through the VREG sensitivity registers
 800349c:	2302      	movs	r3, #2
 800349e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80034a2:	e024      	b.n	80034ee <HOST_SF_LIB_VREG_write+0x41a>
            {
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 80034a4:	79fa      	ldrb	r2, [r7, #7]
 80034a6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d11a      	bne.n	80034e4 <HOST_SF_LIB_VREG_write+0x410>
                    (*usSHC_ptr & (1 << (ucTmpPtr + VREG_ACSEN))) )
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80034b6:	3202      	adds	r2, #2
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f202 	lsl.w	r2, r1, r2
 80034be:	4013      	ands	r3, r2
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00f      	beq.n	80034e4 <HOST_SF_LIB_VREG_write+0x410>
                {
                    ucAdjustedPtr = ucTmpPtr - VREG_ACSEN;          //offset from first sensitivity VREG
 80034c4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80034c8:	3b02      	subs	r3, #2
 80034ca:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                    
                    ucId = SENSOR[ucAdjustedPtr].id;                // Set variable equal to id of current sensor
 80034ce:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80034d2:	496e      	ldr	r1, [pc, #440]	; (800368c <HOST_SF_LIB_VREG_write+0x5b8>)
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	440b      	add	r3, r1
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                    break;
 80034e2:	e008      	b.n	80034f6 <HOST_SF_LIB_VREG_write+0x422>
            for (ucTmpPtr = VREG_ACSEN; ucTmpPtr <= VREG_RGYSEN; ucTmpPtr++) // Loop through the VREG sensitivity registers
 80034e4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80034e8:	3301      	adds	r3, #1
 80034ea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80034ee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80034f2:	2b0b      	cmp	r3, #11
 80034f4:	d9d6      	bls.n	80034a4 <HOST_SF_LIB_VREG_write+0x3d0>
                }
            }
            
            if ((ucTmpPtr - VREG_ACSEN) < 4)                        // Sensitivity status of accel, gyro, compass, and orientation, are in VREG 0x3D (3-bits each) starting at bit 4
 80034f6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d809      	bhi.n	8003512 <HOST_SF_LIB_VREG_write+0x43e>
                ucAdjustedPtr = (3*ucAdjustedPtr) + 4;              // calculate proper ptr value
 80034fe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003502:	461a      	mov	r2, r3
 8003504:	0052      	lsls	r2, r2, #1
 8003506:	4413      	add	r3, r2
 8003508:	b2db      	uxtb	r3, r3
 800350a:	3304      	adds	r3, #4
 800350c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003510:	e01a      	b.n	8003548 <HOST_SF_LIB_VREG_write+0x474>
                    
            else if ((ucTmpPtr - VREG_ACSEN) >= 4 && (ucTmpPtr - VREG_ACSEN) < 9) //Sensitivity status of inclinometer, 2 reserved sensors, raw accelerometr, and raw manometer are in VREG 0x3E
 8003512:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003516:	2b05      	cmp	r3, #5
 8003518:	d910      	bls.n	800353c <HOST_SF_LIB_VREG_write+0x468>
 800351a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800351e:	2b0a      	cmp	r3, #10
 8003520:	d80c      	bhi.n	800353c <HOST_SF_LIB_VREG_write+0x468>
            {
                usStat_ptr++;                                       // point to next VREG status register (VREG3E)
 8003522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003524:	3304      	adds	r3, #4
 8003526:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 3 * (-(4 - (ucTmpPtr - VREG_ACSEN))); // calculate proper ptr value
 8003528:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800352c:	461a      	mov	r2, r3
 800352e:	0052      	lsls	r2, r2, #1
 8003530:	4413      	add	r3, r2
 8003532:	b2db      	uxtb	r3, r3
 8003534:	3b12      	subs	r3, #18
 8003536:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800353a:	e005      	b.n	8003548 <HOST_SF_LIB_VREG_write+0x474>
            }

            else                                                    
            {                                                       // Last sensor (raw gyrometer) is in VREG 0x3F
                usStat_ptr += 2;                                    // pointer to last VREG status register
 800353c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353e:	3308      	adds	r3, #8
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            SET_PARAMS.ucid = ucId;
 8003548:	4a51      	ldr	r2, [pc, #324]	; (8003690 <HOST_SF_LIB_VREG_write+0x5bc>)
 800354a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800354e:	7013      	strb	r3, [r2, #0]
            SET_PARAMS.bSensitivityValid = TRUE;                    //update with valid sensitivity value
 8003550:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003552:	2201      	movs	r2, #1
 8003554:	721a      	strb	r2, [r3, #8]
            SET_PARAMS.usSensitivityVal = usData;
 8003556:	4a4e      	ldr	r2, [pc, #312]	; (8003690 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6053      	str	r3, [r2, #4]
 
            if (set_state_data(SET_PARAMS))                         // If sensor is enabled, sensitivity register will be written to
 800355c:	4b4c      	ldr	r3, [pc, #304]	; (8003690 <HOST_SF_LIB_VREG_write+0x5bc>)
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	9200      	str	r2, [sp, #0]
 8003562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003564:	f7ff fa9a 	bl	8002a9c <set_state_data>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d016      	beq.n	800359c <HOST_SF_LIB_VREG_write+0x4c8>
            {
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them 
 800356e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003576:	2107      	movs	r1, #7
 8003578:	fa01 f202 	lsl.w	r2, r1, r2
 800357c:	43d2      	mvns	r2, r2
 800357e:	401a      	ands	r2, r3
 8003580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003582:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_SENS_FAIL << ucAdjustedPtr);   // Set status bits with Update Sensitivity error (one-shot status that is only valid immediately after a VREGWrite to Sensitivity update because it is shared with Data Rate update)
 8003584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800358c:	2105      	movs	r1, #5
 800358e:	fa01 f202 	lsl.w	r2, r1, r2
 8003592:	431a      	orrs	r2, r3
 8003594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003596:	601a      	str	r2, [r3, #0]
                return SET_FEAT_FAIL;
 8003598:	2317      	movs	r3, #23
 800359a:	e156      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>
            }
            
            else
            {
                *usRegPtr = usData;                                 // write succesful, update new sensitivity value in sensitivity register
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	601a      	str	r2, [r3, #0]
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them            
 80035a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80035aa:	2107      	movs	r1, #7
 80035ac:	fa01 f202 	lsl.w	r2, r1, r2
 80035b0:	43d2      	mvns	r2, r2
 80035b2:	401a      	ands	r2, r3
 80035b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b6:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_SENS_SUCCESS << ucAdjustedPtr); // set status bits with Update Sensitivity Success status (one-shot status that is only valid immediately after a VREGWrite to Sensitivity update because it is shared with Data Rate update)
 80035b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80035c0:	2101      	movs	r1, #1
 80035c2:	fa01 f202 	lsl.w	r2, r1, r2
 80035c6:	431a      	orrs	r2, r3
 80035c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ca:	601a      	str	r2, [r3, #0]
            }
        }                                                           //end of SENSITIVITY command
    
    /*****************DATA-RATE-CHANGE COMMAND********************/
        if (ucRegOffset >= VREG_ACDXR && ucRegOffset <= VREG_RGYDR) // data will be written to VREG data rate register
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	2b0b      	cmp	r3, #11
 80035d0:	f240 80aa 	bls.w	8003728 <HOST_SF_LIB_VREG_write+0x654>
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	2b15      	cmp	r3, #21
 80035d8:	f200 80a6 	bhi.w	8003728 <HOST_SF_LIB_VREG_write+0x654>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Set the status register pointer to the first status register
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HOST_SF_LIB_VREG_write+0x5c0>)
 80035de:	647b      	str	r3, [r7, #68]	; 0x44
            usStat_ptr++;                                           // Increment to status register (VREG3D) for data rate stat bits
 80035e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e2:	3304      	adds	r3, #4
 80035e4:	647b      	str	r3, [r7, #68]	; 0x44

            for(ucTmpPtr = VREG_ACDXR; ucTmpPtr <= VREG_RGYDR; ucTmpPtr++) // Loop through VREG data rate registers
 80035e6:	230c      	movs	r3, #12
 80035e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80035ec:	e024      	b.n	8003638 <HOST_SF_LIB_VREG_write+0x564>
            {
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 80035ee:	79fa      	ldrb	r2, [r7, #7]
 80035f0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d11a      	bne.n	800362e <HOST_SF_LIB_VREG_write+0x55a>
                    (*usSHC_ptr & (1 << (ucTmpPtr - 8))) )
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003600:	3a08      	subs	r2, #8
 8003602:	2101      	movs	r1, #1
 8003604:	fa01 f202 	lsl.w	r2, r1, r2
 8003608:	4013      	ands	r3, r2
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00f      	beq.n	800362e <HOST_SF_LIB_VREG_write+0x55a>
                {
                    ucAdjustedPtr = ucTmpPtr - VREG_ACDXR;          //offset from first data rate VREG
 800360e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003612:	3b0c      	subs	r3, #12
 8003614:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                    

                    ucId = SENSOR[ucAdjustedPtr].id;                // Set variable equal to id of current sensor
 8003618:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800361c:	491b      	ldr	r1, [pc, #108]	; (800368c <HOST_SF_LIB_VREG_write+0x5b8>)
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	440b      	add	r3, r1
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                    break;
 800362c:	e008      	b.n	8003640 <HOST_SF_LIB_VREG_write+0x56c>
            for(ucTmpPtr = VREG_ACDXR; ucTmpPtr <= VREG_RGYDR; ucTmpPtr++) // Loop through VREG data rate registers
 800362e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003632:	3301      	adds	r3, #1
 8003634:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003638:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800363c:	2b15      	cmp	r3, #21
 800363e:	d9d6      	bls.n	80035ee <HOST_SF_LIB_VREG_write+0x51a>
                }
            }
            
            if ((ucTmpPtr - VREG_ACDXR) < 4)                        // Data rate status of accel, gyro, compass, and orientation, are in VREG 0x3D (3-bits each) starting at bit 4
 8003640:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003644:	2b0f      	cmp	r3, #15
 8003646:	d809      	bhi.n	800365c <HOST_SF_LIB_VREG_write+0x588>
                ucAdjustedPtr = (3*ucAdjustedPtr) + 4;              // calculate proper ptr value
 8003648:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800364c:	461a      	mov	r2, r3
 800364e:	0052      	lsls	r2, r2, #1
 8003650:	4413      	add	r3, r2
 8003652:	b2db      	uxtb	r3, r3
 8003654:	3304      	adds	r3, #4
 8003656:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800365a:	e023      	b.n	80036a4 <HOST_SF_LIB_VREG_write+0x5d0>
                
            else if ((ucTmpPtr - VREG_ACDXR) >= 4 && (ucTmpPtr - VREG_ACDXR) < 9) //Data rate status of inclinometer, 2 reserved sensors, raw accelerometr, and raw manometer are found in VREG 0x3E
 800365c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003660:	2b0f      	cmp	r3, #15
 8003662:	d919      	bls.n	8003698 <HOST_SF_LIB_VREG_write+0x5c4>
 8003664:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003668:	2b14      	cmp	r3, #20
 800366a:	d815      	bhi.n	8003698 <HOST_SF_LIB_VREG_write+0x5c4>
            {
                usStat_ptr++;                                       // point to next VREG status register
 800366c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366e:	3304      	adds	r3, #4
 8003670:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 3 * (-(4 - (ucTmpPtr - VREG_ACDXR))); // calculate proper ptr value
 8003672:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003676:	461a      	mov	r2, r3
 8003678:	0052      	lsls	r2, r2, #1
 800367a:	4413      	add	r3, r2
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3b30      	subs	r3, #48	; 0x30
 8003680:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003684:	e00e      	b.n	80036a4 <HOST_SF_LIB_VREG_write+0x5d0>
 8003686:	bf00      	nop
 8003688:	2000122c 	.word	0x2000122c
 800368c:	20000118 	.word	0x20000118
 8003690:	20001218 	.word	0x20001218
 8003694:	20001208 	.word	0x20001208
            }
              
            else            
            {                                                       // Last sensor (raw gyrometer) is in VREG 0x3F
                usStat_ptr += 2;                                    // pointer to last VREG status register
 8003698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369a:	3308      	adds	r3, #8
 800369c:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }
                
            SET_PARAMS.ucid = ucId;
 80036a4:	4a6b      	ldr	r2, [pc, #428]	; (8003854 <HOST_SF_LIB_VREG_write+0x780>)
 80036a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80036aa:	7013      	strb	r3, [r2, #0]
            SET_PARAMS.bDataRateValid = TRUE;                       //update sensor with valid data rate value
 80036ac:	4b69      	ldr	r3, [pc, #420]	; (8003854 <HOST_SF_LIB_VREG_write+0x780>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	741a      	strb	r2, [r3, #16]
            SET_PARAMS.usDataRateVal = usData;
 80036b2:	4a68      	ldr	r2, [pc, #416]	; (8003854 <HOST_SF_LIB_VREG_write+0x780>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	60d3      	str	r3, [r2, #12]
            
            if (set_state_data(SET_PARAMS))                         // If sensor is enabled, data rate register will be written to
 80036b8:	4b66      	ldr	r3, [pc, #408]	; (8003854 <HOST_SF_LIB_VREG_write+0x780>)
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	9200      	str	r2, [sp, #0]
 80036be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036c0:	f7ff f9ec 	bl	8002a9c <set_state_data>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HOST_SF_LIB_VREG_write+0x624>
            {
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them   
 80036ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80036d2:	2107      	movs	r1, #7
 80036d4:	fa01 f202 	lsl.w	r2, r1, r2
 80036d8:	43d2      	mvns	r2, r2
 80036da:	401a      	ands	r2, r3
 80036dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036de:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_DATARATE_FAIL << ucAdjustedPtr); // Update status bits with error (one-shot status that is only valid immediately after a VREGWrite to Data Rate update because it is shared with Sensitivity update)
 80036e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80036e8:	2106      	movs	r1, #6
 80036ea:	fa01 f202 	lsl.w	r2, r1, r2
 80036ee:	431a      	orrs	r2, r3
 80036f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f2:	601a      	str	r2, [r3, #0]
                return SET_FEAT_FAIL;
 80036f4:	2317      	movs	r3, #23
 80036f6:	e0a8      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>
            }
            
            else
            {
                *usRegPtr = usData;                                 // write succesful, update new sensitivity value in sensitivity register
 80036f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	601a      	str	r2, [r3, #0]
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them    
 80036fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003706:	2107      	movs	r1, #7
 8003708:	fa01 f202 	lsl.w	r2, r1, r2
 800370c:	43d2      	mvns	r2, r2
 800370e:	401a      	ands	r2, r3
 8003710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003712:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_DATARATE_SUCCESS << ucAdjustedPtr); // Update status bits with success status (one-shot status that is only valid immediately after a VREGWrite to Data Rate update because it is shared with Sensitivity update)
 8003714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800371c:	2102      	movs	r1, #2
 800371e:	fa01 f202 	lsl.w	r2, r1, r2
 8003722:	431a      	orrs	r2, r3
 8003724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003726:	601a      	str	r2, [r3, #0]
            }
        }                                                           //end of DATA_RATE command

    /*****************STATUS-BIT-CLEAR COMMAND********************/
        if (ucRegOffset >= VREG_STAT1 && ucRegOffset <= VREG_STAT4) // offset is in status registers field
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	2b3e      	cmp	r3, #62	; 0x3e
 800372c:	d947      	bls.n	80037be <HOST_SF_LIB_VREG_write+0x6ea>
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	2b42      	cmp	r3, #66	; 0x42
 8003732:	d844      	bhi.n	80037be <HOST_SF_LIB_VREG_write+0x6ea>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Reset the status register pointer to the first status register
 8003734:	4b48      	ldr	r3, [pc, #288]	; (8003858 <HOST_SF_LIB_VREG_write+0x784>)
 8003736:	647b      	str	r3, [r7, #68]	; 0x44
                
            for (ucTmpPtr = 0; ucTmpPtr < 8; ucTmpPtr++)            //validate current status field = enable_disable_failed
 8003738:	2300      	movs	r3, #0
 800373a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800373e:	e03a      	b.n	80037b6 <HOST_SF_LIB_VREG_write+0x6e2>
            {
                usMask = (VREG_ENA_DIS_FAIL << (ucTmpPtr * 2) );    //mask individual sensor status fields
 8003740:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	633b      	str	r3, [r7, #48]	; 0x30
                if ( ( usData & usMask) == 0 )                      //clear these stat bits from input data if valid fields exist in status register
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d129      	bne.n	80037ac <HOST_SF_LIB_VREG_write+0x6d8>
                {
                    if ( ucRegOffset == VREG_STAT1)                 //all 8 sensor status fields are valid for possilbe update
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	2b3f      	cmp	r3, #63	; 0x3f
 800375c:	d10e      	bne.n	800377c <HOST_SF_LIB_VREG_write+0x6a8>
                    {
                        if (( *usStat_ptr & usMask) == usMask )     //valid status field contents
 800375e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	4013      	ands	r3, r2
 8003766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003768:	429a      	cmp	r2, r3
 800376a:	d11f      	bne.n	80037ac <HOST_SF_LIB_VREG_write+0x6d8>
                        {
                            *usStat_ptr &= ~usMask;                 //clear these two bits of status field preserving the rest of the register
 800376c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	43db      	mvns	r3, r3
 8003774:	401a      	ands	r2, r3
 8003776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e017      	b.n	80037ac <HOST_SF_LIB_VREG_write+0x6d8>
                        }
                    }
                    else if ((ucRegOffset == VREG_STAT2) && (ucTmpPtr < 2)) // only 1st two status fields of VREG_STAT2 are valid for possible update
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d114      	bne.n	80037ac <HOST_SF_LIB_VREG_write+0x6d8>
 8003782:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003786:	2b01      	cmp	r3, #1
 8003788:	d810      	bhi.n	80037ac <HOST_SF_LIB_VREG_write+0x6d8>
                    {
                        if (( *(usStat_ptr+1) & usMask) == usMask ) //valid status field contents
 800378a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378c:	3304      	adds	r3, #4
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	4013      	ands	r3, r2
 8003794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003796:	429a      	cmp	r2, r3
 8003798:	d108      	bne.n	80037ac <HOST_SF_LIB_VREG_write+0x6d8>
                        {
                            *(usStat_ptr+1) &= ~usMask;             //clear these two bits of status field preserving the rest of the register
 800379a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379c:	3304      	adds	r3, #4
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	43da      	mvns	r2, r3
 80037a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a6:	3304      	adds	r3, #4
 80037a8:	400a      	ands	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]
            for (ucTmpPtr = 0; ucTmpPtr < 8; ucTmpPtr++)            //validate current status field = enable_disable_failed
 80037ac:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80037b0:	3301      	adds	r3, #1
 80037b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80037b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80037ba:	2b07      	cmp	r3, #7
 80037bc:	d9c0      	bls.n	8003740 <HOST_SF_LIB_VREG_write+0x66c>
                }
            }
        }
    }

    if (EC_DATA_AVAIL)                                              // Check if the device has new data
 80037be:	4b27      	ldr	r3, [pc, #156]	; (800385c <HOST_SF_LIB_VREG_write+0x788>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d03f      	beq.n	8003848 <HOST_SF_LIB_VREG_write+0x774>
    {                                                              
         ucRet = i2c_cmd_WrRd (READ,                                // Read the data from the SSC7150
 80037c8:	2301      	movs	r3, #1
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	f107 0308 	add.w	r3, r7, #8
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	2303      	movs	r3, #3
 80037d4:	2200      	movs	r2, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	2002      	movs	r0, #2
 80037da:	f7fd fcd1 	bl	8001180 <i2c_cmd_WrRd>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                            0,                                      //cmd buf (ignored)
                            BYTE_ADJ_VAL,                           //num of bytes to read
                            ucRx_data,                              //recv buf 
                            TRUE);                                  //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

       if (ucRet) 
 80037e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HOST_SF_LIB_VREG_write+0x71c>
           return HID_INT_FAIL;
 80037ec:	2331      	movs	r3, #49	; 0x31
 80037ee:	e02c      	b.n	800384a <HOST_SF_LIB_VREG_write+0x776>

        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data
 80037f0:	2300      	movs	r3, #0
 80037f2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80037f6:	e023      	b.n	8003840 <HOST_SF_LIB_VREG_write+0x76c>
        {          
            if (ucRx_data[2] == SENSOR[ucSensorNum].id)           //1st two bytes of read data packet hold size of packet, then data begins at byte 2
 80037f8:	7ab9      	ldrb	r1, [r7, #10]
 80037fa:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80037fe:	4818      	ldr	r0, [pc, #96]	; (8003860 <HOST_SF_LIB_VREG_write+0x78c>)
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	4403      	add	r3, r0
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	4299      	cmp	r1, r3
 800380c:	d113      	bne.n	8003836 <HOST_SF_LIB_VREG_write+0x762>
            {
                if (*usSHC_ptr & (1 << (ucTmpPtr + VREG_SHC_ACC_EN_VAL))) // If the incoming data belongs to an enabled sensor, store it in VREG data registers
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003816:	3204      	adds	r2, #4
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f202 	lsl.w	r2, r1, r2
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HOST_SF_LIB_VREG_write+0x762>
                { 
                    parse_update_VREG_data(ucSensorNum, ucRx_data);
 8003824:	f107 0208 	add.w	r2, r7, #8
 8003828:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff f9c4 	bl	8002bbc <parse_update_VREG_data>
                    break;
 8003834:	e008      	b.n	8003848 <HOST_SF_LIB_VREG_write+0x774>
        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data
 8003836:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800383a:	3301      	adds	r3, #1
 800383c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8003840:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003844:	2b0b      	cmp	r3, #11
 8003846:	d9d7      	bls.n	80037f8 <HOST_SF_LIB_VREG_write+0x724>
                }
            }
        }
    }
    
    return SUCCESS;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3748      	adds	r7, #72	; 0x48
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20001218 	.word	0x20001218
 8003858:	20001208 	.word	0x20001208
 800385c:	200000f1 	.word	0x200000f1
 8003860:	20000118 	.word	0x20000118

08003864 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800389c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003868:	f7fe ff6c 	bl	8002744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
   ldr r0, =_sdata
 800386c:	480c      	ldr	r0, [pc, #48]	; (80038a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800386e:	490d      	ldr	r1, [pc, #52]	; (80038a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003870:	4a0d      	ldr	r2, [pc, #52]	; (80038a8 <LoopForever+0xe>)
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003874:	e002      	b.n	800387c <LoopCopyDataInit>

08003876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800387a:	3304      	adds	r3, #4

0800387c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800387c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800387e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003880:	d3f9      	bcc.n	8003876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003884:	4c0a      	ldr	r4, [pc, #40]	; (80038b0 <LoopForever+0x16>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003888:	e001      	b.n	800388e <LoopFillZerobss>

0800388a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800388a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800388c:	3204      	adds	r2, #4

0800388e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800388e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003890:	d3fb      	bcc.n	800388a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003892:	f006 fa27 	bl	8009ce4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003896:	f7fd fceb 	bl	8001270 <main>

0800389a <LoopForever>:

LoopForever:
    b LoopForever
 800389a:	e7fe      	b.n	800389a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800389c:	20010000 	.word	0x20010000
   ldr r0, =_sdata
 80038a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80038a8:	0800be48 	.word	0x0800be48
  ldr r2, =_sbss
 80038ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80038b0:	20004d64 	.word	0x20004d64

080038b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038b4:	e7fe      	b.n	80038b4 <ADC1_IRQHandler>

080038b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038c0:	2003      	movs	r0, #3
 80038c2:	f000 f902 	bl	8003aca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038c6:	200f      	movs	r0, #15
 80038c8:	f7fe fe18 	bl	80024fc <HAL_InitTick>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	71fb      	strb	r3, [r7, #7]
 80038d6:	e001      	b.n	80038dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038d8:	f7fe fde8 	bl	80024ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038dc:	79fb      	ldrb	r3, [r7, #7]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_IncTick+0x20>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_IncTick+0x24>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <HAL_IncTick+0x24>)
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20000008 	.word	0x20000008
 800390c:	20001230 	.word	0x20001230

08003910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return uwTick;
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <HAL_GetTick+0x14>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20001230 	.word	0x20001230

08003928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003930:	f7ff ffee 	bl	8003910 <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d005      	beq.n	800394e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_Delay+0x44>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800394e:	bf00      	nop
 8003950:	f7ff ffde 	bl	8003910 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	429a      	cmp	r2, r3
 800395e:	d8f7      	bhi.n	8003950 <HAL_Delay+0x28>
  {
  }
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000008 	.word	0x20000008

08003970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800398c:	4013      	ands	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a2:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	60d3      	str	r3, [r2, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <__NVIC_GetPriorityGrouping+0x18>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 0307 	and.w	r3, r3, #7
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	db0b      	blt.n	80039fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	4907      	ldr	r1, [pc, #28]	; (8003a0c <__NVIC_EnableIRQ+0x38>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2001      	movs	r0, #1
 80039f6:	fa00 f202 	lsl.w	r2, r0, r2
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	e000e100 	.word	0xe000e100

08003a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	db0a      	blt.n	8003a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	490c      	ldr	r1, [pc, #48]	; (8003a5c <__NVIC_SetPriority+0x4c>)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	440b      	add	r3, r1
 8003a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a38:	e00a      	b.n	8003a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4908      	ldr	r1, [pc, #32]	; (8003a60 <__NVIC_SetPriority+0x50>)
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	3b04      	subs	r3, #4
 8003a48:	0112      	lsls	r2, r2, #4
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	761a      	strb	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000e100 	.word	0xe000e100
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	; 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f1c3 0307 	rsb	r3, r3, #7
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	bf28      	it	cs
 8003a82:	2304      	movcs	r3, #4
 8003a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d902      	bls.n	8003a94 <NVIC_EncodePriority+0x30>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3b03      	subs	r3, #3
 8003a92:	e000      	b.n	8003a96 <NVIC_EncodePriority+0x32>
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aac:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43d9      	mvns	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	4313      	orrs	r3, r2
         );
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3724      	adds	r7, #36	; 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ff4c 	bl	8003970 <__NVIC_SetPriorityGrouping>
}
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003af2:	f7ff ff61 	bl	80039b8 <__NVIC_GetPriorityGrouping>
 8003af6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	6978      	ldr	r0, [r7, #20]
 8003afe:	f7ff ffb1 	bl	8003a64 <NVIC_EncodePriority>
 8003b02:	4602      	mov	r2, r0
 8003b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff ff80 	bl	8003a10 <__NVIC_SetPriority>
}
 8003b10:	bf00      	nop
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff ff54 	bl	80039d4 <__NVIC_EnableIRQ>
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b42:	e145      	b.n	8003dd0 <HAL_GPIO_Init+0x29c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	2101      	movs	r1, #1
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	4013      	ands	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8137 	beq.w	8003dca <HAL_GPIO_Init+0x296>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d005      	beq.n	8003b74 <HAL_GPIO_Init+0x40>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d130      	bne.n	8003bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2203      	movs	r2, #3
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003baa:	2201      	movs	r2, #1
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	091b      	lsrs	r3, r3, #4
 8003bc0:	f003 0201 	and.w	r2, r3, #1
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d014      	beq.n	8003c0c <HAL_GPIO_Init+0xd8>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	2203      	movs	r2, #3
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]

      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d123      	bne.n	8003c60 <HAL_GPIO_Init+0x12c>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	08da      	lsrs	r2, r3, #3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3208      	adds	r2, #8
 8003c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	220f      	movs	r2, #15
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	08da      	lsrs	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3208      	adds	r2, #8
 8003c5a:	6939      	ldr	r1, [r7, #16]
 8003c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0203 	and.w	r2, r3, #3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8094 	beq.w	8003dca <HAL_GPIO_Init+0x296>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca2:	4b53      	ldr	r3, [pc, #332]	; (8003df0 <HAL_GPIO_Init+0x2bc>)
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca6:	4a52      	ldr	r2, [pc, #328]	; (8003df0 <HAL_GPIO_Init+0x2bc>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6613      	str	r3, [r2, #96]	; 0x60
 8003cae:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <HAL_GPIO_Init+0x2bc>)
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cba:	4a4e      	ldr	r2, [pc, #312]	; (8003df4 <HAL_GPIO_Init+0x2c0>)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	220f      	movs	r2, #15
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ce4:	d00d      	beq.n	8003d02 <HAL_GPIO_Init+0x1ce>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a43      	ldr	r2, [pc, #268]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <HAL_GPIO_Init+0x1ca>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a42      	ldr	r2, [pc, #264]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <HAL_GPIO_Init+0x1c6>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e004      	b.n	8003d04 <HAL_GPIO_Init+0x1d0>
 8003cfa:	2307      	movs	r3, #7
 8003cfc:	e002      	b.n	8003d04 <HAL_GPIO_Init+0x1d0>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_GPIO_Init+0x1d0>
 8003d02:	2300      	movs	r3, #0
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	f002 0203 	and.w	r2, r2, #3
 8003d0a:	0092      	lsls	r2, r2, #2
 8003d0c:	4093      	lsls	r3, r2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d14:	4937      	ldr	r1, [pc, #220]	; (8003df4 <HAL_GPIO_Init+0x2c0>)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d22:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <HAL_GPIO_Init+0x2cc>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d46:	4a2e      	ldr	r2, [pc, #184]	; (8003e00 <HAL_GPIO_Init+0x2cc>)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d4c:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <HAL_GPIO_Init+0x2cc>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d70:	4a23      	ldr	r2, [pc, #140]	; (8003e00 <HAL_GPIO_Init+0x2cc>)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d76:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <HAL_GPIO_Init+0x2cc>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d9a:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_GPIO_Init+0x2cc>)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003da0:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <HAL_GPIO_Init+0x2cc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dc4:	4a0e      	ldr	r2, [pc, #56]	; (8003e00 <HAL_GPIO_Init+0x2cc>)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f47f aeb2 	bne.w	8003b44 <HAL_GPIO_Init+0x10>
  }
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40010000 	.word	0x40010000
 8003df8:	48000400 	.word	0x48000400
 8003dfc:	48000800 	.word	0x48000800
 8003e00:	40010400 	.word	0x40010400

08003e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
 8003e10:	4613      	mov	r3, r2
 8003e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e14:	787b      	ldrb	r3, [r7, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e20:	e002      	b.n	8003e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e081      	b.n	8003f4a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fd f918 	bl	8001090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2224      	movs	r2, #36	; 0x24
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d107      	bne.n	8003eae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	e006      	b.n	8003ebc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003eba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d104      	bne.n	8003ece <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ecc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ef0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69d9      	ldr	r1, [r3, #28]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	460b      	mov	r3, r1
 8003f62:	817b      	strh	r3, [r7, #10]
 8003f64:	4613      	mov	r3, r2
 8003f66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	f040 80da 	bne.w	800412a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_I2C_Master_Transmit+0x30>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e0d3      	b.n	800412c <HAL_I2C_Master_Transmit+0x1d8>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f8c:	f7ff fcc0 	bl	8003910 <HAL_GetTick>
 8003f90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	2319      	movs	r3, #25
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f9e6 	bl	8004370 <I2C_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e0be      	b.n	800412c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2221      	movs	r2, #33	; 0x21
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2210      	movs	r2, #16
 8003fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	893a      	ldrh	r2, [r7, #8]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2bff      	cmp	r3, #255	; 0xff
 8003fde:	d90e      	bls.n	8003ffe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	22ff      	movs	r2, #255	; 0xff
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	8979      	ldrh	r1, [r7, #10]
 8003fee:	4b51      	ldr	r3, [pc, #324]	; (8004134 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fbdc 	bl	80047b4 <I2C_TransferConfig>
 8003ffc:	e06c      	b.n	80040d8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	b2da      	uxtb	r2, r3
 800400e:	8979      	ldrh	r1, [r7, #10]
 8004010:	4b48      	ldr	r3, [pc, #288]	; (8004134 <HAL_I2C_Master_Transmit+0x1e0>)
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fbcb 	bl	80047b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800401e:	e05b      	b.n	80040d8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	6a39      	ldr	r1, [r7, #32]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f9e3 	bl	80043f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e07b      	b.n	800412c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d034      	beq.n	80040d8 <HAL_I2C_Master_Transmit+0x184>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d130      	bne.n	80040d8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	2200      	movs	r2, #0
 800407e:	2180      	movs	r1, #128	; 0x80
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f975 	bl	8004370 <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e04d      	b.n	800412c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	2bff      	cmp	r3, #255	; 0xff
 8004098:	d90e      	bls.n	80040b8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	22ff      	movs	r2, #255	; 0xff
 800409e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	8979      	ldrh	r1, [r7, #10]
 80040a8:	2300      	movs	r3, #0
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fb7f 	bl	80047b4 <I2C_TransferConfig>
 80040b6:	e00f      	b.n	80040d8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	8979      	ldrh	r1, [r7, #10]
 80040ca:	2300      	movs	r3, #0
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fb6e 	bl	80047b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d19e      	bne.n	8004020 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	6a39      	ldr	r1, [r7, #32]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f9c2 	bl	8004470 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e01a      	b.n	800412c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2220      	movs	r2, #32
 80040fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6859      	ldr	r1, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_I2C_Master_Transmit+0x1e4>)
 800410a:	400b      	ands	r3, r1
 800410c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e000      	b.n	800412c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800412a:	2302      	movs	r3, #2
  }
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	80002000 	.word	0x80002000
 8004138:	fe00e800 	.word	0xfe00e800

0800413c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	607a      	str	r2, [r7, #4]
 8004146:	461a      	mov	r2, r3
 8004148:	460b      	mov	r3, r1
 800414a:	817b      	strh	r3, [r7, #10]
 800414c:	4613      	mov	r3, r2
 800414e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b20      	cmp	r3, #32
 800415a:	f040 80db 	bne.w	8004314 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_I2C_Master_Receive+0x30>
 8004168:	2302      	movs	r3, #2
 800416a:	e0d4      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004174:	f7ff fbcc 	bl	8003910 <HAL_GetTick>
 8004178:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2319      	movs	r3, #25
 8004180:	2201      	movs	r2, #1
 8004182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f8f2 	bl	8004370 <I2C_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0bf      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2222      	movs	r2, #34	; 0x22
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2210      	movs	r2, #16
 80041a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	893a      	ldrh	r2, [r7, #8]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2bff      	cmp	r3, #255	; 0xff
 80041c6:	d90e      	bls.n	80041e6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	22ff      	movs	r2, #255	; 0xff
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	8979      	ldrh	r1, [r7, #10]
 80041d6:	4b52      	ldr	r3, [pc, #328]	; (8004320 <HAL_I2C_Master_Receive+0x1e4>)
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fae8 	bl	80047b4 <I2C_TransferConfig>
 80041e4:	e06d      	b.n	80042c2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	8979      	ldrh	r1, [r7, #10]
 80041f8:	4b49      	ldr	r3, [pc, #292]	; (8004320 <HAL_I2C_Master_Receive+0x1e4>)
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fad7 	bl	80047b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004206:	e05c      	b.n	80042c2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	6a39      	ldr	r1, [r7, #32]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f96b 	bl	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e07c      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d034      	beq.n	80042c2 <HAL_I2C_Master_Receive+0x186>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d130      	bne.n	80042c2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	2200      	movs	r2, #0
 8004268:	2180      	movs	r1, #128	; 0x80
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f880 	bl	8004370 <I2C_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e04d      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	2bff      	cmp	r3, #255	; 0xff
 8004282:	d90e      	bls.n	80042a2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	22ff      	movs	r2, #255	; 0xff
 8004288:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	b2da      	uxtb	r2, r3
 8004290:	8979      	ldrh	r1, [r7, #10]
 8004292:	2300      	movs	r3, #0
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fa8a 	bl	80047b4 <I2C_TransferConfig>
 80042a0:	e00f      	b.n	80042c2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	8979      	ldrh	r1, [r7, #10]
 80042b4:	2300      	movs	r3, #0
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fa79 	bl	80047b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d19d      	bne.n	8004208 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	6a39      	ldr	r1, [r7, #32]
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f8cd 	bl	8004470 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e01a      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2220      	movs	r2, #32
 80042e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <HAL_I2C_Master_Receive+0x1e8>)
 80042f4:	400b      	ands	r3, r1
 80042f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e000      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	80002400 	.word	0x80002400
 8004324:	fe00e800 	.word	0xfe00e800

08004328 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b02      	cmp	r3, #2
 800433c:	d103      	bne.n	8004346 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d007      	beq.n	8004364 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	619a      	str	r2, [r3, #24]
  }
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004380:	e022      	b.n	80043c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d01e      	beq.n	80043c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438a:	f7ff fac1 	bl	8003910 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d302      	bcc.n	80043a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d113      	bne.n	80043c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e00f      	b.n	80043e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d0cd      	beq.n	8004382 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043fc:	e02c      	b.n	8004458 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f8ea 	bl	80045dc <I2C_IsErrorOccurred>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e02a      	b.n	8004468 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d01e      	beq.n	8004458 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441a:	f7ff fa79 	bl	8003910 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d113      	bne.n	8004458 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e007      	b.n	8004468 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d1cb      	bne.n	80043fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800447c:	e028      	b.n	80044d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f8aa 	bl	80045dc <I2C_IsErrorOccurred>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e026      	b.n	80044e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004492:	f7ff fa3d 	bl	8003910 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d302      	bcc.n	80044a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d113      	bne.n	80044d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	f043 0220 	orr.w	r2, r3, #32
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e007      	b.n	80044e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d1cf      	bne.n	800447e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044f4:	e064      	b.n	80045c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f86e 	bl	80045dc <I2C_IsErrorOccurred>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e062      	b.n	80045d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b20      	cmp	r3, #32
 8004516:	d138      	bne.n	800458a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	2b04      	cmp	r3, #4
 8004524:	d105      	bne.n	8004532 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	e04e      	b.n	80045d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b10      	cmp	r3, #16
 800453e:	d107      	bne.n	8004550 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2210      	movs	r2, #16
 8004546:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2204      	movs	r2, #4
 800454c:	645a      	str	r2, [r3, #68]	; 0x44
 800454e:	e002      	b.n	8004556 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2220      	movs	r2, #32
 800455c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6859      	ldr	r1, [r3, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800456a:	400b      	ands	r3, r1
 800456c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e022      	b.n	80045d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7ff f9c1 	bl	8003910 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10f      	bne.n	80045c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e007      	b.n	80045d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d193      	bne.n	80044f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	fe00e800 	.word	0xfe00e800

080045dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	d075      	beq.n	80046f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2210      	movs	r2, #16
 800460e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004610:	e056      	b.n	80046c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d052      	beq.n	80046c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800461a:	f7ff f979 	bl	8003910 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	d302      	bcc.n	8004630 <I2C_IsErrorOccurred+0x54>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d147      	bne.n	80046c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800463a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004642:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800464e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004652:	d12e      	bne.n	80046b2 <I2C_IsErrorOccurred+0xd6>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800465a:	d02a      	beq.n	80046b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800465c:	7cfb      	ldrb	r3, [r7, #19]
 800465e:	2b20      	cmp	r3, #32
 8004660:	d027      	beq.n	80046b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004670:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004672:	f7ff f94d 	bl	8003910 <HAL_GetTick>
 8004676:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004678:	e01b      	b.n	80046b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800467a:	f7ff f949 	bl	8003910 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b19      	cmp	r3, #25
 8004686:	d914      	bls.n	80046b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d1dc      	bne.n	800467a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d003      	beq.n	80046d6 <I2C_IsErrorOccurred+0xfa>
 80046ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d09d      	beq.n	8004612 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2220      	movs	r2, #32
 80046e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	f043 0308 	orr.w	r3, r3, #8
 800472e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	f043 0302 	orr.w	r3, r3, #2
 8004750:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800475a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01c      	beq.n	80047a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff fddc 	bl	8004328 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6859      	ldr	r1, [r3, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <I2C_IsErrorOccurred+0x1d4>)
 800477c:	400b      	ands	r3, r1
 800477e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	431a      	orrs	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80047a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3728      	adds	r7, #40	; 0x28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	fe00e800 	.word	0xfe00e800

080047b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	607b      	str	r3, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	817b      	strh	r3, [r7, #10]
 80047c2:	4613      	mov	r3, r2
 80047c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047c6:	897b      	ldrh	r3, [r7, #10]
 80047c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047cc:	7a7b      	ldrb	r3, [r7, #9]
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	4313      	orrs	r3, r2
 80047de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	0d5b      	lsrs	r3, r3, #21
 80047ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80047f2:	4b08      	ldr	r3, [pc, #32]	; (8004814 <I2C_TransferConfig+0x60>)
 80047f4:	430b      	orrs	r3, r1
 80047f6:	43db      	mvns	r3, r3
 80047f8:	ea02 0103 	and.w	r1, r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	03ff63ff 	.word	0x03ff63ff

08004818 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b20      	cmp	r3, #32
 800482c:	d138      	bne.n	80048a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004838:	2302      	movs	r3, #2
 800483a:	e032      	b.n	80048a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2224      	movs	r2, #36	; 0x24
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800486a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6819      	ldr	r1, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e000      	b.n	80048a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d139      	bne.n	8004938 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e033      	b.n	800493a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2224      	movs	r2, #36	; 0x24
 80048de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004900:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	e000      	b.n	800493a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004938:	2302      	movs	r3, #2
  }
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a04      	ldr	r2, [pc, #16]	; (8004964 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004956:	6013      	str	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40007000 	.word	0x40007000

08004968 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800496c:	4b04      	ldr	r3, [pc, #16]	; (8004980 <HAL_PWREx_GetVoltageRange+0x18>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40007000 	.word	0x40007000

08004984 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004992:	d130      	bne.n	80049f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004994:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800499c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a0:	d038      	beq.n	8004a14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049a2:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049b2:	4b1d      	ldr	r3, [pc, #116]	; (8004a28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2232      	movs	r2, #50	; 0x32
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	0c9b      	lsrs	r3, r3, #18
 80049c4:	3301      	adds	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049c8:	e002      	b.n	80049d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049d0:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049dc:	d102      	bne.n	80049e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f2      	bne.n	80049ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049e4:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f0:	d110      	bne.n	8004a14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e00f      	b.n	8004a16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80049f6:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a02:	d007      	beq.n	8004a14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a04:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a0c:	4a05      	ldr	r2, [pc, #20]	; (8004a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40007000 	.word	0x40007000
 8004a28:	20000000 	.word	0x20000000
 8004a2c:	431bde83 	.word	0x431bde83

08004a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f000 bc02 	b.w	8005248 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a44:	4b96      	ldr	r3, [pc, #600]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a4e:	4b94      	ldr	r3, [pc, #592]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80e4 	beq.w	8004c2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <HAL_RCC_OscConfig+0x4c>
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	f040 808b 	bne.w	8004b8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	f040 8087 	bne.w	8004b8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a7c:	4b88      	ldr	r3, [pc, #544]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_OscConfig+0x64>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e3d9      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1a      	ldr	r2, [r3, #32]
 8004a98:	4b81      	ldr	r3, [pc, #516]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <HAL_RCC_OscConfig+0x7e>
 8004aa4:	4b7e      	ldr	r3, [pc, #504]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aac:	e005      	b.n	8004aba <HAL_RCC_OscConfig+0x8a>
 8004aae:	4b7c      	ldr	r3, [pc, #496]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d223      	bcs.n	8004b06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fdbe 	bl	8005644 <RCC_SetFlashLatencyFromMSIRange>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e3ba      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ad2:	4b73      	ldr	r3, [pc, #460]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a72      	ldr	r2, [pc, #456]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004ad8:	f043 0308 	orr.w	r3, r3, #8
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b70      	ldr	r3, [pc, #448]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	496d      	ldr	r1, [pc, #436]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004af0:	4b6b      	ldr	r3, [pc, #428]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	4968      	ldr	r1, [pc, #416]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
 8004b04:	e025      	b.n	8004b52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b06:	4b66      	ldr	r3, [pc, #408]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a65      	ldr	r2, [pc, #404]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004b0c:	f043 0308 	orr.w	r3, r3, #8
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b63      	ldr	r3, [pc, #396]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	4960      	ldr	r1, [pc, #384]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b24:	4b5e      	ldr	r3, [pc, #376]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	495b      	ldr	r1, [pc, #364]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fd7e 	bl	8005644 <RCC_SetFlashLatencyFromMSIRange>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e37a      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b52:	f000 fc81 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 8004b56:	4602      	mov	r2, r0
 8004b58:	4b51      	ldr	r3, [pc, #324]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	4950      	ldr	r1, [pc, #320]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004b64:	5ccb      	ldrb	r3, [r1, r3]
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6e:	4a4e      	ldr	r2, [pc, #312]	; (8004ca8 <HAL_RCC_OscConfig+0x278>)
 8004b70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b72:	4b4e      	ldr	r3, [pc, #312]	; (8004cac <HAL_RCC_OscConfig+0x27c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd fcc0 	bl	80024fc <HAL_InitTick>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d052      	beq.n	8004c2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	e35e      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d032      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b92:	4b43      	ldr	r3, [pc, #268]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a42      	ldr	r2, [pc, #264]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b9e:	f7fe feb7 	bl	8003910 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ba6:	f7fe feb3 	bl	8003910 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e347      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bb8:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bc4:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a35      	ldr	r2, [pc, #212]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004bca:	f043 0308 	orr.w	r3, r3, #8
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	4b33      	ldr	r3, [pc, #204]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	4930      	ldr	r1, [pc, #192]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004be2:	4b2f      	ldr	r3, [pc, #188]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	492b      	ldr	r1, [pc, #172]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	604b      	str	r3, [r1, #4]
 8004bf6:	e01a      	b.n	8004c2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bf8:	4b29      	ldr	r3, [pc, #164]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c04:	f7fe fe84 	bl	8003910 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c0c:	f7fe fe80 	bl	8003910 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e314      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x1dc>
 8004c2a:	e000      	b.n	8004c2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d073      	beq.n	8004d22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d005      	beq.n	8004c4c <HAL_RCC_OscConfig+0x21c>
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b0c      	cmp	r3, #12
 8004c44:	d10e      	bne.n	8004c64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d10b      	bne.n	8004c64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d063      	beq.n	8004d20 <HAL_RCC_OscConfig+0x2f0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d15f      	bne.n	8004d20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e2f1      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCC_OscConfig+0x24c>
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a0b      	ldr	r2, [pc, #44]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e025      	b.n	8004cc8 <HAL_RCC_OscConfig+0x298>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c84:	d114      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x280>
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a05      	ldr	r2, [pc, #20]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a02      	ldr	r2, [pc, #8]	; (8004ca0 <HAL_RCC_OscConfig+0x270>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e013      	b.n	8004cc8 <HAL_RCC_OscConfig+0x298>
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	0800bd24 	.word	0x0800bd24
 8004ca8:	20000000 	.word	0x20000000
 8004cac:	20000004 	.word	0x20000004
 8004cb0:	4ba0      	ldr	r3, [pc, #640]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a9f      	ldr	r2, [pc, #636]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	4b9d      	ldr	r3, [pc, #628]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a9c      	ldr	r2, [pc, #624]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d013      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fe1e 	bl	8003910 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd8:	f7fe fe1a 	bl	8003910 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	; 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e2ae      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cea:	4b92      	ldr	r3, [pc, #584]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x2a8>
 8004cf6:	e014      	b.n	8004d22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fe fe0a 	bl	8003910 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d00:	f7fe fe06 	bl	8003910 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b64      	cmp	r3, #100	; 0x64
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e29a      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d12:	4b88      	ldr	r3, [pc, #544]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x2d0>
 8004d1e:	e000      	b.n	8004d22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d060      	beq.n	8004df0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_OscConfig+0x310>
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d119      	bne.n	8004d6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d116      	bne.n	8004d6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d40:	4b7c      	ldr	r3, [pc, #496]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_OscConfig+0x328>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e277      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d58:	4b76      	ldr	r3, [pc, #472]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	061b      	lsls	r3, r3, #24
 8004d66:	4973      	ldr	r1, [pc, #460]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d6c:	e040      	b.n	8004df0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d023      	beq.n	8004dbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d76:	4b6f      	ldr	r3, [pc, #444]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a6e      	ldr	r2, [pc, #440]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fe fdc5 	bl	8003910 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8a:	f7fe fdc1 	bl	8003910 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e255      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d9c:	4b65      	ldr	r3, [pc, #404]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da8:	4b62      	ldr	r3, [pc, #392]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	495f      	ldr	r1, [pc, #380]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
 8004dbc:	e018      	b.n	8004df0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dbe:	4b5d      	ldr	r3, [pc, #372]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a5c      	ldr	r2, [pc, #368]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7fe fda1 	bl	8003910 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd2:	f7fe fd9d 	bl	8003910 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e231      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004de4:	4b53      	ldr	r3, [pc, #332]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d03c      	beq.n	8004e76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01c      	beq.n	8004e3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e04:	4b4b      	ldr	r3, [pc, #300]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e0a:	4a4a      	ldr	r2, [pc, #296]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e14:	f7fe fd7c 	bl	8003910 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e1c:	f7fe fd78 	bl	8003910 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e20c      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e2e:	4b41      	ldr	r3, [pc, #260]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0ef      	beq.n	8004e1c <HAL_RCC_OscConfig+0x3ec>
 8004e3c:	e01b      	b.n	8004e76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e3e:	4b3d      	ldr	r3, [pc, #244]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e44:	4a3b      	ldr	r2, [pc, #236]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fe fd5f 	bl	8003910 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e56:	f7fe fd5b 	bl	8003910 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e1ef      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e68:	4b32      	ldr	r3, [pc, #200]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ef      	bne.n	8004e56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 80a6 	beq.w	8004fd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e84:	2300      	movs	r3, #0
 8004e86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e88:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10d      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e94:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	4a26      	ldr	r2, [pc, #152]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004ea0:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eac:	2301      	movs	r3, #1
 8004eae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eb0:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <HAL_RCC_OscConfig+0x508>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d118      	bne.n	8004eee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ebc:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <HAL_RCC_OscConfig+0x508>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1d      	ldr	r2, [pc, #116]	; (8004f38 <HAL_RCC_OscConfig+0x508>)
 8004ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec8:	f7fe fd22 	bl	8003910 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed0:	f7fe fd1e 	bl	8003910 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e1b2      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <HAL_RCC_OscConfig+0x508>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d108      	bne.n	8004f08 <HAL_RCC_OscConfig+0x4d8>
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f06:	e029      	b.n	8004f5c <HAL_RCC_OscConfig+0x52c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b05      	cmp	r3, #5
 8004f0e:	d115      	bne.n	8004f3c <HAL_RCC_OscConfig+0x50c>
 8004f10:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	4a07      	ldr	r2, [pc, #28]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004f18:	f043 0304 	orr.w	r3, r3, #4
 8004f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	4a03      	ldr	r2, [pc, #12]	; (8004f34 <HAL_RCC_OscConfig+0x504>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f30:	e014      	b.n	8004f5c <HAL_RCC_OscConfig+0x52c>
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40007000 	.word	0x40007000
 8004f3c:	4b9a      	ldr	r3, [pc, #616]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	4a99      	ldr	r2, [pc, #612]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f4c:	4b96      	ldr	r3, [pc, #600]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	4a95      	ldr	r2, [pc, #596]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d016      	beq.n	8004f92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f64:	f7fe fcd4 	bl	8003910 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6c:	f7fe fcd0 	bl	8003910 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e162      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f82:	4b89      	ldr	r3, [pc, #548]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0ed      	beq.n	8004f6c <HAL_RCC_OscConfig+0x53c>
 8004f90:	e015      	b.n	8004fbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fe fcbd 	bl	8003910 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f98:	e00a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9a:	f7fe fcb9 	bl	8003910 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e14b      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fb0:	4b7d      	ldr	r3, [pc, #500]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1ed      	bne.n	8004f9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fbe:	7ffb      	ldrb	r3, [r7, #31]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d105      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fc4:	4b78      	ldr	r3, [pc, #480]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	4a77      	ldr	r2, [pc, #476]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8004fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d03c      	beq.n	8005056 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01c      	beq.n	800501e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fe4:	4b70      	ldr	r3, [pc, #448]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8004fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fea:	4a6f      	ldr	r2, [pc, #444]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fe fc8c 	bl	8003910 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ffc:	f7fe fc88 	bl	8003910 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e11c      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800500e:	4b66      	ldr	r3, [pc, #408]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8005010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0ef      	beq.n	8004ffc <HAL_RCC_OscConfig+0x5cc>
 800501c:	e01b      	b.n	8005056 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800501e:	4b62      	ldr	r3, [pc, #392]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8005020:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005024:	4a60      	ldr	r2, [pc, #384]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502e:	f7fe fc6f 	bl	8003910 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005036:	f7fe fc6b 	bl	8003910 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e0ff      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005048:	4b57      	ldr	r3, [pc, #348]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 800504a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1ef      	bne.n	8005036 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 80f3 	beq.w	8005246 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	2b02      	cmp	r3, #2
 8005066:	f040 80c9 	bne.w	80051fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800506a:	4b4f      	ldr	r3, [pc, #316]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f003 0203 	and.w	r2, r3, #3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	429a      	cmp	r2, r3
 800507c:	d12c      	bne.n	80050d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	3b01      	subs	r3, #1
 800508a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d123      	bne.n	80050d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800509c:	429a      	cmp	r2, r3
 800509e:	d11b      	bne.n	80050d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d113      	bne.n	80050d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	3b01      	subs	r3, #1
 80050be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d109      	bne.n	80050d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	085b      	lsrs	r3, r3, #1
 80050d0:	3b01      	subs	r3, #1
 80050d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d06b      	beq.n	80051b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b0c      	cmp	r3, #12
 80050dc:	d062      	beq.n	80051a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050de:	4b32      	ldr	r3, [pc, #200]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0ac      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050ee:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2d      	ldr	r2, [pc, #180]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 80050f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050fa:	f7fe fc09 	bl	8003910 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005102:	f7fe fc05 	bl	8003910 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e099      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005114:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f0      	bne.n	8005102 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005120:	4b21      	ldr	r3, [pc, #132]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	4b21      	ldr	r3, [pc, #132]	; (80051ac <HAL_RCC_OscConfig+0x77c>)
 8005126:	4013      	ands	r3, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005130:	3a01      	subs	r2, #1
 8005132:	0112      	lsls	r2, r2, #4
 8005134:	4311      	orrs	r1, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800513a:	0212      	lsls	r2, r2, #8
 800513c:	4311      	orrs	r1, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005142:	0852      	lsrs	r2, r2, #1
 8005144:	3a01      	subs	r2, #1
 8005146:	0552      	lsls	r2, r2, #21
 8005148:	4311      	orrs	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800514e:	0852      	lsrs	r2, r2, #1
 8005150:	3a01      	subs	r2, #1
 8005152:	0652      	lsls	r2, r2, #25
 8005154:	4311      	orrs	r1, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800515a:	06d2      	lsls	r2, r2, #27
 800515c:	430a      	orrs	r2, r1
 800515e:	4912      	ldr	r1, [pc, #72]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8005160:	4313      	orrs	r3, r2
 8005162:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005164:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a0f      	ldr	r2, [pc, #60]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 800516a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800516e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8005176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800517a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800517c:	f7fe fbc8 	bl	8003910 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005184:	f7fe fbc4 	bl	8003910 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e058      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005196:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <HAL_RCC_OscConfig+0x778>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051a2:	e050      	b.n	8005246 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e04f      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
 80051a8:	40021000 	.word	0x40021000
 80051ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b0:	4b27      	ldr	r3, [pc, #156]	; (8005250 <HAL_RCC_OscConfig+0x820>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d144      	bne.n	8005246 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051bc:	4b24      	ldr	r3, [pc, #144]	; (8005250 <HAL_RCC_OscConfig+0x820>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a23      	ldr	r2, [pc, #140]	; (8005250 <HAL_RCC_OscConfig+0x820>)
 80051c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051c8:	4b21      	ldr	r3, [pc, #132]	; (8005250 <HAL_RCC_OscConfig+0x820>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a20      	ldr	r2, [pc, #128]	; (8005250 <HAL_RCC_OscConfig+0x820>)
 80051ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051d4:	f7fe fb9c 	bl	8003910 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fe fb98 	bl	8003910 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e02c      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ee:	4b18      	ldr	r3, [pc, #96]	; (8005250 <HAL_RCC_OscConfig+0x820>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f0      	beq.n	80051dc <HAL_RCC_OscConfig+0x7ac>
 80051fa:	e024      	b.n	8005246 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b0c      	cmp	r3, #12
 8005200:	d01f      	beq.n	8005242 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005202:	4b13      	ldr	r3, [pc, #76]	; (8005250 <HAL_RCC_OscConfig+0x820>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a12      	ldr	r2, [pc, #72]	; (8005250 <HAL_RCC_OscConfig+0x820>)
 8005208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800520c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520e:	f7fe fb7f 	bl	8003910 <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005216:	f7fe fb7b 	bl	8003910 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e00f      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005228:	4b09      	ldr	r3, [pc, #36]	; (8005250 <HAL_RCC_OscConfig+0x820>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f0      	bne.n	8005216 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_RCC_OscConfig+0x820>)
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	4905      	ldr	r1, [pc, #20]	; (8005250 <HAL_RCC_OscConfig+0x820>)
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_RCC_OscConfig+0x824>)
 800523c:	4013      	ands	r3, r2
 800523e:	60cb      	str	r3, [r1, #12]
 8005240:	e001      	b.n	8005246 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	feeefffc 	.word	0xfeeefffc

08005258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0e7      	b.n	800543c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b75      	ldr	r3, [pc, #468]	; (8005444 <HAL_RCC_ClockConfig+0x1ec>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d910      	bls.n	800529c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b72      	ldr	r3, [pc, #456]	; (8005444 <HAL_RCC_ClockConfig+0x1ec>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 0207 	bic.w	r2, r3, #7
 8005282:	4970      	ldr	r1, [pc, #448]	; (8005444 <HAL_RCC_ClockConfig+0x1ec>)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b6e      	ldr	r3, [pc, #440]	; (8005444 <HAL_RCC_ClockConfig+0x1ec>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0cf      	b.n	800543c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d010      	beq.n	80052ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	4b66      	ldr	r3, [pc, #408]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d908      	bls.n	80052ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b8:	4b63      	ldr	r3, [pc, #396]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4960      	ldr	r1, [pc, #384]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d04c      	beq.n	8005370 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d107      	bne.n	80052ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052de:	4b5a      	ldr	r3, [pc, #360]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d121      	bne.n	800532e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e0a6      	b.n	800543c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052f6:	4b54      	ldr	r3, [pc, #336]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d115      	bne.n	800532e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e09a      	b.n	800543c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d107      	bne.n	800531e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800530e:	4b4e      	ldr	r3, [pc, #312]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e08e      	b.n	800543c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800531e:	4b4a      	ldr	r3, [pc, #296]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e086      	b.n	800543c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800532e:	4b46      	ldr	r3, [pc, #280]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f023 0203 	bic.w	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4943      	ldr	r1, [pc, #268]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 800533c:	4313      	orrs	r3, r2
 800533e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005340:	f7fe fae6 	bl	8003910 <HAL_GetTick>
 8005344:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005346:	e00a      	b.n	800535e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005348:	f7fe fae2 	bl	8003910 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f241 3288 	movw	r2, #5000	; 0x1388
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e06e      	b.n	800543c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535e:	4b3a      	ldr	r3, [pc, #232]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 020c 	and.w	r2, r3, #12
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	429a      	cmp	r2, r3
 800536e:	d1eb      	bne.n	8005348 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d010      	beq.n	800539e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	4b31      	ldr	r3, [pc, #196]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005388:	429a      	cmp	r2, r3
 800538a:	d208      	bcs.n	800539e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800538c:	4b2e      	ldr	r3, [pc, #184]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	492b      	ldr	r1, [pc, #172]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800539e:	4b29      	ldr	r3, [pc, #164]	; (8005444 <HAL_RCC_ClockConfig+0x1ec>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d210      	bcs.n	80053ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ac:	4b25      	ldr	r3, [pc, #148]	; (8005444 <HAL_RCC_ClockConfig+0x1ec>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f023 0207 	bic.w	r2, r3, #7
 80053b4:	4923      	ldr	r1, [pc, #140]	; (8005444 <HAL_RCC_ClockConfig+0x1ec>)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053bc:	4b21      	ldr	r3, [pc, #132]	; (8005444 <HAL_RCC_ClockConfig+0x1ec>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d001      	beq.n	80053ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e036      	b.n	800543c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053da:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	4918      	ldr	r1, [pc, #96]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d009      	beq.n	800540c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053f8:	4b13      	ldr	r3, [pc, #76]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4910      	ldr	r1, [pc, #64]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 8005408:	4313      	orrs	r3, r2
 800540a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800540c:	f000 f824 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 8005410:	4602      	mov	r2, r0
 8005412:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	091b      	lsrs	r3, r3, #4
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	490b      	ldr	r1, [pc, #44]	; (800544c <HAL_RCC_ClockConfig+0x1f4>)
 800541e:	5ccb      	ldrb	r3, [r1, r3]
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
 8005428:	4a09      	ldr	r2, [pc, #36]	; (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 800542a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_RCC_ClockConfig+0x1fc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f7fd f863 	bl	80024fc <HAL_InitTick>
 8005436:	4603      	mov	r3, r0
 8005438:	72fb      	strb	r3, [r7, #11]

  return status;
 800543a:	7afb      	ldrb	r3, [r7, #11]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40022000 	.word	0x40022000
 8005448:	40021000 	.word	0x40021000
 800544c:	0800bd24 	.word	0x0800bd24
 8005450:	20000000 	.word	0x20000000
 8005454:	20000004 	.word	0x20000004

08005458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005458:	b480      	push	{r7}
 800545a:	b089      	sub	sp, #36	; 0x24
 800545c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005466:	4b3e      	ldr	r3, [pc, #248]	; (8005560 <HAL_RCC_GetSysClockFreq+0x108>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005470:	4b3b      	ldr	r3, [pc, #236]	; (8005560 <HAL_RCC_GetSysClockFreq+0x108>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_RCC_GetSysClockFreq+0x34>
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b0c      	cmp	r3, #12
 8005484:	d121      	bne.n	80054ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d11e      	bne.n	80054ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800548c:	4b34      	ldr	r3, [pc, #208]	; (8005560 <HAL_RCC_GetSysClockFreq+0x108>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d107      	bne.n	80054a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005498:	4b31      	ldr	r3, [pc, #196]	; (8005560 <HAL_RCC_GetSysClockFreq+0x108>)
 800549a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800549e:	0a1b      	lsrs	r3, r3, #8
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	e005      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054a8:	4b2d      	ldr	r3, [pc, #180]	; (8005560 <HAL_RCC_GetSysClockFreq+0x108>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054b4:	4a2b      	ldr	r2, [pc, #172]	; (8005564 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10d      	bne.n	80054e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054c8:	e00a      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d102      	bne.n	80054d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054d0:	4b25      	ldr	r3, [pc, #148]	; (8005568 <HAL_RCC_GetSysClockFreq+0x110>)
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	e004      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d101      	bne.n	80054e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054dc:	4b23      	ldr	r3, [pc, #140]	; (800556c <HAL_RCC_GetSysClockFreq+0x114>)
 80054de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b0c      	cmp	r3, #12
 80054e4:	d134      	bne.n	8005550 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054e6:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <HAL_RCC_GetSysClockFreq+0x108>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d003      	beq.n	80054fe <HAL_RCC_GetSysClockFreq+0xa6>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d003      	beq.n	8005504 <HAL_RCC_GetSysClockFreq+0xac>
 80054fc:	e005      	b.n	800550a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054fe:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <HAL_RCC_GetSysClockFreq+0x110>)
 8005500:	617b      	str	r3, [r7, #20]
      break;
 8005502:	e005      	b.n	8005510 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005504:	4b19      	ldr	r3, [pc, #100]	; (800556c <HAL_RCC_GetSysClockFreq+0x114>)
 8005506:	617b      	str	r3, [r7, #20]
      break;
 8005508:	e002      	b.n	8005510 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	617b      	str	r3, [r7, #20]
      break;
 800550e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005510:	4b13      	ldr	r3, [pc, #76]	; (8005560 <HAL_RCC_GetSysClockFreq+0x108>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	3301      	adds	r3, #1
 800551c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800551e:	4b10      	ldr	r3, [pc, #64]	; (8005560 <HAL_RCC_GetSysClockFreq+0x108>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	0a1b      	lsrs	r3, r3, #8
 8005524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	fb03 f202 	mul.w	r2, r3, r2
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005536:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <HAL_RCC_GetSysClockFreq+0x108>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	0e5b      	lsrs	r3, r3, #25
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	3301      	adds	r3, #1
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005550:	69bb      	ldr	r3, [r7, #24]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3724      	adds	r7, #36	; 0x24
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40021000 	.word	0x40021000
 8005564:	0800bd3c 	.word	0x0800bd3c
 8005568:	00f42400 	.word	0x00f42400
 800556c:	007a1200 	.word	0x007a1200

08005570 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005574:	4b03      	ldr	r3, [pc, #12]	; (8005584 <HAL_RCC_GetHCLKFreq+0x14>)
 8005576:	681b      	ldr	r3, [r3, #0]
}
 8005578:	4618      	mov	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000000 	.word	0x20000000

08005588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800558c:	f7ff fff0 	bl	8005570 <HAL_RCC_GetHCLKFreq>
 8005590:	4602      	mov	r2, r0
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	0a1b      	lsrs	r3, r3, #8
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	4904      	ldr	r1, [pc, #16]	; (80055b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800559e:	5ccb      	ldrb	r3, [r1, r3]
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021000 	.word	0x40021000
 80055b0:	0800bd34 	.word	0x0800bd34

080055b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055b8:	f7ff ffda 	bl	8005570 <HAL_RCC_GetHCLKFreq>
 80055bc:	4602      	mov	r2, r0
 80055be:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	0adb      	lsrs	r3, r3, #11
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	4904      	ldr	r1, [pc, #16]	; (80055dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055ca:	5ccb      	ldrb	r3, [r1, r3]
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40021000 	.word	0x40021000
 80055dc:	0800bd34 	.word	0x0800bd34

080055e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	220f      	movs	r2, #15
 80055ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80055f0:	4b12      	ldr	r3, [pc, #72]	; (800563c <HAL_RCC_GetClockConfig+0x5c>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 0203 	and.w	r2, r3, #3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <HAL_RCC_GetClockConfig+0x5c>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005608:	4b0c      	ldr	r3, [pc, #48]	; (800563c <HAL_RCC_GetClockConfig+0x5c>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005614:	4b09      	ldr	r3, [pc, #36]	; (800563c <HAL_RCC_GetClockConfig+0x5c>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	08db      	lsrs	r3, r3, #3
 800561a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005622:	4b07      	ldr	r3, [pc, #28]	; (8005640 <HAL_RCC_GetClockConfig+0x60>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0207 	and.w	r2, r3, #7
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	601a      	str	r2, [r3, #0]
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000
 8005640:	40022000 	.word	0x40022000

08005644 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005650:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800565c:	f7ff f984 	bl	8004968 <HAL_PWREx_GetVoltageRange>
 8005660:	6178      	str	r0, [r7, #20]
 8005662:	e014      	b.n	800568e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005664:	4b25      	ldr	r3, [pc, #148]	; (80056fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005668:	4a24      	ldr	r2, [pc, #144]	; (80056fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800566a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566e:	6593      	str	r3, [r2, #88]	; 0x58
 8005670:	4b22      	ldr	r3, [pc, #136]	; (80056fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800567c:	f7ff f974 	bl	8004968 <HAL_PWREx_GetVoltageRange>
 8005680:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005682:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005686:	4a1d      	ldr	r2, [pc, #116]	; (80056fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800568c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005694:	d10b      	bne.n	80056ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b80      	cmp	r3, #128	; 0x80
 800569a:	d919      	bls.n	80056d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2ba0      	cmp	r3, #160	; 0xa0
 80056a0:	d902      	bls.n	80056a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056a2:	2302      	movs	r3, #2
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	e013      	b.n	80056d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056a8:	2301      	movs	r3, #1
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	e010      	b.n	80056d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b80      	cmp	r3, #128	; 0x80
 80056b2:	d902      	bls.n	80056ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056b4:	2303      	movs	r3, #3
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	e00a      	b.n	80056d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b80      	cmp	r3, #128	; 0x80
 80056be:	d102      	bne.n	80056c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056c0:	2302      	movs	r3, #2
 80056c2:	613b      	str	r3, [r7, #16]
 80056c4:	e004      	b.n	80056d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b70      	cmp	r3, #112	; 0x70
 80056ca:	d101      	bne.n	80056d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056cc:	2301      	movs	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f023 0207 	bic.w	r2, r3, #7
 80056d8:	4909      	ldr	r1, [pc, #36]	; (8005700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d001      	beq.n	80056f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40021000 	.word	0x40021000
 8005700:	40022000 	.word	0x40022000

08005704 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800570c:	2300      	movs	r3, #0
 800570e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005710:	2300      	movs	r3, #0
 8005712:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571c:	2b00      	cmp	r3, #0
 800571e:	d031      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005728:	d01a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800572a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800572e:	d814      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d009      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005734:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005738:	d10f      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800573a:	4b5d      	ldr	r3, [pc, #372]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	4a5c      	ldr	r2, [pc, #368]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005746:	e00c      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	2100      	movs	r1, #0
 800574e:	4618      	mov	r0, r3
 8005750:	f000 f9de 	bl	8005b10 <RCCEx_PLLSAI1_Config>
 8005754:	4603      	mov	r3, r0
 8005756:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005758:	e003      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	74fb      	strb	r3, [r7, #19]
      break;
 800575e:	e000      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005768:	4b51      	ldr	r3, [pc, #324]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005776:	494e      	ldr	r1, [pc, #312]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800577e:	e001      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005780:	7cfb      	ldrb	r3, [r7, #19]
 8005782:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 809e 	beq.w	80058ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005792:	2300      	movs	r3, #0
 8005794:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005796:	4b46      	ldr	r3, [pc, #280]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80057a6:	2300      	movs	r3, #0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00d      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ac:	4b40      	ldr	r3, [pc, #256]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b0:	4a3f      	ldr	r2, [pc, #252]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b6:	6593      	str	r3, [r2, #88]	; 0x58
 80057b8:	4b3d      	ldr	r3, [pc, #244]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c0:	60bb      	str	r3, [r7, #8]
 80057c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c4:	2301      	movs	r3, #1
 80057c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057c8:	4b3a      	ldr	r3, [pc, #232]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a39      	ldr	r2, [pc, #228]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80057ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057d4:	f7fe f89c 	bl	8003910 <HAL_GetTick>
 80057d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057da:	e009      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057dc:	f7fe f898 	bl	8003910 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d902      	bls.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	74fb      	strb	r3, [r7, #19]
        break;
 80057ee:	e005      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057f0:	4b30      	ldr	r3, [pc, #192]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0ef      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d15a      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005802:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01e      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	429a      	cmp	r2, r3
 800581c:	d019      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800581e:	4b24      	ldr	r3, [pc, #144]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005828:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800582a:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005830:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800583a:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800583c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005840:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800584a:	4a19      	ldr	r2, [pc, #100]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d016      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585c:	f7fe f858 	bl	8003910 <HAL_GetTick>
 8005860:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005862:	e00b      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005864:	f7fe f854 	bl	8003910 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005872:	4293      	cmp	r3, r2
 8005874:	d902      	bls.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	74fb      	strb	r3, [r7, #19]
            break;
 800587a:	e006      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800587c:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0ec      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800588a:	7cfb      	ldrb	r3, [r7, #19]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10b      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589e:	4904      	ldr	r1, [pc, #16]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058a6:	e009      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058a8:	7cfb      	ldrb	r3, [r7, #19]
 80058aa:	74bb      	strb	r3, [r7, #18]
 80058ac:	e006      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80058ae:	bf00      	nop
 80058b0:	40021000 	.word	0x40021000
 80058b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058bc:	7c7b      	ldrb	r3, [r7, #17]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d105      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c2:	4b8a      	ldr	r3, [pc, #552]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c6:	4a89      	ldr	r2, [pc, #548]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058da:	4b84      	ldr	r3, [pc, #528]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	f023 0203 	bic.w	r2, r3, #3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	4980      	ldr	r1, [pc, #512]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058fc:	4b7b      	ldr	r3, [pc, #492]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	f023 020c 	bic.w	r2, r3, #12
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	4978      	ldr	r1, [pc, #480]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800591e:	4b73      	ldr	r3, [pc, #460]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005924:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	496f      	ldr	r1, [pc, #444]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005940:	4b6a      	ldr	r3, [pc, #424]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	4967      	ldr	r1, [pc, #412]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005962:	4b62      	ldr	r3, [pc, #392]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	495e      	ldr	r1, [pc, #376]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005984:	4b59      	ldr	r3, [pc, #356]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	4956      	ldr	r1, [pc, #344]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059a6:	4b51      	ldr	r3, [pc, #324]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	494d      	ldr	r1, [pc, #308]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d028      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059c8:	4b48      	ldr	r3, [pc, #288]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	4945      	ldr	r1, [pc, #276]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059e6:	d106      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e8:	4b40      	ldr	r3, [pc, #256]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4a3f      	ldr	r2, [pc, #252]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059f2:	60d3      	str	r3, [r2, #12]
 80059f4:	e011      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059fe:	d10c      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	2101      	movs	r1, #1
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f882 	bl	8005b10 <RCCEx_PLLSAI1_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a10:	7cfb      	ldrb	r3, [r7, #19]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005a16:	7cfb      	ldrb	r3, [r7, #19]
 8005a18:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d028      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a26:	4b31      	ldr	r3, [pc, #196]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a34:	492d      	ldr	r1, [pc, #180]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a44:	d106      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a46:	4b29      	ldr	r3, [pc, #164]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	4a28      	ldr	r2, [pc, #160]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a50:	60d3      	str	r3, [r2, #12]
 8005a52:	e011      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a5c:	d10c      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3304      	adds	r3, #4
 8005a62:	2101      	movs	r1, #1
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 f853 	bl	8005b10 <RCCEx_PLLSAI1_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a6e:	7cfb      	ldrb	r3, [r7, #19]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01c      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a84:	4b19      	ldr	r3, [pc, #100]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a92:	4916      	ldr	r1, [pc, #88]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aa2:	d10c      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	2102      	movs	r1, #2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f830 	bl	8005b10 <RCCEx_PLLSAI1_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ab4:	7cfb      	ldrb	r3, [r7, #19]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005aba:	7cfb      	ldrb	r3, [r7, #19]
 8005abc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005aca:	4b08      	ldr	r3, [pc, #32]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad8:	4904      	ldr	r1, [pc, #16]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ae0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40021000 	.word	0x40021000

08005af0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a04      	ldr	r2, [pc, #16]	; (8005b0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005afa:	f043 0304 	orr.w	r3, r3, #4
 8005afe:	6013      	str	r3, [r2, #0]
}
 8005b00:	bf00      	nop
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40021000 	.word	0x40021000

08005b10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b1e:	4b74      	ldr	r3, [pc, #464]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d018      	beq.n	8005b5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b2a:	4b71      	ldr	r3, [pc, #452]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f003 0203 	and.w	r2, r3, #3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d10d      	bne.n	8005b56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
       ||
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d009      	beq.n	8005b56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b42:	4b6b      	ldr	r3, [pc, #428]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	091b      	lsrs	r3, r3, #4
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
       ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d047      	beq.n	8005be6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	73fb      	strb	r3, [r7, #15]
 8005b5a:	e044      	b.n	8005be6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d018      	beq.n	8005b96 <RCCEx_PLLSAI1_Config+0x86>
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d825      	bhi.n	8005bb4 <RCCEx_PLLSAI1_Config+0xa4>
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d002      	beq.n	8005b72 <RCCEx_PLLSAI1_Config+0x62>
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d009      	beq.n	8005b84 <RCCEx_PLLSAI1_Config+0x74>
 8005b70:	e020      	b.n	8005bb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b72:	4b5f      	ldr	r3, [pc, #380]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11d      	bne.n	8005bba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b82:	e01a      	b.n	8005bba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b84:	4b5a      	ldr	r3, [pc, #360]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d116      	bne.n	8005bbe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b94:	e013      	b.n	8005bbe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b96:	4b56      	ldr	r3, [pc, #344]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10f      	bne.n	8005bc2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ba2:	4b53      	ldr	r3, [pc, #332]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bb2:	e006      	b.n	8005bc2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb8:	e004      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bba:	bf00      	nop
 8005bbc:	e002      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10d      	bne.n	8005be6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bca:	4b49      	ldr	r3, [pc, #292]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6819      	ldr	r1, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	430b      	orrs	r3, r1
 8005be0:	4943      	ldr	r1, [pc, #268]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d17c      	bne.n	8005ce6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005bec:	4b40      	ldr	r3, [pc, #256]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a3f      	ldr	r2, [pc, #252]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf8:	f7fd fe8a 	bl	8003910 <HAL_GetTick>
 8005bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bfe:	e009      	b.n	8005c14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c00:	f7fd fe86 	bl	8003910 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d902      	bls.n	8005c14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	73fb      	strb	r3, [r7, #15]
        break;
 8005c12:	e005      	b.n	8005c20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c14:	4b36      	ldr	r3, [pc, #216]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1ef      	bne.n	8005c00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d15f      	bne.n	8005ce6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d110      	bne.n	8005c4e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c2c:	4b30      	ldr	r3, [pc, #192]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005c34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6892      	ldr	r2, [r2, #8]
 8005c3c:	0211      	lsls	r1, r2, #8
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68d2      	ldr	r2, [r2, #12]
 8005c42:	06d2      	lsls	r2, r2, #27
 8005c44:	430a      	orrs	r2, r1
 8005c46:	492a      	ldr	r1, [pc, #168]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	610b      	str	r3, [r1, #16]
 8005c4c:	e027      	b.n	8005c9e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d112      	bne.n	8005c7a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c54:	4b26      	ldr	r3, [pc, #152]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6892      	ldr	r2, [r2, #8]
 8005c64:	0211      	lsls	r1, r2, #8
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6912      	ldr	r2, [r2, #16]
 8005c6a:	0852      	lsrs	r2, r2, #1
 8005c6c:	3a01      	subs	r2, #1
 8005c6e:	0552      	lsls	r2, r2, #21
 8005c70:	430a      	orrs	r2, r1
 8005c72:	491f      	ldr	r1, [pc, #124]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	610b      	str	r3, [r1, #16]
 8005c78:	e011      	b.n	8005c9e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c7a:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6892      	ldr	r2, [r2, #8]
 8005c8a:	0211      	lsls	r1, r2, #8
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6952      	ldr	r2, [r2, #20]
 8005c90:	0852      	lsrs	r2, r2, #1
 8005c92:	3a01      	subs	r2, #1
 8005c94:	0652      	lsls	r2, r2, #25
 8005c96:	430a      	orrs	r2, r1
 8005c98:	4915      	ldr	r1, [pc, #84]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c9e:	4b14      	ldr	r3, [pc, #80]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a13      	ldr	r2, [pc, #76]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ca4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ca8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005caa:	f7fd fe31 	bl	8003910 <HAL_GetTick>
 8005cae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cb0:	e009      	b.n	8005cc6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cb2:	f7fd fe2d 	bl	8003910 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d902      	bls.n	8005cc6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	73fb      	strb	r3, [r7, #15]
          break;
 8005cc4:	e005      	b.n	8005cd2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0ef      	beq.n	8005cb2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d106      	bne.n	8005ce6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	4903      	ldr	r1, [pc, #12]	; (8005cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40021000 	.word	0x40021000

08005cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e049      	b.n	8005d9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f841 	bl	8005da2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f000 f9dc 	bl	80060f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d001      	beq.n	8005dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e03b      	b.n	8005e48 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a19      	ldr	r2, [pc, #100]	; (8005e54 <HAL_TIM_Base_Start_IT+0x9c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d009      	beq.n	8005e06 <HAL_TIM_Base_Start_IT+0x4e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfa:	d004      	beq.n	8005e06 <HAL_TIM_Base_Start_IT+0x4e>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <HAL_TIM_Base_Start_IT+0xa0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d115      	bne.n	8005e32 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <HAL_TIM_Base_Start_IT+0xa4>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b06      	cmp	r3, #6
 8005e16:	d015      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x8c>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1e:	d011      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e30:	e008      	b.n	8005e44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0201 	orr.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e000      	b.n	8005e46 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	40012c00 	.word	0x40012c00
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	00010007 	.word	0x00010007

08005e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d122      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d11b      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0202 	mvn.w	r2, #2
 8005e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f905 	bl	80060b2 <HAL_TIM_IC_CaptureCallback>
 8005ea8:	e005      	b.n	8005eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f8f7 	bl	800609e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f908 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d122      	bne.n	8005f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d11b      	bne.n	8005f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0204 	mvn.w	r2, #4
 8005ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f8db 	bl	80060b2 <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f8cd 	bl	800609e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8de 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d122      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d11b      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0208 	mvn.w	r2, #8
 8005f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f8b1 	bl	80060b2 <HAL_TIM_IC_CaptureCallback>
 8005f50:	e005      	b.n	8005f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f8a3 	bl	800609e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f8b4 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	d122      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d11b      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0210 	mvn.w	r2, #16
 8005f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f887 	bl	80060b2 <HAL_TIM_IC_CaptureCallback>
 8005fa4:	e005      	b.n	8005fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f879 	bl	800609e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f88a 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d10e      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d107      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0201 	mvn.w	r2, #1
 8005fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fb f9be 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fee:	2b80      	cmp	r3, #128	; 0x80
 8005ff0:	d10e      	bne.n	8006010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffc:	2b80      	cmp	r3, #128	; 0x80
 8005ffe:	d107      	bne.n	8006010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f8de 	bl	80061cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601e:	d10e      	bne.n	800603e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602a:	2b80      	cmp	r3, #128	; 0x80
 800602c:	d107      	bne.n	800603e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f8d1 	bl	80061e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	d10e      	bne.n	800606a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d107      	bne.n	800606a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f838 	bl	80060da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	2b20      	cmp	r3, #32
 8006076:	d10e      	bne.n	8006096 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b20      	cmp	r3, #32
 8006084:	d107      	bne.n	8006096 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f06f 0220 	mvn.w	r2, #32
 800608e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f891 	bl	80061b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a2a      	ldr	r2, [pc, #168]	; (80061ac <TIM_Base_SetConfig+0xbc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_Base_SetConfig+0x20>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d108      	bne.n	8006122 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a21      	ldr	r2, [pc, #132]	; (80061ac <TIM_Base_SetConfig+0xbc>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00b      	beq.n	8006142 <TIM_Base_SetConfig+0x52>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006130:	d007      	beq.n	8006142 <TIM_Base_SetConfig+0x52>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a1e      	ldr	r2, [pc, #120]	; (80061b0 <TIM_Base_SetConfig+0xc0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d003      	beq.n	8006142 <TIM_Base_SetConfig+0x52>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <TIM_Base_SetConfig+0xc4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d108      	bne.n	8006154 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a0c      	ldr	r2, [pc, #48]	; (80061ac <TIM_Base_SetConfig+0xbc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d007      	beq.n	8006190 <TIM_Base_SetConfig+0xa0>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a0b      	ldr	r2, [pc, #44]	; (80061b0 <TIM_Base_SetConfig+0xc0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_Base_SetConfig+0xa0>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <TIM_Base_SetConfig+0xc4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d103      	bne.n	8006198 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	615a      	str	r2, [r3, #20]
}
 800619e:	bf00      	nop
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400

080061b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e040      	b.n	8006288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fc fb08 	bl	800282c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2224      	movs	r2, #36	; 0x24
 8006220:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0201 	bic.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f992 	bl	800655c <UART_SetConfig>
 8006238:	4603      	mov	r3, r0
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e022      	b.n	8006288 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fbb2 	bl	80069b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800625e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800626e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fc39 	bl	8006af8 <UART_CheckIdleState>
 8006286:	4603      	mov	r3, r0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	4613      	mov	r3, r2
 800629e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	f040 8082 	bne.w	80063ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_UART_Transmit+0x26>
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e07a      	b.n	80063b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_UART_Transmit+0x38>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e073      	b.n	80063b0 <HAL_UART_Transmit+0x120>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2221      	movs	r2, #33	; 0x21
 80062dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062de:	f7fd fb17 	bl	8003910 <HAL_GetTick>
 80062e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	88fa      	ldrh	r2, [r7, #6]
 80062e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fc:	d108      	bne.n	8006310 <HAL_UART_Transmit+0x80>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	e003      	b.n	8006318 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006320:	e02d      	b.n	800637e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2200      	movs	r2, #0
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fc2c 	bl	8006b8a <UART_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e039      	b.n	80063b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	881a      	ldrh	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800634e:	b292      	uxth	r2, r2
 8006350:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	3302      	adds	r3, #2
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	e008      	b.n	800636c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	781a      	ldrb	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	b292      	uxth	r2, r2
 8006364:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	3301      	adds	r3, #1
 800636a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1cb      	bne.n	8006322 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2200      	movs	r2, #0
 8006392:	2140      	movs	r1, #64	; 0x40
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fbf8 	bl	8006b8a <UART_WaitOnFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e005      	b.n	80063b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e000      	b.n	80063b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
  }
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	f040 80bf 	bne.w	8006550 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_UART_Receive+0x26>
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e0b7      	b.n	8006552 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_UART_Receive+0x38>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e0b0      	b.n	8006552 <HAL_UART_Receive+0x19a>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2222      	movs	r2, #34	; 0x22
 8006404:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800640c:	f7fd fa80 	bl	8003910 <HAL_GetTick>
 8006410:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	88fa      	ldrh	r2, [r7, #6]
 800641e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642a:	d10e      	bne.n	800644a <HAL_UART_Receive+0x92>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d105      	bne.n	8006440 <HAL_UART_Receive+0x88>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f240 12ff 	movw	r2, #511	; 0x1ff
 800643a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800643e:	e02d      	b.n	800649c <HAL_UART_Receive+0xe4>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	22ff      	movs	r2, #255	; 0xff
 8006444:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006448:	e028      	b.n	800649c <HAL_UART_Receive+0xe4>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10d      	bne.n	800646e <HAL_UART_Receive+0xb6>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <HAL_UART_Receive+0xac>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	22ff      	movs	r2, #255	; 0xff
 800645e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006462:	e01b      	b.n	800649c <HAL_UART_Receive+0xe4>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	227f      	movs	r2, #127	; 0x7f
 8006468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800646c:	e016      	b.n	800649c <HAL_UART_Receive+0xe4>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006476:	d10d      	bne.n	8006494 <HAL_UART_Receive+0xdc>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d104      	bne.n	800648a <HAL_UART_Receive+0xd2>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	227f      	movs	r2, #127	; 0x7f
 8006484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006488:	e008      	b.n	800649c <HAL_UART_Receive+0xe4>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	223f      	movs	r2, #63	; 0x3f
 800648e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006492:	e003      	b.n	800649c <HAL_UART_Receive+0xe4>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ac:	d108      	bne.n	80064c0 <HAL_UART_Receive+0x108>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d104      	bne.n	80064c0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	e003      	b.n	80064c8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80064d0:	e033      	b.n	800653a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2200      	movs	r2, #0
 80064da:	2120      	movs	r1, #32
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 fb54 	bl	8006b8a <UART_WaitOnFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e032      	b.n	8006552 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10c      	bne.n	800650c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	8a7b      	ldrh	r3, [r7, #18]
 80064fc:	4013      	ands	r3, r2
 80064fe:	b29a      	uxth	r2, r3
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	3302      	adds	r3, #2
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	e00d      	b.n	8006528 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006512:	b29b      	uxth	r3, r3
 8006514:	b2da      	uxtb	r2, r3
 8006516:	8a7b      	ldrh	r3, [r7, #18]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	4013      	ands	r3, r2
 800651c:	b2da      	uxtb	r2, r3
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	3301      	adds	r3, #1
 8006526:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1c5      	bne.n	80064d2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	e000      	b.n	8006552 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006550:	2302      	movs	r3, #2
  }
}
 8006552:	4618      	mov	r0, r3
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800655c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006560:	b08a      	sub	sp, #40	; 0x28
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	431a      	orrs	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	431a      	orrs	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	4313      	orrs	r3, r2
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	4bb4      	ldr	r3, [pc, #720]	; (800685c <UART_SetConfig+0x300>)
 800658c:	4013      	ands	r3, r2
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	6812      	ldr	r2, [r2, #0]
 8006592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006594:	430b      	orrs	r3, r1
 8006596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4aa9      	ldr	r2, [pc, #676]	; (8006860 <UART_SetConfig+0x304>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c4:	4313      	orrs	r3, r2
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d8:	430a      	orrs	r2, r1
 80065da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4aa0      	ldr	r2, [pc, #640]	; (8006864 <UART_SetConfig+0x308>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d126      	bne.n	8006634 <UART_SetConfig+0xd8>
 80065e6:	4ba0      	ldr	r3, [pc, #640]	; (8006868 <UART_SetConfig+0x30c>)
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d81b      	bhi.n	800662c <UART_SetConfig+0xd0>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <UART_SetConfig+0xa0>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	0800660d 	.word	0x0800660d
 8006600:	0800661d 	.word	0x0800661d
 8006604:	08006615 	.word	0x08006615
 8006608:	08006625 	.word	0x08006625
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006612:	e080      	b.n	8006716 <UART_SetConfig+0x1ba>
 8006614:	2302      	movs	r3, #2
 8006616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800661a:	e07c      	b.n	8006716 <UART_SetConfig+0x1ba>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006622:	e078      	b.n	8006716 <UART_SetConfig+0x1ba>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800662a:	e074      	b.n	8006716 <UART_SetConfig+0x1ba>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006632:	e070      	b.n	8006716 <UART_SetConfig+0x1ba>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a8c      	ldr	r2, [pc, #560]	; (800686c <UART_SetConfig+0x310>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d138      	bne.n	80066b0 <UART_SetConfig+0x154>
 800663e:	4b8a      	ldr	r3, [pc, #552]	; (8006868 <UART_SetConfig+0x30c>)
 8006640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006644:	f003 030c 	and.w	r3, r3, #12
 8006648:	2b0c      	cmp	r3, #12
 800664a:	d82d      	bhi.n	80066a8 <UART_SetConfig+0x14c>
 800664c:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <UART_SetConfig+0xf8>)
 800664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006652:	bf00      	nop
 8006654:	08006689 	.word	0x08006689
 8006658:	080066a9 	.word	0x080066a9
 800665c:	080066a9 	.word	0x080066a9
 8006660:	080066a9 	.word	0x080066a9
 8006664:	08006699 	.word	0x08006699
 8006668:	080066a9 	.word	0x080066a9
 800666c:	080066a9 	.word	0x080066a9
 8006670:	080066a9 	.word	0x080066a9
 8006674:	08006691 	.word	0x08006691
 8006678:	080066a9 	.word	0x080066a9
 800667c:	080066a9 	.word	0x080066a9
 8006680:	080066a9 	.word	0x080066a9
 8006684:	080066a1 	.word	0x080066a1
 8006688:	2300      	movs	r3, #0
 800668a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668e:	e042      	b.n	8006716 <UART_SetConfig+0x1ba>
 8006690:	2302      	movs	r3, #2
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006696:	e03e      	b.n	8006716 <UART_SetConfig+0x1ba>
 8006698:	2304      	movs	r3, #4
 800669a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800669e:	e03a      	b.n	8006716 <UART_SetConfig+0x1ba>
 80066a0:	2308      	movs	r3, #8
 80066a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a6:	e036      	b.n	8006716 <UART_SetConfig+0x1ba>
 80066a8:	2310      	movs	r3, #16
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ae:	e032      	b.n	8006716 <UART_SetConfig+0x1ba>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a6a      	ldr	r2, [pc, #424]	; (8006860 <UART_SetConfig+0x304>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d12a      	bne.n	8006710 <UART_SetConfig+0x1b4>
 80066ba:	4b6b      	ldr	r3, [pc, #428]	; (8006868 <UART_SetConfig+0x30c>)
 80066bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066c8:	d01a      	beq.n	8006700 <UART_SetConfig+0x1a4>
 80066ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066ce:	d81b      	bhi.n	8006708 <UART_SetConfig+0x1ac>
 80066d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d4:	d00c      	beq.n	80066f0 <UART_SetConfig+0x194>
 80066d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066da:	d815      	bhi.n	8006708 <UART_SetConfig+0x1ac>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <UART_SetConfig+0x18c>
 80066e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e4:	d008      	beq.n	80066f8 <UART_SetConfig+0x19c>
 80066e6:	e00f      	b.n	8006708 <UART_SetConfig+0x1ac>
 80066e8:	2300      	movs	r3, #0
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ee:	e012      	b.n	8006716 <UART_SetConfig+0x1ba>
 80066f0:	2302      	movs	r3, #2
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f6:	e00e      	b.n	8006716 <UART_SetConfig+0x1ba>
 80066f8:	2304      	movs	r3, #4
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066fe:	e00a      	b.n	8006716 <UART_SetConfig+0x1ba>
 8006700:	2308      	movs	r3, #8
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006706:	e006      	b.n	8006716 <UART_SetConfig+0x1ba>
 8006708:	2310      	movs	r3, #16
 800670a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670e:	e002      	b.n	8006716 <UART_SetConfig+0x1ba>
 8006710:	2310      	movs	r3, #16
 8006712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a51      	ldr	r2, [pc, #324]	; (8006860 <UART_SetConfig+0x304>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d17a      	bne.n	8006816 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006724:	2b08      	cmp	r3, #8
 8006726:	d824      	bhi.n	8006772 <UART_SetConfig+0x216>
 8006728:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <UART_SetConfig+0x1d4>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006755 	.word	0x08006755
 8006734:	08006773 	.word	0x08006773
 8006738:	0800675d 	.word	0x0800675d
 800673c:	08006773 	.word	0x08006773
 8006740:	08006763 	.word	0x08006763
 8006744:	08006773 	.word	0x08006773
 8006748:	08006773 	.word	0x08006773
 800674c:	08006773 	.word	0x08006773
 8006750:	0800676b 	.word	0x0800676b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006754:	f7fe ff18 	bl	8005588 <HAL_RCC_GetPCLK1Freq>
 8006758:	61f8      	str	r0, [r7, #28]
        break;
 800675a:	e010      	b.n	800677e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800675c:	4b44      	ldr	r3, [pc, #272]	; (8006870 <UART_SetConfig+0x314>)
 800675e:	61fb      	str	r3, [r7, #28]
        break;
 8006760:	e00d      	b.n	800677e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006762:	f7fe fe79 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 8006766:	61f8      	str	r0, [r7, #28]
        break;
 8006768:	e009      	b.n	800677e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676e:	61fb      	str	r3, [r7, #28]
        break;
 8006770:	e005      	b.n	800677e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800677c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8107 	beq.w	8006994 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	4613      	mov	r3, r2
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	4413      	add	r3, r2
 8006790:	69fa      	ldr	r2, [r7, #28]
 8006792:	429a      	cmp	r2, r3
 8006794:	d305      	bcc.n	80067a2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d903      	bls.n	80067aa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80067a8:	e0f4      	b.n	8006994 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	2200      	movs	r2, #0
 80067ae:	461c      	mov	r4, r3
 80067b0:	4615      	mov	r5, r2
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	f04f 0300 	mov.w	r3, #0
 80067ba:	022b      	lsls	r3, r5, #8
 80067bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80067c0:	0222      	lsls	r2, r4, #8
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	6849      	ldr	r1, [r1, #4]
 80067c6:	0849      	lsrs	r1, r1, #1
 80067c8:	2000      	movs	r0, #0
 80067ca:	4688      	mov	r8, r1
 80067cc:	4681      	mov	r9, r0
 80067ce:	eb12 0a08 	adds.w	sl, r2, r8
 80067d2:	eb43 0b09 	adc.w	fp, r3, r9
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067e4:	4650      	mov	r0, sl
 80067e6:	4659      	mov	r1, fp
 80067e8:	f7fa f9ae 	bl	8000b48 <__aeabi_uldivmod>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4613      	mov	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067fa:	d308      	bcc.n	800680e <UART_SetConfig+0x2b2>
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006802:	d204      	bcs.n	800680e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	60da      	str	r2, [r3, #12]
 800680c:	e0c2      	b.n	8006994 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006814:	e0be      	b.n	8006994 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681e:	d16a      	bne.n	80068f6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006824:	2b08      	cmp	r3, #8
 8006826:	d834      	bhi.n	8006892 <UART_SetConfig+0x336>
 8006828:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <UART_SetConfig+0x2d4>)
 800682a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682e:	bf00      	nop
 8006830:	08006855 	.word	0x08006855
 8006834:	08006875 	.word	0x08006875
 8006838:	0800687d 	.word	0x0800687d
 800683c:	08006893 	.word	0x08006893
 8006840:	08006883 	.word	0x08006883
 8006844:	08006893 	.word	0x08006893
 8006848:	08006893 	.word	0x08006893
 800684c:	08006893 	.word	0x08006893
 8006850:	0800688b 	.word	0x0800688b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006854:	f7fe fe98 	bl	8005588 <HAL_RCC_GetPCLK1Freq>
 8006858:	61f8      	str	r0, [r7, #28]
        break;
 800685a:	e020      	b.n	800689e <UART_SetConfig+0x342>
 800685c:	efff69f3 	.word	0xefff69f3
 8006860:	40008000 	.word	0x40008000
 8006864:	40013800 	.word	0x40013800
 8006868:	40021000 	.word	0x40021000
 800686c:	40004400 	.word	0x40004400
 8006870:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006874:	f7fe fe9e 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
 8006878:	61f8      	str	r0, [r7, #28]
        break;
 800687a:	e010      	b.n	800689e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4b4c      	ldr	r3, [pc, #304]	; (80069b0 <UART_SetConfig+0x454>)
 800687e:	61fb      	str	r3, [r7, #28]
        break;
 8006880:	e00d      	b.n	800689e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006882:	f7fe fde9 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 8006886:	61f8      	str	r0, [r7, #28]
        break;
 8006888:	e009      	b.n	800689e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688e:	61fb      	str	r3, [r7, #28]
        break;
 8006890:	e005      	b.n	800689e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800689c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d077      	beq.n	8006994 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	005a      	lsls	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	441a      	add	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b0f      	cmp	r3, #15
 80068be:	d916      	bls.n	80068ee <UART_SetConfig+0x392>
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c6:	d212      	bcs.n	80068ee <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f023 030f 	bic.w	r3, r3, #15
 80068d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	085b      	lsrs	r3, r3, #1
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	b29a      	uxth	r2, r3
 80068de:	8afb      	ldrh	r3, [r7, #22]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	8afa      	ldrh	r2, [r7, #22]
 80068ea:	60da      	str	r2, [r3, #12]
 80068ec:	e052      	b.n	8006994 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068f4:	e04e      	b.n	8006994 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d827      	bhi.n	800694e <UART_SetConfig+0x3f2>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <UART_SetConfig+0x3a8>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006929 	.word	0x08006929
 8006908:	08006931 	.word	0x08006931
 800690c:	08006939 	.word	0x08006939
 8006910:	0800694f 	.word	0x0800694f
 8006914:	0800693f 	.word	0x0800693f
 8006918:	0800694f 	.word	0x0800694f
 800691c:	0800694f 	.word	0x0800694f
 8006920:	0800694f 	.word	0x0800694f
 8006924:	08006947 	.word	0x08006947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006928:	f7fe fe2e 	bl	8005588 <HAL_RCC_GetPCLK1Freq>
 800692c:	61f8      	str	r0, [r7, #28]
        break;
 800692e:	e014      	b.n	800695a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006930:	f7fe fe40 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
 8006934:	61f8      	str	r0, [r7, #28]
        break;
 8006936:	e010      	b.n	800695a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006938:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <UART_SetConfig+0x454>)
 800693a:	61fb      	str	r3, [r7, #28]
        break;
 800693c:	e00d      	b.n	800695a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800693e:	f7fe fd8b 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 8006942:	61f8      	str	r0, [r7, #28]
        break;
 8006944:	e009      	b.n	800695a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800694a:	61fb      	str	r3, [r7, #28]
        break;
 800694c:	e005      	b.n	800695a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006958:	bf00      	nop
    }

    if (pclk != 0U)
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d019      	beq.n	8006994 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	085a      	lsrs	r2, r3, #1
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	441a      	add	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006972:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b0f      	cmp	r3, #15
 8006978:	d909      	bls.n	800698e <UART_SetConfig+0x432>
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006980:	d205      	bcs.n	800698e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	e002      	b.n	8006994 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3728      	adds	r7, #40	; 0x28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ae:	bf00      	nop
 80069b0:	00f42400 	.word	0x00f42400

080069b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01a      	beq.n	8006aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ab2:	d10a      	bne.n	8006aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
  }
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b08:	f7fc ff02 	bl	8003910 <HAL_GetTick>
 8006b0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d10e      	bne.n	8006b3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f82d 	bl	8006b8a <UART_WaitOnFlagUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e023      	b.n	8006b82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d10e      	bne.n	8006b66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f817 	bl	8006b8a <UART_WaitOnFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e00d      	b.n	8006b82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b09c      	sub	sp, #112	; 0x70
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	603b      	str	r3, [r7, #0]
 8006b96:	4613      	mov	r3, r2
 8006b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9a:	e0a5      	b.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba2:	f000 80a1 	beq.w	8006ce8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba6:	f7fc feb3 	bl	8003910 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d302      	bcc.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x32>
 8006bb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d13e      	bne.n	8006c3a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bd0:	667b      	str	r3, [r7, #100]	; 0x64
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006be0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e6      	bne.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	663b      	str	r3, [r7, #96]	; 0x60
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2220      	movs	r2, #32
 8006c26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e067      	b.n	8006d0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d04f      	beq.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c56:	d147      	bne.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c60:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34
 8006c82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e6      	bne.n	8006c62 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f023 0301 	bic.w	r3, r3, #1
 8006caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cb4:	623a      	str	r2, [r7, #32]
 8006cb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	69f9      	ldr	r1, [r7, #28]
 8006cba:	6a3a      	ldr	r2, [r7, #32]
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e5      	bne.n	8006c94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e010      	b.n	8006d0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69da      	ldr	r2, [r3, #28]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	bf0c      	ite	eq
 8006cf8:	2301      	moveq	r3, #1
 8006cfa:	2300      	movne	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	f43f af4a 	beq.w	8006b9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3770      	adds	r7, #112	; 0x70
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <__NVIC_SetPriority>:
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	6039      	str	r1, [r7, #0]
 8006d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	db0a      	blt.n	8006d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	490c      	ldr	r1, [pc, #48]	; (8006d60 <__NVIC_SetPriority+0x4c>)
 8006d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d32:	0112      	lsls	r2, r2, #4
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	440b      	add	r3, r1
 8006d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006d3c:	e00a      	b.n	8006d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	4908      	ldr	r1, [pc, #32]	; (8006d64 <__NVIC_SetPriority+0x50>)
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	3b04      	subs	r3, #4
 8006d4c:	0112      	lsls	r2, r2, #4
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	440b      	add	r3, r1
 8006d52:	761a      	strb	r2, [r3, #24]
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	e000e100 	.word	0xe000e100
 8006d64:	e000ed00 	.word	0xe000ed00

08006d68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006d6c:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <SysTick_Handler+0x1c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006d70:	f001 fd98 	bl	80088a4 <xTaskGetSchedulerState>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d001      	beq.n	8006d7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006d7a:	f002 fc3d 	bl	80095f8 <xPortSysTickHandler>
  }
}
 8006d7e:	bf00      	nop
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	e000e010 	.word	0xe000e010

08006d88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	f06f 0004 	mvn.w	r0, #4
 8006d92:	f7ff ffbf 	bl	8006d14 <__NVIC_SetPriority>
#endif
}
 8006d96:	bf00      	nop
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da2:	f3ef 8305 	mrs	r3, IPSR
 8006da6:	603b      	str	r3, [r7, #0]
  return(result);
 8006da8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006dae:	f06f 0305 	mvn.w	r3, #5
 8006db2:	607b      	str	r3, [r7, #4]
 8006db4:	e00c      	b.n	8006dd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006db6:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <osKernelInitialize+0x44>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006dbe:	4b08      	ldr	r3, [pc, #32]	; (8006de0 <osKernelInitialize+0x44>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	607b      	str	r3, [r7, #4]
 8006dc8:	e002      	b.n	8006dd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006dca:	f04f 33ff 	mov.w	r3, #4294967295
 8006dce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006dd0:	687b      	ldr	r3, [r7, #4]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20001234 	.word	0x20001234

08006de4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dea:	f3ef 8305 	mrs	r3, IPSR
 8006dee:	603b      	str	r3, [r7, #0]
  return(result);
 8006df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8006df6:	f06f 0305 	mvn.w	r3, #5
 8006dfa:	607b      	str	r3, [r7, #4]
 8006dfc:	e010      	b.n	8006e20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <osKernelStart+0x48>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d109      	bne.n	8006e1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e06:	f7ff ffbf 	bl	8006d88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e0a:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <osKernelStart+0x48>)
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e10:	f001 f8ec 	bl	8007fec <vTaskStartScheduler>
      stat = osOK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	607b      	str	r3, [r7, #4]
 8006e18:	e002      	b.n	8006e20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e20:	687b      	ldr	r3, [r7, #4]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20001234 	.word	0x20001234

08006e30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08e      	sub	sp, #56	; 0x38
 8006e34:	af04      	add	r7, sp, #16
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e40:	f3ef 8305 	mrs	r3, IPSR
 8006e44:	617b      	str	r3, [r7, #20]
  return(result);
 8006e46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d17f      	bne.n	8006f4c <osThreadNew+0x11c>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d07c      	beq.n	8006f4c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e56:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006e58:	2318      	movs	r3, #24
 8006e5a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006e60:	f04f 33ff 	mov.w	r3, #4294967295
 8006e64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d045      	beq.n	8006ef8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <osThreadNew+0x4a>
        name = attr->name;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d008      	beq.n	8006ea0 <osThreadNew+0x70>
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	2b38      	cmp	r3, #56	; 0x38
 8006e92:	d805      	bhi.n	8006ea0 <osThreadNew+0x70>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <osThreadNew+0x74>
        return (NULL);
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e054      	b.n	8006f4e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	089b      	lsrs	r3, r3, #2
 8006eb2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00e      	beq.n	8006eda <osThreadNew+0xaa>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	2bbb      	cmp	r3, #187	; 0xbb
 8006ec2:	d90a      	bls.n	8006eda <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d006      	beq.n	8006eda <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <osThreadNew+0xaa>
        mem = 1;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	61bb      	str	r3, [r7, #24]
 8006ed8:	e010      	b.n	8006efc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10c      	bne.n	8006efc <osThreadNew+0xcc>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d108      	bne.n	8006efc <osThreadNew+0xcc>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <osThreadNew+0xcc>
          mem = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61bb      	str	r3, [r7, #24]
 8006ef6:	e001      	b.n	8006efc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d110      	bne.n	8006f24 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f0a:	9202      	str	r2, [sp, #8]
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	6a3a      	ldr	r2, [r7, #32]
 8006f16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 feaf 	bl	8007c7c <xTaskCreateStatic>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	613b      	str	r3, [r7, #16]
 8006f22:	e013      	b.n	8006f4c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d110      	bne.n	8006f4c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	f107 0310 	add.w	r3, r7, #16
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fefa 	bl	8007d36 <xTaskCreate>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d001      	beq.n	8006f4c <osThreadNew+0x11c>
            hTask = NULL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f4c:	693b      	ldr	r3, [r7, #16]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3728      	adds	r7, #40	; 0x28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f002 f968 	bl	8009234 <pvTimerGetTimerID>
 8006f64:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	6852      	ldr	r2, [r2, #4]
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08c      	sub	sp, #48	; 0x30
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f94:	f3ef 8305 	mrs	r3, IPSR
 8006f98:	613b      	str	r3, [r7, #16]
  return(result);
 8006f9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d163      	bne.n	8007068 <osTimerNew+0xe8>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d060      	beq.n	8007068 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006fa6:	2008      	movs	r0, #8
 8006fa8:	f002 fbb6 	bl	8009718 <pvPortMalloc>
 8006fac:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d059      	beq.n	8007068 <osTimerNew+0xe8>
      callb->func = func;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006fc0:	7afb      	ldrb	r3, [r7, #11]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <osTimerNew+0x4c>
        reload = pdFALSE;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	e001      	b.n	8006fd0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01c      	beq.n	800701a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <osTimerNew+0x6e>
          name = attr->name;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d006      	beq.n	8007004 <osTimerNew+0x84>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	2b2b      	cmp	r3, #43	; 0x2b
 8006ffc:	d902      	bls.n	8007004 <osTimerNew+0x84>
          mem = 1;
 8006ffe:	2301      	movs	r3, #1
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	e00c      	b.n	800701e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d108      	bne.n	800701e <osTimerNew+0x9e>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <osTimerNew+0x9e>
            mem = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	e001      	b.n	800701e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d10c      	bne.n	800703e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	4b12      	ldr	r3, [pc, #72]	; (8007074 <osTimerNew+0xf4>)
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	2101      	movs	r1, #1
 8007034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007036:	f001 fd7e 	bl	8008b36 <xTimerCreateStatic>
 800703a:	6238      	str	r0, [r7, #32]
 800703c:	e00b      	b.n	8007056 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d108      	bne.n	8007056 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <osTimerNew+0xf4>)
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	2101      	movs	r1, #1
 800704e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007050:	f001 fd50 	bl	8008af4 <xTimerCreate>
 8007054:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d105      	bne.n	8007068 <osTimerNew+0xe8>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <osTimerNew+0xe8>
        vPortFree (callb);
 8007062:	6978      	ldr	r0, [r7, #20]
 8007064:	f002 fc24 	bl	80098b0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007068:	6a3b      	ldr	r3, [r7, #32]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3728      	adds	r7, #40	; 0x28
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	08006f57 	.word	0x08006f57

08007078 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af02      	add	r7, sp, #8
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007086:	f3ef 8305 	mrs	r3, IPSR
 800708a:	60fb      	str	r3, [r7, #12]
  return(result);
 800708c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <osTimerStart+0x22>
    stat = osErrorISR;
 8007092:	f06f 0305 	mvn.w	r3, #5
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	e017      	b.n	80070ca <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d103      	bne.n	80070a8 <osTimerStart+0x30>
    stat = osErrorParameter;
 80070a0:	f06f 0303 	mvn.w	r3, #3
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	e010      	b.n	80070ca <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80070a8:	2300      	movs	r3, #0
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	2300      	movs	r3, #0
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	2104      	movs	r1, #4
 80070b2:	6938      	ldr	r0, [r7, #16]
 80070b4:	f001 fdb8 	bl	8008c28 <xTimerGenericCommand>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d102      	bne.n	80070c4 <osTimerStart+0x4c>
      stat = osOK;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	e002      	b.n	80070ca <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80070c4:	f06f 0302 	mvn.w	r3, #2
 80070c8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80070ca:	697b      	ldr	r3, [r7, #20]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4a07      	ldr	r2, [pc, #28]	; (8007100 <vApplicationGetIdleTaskMemory+0x2c>)
 80070e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4a06      	ldr	r2, [pc, #24]	; (8007104 <vApplicationGetIdleTaskMemory+0x30>)
 80070ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070f2:	601a      	str	r2, [r3, #0]
}
 80070f4:	bf00      	nop
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	20001238 	.word	0x20001238
 8007104:	200012f4 	.word	0x200012f4

08007108 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4a07      	ldr	r2, [pc, #28]	; (8007134 <vApplicationGetTimerTaskMemory+0x2c>)
 8007118:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	4a06      	ldr	r2, [pc, #24]	; (8007138 <vApplicationGetTimerTaskMemory+0x30>)
 800711e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007126:	601a      	str	r2, [r3, #0]
}
 8007128:	bf00      	nop
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	200016f4 	.word	0x200016f4
 8007138:	200017b0 	.word	0x200017b0

0800713c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f103 0208 	add.w	r2, r3, #8
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f04f 32ff 	mov.w	r2, #4294967295
 8007154:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f103 0208 	add.w	r2, r3, #8
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f103 0208 	add.w	r2, r3, #8
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007196:	b480      	push	{r7}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	601a      	str	r2, [r3, #0]
}
 80071d2:	bf00      	nop
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f4:	d103      	bne.n	80071fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e00c      	b.n	8007218 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3308      	adds	r3, #8
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e002      	b.n	800720c <vListInsert+0x2e>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	429a      	cmp	r2, r3
 8007216:	d2f6      	bcs.n	8007206 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	601a      	str	r2, [r3, #0]
}
 8007244:	bf00      	nop
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	6892      	ldr	r2, [r2, #8]
 8007266:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6852      	ldr	r2, [r2, #4]
 8007270:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	429a      	cmp	r2, r3
 800727a:	d103      	bne.n	8007284 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	1e5a      	subs	r2, r3, #1
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072ce:	f002 f901 	bl	80094d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	68f9      	ldr	r1, [r7, #12]
 80072dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072de:	fb01 f303 	mul.w	r3, r1, r3
 80072e2:	441a      	add	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fe:	3b01      	subs	r3, #1
 8007300:	68f9      	ldr	r1, [r7, #12]
 8007302:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007304:	fb01 f303 	mul.w	r3, r1, r3
 8007308:	441a      	add	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	22ff      	movs	r2, #255	; 0xff
 8007312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	22ff      	movs	r2, #255	; 0xff
 800731a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d114      	bne.n	800734e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01a      	beq.n	8007362 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3310      	adds	r3, #16
 8007330:	4618      	mov	r0, r3
 8007332:	f001 f8f5 	bl	8008520 <xTaskRemoveFromEventList>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d012      	beq.n	8007362 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800733c:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <xQueueGenericReset+0xcc>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	e009      	b.n	8007362 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3310      	adds	r3, #16
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fef2 	bl	800713c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3324      	adds	r3, #36	; 0x24
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff feed 	bl	800713c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007362:	f002 f8e7 	bl	8009534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007366:	2301      	movs	r3, #1
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	e000ed04 	.word	0xe000ed04

08007374 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08e      	sub	sp, #56	; 0x38
 8007378:	af02      	add	r7, sp, #8
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <xQueueGenericCreateStatic+0x52>
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <xQueueGenericCreateStatic+0x56>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <xQueueGenericCreateStatic+0x58>
 80073ca:	2300      	movs	r3, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	623b      	str	r3, [r7, #32]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <xQueueGenericCreateStatic+0x7e>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <xQueueGenericCreateStatic+0x82>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <xQueueGenericCreateStatic+0x84>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	61fb      	str	r3, [r7, #28]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007412:	2350      	movs	r3, #80	; 0x50
 8007414:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b50      	cmp	r3, #80	; 0x50
 800741a:	d00a      	beq.n	8007432 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	61bb      	str	r3, [r7, #24]
}
 800742e:	bf00      	nop
 8007430:	e7fe      	b.n	8007430 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007432:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00d      	beq.n	800745a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007446:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	4613      	mov	r3, r2
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f805 	bl	8007464 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800745c:	4618      	mov	r0, r3
 800745e:	3730      	adds	r7, #48	; 0x30
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d103      	bne.n	8007480 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	e002      	b.n	8007486 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007492:	2101      	movs	r1, #1
 8007494:	69b8      	ldr	r0, [r7, #24]
 8007496:	f7ff ff05 	bl	80072a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	78fa      	ldrb	r2, [r7, #3]
 800749e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074a2:	bf00      	nop
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08e      	sub	sp, #56	; 0x38
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074ba:	2300      	movs	r3, #0
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <xQueueGenericSend+0x32>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <xQueueGenericSend+0x40>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <xQueueGenericSend+0x44>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <xQueueGenericSend+0x46>
 80074f0:	2300      	movs	r3, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10a      	bne.n	800750c <xQueueGenericSend+0x60>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007508:	bf00      	nop
 800750a:	e7fe      	b.n	800750a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d103      	bne.n	800751a <xQueueGenericSend+0x6e>
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007516:	2b01      	cmp	r3, #1
 8007518:	d101      	bne.n	800751e <xQueueGenericSend+0x72>
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <xQueueGenericSend+0x74>
 800751e:	2300      	movs	r3, #0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10a      	bne.n	800753a <xQueueGenericSend+0x8e>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	623b      	str	r3, [r7, #32]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800753a:	f001 f9b3 	bl	80088a4 <xTaskGetSchedulerState>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d102      	bne.n	800754a <xQueueGenericSend+0x9e>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <xQueueGenericSend+0xa2>
 800754a:	2301      	movs	r3, #1
 800754c:	e000      	b.n	8007550 <xQueueGenericSend+0xa4>
 800754e:	2300      	movs	r3, #0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <xQueueGenericSend+0xbe>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	61fb      	str	r3, [r7, #28]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800756a:	f001 ffb3 	bl	80094d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007576:	429a      	cmp	r2, r3
 8007578:	d302      	bcc.n	8007580 <xQueueGenericSend+0xd4>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d129      	bne.n	80075d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007586:	f000 fa0b 	bl	80079a0 <prvCopyDataToQueue>
 800758a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	2b00      	cmp	r3, #0
 8007592:	d010      	beq.n	80075b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	3324      	adds	r3, #36	; 0x24
 8007598:	4618      	mov	r0, r3
 800759a:	f000 ffc1 	bl	8008520 <xTaskRemoveFromEventList>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d013      	beq.n	80075cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075a4:	4b3f      	ldr	r3, [pc, #252]	; (80076a4 <xQueueGenericSend+0x1f8>)
 80075a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	e00a      	b.n	80075cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d007      	beq.n	80075cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075bc:	4b39      	ldr	r3, [pc, #228]	; (80076a4 <xQueueGenericSend+0x1f8>)
 80075be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075cc:	f001 ffb2 	bl	8009534 <vPortExitCritical>
				return pdPASS;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e063      	b.n	800769c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d103      	bne.n	80075e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075da:	f001 ffab 	bl	8009534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	e05c      	b.n	800769c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075e8:	f107 0314 	add.w	r3, r7, #20
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fffb 	bl	80085e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075f2:	2301      	movs	r3, #1
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075f6:	f001 ff9d 	bl	8009534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075fa:	f000 fd67 	bl	80080cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075fe:	f001 ff69 	bl	80094d4 <vPortEnterCritical>
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007608:	b25b      	sxtb	r3, r3
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d103      	bne.n	8007618 <xQueueGenericSend+0x16c>
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800761e:	b25b      	sxtb	r3, r3
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d103      	bne.n	800762e <xQueueGenericSend+0x182>
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800762e:	f001 ff81 	bl	8009534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007632:	1d3a      	adds	r2, r7, #4
 8007634:	f107 0314 	add.w	r3, r7, #20
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f000 ffea 	bl	8008614 <xTaskCheckForTimeOut>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d124      	bne.n	8007690 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007646:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007648:	f000 faa2 	bl	8007b90 <prvIsQueueFull>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d018      	beq.n	8007684 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	3310      	adds	r3, #16
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f000 ff10 	bl	8008480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007662:	f000 fa2d 	bl	8007ac0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007666:	f000 fd3f 	bl	80080e8 <xTaskResumeAll>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	f47f af7c 	bne.w	800756a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007672:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <xQueueGenericSend+0x1f8>)
 8007674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	e772      	b.n	800756a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007686:	f000 fa1b 	bl	8007ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800768a:	f000 fd2d 	bl	80080e8 <xTaskResumeAll>
 800768e:	e76c      	b.n	800756a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007692:	f000 fa15 	bl	8007ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007696:	f000 fd27 	bl	80080e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800769a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800769c:	4618      	mov	r0, r3
 800769e:	3738      	adds	r7, #56	; 0x38
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	e000ed04 	.word	0xe000ed04

080076a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b090      	sub	sp, #64	; 0x40
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80076ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076d2:	bf00      	nop
 80076d4:	e7fe      	b.n	80076d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <xQueueGenericSendFromISR+0x3c>
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <xQueueGenericSendFromISR+0x40>
 80076e4:	2301      	movs	r3, #1
 80076e6:	e000      	b.n	80076ea <xQueueGenericSendFromISR+0x42>
 80076e8:	2300      	movs	r3, #0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10a      	bne.n	8007704 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007700:	bf00      	nop
 8007702:	e7fe      	b.n	8007702 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d103      	bne.n	8007712 <xQueueGenericSendFromISR+0x6a>
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770e:	2b01      	cmp	r3, #1
 8007710:	d101      	bne.n	8007716 <xQueueGenericSendFromISR+0x6e>
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <xQueueGenericSendFromISR+0x70>
 8007716:	2300      	movs	r3, #0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	623b      	str	r3, [r7, #32]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007732:	f001 ffb1 	bl	8009698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007736:	f3ef 8211 	mrs	r2, BASEPRI
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	61fa      	str	r2, [r7, #28]
 800774c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800774e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007750:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775a:	429a      	cmp	r2, r3
 800775c:	d302      	bcc.n	8007764 <xQueueGenericSendFromISR+0xbc>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d12f      	bne.n	80077c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800776a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800777a:	f000 f911 	bl	80079a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800777e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007786:	d112      	bne.n	80077ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	2b00      	cmp	r3, #0
 800778e:	d016      	beq.n	80077be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	3324      	adds	r3, #36	; 0x24
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fec3 	bl	8008520 <xTaskRemoveFromEventList>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00e      	beq.n	80077be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e007      	b.n	80077be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077b2:	3301      	adds	r3, #1
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	b25a      	sxtb	r2, r3
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077be:	2301      	movs	r3, #1
 80077c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80077c2:	e001      	b.n	80077c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3740      	adds	r7, #64	; 0x40
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08c      	sub	sp, #48	; 0x30
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077ec:	2300      	movs	r3, #0
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <xQueueReceive+0x30>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	623b      	str	r3, [r7, #32]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d103      	bne.n	800781e <xQueueReceive+0x3e>
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <xQueueReceive+0x42>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <xQueueReceive+0x44>
 8007822:	2300      	movs	r3, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <xQueueReceive+0x5e>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	61fb      	str	r3, [r7, #28]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800783e:	f001 f831 	bl	80088a4 <xTaskGetSchedulerState>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <xQueueReceive+0x6e>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <xQueueReceive+0x72>
 800784e:	2301      	movs	r3, #1
 8007850:	e000      	b.n	8007854 <xQueueReceive+0x74>
 8007852:	2300      	movs	r3, #0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10a      	bne.n	800786e <xQueueReceive+0x8e>
	__asm volatile
 8007858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	61bb      	str	r3, [r7, #24]
}
 800786a:	bf00      	nop
 800786c:	e7fe      	b.n	800786c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800786e:	f001 fe31 	bl	80094d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	2b00      	cmp	r3, #0
 800787c:	d01f      	beq.n	80078be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007882:	f000 f8f7 	bl	8007a74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	1e5a      	subs	r2, r3, #1
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00f      	beq.n	80078b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	3310      	adds	r3, #16
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fe40 	bl	8008520 <xTaskRemoveFromEventList>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078a6:	4b3d      	ldr	r3, [pc, #244]	; (800799c <xQueueReceive+0x1bc>)
 80078a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078b6:	f001 fe3d 	bl	8009534 <vPortExitCritical>
				return pdPASS;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e069      	b.n	8007992 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d103      	bne.n	80078cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078c4:	f001 fe36 	bl	8009534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078c8:	2300      	movs	r3, #0
 80078ca:	e062      	b.n	8007992 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078d2:	f107 0310 	add.w	r3, r7, #16
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fe86 	bl	80085e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078dc:	2301      	movs	r3, #1
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078e0:	f001 fe28 	bl	8009534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078e4:	f000 fbf2 	bl	80080cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078e8:	f001 fdf4 	bl	80094d4 <vPortEnterCritical>
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078f2:	b25b      	sxtb	r3, r3
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d103      	bne.n	8007902 <xQueueReceive+0x122>
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007908:	b25b      	sxtb	r3, r3
 800790a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790e:	d103      	bne.n	8007918 <xQueueReceive+0x138>
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007918:	f001 fe0c 	bl	8009534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800791c:	1d3a      	adds	r2, r7, #4
 800791e:	f107 0310 	add.w	r3, r7, #16
 8007922:	4611      	mov	r1, r2
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fe75 	bl	8008614 <xTaskCheckForTimeOut>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d123      	bne.n	8007978 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007932:	f000 f917 	bl	8007b64 <prvIsQueueEmpty>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d017      	beq.n	800796c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	3324      	adds	r3, #36	; 0x24
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	4611      	mov	r1, r2
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fd9b 	bl	8008480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800794a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800794c:	f000 f8b8 	bl	8007ac0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007950:	f000 fbca 	bl	80080e8 <xTaskResumeAll>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d189      	bne.n	800786e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800795a:	4b10      	ldr	r3, [pc, #64]	; (800799c <xQueueReceive+0x1bc>)
 800795c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	e780      	b.n	800786e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800796c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800796e:	f000 f8a7 	bl	8007ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007972:	f000 fbb9 	bl	80080e8 <xTaskResumeAll>
 8007976:	e77a      	b.n	800786e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800797a:	f000 f8a1 	bl	8007ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800797e:	f000 fbb3 	bl	80080e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007984:	f000 f8ee 	bl	8007b64 <prvIsQueueEmpty>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	f43f af6f 	beq.w	800786e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007990:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007992:	4618      	mov	r0, r3
 8007994:	3730      	adds	r7, #48	; 0x30
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	e000ed04 	.word	0xe000ed04

080079a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10d      	bne.n	80079da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d14d      	bne.n	8007a62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 ff88 	bl	80088e0 <xTaskPriorityDisinherit>
 80079d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	609a      	str	r2, [r3, #8]
 80079d8:	e043      	b.n	8007a62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d119      	bne.n	8007a14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6858      	ldr	r0, [r3, #4]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	461a      	mov	r2, r3
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	f002 f9a1 	bl	8009d32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f8:	441a      	add	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d32b      	bcc.n	8007a62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	e026      	b.n	8007a62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68d8      	ldr	r0, [r3, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	68b9      	ldr	r1, [r7, #8]
 8007a20:	f002 f987 	bl	8009d32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	425b      	negs	r3, r3
 8007a2e:	441a      	add	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d207      	bcs.n	8007a50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	425b      	negs	r3, r3
 8007a4a:	441a      	add	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d105      	bne.n	8007a62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a6a:	697b      	ldr	r3, [r7, #20]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d018      	beq.n	8007ab8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	441a      	add	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d303      	bcc.n	8007aa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68d9      	ldr	r1, [r3, #12]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6838      	ldr	r0, [r7, #0]
 8007ab4:	f002 f93d 	bl	8009d32 <memcpy>
	}
}
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ac8:	f001 fd04 	bl	80094d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ad2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ad4:	e011      	b.n	8007afa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d012      	beq.n	8007b04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3324      	adds	r3, #36	; 0x24
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fd1c 	bl	8008520 <xTaskRemoveFromEventList>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007aee:	f000 fdf3 	bl	80086d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dce9      	bgt.n	8007ad6 <prvUnlockQueue+0x16>
 8007b02:	e000      	b.n	8007b06 <prvUnlockQueue+0x46>
					break;
 8007b04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	22ff      	movs	r2, #255	; 0xff
 8007b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b0e:	f001 fd11 	bl	8009534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b12:	f001 fcdf 	bl	80094d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b1e:	e011      	b.n	8007b44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d012      	beq.n	8007b4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3310      	adds	r3, #16
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fcf7 	bl	8008520 <xTaskRemoveFromEventList>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b38:	f000 fdce 	bl	80086d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dce9      	bgt.n	8007b20 <prvUnlockQueue+0x60>
 8007b4c:	e000      	b.n	8007b50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	22ff      	movs	r2, #255	; 0xff
 8007b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b58:	f001 fcec 	bl	8009534 <vPortExitCritical>
}
 8007b5c:	bf00      	nop
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b6c:	f001 fcb2 	bl	80094d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d102      	bne.n	8007b7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	e001      	b.n	8007b82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b82:	f001 fcd7 	bl	8009534 <vPortExitCritical>

	return xReturn;
 8007b86:	68fb      	ldr	r3, [r7, #12]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b98:	f001 fc9c 	bl	80094d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d102      	bne.n	8007bae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e001      	b.n	8007bb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bb2:	f001 fcbf 	bl	8009534 <vPortExitCritical>

	return xReturn;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	e014      	b.n	8007bfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007bd0:	4a0f      	ldr	r2, [pc, #60]	; (8007c10 <vQueueAddToRegistry+0x50>)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10b      	bne.n	8007bf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007bdc:	490c      	ldr	r1, [pc, #48]	; (8007c10 <vQueueAddToRegistry+0x50>)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007be6:	4a0a      	ldr	r2, [pc, #40]	; (8007c10 <vQueueAddToRegistry+0x50>)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	4413      	add	r3, r2
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007bf2:	e006      	b.n	8007c02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b07      	cmp	r3, #7
 8007bfe:	d9e7      	bls.n	8007bd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	20001fb0 	.word	0x20001fb0

08007c14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c24:	f001 fc56 	bl	80094d4 <vPortEnterCritical>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c2e:	b25b      	sxtb	r3, r3
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d103      	bne.n	8007c3e <vQueueWaitForMessageRestricted+0x2a>
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c44:	b25b      	sxtb	r3, r3
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d103      	bne.n	8007c54 <vQueueWaitForMessageRestricted+0x40>
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c54:	f001 fc6e 	bl	8009534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d106      	bne.n	8007c6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	3324      	adds	r3, #36	; 0x24
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fc2d 	bl	80084c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c6e:	6978      	ldr	r0, [r7, #20]
 8007c70:	f7ff ff26 	bl	8007ac0 <prvUnlockQueue>
	}
 8007c74:	bf00      	nop
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08e      	sub	sp, #56	; 0x38
 8007c80:	af04      	add	r7, sp, #16
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	623b      	str	r3, [r7, #32]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	61fb      	str	r3, [r7, #28]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cc2:	23bc      	movs	r3, #188	; 0xbc
 8007cc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2bbc      	cmp	r3, #188	; 0xbc
 8007cca:	d00a      	beq.n	8007ce2 <xTaskCreateStatic+0x66>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	61bb      	str	r3, [r7, #24]
}
 8007cde:	bf00      	nop
 8007ce0:	e7fe      	b.n	8007ce0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ce2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d01e      	beq.n	8007d28 <xTaskCreateStatic+0xac>
 8007cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d01b      	beq.n	8007d28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d02:	2300      	movs	r3, #0
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	9302      	str	r3, [sp, #8]
 8007d0a:	f107 0314 	add.w	r3, r7, #20
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	68b9      	ldr	r1, [r7, #8]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f850 	bl	8007dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d22:	f000 f8f3 	bl	8007f0c <prvAddNewTaskToReadyList>
 8007d26:	e001      	b.n	8007d2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d2c:	697b      	ldr	r3, [r7, #20]
	}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3728      	adds	r7, #40	; 0x28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b08c      	sub	sp, #48	; 0x30
 8007d3a:	af04      	add	r7, sp, #16
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	603b      	str	r3, [r7, #0]
 8007d42:	4613      	mov	r3, r2
 8007d44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d46:	88fb      	ldrh	r3, [r7, #6]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 fce4 	bl	8009718 <pvPortMalloc>
 8007d50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00e      	beq.n	8007d76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d58:	20bc      	movs	r0, #188	; 0xbc
 8007d5a:	f001 fcdd 	bl	8009718 <pvPortMalloc>
 8007d5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8007d6c:	e005      	b.n	8007d7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d6e:	6978      	ldr	r0, [r7, #20]
 8007d70:	f001 fd9e 	bl	80098b0 <vPortFree>
 8007d74:	e001      	b.n	8007d7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d017      	beq.n	8007db0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d88:	88fa      	ldrh	r2, [r7, #6]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9303      	str	r3, [sp, #12]
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	9302      	str	r3, [sp, #8]
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 f80e 	bl	8007dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007da4:	69f8      	ldr	r0, [r7, #28]
 8007da6:	f000 f8b1 	bl	8007f0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007daa:	2301      	movs	r3, #1
 8007dac:	61bb      	str	r3, [r7, #24]
 8007dae:	e002      	b.n	8007db6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007db0:	f04f 33ff 	mov.w	r3, #4294967295
 8007db4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007db6:	69bb      	ldr	r3, [r7, #24]
	}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3720      	adds	r7, #32
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	21a5      	movs	r1, #165	; 0xa5
 8007dda:	f001 ffb8 	bl	8009d4e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007de8:	3b01      	subs	r3, #1
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	f023 0307 	bic.w	r3, r3, #7
 8007df6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	617b      	str	r3, [r7, #20]
}
 8007e14:	bf00      	nop
 8007e16:	e7fe      	b.n	8007e16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d01f      	beq.n	8007e5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61fb      	str	r3, [r7, #28]
 8007e22:	e012      	b.n	8007e4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	4413      	add	r3, r2
 8007e2a:	7819      	ldrb	r1, [r3, #0]
 8007e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	4413      	add	r3, r2
 8007e32:	3334      	adds	r3, #52	; 0x34
 8007e34:	460a      	mov	r2, r1
 8007e36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d006      	beq.n	8007e52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	3301      	adds	r3, #1
 8007e48:	61fb      	str	r3, [r7, #28]
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	2b0f      	cmp	r3, #15
 8007e4e:	d9e9      	bls.n	8007e24 <prvInitialiseNewTask+0x64>
 8007e50:	e000      	b.n	8007e54 <prvInitialiseNewTask+0x94>
			{
				break;
 8007e52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e5c:	e003      	b.n	8007e66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	2b37      	cmp	r3, #55	; 0x37
 8007e6a:	d901      	bls.n	8007e70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e6c:	2337      	movs	r3, #55	; 0x37
 8007e6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	2200      	movs	r2, #0
 8007e80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	3304      	adds	r3, #4
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff f978 	bl	800717c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	3318      	adds	r3, #24
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff f973 	bl	800717c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	3354      	adds	r3, #84	; 0x54
 8007ec0:	2260      	movs	r2, #96	; 0x60
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f001 ff42 	bl	8009d4e <memset>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	4a0c      	ldr	r2, [pc, #48]	; (8007f00 <prvInitialiseNewTask+0x140>)
 8007ece:	659a      	str	r2, [r3, #88]	; 0x58
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	4a0c      	ldr	r2, [pc, #48]	; (8007f04 <prvInitialiseNewTask+0x144>)
 8007ed4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	4a0b      	ldr	r2, [pc, #44]	; (8007f08 <prvInitialiseNewTask+0x148>)
 8007eda:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	68f9      	ldr	r1, [r7, #12]
 8007ee0:	69b8      	ldr	r0, [r7, #24]
 8007ee2:	f001 f9c7 	bl	8009274 <pxPortInitialiseStack>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ef8:	bf00      	nop
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	0800bd8c 	.word	0x0800bd8c
 8007f04:	0800bdac 	.word	0x0800bdac
 8007f08:	0800bd6c 	.word	0x0800bd6c

08007f0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f14:	f001 fade 	bl	80094d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f18:	4b2d      	ldr	r3, [pc, #180]	; (8007fd0 <prvAddNewTaskToReadyList+0xc4>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	4a2c      	ldr	r2, [pc, #176]	; (8007fd0 <prvAddNewTaskToReadyList+0xc4>)
 8007f20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f22:	4b2c      	ldr	r3, [pc, #176]	; (8007fd4 <prvAddNewTaskToReadyList+0xc8>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d109      	bne.n	8007f3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f2a:	4a2a      	ldr	r2, [pc, #168]	; (8007fd4 <prvAddNewTaskToReadyList+0xc8>)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f30:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <prvAddNewTaskToReadyList+0xc4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d110      	bne.n	8007f5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f38:	f000 fbf2 	bl	8008720 <prvInitialiseTaskLists>
 8007f3c:	e00d      	b.n	8007f5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f3e:	4b26      	ldr	r3, [pc, #152]	; (8007fd8 <prvAddNewTaskToReadyList+0xcc>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d109      	bne.n	8007f5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f46:	4b23      	ldr	r3, [pc, #140]	; (8007fd4 <prvAddNewTaskToReadyList+0xc8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d802      	bhi.n	8007f5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f54:	4a1f      	ldr	r2, [pc, #124]	; (8007fd4 <prvAddNewTaskToReadyList+0xc8>)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f5a:	4b20      	ldr	r3, [pc, #128]	; (8007fdc <prvAddNewTaskToReadyList+0xd0>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	4a1e      	ldr	r2, [pc, #120]	; (8007fdc <prvAddNewTaskToReadyList+0xd0>)
 8007f62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f64:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <prvAddNewTaskToReadyList+0xd0>)
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f70:	4b1b      	ldr	r3, [pc, #108]	; (8007fe0 <prvAddNewTaskToReadyList+0xd4>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d903      	bls.n	8007f80 <prvAddNewTaskToReadyList+0x74>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	4a18      	ldr	r2, [pc, #96]	; (8007fe0 <prvAddNewTaskToReadyList+0xd4>)
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f84:	4613      	mov	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4a15      	ldr	r2, [pc, #84]	; (8007fe4 <prvAddNewTaskToReadyList+0xd8>)
 8007f8e:	441a      	add	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3304      	adds	r3, #4
 8007f94:	4619      	mov	r1, r3
 8007f96:	4610      	mov	r0, r2
 8007f98:	f7ff f8fd 	bl	8007196 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f9c:	f001 faca 	bl	8009534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fa0:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <prvAddNewTaskToReadyList+0xcc>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00e      	beq.n	8007fc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <prvAddNewTaskToReadyList+0xc8>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d207      	bcs.n	8007fc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <prvAddNewTaskToReadyList+0xdc>)
 8007fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	200024c4 	.word	0x200024c4
 8007fd4:	20001ff0 	.word	0x20001ff0
 8007fd8:	200024d0 	.word	0x200024d0
 8007fdc:	200024e0 	.word	0x200024e0
 8007fe0:	200024cc 	.word	0x200024cc
 8007fe4:	20001ff4 	.word	0x20001ff4
 8007fe8:	e000ed04 	.word	0xe000ed04

08007fec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08a      	sub	sp, #40	; 0x28
 8007ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ffa:	463a      	mov	r2, r7
 8007ffc:	1d39      	adds	r1, r7, #4
 8007ffe:	f107 0308 	add.w	r3, r7, #8
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff f866 	bl	80070d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	9202      	str	r2, [sp, #8]
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	2300      	movs	r3, #0
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	2300      	movs	r3, #0
 8008018:	460a      	mov	r2, r1
 800801a:	4924      	ldr	r1, [pc, #144]	; (80080ac <vTaskStartScheduler+0xc0>)
 800801c:	4824      	ldr	r0, [pc, #144]	; (80080b0 <vTaskStartScheduler+0xc4>)
 800801e:	f7ff fe2d 	bl	8007c7c <xTaskCreateStatic>
 8008022:	4603      	mov	r3, r0
 8008024:	4a23      	ldr	r2, [pc, #140]	; (80080b4 <vTaskStartScheduler+0xc8>)
 8008026:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008028:	4b22      	ldr	r3, [pc, #136]	; (80080b4 <vTaskStartScheduler+0xc8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008030:	2301      	movs	r3, #1
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	e001      	b.n	800803a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008036:	2300      	movs	r3, #0
 8008038:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d102      	bne.n	8008046 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008040:	f000 fd10 	bl	8008a64 <xTimerCreateTimerTask>
 8008044:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d11b      	bne.n	8008084 <vTaskStartScheduler+0x98>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	613b      	str	r3, [r7, #16]
}
 800805e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008060:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <vTaskStartScheduler+0xcc>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3354      	adds	r3, #84	; 0x54
 8008066:	4a15      	ldr	r2, [pc, #84]	; (80080bc <vTaskStartScheduler+0xd0>)
 8008068:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800806a:	4b15      	ldr	r3, [pc, #84]	; (80080c0 <vTaskStartScheduler+0xd4>)
 800806c:	f04f 32ff 	mov.w	r2, #4294967295
 8008070:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008072:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <vTaskStartScheduler+0xd8>)
 8008074:	2201      	movs	r2, #1
 8008076:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008078:	4b13      	ldr	r3, [pc, #76]	; (80080c8 <vTaskStartScheduler+0xdc>)
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800807e:	f001 f987 	bl	8009390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008082:	e00e      	b.n	80080a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808a:	d10a      	bne.n	80080a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	60fb      	str	r3, [r7, #12]
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <vTaskStartScheduler+0xb4>
}
 80080a2:	bf00      	nop
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	0800bcd8 	.word	0x0800bcd8
 80080b0:	080086f1 	.word	0x080086f1
 80080b4:	200024e8 	.word	0x200024e8
 80080b8:	20001ff0 	.word	0x20001ff0
 80080bc:	20000010 	.word	0x20000010
 80080c0:	200024e4 	.word	0x200024e4
 80080c4:	200024d0 	.word	0x200024d0
 80080c8:	200024c8 	.word	0x200024c8

080080cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080d0:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <vTaskSuspendAll+0x18>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	4a03      	ldr	r2, [pc, #12]	; (80080e4 <vTaskSuspendAll+0x18>)
 80080d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080da:	bf00      	nop
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	200024ec 	.word	0x200024ec

080080e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080f6:	4b42      	ldr	r3, [pc, #264]	; (8008200 <xTaskResumeAll+0x118>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <xTaskResumeAll+0x2c>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	603b      	str	r3, [r7, #0]
}
 8008110:	bf00      	nop
 8008112:	e7fe      	b.n	8008112 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008114:	f001 f9de 	bl	80094d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008118:	4b39      	ldr	r3, [pc, #228]	; (8008200 <xTaskResumeAll+0x118>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3b01      	subs	r3, #1
 800811e:	4a38      	ldr	r2, [pc, #224]	; (8008200 <xTaskResumeAll+0x118>)
 8008120:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008122:	4b37      	ldr	r3, [pc, #220]	; (8008200 <xTaskResumeAll+0x118>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d162      	bne.n	80081f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800812a:	4b36      	ldr	r3, [pc, #216]	; (8008204 <xTaskResumeAll+0x11c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d05e      	beq.n	80081f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008132:	e02f      	b.n	8008194 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008134:	4b34      	ldr	r3, [pc, #208]	; (8008208 <xTaskResumeAll+0x120>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3318      	adds	r3, #24
 8008140:	4618      	mov	r0, r3
 8008142:	f7ff f885 	bl	8007250 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3304      	adds	r3, #4
 800814a:	4618      	mov	r0, r3
 800814c:	f7ff f880 	bl	8007250 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008154:	4b2d      	ldr	r3, [pc, #180]	; (800820c <xTaskResumeAll+0x124>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d903      	bls.n	8008164 <xTaskResumeAll+0x7c>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	4a2a      	ldr	r2, [pc, #168]	; (800820c <xTaskResumeAll+0x124>)
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4a27      	ldr	r2, [pc, #156]	; (8008210 <xTaskResumeAll+0x128>)
 8008172:	441a      	add	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3304      	adds	r3, #4
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f7ff f80b 	bl	8007196 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008184:	4b23      	ldr	r3, [pc, #140]	; (8008214 <xTaskResumeAll+0x12c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	429a      	cmp	r2, r3
 800818c:	d302      	bcc.n	8008194 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800818e:	4b22      	ldr	r3, [pc, #136]	; (8008218 <xTaskResumeAll+0x130>)
 8008190:	2201      	movs	r2, #1
 8008192:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008194:	4b1c      	ldr	r3, [pc, #112]	; (8008208 <xTaskResumeAll+0x120>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1cb      	bne.n	8008134 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081a2:	f000 fb5f 	bl	8008864 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081a6:	4b1d      	ldr	r3, [pc, #116]	; (800821c <xTaskResumeAll+0x134>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d010      	beq.n	80081d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081b2:	f000 f847 	bl	8008244 <xTaskIncrementTick>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80081bc:	4b16      	ldr	r3, [pc, #88]	; (8008218 <xTaskResumeAll+0x130>)
 80081be:	2201      	movs	r2, #1
 80081c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f1      	bne.n	80081b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80081ce:	4b13      	ldr	r3, [pc, #76]	; (800821c <xTaskResumeAll+0x134>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081d4:	4b10      	ldr	r3, [pc, #64]	; (8008218 <xTaskResumeAll+0x130>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081dc:	2301      	movs	r3, #1
 80081de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081e0:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <xTaskResumeAll+0x138>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081f0:	f001 f9a0 	bl	8009534 <vPortExitCritical>

	return xAlreadyYielded;
 80081f4:	68bb      	ldr	r3, [r7, #8]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	200024ec 	.word	0x200024ec
 8008204:	200024c4 	.word	0x200024c4
 8008208:	20002484 	.word	0x20002484
 800820c:	200024cc 	.word	0x200024cc
 8008210:	20001ff4 	.word	0x20001ff4
 8008214:	20001ff0 	.word	0x20001ff0
 8008218:	200024d8 	.word	0x200024d8
 800821c:	200024d4 	.word	0x200024d4
 8008220:	e000ed04 	.word	0xe000ed04

08008224 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800822a:	4b05      	ldr	r3, [pc, #20]	; (8008240 <xTaskGetTickCount+0x1c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008230:	687b      	ldr	r3, [r7, #4]
}
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	200024c8 	.word	0x200024c8

08008244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800824e:	4b4f      	ldr	r3, [pc, #316]	; (800838c <xTaskIncrementTick+0x148>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	f040 808f 	bne.w	8008376 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008258:	4b4d      	ldr	r3, [pc, #308]	; (8008390 <xTaskIncrementTick+0x14c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3301      	adds	r3, #1
 800825e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008260:	4a4b      	ldr	r2, [pc, #300]	; (8008390 <xTaskIncrementTick+0x14c>)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d120      	bne.n	80082ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800826c:	4b49      	ldr	r3, [pc, #292]	; (8008394 <xTaskIncrementTick+0x150>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <xTaskIncrementTick+0x48>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	603b      	str	r3, [r7, #0]
}
 8008288:	bf00      	nop
 800828a:	e7fe      	b.n	800828a <xTaskIncrementTick+0x46>
 800828c:	4b41      	ldr	r3, [pc, #260]	; (8008394 <xTaskIncrementTick+0x150>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	4b41      	ldr	r3, [pc, #260]	; (8008398 <xTaskIncrementTick+0x154>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a3f      	ldr	r2, [pc, #252]	; (8008394 <xTaskIncrementTick+0x150>)
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	4a3f      	ldr	r2, [pc, #252]	; (8008398 <xTaskIncrementTick+0x154>)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	4b3e      	ldr	r3, [pc, #248]	; (800839c <xTaskIncrementTick+0x158>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	4a3d      	ldr	r2, [pc, #244]	; (800839c <xTaskIncrementTick+0x158>)
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	f000 fadb 	bl	8008864 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082ae:	4b3c      	ldr	r3, [pc, #240]	; (80083a0 <xTaskIncrementTick+0x15c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d349      	bcc.n	800834c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082b8:	4b36      	ldr	r3, [pc, #216]	; (8008394 <xTaskIncrementTick+0x150>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d104      	bne.n	80082cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c2:	4b37      	ldr	r3, [pc, #220]	; (80083a0 <xTaskIncrementTick+0x15c>)
 80082c4:	f04f 32ff 	mov.w	r2, #4294967295
 80082c8:	601a      	str	r2, [r3, #0]
					break;
 80082ca:	e03f      	b.n	800834c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082cc:	4b31      	ldr	r3, [pc, #196]	; (8008394 <xTaskIncrementTick+0x150>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d203      	bcs.n	80082ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082e4:	4a2e      	ldr	r2, [pc, #184]	; (80083a0 <xTaskIncrementTick+0x15c>)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082ea:	e02f      	b.n	800834c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	3304      	adds	r3, #4
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe ffad 	bl	8007250 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	3318      	adds	r3, #24
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe ffa4 	bl	8007250 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	4b25      	ldr	r3, [pc, #148]	; (80083a4 <xTaskIncrementTick+0x160>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d903      	bls.n	800831c <xTaskIncrementTick+0xd8>
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	4a22      	ldr	r2, [pc, #136]	; (80083a4 <xTaskIncrementTick+0x160>)
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4a1f      	ldr	r2, [pc, #124]	; (80083a8 <xTaskIncrementTick+0x164>)
 800832a:	441a      	add	r2, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	3304      	adds	r3, #4
 8008330:	4619      	mov	r1, r3
 8008332:	4610      	mov	r0, r2
 8008334:	f7fe ff2f 	bl	8007196 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833c:	4b1b      	ldr	r3, [pc, #108]	; (80083ac <xTaskIncrementTick+0x168>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	429a      	cmp	r2, r3
 8008344:	d3b8      	bcc.n	80082b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008346:	2301      	movs	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800834a:	e7b5      	b.n	80082b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800834c:	4b17      	ldr	r3, [pc, #92]	; (80083ac <xTaskIncrementTick+0x168>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008352:	4915      	ldr	r1, [pc, #84]	; (80083a8 <xTaskIncrementTick+0x164>)
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d901      	bls.n	8008368 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008368:	4b11      	ldr	r3, [pc, #68]	; (80083b0 <xTaskIncrementTick+0x16c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d007      	beq.n	8008380 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008370:	2301      	movs	r3, #1
 8008372:	617b      	str	r3, [r7, #20]
 8008374:	e004      	b.n	8008380 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <xTaskIncrementTick+0x170>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3301      	adds	r3, #1
 800837c:	4a0d      	ldr	r2, [pc, #52]	; (80083b4 <xTaskIncrementTick+0x170>)
 800837e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008380:	697b      	ldr	r3, [r7, #20]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3718      	adds	r7, #24
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	200024ec 	.word	0x200024ec
 8008390:	200024c8 	.word	0x200024c8
 8008394:	2000247c 	.word	0x2000247c
 8008398:	20002480 	.word	0x20002480
 800839c:	200024dc 	.word	0x200024dc
 80083a0:	200024e4 	.word	0x200024e4
 80083a4:	200024cc 	.word	0x200024cc
 80083a8:	20001ff4 	.word	0x20001ff4
 80083ac:	20001ff0 	.word	0x20001ff0
 80083b0:	200024d8 	.word	0x200024d8
 80083b4:	200024d4 	.word	0x200024d4

080083b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083be:	4b2a      	ldr	r3, [pc, #168]	; (8008468 <vTaskSwitchContext+0xb0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083c6:	4b29      	ldr	r3, [pc, #164]	; (800846c <vTaskSwitchContext+0xb4>)
 80083c8:	2201      	movs	r2, #1
 80083ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083cc:	e046      	b.n	800845c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80083ce:	4b27      	ldr	r3, [pc, #156]	; (800846c <vTaskSwitchContext+0xb4>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d4:	4b26      	ldr	r3, [pc, #152]	; (8008470 <vTaskSwitchContext+0xb8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e010      	b.n	80083fe <vTaskSwitchContext+0x46>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10a      	bne.n	80083f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	607b      	str	r3, [r7, #4]
}
 80083f4:	bf00      	nop
 80083f6:	e7fe      	b.n	80083f6 <vTaskSwitchContext+0x3e>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	491d      	ldr	r1, [pc, #116]	; (8008474 <vTaskSwitchContext+0xbc>)
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	440b      	add	r3, r1
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0e4      	beq.n	80083dc <vTaskSwitchContext+0x24>
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	4613      	mov	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4a15      	ldr	r2, [pc, #84]	; (8008474 <vTaskSwitchContext+0xbc>)
 800841e:	4413      	add	r3, r2
 8008420:	60bb      	str	r3, [r7, #8]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	605a      	str	r2, [r3, #4]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	3308      	adds	r3, #8
 8008434:	429a      	cmp	r2, r3
 8008436:	d104      	bne.n	8008442 <vTaskSwitchContext+0x8a>
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	605a      	str	r2, [r3, #4]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	4a0b      	ldr	r2, [pc, #44]	; (8008478 <vTaskSwitchContext+0xc0>)
 800844a:	6013      	str	r3, [r2, #0]
 800844c:	4a08      	ldr	r2, [pc, #32]	; (8008470 <vTaskSwitchContext+0xb8>)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008452:	4b09      	ldr	r3, [pc, #36]	; (8008478 <vTaskSwitchContext+0xc0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3354      	adds	r3, #84	; 0x54
 8008458:	4a08      	ldr	r2, [pc, #32]	; (800847c <vTaskSwitchContext+0xc4>)
 800845a:	6013      	str	r3, [r2, #0]
}
 800845c:	bf00      	nop
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	200024ec 	.word	0x200024ec
 800846c:	200024d8 	.word	0x200024d8
 8008470:	200024cc 	.word	0x200024cc
 8008474:	20001ff4 	.word	0x20001ff4
 8008478:	20001ff0 	.word	0x20001ff0
 800847c:	20000010 	.word	0x20000010

08008480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	60fb      	str	r3, [r7, #12]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084a6:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <vTaskPlaceOnEventList+0x44>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3318      	adds	r3, #24
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7fe fe95 	bl	80071de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084b4:	2101      	movs	r1, #1
 80084b6:	6838      	ldr	r0, [r7, #0]
 80084b8:	f000 fa80 	bl	80089bc <prvAddCurrentTaskToDelayedList>
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20001ff0 	.word	0x20001ff0

080084c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	617b      	str	r3, [r7, #20]
}
 80084ec:	bf00      	nop
 80084ee:	e7fe      	b.n	80084ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084f0:	4b0a      	ldr	r3, [pc, #40]	; (800851c <vTaskPlaceOnEventListRestricted+0x54>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3318      	adds	r3, #24
 80084f6:	4619      	mov	r1, r3
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7fe fe4c 	bl	8007196 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008504:	f04f 33ff 	mov.w	r3, #4294967295
 8008508:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	68b8      	ldr	r0, [r7, #8]
 800850e:	f000 fa55 	bl	80089bc <prvAddCurrentTaskToDelayedList>
	}
 8008512:	bf00      	nop
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20001ff0 	.word	0x20001ff0

08008520 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10a      	bne.n	800854c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60fb      	str	r3, [r7, #12]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	3318      	adds	r3, #24
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe fe7d 	bl	8007250 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008556:	4b1e      	ldr	r3, [pc, #120]	; (80085d0 <xTaskRemoveFromEventList+0xb0>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d11d      	bne.n	800859a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	3304      	adds	r3, #4
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fe74 	bl	8007250 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4b19      	ldr	r3, [pc, #100]	; (80085d4 <xTaskRemoveFromEventList+0xb4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d903      	bls.n	800857c <xTaskRemoveFromEventList+0x5c>
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	4a16      	ldr	r2, [pc, #88]	; (80085d4 <xTaskRemoveFromEventList+0xb4>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4a13      	ldr	r2, [pc, #76]	; (80085d8 <xTaskRemoveFromEventList+0xb8>)
 800858a:	441a      	add	r2, r3
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe fdff 	bl	8007196 <vListInsertEnd>
 8008598:	e005      	b.n	80085a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	3318      	adds	r3, #24
 800859e:	4619      	mov	r1, r3
 80085a0:	480e      	ldr	r0, [pc, #56]	; (80085dc <xTaskRemoveFromEventList+0xbc>)
 80085a2:	f7fe fdf8 	bl	8007196 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	4b0d      	ldr	r3, [pc, #52]	; (80085e0 <xTaskRemoveFromEventList+0xc0>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d905      	bls.n	80085c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085b4:	2301      	movs	r3, #1
 80085b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085b8:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <xTaskRemoveFromEventList+0xc4>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e001      	b.n	80085c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085c4:	697b      	ldr	r3, [r7, #20]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	200024ec 	.word	0x200024ec
 80085d4:	200024cc 	.word	0x200024cc
 80085d8:	20001ff4 	.word	0x20001ff4
 80085dc:	20002484 	.word	0x20002484
 80085e0:	20001ff0 	.word	0x20001ff0
 80085e4:	200024d8 	.word	0x200024d8

080085e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085f0:	4b06      	ldr	r3, [pc, #24]	; (800860c <vTaskInternalSetTimeOutState+0x24>)
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <vTaskInternalSetTimeOutState+0x28>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	605a      	str	r2, [r3, #4]
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	200024dc 	.word	0x200024dc
 8008610:	200024c8 	.word	0x200024c8

08008614 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	613b      	str	r3, [r7, #16]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10a      	bne.n	8008656 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	60fb      	str	r3, [r7, #12]
}
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008656:	f000 ff3d 	bl	80094d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800865a:	4b1d      	ldr	r3, [pc, #116]	; (80086d0 <xTaskCheckForTimeOut+0xbc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008672:	d102      	bne.n	800867a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008674:	2300      	movs	r3, #0
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	e023      	b.n	80086c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4b15      	ldr	r3, [pc, #84]	; (80086d4 <xTaskCheckForTimeOut+0xc0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d007      	beq.n	8008696 <xTaskCheckForTimeOut+0x82>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	429a      	cmp	r2, r3
 800868e:	d302      	bcc.n	8008696 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008690:	2301      	movs	r3, #1
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	e015      	b.n	80086c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	429a      	cmp	r2, r3
 800869e:	d20b      	bcs.n	80086b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	1ad2      	subs	r2, r2, r3
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff ff9b 	bl	80085e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086b2:	2300      	movs	r3, #0
 80086b4:	61fb      	str	r3, [r7, #28]
 80086b6:	e004      	b.n	80086c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086be:	2301      	movs	r3, #1
 80086c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086c2:	f000 ff37 	bl	8009534 <vPortExitCritical>

	return xReturn;
 80086c6:	69fb      	ldr	r3, [r7, #28]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3720      	adds	r7, #32
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	200024c8 	.word	0x200024c8
 80086d4:	200024dc 	.word	0x200024dc

080086d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086d8:	b480      	push	{r7}
 80086da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086dc:	4b03      	ldr	r3, [pc, #12]	; (80086ec <vTaskMissedYield+0x14>)
 80086de:	2201      	movs	r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
}
 80086e2:	bf00      	nop
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	200024d8 	.word	0x200024d8

080086f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086f8:	f000 f852 	bl	80087a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086fc:	4b06      	ldr	r3, [pc, #24]	; (8008718 <prvIdleTask+0x28>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d9f9      	bls.n	80086f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <prvIdleTask+0x2c>)
 8008706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008714:	e7f0      	b.n	80086f8 <prvIdleTask+0x8>
 8008716:	bf00      	nop
 8008718:	20001ff4 	.word	0x20001ff4
 800871c:	e000ed04 	.word	0xe000ed04

08008720 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008726:	2300      	movs	r3, #0
 8008728:	607b      	str	r3, [r7, #4]
 800872a:	e00c      	b.n	8008746 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4a12      	ldr	r2, [pc, #72]	; (8008780 <prvInitialiseTaskLists+0x60>)
 8008738:	4413      	add	r3, r2
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe fcfe 	bl	800713c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3301      	adds	r3, #1
 8008744:	607b      	str	r3, [r7, #4]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b37      	cmp	r3, #55	; 0x37
 800874a:	d9ef      	bls.n	800872c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800874c:	480d      	ldr	r0, [pc, #52]	; (8008784 <prvInitialiseTaskLists+0x64>)
 800874e:	f7fe fcf5 	bl	800713c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008752:	480d      	ldr	r0, [pc, #52]	; (8008788 <prvInitialiseTaskLists+0x68>)
 8008754:	f7fe fcf2 	bl	800713c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008758:	480c      	ldr	r0, [pc, #48]	; (800878c <prvInitialiseTaskLists+0x6c>)
 800875a:	f7fe fcef 	bl	800713c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800875e:	480c      	ldr	r0, [pc, #48]	; (8008790 <prvInitialiseTaskLists+0x70>)
 8008760:	f7fe fcec 	bl	800713c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008764:	480b      	ldr	r0, [pc, #44]	; (8008794 <prvInitialiseTaskLists+0x74>)
 8008766:	f7fe fce9 	bl	800713c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800876a:	4b0b      	ldr	r3, [pc, #44]	; (8008798 <prvInitialiseTaskLists+0x78>)
 800876c:	4a05      	ldr	r2, [pc, #20]	; (8008784 <prvInitialiseTaskLists+0x64>)
 800876e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008770:	4b0a      	ldr	r3, [pc, #40]	; (800879c <prvInitialiseTaskLists+0x7c>)
 8008772:	4a05      	ldr	r2, [pc, #20]	; (8008788 <prvInitialiseTaskLists+0x68>)
 8008774:	601a      	str	r2, [r3, #0]
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20001ff4 	.word	0x20001ff4
 8008784:	20002454 	.word	0x20002454
 8008788:	20002468 	.word	0x20002468
 800878c:	20002484 	.word	0x20002484
 8008790:	20002498 	.word	0x20002498
 8008794:	200024b0 	.word	0x200024b0
 8008798:	2000247c 	.word	0x2000247c
 800879c:	20002480 	.word	0x20002480

080087a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087a6:	e019      	b.n	80087dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087a8:	f000 fe94 	bl	80094d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ac:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <prvCheckTasksWaitingTermination+0x50>)
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3304      	adds	r3, #4
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe fd49 	bl	8007250 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087be:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <prvCheckTasksWaitingTermination+0x54>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	4a0b      	ldr	r2, [pc, #44]	; (80087f4 <prvCheckTasksWaitingTermination+0x54>)
 80087c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087c8:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <prvCheckTasksWaitingTermination+0x58>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	4a0a      	ldr	r2, [pc, #40]	; (80087f8 <prvCheckTasksWaitingTermination+0x58>)
 80087d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087d2:	f000 feaf 	bl	8009534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f810 	bl	80087fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087dc:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <prvCheckTasksWaitingTermination+0x58>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e1      	bne.n	80087a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20002498 	.word	0x20002498
 80087f4:	200024c4 	.word	0x200024c4
 80087f8:	200024ac 	.word	0x200024ac

080087fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3354      	adds	r3, #84	; 0x54
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fbd9 	bl	8009fc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008814:	2b00      	cmp	r3, #0
 8008816:	d108      	bne.n	800882a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	4618      	mov	r0, r3
 800881e:	f001 f847 	bl	80098b0 <vPortFree>
				vPortFree( pxTCB );
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 f844 	bl	80098b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008828:	e018      	b.n	800885c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008830:	2b01      	cmp	r3, #1
 8008832:	d103      	bne.n	800883c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f001 f83b 	bl	80098b0 <vPortFree>
	}
 800883a:	e00f      	b.n	800885c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008842:	2b02      	cmp	r3, #2
 8008844:	d00a      	beq.n	800885c <prvDeleteTCB+0x60>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60fb      	str	r3, [r7, #12]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <prvDeleteTCB+0x5e>
	}
 800885c:	bf00      	nop
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800886a:	4b0c      	ldr	r3, [pc, #48]	; (800889c <prvResetNextTaskUnblockTime+0x38>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d104      	bne.n	800887e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <prvResetNextTaskUnblockTime+0x3c>)
 8008876:	f04f 32ff 	mov.w	r2, #4294967295
 800887a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800887c:	e008      	b.n	8008890 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800887e:	4b07      	ldr	r3, [pc, #28]	; (800889c <prvResetNextTaskUnblockTime+0x38>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	4a04      	ldr	r2, [pc, #16]	; (80088a0 <prvResetNextTaskUnblockTime+0x3c>)
 800888e:	6013      	str	r3, [r2, #0]
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	2000247c 	.word	0x2000247c
 80088a0:	200024e4 	.word	0x200024e4

080088a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088aa:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <xTaskGetSchedulerState+0x34>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088b2:	2301      	movs	r3, #1
 80088b4:	607b      	str	r3, [r7, #4]
 80088b6:	e008      	b.n	80088ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b8:	4b08      	ldr	r3, [pc, #32]	; (80088dc <xTaskGetSchedulerState+0x38>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d102      	bne.n	80088c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088c0:	2302      	movs	r3, #2
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	e001      	b.n	80088ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088c6:	2300      	movs	r3, #0
 80088c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088ca:	687b      	ldr	r3, [r7, #4]
	}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	200024d0 	.word	0x200024d0
 80088dc:	200024ec 	.word	0x200024ec

080088e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d056      	beq.n	80089a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088f6:	4b2e      	ldr	r3, [pc, #184]	; (80089b0 <xTaskPriorityDisinherit+0xd0>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d00a      	beq.n	8008916 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	60fb      	str	r3, [r7, #12]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	60bb      	str	r3, [r7, #8]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008938:	1e5a      	subs	r2, r3, #1
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008946:	429a      	cmp	r2, r3
 8008948:	d02c      	beq.n	80089a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894e:	2b00      	cmp	r3, #0
 8008950:	d128      	bne.n	80089a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	3304      	adds	r3, #4
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fc7a 	bl	8007250 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <xTaskPriorityDisinherit+0xd4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	429a      	cmp	r2, r3
 800897a:	d903      	bls.n	8008984 <xTaskPriorityDisinherit+0xa4>
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	4a0c      	ldr	r2, [pc, #48]	; (80089b4 <xTaskPriorityDisinherit+0xd4>)
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4a09      	ldr	r2, [pc, #36]	; (80089b8 <xTaskPriorityDisinherit+0xd8>)
 8008992:	441a      	add	r2, r3
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	3304      	adds	r3, #4
 8008998:	4619      	mov	r1, r3
 800899a:	4610      	mov	r0, r2
 800899c:	f7fe fbfb 	bl	8007196 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089a0:	2301      	movs	r3, #1
 80089a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089a4:	697b      	ldr	r3, [r7, #20]
	}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20001ff0 	.word	0x20001ff0
 80089b4:	200024cc 	.word	0x200024cc
 80089b8:	20001ff4 	.word	0x20001ff4

080089bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089c6:	4b21      	ldr	r3, [pc, #132]	; (8008a4c <prvAddCurrentTaskToDelayedList+0x90>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089cc:	4b20      	ldr	r3, [pc, #128]	; (8008a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe fc3c 	bl	8007250 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089de:	d10a      	bne.n	80089f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d007      	beq.n	80089f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089e6:	4b1a      	ldr	r3, [pc, #104]	; (8008a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3304      	adds	r3, #4
 80089ec:	4619      	mov	r1, r3
 80089ee:	4819      	ldr	r0, [pc, #100]	; (8008a54 <prvAddCurrentTaskToDelayedList+0x98>)
 80089f0:	f7fe fbd1 	bl	8007196 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089f4:	e026      	b.n	8008a44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4413      	add	r3, r2
 80089fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089fe:	4b14      	ldr	r3, [pc, #80]	; (8008a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d209      	bcs.n	8008a22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a0e:	4b12      	ldr	r3, [pc, #72]	; (8008a58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	4b0f      	ldr	r3, [pc, #60]	; (8008a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	f7fe fbdf 	bl	80071de <vListInsert>
}
 8008a20:	e010      	b.n	8008a44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a22:	4b0e      	ldr	r3, [pc, #56]	; (8008a5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4b0a      	ldr	r3, [pc, #40]	; (8008a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f7fe fbd5 	bl	80071de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a34:	4b0a      	ldr	r3, [pc, #40]	; (8008a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d202      	bcs.n	8008a44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a3e:	4a08      	ldr	r2, [pc, #32]	; (8008a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	6013      	str	r3, [r2, #0]
}
 8008a44:	bf00      	nop
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	200024c8 	.word	0x200024c8
 8008a50:	20001ff0 	.word	0x20001ff0
 8008a54:	200024b0 	.word	0x200024b0
 8008a58:	20002480 	.word	0x20002480
 8008a5c:	2000247c 	.word	0x2000247c
 8008a60:	200024e4 	.word	0x200024e4

08008a64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08a      	sub	sp, #40	; 0x28
 8008a68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a6e:	f000 fba1 	bl	80091b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a72:	4b1c      	ldr	r3, [pc, #112]	; (8008ae4 <xTimerCreateTimerTask+0x80>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d021      	beq.n	8008abe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a82:	1d3a      	adds	r2, r7, #4
 8008a84:	f107 0108 	add.w	r1, r7, #8
 8008a88:	f107 030c 	add.w	r3, r7, #12
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe fb3b 	bl	8007108 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	9202      	str	r2, [sp, #8]
 8008a9a:	9301      	str	r3, [sp, #4]
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	460a      	mov	r2, r1
 8008aa4:	4910      	ldr	r1, [pc, #64]	; (8008ae8 <xTimerCreateTimerTask+0x84>)
 8008aa6:	4811      	ldr	r0, [pc, #68]	; (8008aec <xTimerCreateTimerTask+0x88>)
 8008aa8:	f7ff f8e8 	bl	8007c7c <xTaskCreateStatic>
 8008aac:	4603      	mov	r3, r0
 8008aae:	4a10      	ldr	r2, [pc, #64]	; (8008af0 <xTimerCreateTimerTask+0x8c>)
 8008ab0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ab2:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <xTimerCreateTimerTask+0x8c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008aba:	2301      	movs	r3, #1
 8008abc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10a      	bne.n	8008ada <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	613b      	str	r3, [r7, #16]
}
 8008ad6:	bf00      	nop
 8008ad8:	e7fe      	b.n	8008ad8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ada:	697b      	ldr	r3, [r7, #20]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	20002520 	.word	0x20002520
 8008ae8:	0800bce0 	.word	0x0800bce0
 8008aec:	08008d5d 	.word	0x08008d5d
 8008af0:	20002524 	.word	0x20002524

08008af4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008b02:	202c      	movs	r0, #44	; 0x2c
 8008b04:	f000 fe08 	bl	8009718 <pvPortMalloc>
 8008b08:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00d      	beq.n	8008b2c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 f843 	bl	8008bb2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008b2c:	697b      	ldr	r3, [r7, #20]
	}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b08a      	sub	sp, #40	; 0x28
 8008b3a:	af02      	add	r7, sp, #8
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	60b9      	str	r1, [r7, #8]
 8008b40:	607a      	str	r2, [r7, #4]
 8008b42:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008b44:	232c      	movs	r3, #44	; 0x2c
 8008b46:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	2b2c      	cmp	r3, #44	; 0x2c
 8008b4c:	d00a      	beq.n	8008b64 <xTimerCreateStatic+0x2e>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	61bb      	str	r3, [r7, #24]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10a      	bne.n	8008b82 <xTimerCreateStatic+0x4c>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	617b      	str	r3, [r7, #20]
}
 8008b7e:	bf00      	nop
 8008b80:	e7fe      	b.n	8008b80 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00d      	beq.n	8008ba8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	9301      	str	r3, [sp, #4]
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 f805 	bl	8008bb2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008ba8:	69fb      	ldr	r3, [r7, #28]
	}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3720      	adds	r7, #32
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10a      	bne.n	8008bdc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	617b      	str	r3, [r7, #20]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01e      	beq.n	8008c20 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008be2:	f000 fae7 	bl	80091b4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	6a3a      	ldr	r2, [r7, #32]
 8008bfc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	3304      	adds	r3, #4
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe faba 	bl	800717c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d008      	beq.n	8008c20 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c14:	f043 0304 	orr.w	r3, r3, #4
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008c20:	bf00      	nop
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	; 0x28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10a      	bne.n	8008c56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	623b      	str	r3, [r7, #32]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c56:	4b1a      	ldr	r3, [pc, #104]	; (8008cc0 <xTimerGenericCommand+0x98>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d02a      	beq.n	8008cb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b05      	cmp	r3, #5
 8008c6e:	dc18      	bgt.n	8008ca2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c70:	f7ff fe18 	bl	80088a4 <xTaskGetSchedulerState>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d109      	bne.n	8008c8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c7a:	4b11      	ldr	r3, [pc, #68]	; (8008cc0 <xTimerGenericCommand+0x98>)
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	f107 0110 	add.w	r1, r7, #16
 8008c82:	2300      	movs	r3, #0
 8008c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c86:	f7fe fc11 	bl	80074ac <xQueueGenericSend>
 8008c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8008c8c:	e012      	b.n	8008cb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c8e:	4b0c      	ldr	r3, [pc, #48]	; (8008cc0 <xTimerGenericCommand+0x98>)
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	f107 0110 	add.w	r1, r7, #16
 8008c96:	2300      	movs	r3, #0
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f7fe fc07 	bl	80074ac <xQueueGenericSend>
 8008c9e:	6278      	str	r0, [r7, #36]	; 0x24
 8008ca0:	e008      	b.n	8008cb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ca2:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <xTimerGenericCommand+0x98>)
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	f107 0110 	add.w	r1, r7, #16
 8008caa:	2300      	movs	r3, #0
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	f7fe fcfb 	bl	80076a8 <xQueueGenericSendFromISR>
 8008cb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3728      	adds	r7, #40	; 0x28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20002520 	.word	0x20002520

08008cc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b088      	sub	sp, #32
 8008cc8:	af02      	add	r7, sp, #8
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cce:	4b22      	ldr	r3, [pc, #136]	; (8008d58 <prvProcessExpiredTimer+0x94>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fe fab7 	bl	8007250 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ce8:	f003 0304 	and.w	r3, r3, #4
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d022      	beq.n	8008d36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	699a      	ldr	r2, [r3, #24]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	18d1      	adds	r1, r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	6978      	ldr	r0, [r7, #20]
 8008cfe:	f000 f8d1 	bl	8008ea4 <prvInsertTimerInActiveList>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01f      	beq.n	8008d48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d08:	2300      	movs	r3, #0
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	2100      	movs	r1, #0
 8008d12:	6978      	ldr	r0, [r7, #20]
 8008d14:	f7ff ff88 	bl	8008c28 <xTimerGenericCommand>
 8008d18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d113      	bne.n	8008d48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	60fb      	str	r3, [r7, #12]
}
 8008d32:	bf00      	nop
 8008d34:	e7fe      	b.n	8008d34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d3c:	f023 0301 	bic.w	r3, r3, #1
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	6978      	ldr	r0, [r7, #20]
 8008d4e:	4798      	blx	r3
}
 8008d50:	bf00      	nop
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20002518 	.word	0x20002518

08008d5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d64:	f107 0308 	add.w	r3, r7, #8
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 f857 	bl	8008e1c <prvGetNextExpireTime>
 8008d6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4619      	mov	r1, r3
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 f803 	bl	8008d80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d7a:	f000 f8d5 	bl	8008f28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d7e:	e7f1      	b.n	8008d64 <prvTimerTask+0x8>

08008d80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d8a:	f7ff f99f 	bl	80080cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d8e:	f107 0308 	add.w	r3, r7, #8
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 f866 	bl	8008e64 <prvSampleTimeNow>
 8008d98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d130      	bne.n	8008e02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10a      	bne.n	8008dbc <prvProcessTimerOrBlockTask+0x3c>
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d806      	bhi.n	8008dbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008dae:	f7ff f99b 	bl	80080e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008db2:	68f9      	ldr	r1, [r7, #12]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff ff85 	bl	8008cc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008dba:	e024      	b.n	8008e06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d008      	beq.n	8008dd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008dc2:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <prvProcessTimerOrBlockTask+0x90>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <prvProcessTimerOrBlockTask+0x50>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e000      	b.n	8008dd2 <prvProcessTimerOrBlockTask+0x52>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008dd4:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <prvProcessTimerOrBlockTask+0x94>)
 8008dd6:	6818      	ldr	r0, [r3, #0]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	4619      	mov	r1, r3
 8008de2:	f7fe ff17 	bl	8007c14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008de6:	f7ff f97f 	bl	80080e8 <xTaskResumeAll>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008df0:	4b09      	ldr	r3, [pc, #36]	; (8008e18 <prvProcessTimerOrBlockTask+0x98>)
 8008df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
}
 8008e00:	e001      	b.n	8008e06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e02:	f7ff f971 	bl	80080e8 <xTaskResumeAll>
}
 8008e06:	bf00      	nop
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	2000251c 	.word	0x2000251c
 8008e14:	20002520 	.word	0x20002520
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <prvGetNextExpireTime+0x44>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <prvGetNextExpireTime+0x16>
 8008e2e:	2201      	movs	r2, #1
 8008e30:	e000      	b.n	8008e34 <prvGetNextExpireTime+0x18>
 8008e32:	2200      	movs	r2, #0
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d105      	bne.n	8008e4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <prvGetNextExpireTime+0x44>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	e001      	b.n	8008e50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e50:	68fb      	ldr	r3, [r7, #12]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	20002518 	.word	0x20002518

08008e64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e6c:	f7ff f9da 	bl	8008224 <xTaskGetTickCount>
 8008e70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e72:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <prvSampleTimeNow+0x3c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d205      	bcs.n	8008e88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e7c:	f000 f936 	bl	80090ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	e002      	b.n	8008e8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e8e:	4a04      	ldr	r2, [pc, #16]	; (8008ea0 <prvSampleTimeNow+0x3c>)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e94:	68fb      	ldr	r3, [r7, #12]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20002528 	.word	0x20002528

08008ea4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d812      	bhi.n	8008ef0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d302      	bcc.n	8008ede <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	617b      	str	r3, [r7, #20]
 8008edc:	e01b      	b.n	8008f16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ede:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <prvInsertTimerInActiveList+0x7c>)
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4610      	mov	r0, r2
 8008eea:	f7fe f978 	bl	80071de <vListInsert>
 8008eee:	e012      	b.n	8008f16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d206      	bcs.n	8008f06 <prvInsertTimerInActiveList+0x62>
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d302      	bcc.n	8008f06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f00:	2301      	movs	r3, #1
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	e007      	b.n	8008f16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f06:	4b07      	ldr	r3, [pc, #28]	; (8008f24 <prvInsertTimerInActiveList+0x80>)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4610      	mov	r0, r2
 8008f12:	f7fe f964 	bl	80071de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f16:	697b      	ldr	r3, [r7, #20]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	2000251c 	.word	0x2000251c
 8008f24:	20002518 	.word	0x20002518

08008f28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08e      	sub	sp, #56	; 0x38
 8008f2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f2e:	e0ca      	b.n	80090c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	da18      	bge.n	8008f68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f36:	1d3b      	adds	r3, r7, #4
 8008f38:	3304      	adds	r3, #4
 8008f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10a      	bne.n	8008f58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	61fb      	str	r3, [r7, #28]
}
 8008f54:	bf00      	nop
 8008f56:	e7fe      	b.n	8008f56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f5e:	6850      	ldr	r0, [r2, #4]
 8008f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f62:	6892      	ldr	r2, [r2, #8]
 8008f64:	4611      	mov	r1, r2
 8008f66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f2c0 80aa 	blt.w	80090c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d004      	beq.n	8008f86 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	3304      	adds	r3, #4
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe f965 	bl	8007250 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f86:	463b      	mov	r3, r7
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7ff ff6b 	bl	8008e64 <prvSampleTimeNow>
 8008f8e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b09      	cmp	r3, #9
 8008f94:	f200 8097 	bhi.w	80090c6 <prvProcessReceivedCommands+0x19e>
 8008f98:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <prvProcessReceivedCommands+0x78>)
 8008f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9e:	bf00      	nop
 8008fa0:	08008fc9 	.word	0x08008fc9
 8008fa4:	08008fc9 	.word	0x08008fc9
 8008fa8:	08008fc9 	.word	0x08008fc9
 8008fac:	0800903d 	.word	0x0800903d
 8008fb0:	08009051 	.word	0x08009051
 8008fb4:	0800909b 	.word	0x0800909b
 8008fb8:	08008fc9 	.word	0x08008fc9
 8008fbc:	08008fc9 	.word	0x08008fc9
 8008fc0:	0800903d 	.word	0x0800903d
 8008fc4:	08009051 	.word	0x08009051
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fce:	f043 0301 	orr.w	r3, r3, #1
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	18d1      	adds	r1, r2, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fe8:	f7ff ff5c 	bl	8008ea4 <prvInsertTimerInActiveList>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d069      	beq.n	80090c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ff8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009000:	f003 0304 	and.w	r3, r3, #4
 8009004:	2b00      	cmp	r3, #0
 8009006:	d05e      	beq.n	80090c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	441a      	add	r2, r3
 8009010:	2300      	movs	r3, #0
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	2300      	movs	r3, #0
 8009016:	2100      	movs	r1, #0
 8009018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800901a:	f7ff fe05 	bl	8008c28 <xTimerGenericCommand>
 800901e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d14f      	bne.n	80090c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	61bb      	str	r3, [r7, #24]
}
 8009038:	bf00      	nop
 800903a:	e7fe      	b.n	800903a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009042:	f023 0301 	bic.w	r3, r3, #1
 8009046:	b2da      	uxtb	r2, r3
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800904e:	e03a      	b.n	80090c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009056:	f043 0301 	orr.w	r3, r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	617b      	str	r3, [r7, #20]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	699a      	ldr	r2, [r3, #24]
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	18d1      	adds	r1, r2, r3
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009094:	f7ff ff06 	bl	8008ea4 <prvInsertTimerInActiveList>
					break;
 8009098:	e015      	b.n	80090c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a0:	f003 0302 	and.w	r3, r3, #2
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80090a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090aa:	f000 fc01 	bl	80098b0 <vPortFree>
 80090ae:	e00a      	b.n	80090c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090b6:	f023 0301 	bic.w	r3, r3, #1
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80090c2:	e000      	b.n	80090c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80090c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090c6:	4b08      	ldr	r3, [pc, #32]	; (80090e8 <prvProcessReceivedCommands+0x1c0>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	1d39      	adds	r1, r7, #4
 80090cc:	2200      	movs	r2, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe fb86 	bl	80077e0 <xQueueReceive>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f47f af2a 	bne.w	8008f30 <prvProcessReceivedCommands+0x8>
	}
}
 80090dc:	bf00      	nop
 80090de:	bf00      	nop
 80090e0:	3730      	adds	r7, #48	; 0x30
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	20002520 	.word	0x20002520

080090ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090f2:	e048      	b.n	8009186 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090f4:	4b2d      	ldr	r3, [pc, #180]	; (80091ac <prvSwitchTimerLists+0xc0>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090fe:	4b2b      	ldr	r3, [pc, #172]	; (80091ac <prvSwitchTimerLists+0xc0>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	3304      	adds	r3, #4
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe f89f 	bl	8007250 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b00      	cmp	r3, #0
 8009126:	d02e      	beq.n	8009186 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	4413      	add	r3, r2
 8009130:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	429a      	cmp	r2, r3
 8009138:	d90e      	bls.n	8009158 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009146:	4b19      	ldr	r3, [pc, #100]	; (80091ac <prvSwitchTimerLists+0xc0>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3304      	adds	r3, #4
 800914e:	4619      	mov	r1, r3
 8009150:	4610      	mov	r0, r2
 8009152:	f7fe f844 	bl	80071de <vListInsert>
 8009156:	e016      	b.n	8009186 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009158:	2300      	movs	r3, #0
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	2300      	movs	r3, #0
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	2100      	movs	r1, #0
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7ff fd60 	bl	8008c28 <xTimerGenericCommand>
 8009168:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	603b      	str	r3, [r7, #0]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009186:	4b09      	ldr	r3, [pc, #36]	; (80091ac <prvSwitchTimerLists+0xc0>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1b1      	bne.n	80090f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009190:	4b06      	ldr	r3, [pc, #24]	; (80091ac <prvSwitchTimerLists+0xc0>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009196:	4b06      	ldr	r3, [pc, #24]	; (80091b0 <prvSwitchTimerLists+0xc4>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a04      	ldr	r2, [pc, #16]	; (80091ac <prvSwitchTimerLists+0xc0>)
 800919c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800919e:	4a04      	ldr	r2, [pc, #16]	; (80091b0 <prvSwitchTimerLists+0xc4>)
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	6013      	str	r3, [r2, #0]
}
 80091a4:	bf00      	nop
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	20002518 	.word	0x20002518
 80091b0:	2000251c 	.word	0x2000251c

080091b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80091ba:	f000 f98b 	bl	80094d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80091be:	4b15      	ldr	r3, [pc, #84]	; (8009214 <prvCheckForValidListAndQueue+0x60>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d120      	bne.n	8009208 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80091c6:	4814      	ldr	r0, [pc, #80]	; (8009218 <prvCheckForValidListAndQueue+0x64>)
 80091c8:	f7fd ffb8 	bl	800713c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80091cc:	4813      	ldr	r0, [pc, #76]	; (800921c <prvCheckForValidListAndQueue+0x68>)
 80091ce:	f7fd ffb5 	bl	800713c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80091d2:	4b13      	ldr	r3, [pc, #76]	; (8009220 <prvCheckForValidListAndQueue+0x6c>)
 80091d4:	4a10      	ldr	r2, [pc, #64]	; (8009218 <prvCheckForValidListAndQueue+0x64>)
 80091d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80091d8:	4b12      	ldr	r3, [pc, #72]	; (8009224 <prvCheckForValidListAndQueue+0x70>)
 80091da:	4a10      	ldr	r2, [pc, #64]	; (800921c <prvCheckForValidListAndQueue+0x68>)
 80091dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091de:	2300      	movs	r3, #0
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	4b11      	ldr	r3, [pc, #68]	; (8009228 <prvCheckForValidListAndQueue+0x74>)
 80091e4:	4a11      	ldr	r2, [pc, #68]	; (800922c <prvCheckForValidListAndQueue+0x78>)
 80091e6:	2110      	movs	r1, #16
 80091e8:	200a      	movs	r0, #10
 80091ea:	f7fe f8c3 	bl	8007374 <xQueueGenericCreateStatic>
 80091ee:	4603      	mov	r3, r0
 80091f0:	4a08      	ldr	r2, [pc, #32]	; (8009214 <prvCheckForValidListAndQueue+0x60>)
 80091f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80091f4:	4b07      	ldr	r3, [pc, #28]	; (8009214 <prvCheckForValidListAndQueue+0x60>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d005      	beq.n	8009208 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091fc:	4b05      	ldr	r3, [pc, #20]	; (8009214 <prvCheckForValidListAndQueue+0x60>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	490b      	ldr	r1, [pc, #44]	; (8009230 <prvCheckForValidListAndQueue+0x7c>)
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fcdc 	bl	8007bc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009208:	f000 f994 	bl	8009534 <vPortExitCritical>
}
 800920c:	bf00      	nop
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	20002520 	.word	0x20002520
 8009218:	200024f0 	.word	0x200024f0
 800921c:	20002504 	.word	0x20002504
 8009220:	20002518 	.word	0x20002518
 8009224:	2000251c 	.word	0x2000251c
 8009228:	200025cc 	.word	0x200025cc
 800922c:	2000252c 	.word	0x2000252c
 8009230:	0800bce8 	.word	0x0800bce8

08009234 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <pvTimerGetTimerID+0x28>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	60fb      	str	r3, [r7, #12]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800925c:	f000 f93a 	bl	80094d4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009266:	f000 f965 	bl	8009534 <vPortExitCritical>

	return pvReturn;
 800926a:	693b      	ldr	r3, [r7, #16]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3b04      	subs	r3, #4
 8009284:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800928c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3b04      	subs	r3, #4
 8009292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f023 0201 	bic.w	r2, r3, #1
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3b04      	subs	r3, #4
 80092a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092a4:	4a0c      	ldr	r2, [pc, #48]	; (80092d8 <pxPortInitialiseStack+0x64>)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3b14      	subs	r3, #20
 80092ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3b04      	subs	r3, #4
 80092ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f06f 0202 	mvn.w	r2, #2
 80092c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3b20      	subs	r3, #32
 80092c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092ca:	68fb      	ldr	r3, [r7, #12]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	080092dd 	.word	0x080092dd

080092dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092e6:	4b12      	ldr	r3, [pc, #72]	; (8009330 <prvTaskExitError+0x54>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ee:	d00a      	beq.n	8009306 <prvTaskExitError+0x2a>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	60fb      	str	r3, [r7, #12]
}
 8009302:	bf00      	nop
 8009304:	e7fe      	b.n	8009304 <prvTaskExitError+0x28>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	60bb      	str	r3, [r7, #8]
}
 8009318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800931a:	bf00      	nop
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0fc      	beq.n	800931c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009322:	bf00      	nop
 8009324:	bf00      	nop
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	2000000c 	.word	0x2000000c
	...

08009340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009340:	4b07      	ldr	r3, [pc, #28]	; (8009360 <pxCurrentTCBConst2>)
 8009342:	6819      	ldr	r1, [r3, #0]
 8009344:	6808      	ldr	r0, [r1, #0]
 8009346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934a:	f380 8809 	msr	PSP, r0
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f04f 0000 	mov.w	r0, #0
 8009356:	f380 8811 	msr	BASEPRI, r0
 800935a:	4770      	bx	lr
 800935c:	f3af 8000 	nop.w

08009360 <pxCurrentTCBConst2>:
 8009360:	20001ff0 	.word	0x20001ff0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop

08009368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009368:	4808      	ldr	r0, [pc, #32]	; (800938c <prvPortStartFirstTask+0x24>)
 800936a:	6800      	ldr	r0, [r0, #0]
 800936c:	6800      	ldr	r0, [r0, #0]
 800936e:	f380 8808 	msr	MSP, r0
 8009372:	f04f 0000 	mov.w	r0, #0
 8009376:	f380 8814 	msr	CONTROL, r0
 800937a:	b662      	cpsie	i
 800937c:	b661      	cpsie	f
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	df00      	svc	0
 8009388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800938a:	bf00      	nop
 800938c:	e000ed08 	.word	0xe000ed08

08009390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009396:	4b46      	ldr	r3, [pc, #280]	; (80094b0 <xPortStartScheduler+0x120>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a46      	ldr	r2, [pc, #280]	; (80094b4 <xPortStartScheduler+0x124>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d10a      	bne.n	80093b6 <xPortStartScheduler+0x26>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	613b      	str	r3, [r7, #16]
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093b6:	4b3e      	ldr	r3, [pc, #248]	; (80094b0 <xPortStartScheduler+0x120>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a3f      	ldr	r2, [pc, #252]	; (80094b8 <xPortStartScheduler+0x128>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d10a      	bne.n	80093d6 <xPortStartScheduler+0x46>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	60fb      	str	r3, [r7, #12]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093d6:	4b39      	ldr	r3, [pc, #228]	; (80094bc <xPortStartScheduler+0x12c>)
 80093d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	22ff      	movs	r2, #255	; 0xff
 80093e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	4b31      	ldr	r3, [pc, #196]	; (80094c0 <xPortStartScheduler+0x130>)
 80093fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093fe:	4b31      	ldr	r3, [pc, #196]	; (80094c4 <xPortStartScheduler+0x134>)
 8009400:	2207      	movs	r2, #7
 8009402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009404:	e009      	b.n	800941a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009406:	4b2f      	ldr	r3, [pc, #188]	; (80094c4 <xPortStartScheduler+0x134>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3b01      	subs	r3, #1
 800940c:	4a2d      	ldr	r2, [pc, #180]	; (80094c4 <xPortStartScheduler+0x134>)
 800940e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	b2db      	uxtb	r3, r3
 8009418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009422:	2b80      	cmp	r3, #128	; 0x80
 8009424:	d0ef      	beq.n	8009406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009426:	4b27      	ldr	r3, [pc, #156]	; (80094c4 <xPortStartScheduler+0x134>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f1c3 0307 	rsb	r3, r3, #7
 800942e:	2b04      	cmp	r3, #4
 8009430:	d00a      	beq.n	8009448 <xPortStartScheduler+0xb8>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	60bb      	str	r3, [r7, #8]
}
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009448:	4b1e      	ldr	r3, [pc, #120]	; (80094c4 <xPortStartScheduler+0x134>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	4a1d      	ldr	r2, [pc, #116]	; (80094c4 <xPortStartScheduler+0x134>)
 8009450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009452:	4b1c      	ldr	r3, [pc, #112]	; (80094c4 <xPortStartScheduler+0x134>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800945a:	4a1a      	ldr	r2, [pc, #104]	; (80094c4 <xPortStartScheduler+0x134>)
 800945c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	b2da      	uxtb	r2, r3
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009466:	4b18      	ldr	r3, [pc, #96]	; (80094c8 <xPortStartScheduler+0x138>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a17      	ldr	r2, [pc, #92]	; (80094c8 <xPortStartScheduler+0x138>)
 800946c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009472:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <xPortStartScheduler+0x138>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a14      	ldr	r2, [pc, #80]	; (80094c8 <xPortStartScheduler+0x138>)
 8009478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800947c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800947e:	f000 f8dd 	bl	800963c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009482:	4b12      	ldr	r3, [pc, #72]	; (80094cc <xPortStartScheduler+0x13c>)
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009488:	f000 f8fc 	bl	8009684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800948c:	4b10      	ldr	r3, [pc, #64]	; (80094d0 <xPortStartScheduler+0x140>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a0f      	ldr	r2, [pc, #60]	; (80094d0 <xPortStartScheduler+0x140>)
 8009492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009498:	f7ff ff66 	bl	8009368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800949c:	f7fe ff8c 	bl	80083b8 <vTaskSwitchContext>
	prvTaskExitError();
 80094a0:	f7ff ff1c 	bl	80092dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	e000ed00 	.word	0xe000ed00
 80094b4:	410fc271 	.word	0x410fc271
 80094b8:	410fc270 	.word	0x410fc270
 80094bc:	e000e400 	.word	0xe000e400
 80094c0:	2000261c 	.word	0x2000261c
 80094c4:	20002620 	.word	0x20002620
 80094c8:	e000ed20 	.word	0xe000ed20
 80094cc:	2000000c 	.word	0x2000000c
 80094d0:	e000ef34 	.word	0xe000ef34

080094d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
	__asm volatile
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	607b      	str	r3, [r7, #4]
}
 80094ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094ee:	4b0f      	ldr	r3, [pc, #60]	; (800952c <vPortEnterCritical+0x58>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3301      	adds	r3, #1
 80094f4:	4a0d      	ldr	r2, [pc, #52]	; (800952c <vPortEnterCritical+0x58>)
 80094f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094f8:	4b0c      	ldr	r3, [pc, #48]	; (800952c <vPortEnterCritical+0x58>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d10f      	bne.n	8009520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009500:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <vPortEnterCritical+0x5c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <vPortEnterCritical+0x4c>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	603b      	str	r3, [r7, #0]
}
 800951c:	bf00      	nop
 800951e:	e7fe      	b.n	800951e <vPortEnterCritical+0x4a>
	}
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	2000000c 	.word	0x2000000c
 8009530:	e000ed04 	.word	0xe000ed04

08009534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800953a:	4b12      	ldr	r3, [pc, #72]	; (8009584 <vPortExitCritical+0x50>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10a      	bne.n	8009558 <vPortExitCritical+0x24>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	607b      	str	r3, [r7, #4]
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009558:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <vPortExitCritical+0x50>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3b01      	subs	r3, #1
 800955e:	4a09      	ldr	r2, [pc, #36]	; (8009584 <vPortExitCritical+0x50>)
 8009560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009562:	4b08      	ldr	r3, [pc, #32]	; (8009584 <vPortExitCritical+0x50>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d105      	bne.n	8009576 <vPortExitCritical+0x42>
 800956a:	2300      	movs	r3, #0
 800956c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	f383 8811 	msr	BASEPRI, r3
}
 8009574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	2000000c 	.word	0x2000000c
	...

08009590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009590:	f3ef 8009 	mrs	r0, PSP
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	4b15      	ldr	r3, [pc, #84]	; (80095f0 <pxCurrentTCBConst>)
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	f01e 0f10 	tst.w	lr, #16
 80095a0:	bf08      	it	eq
 80095a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095aa:	6010      	str	r0, [r2, #0]
 80095ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095b4:	f380 8811 	msr	BASEPRI, r0
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f7fe fefa 	bl	80083b8 <vTaskSwitchContext>
 80095c4:	f04f 0000 	mov.w	r0, #0
 80095c8:	f380 8811 	msr	BASEPRI, r0
 80095cc:	bc09      	pop	{r0, r3}
 80095ce:	6819      	ldr	r1, [r3, #0]
 80095d0:	6808      	ldr	r0, [r1, #0]
 80095d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d6:	f01e 0f10 	tst.w	lr, #16
 80095da:	bf08      	it	eq
 80095dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095e0:	f380 8809 	msr	PSP, r0
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	f3af 8000 	nop.w

080095f0 <pxCurrentTCBConst>:
 80095f0:	20001ff0 	.word	0x20001ff0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop

080095f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	607b      	str	r3, [r7, #4]
}
 8009610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009612:	f7fe fe17 	bl	8008244 <xTaskIncrementTick>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800961c:	4b06      	ldr	r3, [pc, #24]	; (8009638 <xPortSysTickHandler+0x40>)
 800961e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	2300      	movs	r3, #0
 8009626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	f383 8811 	msr	BASEPRI, r3
}
 800962e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	e000ed04 	.word	0xe000ed04

0800963c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009640:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <vPortSetupTimerInterrupt+0x34>)
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009646:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <vPortSetupTimerInterrupt+0x38>)
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <vPortSetupTimerInterrupt+0x3c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a0a      	ldr	r2, [pc, #40]	; (800967c <vPortSetupTimerInterrupt+0x40>)
 8009652:	fba2 2303 	umull	r2, r3, r2, r3
 8009656:	099b      	lsrs	r3, r3, #6
 8009658:	4a09      	ldr	r2, [pc, #36]	; (8009680 <vPortSetupTimerInterrupt+0x44>)
 800965a:	3b01      	subs	r3, #1
 800965c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800965e:	4b04      	ldr	r3, [pc, #16]	; (8009670 <vPortSetupTimerInterrupt+0x34>)
 8009660:	2207      	movs	r2, #7
 8009662:	601a      	str	r2, [r3, #0]
}
 8009664:	bf00      	nop
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	e000e010 	.word	0xe000e010
 8009674:	e000e018 	.word	0xe000e018
 8009678:	20000000 	.word	0x20000000
 800967c:	10624dd3 	.word	0x10624dd3
 8009680:	e000e014 	.word	0xe000e014

08009684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009694 <vPortEnableVFP+0x10>
 8009688:	6801      	ldr	r1, [r0, #0]
 800968a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800968e:	6001      	str	r1, [r0, #0]
 8009690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009692:	bf00      	nop
 8009694:	e000ed88 	.word	0xe000ed88

08009698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800969e:	f3ef 8305 	mrs	r3, IPSR
 80096a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2b0f      	cmp	r3, #15
 80096a8:	d914      	bls.n	80096d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096aa:	4a17      	ldr	r2, [pc, #92]	; (8009708 <vPortValidateInterruptPriority+0x70>)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4413      	add	r3, r2
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096b4:	4b15      	ldr	r3, [pc, #84]	; (800970c <vPortValidateInterruptPriority+0x74>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	7afa      	ldrb	r2, [r7, #11]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d20a      	bcs.n	80096d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	607b      	str	r3, [r7, #4]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096d4:	4b0e      	ldr	r3, [pc, #56]	; (8009710 <vPortValidateInterruptPriority+0x78>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096dc:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <vPortValidateInterruptPriority+0x7c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d90a      	bls.n	80096fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	603b      	str	r3, [r7, #0]
}
 80096f6:	bf00      	nop
 80096f8:	e7fe      	b.n	80096f8 <vPortValidateInterruptPriority+0x60>
	}
 80096fa:	bf00      	nop
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	e000e3f0 	.word	0xe000e3f0
 800970c:	2000261c 	.word	0x2000261c
 8009710:	e000ed0c 	.word	0xe000ed0c
 8009714:	20002620 	.word	0x20002620

08009718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b08a      	sub	sp, #40	; 0x28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009720:	2300      	movs	r3, #0
 8009722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009724:	f7fe fcd2 	bl	80080cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009728:	4b5b      	ldr	r3, [pc, #364]	; (8009898 <pvPortMalloc+0x180>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009730:	f000 f920 	bl	8009974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009734:	4b59      	ldr	r3, [pc, #356]	; (800989c <pvPortMalloc+0x184>)
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4013      	ands	r3, r2
 800973c:	2b00      	cmp	r3, #0
 800973e:	f040 8093 	bne.w	8009868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01d      	beq.n	8009784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009748:	2208      	movs	r2, #8
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4413      	add	r3, r2
 800974e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f003 0307 	and.w	r3, r3, #7
 8009756:	2b00      	cmp	r3, #0
 8009758:	d014      	beq.n	8009784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f023 0307 	bic.w	r3, r3, #7
 8009760:	3308      	adds	r3, #8
 8009762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <pvPortMalloc+0x6c>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	617b      	str	r3, [r7, #20]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d06e      	beq.n	8009868 <pvPortMalloc+0x150>
 800978a:	4b45      	ldr	r3, [pc, #276]	; (80098a0 <pvPortMalloc+0x188>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	429a      	cmp	r2, r3
 8009792:	d869      	bhi.n	8009868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009794:	4b43      	ldr	r3, [pc, #268]	; (80098a4 <pvPortMalloc+0x18c>)
 8009796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009798:	4b42      	ldr	r3, [pc, #264]	; (80098a4 <pvPortMalloc+0x18c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800979e:	e004      	b.n	80097aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d903      	bls.n	80097bc <pvPortMalloc+0xa4>
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1f1      	bne.n	80097a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097bc:	4b36      	ldr	r3, [pc, #216]	; (8009898 <pvPortMalloc+0x180>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d050      	beq.n	8009868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2208      	movs	r2, #8
 80097cc:	4413      	add	r3, r2
 80097ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	2308      	movs	r3, #8
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d91f      	bls.n	8009828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4413      	add	r3, r2
 80097ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <pvPortMalloc+0xf8>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	613b      	str	r3, [r7, #16]
}
 800980c:	bf00      	nop
 800980e:	e7fe      	b.n	800980e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009822:	69b8      	ldr	r0, [r7, #24]
 8009824:	f000 f908 	bl	8009a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009828:	4b1d      	ldr	r3, [pc, #116]	; (80098a0 <pvPortMalloc+0x188>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	4a1b      	ldr	r2, [pc, #108]	; (80098a0 <pvPortMalloc+0x188>)
 8009834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009836:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <pvPortMalloc+0x188>)
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	4b1b      	ldr	r3, [pc, #108]	; (80098a8 <pvPortMalloc+0x190>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	429a      	cmp	r2, r3
 8009840:	d203      	bcs.n	800984a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009842:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <pvPortMalloc+0x188>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a18      	ldr	r2, [pc, #96]	; (80098a8 <pvPortMalloc+0x190>)
 8009848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	4b13      	ldr	r3, [pc, #76]	; (800989c <pvPortMalloc+0x184>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	431a      	orrs	r2, r3
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	2200      	movs	r2, #0
 800985c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <pvPortMalloc+0x194>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	4a11      	ldr	r2, [pc, #68]	; (80098ac <pvPortMalloc+0x194>)
 8009866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009868:	f7fe fc3e 	bl	80080e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <pvPortMalloc+0x174>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	60fb      	str	r3, [r7, #12]
}
 8009888:	bf00      	nop
 800988a:	e7fe      	b.n	800988a <pvPortMalloc+0x172>
	return pvReturn;
 800988c:	69fb      	ldr	r3, [r7, #28]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3728      	adds	r7, #40	; 0x28
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20004d3c 	.word	0x20004d3c
 800989c:	20004d50 	.word	0x20004d50
 80098a0:	20004d40 	.word	0x20004d40
 80098a4:	20004d34 	.word	0x20004d34
 80098a8:	20004d44 	.word	0x20004d44
 80098ac:	20004d48 	.word	0x20004d48

080098b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d04d      	beq.n	800995e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098c2:	2308      	movs	r3, #8
 80098c4:	425b      	negs	r3, r3
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	4413      	add	r3, r2
 80098ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	4b24      	ldr	r3, [pc, #144]	; (8009968 <vPortFree+0xb8>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4013      	ands	r3, r2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10a      	bne.n	80098f4 <vPortFree+0x44>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60fb      	str	r3, [r7, #12]
}
 80098f0:	bf00      	nop
 80098f2:	e7fe      	b.n	80098f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00a      	beq.n	8009912 <vPortFree+0x62>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	60bb      	str	r3, [r7, #8]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	4b14      	ldr	r3, [pc, #80]	; (8009968 <vPortFree+0xb8>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4013      	ands	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01e      	beq.n	800995e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d11a      	bne.n	800995e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	4b0e      	ldr	r3, [pc, #56]	; (8009968 <vPortFree+0xb8>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	43db      	mvns	r3, r3
 8009932:	401a      	ands	r2, r3
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009938:	f7fe fbc8 	bl	80080cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	4b0a      	ldr	r3, [pc, #40]	; (800996c <vPortFree+0xbc>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4413      	add	r3, r2
 8009946:	4a09      	ldr	r2, [pc, #36]	; (800996c <vPortFree+0xbc>)
 8009948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800994a:	6938      	ldr	r0, [r7, #16]
 800994c:	f000 f874 	bl	8009a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009950:	4b07      	ldr	r3, [pc, #28]	; (8009970 <vPortFree+0xc0>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3301      	adds	r3, #1
 8009956:	4a06      	ldr	r2, [pc, #24]	; (8009970 <vPortFree+0xc0>)
 8009958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800995a:	f7fe fbc5 	bl	80080e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800995e:	bf00      	nop
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20004d50 	.word	0x20004d50
 800996c:	20004d40 	.word	0x20004d40
 8009970:	20004d4c 	.word	0x20004d4c

08009974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800997a:	f242 7310 	movw	r3, #10000	; 0x2710
 800997e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009980:	4b27      	ldr	r3, [pc, #156]	; (8009a20 <prvHeapInit+0xac>)
 8009982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f003 0307 	and.w	r3, r3, #7
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00c      	beq.n	80099a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3307      	adds	r3, #7
 8009992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0307 	bic.w	r3, r3, #7
 800999a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	4a1f      	ldr	r2, [pc, #124]	; (8009a20 <prvHeapInit+0xac>)
 80099a4:	4413      	add	r3, r2
 80099a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099ac:	4a1d      	ldr	r2, [pc, #116]	; (8009a24 <prvHeapInit+0xb0>)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099b2:	4b1c      	ldr	r3, [pc, #112]	; (8009a24 <prvHeapInit+0xb0>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099c0:	2208      	movs	r2, #8
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	1a9b      	subs	r3, r3, r2
 80099c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0307 	bic.w	r3, r3, #7
 80099ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4a15      	ldr	r2, [pc, #84]	; (8009a28 <prvHeapInit+0xb4>)
 80099d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099d6:	4b14      	ldr	r3, [pc, #80]	; (8009a28 <prvHeapInit+0xb4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2200      	movs	r2, #0
 80099dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099de:	4b12      	ldr	r3, [pc, #72]	; (8009a28 <prvHeapInit+0xb4>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099f4:	4b0c      	ldr	r3, [pc, #48]	; (8009a28 <prvHeapInit+0xb4>)
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	4a0a      	ldr	r2, [pc, #40]	; (8009a2c <prvHeapInit+0xb8>)
 8009a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	4a09      	ldr	r2, [pc, #36]	; (8009a30 <prvHeapInit+0xbc>)
 8009a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a0c:	4b09      	ldr	r3, [pc, #36]	; (8009a34 <prvHeapInit+0xc0>)
 8009a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a12:	601a      	str	r2, [r3, #0]
}
 8009a14:	bf00      	nop
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr
 8009a20:	20002624 	.word	0x20002624
 8009a24:	20004d34 	.word	0x20004d34
 8009a28:	20004d3c 	.word	0x20004d3c
 8009a2c:	20004d44 	.word	0x20004d44
 8009a30:	20004d40 	.word	0x20004d40
 8009a34:	20004d50 	.word	0x20004d50

08009a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a40:	4b28      	ldr	r3, [pc, #160]	; (8009ae4 <prvInsertBlockIntoFreeList+0xac>)
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	e002      	b.n	8009a4c <prvInsertBlockIntoFreeList+0x14>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d8f7      	bhi.n	8009a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	4413      	add	r3, r2
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d108      	bne.n	8009a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	441a      	add	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	441a      	add	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d118      	bne.n	8009ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d00d      	beq.n	8009ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	441a      	add	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	e008      	b.n	8009ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ab6:	4b0c      	ldr	r3, [pc, #48]	; (8009ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	e003      	b.n	8009ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d002      	beq.n	8009ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ad6:	bf00      	nop
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	20004d34 	.word	0x20004d34
 8009ae8:	20004d3c 	.word	0x20004d3c

08009aec <__errno>:
 8009aec:	4b01      	ldr	r3, [pc, #4]	; (8009af4 <__errno+0x8>)
 8009aee:	6818      	ldr	r0, [r3, #0]
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	20000010 	.word	0x20000010

08009af8 <std>:
 8009af8:	2300      	movs	r3, #0
 8009afa:	b510      	push	{r4, lr}
 8009afc:	4604      	mov	r4, r0
 8009afe:	e9c0 3300 	strd	r3, r3, [r0]
 8009b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b06:	6083      	str	r3, [r0, #8]
 8009b08:	8181      	strh	r1, [r0, #12]
 8009b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b0c:	81c2      	strh	r2, [r0, #14]
 8009b0e:	6183      	str	r3, [r0, #24]
 8009b10:	4619      	mov	r1, r3
 8009b12:	2208      	movs	r2, #8
 8009b14:	305c      	adds	r0, #92	; 0x5c
 8009b16:	f000 f91a 	bl	8009d4e <memset>
 8009b1a:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <std+0x38>)
 8009b1c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b1e:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <std+0x3c>)
 8009b20:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <std+0x40>)
 8009b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b26:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <std+0x44>)
 8009b28:	6224      	str	r4, [r4, #32]
 8009b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8009b2c:	bd10      	pop	{r4, pc}
 8009b2e:	bf00      	nop
 8009b30:	0800a225 	.word	0x0800a225
 8009b34:	0800a247 	.word	0x0800a247
 8009b38:	0800a27f 	.word	0x0800a27f
 8009b3c:	0800a2a3 	.word	0x0800a2a3

08009b40 <_cleanup_r>:
 8009b40:	4901      	ldr	r1, [pc, #4]	; (8009b48 <_cleanup_r+0x8>)
 8009b42:	f000 b8af 	b.w	8009ca4 <_fwalk_reent>
 8009b46:	bf00      	nop
 8009b48:	0800a57d 	.word	0x0800a57d

08009b4c <__sfmoreglue>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	2268      	movs	r2, #104	; 0x68
 8009b50:	1e4d      	subs	r5, r1, #1
 8009b52:	4355      	muls	r5, r2
 8009b54:	460e      	mov	r6, r1
 8009b56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b5a:	f000 f921 	bl	8009da0 <_malloc_r>
 8009b5e:	4604      	mov	r4, r0
 8009b60:	b140      	cbz	r0, 8009b74 <__sfmoreglue+0x28>
 8009b62:	2100      	movs	r1, #0
 8009b64:	e9c0 1600 	strd	r1, r6, [r0]
 8009b68:	300c      	adds	r0, #12
 8009b6a:	60a0      	str	r0, [r4, #8]
 8009b6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b70:	f000 f8ed 	bl	8009d4e <memset>
 8009b74:	4620      	mov	r0, r4
 8009b76:	bd70      	pop	{r4, r5, r6, pc}

08009b78 <__sfp_lock_acquire>:
 8009b78:	4801      	ldr	r0, [pc, #4]	; (8009b80 <__sfp_lock_acquire+0x8>)
 8009b7a:	f000 b8d8 	b.w	8009d2e <__retarget_lock_acquire_recursive>
 8009b7e:	bf00      	nop
 8009b80:	20004d55 	.word	0x20004d55

08009b84 <__sfp_lock_release>:
 8009b84:	4801      	ldr	r0, [pc, #4]	; (8009b8c <__sfp_lock_release+0x8>)
 8009b86:	f000 b8d3 	b.w	8009d30 <__retarget_lock_release_recursive>
 8009b8a:	bf00      	nop
 8009b8c:	20004d55 	.word	0x20004d55

08009b90 <__sinit_lock_acquire>:
 8009b90:	4801      	ldr	r0, [pc, #4]	; (8009b98 <__sinit_lock_acquire+0x8>)
 8009b92:	f000 b8cc 	b.w	8009d2e <__retarget_lock_acquire_recursive>
 8009b96:	bf00      	nop
 8009b98:	20004d56 	.word	0x20004d56

08009b9c <__sinit_lock_release>:
 8009b9c:	4801      	ldr	r0, [pc, #4]	; (8009ba4 <__sinit_lock_release+0x8>)
 8009b9e:	f000 b8c7 	b.w	8009d30 <__retarget_lock_release_recursive>
 8009ba2:	bf00      	nop
 8009ba4:	20004d56 	.word	0x20004d56

08009ba8 <__sinit>:
 8009ba8:	b510      	push	{r4, lr}
 8009baa:	4604      	mov	r4, r0
 8009bac:	f7ff fff0 	bl	8009b90 <__sinit_lock_acquire>
 8009bb0:	69a3      	ldr	r3, [r4, #24]
 8009bb2:	b11b      	cbz	r3, 8009bbc <__sinit+0x14>
 8009bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb8:	f7ff bff0 	b.w	8009b9c <__sinit_lock_release>
 8009bbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bc0:	6523      	str	r3, [r4, #80]	; 0x50
 8009bc2:	4b13      	ldr	r3, [pc, #76]	; (8009c10 <__sinit+0x68>)
 8009bc4:	4a13      	ldr	r2, [pc, #76]	; (8009c14 <__sinit+0x6c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bca:	42a3      	cmp	r3, r4
 8009bcc:	bf04      	itt	eq
 8009bce:	2301      	moveq	r3, #1
 8009bd0:	61a3      	streq	r3, [r4, #24]
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 f820 	bl	8009c18 <__sfp>
 8009bd8:	6060      	str	r0, [r4, #4]
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 f81c 	bl	8009c18 <__sfp>
 8009be0:	60a0      	str	r0, [r4, #8]
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 f818 	bl	8009c18 <__sfp>
 8009be8:	2200      	movs	r2, #0
 8009bea:	60e0      	str	r0, [r4, #12]
 8009bec:	2104      	movs	r1, #4
 8009bee:	6860      	ldr	r0, [r4, #4]
 8009bf0:	f7ff ff82 	bl	8009af8 <std>
 8009bf4:	68a0      	ldr	r0, [r4, #8]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	2109      	movs	r1, #9
 8009bfa:	f7ff ff7d 	bl	8009af8 <std>
 8009bfe:	68e0      	ldr	r0, [r4, #12]
 8009c00:	2202      	movs	r2, #2
 8009c02:	2112      	movs	r1, #18
 8009c04:	f7ff ff78 	bl	8009af8 <std>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	61a3      	str	r3, [r4, #24]
 8009c0c:	e7d2      	b.n	8009bb4 <__sinit+0xc>
 8009c0e:	bf00      	nop
 8009c10:	0800bdcc 	.word	0x0800bdcc
 8009c14:	08009b41 	.word	0x08009b41

08009c18 <__sfp>:
 8009c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	f7ff ffac 	bl	8009b78 <__sfp_lock_acquire>
 8009c20:	4b1e      	ldr	r3, [pc, #120]	; (8009c9c <__sfp+0x84>)
 8009c22:	681e      	ldr	r6, [r3, #0]
 8009c24:	69b3      	ldr	r3, [r6, #24]
 8009c26:	b913      	cbnz	r3, 8009c2e <__sfp+0x16>
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff ffbd 	bl	8009ba8 <__sinit>
 8009c2e:	3648      	adds	r6, #72	; 0x48
 8009c30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c34:	3b01      	subs	r3, #1
 8009c36:	d503      	bpl.n	8009c40 <__sfp+0x28>
 8009c38:	6833      	ldr	r3, [r6, #0]
 8009c3a:	b30b      	cbz	r3, 8009c80 <__sfp+0x68>
 8009c3c:	6836      	ldr	r6, [r6, #0]
 8009c3e:	e7f7      	b.n	8009c30 <__sfp+0x18>
 8009c40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c44:	b9d5      	cbnz	r5, 8009c7c <__sfp+0x64>
 8009c46:	4b16      	ldr	r3, [pc, #88]	; (8009ca0 <__sfp+0x88>)
 8009c48:	60e3      	str	r3, [r4, #12]
 8009c4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c4e:	6665      	str	r5, [r4, #100]	; 0x64
 8009c50:	f000 f86c 	bl	8009d2c <__retarget_lock_init_recursive>
 8009c54:	f7ff ff96 	bl	8009b84 <__sfp_lock_release>
 8009c58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c60:	6025      	str	r5, [r4, #0]
 8009c62:	61a5      	str	r5, [r4, #24]
 8009c64:	2208      	movs	r2, #8
 8009c66:	4629      	mov	r1, r5
 8009c68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c6c:	f000 f86f 	bl	8009d4e <memset>
 8009c70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c78:	4620      	mov	r0, r4
 8009c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c7c:	3468      	adds	r4, #104	; 0x68
 8009c7e:	e7d9      	b.n	8009c34 <__sfp+0x1c>
 8009c80:	2104      	movs	r1, #4
 8009c82:	4638      	mov	r0, r7
 8009c84:	f7ff ff62 	bl	8009b4c <__sfmoreglue>
 8009c88:	4604      	mov	r4, r0
 8009c8a:	6030      	str	r0, [r6, #0]
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d1d5      	bne.n	8009c3c <__sfp+0x24>
 8009c90:	f7ff ff78 	bl	8009b84 <__sfp_lock_release>
 8009c94:	230c      	movs	r3, #12
 8009c96:	603b      	str	r3, [r7, #0]
 8009c98:	e7ee      	b.n	8009c78 <__sfp+0x60>
 8009c9a:	bf00      	nop
 8009c9c:	0800bdcc 	.word	0x0800bdcc
 8009ca0:	ffff0001 	.word	0xffff0001

08009ca4 <_fwalk_reent>:
 8009ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca8:	4606      	mov	r6, r0
 8009caa:	4688      	mov	r8, r1
 8009cac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cb0:	2700      	movs	r7, #0
 8009cb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cb6:	f1b9 0901 	subs.w	r9, r9, #1
 8009cba:	d505      	bpl.n	8009cc8 <_fwalk_reent+0x24>
 8009cbc:	6824      	ldr	r4, [r4, #0]
 8009cbe:	2c00      	cmp	r4, #0
 8009cc0:	d1f7      	bne.n	8009cb2 <_fwalk_reent+0xe>
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cc8:	89ab      	ldrh	r3, [r5, #12]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d907      	bls.n	8009cde <_fwalk_reent+0x3a>
 8009cce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	d003      	beq.n	8009cde <_fwalk_reent+0x3a>
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4630      	mov	r0, r6
 8009cda:	47c0      	blx	r8
 8009cdc:	4307      	orrs	r7, r0
 8009cde:	3568      	adds	r5, #104	; 0x68
 8009ce0:	e7e9      	b.n	8009cb6 <_fwalk_reent+0x12>
	...

08009ce4 <__libc_init_array>:
 8009ce4:	b570      	push	{r4, r5, r6, lr}
 8009ce6:	4d0d      	ldr	r5, [pc, #52]	; (8009d1c <__libc_init_array+0x38>)
 8009ce8:	4c0d      	ldr	r4, [pc, #52]	; (8009d20 <__libc_init_array+0x3c>)
 8009cea:	1b64      	subs	r4, r4, r5
 8009cec:	10a4      	asrs	r4, r4, #2
 8009cee:	2600      	movs	r6, #0
 8009cf0:	42a6      	cmp	r6, r4
 8009cf2:	d109      	bne.n	8009d08 <__libc_init_array+0x24>
 8009cf4:	4d0b      	ldr	r5, [pc, #44]	; (8009d24 <__libc_init_array+0x40>)
 8009cf6:	4c0c      	ldr	r4, [pc, #48]	; (8009d28 <__libc_init_array+0x44>)
 8009cf8:	f001 ff90 	bl	800bc1c <_init>
 8009cfc:	1b64      	subs	r4, r4, r5
 8009cfe:	10a4      	asrs	r4, r4, #2
 8009d00:	2600      	movs	r6, #0
 8009d02:	42a6      	cmp	r6, r4
 8009d04:	d105      	bne.n	8009d12 <__libc_init_array+0x2e>
 8009d06:	bd70      	pop	{r4, r5, r6, pc}
 8009d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d0c:	4798      	blx	r3
 8009d0e:	3601      	adds	r6, #1
 8009d10:	e7ee      	b.n	8009cf0 <__libc_init_array+0xc>
 8009d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d16:	4798      	blx	r3
 8009d18:	3601      	adds	r6, #1
 8009d1a:	e7f2      	b.n	8009d02 <__libc_init_array+0x1e>
 8009d1c:	0800be40 	.word	0x0800be40
 8009d20:	0800be40 	.word	0x0800be40
 8009d24:	0800be40 	.word	0x0800be40
 8009d28:	0800be44 	.word	0x0800be44

08009d2c <__retarget_lock_init_recursive>:
 8009d2c:	4770      	bx	lr

08009d2e <__retarget_lock_acquire_recursive>:
 8009d2e:	4770      	bx	lr

08009d30 <__retarget_lock_release_recursive>:
 8009d30:	4770      	bx	lr

08009d32 <memcpy>:
 8009d32:	440a      	add	r2, r1
 8009d34:	4291      	cmp	r1, r2
 8009d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d3a:	d100      	bne.n	8009d3e <memcpy+0xc>
 8009d3c:	4770      	bx	lr
 8009d3e:	b510      	push	{r4, lr}
 8009d40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d48:	4291      	cmp	r1, r2
 8009d4a:	d1f9      	bne.n	8009d40 <memcpy+0xe>
 8009d4c:	bd10      	pop	{r4, pc}

08009d4e <memset>:
 8009d4e:	4402      	add	r2, r0
 8009d50:	4603      	mov	r3, r0
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d100      	bne.n	8009d58 <memset+0xa>
 8009d56:	4770      	bx	lr
 8009d58:	f803 1b01 	strb.w	r1, [r3], #1
 8009d5c:	e7f9      	b.n	8009d52 <memset+0x4>
	...

08009d60 <sbrk_aligned>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	4e0e      	ldr	r6, [pc, #56]	; (8009d9c <sbrk_aligned+0x3c>)
 8009d64:	460c      	mov	r4, r1
 8009d66:	6831      	ldr	r1, [r6, #0]
 8009d68:	4605      	mov	r5, r0
 8009d6a:	b911      	cbnz	r1, 8009d72 <sbrk_aligned+0x12>
 8009d6c:	f000 f984 	bl	800a078 <_sbrk_r>
 8009d70:	6030      	str	r0, [r6, #0]
 8009d72:	4621      	mov	r1, r4
 8009d74:	4628      	mov	r0, r5
 8009d76:	f000 f97f 	bl	800a078 <_sbrk_r>
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	d00a      	beq.n	8009d94 <sbrk_aligned+0x34>
 8009d7e:	1cc4      	adds	r4, r0, #3
 8009d80:	f024 0403 	bic.w	r4, r4, #3
 8009d84:	42a0      	cmp	r0, r4
 8009d86:	d007      	beq.n	8009d98 <sbrk_aligned+0x38>
 8009d88:	1a21      	subs	r1, r4, r0
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f000 f974 	bl	800a078 <_sbrk_r>
 8009d90:	3001      	adds	r0, #1
 8009d92:	d101      	bne.n	8009d98 <sbrk_aligned+0x38>
 8009d94:	f04f 34ff 	mov.w	r4, #4294967295
 8009d98:	4620      	mov	r0, r4
 8009d9a:	bd70      	pop	{r4, r5, r6, pc}
 8009d9c:	20004d5c 	.word	0x20004d5c

08009da0 <_malloc_r>:
 8009da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da4:	1ccd      	adds	r5, r1, #3
 8009da6:	f025 0503 	bic.w	r5, r5, #3
 8009daa:	3508      	adds	r5, #8
 8009dac:	2d0c      	cmp	r5, #12
 8009dae:	bf38      	it	cc
 8009db0:	250c      	movcc	r5, #12
 8009db2:	2d00      	cmp	r5, #0
 8009db4:	4607      	mov	r7, r0
 8009db6:	db01      	blt.n	8009dbc <_malloc_r+0x1c>
 8009db8:	42a9      	cmp	r1, r5
 8009dba:	d905      	bls.n	8009dc8 <_malloc_r+0x28>
 8009dbc:	230c      	movs	r3, #12
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	2600      	movs	r6, #0
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc8:	4e2e      	ldr	r6, [pc, #184]	; (8009e84 <_malloc_r+0xe4>)
 8009dca:	f000 fc93 	bl	800a6f4 <__malloc_lock>
 8009dce:	6833      	ldr	r3, [r6, #0]
 8009dd0:	461c      	mov	r4, r3
 8009dd2:	bb34      	cbnz	r4, 8009e22 <_malloc_r+0x82>
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f7ff ffc2 	bl	8009d60 <sbrk_aligned>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	4604      	mov	r4, r0
 8009de0:	d14d      	bne.n	8009e7e <_malloc_r+0xde>
 8009de2:	6834      	ldr	r4, [r6, #0]
 8009de4:	4626      	mov	r6, r4
 8009de6:	2e00      	cmp	r6, #0
 8009de8:	d140      	bne.n	8009e6c <_malloc_r+0xcc>
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	4631      	mov	r1, r6
 8009dee:	4638      	mov	r0, r7
 8009df0:	eb04 0803 	add.w	r8, r4, r3
 8009df4:	f000 f940 	bl	800a078 <_sbrk_r>
 8009df8:	4580      	cmp	r8, r0
 8009dfa:	d13a      	bne.n	8009e72 <_malloc_r+0xd2>
 8009dfc:	6821      	ldr	r1, [r4, #0]
 8009dfe:	3503      	adds	r5, #3
 8009e00:	1a6d      	subs	r5, r5, r1
 8009e02:	f025 0503 	bic.w	r5, r5, #3
 8009e06:	3508      	adds	r5, #8
 8009e08:	2d0c      	cmp	r5, #12
 8009e0a:	bf38      	it	cc
 8009e0c:	250c      	movcc	r5, #12
 8009e0e:	4629      	mov	r1, r5
 8009e10:	4638      	mov	r0, r7
 8009e12:	f7ff ffa5 	bl	8009d60 <sbrk_aligned>
 8009e16:	3001      	adds	r0, #1
 8009e18:	d02b      	beq.n	8009e72 <_malloc_r+0xd2>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	442b      	add	r3, r5
 8009e1e:	6023      	str	r3, [r4, #0]
 8009e20:	e00e      	b.n	8009e40 <_malloc_r+0xa0>
 8009e22:	6822      	ldr	r2, [r4, #0]
 8009e24:	1b52      	subs	r2, r2, r5
 8009e26:	d41e      	bmi.n	8009e66 <_malloc_r+0xc6>
 8009e28:	2a0b      	cmp	r2, #11
 8009e2a:	d916      	bls.n	8009e5a <_malloc_r+0xba>
 8009e2c:	1961      	adds	r1, r4, r5
 8009e2e:	42a3      	cmp	r3, r4
 8009e30:	6025      	str	r5, [r4, #0]
 8009e32:	bf18      	it	ne
 8009e34:	6059      	strne	r1, [r3, #4]
 8009e36:	6863      	ldr	r3, [r4, #4]
 8009e38:	bf08      	it	eq
 8009e3a:	6031      	streq	r1, [r6, #0]
 8009e3c:	5162      	str	r2, [r4, r5]
 8009e3e:	604b      	str	r3, [r1, #4]
 8009e40:	4638      	mov	r0, r7
 8009e42:	f104 060b 	add.w	r6, r4, #11
 8009e46:	f000 fc5b 	bl	800a700 <__malloc_unlock>
 8009e4a:	f026 0607 	bic.w	r6, r6, #7
 8009e4e:	1d23      	adds	r3, r4, #4
 8009e50:	1af2      	subs	r2, r6, r3
 8009e52:	d0b6      	beq.n	8009dc2 <_malloc_r+0x22>
 8009e54:	1b9b      	subs	r3, r3, r6
 8009e56:	50a3      	str	r3, [r4, r2]
 8009e58:	e7b3      	b.n	8009dc2 <_malloc_r+0x22>
 8009e5a:	6862      	ldr	r2, [r4, #4]
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	bf0c      	ite	eq
 8009e60:	6032      	streq	r2, [r6, #0]
 8009e62:	605a      	strne	r2, [r3, #4]
 8009e64:	e7ec      	b.n	8009e40 <_malloc_r+0xa0>
 8009e66:	4623      	mov	r3, r4
 8009e68:	6864      	ldr	r4, [r4, #4]
 8009e6a:	e7b2      	b.n	8009dd2 <_malloc_r+0x32>
 8009e6c:	4634      	mov	r4, r6
 8009e6e:	6876      	ldr	r6, [r6, #4]
 8009e70:	e7b9      	b.n	8009de6 <_malloc_r+0x46>
 8009e72:	230c      	movs	r3, #12
 8009e74:	603b      	str	r3, [r7, #0]
 8009e76:	4638      	mov	r0, r7
 8009e78:	f000 fc42 	bl	800a700 <__malloc_unlock>
 8009e7c:	e7a1      	b.n	8009dc2 <_malloc_r+0x22>
 8009e7e:	6025      	str	r5, [r4, #0]
 8009e80:	e7de      	b.n	8009e40 <_malloc_r+0xa0>
 8009e82:	bf00      	nop
 8009e84:	20004d58 	.word	0x20004d58

08009e88 <iprintf>:
 8009e88:	b40f      	push	{r0, r1, r2, r3}
 8009e8a:	4b0a      	ldr	r3, [pc, #40]	; (8009eb4 <iprintf+0x2c>)
 8009e8c:	b513      	push	{r0, r1, r4, lr}
 8009e8e:	681c      	ldr	r4, [r3, #0]
 8009e90:	b124      	cbz	r4, 8009e9c <iprintf+0x14>
 8009e92:	69a3      	ldr	r3, [r4, #24]
 8009e94:	b913      	cbnz	r3, 8009e9c <iprintf+0x14>
 8009e96:	4620      	mov	r0, r4
 8009e98:	f7ff fe86 	bl	8009ba8 <__sinit>
 8009e9c:	ab05      	add	r3, sp, #20
 8009e9e:	9a04      	ldr	r2, [sp, #16]
 8009ea0:	68a1      	ldr	r1, [r4, #8]
 8009ea2:	9301      	str	r3, [sp, #4]
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f000 fca7 	bl	800a7f8 <_vfiprintf_r>
 8009eaa:	b002      	add	sp, #8
 8009eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb0:	b004      	add	sp, #16
 8009eb2:	4770      	bx	lr
 8009eb4:	20000010 	.word	0x20000010

08009eb8 <_puts_r>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	460e      	mov	r6, r1
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	b118      	cbz	r0, 8009ec8 <_puts_r+0x10>
 8009ec0:	6983      	ldr	r3, [r0, #24]
 8009ec2:	b90b      	cbnz	r3, 8009ec8 <_puts_r+0x10>
 8009ec4:	f7ff fe70 	bl	8009ba8 <__sinit>
 8009ec8:	69ab      	ldr	r3, [r5, #24]
 8009eca:	68ac      	ldr	r4, [r5, #8]
 8009ecc:	b913      	cbnz	r3, 8009ed4 <_puts_r+0x1c>
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f7ff fe6a 	bl	8009ba8 <__sinit>
 8009ed4:	4b2c      	ldr	r3, [pc, #176]	; (8009f88 <_puts_r+0xd0>)
 8009ed6:	429c      	cmp	r4, r3
 8009ed8:	d120      	bne.n	8009f1c <_puts_r+0x64>
 8009eda:	686c      	ldr	r4, [r5, #4]
 8009edc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ede:	07db      	lsls	r3, r3, #31
 8009ee0:	d405      	bmi.n	8009eee <_puts_r+0x36>
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	0598      	lsls	r0, r3, #22
 8009ee6:	d402      	bmi.n	8009eee <_puts_r+0x36>
 8009ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eea:	f7ff ff20 	bl	8009d2e <__retarget_lock_acquire_recursive>
 8009eee:	89a3      	ldrh	r3, [r4, #12]
 8009ef0:	0719      	lsls	r1, r3, #28
 8009ef2:	d51d      	bpl.n	8009f30 <_puts_r+0x78>
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	b1db      	cbz	r3, 8009f30 <_puts_r+0x78>
 8009ef8:	3e01      	subs	r6, #1
 8009efa:	68a3      	ldr	r3, [r4, #8]
 8009efc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f00:	3b01      	subs	r3, #1
 8009f02:	60a3      	str	r3, [r4, #8]
 8009f04:	bb39      	cbnz	r1, 8009f56 <_puts_r+0x9e>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da38      	bge.n	8009f7c <_puts_r+0xc4>
 8009f0a:	4622      	mov	r2, r4
 8009f0c:	210a      	movs	r1, #10
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f000 f9cc 	bl	800a2ac <__swbuf_r>
 8009f14:	3001      	adds	r0, #1
 8009f16:	d011      	beq.n	8009f3c <_puts_r+0x84>
 8009f18:	250a      	movs	r5, #10
 8009f1a:	e011      	b.n	8009f40 <_puts_r+0x88>
 8009f1c:	4b1b      	ldr	r3, [pc, #108]	; (8009f8c <_puts_r+0xd4>)
 8009f1e:	429c      	cmp	r4, r3
 8009f20:	d101      	bne.n	8009f26 <_puts_r+0x6e>
 8009f22:	68ac      	ldr	r4, [r5, #8]
 8009f24:	e7da      	b.n	8009edc <_puts_r+0x24>
 8009f26:	4b1a      	ldr	r3, [pc, #104]	; (8009f90 <_puts_r+0xd8>)
 8009f28:	429c      	cmp	r4, r3
 8009f2a:	bf08      	it	eq
 8009f2c:	68ec      	ldreq	r4, [r5, #12]
 8009f2e:	e7d5      	b.n	8009edc <_puts_r+0x24>
 8009f30:	4621      	mov	r1, r4
 8009f32:	4628      	mov	r0, r5
 8009f34:	f000 fa1e 	bl	800a374 <__swsetup_r>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d0dd      	beq.n	8009ef8 <_puts_r+0x40>
 8009f3c:	f04f 35ff 	mov.w	r5, #4294967295
 8009f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f42:	07da      	lsls	r2, r3, #31
 8009f44:	d405      	bmi.n	8009f52 <_puts_r+0x9a>
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	059b      	lsls	r3, r3, #22
 8009f4a:	d402      	bmi.n	8009f52 <_puts_r+0x9a>
 8009f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f4e:	f7ff feef 	bl	8009d30 <__retarget_lock_release_recursive>
 8009f52:	4628      	mov	r0, r5
 8009f54:	bd70      	pop	{r4, r5, r6, pc}
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	da04      	bge.n	8009f64 <_puts_r+0xac>
 8009f5a:	69a2      	ldr	r2, [r4, #24]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	dc06      	bgt.n	8009f6e <_puts_r+0xb6>
 8009f60:	290a      	cmp	r1, #10
 8009f62:	d004      	beq.n	8009f6e <_puts_r+0xb6>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	6022      	str	r2, [r4, #0]
 8009f6a:	7019      	strb	r1, [r3, #0]
 8009f6c:	e7c5      	b.n	8009efa <_puts_r+0x42>
 8009f6e:	4622      	mov	r2, r4
 8009f70:	4628      	mov	r0, r5
 8009f72:	f000 f99b 	bl	800a2ac <__swbuf_r>
 8009f76:	3001      	adds	r0, #1
 8009f78:	d1bf      	bne.n	8009efa <_puts_r+0x42>
 8009f7a:	e7df      	b.n	8009f3c <_puts_r+0x84>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	250a      	movs	r5, #10
 8009f80:	1c5a      	adds	r2, r3, #1
 8009f82:	6022      	str	r2, [r4, #0]
 8009f84:	701d      	strb	r5, [r3, #0]
 8009f86:	e7db      	b.n	8009f40 <_puts_r+0x88>
 8009f88:	0800bd8c 	.word	0x0800bd8c
 8009f8c:	0800bdac 	.word	0x0800bdac
 8009f90:	0800bd6c 	.word	0x0800bd6c

08009f94 <puts>:
 8009f94:	4b02      	ldr	r3, [pc, #8]	; (8009fa0 <puts+0xc>)
 8009f96:	4601      	mov	r1, r0
 8009f98:	6818      	ldr	r0, [r3, #0]
 8009f9a:	f7ff bf8d 	b.w	8009eb8 <_puts_r>
 8009f9e:	bf00      	nop
 8009fa0:	20000010 	.word	0x20000010

08009fa4 <cleanup_glue>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	6809      	ldr	r1, [r1, #0]
 8009faa:	4605      	mov	r5, r0
 8009fac:	b109      	cbz	r1, 8009fb2 <cleanup_glue+0xe>
 8009fae:	f7ff fff9 	bl	8009fa4 <cleanup_glue>
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fba:	f000 bba7 	b.w	800a70c <_free_r>
	...

08009fc0 <_reclaim_reent>:
 8009fc0:	4b2c      	ldr	r3, [pc, #176]	; (800a074 <_reclaim_reent+0xb4>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4283      	cmp	r3, r0
 8009fc6:	b570      	push	{r4, r5, r6, lr}
 8009fc8:	4604      	mov	r4, r0
 8009fca:	d051      	beq.n	800a070 <_reclaim_reent+0xb0>
 8009fcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009fce:	b143      	cbz	r3, 8009fe2 <_reclaim_reent+0x22>
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d14a      	bne.n	800a06c <_reclaim_reent+0xac>
 8009fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fd8:	6819      	ldr	r1, [r3, #0]
 8009fda:	b111      	cbz	r1, 8009fe2 <_reclaim_reent+0x22>
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f000 fb95 	bl	800a70c <_free_r>
 8009fe2:	6961      	ldr	r1, [r4, #20]
 8009fe4:	b111      	cbz	r1, 8009fec <_reclaim_reent+0x2c>
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 fb90 	bl	800a70c <_free_r>
 8009fec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009fee:	b111      	cbz	r1, 8009ff6 <_reclaim_reent+0x36>
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 fb8b 	bl	800a70c <_free_r>
 8009ff6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ff8:	b111      	cbz	r1, 800a000 <_reclaim_reent+0x40>
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 fb86 	bl	800a70c <_free_r>
 800a000:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a002:	b111      	cbz	r1, 800a00a <_reclaim_reent+0x4a>
 800a004:	4620      	mov	r0, r4
 800a006:	f000 fb81 	bl	800a70c <_free_r>
 800a00a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a00c:	b111      	cbz	r1, 800a014 <_reclaim_reent+0x54>
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 fb7c 	bl	800a70c <_free_r>
 800a014:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a016:	b111      	cbz	r1, 800a01e <_reclaim_reent+0x5e>
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 fb77 	bl	800a70c <_free_r>
 800a01e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a020:	b111      	cbz	r1, 800a028 <_reclaim_reent+0x68>
 800a022:	4620      	mov	r0, r4
 800a024:	f000 fb72 	bl	800a70c <_free_r>
 800a028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a02a:	b111      	cbz	r1, 800a032 <_reclaim_reent+0x72>
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 fb6d 	bl	800a70c <_free_r>
 800a032:	69a3      	ldr	r3, [r4, #24]
 800a034:	b1e3      	cbz	r3, 800a070 <_reclaim_reent+0xb0>
 800a036:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a038:	4620      	mov	r0, r4
 800a03a:	4798      	blx	r3
 800a03c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a03e:	b1b9      	cbz	r1, 800a070 <_reclaim_reent+0xb0>
 800a040:	4620      	mov	r0, r4
 800a042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a046:	f7ff bfad 	b.w	8009fa4 <cleanup_glue>
 800a04a:	5949      	ldr	r1, [r1, r5]
 800a04c:	b941      	cbnz	r1, 800a060 <_reclaim_reent+0xa0>
 800a04e:	3504      	adds	r5, #4
 800a050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a052:	2d80      	cmp	r5, #128	; 0x80
 800a054:	68d9      	ldr	r1, [r3, #12]
 800a056:	d1f8      	bne.n	800a04a <_reclaim_reent+0x8a>
 800a058:	4620      	mov	r0, r4
 800a05a:	f000 fb57 	bl	800a70c <_free_r>
 800a05e:	e7ba      	b.n	8009fd6 <_reclaim_reent+0x16>
 800a060:	680e      	ldr	r6, [r1, #0]
 800a062:	4620      	mov	r0, r4
 800a064:	f000 fb52 	bl	800a70c <_free_r>
 800a068:	4631      	mov	r1, r6
 800a06a:	e7ef      	b.n	800a04c <_reclaim_reent+0x8c>
 800a06c:	2500      	movs	r5, #0
 800a06e:	e7ef      	b.n	800a050 <_reclaim_reent+0x90>
 800a070:	bd70      	pop	{r4, r5, r6, pc}
 800a072:	bf00      	nop
 800a074:	20000010 	.word	0x20000010

0800a078 <_sbrk_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4d06      	ldr	r5, [pc, #24]	; (800a094 <_sbrk_r+0x1c>)
 800a07c:	2300      	movs	r3, #0
 800a07e:	4604      	mov	r4, r0
 800a080:	4608      	mov	r0, r1
 800a082:	602b      	str	r3, [r5, #0]
 800a084:	f7f8 fb00 	bl	8002688 <_sbrk>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_sbrk_r+0x1a>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_sbrk_r+0x1a>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	20004d60 	.word	0x20004d60

0800a098 <setvbuf>:
 800a098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a09c:	461d      	mov	r5, r3
 800a09e:	4b5d      	ldr	r3, [pc, #372]	; (800a214 <setvbuf+0x17c>)
 800a0a0:	681f      	ldr	r7, [r3, #0]
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	460e      	mov	r6, r1
 800a0a6:	4690      	mov	r8, r2
 800a0a8:	b127      	cbz	r7, 800a0b4 <setvbuf+0x1c>
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	b913      	cbnz	r3, 800a0b4 <setvbuf+0x1c>
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	f7ff fd7a 	bl	8009ba8 <__sinit>
 800a0b4:	4b58      	ldr	r3, [pc, #352]	; (800a218 <setvbuf+0x180>)
 800a0b6:	429c      	cmp	r4, r3
 800a0b8:	d167      	bne.n	800a18a <setvbuf+0xf2>
 800a0ba:	687c      	ldr	r4, [r7, #4]
 800a0bc:	f1b8 0f02 	cmp.w	r8, #2
 800a0c0:	d006      	beq.n	800a0d0 <setvbuf+0x38>
 800a0c2:	f1b8 0f01 	cmp.w	r8, #1
 800a0c6:	f200 809f 	bhi.w	800a208 <setvbuf+0x170>
 800a0ca:	2d00      	cmp	r5, #0
 800a0cc:	f2c0 809c 	blt.w	800a208 <setvbuf+0x170>
 800a0d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0d2:	07db      	lsls	r3, r3, #31
 800a0d4:	d405      	bmi.n	800a0e2 <setvbuf+0x4a>
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	0598      	lsls	r0, r3, #22
 800a0da:	d402      	bmi.n	800a0e2 <setvbuf+0x4a>
 800a0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0de:	f7ff fe26 	bl	8009d2e <__retarget_lock_acquire_recursive>
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	f000 fa49 	bl	800a57c <_fflush_r>
 800a0ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ec:	b141      	cbz	r1, 800a100 <setvbuf+0x68>
 800a0ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0f2:	4299      	cmp	r1, r3
 800a0f4:	d002      	beq.n	800a0fc <setvbuf+0x64>
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	f000 fb08 	bl	800a70c <_free_r>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6363      	str	r3, [r4, #52]	; 0x34
 800a100:	2300      	movs	r3, #0
 800a102:	61a3      	str	r3, [r4, #24]
 800a104:	6063      	str	r3, [r4, #4]
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	0619      	lsls	r1, r3, #24
 800a10a:	d503      	bpl.n	800a114 <setvbuf+0x7c>
 800a10c:	6921      	ldr	r1, [r4, #16]
 800a10e:	4638      	mov	r0, r7
 800a110:	f000 fafc 	bl	800a70c <_free_r>
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a11a:	f023 0303 	bic.w	r3, r3, #3
 800a11e:	f1b8 0f02 	cmp.w	r8, #2
 800a122:	81a3      	strh	r3, [r4, #12]
 800a124:	d06c      	beq.n	800a200 <setvbuf+0x168>
 800a126:	ab01      	add	r3, sp, #4
 800a128:	466a      	mov	r2, sp
 800a12a:	4621      	mov	r1, r4
 800a12c:	4638      	mov	r0, r7
 800a12e:	f000 fa73 	bl	800a618 <__swhatbuf_r>
 800a132:	89a3      	ldrh	r3, [r4, #12]
 800a134:	4318      	orrs	r0, r3
 800a136:	81a0      	strh	r0, [r4, #12]
 800a138:	2d00      	cmp	r5, #0
 800a13a:	d130      	bne.n	800a19e <setvbuf+0x106>
 800a13c:	9d00      	ldr	r5, [sp, #0]
 800a13e:	4628      	mov	r0, r5
 800a140:	f000 fad0 	bl	800a6e4 <malloc>
 800a144:	4606      	mov	r6, r0
 800a146:	2800      	cmp	r0, #0
 800a148:	d155      	bne.n	800a1f6 <setvbuf+0x15e>
 800a14a:	f8dd 9000 	ldr.w	r9, [sp]
 800a14e:	45a9      	cmp	r9, r5
 800a150:	d14a      	bne.n	800a1e8 <setvbuf+0x150>
 800a152:	f04f 35ff 	mov.w	r5, #4294967295
 800a156:	2200      	movs	r2, #0
 800a158:	60a2      	str	r2, [r4, #8]
 800a15a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a15e:	6022      	str	r2, [r4, #0]
 800a160:	6122      	str	r2, [r4, #16]
 800a162:	2201      	movs	r2, #1
 800a164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a168:	6162      	str	r2, [r4, #20]
 800a16a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a16c:	f043 0302 	orr.w	r3, r3, #2
 800a170:	07d2      	lsls	r2, r2, #31
 800a172:	81a3      	strh	r3, [r4, #12]
 800a174:	d405      	bmi.n	800a182 <setvbuf+0xea>
 800a176:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a17a:	d102      	bne.n	800a182 <setvbuf+0xea>
 800a17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a17e:	f7ff fdd7 	bl	8009d30 <__retarget_lock_release_recursive>
 800a182:	4628      	mov	r0, r5
 800a184:	b003      	add	sp, #12
 800a186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a18a:	4b24      	ldr	r3, [pc, #144]	; (800a21c <setvbuf+0x184>)
 800a18c:	429c      	cmp	r4, r3
 800a18e:	d101      	bne.n	800a194 <setvbuf+0xfc>
 800a190:	68bc      	ldr	r4, [r7, #8]
 800a192:	e793      	b.n	800a0bc <setvbuf+0x24>
 800a194:	4b22      	ldr	r3, [pc, #136]	; (800a220 <setvbuf+0x188>)
 800a196:	429c      	cmp	r4, r3
 800a198:	bf08      	it	eq
 800a19a:	68fc      	ldreq	r4, [r7, #12]
 800a19c:	e78e      	b.n	800a0bc <setvbuf+0x24>
 800a19e:	2e00      	cmp	r6, #0
 800a1a0:	d0cd      	beq.n	800a13e <setvbuf+0xa6>
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	b913      	cbnz	r3, 800a1ac <setvbuf+0x114>
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f7ff fcfe 	bl	8009ba8 <__sinit>
 800a1ac:	f1b8 0f01 	cmp.w	r8, #1
 800a1b0:	bf08      	it	eq
 800a1b2:	89a3      	ldrheq	r3, [r4, #12]
 800a1b4:	6026      	str	r6, [r4, #0]
 800a1b6:	bf04      	itt	eq
 800a1b8:	f043 0301 	orreq.w	r3, r3, #1
 800a1bc:	81a3      	strheq	r3, [r4, #12]
 800a1be:	89a2      	ldrh	r2, [r4, #12]
 800a1c0:	f012 0308 	ands.w	r3, r2, #8
 800a1c4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a1c8:	d01c      	beq.n	800a204 <setvbuf+0x16c>
 800a1ca:	07d3      	lsls	r3, r2, #31
 800a1cc:	bf41      	itttt	mi
 800a1ce:	2300      	movmi	r3, #0
 800a1d0:	426d      	negmi	r5, r5
 800a1d2:	60a3      	strmi	r3, [r4, #8]
 800a1d4:	61a5      	strmi	r5, [r4, #24]
 800a1d6:	bf58      	it	pl
 800a1d8:	60a5      	strpl	r5, [r4, #8]
 800a1da:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a1dc:	f015 0501 	ands.w	r5, r5, #1
 800a1e0:	d115      	bne.n	800a20e <setvbuf+0x176>
 800a1e2:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a1e6:	e7c8      	b.n	800a17a <setvbuf+0xe2>
 800a1e8:	4648      	mov	r0, r9
 800a1ea:	f000 fa7b 	bl	800a6e4 <malloc>
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d0ae      	beq.n	800a152 <setvbuf+0xba>
 800a1f4:	464d      	mov	r5, r9
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1fc:	81a3      	strh	r3, [r4, #12]
 800a1fe:	e7d0      	b.n	800a1a2 <setvbuf+0x10a>
 800a200:	2500      	movs	r5, #0
 800a202:	e7a8      	b.n	800a156 <setvbuf+0xbe>
 800a204:	60a3      	str	r3, [r4, #8]
 800a206:	e7e8      	b.n	800a1da <setvbuf+0x142>
 800a208:	f04f 35ff 	mov.w	r5, #4294967295
 800a20c:	e7b9      	b.n	800a182 <setvbuf+0xea>
 800a20e:	2500      	movs	r5, #0
 800a210:	e7b7      	b.n	800a182 <setvbuf+0xea>
 800a212:	bf00      	nop
 800a214:	20000010 	.word	0x20000010
 800a218:	0800bd8c 	.word	0x0800bd8c
 800a21c:	0800bdac 	.word	0x0800bdac
 800a220:	0800bd6c 	.word	0x0800bd6c

0800a224 <__sread>:
 800a224:	b510      	push	{r4, lr}
 800a226:	460c      	mov	r4, r1
 800a228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22c:	f000 fda8 	bl	800ad80 <_read_r>
 800a230:	2800      	cmp	r0, #0
 800a232:	bfab      	itete	ge
 800a234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a236:	89a3      	ldrhlt	r3, [r4, #12]
 800a238:	181b      	addge	r3, r3, r0
 800a23a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a23e:	bfac      	ite	ge
 800a240:	6563      	strge	r3, [r4, #84]	; 0x54
 800a242:	81a3      	strhlt	r3, [r4, #12]
 800a244:	bd10      	pop	{r4, pc}

0800a246 <__swrite>:
 800a246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a24a:	461f      	mov	r7, r3
 800a24c:	898b      	ldrh	r3, [r1, #12]
 800a24e:	05db      	lsls	r3, r3, #23
 800a250:	4605      	mov	r5, r0
 800a252:	460c      	mov	r4, r1
 800a254:	4616      	mov	r6, r2
 800a256:	d505      	bpl.n	800a264 <__swrite+0x1e>
 800a258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a25c:	2302      	movs	r3, #2
 800a25e:	2200      	movs	r2, #0
 800a260:	f000 f9c8 	bl	800a5f4 <_lseek_r>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	4632      	mov	r2, r6
 800a272:	463b      	mov	r3, r7
 800a274:	4628      	mov	r0, r5
 800a276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a27a:	f000 b869 	b.w	800a350 <_write_r>

0800a27e <__sseek>:
 800a27e:	b510      	push	{r4, lr}
 800a280:	460c      	mov	r4, r1
 800a282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a286:	f000 f9b5 	bl	800a5f4 <_lseek_r>
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	bf15      	itete	ne
 800a290:	6560      	strne	r0, [r4, #84]	; 0x54
 800a292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a29a:	81a3      	strheq	r3, [r4, #12]
 800a29c:	bf18      	it	ne
 800a29e:	81a3      	strhne	r3, [r4, #12]
 800a2a0:	bd10      	pop	{r4, pc}

0800a2a2 <__sclose>:
 800a2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a6:	f000 b8d3 	b.w	800a450 <_close_r>
	...

0800a2ac <__swbuf_r>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	460e      	mov	r6, r1
 800a2b0:	4614      	mov	r4, r2
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	b118      	cbz	r0, 800a2be <__swbuf_r+0x12>
 800a2b6:	6983      	ldr	r3, [r0, #24]
 800a2b8:	b90b      	cbnz	r3, 800a2be <__swbuf_r+0x12>
 800a2ba:	f7ff fc75 	bl	8009ba8 <__sinit>
 800a2be:	4b21      	ldr	r3, [pc, #132]	; (800a344 <__swbuf_r+0x98>)
 800a2c0:	429c      	cmp	r4, r3
 800a2c2:	d12b      	bne.n	800a31c <__swbuf_r+0x70>
 800a2c4:	686c      	ldr	r4, [r5, #4]
 800a2c6:	69a3      	ldr	r3, [r4, #24]
 800a2c8:	60a3      	str	r3, [r4, #8]
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	071a      	lsls	r2, r3, #28
 800a2ce:	d52f      	bpl.n	800a330 <__swbuf_r+0x84>
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	b36b      	cbz	r3, 800a330 <__swbuf_r+0x84>
 800a2d4:	6923      	ldr	r3, [r4, #16]
 800a2d6:	6820      	ldr	r0, [r4, #0]
 800a2d8:	1ac0      	subs	r0, r0, r3
 800a2da:	6963      	ldr	r3, [r4, #20]
 800a2dc:	b2f6      	uxtb	r6, r6
 800a2de:	4283      	cmp	r3, r0
 800a2e0:	4637      	mov	r7, r6
 800a2e2:	dc04      	bgt.n	800a2ee <__swbuf_r+0x42>
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f000 f948 	bl	800a57c <_fflush_r>
 800a2ec:	bb30      	cbnz	r0, 800a33c <__swbuf_r+0x90>
 800a2ee:	68a3      	ldr	r3, [r4, #8]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	60a3      	str	r3, [r4, #8]
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	6022      	str	r2, [r4, #0]
 800a2fa:	701e      	strb	r6, [r3, #0]
 800a2fc:	6963      	ldr	r3, [r4, #20]
 800a2fe:	3001      	adds	r0, #1
 800a300:	4283      	cmp	r3, r0
 800a302:	d004      	beq.n	800a30e <__swbuf_r+0x62>
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	07db      	lsls	r3, r3, #31
 800a308:	d506      	bpl.n	800a318 <__swbuf_r+0x6c>
 800a30a:	2e0a      	cmp	r6, #10
 800a30c:	d104      	bne.n	800a318 <__swbuf_r+0x6c>
 800a30e:	4621      	mov	r1, r4
 800a310:	4628      	mov	r0, r5
 800a312:	f000 f933 	bl	800a57c <_fflush_r>
 800a316:	b988      	cbnz	r0, 800a33c <__swbuf_r+0x90>
 800a318:	4638      	mov	r0, r7
 800a31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a31c:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <__swbuf_r+0x9c>)
 800a31e:	429c      	cmp	r4, r3
 800a320:	d101      	bne.n	800a326 <__swbuf_r+0x7a>
 800a322:	68ac      	ldr	r4, [r5, #8]
 800a324:	e7cf      	b.n	800a2c6 <__swbuf_r+0x1a>
 800a326:	4b09      	ldr	r3, [pc, #36]	; (800a34c <__swbuf_r+0xa0>)
 800a328:	429c      	cmp	r4, r3
 800a32a:	bf08      	it	eq
 800a32c:	68ec      	ldreq	r4, [r5, #12]
 800a32e:	e7ca      	b.n	800a2c6 <__swbuf_r+0x1a>
 800a330:	4621      	mov	r1, r4
 800a332:	4628      	mov	r0, r5
 800a334:	f000 f81e 	bl	800a374 <__swsetup_r>
 800a338:	2800      	cmp	r0, #0
 800a33a:	d0cb      	beq.n	800a2d4 <__swbuf_r+0x28>
 800a33c:	f04f 37ff 	mov.w	r7, #4294967295
 800a340:	e7ea      	b.n	800a318 <__swbuf_r+0x6c>
 800a342:	bf00      	nop
 800a344:	0800bd8c 	.word	0x0800bd8c
 800a348:	0800bdac 	.word	0x0800bdac
 800a34c:	0800bd6c 	.word	0x0800bd6c

0800a350 <_write_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4d07      	ldr	r5, [pc, #28]	; (800a370 <_write_r+0x20>)
 800a354:	4604      	mov	r4, r0
 800a356:	4608      	mov	r0, r1
 800a358:	4611      	mov	r1, r2
 800a35a:	2200      	movs	r2, #0
 800a35c:	602a      	str	r2, [r5, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	f7f7 f844 	bl	80013ec <_write>
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d102      	bne.n	800a36e <_write_r+0x1e>
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	b103      	cbz	r3, 800a36e <_write_r+0x1e>
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
 800a370:	20004d60 	.word	0x20004d60

0800a374 <__swsetup_r>:
 800a374:	4b32      	ldr	r3, [pc, #200]	; (800a440 <__swsetup_r+0xcc>)
 800a376:	b570      	push	{r4, r5, r6, lr}
 800a378:	681d      	ldr	r5, [r3, #0]
 800a37a:	4606      	mov	r6, r0
 800a37c:	460c      	mov	r4, r1
 800a37e:	b125      	cbz	r5, 800a38a <__swsetup_r+0x16>
 800a380:	69ab      	ldr	r3, [r5, #24]
 800a382:	b913      	cbnz	r3, 800a38a <__swsetup_r+0x16>
 800a384:	4628      	mov	r0, r5
 800a386:	f7ff fc0f 	bl	8009ba8 <__sinit>
 800a38a:	4b2e      	ldr	r3, [pc, #184]	; (800a444 <__swsetup_r+0xd0>)
 800a38c:	429c      	cmp	r4, r3
 800a38e:	d10f      	bne.n	800a3b0 <__swsetup_r+0x3c>
 800a390:	686c      	ldr	r4, [r5, #4]
 800a392:	89a3      	ldrh	r3, [r4, #12]
 800a394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a398:	0719      	lsls	r1, r3, #28
 800a39a:	d42c      	bmi.n	800a3f6 <__swsetup_r+0x82>
 800a39c:	06dd      	lsls	r5, r3, #27
 800a39e:	d411      	bmi.n	800a3c4 <__swsetup_r+0x50>
 800a3a0:	2309      	movs	r3, #9
 800a3a2:	6033      	str	r3, [r6, #0]
 800a3a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3a8:	81a3      	strh	r3, [r4, #12]
 800a3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ae:	e03e      	b.n	800a42e <__swsetup_r+0xba>
 800a3b0:	4b25      	ldr	r3, [pc, #148]	; (800a448 <__swsetup_r+0xd4>)
 800a3b2:	429c      	cmp	r4, r3
 800a3b4:	d101      	bne.n	800a3ba <__swsetup_r+0x46>
 800a3b6:	68ac      	ldr	r4, [r5, #8]
 800a3b8:	e7eb      	b.n	800a392 <__swsetup_r+0x1e>
 800a3ba:	4b24      	ldr	r3, [pc, #144]	; (800a44c <__swsetup_r+0xd8>)
 800a3bc:	429c      	cmp	r4, r3
 800a3be:	bf08      	it	eq
 800a3c0:	68ec      	ldreq	r4, [r5, #12]
 800a3c2:	e7e6      	b.n	800a392 <__swsetup_r+0x1e>
 800a3c4:	0758      	lsls	r0, r3, #29
 800a3c6:	d512      	bpl.n	800a3ee <__swsetup_r+0x7a>
 800a3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3ca:	b141      	cbz	r1, 800a3de <__swsetup_r+0x6a>
 800a3cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3d0:	4299      	cmp	r1, r3
 800a3d2:	d002      	beq.n	800a3da <__swsetup_r+0x66>
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f000 f999 	bl	800a70c <_free_r>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3e4:	81a3      	strh	r3, [r4, #12]
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	6063      	str	r3, [r4, #4]
 800a3ea:	6923      	ldr	r3, [r4, #16]
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	f043 0308 	orr.w	r3, r3, #8
 800a3f4:	81a3      	strh	r3, [r4, #12]
 800a3f6:	6923      	ldr	r3, [r4, #16]
 800a3f8:	b94b      	cbnz	r3, 800a40e <__swsetup_r+0x9a>
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a404:	d003      	beq.n	800a40e <__swsetup_r+0x9a>
 800a406:	4621      	mov	r1, r4
 800a408:	4630      	mov	r0, r6
 800a40a:	f000 f92b 	bl	800a664 <__smakebuf_r>
 800a40e:	89a0      	ldrh	r0, [r4, #12]
 800a410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a414:	f010 0301 	ands.w	r3, r0, #1
 800a418:	d00a      	beq.n	800a430 <__swsetup_r+0xbc>
 800a41a:	2300      	movs	r3, #0
 800a41c:	60a3      	str	r3, [r4, #8]
 800a41e:	6963      	ldr	r3, [r4, #20]
 800a420:	425b      	negs	r3, r3
 800a422:	61a3      	str	r3, [r4, #24]
 800a424:	6923      	ldr	r3, [r4, #16]
 800a426:	b943      	cbnz	r3, 800a43a <__swsetup_r+0xc6>
 800a428:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a42c:	d1ba      	bne.n	800a3a4 <__swsetup_r+0x30>
 800a42e:	bd70      	pop	{r4, r5, r6, pc}
 800a430:	0781      	lsls	r1, r0, #30
 800a432:	bf58      	it	pl
 800a434:	6963      	ldrpl	r3, [r4, #20]
 800a436:	60a3      	str	r3, [r4, #8]
 800a438:	e7f4      	b.n	800a424 <__swsetup_r+0xb0>
 800a43a:	2000      	movs	r0, #0
 800a43c:	e7f7      	b.n	800a42e <__swsetup_r+0xba>
 800a43e:	bf00      	nop
 800a440:	20000010 	.word	0x20000010
 800a444:	0800bd8c 	.word	0x0800bd8c
 800a448:	0800bdac 	.word	0x0800bdac
 800a44c:	0800bd6c 	.word	0x0800bd6c

0800a450 <_close_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	4d06      	ldr	r5, [pc, #24]	; (800a46c <_close_r+0x1c>)
 800a454:	2300      	movs	r3, #0
 800a456:	4604      	mov	r4, r0
 800a458:	4608      	mov	r0, r1
 800a45a:	602b      	str	r3, [r5, #0]
 800a45c:	f7f6 fff2 	bl	8001444 <_close>
 800a460:	1c43      	adds	r3, r0, #1
 800a462:	d102      	bne.n	800a46a <_close_r+0x1a>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	b103      	cbz	r3, 800a46a <_close_r+0x1a>
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	20004d60 	.word	0x20004d60

0800a470 <__sflush_r>:
 800a470:	898a      	ldrh	r2, [r1, #12]
 800a472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a476:	4605      	mov	r5, r0
 800a478:	0710      	lsls	r0, r2, #28
 800a47a:	460c      	mov	r4, r1
 800a47c:	d458      	bmi.n	800a530 <__sflush_r+0xc0>
 800a47e:	684b      	ldr	r3, [r1, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	dc05      	bgt.n	800a490 <__sflush_r+0x20>
 800a484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a486:	2b00      	cmp	r3, #0
 800a488:	dc02      	bgt.n	800a490 <__sflush_r+0x20>
 800a48a:	2000      	movs	r0, #0
 800a48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a492:	2e00      	cmp	r6, #0
 800a494:	d0f9      	beq.n	800a48a <__sflush_r+0x1a>
 800a496:	2300      	movs	r3, #0
 800a498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a49c:	682f      	ldr	r7, [r5, #0]
 800a49e:	602b      	str	r3, [r5, #0]
 800a4a0:	d032      	beq.n	800a508 <__sflush_r+0x98>
 800a4a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	075a      	lsls	r2, r3, #29
 800a4a8:	d505      	bpl.n	800a4b6 <__sflush_r+0x46>
 800a4aa:	6863      	ldr	r3, [r4, #4]
 800a4ac:	1ac0      	subs	r0, r0, r3
 800a4ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4b0:	b10b      	cbz	r3, 800a4b6 <__sflush_r+0x46>
 800a4b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4b4:	1ac0      	subs	r0, r0, r3
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4bc:	6a21      	ldr	r1, [r4, #32]
 800a4be:	4628      	mov	r0, r5
 800a4c0:	47b0      	blx	r6
 800a4c2:	1c43      	adds	r3, r0, #1
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	d106      	bne.n	800a4d6 <__sflush_r+0x66>
 800a4c8:	6829      	ldr	r1, [r5, #0]
 800a4ca:	291d      	cmp	r1, #29
 800a4cc:	d82c      	bhi.n	800a528 <__sflush_r+0xb8>
 800a4ce:	4a2a      	ldr	r2, [pc, #168]	; (800a578 <__sflush_r+0x108>)
 800a4d0:	40ca      	lsrs	r2, r1
 800a4d2:	07d6      	lsls	r6, r2, #31
 800a4d4:	d528      	bpl.n	800a528 <__sflush_r+0xb8>
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	6062      	str	r2, [r4, #4]
 800a4da:	04d9      	lsls	r1, r3, #19
 800a4dc:	6922      	ldr	r2, [r4, #16]
 800a4de:	6022      	str	r2, [r4, #0]
 800a4e0:	d504      	bpl.n	800a4ec <__sflush_r+0x7c>
 800a4e2:	1c42      	adds	r2, r0, #1
 800a4e4:	d101      	bne.n	800a4ea <__sflush_r+0x7a>
 800a4e6:	682b      	ldr	r3, [r5, #0]
 800a4e8:	b903      	cbnz	r3, 800a4ec <__sflush_r+0x7c>
 800a4ea:	6560      	str	r0, [r4, #84]	; 0x54
 800a4ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ee:	602f      	str	r7, [r5, #0]
 800a4f0:	2900      	cmp	r1, #0
 800a4f2:	d0ca      	beq.n	800a48a <__sflush_r+0x1a>
 800a4f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4f8:	4299      	cmp	r1, r3
 800a4fa:	d002      	beq.n	800a502 <__sflush_r+0x92>
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f000 f905 	bl	800a70c <_free_r>
 800a502:	2000      	movs	r0, #0
 800a504:	6360      	str	r0, [r4, #52]	; 0x34
 800a506:	e7c1      	b.n	800a48c <__sflush_r+0x1c>
 800a508:	6a21      	ldr	r1, [r4, #32]
 800a50a:	2301      	movs	r3, #1
 800a50c:	4628      	mov	r0, r5
 800a50e:	47b0      	blx	r6
 800a510:	1c41      	adds	r1, r0, #1
 800a512:	d1c7      	bne.n	800a4a4 <__sflush_r+0x34>
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0c4      	beq.n	800a4a4 <__sflush_r+0x34>
 800a51a:	2b1d      	cmp	r3, #29
 800a51c:	d001      	beq.n	800a522 <__sflush_r+0xb2>
 800a51e:	2b16      	cmp	r3, #22
 800a520:	d101      	bne.n	800a526 <__sflush_r+0xb6>
 800a522:	602f      	str	r7, [r5, #0]
 800a524:	e7b1      	b.n	800a48a <__sflush_r+0x1a>
 800a526:	89a3      	ldrh	r3, [r4, #12]
 800a528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a52c:	81a3      	strh	r3, [r4, #12]
 800a52e:	e7ad      	b.n	800a48c <__sflush_r+0x1c>
 800a530:	690f      	ldr	r7, [r1, #16]
 800a532:	2f00      	cmp	r7, #0
 800a534:	d0a9      	beq.n	800a48a <__sflush_r+0x1a>
 800a536:	0793      	lsls	r3, r2, #30
 800a538:	680e      	ldr	r6, [r1, #0]
 800a53a:	bf08      	it	eq
 800a53c:	694b      	ldreq	r3, [r1, #20]
 800a53e:	600f      	str	r7, [r1, #0]
 800a540:	bf18      	it	ne
 800a542:	2300      	movne	r3, #0
 800a544:	eba6 0807 	sub.w	r8, r6, r7
 800a548:	608b      	str	r3, [r1, #8]
 800a54a:	f1b8 0f00 	cmp.w	r8, #0
 800a54e:	dd9c      	ble.n	800a48a <__sflush_r+0x1a>
 800a550:	6a21      	ldr	r1, [r4, #32]
 800a552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a554:	4643      	mov	r3, r8
 800a556:	463a      	mov	r2, r7
 800a558:	4628      	mov	r0, r5
 800a55a:	47b0      	blx	r6
 800a55c:	2800      	cmp	r0, #0
 800a55e:	dc06      	bgt.n	800a56e <__sflush_r+0xfe>
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a566:	81a3      	strh	r3, [r4, #12]
 800a568:	f04f 30ff 	mov.w	r0, #4294967295
 800a56c:	e78e      	b.n	800a48c <__sflush_r+0x1c>
 800a56e:	4407      	add	r7, r0
 800a570:	eba8 0800 	sub.w	r8, r8, r0
 800a574:	e7e9      	b.n	800a54a <__sflush_r+0xda>
 800a576:	bf00      	nop
 800a578:	20400001 	.word	0x20400001

0800a57c <_fflush_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	690b      	ldr	r3, [r1, #16]
 800a580:	4605      	mov	r5, r0
 800a582:	460c      	mov	r4, r1
 800a584:	b913      	cbnz	r3, 800a58c <_fflush_r+0x10>
 800a586:	2500      	movs	r5, #0
 800a588:	4628      	mov	r0, r5
 800a58a:	bd38      	pop	{r3, r4, r5, pc}
 800a58c:	b118      	cbz	r0, 800a596 <_fflush_r+0x1a>
 800a58e:	6983      	ldr	r3, [r0, #24]
 800a590:	b90b      	cbnz	r3, 800a596 <_fflush_r+0x1a>
 800a592:	f7ff fb09 	bl	8009ba8 <__sinit>
 800a596:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <_fflush_r+0x6c>)
 800a598:	429c      	cmp	r4, r3
 800a59a:	d11b      	bne.n	800a5d4 <_fflush_r+0x58>
 800a59c:	686c      	ldr	r4, [r5, #4]
 800a59e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d0ef      	beq.n	800a586 <_fflush_r+0xa>
 800a5a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5a8:	07d0      	lsls	r0, r2, #31
 800a5aa:	d404      	bmi.n	800a5b6 <_fflush_r+0x3a>
 800a5ac:	0599      	lsls	r1, r3, #22
 800a5ae:	d402      	bmi.n	800a5b6 <_fflush_r+0x3a>
 800a5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5b2:	f7ff fbbc 	bl	8009d2e <__retarget_lock_acquire_recursive>
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	f7ff ff59 	bl	800a470 <__sflush_r>
 800a5be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5c0:	07da      	lsls	r2, r3, #31
 800a5c2:	4605      	mov	r5, r0
 800a5c4:	d4e0      	bmi.n	800a588 <_fflush_r+0xc>
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	059b      	lsls	r3, r3, #22
 800a5ca:	d4dd      	bmi.n	800a588 <_fflush_r+0xc>
 800a5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ce:	f7ff fbaf 	bl	8009d30 <__retarget_lock_release_recursive>
 800a5d2:	e7d9      	b.n	800a588 <_fflush_r+0xc>
 800a5d4:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <_fflush_r+0x70>)
 800a5d6:	429c      	cmp	r4, r3
 800a5d8:	d101      	bne.n	800a5de <_fflush_r+0x62>
 800a5da:	68ac      	ldr	r4, [r5, #8]
 800a5dc:	e7df      	b.n	800a59e <_fflush_r+0x22>
 800a5de:	4b04      	ldr	r3, [pc, #16]	; (800a5f0 <_fflush_r+0x74>)
 800a5e0:	429c      	cmp	r4, r3
 800a5e2:	bf08      	it	eq
 800a5e4:	68ec      	ldreq	r4, [r5, #12]
 800a5e6:	e7da      	b.n	800a59e <_fflush_r+0x22>
 800a5e8:	0800bd8c 	.word	0x0800bd8c
 800a5ec:	0800bdac 	.word	0x0800bdac
 800a5f0:	0800bd6c 	.word	0x0800bd6c

0800a5f4 <_lseek_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d07      	ldr	r5, [pc, #28]	; (800a614 <_lseek_r+0x20>)
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	4608      	mov	r0, r1
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	2200      	movs	r2, #0
 800a600:	602a      	str	r2, [r5, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	f7f6 ff35 	bl	8001472 <_lseek>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_lseek_r+0x1e>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_lseek_r+0x1e>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	20004d60 	.word	0x20004d60

0800a618 <__swhatbuf_r>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	460e      	mov	r6, r1
 800a61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a620:	2900      	cmp	r1, #0
 800a622:	b096      	sub	sp, #88	; 0x58
 800a624:	4614      	mov	r4, r2
 800a626:	461d      	mov	r5, r3
 800a628:	da08      	bge.n	800a63c <__swhatbuf_r+0x24>
 800a62a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	602a      	str	r2, [r5, #0]
 800a632:	061a      	lsls	r2, r3, #24
 800a634:	d410      	bmi.n	800a658 <__swhatbuf_r+0x40>
 800a636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a63a:	e00e      	b.n	800a65a <__swhatbuf_r+0x42>
 800a63c:	466a      	mov	r2, sp
 800a63e:	f000 fbb1 	bl	800ada4 <_fstat_r>
 800a642:	2800      	cmp	r0, #0
 800a644:	dbf1      	blt.n	800a62a <__swhatbuf_r+0x12>
 800a646:	9a01      	ldr	r2, [sp, #4]
 800a648:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a64c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a650:	425a      	negs	r2, r3
 800a652:	415a      	adcs	r2, r3
 800a654:	602a      	str	r2, [r5, #0]
 800a656:	e7ee      	b.n	800a636 <__swhatbuf_r+0x1e>
 800a658:	2340      	movs	r3, #64	; 0x40
 800a65a:	2000      	movs	r0, #0
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	b016      	add	sp, #88	; 0x58
 800a660:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a664 <__smakebuf_r>:
 800a664:	898b      	ldrh	r3, [r1, #12]
 800a666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a668:	079d      	lsls	r5, r3, #30
 800a66a:	4606      	mov	r6, r0
 800a66c:	460c      	mov	r4, r1
 800a66e:	d507      	bpl.n	800a680 <__smakebuf_r+0x1c>
 800a670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	6123      	str	r3, [r4, #16]
 800a678:	2301      	movs	r3, #1
 800a67a:	6163      	str	r3, [r4, #20]
 800a67c:	b002      	add	sp, #8
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	ab01      	add	r3, sp, #4
 800a682:	466a      	mov	r2, sp
 800a684:	f7ff ffc8 	bl	800a618 <__swhatbuf_r>
 800a688:	9900      	ldr	r1, [sp, #0]
 800a68a:	4605      	mov	r5, r0
 800a68c:	4630      	mov	r0, r6
 800a68e:	f7ff fb87 	bl	8009da0 <_malloc_r>
 800a692:	b948      	cbnz	r0, 800a6a8 <__smakebuf_r+0x44>
 800a694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a698:	059a      	lsls	r2, r3, #22
 800a69a:	d4ef      	bmi.n	800a67c <__smakebuf_r+0x18>
 800a69c:	f023 0303 	bic.w	r3, r3, #3
 800a6a0:	f043 0302 	orr.w	r3, r3, #2
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	e7e3      	b.n	800a670 <__smakebuf_r+0xc>
 800a6a8:	4b0d      	ldr	r3, [pc, #52]	; (800a6e0 <__smakebuf_r+0x7c>)
 800a6aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	6020      	str	r0, [r4, #0]
 800a6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	9b00      	ldr	r3, [sp, #0]
 800a6b8:	6163      	str	r3, [r4, #20]
 800a6ba:	9b01      	ldr	r3, [sp, #4]
 800a6bc:	6120      	str	r0, [r4, #16]
 800a6be:	b15b      	cbz	r3, 800a6d8 <__smakebuf_r+0x74>
 800a6c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f000 fb7f 	bl	800adc8 <_isatty_r>
 800a6ca:	b128      	cbz	r0, 800a6d8 <__smakebuf_r+0x74>
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	f023 0303 	bic.w	r3, r3, #3
 800a6d2:	f043 0301 	orr.w	r3, r3, #1
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	89a0      	ldrh	r0, [r4, #12]
 800a6da:	4305      	orrs	r5, r0
 800a6dc:	81a5      	strh	r5, [r4, #12]
 800a6de:	e7cd      	b.n	800a67c <__smakebuf_r+0x18>
 800a6e0:	08009b41 	.word	0x08009b41

0800a6e4 <malloc>:
 800a6e4:	4b02      	ldr	r3, [pc, #8]	; (800a6f0 <malloc+0xc>)
 800a6e6:	4601      	mov	r1, r0
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	f7ff bb59 	b.w	8009da0 <_malloc_r>
 800a6ee:	bf00      	nop
 800a6f0:	20000010 	.word	0x20000010

0800a6f4 <__malloc_lock>:
 800a6f4:	4801      	ldr	r0, [pc, #4]	; (800a6fc <__malloc_lock+0x8>)
 800a6f6:	f7ff bb1a 	b.w	8009d2e <__retarget_lock_acquire_recursive>
 800a6fa:	bf00      	nop
 800a6fc:	20004d54 	.word	0x20004d54

0800a700 <__malloc_unlock>:
 800a700:	4801      	ldr	r0, [pc, #4]	; (800a708 <__malloc_unlock+0x8>)
 800a702:	f7ff bb15 	b.w	8009d30 <__retarget_lock_release_recursive>
 800a706:	bf00      	nop
 800a708:	20004d54 	.word	0x20004d54

0800a70c <_free_r>:
 800a70c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a70e:	2900      	cmp	r1, #0
 800a710:	d044      	beq.n	800a79c <_free_r+0x90>
 800a712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a716:	9001      	str	r0, [sp, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f1a1 0404 	sub.w	r4, r1, #4
 800a71e:	bfb8      	it	lt
 800a720:	18e4      	addlt	r4, r4, r3
 800a722:	f7ff ffe7 	bl	800a6f4 <__malloc_lock>
 800a726:	4a1e      	ldr	r2, [pc, #120]	; (800a7a0 <_free_r+0x94>)
 800a728:	9801      	ldr	r0, [sp, #4]
 800a72a:	6813      	ldr	r3, [r2, #0]
 800a72c:	b933      	cbnz	r3, 800a73c <_free_r+0x30>
 800a72e:	6063      	str	r3, [r4, #4]
 800a730:	6014      	str	r4, [r2, #0]
 800a732:	b003      	add	sp, #12
 800a734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a738:	f7ff bfe2 	b.w	800a700 <__malloc_unlock>
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	d908      	bls.n	800a752 <_free_r+0x46>
 800a740:	6825      	ldr	r5, [r4, #0]
 800a742:	1961      	adds	r1, r4, r5
 800a744:	428b      	cmp	r3, r1
 800a746:	bf01      	itttt	eq
 800a748:	6819      	ldreq	r1, [r3, #0]
 800a74a:	685b      	ldreq	r3, [r3, #4]
 800a74c:	1949      	addeq	r1, r1, r5
 800a74e:	6021      	streq	r1, [r4, #0]
 800a750:	e7ed      	b.n	800a72e <_free_r+0x22>
 800a752:	461a      	mov	r2, r3
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	b10b      	cbz	r3, 800a75c <_free_r+0x50>
 800a758:	42a3      	cmp	r3, r4
 800a75a:	d9fa      	bls.n	800a752 <_free_r+0x46>
 800a75c:	6811      	ldr	r1, [r2, #0]
 800a75e:	1855      	adds	r5, r2, r1
 800a760:	42a5      	cmp	r5, r4
 800a762:	d10b      	bne.n	800a77c <_free_r+0x70>
 800a764:	6824      	ldr	r4, [r4, #0]
 800a766:	4421      	add	r1, r4
 800a768:	1854      	adds	r4, r2, r1
 800a76a:	42a3      	cmp	r3, r4
 800a76c:	6011      	str	r1, [r2, #0]
 800a76e:	d1e0      	bne.n	800a732 <_free_r+0x26>
 800a770:	681c      	ldr	r4, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	6053      	str	r3, [r2, #4]
 800a776:	4421      	add	r1, r4
 800a778:	6011      	str	r1, [r2, #0]
 800a77a:	e7da      	b.n	800a732 <_free_r+0x26>
 800a77c:	d902      	bls.n	800a784 <_free_r+0x78>
 800a77e:	230c      	movs	r3, #12
 800a780:	6003      	str	r3, [r0, #0]
 800a782:	e7d6      	b.n	800a732 <_free_r+0x26>
 800a784:	6825      	ldr	r5, [r4, #0]
 800a786:	1961      	adds	r1, r4, r5
 800a788:	428b      	cmp	r3, r1
 800a78a:	bf04      	itt	eq
 800a78c:	6819      	ldreq	r1, [r3, #0]
 800a78e:	685b      	ldreq	r3, [r3, #4]
 800a790:	6063      	str	r3, [r4, #4]
 800a792:	bf04      	itt	eq
 800a794:	1949      	addeq	r1, r1, r5
 800a796:	6021      	streq	r1, [r4, #0]
 800a798:	6054      	str	r4, [r2, #4]
 800a79a:	e7ca      	b.n	800a732 <_free_r+0x26>
 800a79c:	b003      	add	sp, #12
 800a79e:	bd30      	pop	{r4, r5, pc}
 800a7a0:	20004d58 	.word	0x20004d58

0800a7a4 <__sfputc_r>:
 800a7a4:	6893      	ldr	r3, [r2, #8]
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	b410      	push	{r4}
 800a7ac:	6093      	str	r3, [r2, #8]
 800a7ae:	da08      	bge.n	800a7c2 <__sfputc_r+0x1e>
 800a7b0:	6994      	ldr	r4, [r2, #24]
 800a7b2:	42a3      	cmp	r3, r4
 800a7b4:	db01      	blt.n	800a7ba <__sfputc_r+0x16>
 800a7b6:	290a      	cmp	r1, #10
 800a7b8:	d103      	bne.n	800a7c2 <__sfputc_r+0x1e>
 800a7ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7be:	f7ff bd75 	b.w	800a2ac <__swbuf_r>
 800a7c2:	6813      	ldr	r3, [r2, #0]
 800a7c4:	1c58      	adds	r0, r3, #1
 800a7c6:	6010      	str	r0, [r2, #0]
 800a7c8:	7019      	strb	r1, [r3, #0]
 800a7ca:	4608      	mov	r0, r1
 800a7cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <__sfputs_r>:
 800a7d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	460f      	mov	r7, r1
 800a7d8:	4614      	mov	r4, r2
 800a7da:	18d5      	adds	r5, r2, r3
 800a7dc:	42ac      	cmp	r4, r5
 800a7de:	d101      	bne.n	800a7e4 <__sfputs_r+0x12>
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	e007      	b.n	800a7f4 <__sfputs_r+0x22>
 800a7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e8:	463a      	mov	r2, r7
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f7ff ffda 	bl	800a7a4 <__sfputc_r>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d1f3      	bne.n	800a7dc <__sfputs_r+0xa>
 800a7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7f8 <_vfiprintf_r>:
 800a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fc:	460d      	mov	r5, r1
 800a7fe:	b09d      	sub	sp, #116	; 0x74
 800a800:	4614      	mov	r4, r2
 800a802:	4698      	mov	r8, r3
 800a804:	4606      	mov	r6, r0
 800a806:	b118      	cbz	r0, 800a810 <_vfiprintf_r+0x18>
 800a808:	6983      	ldr	r3, [r0, #24]
 800a80a:	b90b      	cbnz	r3, 800a810 <_vfiprintf_r+0x18>
 800a80c:	f7ff f9cc 	bl	8009ba8 <__sinit>
 800a810:	4b89      	ldr	r3, [pc, #548]	; (800aa38 <_vfiprintf_r+0x240>)
 800a812:	429d      	cmp	r5, r3
 800a814:	d11b      	bne.n	800a84e <_vfiprintf_r+0x56>
 800a816:	6875      	ldr	r5, [r6, #4]
 800a818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a81a:	07d9      	lsls	r1, r3, #31
 800a81c:	d405      	bmi.n	800a82a <_vfiprintf_r+0x32>
 800a81e:	89ab      	ldrh	r3, [r5, #12]
 800a820:	059a      	lsls	r2, r3, #22
 800a822:	d402      	bmi.n	800a82a <_vfiprintf_r+0x32>
 800a824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a826:	f7ff fa82 	bl	8009d2e <__retarget_lock_acquire_recursive>
 800a82a:	89ab      	ldrh	r3, [r5, #12]
 800a82c:	071b      	lsls	r3, r3, #28
 800a82e:	d501      	bpl.n	800a834 <_vfiprintf_r+0x3c>
 800a830:	692b      	ldr	r3, [r5, #16]
 800a832:	b9eb      	cbnz	r3, 800a870 <_vfiprintf_r+0x78>
 800a834:	4629      	mov	r1, r5
 800a836:	4630      	mov	r0, r6
 800a838:	f7ff fd9c 	bl	800a374 <__swsetup_r>
 800a83c:	b1c0      	cbz	r0, 800a870 <_vfiprintf_r+0x78>
 800a83e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a840:	07dc      	lsls	r4, r3, #31
 800a842:	d50e      	bpl.n	800a862 <_vfiprintf_r+0x6a>
 800a844:	f04f 30ff 	mov.w	r0, #4294967295
 800a848:	b01d      	add	sp, #116	; 0x74
 800a84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84e:	4b7b      	ldr	r3, [pc, #492]	; (800aa3c <_vfiprintf_r+0x244>)
 800a850:	429d      	cmp	r5, r3
 800a852:	d101      	bne.n	800a858 <_vfiprintf_r+0x60>
 800a854:	68b5      	ldr	r5, [r6, #8]
 800a856:	e7df      	b.n	800a818 <_vfiprintf_r+0x20>
 800a858:	4b79      	ldr	r3, [pc, #484]	; (800aa40 <_vfiprintf_r+0x248>)
 800a85a:	429d      	cmp	r5, r3
 800a85c:	bf08      	it	eq
 800a85e:	68f5      	ldreq	r5, [r6, #12]
 800a860:	e7da      	b.n	800a818 <_vfiprintf_r+0x20>
 800a862:	89ab      	ldrh	r3, [r5, #12]
 800a864:	0598      	lsls	r0, r3, #22
 800a866:	d4ed      	bmi.n	800a844 <_vfiprintf_r+0x4c>
 800a868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a86a:	f7ff fa61 	bl	8009d30 <__retarget_lock_release_recursive>
 800a86e:	e7e9      	b.n	800a844 <_vfiprintf_r+0x4c>
 800a870:	2300      	movs	r3, #0
 800a872:	9309      	str	r3, [sp, #36]	; 0x24
 800a874:	2320      	movs	r3, #32
 800a876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a87a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a87e:	2330      	movs	r3, #48	; 0x30
 800a880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa44 <_vfiprintf_r+0x24c>
 800a884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a888:	f04f 0901 	mov.w	r9, #1
 800a88c:	4623      	mov	r3, r4
 800a88e:	469a      	mov	sl, r3
 800a890:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a894:	b10a      	cbz	r2, 800a89a <_vfiprintf_r+0xa2>
 800a896:	2a25      	cmp	r2, #37	; 0x25
 800a898:	d1f9      	bne.n	800a88e <_vfiprintf_r+0x96>
 800a89a:	ebba 0b04 	subs.w	fp, sl, r4
 800a89e:	d00b      	beq.n	800a8b8 <_vfiprintf_r+0xc0>
 800a8a0:	465b      	mov	r3, fp
 800a8a2:	4622      	mov	r2, r4
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	f7ff ff93 	bl	800a7d2 <__sfputs_r>
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	f000 80aa 	beq.w	800aa06 <_vfiprintf_r+0x20e>
 800a8b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8b4:	445a      	add	r2, fp
 800a8b6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 80a2 	beq.w	800aa06 <_vfiprintf_r+0x20e>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8cc:	f10a 0a01 	add.w	sl, sl, #1
 800a8d0:	9304      	str	r3, [sp, #16]
 800a8d2:	9307      	str	r3, [sp, #28]
 800a8d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8d8:	931a      	str	r3, [sp, #104]	; 0x68
 800a8da:	4654      	mov	r4, sl
 800a8dc:	2205      	movs	r2, #5
 800a8de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e2:	4858      	ldr	r0, [pc, #352]	; (800aa44 <_vfiprintf_r+0x24c>)
 800a8e4:	f7f5 fc74 	bl	80001d0 <memchr>
 800a8e8:	9a04      	ldr	r2, [sp, #16]
 800a8ea:	b9d8      	cbnz	r0, 800a924 <_vfiprintf_r+0x12c>
 800a8ec:	06d1      	lsls	r1, r2, #27
 800a8ee:	bf44      	itt	mi
 800a8f0:	2320      	movmi	r3, #32
 800a8f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f6:	0713      	lsls	r3, r2, #28
 800a8f8:	bf44      	itt	mi
 800a8fa:	232b      	movmi	r3, #43	; 0x2b
 800a8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a900:	f89a 3000 	ldrb.w	r3, [sl]
 800a904:	2b2a      	cmp	r3, #42	; 0x2a
 800a906:	d015      	beq.n	800a934 <_vfiprintf_r+0x13c>
 800a908:	9a07      	ldr	r2, [sp, #28]
 800a90a:	4654      	mov	r4, sl
 800a90c:	2000      	movs	r0, #0
 800a90e:	f04f 0c0a 	mov.w	ip, #10
 800a912:	4621      	mov	r1, r4
 800a914:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a918:	3b30      	subs	r3, #48	; 0x30
 800a91a:	2b09      	cmp	r3, #9
 800a91c:	d94e      	bls.n	800a9bc <_vfiprintf_r+0x1c4>
 800a91e:	b1b0      	cbz	r0, 800a94e <_vfiprintf_r+0x156>
 800a920:	9207      	str	r2, [sp, #28]
 800a922:	e014      	b.n	800a94e <_vfiprintf_r+0x156>
 800a924:	eba0 0308 	sub.w	r3, r0, r8
 800a928:	fa09 f303 	lsl.w	r3, r9, r3
 800a92c:	4313      	orrs	r3, r2
 800a92e:	9304      	str	r3, [sp, #16]
 800a930:	46a2      	mov	sl, r4
 800a932:	e7d2      	b.n	800a8da <_vfiprintf_r+0xe2>
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	1d19      	adds	r1, r3, #4
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	9103      	str	r1, [sp, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	bfbb      	ittet	lt
 800a940:	425b      	neglt	r3, r3
 800a942:	f042 0202 	orrlt.w	r2, r2, #2
 800a946:	9307      	strge	r3, [sp, #28]
 800a948:	9307      	strlt	r3, [sp, #28]
 800a94a:	bfb8      	it	lt
 800a94c:	9204      	strlt	r2, [sp, #16]
 800a94e:	7823      	ldrb	r3, [r4, #0]
 800a950:	2b2e      	cmp	r3, #46	; 0x2e
 800a952:	d10c      	bne.n	800a96e <_vfiprintf_r+0x176>
 800a954:	7863      	ldrb	r3, [r4, #1]
 800a956:	2b2a      	cmp	r3, #42	; 0x2a
 800a958:	d135      	bne.n	800a9c6 <_vfiprintf_r+0x1ce>
 800a95a:	9b03      	ldr	r3, [sp, #12]
 800a95c:	1d1a      	adds	r2, r3, #4
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	9203      	str	r2, [sp, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	bfb8      	it	lt
 800a966:	f04f 33ff 	movlt.w	r3, #4294967295
 800a96a:	3402      	adds	r4, #2
 800a96c:	9305      	str	r3, [sp, #20]
 800a96e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa54 <_vfiprintf_r+0x25c>
 800a972:	7821      	ldrb	r1, [r4, #0]
 800a974:	2203      	movs	r2, #3
 800a976:	4650      	mov	r0, sl
 800a978:	f7f5 fc2a 	bl	80001d0 <memchr>
 800a97c:	b140      	cbz	r0, 800a990 <_vfiprintf_r+0x198>
 800a97e:	2340      	movs	r3, #64	; 0x40
 800a980:	eba0 000a 	sub.w	r0, r0, sl
 800a984:	fa03 f000 	lsl.w	r0, r3, r0
 800a988:	9b04      	ldr	r3, [sp, #16]
 800a98a:	4303      	orrs	r3, r0
 800a98c:	3401      	adds	r4, #1
 800a98e:	9304      	str	r3, [sp, #16]
 800a990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a994:	482c      	ldr	r0, [pc, #176]	; (800aa48 <_vfiprintf_r+0x250>)
 800a996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a99a:	2206      	movs	r2, #6
 800a99c:	f7f5 fc18 	bl	80001d0 <memchr>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d03f      	beq.n	800aa24 <_vfiprintf_r+0x22c>
 800a9a4:	4b29      	ldr	r3, [pc, #164]	; (800aa4c <_vfiprintf_r+0x254>)
 800a9a6:	bb1b      	cbnz	r3, 800a9f0 <_vfiprintf_r+0x1f8>
 800a9a8:	9b03      	ldr	r3, [sp, #12]
 800a9aa:	3307      	adds	r3, #7
 800a9ac:	f023 0307 	bic.w	r3, r3, #7
 800a9b0:	3308      	adds	r3, #8
 800a9b2:	9303      	str	r3, [sp, #12]
 800a9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b6:	443b      	add	r3, r7
 800a9b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ba:	e767      	b.n	800a88c <_vfiprintf_r+0x94>
 800a9bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	2001      	movs	r0, #1
 800a9c4:	e7a5      	b.n	800a912 <_vfiprintf_r+0x11a>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	3401      	adds	r4, #1
 800a9ca:	9305      	str	r3, [sp, #20]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	f04f 0c0a 	mov.w	ip, #10
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9d8:	3a30      	subs	r2, #48	; 0x30
 800a9da:	2a09      	cmp	r2, #9
 800a9dc:	d903      	bls.n	800a9e6 <_vfiprintf_r+0x1ee>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d0c5      	beq.n	800a96e <_vfiprintf_r+0x176>
 800a9e2:	9105      	str	r1, [sp, #20]
 800a9e4:	e7c3      	b.n	800a96e <_vfiprintf_r+0x176>
 800a9e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e7f0      	b.n	800a9d2 <_vfiprintf_r+0x1da>
 800a9f0:	ab03      	add	r3, sp, #12
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	462a      	mov	r2, r5
 800a9f6:	4b16      	ldr	r3, [pc, #88]	; (800aa50 <_vfiprintf_r+0x258>)
 800a9f8:	a904      	add	r1, sp, #16
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f3af 8000 	nop.w
 800aa00:	4607      	mov	r7, r0
 800aa02:	1c78      	adds	r0, r7, #1
 800aa04:	d1d6      	bne.n	800a9b4 <_vfiprintf_r+0x1bc>
 800aa06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa08:	07d9      	lsls	r1, r3, #31
 800aa0a:	d405      	bmi.n	800aa18 <_vfiprintf_r+0x220>
 800aa0c:	89ab      	ldrh	r3, [r5, #12]
 800aa0e:	059a      	lsls	r2, r3, #22
 800aa10:	d402      	bmi.n	800aa18 <_vfiprintf_r+0x220>
 800aa12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa14:	f7ff f98c 	bl	8009d30 <__retarget_lock_release_recursive>
 800aa18:	89ab      	ldrh	r3, [r5, #12]
 800aa1a:	065b      	lsls	r3, r3, #25
 800aa1c:	f53f af12 	bmi.w	800a844 <_vfiprintf_r+0x4c>
 800aa20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa22:	e711      	b.n	800a848 <_vfiprintf_r+0x50>
 800aa24:	ab03      	add	r3, sp, #12
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	462a      	mov	r2, r5
 800aa2a:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <_vfiprintf_r+0x258>)
 800aa2c:	a904      	add	r1, sp, #16
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f000 f880 	bl	800ab34 <_printf_i>
 800aa34:	e7e4      	b.n	800aa00 <_vfiprintf_r+0x208>
 800aa36:	bf00      	nop
 800aa38:	0800bd8c 	.word	0x0800bd8c
 800aa3c:	0800bdac 	.word	0x0800bdac
 800aa40:	0800bd6c 	.word	0x0800bd6c
 800aa44:	0800bdd0 	.word	0x0800bdd0
 800aa48:	0800bdda 	.word	0x0800bdda
 800aa4c:	00000000 	.word	0x00000000
 800aa50:	0800a7d3 	.word	0x0800a7d3
 800aa54:	0800bdd6 	.word	0x0800bdd6

0800aa58 <_printf_common>:
 800aa58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa5c:	4616      	mov	r6, r2
 800aa5e:	4699      	mov	r9, r3
 800aa60:	688a      	ldr	r2, [r1, #8]
 800aa62:	690b      	ldr	r3, [r1, #16]
 800aa64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	bfb8      	it	lt
 800aa6c:	4613      	movlt	r3, r2
 800aa6e:	6033      	str	r3, [r6, #0]
 800aa70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa74:	4607      	mov	r7, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	b10a      	cbz	r2, 800aa7e <_printf_common+0x26>
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	6033      	str	r3, [r6, #0]
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	0699      	lsls	r1, r3, #26
 800aa82:	bf42      	ittt	mi
 800aa84:	6833      	ldrmi	r3, [r6, #0]
 800aa86:	3302      	addmi	r3, #2
 800aa88:	6033      	strmi	r3, [r6, #0]
 800aa8a:	6825      	ldr	r5, [r4, #0]
 800aa8c:	f015 0506 	ands.w	r5, r5, #6
 800aa90:	d106      	bne.n	800aaa0 <_printf_common+0x48>
 800aa92:	f104 0a19 	add.w	sl, r4, #25
 800aa96:	68e3      	ldr	r3, [r4, #12]
 800aa98:	6832      	ldr	r2, [r6, #0]
 800aa9a:	1a9b      	subs	r3, r3, r2
 800aa9c:	42ab      	cmp	r3, r5
 800aa9e:	dc26      	bgt.n	800aaee <_printf_common+0x96>
 800aaa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aaa4:	1e13      	subs	r3, r2, #0
 800aaa6:	6822      	ldr	r2, [r4, #0]
 800aaa8:	bf18      	it	ne
 800aaaa:	2301      	movne	r3, #1
 800aaac:	0692      	lsls	r2, r2, #26
 800aaae:	d42b      	bmi.n	800ab08 <_printf_common+0xb0>
 800aab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aab4:	4649      	mov	r1, r9
 800aab6:	4638      	mov	r0, r7
 800aab8:	47c0      	blx	r8
 800aaba:	3001      	adds	r0, #1
 800aabc:	d01e      	beq.n	800aafc <_printf_common+0xa4>
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	68e5      	ldr	r5, [r4, #12]
 800aac2:	6832      	ldr	r2, [r6, #0]
 800aac4:	f003 0306 	and.w	r3, r3, #6
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	bf08      	it	eq
 800aacc:	1aad      	subeq	r5, r5, r2
 800aace:	68a3      	ldr	r3, [r4, #8]
 800aad0:	6922      	ldr	r2, [r4, #16]
 800aad2:	bf0c      	ite	eq
 800aad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aad8:	2500      	movne	r5, #0
 800aada:	4293      	cmp	r3, r2
 800aadc:	bfc4      	itt	gt
 800aade:	1a9b      	subgt	r3, r3, r2
 800aae0:	18ed      	addgt	r5, r5, r3
 800aae2:	2600      	movs	r6, #0
 800aae4:	341a      	adds	r4, #26
 800aae6:	42b5      	cmp	r5, r6
 800aae8:	d11a      	bne.n	800ab20 <_printf_common+0xc8>
 800aaea:	2000      	movs	r0, #0
 800aaec:	e008      	b.n	800ab00 <_printf_common+0xa8>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	4652      	mov	r2, sl
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	47c0      	blx	r8
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d103      	bne.n	800ab04 <_printf_common+0xac>
 800aafc:	f04f 30ff 	mov.w	r0, #4294967295
 800ab00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab04:	3501      	adds	r5, #1
 800ab06:	e7c6      	b.n	800aa96 <_printf_common+0x3e>
 800ab08:	18e1      	adds	r1, r4, r3
 800ab0a:	1c5a      	adds	r2, r3, #1
 800ab0c:	2030      	movs	r0, #48	; 0x30
 800ab0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab12:	4422      	add	r2, r4
 800ab14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab1c:	3302      	adds	r3, #2
 800ab1e:	e7c7      	b.n	800aab0 <_printf_common+0x58>
 800ab20:	2301      	movs	r3, #1
 800ab22:	4622      	mov	r2, r4
 800ab24:	4649      	mov	r1, r9
 800ab26:	4638      	mov	r0, r7
 800ab28:	47c0      	blx	r8
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	d0e6      	beq.n	800aafc <_printf_common+0xa4>
 800ab2e:	3601      	adds	r6, #1
 800ab30:	e7d9      	b.n	800aae6 <_printf_common+0x8e>
	...

0800ab34 <_printf_i>:
 800ab34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab38:	7e0f      	ldrb	r7, [r1, #24]
 800ab3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab3c:	2f78      	cmp	r7, #120	; 0x78
 800ab3e:	4691      	mov	r9, r2
 800ab40:	4680      	mov	r8, r0
 800ab42:	460c      	mov	r4, r1
 800ab44:	469a      	mov	sl, r3
 800ab46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab4a:	d807      	bhi.n	800ab5c <_printf_i+0x28>
 800ab4c:	2f62      	cmp	r7, #98	; 0x62
 800ab4e:	d80a      	bhi.n	800ab66 <_printf_i+0x32>
 800ab50:	2f00      	cmp	r7, #0
 800ab52:	f000 80d8 	beq.w	800ad06 <_printf_i+0x1d2>
 800ab56:	2f58      	cmp	r7, #88	; 0x58
 800ab58:	f000 80a3 	beq.w	800aca2 <_printf_i+0x16e>
 800ab5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab64:	e03a      	b.n	800abdc <_printf_i+0xa8>
 800ab66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab6a:	2b15      	cmp	r3, #21
 800ab6c:	d8f6      	bhi.n	800ab5c <_printf_i+0x28>
 800ab6e:	a101      	add	r1, pc, #4	; (adr r1, 800ab74 <_printf_i+0x40>)
 800ab70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab74:	0800abcd 	.word	0x0800abcd
 800ab78:	0800abe1 	.word	0x0800abe1
 800ab7c:	0800ab5d 	.word	0x0800ab5d
 800ab80:	0800ab5d 	.word	0x0800ab5d
 800ab84:	0800ab5d 	.word	0x0800ab5d
 800ab88:	0800ab5d 	.word	0x0800ab5d
 800ab8c:	0800abe1 	.word	0x0800abe1
 800ab90:	0800ab5d 	.word	0x0800ab5d
 800ab94:	0800ab5d 	.word	0x0800ab5d
 800ab98:	0800ab5d 	.word	0x0800ab5d
 800ab9c:	0800ab5d 	.word	0x0800ab5d
 800aba0:	0800aced 	.word	0x0800aced
 800aba4:	0800ac11 	.word	0x0800ac11
 800aba8:	0800accf 	.word	0x0800accf
 800abac:	0800ab5d 	.word	0x0800ab5d
 800abb0:	0800ab5d 	.word	0x0800ab5d
 800abb4:	0800ad0f 	.word	0x0800ad0f
 800abb8:	0800ab5d 	.word	0x0800ab5d
 800abbc:	0800ac11 	.word	0x0800ac11
 800abc0:	0800ab5d 	.word	0x0800ab5d
 800abc4:	0800ab5d 	.word	0x0800ab5d
 800abc8:	0800acd7 	.word	0x0800acd7
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	1d1a      	adds	r2, r3, #4
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	602a      	str	r2, [r5, #0]
 800abd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abdc:	2301      	movs	r3, #1
 800abde:	e0a3      	b.n	800ad28 <_printf_i+0x1f4>
 800abe0:	6820      	ldr	r0, [r4, #0]
 800abe2:	6829      	ldr	r1, [r5, #0]
 800abe4:	0606      	lsls	r6, r0, #24
 800abe6:	f101 0304 	add.w	r3, r1, #4
 800abea:	d50a      	bpl.n	800ac02 <_printf_i+0xce>
 800abec:	680e      	ldr	r6, [r1, #0]
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	2e00      	cmp	r6, #0
 800abf2:	da03      	bge.n	800abfc <_printf_i+0xc8>
 800abf4:	232d      	movs	r3, #45	; 0x2d
 800abf6:	4276      	negs	r6, r6
 800abf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abfc:	485e      	ldr	r0, [pc, #376]	; (800ad78 <_printf_i+0x244>)
 800abfe:	230a      	movs	r3, #10
 800ac00:	e019      	b.n	800ac36 <_printf_i+0x102>
 800ac02:	680e      	ldr	r6, [r1, #0]
 800ac04:	602b      	str	r3, [r5, #0]
 800ac06:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac0a:	bf18      	it	ne
 800ac0c:	b236      	sxthne	r6, r6
 800ac0e:	e7ef      	b.n	800abf0 <_printf_i+0xbc>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	6820      	ldr	r0, [r4, #0]
 800ac14:	1d19      	adds	r1, r3, #4
 800ac16:	6029      	str	r1, [r5, #0]
 800ac18:	0601      	lsls	r1, r0, #24
 800ac1a:	d501      	bpl.n	800ac20 <_printf_i+0xec>
 800ac1c:	681e      	ldr	r6, [r3, #0]
 800ac1e:	e002      	b.n	800ac26 <_printf_i+0xf2>
 800ac20:	0646      	lsls	r6, r0, #25
 800ac22:	d5fb      	bpl.n	800ac1c <_printf_i+0xe8>
 800ac24:	881e      	ldrh	r6, [r3, #0]
 800ac26:	4854      	ldr	r0, [pc, #336]	; (800ad78 <_printf_i+0x244>)
 800ac28:	2f6f      	cmp	r7, #111	; 0x6f
 800ac2a:	bf0c      	ite	eq
 800ac2c:	2308      	moveq	r3, #8
 800ac2e:	230a      	movne	r3, #10
 800ac30:	2100      	movs	r1, #0
 800ac32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac36:	6865      	ldr	r5, [r4, #4]
 800ac38:	60a5      	str	r5, [r4, #8]
 800ac3a:	2d00      	cmp	r5, #0
 800ac3c:	bfa2      	ittt	ge
 800ac3e:	6821      	ldrge	r1, [r4, #0]
 800ac40:	f021 0104 	bicge.w	r1, r1, #4
 800ac44:	6021      	strge	r1, [r4, #0]
 800ac46:	b90e      	cbnz	r6, 800ac4c <_printf_i+0x118>
 800ac48:	2d00      	cmp	r5, #0
 800ac4a:	d04d      	beq.n	800ace8 <_printf_i+0x1b4>
 800ac4c:	4615      	mov	r5, r2
 800ac4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac52:	fb03 6711 	mls	r7, r3, r1, r6
 800ac56:	5dc7      	ldrb	r7, [r0, r7]
 800ac58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac5c:	4637      	mov	r7, r6
 800ac5e:	42bb      	cmp	r3, r7
 800ac60:	460e      	mov	r6, r1
 800ac62:	d9f4      	bls.n	800ac4e <_printf_i+0x11a>
 800ac64:	2b08      	cmp	r3, #8
 800ac66:	d10b      	bne.n	800ac80 <_printf_i+0x14c>
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	07de      	lsls	r6, r3, #31
 800ac6c:	d508      	bpl.n	800ac80 <_printf_i+0x14c>
 800ac6e:	6923      	ldr	r3, [r4, #16]
 800ac70:	6861      	ldr	r1, [r4, #4]
 800ac72:	4299      	cmp	r1, r3
 800ac74:	bfde      	ittt	le
 800ac76:	2330      	movle	r3, #48	; 0x30
 800ac78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac80:	1b52      	subs	r2, r2, r5
 800ac82:	6122      	str	r2, [r4, #16]
 800ac84:	f8cd a000 	str.w	sl, [sp]
 800ac88:	464b      	mov	r3, r9
 800ac8a:	aa03      	add	r2, sp, #12
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	4640      	mov	r0, r8
 800ac90:	f7ff fee2 	bl	800aa58 <_printf_common>
 800ac94:	3001      	adds	r0, #1
 800ac96:	d14c      	bne.n	800ad32 <_printf_i+0x1fe>
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9c:	b004      	add	sp, #16
 800ac9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca2:	4835      	ldr	r0, [pc, #212]	; (800ad78 <_printf_i+0x244>)
 800aca4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aca8:	6829      	ldr	r1, [r5, #0]
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	f851 6b04 	ldr.w	r6, [r1], #4
 800acb0:	6029      	str	r1, [r5, #0]
 800acb2:	061d      	lsls	r5, r3, #24
 800acb4:	d514      	bpl.n	800ace0 <_printf_i+0x1ac>
 800acb6:	07df      	lsls	r7, r3, #31
 800acb8:	bf44      	itt	mi
 800acba:	f043 0320 	orrmi.w	r3, r3, #32
 800acbe:	6023      	strmi	r3, [r4, #0]
 800acc0:	b91e      	cbnz	r6, 800acca <_printf_i+0x196>
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	f023 0320 	bic.w	r3, r3, #32
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	2310      	movs	r3, #16
 800accc:	e7b0      	b.n	800ac30 <_printf_i+0xfc>
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	f043 0320 	orr.w	r3, r3, #32
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	2378      	movs	r3, #120	; 0x78
 800acd8:	4828      	ldr	r0, [pc, #160]	; (800ad7c <_printf_i+0x248>)
 800acda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acde:	e7e3      	b.n	800aca8 <_printf_i+0x174>
 800ace0:	0659      	lsls	r1, r3, #25
 800ace2:	bf48      	it	mi
 800ace4:	b2b6      	uxthmi	r6, r6
 800ace6:	e7e6      	b.n	800acb6 <_printf_i+0x182>
 800ace8:	4615      	mov	r5, r2
 800acea:	e7bb      	b.n	800ac64 <_printf_i+0x130>
 800acec:	682b      	ldr	r3, [r5, #0]
 800acee:	6826      	ldr	r6, [r4, #0]
 800acf0:	6961      	ldr	r1, [r4, #20]
 800acf2:	1d18      	adds	r0, r3, #4
 800acf4:	6028      	str	r0, [r5, #0]
 800acf6:	0635      	lsls	r5, r6, #24
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	d501      	bpl.n	800ad00 <_printf_i+0x1cc>
 800acfc:	6019      	str	r1, [r3, #0]
 800acfe:	e002      	b.n	800ad06 <_printf_i+0x1d2>
 800ad00:	0670      	lsls	r0, r6, #25
 800ad02:	d5fb      	bpl.n	800acfc <_printf_i+0x1c8>
 800ad04:	8019      	strh	r1, [r3, #0]
 800ad06:	2300      	movs	r3, #0
 800ad08:	6123      	str	r3, [r4, #16]
 800ad0a:	4615      	mov	r5, r2
 800ad0c:	e7ba      	b.n	800ac84 <_printf_i+0x150>
 800ad0e:	682b      	ldr	r3, [r5, #0]
 800ad10:	1d1a      	adds	r2, r3, #4
 800ad12:	602a      	str	r2, [r5, #0]
 800ad14:	681d      	ldr	r5, [r3, #0]
 800ad16:	6862      	ldr	r2, [r4, #4]
 800ad18:	2100      	movs	r1, #0
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	f7f5 fa58 	bl	80001d0 <memchr>
 800ad20:	b108      	cbz	r0, 800ad26 <_printf_i+0x1f2>
 800ad22:	1b40      	subs	r0, r0, r5
 800ad24:	6060      	str	r0, [r4, #4]
 800ad26:	6863      	ldr	r3, [r4, #4]
 800ad28:	6123      	str	r3, [r4, #16]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad30:	e7a8      	b.n	800ac84 <_printf_i+0x150>
 800ad32:	6923      	ldr	r3, [r4, #16]
 800ad34:	462a      	mov	r2, r5
 800ad36:	4649      	mov	r1, r9
 800ad38:	4640      	mov	r0, r8
 800ad3a:	47d0      	blx	sl
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	d0ab      	beq.n	800ac98 <_printf_i+0x164>
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	079b      	lsls	r3, r3, #30
 800ad44:	d413      	bmi.n	800ad6e <_printf_i+0x23a>
 800ad46:	68e0      	ldr	r0, [r4, #12]
 800ad48:	9b03      	ldr	r3, [sp, #12]
 800ad4a:	4298      	cmp	r0, r3
 800ad4c:	bfb8      	it	lt
 800ad4e:	4618      	movlt	r0, r3
 800ad50:	e7a4      	b.n	800ac9c <_printf_i+0x168>
 800ad52:	2301      	movs	r3, #1
 800ad54:	4632      	mov	r2, r6
 800ad56:	4649      	mov	r1, r9
 800ad58:	4640      	mov	r0, r8
 800ad5a:	47d0      	blx	sl
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d09b      	beq.n	800ac98 <_printf_i+0x164>
 800ad60:	3501      	adds	r5, #1
 800ad62:	68e3      	ldr	r3, [r4, #12]
 800ad64:	9903      	ldr	r1, [sp, #12]
 800ad66:	1a5b      	subs	r3, r3, r1
 800ad68:	42ab      	cmp	r3, r5
 800ad6a:	dcf2      	bgt.n	800ad52 <_printf_i+0x21e>
 800ad6c:	e7eb      	b.n	800ad46 <_printf_i+0x212>
 800ad6e:	2500      	movs	r5, #0
 800ad70:	f104 0619 	add.w	r6, r4, #25
 800ad74:	e7f5      	b.n	800ad62 <_printf_i+0x22e>
 800ad76:	bf00      	nop
 800ad78:	0800bde1 	.word	0x0800bde1
 800ad7c:	0800bdf2 	.word	0x0800bdf2

0800ad80 <_read_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d07      	ldr	r5, [pc, #28]	; (800ada0 <_read_r+0x20>)
 800ad84:	4604      	mov	r4, r0
 800ad86:	4608      	mov	r0, r1
 800ad88:	4611      	mov	r1, r2
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	602a      	str	r2, [r5, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	f7f6 fb80 	bl	8001494 <_read>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d102      	bne.n	800ad9e <_read_r+0x1e>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	b103      	cbz	r3, 800ad9e <_read_r+0x1e>
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	20004d60 	.word	0x20004d60

0800ada4 <_fstat_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4d07      	ldr	r5, [pc, #28]	; (800adc4 <_fstat_r+0x20>)
 800ada8:	2300      	movs	r3, #0
 800adaa:	4604      	mov	r4, r0
 800adac:	4608      	mov	r0, r1
 800adae:	4611      	mov	r1, r2
 800adb0:	602b      	str	r3, [r5, #0]
 800adb2:	f7f6 fb97 	bl	80014e4 <_fstat>
 800adb6:	1c43      	adds	r3, r0, #1
 800adb8:	d102      	bne.n	800adc0 <_fstat_r+0x1c>
 800adba:	682b      	ldr	r3, [r5, #0]
 800adbc:	b103      	cbz	r3, 800adc0 <_fstat_r+0x1c>
 800adbe:	6023      	str	r3, [r4, #0]
 800adc0:	bd38      	pop	{r3, r4, r5, pc}
 800adc2:	bf00      	nop
 800adc4:	20004d60 	.word	0x20004d60

0800adc8 <_isatty_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4d06      	ldr	r5, [pc, #24]	; (800ade4 <_isatty_r+0x1c>)
 800adcc:	2300      	movs	r3, #0
 800adce:	4604      	mov	r4, r0
 800add0:	4608      	mov	r0, r1
 800add2:	602b      	str	r3, [r5, #0]
 800add4:	f7f6 faf4 	bl	80013c0 <_isatty>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d102      	bne.n	800ade2 <_isatty_r+0x1a>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b103      	cbz	r3, 800ade2 <_isatty_r+0x1a>
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	20004d60 	.word	0x20004d60

0800ade8 <pow>:
 800ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adea:	ed2d 8b02 	vpush	{d8}
 800adee:	eeb0 8a40 	vmov.f32	s16, s0
 800adf2:	eef0 8a60 	vmov.f32	s17, s1
 800adf6:	ec55 4b11 	vmov	r4, r5, d1
 800adfa:	f000 f865 	bl	800aec8 <__ieee754_pow>
 800adfe:	4622      	mov	r2, r4
 800ae00:	462b      	mov	r3, r5
 800ae02:	4620      	mov	r0, r4
 800ae04:	4629      	mov	r1, r5
 800ae06:	ec57 6b10 	vmov	r6, r7, d0
 800ae0a:	f7f5 fe87 	bl	8000b1c <__aeabi_dcmpun>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d13b      	bne.n	800ae8a <pow+0xa2>
 800ae12:	ec51 0b18 	vmov	r0, r1, d8
 800ae16:	2200      	movs	r2, #0
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f7f5 fe4d 	bl	8000ab8 <__aeabi_dcmpeq>
 800ae1e:	b1b8      	cbz	r0, 800ae50 <pow+0x68>
 800ae20:	2200      	movs	r2, #0
 800ae22:	2300      	movs	r3, #0
 800ae24:	4620      	mov	r0, r4
 800ae26:	4629      	mov	r1, r5
 800ae28:	f7f5 fe46 	bl	8000ab8 <__aeabi_dcmpeq>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d146      	bne.n	800aebe <pow+0xd6>
 800ae30:	ec45 4b10 	vmov	d0, r4, r5
 800ae34:	f000 fe61 	bl	800bafa <finite>
 800ae38:	b338      	cbz	r0, 800ae8a <pow+0xa2>
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4620      	mov	r0, r4
 800ae40:	4629      	mov	r1, r5
 800ae42:	f7f5 fe43 	bl	8000acc <__aeabi_dcmplt>
 800ae46:	b300      	cbz	r0, 800ae8a <pow+0xa2>
 800ae48:	f7fe fe50 	bl	8009aec <__errno>
 800ae4c:	2322      	movs	r3, #34	; 0x22
 800ae4e:	e01b      	b.n	800ae88 <pow+0xa0>
 800ae50:	ec47 6b10 	vmov	d0, r6, r7
 800ae54:	f000 fe51 	bl	800bafa <finite>
 800ae58:	b9e0      	cbnz	r0, 800ae94 <pow+0xac>
 800ae5a:	eeb0 0a48 	vmov.f32	s0, s16
 800ae5e:	eef0 0a68 	vmov.f32	s1, s17
 800ae62:	f000 fe4a 	bl	800bafa <finite>
 800ae66:	b1a8      	cbz	r0, 800ae94 <pow+0xac>
 800ae68:	ec45 4b10 	vmov	d0, r4, r5
 800ae6c:	f000 fe45 	bl	800bafa <finite>
 800ae70:	b180      	cbz	r0, 800ae94 <pow+0xac>
 800ae72:	4632      	mov	r2, r6
 800ae74:	463b      	mov	r3, r7
 800ae76:	4630      	mov	r0, r6
 800ae78:	4639      	mov	r1, r7
 800ae7a:	f7f5 fe4f 	bl	8000b1c <__aeabi_dcmpun>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d0e2      	beq.n	800ae48 <pow+0x60>
 800ae82:	f7fe fe33 	bl	8009aec <__errno>
 800ae86:	2321      	movs	r3, #33	; 0x21
 800ae88:	6003      	str	r3, [r0, #0]
 800ae8a:	ecbd 8b02 	vpop	{d8}
 800ae8e:	ec47 6b10 	vmov	d0, r6, r7
 800ae92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae94:	2200      	movs	r2, #0
 800ae96:	2300      	movs	r3, #0
 800ae98:	4630      	mov	r0, r6
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	f7f5 fe0c 	bl	8000ab8 <__aeabi_dcmpeq>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d0f2      	beq.n	800ae8a <pow+0xa2>
 800aea4:	eeb0 0a48 	vmov.f32	s0, s16
 800aea8:	eef0 0a68 	vmov.f32	s1, s17
 800aeac:	f000 fe25 	bl	800bafa <finite>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d0ea      	beq.n	800ae8a <pow+0xa2>
 800aeb4:	ec45 4b10 	vmov	d0, r4, r5
 800aeb8:	f000 fe1f 	bl	800bafa <finite>
 800aebc:	e7c3      	b.n	800ae46 <pow+0x5e>
 800aebe:	4f01      	ldr	r7, [pc, #4]	; (800aec4 <pow+0xdc>)
 800aec0:	2600      	movs	r6, #0
 800aec2:	e7e2      	b.n	800ae8a <pow+0xa2>
 800aec4:	3ff00000 	.word	0x3ff00000

0800aec8 <__ieee754_pow>:
 800aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	ed2d 8b06 	vpush	{d8-d10}
 800aed0:	b089      	sub	sp, #36	; 0x24
 800aed2:	ed8d 1b00 	vstr	d1, [sp]
 800aed6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800aeda:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800aede:	ea58 0102 	orrs.w	r1, r8, r2
 800aee2:	ec57 6b10 	vmov	r6, r7, d0
 800aee6:	d115      	bne.n	800af14 <__ieee754_pow+0x4c>
 800aee8:	19b3      	adds	r3, r6, r6
 800aeea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800aeee:	4152      	adcs	r2, r2
 800aef0:	4299      	cmp	r1, r3
 800aef2:	4b89      	ldr	r3, [pc, #548]	; (800b118 <__ieee754_pow+0x250>)
 800aef4:	4193      	sbcs	r3, r2
 800aef6:	f080 84d2 	bcs.w	800b89e <__ieee754_pow+0x9d6>
 800aefa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aefe:	4630      	mov	r0, r6
 800af00:	4639      	mov	r1, r7
 800af02:	f7f5 f9bb 	bl	800027c <__adddf3>
 800af06:	ec41 0b10 	vmov	d0, r0, r1
 800af0a:	b009      	add	sp, #36	; 0x24
 800af0c:	ecbd 8b06 	vpop	{d8-d10}
 800af10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af14:	4b81      	ldr	r3, [pc, #516]	; (800b11c <__ieee754_pow+0x254>)
 800af16:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800af1a:	429c      	cmp	r4, r3
 800af1c:	ee10 aa10 	vmov	sl, s0
 800af20:	463d      	mov	r5, r7
 800af22:	dc06      	bgt.n	800af32 <__ieee754_pow+0x6a>
 800af24:	d101      	bne.n	800af2a <__ieee754_pow+0x62>
 800af26:	2e00      	cmp	r6, #0
 800af28:	d1e7      	bne.n	800aefa <__ieee754_pow+0x32>
 800af2a:	4598      	cmp	r8, r3
 800af2c:	dc01      	bgt.n	800af32 <__ieee754_pow+0x6a>
 800af2e:	d10f      	bne.n	800af50 <__ieee754_pow+0x88>
 800af30:	b172      	cbz	r2, 800af50 <__ieee754_pow+0x88>
 800af32:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800af36:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800af3a:	ea55 050a 	orrs.w	r5, r5, sl
 800af3e:	d1dc      	bne.n	800aefa <__ieee754_pow+0x32>
 800af40:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af44:	18db      	adds	r3, r3, r3
 800af46:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800af4a:	4152      	adcs	r2, r2
 800af4c:	429d      	cmp	r5, r3
 800af4e:	e7d0      	b.n	800aef2 <__ieee754_pow+0x2a>
 800af50:	2d00      	cmp	r5, #0
 800af52:	da3b      	bge.n	800afcc <__ieee754_pow+0x104>
 800af54:	4b72      	ldr	r3, [pc, #456]	; (800b120 <__ieee754_pow+0x258>)
 800af56:	4598      	cmp	r8, r3
 800af58:	dc51      	bgt.n	800affe <__ieee754_pow+0x136>
 800af5a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800af5e:	4598      	cmp	r8, r3
 800af60:	f340 84ac 	ble.w	800b8bc <__ieee754_pow+0x9f4>
 800af64:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af6c:	2b14      	cmp	r3, #20
 800af6e:	dd0f      	ble.n	800af90 <__ieee754_pow+0xc8>
 800af70:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800af74:	fa22 f103 	lsr.w	r1, r2, r3
 800af78:	fa01 f303 	lsl.w	r3, r1, r3
 800af7c:	4293      	cmp	r3, r2
 800af7e:	f040 849d 	bne.w	800b8bc <__ieee754_pow+0x9f4>
 800af82:	f001 0101 	and.w	r1, r1, #1
 800af86:	f1c1 0302 	rsb	r3, r1, #2
 800af8a:	9304      	str	r3, [sp, #16]
 800af8c:	b182      	cbz	r2, 800afb0 <__ieee754_pow+0xe8>
 800af8e:	e05f      	b.n	800b050 <__ieee754_pow+0x188>
 800af90:	2a00      	cmp	r2, #0
 800af92:	d15b      	bne.n	800b04c <__ieee754_pow+0x184>
 800af94:	f1c3 0314 	rsb	r3, r3, #20
 800af98:	fa48 f103 	asr.w	r1, r8, r3
 800af9c:	fa01 f303 	lsl.w	r3, r1, r3
 800afa0:	4543      	cmp	r3, r8
 800afa2:	f040 8488 	bne.w	800b8b6 <__ieee754_pow+0x9ee>
 800afa6:	f001 0101 	and.w	r1, r1, #1
 800afaa:	f1c1 0302 	rsb	r3, r1, #2
 800afae:	9304      	str	r3, [sp, #16]
 800afb0:	4b5c      	ldr	r3, [pc, #368]	; (800b124 <__ieee754_pow+0x25c>)
 800afb2:	4598      	cmp	r8, r3
 800afb4:	d132      	bne.n	800b01c <__ieee754_pow+0x154>
 800afb6:	f1b9 0f00 	cmp.w	r9, #0
 800afba:	f280 8478 	bge.w	800b8ae <__ieee754_pow+0x9e6>
 800afbe:	4959      	ldr	r1, [pc, #356]	; (800b124 <__ieee754_pow+0x25c>)
 800afc0:	4632      	mov	r2, r6
 800afc2:	463b      	mov	r3, r7
 800afc4:	2000      	movs	r0, #0
 800afc6:	f7f5 fc39 	bl	800083c <__aeabi_ddiv>
 800afca:	e79c      	b.n	800af06 <__ieee754_pow+0x3e>
 800afcc:	2300      	movs	r3, #0
 800afce:	9304      	str	r3, [sp, #16]
 800afd0:	2a00      	cmp	r2, #0
 800afd2:	d13d      	bne.n	800b050 <__ieee754_pow+0x188>
 800afd4:	4b51      	ldr	r3, [pc, #324]	; (800b11c <__ieee754_pow+0x254>)
 800afd6:	4598      	cmp	r8, r3
 800afd8:	d1ea      	bne.n	800afb0 <__ieee754_pow+0xe8>
 800afda:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800afde:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800afe2:	ea53 030a 	orrs.w	r3, r3, sl
 800afe6:	f000 845a 	beq.w	800b89e <__ieee754_pow+0x9d6>
 800afea:	4b4f      	ldr	r3, [pc, #316]	; (800b128 <__ieee754_pow+0x260>)
 800afec:	429c      	cmp	r4, r3
 800afee:	dd08      	ble.n	800b002 <__ieee754_pow+0x13a>
 800aff0:	f1b9 0f00 	cmp.w	r9, #0
 800aff4:	f2c0 8457 	blt.w	800b8a6 <__ieee754_pow+0x9de>
 800aff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800affc:	e783      	b.n	800af06 <__ieee754_pow+0x3e>
 800affe:	2302      	movs	r3, #2
 800b000:	e7e5      	b.n	800afce <__ieee754_pow+0x106>
 800b002:	f1b9 0f00 	cmp.w	r9, #0
 800b006:	f04f 0000 	mov.w	r0, #0
 800b00a:	f04f 0100 	mov.w	r1, #0
 800b00e:	f6bf af7a 	bge.w	800af06 <__ieee754_pow+0x3e>
 800b012:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b016:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b01a:	e774      	b.n	800af06 <__ieee754_pow+0x3e>
 800b01c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b020:	d106      	bne.n	800b030 <__ieee754_pow+0x168>
 800b022:	4632      	mov	r2, r6
 800b024:	463b      	mov	r3, r7
 800b026:	4630      	mov	r0, r6
 800b028:	4639      	mov	r1, r7
 800b02a:	f7f5 fadd 	bl	80005e8 <__aeabi_dmul>
 800b02e:	e76a      	b.n	800af06 <__ieee754_pow+0x3e>
 800b030:	4b3e      	ldr	r3, [pc, #248]	; (800b12c <__ieee754_pow+0x264>)
 800b032:	4599      	cmp	r9, r3
 800b034:	d10c      	bne.n	800b050 <__ieee754_pow+0x188>
 800b036:	2d00      	cmp	r5, #0
 800b038:	db0a      	blt.n	800b050 <__ieee754_pow+0x188>
 800b03a:	ec47 6b10 	vmov	d0, r6, r7
 800b03e:	b009      	add	sp, #36	; 0x24
 800b040:	ecbd 8b06 	vpop	{d8-d10}
 800b044:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b048:	f000 bc6c 	b.w	800b924 <__ieee754_sqrt>
 800b04c:	2300      	movs	r3, #0
 800b04e:	9304      	str	r3, [sp, #16]
 800b050:	ec47 6b10 	vmov	d0, r6, r7
 800b054:	f000 fd48 	bl	800bae8 <fabs>
 800b058:	ec51 0b10 	vmov	r0, r1, d0
 800b05c:	f1ba 0f00 	cmp.w	sl, #0
 800b060:	d129      	bne.n	800b0b6 <__ieee754_pow+0x1ee>
 800b062:	b124      	cbz	r4, 800b06e <__ieee754_pow+0x1a6>
 800b064:	4b2f      	ldr	r3, [pc, #188]	; (800b124 <__ieee754_pow+0x25c>)
 800b066:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d123      	bne.n	800b0b6 <__ieee754_pow+0x1ee>
 800b06e:	f1b9 0f00 	cmp.w	r9, #0
 800b072:	da05      	bge.n	800b080 <__ieee754_pow+0x1b8>
 800b074:	4602      	mov	r2, r0
 800b076:	460b      	mov	r3, r1
 800b078:	2000      	movs	r0, #0
 800b07a:	492a      	ldr	r1, [pc, #168]	; (800b124 <__ieee754_pow+0x25c>)
 800b07c:	f7f5 fbde 	bl	800083c <__aeabi_ddiv>
 800b080:	2d00      	cmp	r5, #0
 800b082:	f6bf af40 	bge.w	800af06 <__ieee754_pow+0x3e>
 800b086:	9b04      	ldr	r3, [sp, #16]
 800b088:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b08c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b090:	4323      	orrs	r3, r4
 800b092:	d108      	bne.n	800b0a6 <__ieee754_pow+0x1de>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	4610      	mov	r0, r2
 800b09a:	4619      	mov	r1, r3
 800b09c:	f7f5 f8ec 	bl	8000278 <__aeabi_dsub>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	e78f      	b.n	800afc6 <__ieee754_pow+0xfe>
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	f47f af2c 	bne.w	800af06 <__ieee754_pow+0x3e>
 800b0ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	e727      	b.n	800af06 <__ieee754_pow+0x3e>
 800b0b6:	0feb      	lsrs	r3, r5, #31
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	9306      	str	r3, [sp, #24]
 800b0bc:	9a06      	ldr	r2, [sp, #24]
 800b0be:	9b04      	ldr	r3, [sp, #16]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	d102      	bne.n	800b0ca <__ieee754_pow+0x202>
 800b0c4:	4632      	mov	r2, r6
 800b0c6:	463b      	mov	r3, r7
 800b0c8:	e7e6      	b.n	800b098 <__ieee754_pow+0x1d0>
 800b0ca:	4b19      	ldr	r3, [pc, #100]	; (800b130 <__ieee754_pow+0x268>)
 800b0cc:	4598      	cmp	r8, r3
 800b0ce:	f340 80fb 	ble.w	800b2c8 <__ieee754_pow+0x400>
 800b0d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b0d6:	4598      	cmp	r8, r3
 800b0d8:	4b13      	ldr	r3, [pc, #76]	; (800b128 <__ieee754_pow+0x260>)
 800b0da:	dd0c      	ble.n	800b0f6 <__ieee754_pow+0x22e>
 800b0dc:	429c      	cmp	r4, r3
 800b0de:	dc0f      	bgt.n	800b100 <__ieee754_pow+0x238>
 800b0e0:	f1b9 0f00 	cmp.w	r9, #0
 800b0e4:	da0f      	bge.n	800b106 <__ieee754_pow+0x23e>
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	b009      	add	sp, #36	; 0x24
 800b0ea:	ecbd 8b06 	vpop	{d8-d10}
 800b0ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f2:	f000 bcf0 	b.w	800bad6 <__math_oflow>
 800b0f6:	429c      	cmp	r4, r3
 800b0f8:	dbf2      	blt.n	800b0e0 <__ieee754_pow+0x218>
 800b0fa:	4b0a      	ldr	r3, [pc, #40]	; (800b124 <__ieee754_pow+0x25c>)
 800b0fc:	429c      	cmp	r4, r3
 800b0fe:	dd19      	ble.n	800b134 <__ieee754_pow+0x26c>
 800b100:	f1b9 0f00 	cmp.w	r9, #0
 800b104:	dcef      	bgt.n	800b0e6 <__ieee754_pow+0x21e>
 800b106:	2000      	movs	r0, #0
 800b108:	b009      	add	sp, #36	; 0x24
 800b10a:	ecbd 8b06 	vpop	{d8-d10}
 800b10e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b112:	f000 bcd7 	b.w	800bac4 <__math_uflow>
 800b116:	bf00      	nop
 800b118:	fff00000 	.word	0xfff00000
 800b11c:	7ff00000 	.word	0x7ff00000
 800b120:	433fffff 	.word	0x433fffff
 800b124:	3ff00000 	.word	0x3ff00000
 800b128:	3fefffff 	.word	0x3fefffff
 800b12c:	3fe00000 	.word	0x3fe00000
 800b130:	41e00000 	.word	0x41e00000
 800b134:	4b60      	ldr	r3, [pc, #384]	; (800b2b8 <__ieee754_pow+0x3f0>)
 800b136:	2200      	movs	r2, #0
 800b138:	f7f5 f89e 	bl	8000278 <__aeabi_dsub>
 800b13c:	a354      	add	r3, pc, #336	; (adr r3, 800b290 <__ieee754_pow+0x3c8>)
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	4604      	mov	r4, r0
 800b144:	460d      	mov	r5, r1
 800b146:	f7f5 fa4f 	bl	80005e8 <__aeabi_dmul>
 800b14a:	a353      	add	r3, pc, #332	; (adr r3, 800b298 <__ieee754_pow+0x3d0>)
 800b14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b150:	4606      	mov	r6, r0
 800b152:	460f      	mov	r7, r1
 800b154:	4620      	mov	r0, r4
 800b156:	4629      	mov	r1, r5
 800b158:	f7f5 fa46 	bl	80005e8 <__aeabi_dmul>
 800b15c:	4b57      	ldr	r3, [pc, #348]	; (800b2bc <__ieee754_pow+0x3f4>)
 800b15e:	4682      	mov	sl, r0
 800b160:	468b      	mov	fp, r1
 800b162:	2200      	movs	r2, #0
 800b164:	4620      	mov	r0, r4
 800b166:	4629      	mov	r1, r5
 800b168:	f7f5 fa3e 	bl	80005e8 <__aeabi_dmul>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	a14b      	add	r1, pc, #300	; (adr r1, 800b2a0 <__ieee754_pow+0x3d8>)
 800b172:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b176:	f7f5 f87f 	bl	8000278 <__aeabi_dsub>
 800b17a:	4622      	mov	r2, r4
 800b17c:	462b      	mov	r3, r5
 800b17e:	f7f5 fa33 	bl	80005e8 <__aeabi_dmul>
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	2000      	movs	r0, #0
 800b188:	494d      	ldr	r1, [pc, #308]	; (800b2c0 <__ieee754_pow+0x3f8>)
 800b18a:	f7f5 f875 	bl	8000278 <__aeabi_dsub>
 800b18e:	4622      	mov	r2, r4
 800b190:	4680      	mov	r8, r0
 800b192:	4689      	mov	r9, r1
 800b194:	462b      	mov	r3, r5
 800b196:	4620      	mov	r0, r4
 800b198:	4629      	mov	r1, r5
 800b19a:	f7f5 fa25 	bl	80005e8 <__aeabi_dmul>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	f7f5 fa1f 	bl	80005e8 <__aeabi_dmul>
 800b1aa:	a33f      	add	r3, pc, #252	; (adr r3, 800b2a8 <__ieee754_pow+0x3e0>)
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	f7f5 fa1a 	bl	80005e8 <__aeabi_dmul>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4650      	mov	r0, sl
 800b1ba:	4659      	mov	r1, fp
 800b1bc:	f7f5 f85c 	bl	8000278 <__aeabi_dsub>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	4689      	mov	r9, r1
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	f7f5 f856 	bl	800027c <__adddf3>
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	4632      	mov	r2, r6
 800b1d4:	463b      	mov	r3, r7
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	460d      	mov	r5, r1
 800b1da:	f7f5 f84d 	bl	8000278 <__aeabi_dsub>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	4640      	mov	r0, r8
 800b1e4:	4649      	mov	r1, r9
 800b1e6:	f7f5 f847 	bl	8000278 <__aeabi_dsub>
 800b1ea:	9b04      	ldr	r3, [sp, #16]
 800b1ec:	9a06      	ldr	r2, [sp, #24]
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	4682      	mov	sl, r0
 800b1f4:	468b      	mov	fp, r1
 800b1f6:	f040 81e7 	bne.w	800b5c8 <__ieee754_pow+0x700>
 800b1fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b2b0 <__ieee754_pow+0x3e8>
 800b1fe:	eeb0 8a47 	vmov.f32	s16, s14
 800b202:	eef0 8a67 	vmov.f32	s17, s15
 800b206:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b20a:	2600      	movs	r6, #0
 800b20c:	4632      	mov	r2, r6
 800b20e:	463b      	mov	r3, r7
 800b210:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b214:	f7f5 f830 	bl	8000278 <__aeabi_dsub>
 800b218:	4622      	mov	r2, r4
 800b21a:	462b      	mov	r3, r5
 800b21c:	f7f5 f9e4 	bl	80005e8 <__aeabi_dmul>
 800b220:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b224:	4680      	mov	r8, r0
 800b226:	4689      	mov	r9, r1
 800b228:	4650      	mov	r0, sl
 800b22a:	4659      	mov	r1, fp
 800b22c:	f7f5 f9dc 	bl	80005e8 <__aeabi_dmul>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4640      	mov	r0, r8
 800b236:	4649      	mov	r1, r9
 800b238:	f7f5 f820 	bl	800027c <__adddf3>
 800b23c:	4632      	mov	r2, r6
 800b23e:	463b      	mov	r3, r7
 800b240:	4680      	mov	r8, r0
 800b242:	4689      	mov	r9, r1
 800b244:	4620      	mov	r0, r4
 800b246:	4629      	mov	r1, r5
 800b248:	f7f5 f9ce 	bl	80005e8 <__aeabi_dmul>
 800b24c:	460b      	mov	r3, r1
 800b24e:	4604      	mov	r4, r0
 800b250:	460d      	mov	r5, r1
 800b252:	4602      	mov	r2, r0
 800b254:	4649      	mov	r1, r9
 800b256:	4640      	mov	r0, r8
 800b258:	f7f5 f810 	bl	800027c <__adddf3>
 800b25c:	4b19      	ldr	r3, [pc, #100]	; (800b2c4 <__ieee754_pow+0x3fc>)
 800b25e:	4299      	cmp	r1, r3
 800b260:	ec45 4b19 	vmov	d9, r4, r5
 800b264:	4606      	mov	r6, r0
 800b266:	460f      	mov	r7, r1
 800b268:	468b      	mov	fp, r1
 800b26a:	f340 82f1 	ble.w	800b850 <__ieee754_pow+0x988>
 800b26e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b272:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b276:	4303      	orrs	r3, r0
 800b278:	f000 81e4 	beq.w	800b644 <__ieee754_pow+0x77c>
 800b27c:	ec51 0b18 	vmov	r0, r1, d8
 800b280:	2200      	movs	r2, #0
 800b282:	2300      	movs	r3, #0
 800b284:	f7f5 fc22 	bl	8000acc <__aeabi_dcmplt>
 800b288:	3800      	subs	r0, #0
 800b28a:	bf18      	it	ne
 800b28c:	2001      	movne	r0, #1
 800b28e:	e72b      	b.n	800b0e8 <__ieee754_pow+0x220>
 800b290:	60000000 	.word	0x60000000
 800b294:	3ff71547 	.word	0x3ff71547
 800b298:	f85ddf44 	.word	0xf85ddf44
 800b29c:	3e54ae0b 	.word	0x3e54ae0b
 800b2a0:	55555555 	.word	0x55555555
 800b2a4:	3fd55555 	.word	0x3fd55555
 800b2a8:	652b82fe 	.word	0x652b82fe
 800b2ac:	3ff71547 	.word	0x3ff71547
 800b2b0:	00000000 	.word	0x00000000
 800b2b4:	bff00000 	.word	0xbff00000
 800b2b8:	3ff00000 	.word	0x3ff00000
 800b2bc:	3fd00000 	.word	0x3fd00000
 800b2c0:	3fe00000 	.word	0x3fe00000
 800b2c4:	408fffff 	.word	0x408fffff
 800b2c8:	4bd5      	ldr	r3, [pc, #852]	; (800b620 <__ieee754_pow+0x758>)
 800b2ca:	402b      	ands	r3, r5
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	b92b      	cbnz	r3, 800b2dc <__ieee754_pow+0x414>
 800b2d0:	4bd4      	ldr	r3, [pc, #848]	; (800b624 <__ieee754_pow+0x75c>)
 800b2d2:	f7f5 f989 	bl	80005e8 <__aeabi_dmul>
 800b2d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b2da:	460c      	mov	r4, r1
 800b2dc:	1523      	asrs	r3, r4, #20
 800b2de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b2e2:	4413      	add	r3, r2
 800b2e4:	9305      	str	r3, [sp, #20]
 800b2e6:	4bd0      	ldr	r3, [pc, #832]	; (800b628 <__ieee754_pow+0x760>)
 800b2e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b2ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b2f0:	429c      	cmp	r4, r3
 800b2f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b2f6:	dd08      	ble.n	800b30a <__ieee754_pow+0x442>
 800b2f8:	4bcc      	ldr	r3, [pc, #816]	; (800b62c <__ieee754_pow+0x764>)
 800b2fa:	429c      	cmp	r4, r3
 800b2fc:	f340 8162 	ble.w	800b5c4 <__ieee754_pow+0x6fc>
 800b300:	9b05      	ldr	r3, [sp, #20]
 800b302:	3301      	adds	r3, #1
 800b304:	9305      	str	r3, [sp, #20]
 800b306:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b30a:	2400      	movs	r4, #0
 800b30c:	00e3      	lsls	r3, r4, #3
 800b30e:	9307      	str	r3, [sp, #28]
 800b310:	4bc7      	ldr	r3, [pc, #796]	; (800b630 <__ieee754_pow+0x768>)
 800b312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b316:	ed93 7b00 	vldr	d7, [r3]
 800b31a:	4629      	mov	r1, r5
 800b31c:	ec53 2b17 	vmov	r2, r3, d7
 800b320:	eeb0 9a47 	vmov.f32	s18, s14
 800b324:	eef0 9a67 	vmov.f32	s19, s15
 800b328:	4682      	mov	sl, r0
 800b32a:	f7f4 ffa5 	bl	8000278 <__aeabi_dsub>
 800b32e:	4652      	mov	r2, sl
 800b330:	4606      	mov	r6, r0
 800b332:	460f      	mov	r7, r1
 800b334:	462b      	mov	r3, r5
 800b336:	ec51 0b19 	vmov	r0, r1, d9
 800b33a:	f7f4 ff9f 	bl	800027c <__adddf3>
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	2000      	movs	r0, #0
 800b344:	49bb      	ldr	r1, [pc, #748]	; (800b634 <__ieee754_pow+0x76c>)
 800b346:	f7f5 fa79 	bl	800083c <__aeabi_ddiv>
 800b34a:	ec41 0b1a 	vmov	d10, r0, r1
 800b34e:	4602      	mov	r2, r0
 800b350:	460b      	mov	r3, r1
 800b352:	4630      	mov	r0, r6
 800b354:	4639      	mov	r1, r7
 800b356:	f7f5 f947 	bl	80005e8 <__aeabi_dmul>
 800b35a:	2300      	movs	r3, #0
 800b35c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b360:	9302      	str	r3, [sp, #8]
 800b362:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b366:	46ab      	mov	fp, r5
 800b368:	106d      	asrs	r5, r5, #1
 800b36a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b36e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b372:	ec41 0b18 	vmov	d8, r0, r1
 800b376:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b37a:	2200      	movs	r2, #0
 800b37c:	4640      	mov	r0, r8
 800b37e:	4649      	mov	r1, r9
 800b380:	4614      	mov	r4, r2
 800b382:	461d      	mov	r5, r3
 800b384:	f7f5 f930 	bl	80005e8 <__aeabi_dmul>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4630      	mov	r0, r6
 800b38e:	4639      	mov	r1, r7
 800b390:	f7f4 ff72 	bl	8000278 <__aeabi_dsub>
 800b394:	ec53 2b19 	vmov	r2, r3, d9
 800b398:	4606      	mov	r6, r0
 800b39a:	460f      	mov	r7, r1
 800b39c:	4620      	mov	r0, r4
 800b39e:	4629      	mov	r1, r5
 800b3a0:	f7f4 ff6a 	bl	8000278 <__aeabi_dsub>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4650      	mov	r0, sl
 800b3aa:	4659      	mov	r1, fp
 800b3ac:	f7f4 ff64 	bl	8000278 <__aeabi_dsub>
 800b3b0:	4642      	mov	r2, r8
 800b3b2:	464b      	mov	r3, r9
 800b3b4:	f7f5 f918 	bl	80005e8 <__aeabi_dmul>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	4630      	mov	r0, r6
 800b3be:	4639      	mov	r1, r7
 800b3c0:	f7f4 ff5a 	bl	8000278 <__aeabi_dsub>
 800b3c4:	ec53 2b1a 	vmov	r2, r3, d10
 800b3c8:	f7f5 f90e 	bl	80005e8 <__aeabi_dmul>
 800b3cc:	ec53 2b18 	vmov	r2, r3, d8
 800b3d0:	ec41 0b19 	vmov	d9, r0, r1
 800b3d4:	ec51 0b18 	vmov	r0, r1, d8
 800b3d8:	f7f5 f906 	bl	80005e8 <__aeabi_dmul>
 800b3dc:	a37c      	add	r3, pc, #496	; (adr r3, 800b5d0 <__ieee754_pow+0x708>)
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	460d      	mov	r5, r1
 800b3e6:	f7f5 f8ff 	bl	80005e8 <__aeabi_dmul>
 800b3ea:	a37b      	add	r3, pc, #492	; (adr r3, 800b5d8 <__ieee754_pow+0x710>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f7f4 ff44 	bl	800027c <__adddf3>
 800b3f4:	4622      	mov	r2, r4
 800b3f6:	462b      	mov	r3, r5
 800b3f8:	f7f5 f8f6 	bl	80005e8 <__aeabi_dmul>
 800b3fc:	a378      	add	r3, pc, #480	; (adr r3, 800b5e0 <__ieee754_pow+0x718>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f7f4 ff3b 	bl	800027c <__adddf3>
 800b406:	4622      	mov	r2, r4
 800b408:	462b      	mov	r3, r5
 800b40a:	f7f5 f8ed 	bl	80005e8 <__aeabi_dmul>
 800b40e:	a376      	add	r3, pc, #472	; (adr r3, 800b5e8 <__ieee754_pow+0x720>)
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	f7f4 ff32 	bl	800027c <__adddf3>
 800b418:	4622      	mov	r2, r4
 800b41a:	462b      	mov	r3, r5
 800b41c:	f7f5 f8e4 	bl	80005e8 <__aeabi_dmul>
 800b420:	a373      	add	r3, pc, #460	; (adr r3, 800b5f0 <__ieee754_pow+0x728>)
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	f7f4 ff29 	bl	800027c <__adddf3>
 800b42a:	4622      	mov	r2, r4
 800b42c:	462b      	mov	r3, r5
 800b42e:	f7f5 f8db 	bl	80005e8 <__aeabi_dmul>
 800b432:	a371      	add	r3, pc, #452	; (adr r3, 800b5f8 <__ieee754_pow+0x730>)
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	f7f4 ff20 	bl	800027c <__adddf3>
 800b43c:	4622      	mov	r2, r4
 800b43e:	4606      	mov	r6, r0
 800b440:	460f      	mov	r7, r1
 800b442:	462b      	mov	r3, r5
 800b444:	4620      	mov	r0, r4
 800b446:	4629      	mov	r1, r5
 800b448:	f7f5 f8ce 	bl	80005e8 <__aeabi_dmul>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4630      	mov	r0, r6
 800b452:	4639      	mov	r1, r7
 800b454:	f7f5 f8c8 	bl	80005e8 <__aeabi_dmul>
 800b458:	4642      	mov	r2, r8
 800b45a:	4604      	mov	r4, r0
 800b45c:	460d      	mov	r5, r1
 800b45e:	464b      	mov	r3, r9
 800b460:	ec51 0b18 	vmov	r0, r1, d8
 800b464:	f7f4 ff0a 	bl	800027c <__adddf3>
 800b468:	ec53 2b19 	vmov	r2, r3, d9
 800b46c:	f7f5 f8bc 	bl	80005e8 <__aeabi_dmul>
 800b470:	4622      	mov	r2, r4
 800b472:	462b      	mov	r3, r5
 800b474:	f7f4 ff02 	bl	800027c <__adddf3>
 800b478:	4642      	mov	r2, r8
 800b47a:	4682      	mov	sl, r0
 800b47c:	468b      	mov	fp, r1
 800b47e:	464b      	mov	r3, r9
 800b480:	4640      	mov	r0, r8
 800b482:	4649      	mov	r1, r9
 800b484:	f7f5 f8b0 	bl	80005e8 <__aeabi_dmul>
 800b488:	4b6b      	ldr	r3, [pc, #428]	; (800b638 <__ieee754_pow+0x770>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	4606      	mov	r6, r0
 800b48e:	460f      	mov	r7, r1
 800b490:	f7f4 fef4 	bl	800027c <__adddf3>
 800b494:	4652      	mov	r2, sl
 800b496:	465b      	mov	r3, fp
 800b498:	f7f4 fef0 	bl	800027c <__adddf3>
 800b49c:	2000      	movs	r0, #0
 800b49e:	4604      	mov	r4, r0
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	f7f5 f89d 	bl	80005e8 <__aeabi_dmul>
 800b4ae:	4b62      	ldr	r3, [pc, #392]	; (800b638 <__ieee754_pow+0x770>)
 800b4b0:	4680      	mov	r8, r0
 800b4b2:	4689      	mov	r9, r1
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	f7f4 fedd 	bl	8000278 <__aeabi_dsub>
 800b4be:	4632      	mov	r2, r6
 800b4c0:	463b      	mov	r3, r7
 800b4c2:	f7f4 fed9 	bl	8000278 <__aeabi_dsub>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4650      	mov	r0, sl
 800b4cc:	4659      	mov	r1, fp
 800b4ce:	f7f4 fed3 	bl	8000278 <__aeabi_dsub>
 800b4d2:	ec53 2b18 	vmov	r2, r3, d8
 800b4d6:	f7f5 f887 	bl	80005e8 <__aeabi_dmul>
 800b4da:	4622      	mov	r2, r4
 800b4dc:	4606      	mov	r6, r0
 800b4de:	460f      	mov	r7, r1
 800b4e0:	462b      	mov	r3, r5
 800b4e2:	ec51 0b19 	vmov	r0, r1, d9
 800b4e6:	f7f5 f87f 	bl	80005e8 <__aeabi_dmul>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	4639      	mov	r1, r7
 800b4f2:	f7f4 fec3 	bl	800027c <__adddf3>
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	460f      	mov	r7, r1
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4640      	mov	r0, r8
 800b500:	4649      	mov	r1, r9
 800b502:	f7f4 febb 	bl	800027c <__adddf3>
 800b506:	a33e      	add	r3, pc, #248	; (adr r3, 800b600 <__ieee754_pow+0x738>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	2000      	movs	r0, #0
 800b50e:	4604      	mov	r4, r0
 800b510:	460d      	mov	r5, r1
 800b512:	f7f5 f869 	bl	80005e8 <__aeabi_dmul>
 800b516:	4642      	mov	r2, r8
 800b518:	ec41 0b18 	vmov	d8, r0, r1
 800b51c:	464b      	mov	r3, r9
 800b51e:	4620      	mov	r0, r4
 800b520:	4629      	mov	r1, r5
 800b522:	f7f4 fea9 	bl	8000278 <__aeabi_dsub>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	4630      	mov	r0, r6
 800b52c:	4639      	mov	r1, r7
 800b52e:	f7f4 fea3 	bl	8000278 <__aeabi_dsub>
 800b532:	a335      	add	r3, pc, #212	; (adr r3, 800b608 <__ieee754_pow+0x740>)
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	f7f5 f856 	bl	80005e8 <__aeabi_dmul>
 800b53c:	a334      	add	r3, pc, #208	; (adr r3, 800b610 <__ieee754_pow+0x748>)
 800b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b542:	4606      	mov	r6, r0
 800b544:	460f      	mov	r7, r1
 800b546:	4620      	mov	r0, r4
 800b548:	4629      	mov	r1, r5
 800b54a:	f7f5 f84d 	bl	80005e8 <__aeabi_dmul>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4630      	mov	r0, r6
 800b554:	4639      	mov	r1, r7
 800b556:	f7f4 fe91 	bl	800027c <__adddf3>
 800b55a:	9a07      	ldr	r2, [sp, #28]
 800b55c:	4b37      	ldr	r3, [pc, #220]	; (800b63c <__ieee754_pow+0x774>)
 800b55e:	4413      	add	r3, r2
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	f7f4 fe8a 	bl	800027c <__adddf3>
 800b568:	4682      	mov	sl, r0
 800b56a:	9805      	ldr	r0, [sp, #20]
 800b56c:	468b      	mov	fp, r1
 800b56e:	f7f4 ffd1 	bl	8000514 <__aeabi_i2d>
 800b572:	9a07      	ldr	r2, [sp, #28]
 800b574:	4b32      	ldr	r3, [pc, #200]	; (800b640 <__ieee754_pow+0x778>)
 800b576:	4413      	add	r3, r2
 800b578:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b57c:	4606      	mov	r6, r0
 800b57e:	460f      	mov	r7, r1
 800b580:	4652      	mov	r2, sl
 800b582:	465b      	mov	r3, fp
 800b584:	ec51 0b18 	vmov	r0, r1, d8
 800b588:	f7f4 fe78 	bl	800027c <__adddf3>
 800b58c:	4642      	mov	r2, r8
 800b58e:	464b      	mov	r3, r9
 800b590:	f7f4 fe74 	bl	800027c <__adddf3>
 800b594:	4632      	mov	r2, r6
 800b596:	463b      	mov	r3, r7
 800b598:	f7f4 fe70 	bl	800027c <__adddf3>
 800b59c:	2000      	movs	r0, #0
 800b59e:	4632      	mov	r2, r6
 800b5a0:	463b      	mov	r3, r7
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	460d      	mov	r5, r1
 800b5a6:	f7f4 fe67 	bl	8000278 <__aeabi_dsub>
 800b5aa:	4642      	mov	r2, r8
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	f7f4 fe63 	bl	8000278 <__aeabi_dsub>
 800b5b2:	ec53 2b18 	vmov	r2, r3, d8
 800b5b6:	f7f4 fe5f 	bl	8000278 <__aeabi_dsub>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	460b      	mov	r3, r1
 800b5be:	4650      	mov	r0, sl
 800b5c0:	4659      	mov	r1, fp
 800b5c2:	e610      	b.n	800b1e6 <__ieee754_pow+0x31e>
 800b5c4:	2401      	movs	r4, #1
 800b5c6:	e6a1      	b.n	800b30c <__ieee754_pow+0x444>
 800b5c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b618 <__ieee754_pow+0x750>
 800b5cc:	e617      	b.n	800b1fe <__ieee754_pow+0x336>
 800b5ce:	bf00      	nop
 800b5d0:	4a454eef 	.word	0x4a454eef
 800b5d4:	3fca7e28 	.word	0x3fca7e28
 800b5d8:	93c9db65 	.word	0x93c9db65
 800b5dc:	3fcd864a 	.word	0x3fcd864a
 800b5e0:	a91d4101 	.word	0xa91d4101
 800b5e4:	3fd17460 	.word	0x3fd17460
 800b5e8:	518f264d 	.word	0x518f264d
 800b5ec:	3fd55555 	.word	0x3fd55555
 800b5f0:	db6fabff 	.word	0xdb6fabff
 800b5f4:	3fdb6db6 	.word	0x3fdb6db6
 800b5f8:	33333303 	.word	0x33333303
 800b5fc:	3fe33333 	.word	0x3fe33333
 800b600:	e0000000 	.word	0xe0000000
 800b604:	3feec709 	.word	0x3feec709
 800b608:	dc3a03fd 	.word	0xdc3a03fd
 800b60c:	3feec709 	.word	0x3feec709
 800b610:	145b01f5 	.word	0x145b01f5
 800b614:	be3e2fe0 	.word	0xbe3e2fe0
 800b618:	00000000 	.word	0x00000000
 800b61c:	3ff00000 	.word	0x3ff00000
 800b620:	7ff00000 	.word	0x7ff00000
 800b624:	43400000 	.word	0x43400000
 800b628:	0003988e 	.word	0x0003988e
 800b62c:	000bb679 	.word	0x000bb679
 800b630:	0800be08 	.word	0x0800be08
 800b634:	3ff00000 	.word	0x3ff00000
 800b638:	40080000 	.word	0x40080000
 800b63c:	0800be28 	.word	0x0800be28
 800b640:	0800be18 	.word	0x0800be18
 800b644:	a3b5      	add	r3, pc, #724	; (adr r3, 800b91c <__ieee754_pow+0xa54>)
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	4640      	mov	r0, r8
 800b64c:	4649      	mov	r1, r9
 800b64e:	f7f4 fe15 	bl	800027c <__adddf3>
 800b652:	4622      	mov	r2, r4
 800b654:	ec41 0b1a 	vmov	d10, r0, r1
 800b658:	462b      	mov	r3, r5
 800b65a:	4630      	mov	r0, r6
 800b65c:	4639      	mov	r1, r7
 800b65e:	f7f4 fe0b 	bl	8000278 <__aeabi_dsub>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	ec51 0b1a 	vmov	r0, r1, d10
 800b66a:	f7f5 fa4d 	bl	8000b08 <__aeabi_dcmpgt>
 800b66e:	2800      	cmp	r0, #0
 800b670:	f47f ae04 	bne.w	800b27c <__ieee754_pow+0x3b4>
 800b674:	4aa4      	ldr	r2, [pc, #656]	; (800b908 <__ieee754_pow+0xa40>)
 800b676:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b67a:	4293      	cmp	r3, r2
 800b67c:	f340 8108 	ble.w	800b890 <__ieee754_pow+0x9c8>
 800b680:	151b      	asrs	r3, r3, #20
 800b682:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b686:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b68a:	fa4a f303 	asr.w	r3, sl, r3
 800b68e:	445b      	add	r3, fp
 800b690:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b694:	4e9d      	ldr	r6, [pc, #628]	; (800b90c <__ieee754_pow+0xa44>)
 800b696:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b69a:	4116      	asrs	r6, r2
 800b69c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	ea23 0106 	bic.w	r1, r3, r6
 800b6a6:	f1c2 0214 	rsb	r2, r2, #20
 800b6aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b6ae:	fa4a fa02 	asr.w	sl, sl, r2
 800b6b2:	f1bb 0f00 	cmp.w	fp, #0
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	4629      	mov	r1, r5
 800b6be:	bfb8      	it	lt
 800b6c0:	f1ca 0a00 	rsblt	sl, sl, #0
 800b6c4:	f7f4 fdd8 	bl	8000278 <__aeabi_dsub>
 800b6c8:	ec41 0b19 	vmov	d9, r0, r1
 800b6cc:	4642      	mov	r2, r8
 800b6ce:	464b      	mov	r3, r9
 800b6d0:	ec51 0b19 	vmov	r0, r1, d9
 800b6d4:	f7f4 fdd2 	bl	800027c <__adddf3>
 800b6d8:	a37b      	add	r3, pc, #492	; (adr r3, 800b8c8 <__ieee754_pow+0xa00>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	2000      	movs	r0, #0
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	460d      	mov	r5, r1
 800b6e4:	f7f4 ff80 	bl	80005e8 <__aeabi_dmul>
 800b6e8:	ec53 2b19 	vmov	r2, r3, d9
 800b6ec:	4606      	mov	r6, r0
 800b6ee:	460f      	mov	r7, r1
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	4629      	mov	r1, r5
 800b6f4:	f7f4 fdc0 	bl	8000278 <__aeabi_dsub>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4640      	mov	r0, r8
 800b6fe:	4649      	mov	r1, r9
 800b700:	f7f4 fdba 	bl	8000278 <__aeabi_dsub>
 800b704:	a372      	add	r3, pc, #456	; (adr r3, 800b8d0 <__ieee754_pow+0xa08>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	f7f4 ff6d 	bl	80005e8 <__aeabi_dmul>
 800b70e:	a372      	add	r3, pc, #456	; (adr r3, 800b8d8 <__ieee754_pow+0xa10>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	4680      	mov	r8, r0
 800b716:	4689      	mov	r9, r1
 800b718:	4620      	mov	r0, r4
 800b71a:	4629      	mov	r1, r5
 800b71c:	f7f4 ff64 	bl	80005e8 <__aeabi_dmul>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4640      	mov	r0, r8
 800b726:	4649      	mov	r1, r9
 800b728:	f7f4 fda8 	bl	800027c <__adddf3>
 800b72c:	4604      	mov	r4, r0
 800b72e:	460d      	mov	r5, r1
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4630      	mov	r0, r6
 800b736:	4639      	mov	r1, r7
 800b738:	f7f4 fda0 	bl	800027c <__adddf3>
 800b73c:	4632      	mov	r2, r6
 800b73e:	463b      	mov	r3, r7
 800b740:	4680      	mov	r8, r0
 800b742:	4689      	mov	r9, r1
 800b744:	f7f4 fd98 	bl	8000278 <__aeabi_dsub>
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	4620      	mov	r0, r4
 800b74e:	4629      	mov	r1, r5
 800b750:	f7f4 fd92 	bl	8000278 <__aeabi_dsub>
 800b754:	4642      	mov	r2, r8
 800b756:	4606      	mov	r6, r0
 800b758:	460f      	mov	r7, r1
 800b75a:	464b      	mov	r3, r9
 800b75c:	4640      	mov	r0, r8
 800b75e:	4649      	mov	r1, r9
 800b760:	f7f4 ff42 	bl	80005e8 <__aeabi_dmul>
 800b764:	a35e      	add	r3, pc, #376	; (adr r3, 800b8e0 <__ieee754_pow+0xa18>)
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	4604      	mov	r4, r0
 800b76c:	460d      	mov	r5, r1
 800b76e:	f7f4 ff3b 	bl	80005e8 <__aeabi_dmul>
 800b772:	a35d      	add	r3, pc, #372	; (adr r3, 800b8e8 <__ieee754_pow+0xa20>)
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	f7f4 fd7e 	bl	8000278 <__aeabi_dsub>
 800b77c:	4622      	mov	r2, r4
 800b77e:	462b      	mov	r3, r5
 800b780:	f7f4 ff32 	bl	80005e8 <__aeabi_dmul>
 800b784:	a35a      	add	r3, pc, #360	; (adr r3, 800b8f0 <__ieee754_pow+0xa28>)
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	f7f4 fd77 	bl	800027c <__adddf3>
 800b78e:	4622      	mov	r2, r4
 800b790:	462b      	mov	r3, r5
 800b792:	f7f4 ff29 	bl	80005e8 <__aeabi_dmul>
 800b796:	a358      	add	r3, pc, #352	; (adr r3, 800b8f8 <__ieee754_pow+0xa30>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	f7f4 fd6c 	bl	8000278 <__aeabi_dsub>
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	462b      	mov	r3, r5
 800b7a4:	f7f4 ff20 	bl	80005e8 <__aeabi_dmul>
 800b7a8:	a355      	add	r3, pc, #340	; (adr r3, 800b900 <__ieee754_pow+0xa38>)
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	f7f4 fd65 	bl	800027c <__adddf3>
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	462b      	mov	r3, r5
 800b7b6:	f7f4 ff17 	bl	80005e8 <__aeabi_dmul>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4640      	mov	r0, r8
 800b7c0:	4649      	mov	r1, r9
 800b7c2:	f7f4 fd59 	bl	8000278 <__aeabi_dsub>
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	460d      	mov	r5, r1
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	4640      	mov	r0, r8
 800b7d0:	4649      	mov	r1, r9
 800b7d2:	f7f4 ff09 	bl	80005e8 <__aeabi_dmul>
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	ec41 0b19 	vmov	d9, r0, r1
 800b7dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	f7f4 fd48 	bl	8000278 <__aeabi_dsub>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	ec51 0b19 	vmov	r0, r1, d9
 800b7f0:	f7f5 f824 	bl	800083c <__aeabi_ddiv>
 800b7f4:	4632      	mov	r2, r6
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	4649      	mov	r1, r9
 800b800:	f7f4 fef2 	bl	80005e8 <__aeabi_dmul>
 800b804:	4632      	mov	r2, r6
 800b806:	463b      	mov	r3, r7
 800b808:	f7f4 fd38 	bl	800027c <__adddf3>
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	4620      	mov	r0, r4
 800b812:	4629      	mov	r1, r5
 800b814:	f7f4 fd30 	bl	8000278 <__aeabi_dsub>
 800b818:	4642      	mov	r2, r8
 800b81a:	464b      	mov	r3, r9
 800b81c:	f7f4 fd2c 	bl	8000278 <__aeabi_dsub>
 800b820:	460b      	mov	r3, r1
 800b822:	4602      	mov	r2, r0
 800b824:	493a      	ldr	r1, [pc, #232]	; (800b910 <__ieee754_pow+0xa48>)
 800b826:	2000      	movs	r0, #0
 800b828:	f7f4 fd26 	bl	8000278 <__aeabi_dsub>
 800b82c:	ec41 0b10 	vmov	d0, r0, r1
 800b830:	ee10 3a90 	vmov	r3, s1
 800b834:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b83c:	da2b      	bge.n	800b896 <__ieee754_pow+0x9ce>
 800b83e:	4650      	mov	r0, sl
 800b840:	f000 f966 	bl	800bb10 <scalbn>
 800b844:	ec51 0b10 	vmov	r0, r1, d0
 800b848:	ec53 2b18 	vmov	r2, r3, d8
 800b84c:	f7ff bbed 	b.w	800b02a <__ieee754_pow+0x162>
 800b850:	4b30      	ldr	r3, [pc, #192]	; (800b914 <__ieee754_pow+0xa4c>)
 800b852:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b856:	429e      	cmp	r6, r3
 800b858:	f77f af0c 	ble.w	800b674 <__ieee754_pow+0x7ac>
 800b85c:	4b2e      	ldr	r3, [pc, #184]	; (800b918 <__ieee754_pow+0xa50>)
 800b85e:	440b      	add	r3, r1
 800b860:	4303      	orrs	r3, r0
 800b862:	d009      	beq.n	800b878 <__ieee754_pow+0x9b0>
 800b864:	ec51 0b18 	vmov	r0, r1, d8
 800b868:	2200      	movs	r2, #0
 800b86a:	2300      	movs	r3, #0
 800b86c:	f7f5 f92e 	bl	8000acc <__aeabi_dcmplt>
 800b870:	3800      	subs	r0, #0
 800b872:	bf18      	it	ne
 800b874:	2001      	movne	r0, #1
 800b876:	e447      	b.n	800b108 <__ieee754_pow+0x240>
 800b878:	4622      	mov	r2, r4
 800b87a:	462b      	mov	r3, r5
 800b87c:	f7f4 fcfc 	bl	8000278 <__aeabi_dsub>
 800b880:	4642      	mov	r2, r8
 800b882:	464b      	mov	r3, r9
 800b884:	f7f5 f936 	bl	8000af4 <__aeabi_dcmpge>
 800b888:	2800      	cmp	r0, #0
 800b88a:	f43f aef3 	beq.w	800b674 <__ieee754_pow+0x7ac>
 800b88e:	e7e9      	b.n	800b864 <__ieee754_pow+0x99c>
 800b890:	f04f 0a00 	mov.w	sl, #0
 800b894:	e71a      	b.n	800b6cc <__ieee754_pow+0x804>
 800b896:	ec51 0b10 	vmov	r0, r1, d0
 800b89a:	4619      	mov	r1, r3
 800b89c:	e7d4      	b.n	800b848 <__ieee754_pow+0x980>
 800b89e:	491c      	ldr	r1, [pc, #112]	; (800b910 <__ieee754_pow+0xa48>)
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	f7ff bb30 	b.w	800af06 <__ieee754_pow+0x3e>
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	f7ff bb2c 	b.w	800af06 <__ieee754_pow+0x3e>
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	f7ff bb28 	b.w	800af06 <__ieee754_pow+0x3e>
 800b8b6:	9204      	str	r2, [sp, #16]
 800b8b8:	f7ff bb7a 	b.w	800afb0 <__ieee754_pow+0xe8>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	f7ff bb64 	b.w	800af8a <__ieee754_pow+0xc2>
 800b8c2:	bf00      	nop
 800b8c4:	f3af 8000 	nop.w
 800b8c8:	00000000 	.word	0x00000000
 800b8cc:	3fe62e43 	.word	0x3fe62e43
 800b8d0:	fefa39ef 	.word	0xfefa39ef
 800b8d4:	3fe62e42 	.word	0x3fe62e42
 800b8d8:	0ca86c39 	.word	0x0ca86c39
 800b8dc:	be205c61 	.word	0xbe205c61
 800b8e0:	72bea4d0 	.word	0x72bea4d0
 800b8e4:	3e663769 	.word	0x3e663769
 800b8e8:	c5d26bf1 	.word	0xc5d26bf1
 800b8ec:	3ebbbd41 	.word	0x3ebbbd41
 800b8f0:	af25de2c 	.word	0xaf25de2c
 800b8f4:	3f11566a 	.word	0x3f11566a
 800b8f8:	16bebd93 	.word	0x16bebd93
 800b8fc:	3f66c16c 	.word	0x3f66c16c
 800b900:	5555553e 	.word	0x5555553e
 800b904:	3fc55555 	.word	0x3fc55555
 800b908:	3fe00000 	.word	0x3fe00000
 800b90c:	000fffff 	.word	0x000fffff
 800b910:	3ff00000 	.word	0x3ff00000
 800b914:	4090cbff 	.word	0x4090cbff
 800b918:	3f6f3400 	.word	0x3f6f3400
 800b91c:	652b82fe 	.word	0x652b82fe
 800b920:	3c971547 	.word	0x3c971547

0800b924 <__ieee754_sqrt>:
 800b924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b928:	ec55 4b10 	vmov	r4, r5, d0
 800b92c:	4e55      	ldr	r6, [pc, #340]	; (800ba84 <__ieee754_sqrt+0x160>)
 800b92e:	43ae      	bics	r6, r5
 800b930:	ee10 0a10 	vmov	r0, s0
 800b934:	ee10 3a10 	vmov	r3, s0
 800b938:	462a      	mov	r2, r5
 800b93a:	4629      	mov	r1, r5
 800b93c:	d110      	bne.n	800b960 <__ieee754_sqrt+0x3c>
 800b93e:	ee10 2a10 	vmov	r2, s0
 800b942:	462b      	mov	r3, r5
 800b944:	f7f4 fe50 	bl	80005e8 <__aeabi_dmul>
 800b948:	4602      	mov	r2, r0
 800b94a:	460b      	mov	r3, r1
 800b94c:	4620      	mov	r0, r4
 800b94e:	4629      	mov	r1, r5
 800b950:	f7f4 fc94 	bl	800027c <__adddf3>
 800b954:	4604      	mov	r4, r0
 800b956:	460d      	mov	r5, r1
 800b958:	ec45 4b10 	vmov	d0, r4, r5
 800b95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b960:	2d00      	cmp	r5, #0
 800b962:	dc10      	bgt.n	800b986 <__ieee754_sqrt+0x62>
 800b964:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b968:	4330      	orrs	r0, r6
 800b96a:	d0f5      	beq.n	800b958 <__ieee754_sqrt+0x34>
 800b96c:	b15d      	cbz	r5, 800b986 <__ieee754_sqrt+0x62>
 800b96e:	ee10 2a10 	vmov	r2, s0
 800b972:	462b      	mov	r3, r5
 800b974:	ee10 0a10 	vmov	r0, s0
 800b978:	f7f4 fc7e 	bl	8000278 <__aeabi_dsub>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	f7f4 ff5c 	bl	800083c <__aeabi_ddiv>
 800b984:	e7e6      	b.n	800b954 <__ieee754_sqrt+0x30>
 800b986:	1512      	asrs	r2, r2, #20
 800b988:	d074      	beq.n	800ba74 <__ieee754_sqrt+0x150>
 800b98a:	07d4      	lsls	r4, r2, #31
 800b98c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b990:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b994:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b998:	bf5e      	ittt	pl
 800b99a:	0fda      	lsrpl	r2, r3, #31
 800b99c:	005b      	lslpl	r3, r3, #1
 800b99e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b9a2:	2400      	movs	r4, #0
 800b9a4:	0fda      	lsrs	r2, r3, #31
 800b9a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b9aa:	107f      	asrs	r7, r7, #1
 800b9ac:	005b      	lsls	r3, r3, #1
 800b9ae:	2516      	movs	r5, #22
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b9b6:	1886      	adds	r6, r0, r2
 800b9b8:	428e      	cmp	r6, r1
 800b9ba:	bfde      	ittt	le
 800b9bc:	1b89      	suble	r1, r1, r6
 800b9be:	18b0      	addle	r0, r6, r2
 800b9c0:	18a4      	addle	r4, r4, r2
 800b9c2:	0049      	lsls	r1, r1, #1
 800b9c4:	3d01      	subs	r5, #1
 800b9c6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b9ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b9ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b9d2:	d1f0      	bne.n	800b9b6 <__ieee754_sqrt+0x92>
 800b9d4:	462a      	mov	r2, r5
 800b9d6:	f04f 0e20 	mov.w	lr, #32
 800b9da:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b9de:	4281      	cmp	r1, r0
 800b9e0:	eb06 0c05 	add.w	ip, r6, r5
 800b9e4:	dc02      	bgt.n	800b9ec <__ieee754_sqrt+0xc8>
 800b9e6:	d113      	bne.n	800ba10 <__ieee754_sqrt+0xec>
 800b9e8:	459c      	cmp	ip, r3
 800b9ea:	d811      	bhi.n	800ba10 <__ieee754_sqrt+0xec>
 800b9ec:	f1bc 0f00 	cmp.w	ip, #0
 800b9f0:	eb0c 0506 	add.w	r5, ip, r6
 800b9f4:	da43      	bge.n	800ba7e <__ieee754_sqrt+0x15a>
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	db41      	blt.n	800ba7e <__ieee754_sqrt+0x15a>
 800b9fa:	f100 0801 	add.w	r8, r0, #1
 800b9fe:	1a09      	subs	r1, r1, r0
 800ba00:	459c      	cmp	ip, r3
 800ba02:	bf88      	it	hi
 800ba04:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ba08:	eba3 030c 	sub.w	r3, r3, ip
 800ba0c:	4432      	add	r2, r6
 800ba0e:	4640      	mov	r0, r8
 800ba10:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ba14:	f1be 0e01 	subs.w	lr, lr, #1
 800ba18:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ba1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ba24:	d1db      	bne.n	800b9de <__ieee754_sqrt+0xba>
 800ba26:	430b      	orrs	r3, r1
 800ba28:	d006      	beq.n	800ba38 <__ieee754_sqrt+0x114>
 800ba2a:	1c50      	adds	r0, r2, #1
 800ba2c:	bf13      	iteet	ne
 800ba2e:	3201      	addne	r2, #1
 800ba30:	3401      	addeq	r4, #1
 800ba32:	4672      	moveq	r2, lr
 800ba34:	f022 0201 	bicne.w	r2, r2, #1
 800ba38:	1063      	asrs	r3, r4, #1
 800ba3a:	0852      	lsrs	r2, r2, #1
 800ba3c:	07e1      	lsls	r1, r4, #31
 800ba3e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ba42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ba46:	bf48      	it	mi
 800ba48:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ba4c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ba50:	4614      	mov	r4, r2
 800ba52:	e781      	b.n	800b958 <__ieee754_sqrt+0x34>
 800ba54:	0ad9      	lsrs	r1, r3, #11
 800ba56:	3815      	subs	r0, #21
 800ba58:	055b      	lsls	r3, r3, #21
 800ba5a:	2900      	cmp	r1, #0
 800ba5c:	d0fa      	beq.n	800ba54 <__ieee754_sqrt+0x130>
 800ba5e:	02cd      	lsls	r5, r1, #11
 800ba60:	d50a      	bpl.n	800ba78 <__ieee754_sqrt+0x154>
 800ba62:	f1c2 0420 	rsb	r4, r2, #32
 800ba66:	fa23 f404 	lsr.w	r4, r3, r4
 800ba6a:	1e55      	subs	r5, r2, #1
 800ba6c:	4093      	lsls	r3, r2
 800ba6e:	4321      	orrs	r1, r4
 800ba70:	1b42      	subs	r2, r0, r5
 800ba72:	e78a      	b.n	800b98a <__ieee754_sqrt+0x66>
 800ba74:	4610      	mov	r0, r2
 800ba76:	e7f0      	b.n	800ba5a <__ieee754_sqrt+0x136>
 800ba78:	0049      	lsls	r1, r1, #1
 800ba7a:	3201      	adds	r2, #1
 800ba7c:	e7ef      	b.n	800ba5e <__ieee754_sqrt+0x13a>
 800ba7e:	4680      	mov	r8, r0
 800ba80:	e7bd      	b.n	800b9fe <__ieee754_sqrt+0xda>
 800ba82:	bf00      	nop
 800ba84:	7ff00000 	.word	0x7ff00000

0800ba88 <with_errno>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	460d      	mov	r5, r1
 800ba8e:	4616      	mov	r6, r2
 800ba90:	f7fe f82c 	bl	8009aec <__errno>
 800ba94:	4629      	mov	r1, r5
 800ba96:	6006      	str	r6, [r0, #0]
 800ba98:	4620      	mov	r0, r4
 800ba9a:	bd70      	pop	{r4, r5, r6, pc}

0800ba9c <xflow>:
 800ba9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba9e:	4614      	mov	r4, r2
 800baa0:	461d      	mov	r5, r3
 800baa2:	b108      	cbz	r0, 800baa8 <xflow+0xc>
 800baa4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800baa8:	e9cd 2300 	strd	r2, r3, [sp]
 800baac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bab0:	4620      	mov	r0, r4
 800bab2:	4629      	mov	r1, r5
 800bab4:	f7f4 fd98 	bl	80005e8 <__aeabi_dmul>
 800bab8:	2222      	movs	r2, #34	; 0x22
 800baba:	b003      	add	sp, #12
 800babc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bac0:	f7ff bfe2 	b.w	800ba88 <with_errno>

0800bac4 <__math_uflow>:
 800bac4:	b508      	push	{r3, lr}
 800bac6:	2200      	movs	r2, #0
 800bac8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bacc:	f7ff ffe6 	bl	800ba9c <xflow>
 800bad0:	ec41 0b10 	vmov	d0, r0, r1
 800bad4:	bd08      	pop	{r3, pc}

0800bad6 <__math_oflow>:
 800bad6:	b508      	push	{r3, lr}
 800bad8:	2200      	movs	r2, #0
 800bada:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bade:	f7ff ffdd 	bl	800ba9c <xflow>
 800bae2:	ec41 0b10 	vmov	d0, r0, r1
 800bae6:	bd08      	pop	{r3, pc}

0800bae8 <fabs>:
 800bae8:	ec51 0b10 	vmov	r0, r1, d0
 800baec:	ee10 2a10 	vmov	r2, s0
 800baf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800baf4:	ec43 2b10 	vmov	d0, r2, r3
 800baf8:	4770      	bx	lr

0800bafa <finite>:
 800bafa:	b082      	sub	sp, #8
 800bafc:	ed8d 0b00 	vstr	d0, [sp]
 800bb00:	9801      	ldr	r0, [sp, #4]
 800bb02:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bb06:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bb0a:	0fc0      	lsrs	r0, r0, #31
 800bb0c:	b002      	add	sp, #8
 800bb0e:	4770      	bx	lr

0800bb10 <scalbn>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	ec55 4b10 	vmov	r4, r5, d0
 800bb16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	462b      	mov	r3, r5
 800bb1e:	b99a      	cbnz	r2, 800bb48 <scalbn+0x38>
 800bb20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bb24:	4323      	orrs	r3, r4
 800bb26:	d036      	beq.n	800bb96 <scalbn+0x86>
 800bb28:	4b39      	ldr	r3, [pc, #228]	; (800bc10 <scalbn+0x100>)
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	ee10 0a10 	vmov	r0, s0
 800bb30:	2200      	movs	r2, #0
 800bb32:	f7f4 fd59 	bl	80005e8 <__aeabi_dmul>
 800bb36:	4b37      	ldr	r3, [pc, #220]	; (800bc14 <scalbn+0x104>)
 800bb38:	429e      	cmp	r6, r3
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	460d      	mov	r5, r1
 800bb3e:	da10      	bge.n	800bb62 <scalbn+0x52>
 800bb40:	a32b      	add	r3, pc, #172	; (adr r3, 800bbf0 <scalbn+0xe0>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	e03a      	b.n	800bbbe <scalbn+0xae>
 800bb48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bb4c:	428a      	cmp	r2, r1
 800bb4e:	d10c      	bne.n	800bb6a <scalbn+0x5a>
 800bb50:	ee10 2a10 	vmov	r2, s0
 800bb54:	4620      	mov	r0, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	f7f4 fb90 	bl	800027c <__adddf3>
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	460d      	mov	r5, r1
 800bb60:	e019      	b.n	800bb96 <scalbn+0x86>
 800bb62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bb66:	460b      	mov	r3, r1
 800bb68:	3a36      	subs	r2, #54	; 0x36
 800bb6a:	4432      	add	r2, r6
 800bb6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bb70:	428a      	cmp	r2, r1
 800bb72:	dd08      	ble.n	800bb86 <scalbn+0x76>
 800bb74:	2d00      	cmp	r5, #0
 800bb76:	a120      	add	r1, pc, #128	; (adr r1, 800bbf8 <scalbn+0xe8>)
 800bb78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb7c:	da1c      	bge.n	800bbb8 <scalbn+0xa8>
 800bb7e:	a120      	add	r1, pc, #128	; (adr r1, 800bc00 <scalbn+0xf0>)
 800bb80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb84:	e018      	b.n	800bbb8 <scalbn+0xa8>
 800bb86:	2a00      	cmp	r2, #0
 800bb88:	dd08      	ble.n	800bb9c <scalbn+0x8c>
 800bb8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb96:	ec45 4b10 	vmov	d0, r4, r5
 800bb9a:	bd70      	pop	{r4, r5, r6, pc}
 800bb9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bba0:	da19      	bge.n	800bbd6 <scalbn+0xc6>
 800bba2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bba6:	429e      	cmp	r6, r3
 800bba8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bbac:	dd0a      	ble.n	800bbc4 <scalbn+0xb4>
 800bbae:	a112      	add	r1, pc, #72	; (adr r1, 800bbf8 <scalbn+0xe8>)
 800bbb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1e2      	bne.n	800bb7e <scalbn+0x6e>
 800bbb8:	a30f      	add	r3, pc, #60	; (adr r3, 800bbf8 <scalbn+0xe8>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fd13 	bl	80005e8 <__aeabi_dmul>
 800bbc2:	e7cb      	b.n	800bb5c <scalbn+0x4c>
 800bbc4:	a10a      	add	r1, pc, #40	; (adr r1, 800bbf0 <scalbn+0xe0>)
 800bbc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d0b8      	beq.n	800bb40 <scalbn+0x30>
 800bbce:	a10e      	add	r1, pc, #56	; (adr r1, 800bc08 <scalbn+0xf8>)
 800bbd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbd4:	e7b4      	b.n	800bb40 <scalbn+0x30>
 800bbd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bbda:	3236      	adds	r2, #54	; 0x36
 800bbdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bbe0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	4b0c      	ldr	r3, [pc, #48]	; (800bc18 <scalbn+0x108>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	e7e8      	b.n	800bbbe <scalbn+0xae>
 800bbec:	f3af 8000 	nop.w
 800bbf0:	c2f8f359 	.word	0xc2f8f359
 800bbf4:	01a56e1f 	.word	0x01a56e1f
 800bbf8:	8800759c 	.word	0x8800759c
 800bbfc:	7e37e43c 	.word	0x7e37e43c
 800bc00:	8800759c 	.word	0x8800759c
 800bc04:	fe37e43c 	.word	0xfe37e43c
 800bc08:	c2f8f359 	.word	0xc2f8f359
 800bc0c:	81a56e1f 	.word	0x81a56e1f
 800bc10:	43500000 	.word	0x43500000
 800bc14:	ffff3cb0 	.word	0xffff3cb0
 800bc18:	3c900000 	.word	0x3c900000

0800bc1c <_init>:
 800bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1e:	bf00      	nop
 800bc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc22:	bc08      	pop	{r3}
 800bc24:	469e      	mov	lr, r3
 800bc26:	4770      	bx	lr

0800bc28 <_fini>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	bf00      	nop
 800bc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2e:	bc08      	pop	{r3}
 800bc30:	469e      	mov	lr, r3
 800bc32:	4770      	bx	lr
