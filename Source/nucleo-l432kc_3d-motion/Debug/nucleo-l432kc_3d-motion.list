
nucleo-l432kc_3d-motion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c16c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800c300  0800c300  0001c300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c518  0800c518  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c518  0800c518  0001c518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c520  0800c520  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c520  0800c520  0001c520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c524  0800c524  0001c524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000376c  20000078  0800c59c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200037e4  0800c59c  000237e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024031  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004627  00000000  00000000  000440d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b70  00000000  00000000  00048700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019c0  00000000  00000000  0004a270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000661b  00000000  00000000  0004bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022acc  00000000  00000000  0005224b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da507  00000000  00000000  00074d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f21e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c8c  00000000  00000000  0014f270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c2e4 	.word	0x0800c2e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800c2e4 	.word	0x0800c2e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <error_handler>:
volatile BOOL EC_DATA_AVAIL = FALSE;	// EC data available for read flag

/*
 * TODO: Insert Doxy here
 */
void error_handler(char *str, UINT16 offset, UINT16 errval) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b096      	sub	sp, #88	; 0x58
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
	char err_buf[64];
	sprintf(err_buf, "***Error in function: %s:%02X errval=0x%X*** \r\n", str, offset, errval);
 8000e68:	f107 0010 	add.w	r0, r7, #16
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	490b      	ldr	r1, [pc, #44]	; (8000ea4 <error_handler+0x48>)
 8000e76:	f009 ff61 	bl	800ad3c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) err_buf, strlen(err_buf), HAL_MAX_DELAY);
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff f9a6 	bl	80001d0 <strlen>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	f107 0110 	add.w	r1, r7, #16
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <error_handler+0x4c>)
 8000e92:	f006 fbd3 	bl	800763c <HAL_UART_Transmit>
	StopI2CTimer();
 8000e96:	f000 f87d 	bl	8000f94 <StopI2CTimer>
	// I2C_Stop()
}
 8000e9a:	bf00      	nop
 8000e9c:	3750      	adds	r7, #80	; 0x50
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	0800c300 	.word	0x0800c300
 8000ea8:	2000116c 	.word	0x2000116c

08000eac <i2c_cmd_WrRd>:
 * @param bAdjust Use 1st 2 bytes returned as new length (=TRUE)
 * @return I2C_SUCCESS(=0), I2C_BUF_OVRFLO(=0x22)
 */

UINT8 i2c_cmd_WrRd(UINT8 ucCmd, UINT8 ucBytes_wr, UINT8 *ucData_wr, UINT16 usBytes_rd, UINT8 *ucData_rd, BOOL bAdjust)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	60ba      	str	r2, [r7, #8]
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	73bb      	strb	r3, [r7, #14]
	if (ucBytes_wr > BUF_150)
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	2b96      	cmp	r3, #150	; 0x96
 8000ec2:	d901      	bls.n	8000ec8 <i2c_cmd_WrRd+0x1c>
	{
		return I2C_BUF_OVRFLO;
 8000ec4:	2322      	movs	r3, #34	; 0x22
 8000ec6:	e05c      	b.n	8000f82 <i2c_cmd_WrRd+0xd6>
	}

	StartI2CTimer();
 8000ec8:	f000 f86e 	bl	8000fa8 <StartI2CTimer>

	switch (ucCmd)
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d02a      	beq.n	8000f28 <i2c_cmd_WrRd+0x7c>
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	dc4b      	bgt.n	8000f6e <i2c_cmd_WrRd+0xc2>
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d002      	beq.n	8000ee0 <i2c_cmd_WrRd+0x34>
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d012      	beq.n	8000f04 <i2c_cmd_WrRd+0x58>
			}
			break;

		default:
			/* You shall not be here >.< */
			break;
 8000ede:	e046      	b.n	8000f6e <i2c_cmd_WrRd+0xc2>
			if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) SLAVE_ADDR, ucData_wr, ucBytes_wr, 100) != HAL_OK)
 8000ee0:	7bbb      	ldrb	r3, [r7, #14]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	2264      	movs	r2, #100	; 0x64
 8000ee6:	9200      	str	r2, [sp, #0]
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	2180      	movs	r1, #128	; 0x80
 8000eec:	4827      	ldr	r0, [pc, #156]	; (8000f8c <i2c_cmd_WrRd+0xe0>)
 8000eee:	f003 ffff 	bl	8004ef0 <HAL_I2C_Master_Transmit>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d03c      	beq.n	8000f72 <i2c_cmd_WrRd+0xc6>
				error_handler("i2c ", 0, I2C_ERROR);
 8000ef8:	2221      	movs	r2, #33	; 0x21
 8000efa:	2100      	movs	r1, #0
 8000efc:	4824      	ldr	r0, [pc, #144]	; (8000f90 <i2c_cmd_WrRd+0xe4>)
 8000efe:	f7ff ffad 	bl	8000e5c <error_handler>
			break;
 8000f02:	e036      	b.n	8000f72 <i2c_cmd_WrRd+0xc6>
			if (HAL_I2C_Master_Receive(&hi2c1, (uint16_t) SLAVE_ADDR, ucData_rd, usBytes_rd, 100) != HAL_OK)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	2264      	movs	r2, #100	; 0x64
 8000f0a:	9200      	str	r2, [sp, #0]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	481e      	ldr	r0, [pc, #120]	; (8000f8c <i2c_cmd_WrRd+0xe0>)
 8000f12:	f004 f8e1 	bl	80050d8 <HAL_I2C_Master_Receive>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d02c      	beq.n	8000f76 <i2c_cmd_WrRd+0xca>
				error_handler("i2c ", 0, I2C_ERROR);
 8000f1c:	2221      	movs	r2, #33	; 0x21
 8000f1e:	2100      	movs	r1, #0
 8000f20:	481b      	ldr	r0, [pc, #108]	; (8000f90 <i2c_cmd_WrRd+0xe4>)
 8000f22:	f7ff ff9b 	bl	8000e5c <error_handler>
			break;
 8000f26:	e026      	b.n	8000f76 <i2c_cmd_WrRd+0xca>
			if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) SLAVE_ADDR, ucData_wr, ucBytes_wr, 100) != HAL_OK)
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	2264      	movs	r2, #100	; 0x64
 8000f2e:	9200      	str	r2, [sp, #0]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <i2c_cmd_WrRd+0xe0>)
 8000f36:	f003 ffdb 	bl	8004ef0 <HAL_I2C_Master_Transmit>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d004      	beq.n	8000f4a <i2c_cmd_WrRd+0x9e>
				error_handler("i2c ", 0, I2C_ERROR);
 8000f40:	2221      	movs	r2, #33	; 0x21
 8000f42:	2100      	movs	r1, #0
 8000f44:	4812      	ldr	r0, [pc, #72]	; (8000f90 <i2c_cmd_WrRd+0xe4>)
 8000f46:	f7ff ff89 	bl	8000e5c <error_handler>
			if (HAL_I2C_Master_Receive(&hi2c1, (uint16_t) SLAVE_ADDR, ucData_rd, usBytes_rd, 100) != HAL_OK)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2264      	movs	r2, #100	; 0x64
 8000f50:	9200      	str	r2, [sp, #0]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <i2c_cmd_WrRd+0xe0>)
 8000f58:	f004 f8be 	bl	80050d8 <HAL_I2C_Master_Receive>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00b      	beq.n	8000f7a <i2c_cmd_WrRd+0xce>
				error_handler("i2c ", 0, I2C_ERROR);
 8000f62:	2221      	movs	r2, #33	; 0x21
 8000f64:	2100      	movs	r1, #0
 8000f66:	480a      	ldr	r0, [pc, #40]	; (8000f90 <i2c_cmd_WrRd+0xe4>)
 8000f68:	f7ff ff78 	bl	8000e5c <error_handler>
			break;
 8000f6c:	e005      	b.n	8000f7a <i2c_cmd_WrRd+0xce>
			break;
 8000f6e:	bf00      	nop
 8000f70:	e004      	b.n	8000f7c <i2c_cmd_WrRd+0xd0>
			break;
 8000f72:	bf00      	nop
 8000f74:	e002      	b.n	8000f7c <i2c_cmd_WrRd+0xd0>
			break;
 8000f76:	bf00      	nop
 8000f78:	e000      	b.n	8000f7c <i2c_cmd_WrRd+0xd0>
			break;
 8000f7a:	bf00      	nop
	}

	/* TODO: Check if timer has already been stopped in error handler */
	StopI2CTimer();
 8000f7c:	f000 f80a 	bl	8000f94 <StopI2CTimer>

	/* TODO: Where's this defined and what if error occurs? */
	return I2C_SUCCESS;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20001080 	.word	0x20001080
 8000f90:	0800c330 	.word	0x0800c330

08000f94 <StopI2CTimer>:

volatile UINT32 I2C_TIMEOUT_1MS_CNTR = 0;


void StopI2CTimer()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Stop_IT(&htim2);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <StopI2CTimer+0x10>)
 8000f9a:	f005 ff3f 	bl	8006e1c <HAL_TIM_Base_Stop_IT>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200010d4 	.word	0x200010d4

08000fa8 <StartI2CTimer>:

void StartI2CTimer()
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  I2C_TIMEOUT_1MS_CNTR = 0;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <StartI2CTimer+0x14>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <StartI2CTimer+0x18>)
 8000fb4:	f005 fede 	bl	8006d74 <HAL_TIM_Base_Start_IT>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000098 	.word	0x20000098
 8000fc0:	200010d4 	.word	0x200010d4

08000fc4 <_accel>:

static double prev_dat[4] = {0};                                  // Used to hold previous data readings to preclude redundant data output
extern char flag;
extern char state;

void _accel() {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b09e      	sub	sp, #120	; 0x78
 8000fc8:	af00      	add	r7, sp, #0
  UINT8 ucRetStat;                                                // return status value
  UINT16 wdata;                                                   // pre-exponent-scaled data
  double dDataX = 0, dDataY = 0, dDataZ = 0, dDataW = 0;          // Data field variables
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  double dMult = 1;                                               // Multiplier for data fields : sets them to appropriate order of magnitude
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b8d      	ldr	r3, [pc, #564]	; (8001234 <_accel+0x270>)
 8001000:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  char _x[15], _y[15], _z[15], _w[15];

  // Enable the Accelerometer
  // To support multi-threaded applications, Read-Modify-Write the VREG:
  if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 8001004:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001008:	4619      	mov	r1, r3
 800100a:	2000      	movs	r0, #0
 800100c:	f002 fa72 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001010:	4603      	mov	r3, r0
 8001012:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001016:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800101a:	2b00      	cmp	r3, #0
 800101c:	d115      	bne.n	800104a <_accel+0x86>
  {
    if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata | VREG_SHC_ACC_EN))) // Enable the accelerometer (ACC_EN)
 800101e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001020:	f043 0310 	orr.w	r3, r3, #16
 8001024:	4619      	mov	r1, r3
 8001026:	2000      	movs	r0, #0
 8001028:	f002 face 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 800102c:	4603      	mov	r3, r0
 800102e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001032:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00e      	beq.n	8001058 <_accel+0x94>
      error_handler("VRWr", VREG_SHC, ucRetStat);  // error display
 800103a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800103e:	461a      	mov	r2, r3
 8001040:	2100      	movs	r1, #0
 8001042:	487d      	ldr	r0, [pc, #500]	; (8001238 <_accel+0x274>)
 8001044:	f7ff ff0a 	bl	8000e5c <error_handler>
 8001048:	e006      	b.n	8001058 <_accel+0x94>
  }
  else
    error_handler("VRRd", VREG_SHC, ucRetStat);       // error display
 800104a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800104e:	461a      	mov	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	487a      	ldr	r0, [pc, #488]	; (800123c <_accel+0x278>)
 8001054:	f7ff ff02 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_ACSEN, 0x14)))   // Change Accelerometer sensitivity
 8001058:	2114      	movs	r1, #20
 800105a:	2002      	movs	r0, #2
 800105c:	f002 fab4 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001060:	4603      	mov	r3, r0
 8001062:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001066:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <_accel+0xb8>
    error_handler("VRWr", VREG_ACSEN, ucRetStat);     // error display
 800106e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001072:	461a      	mov	r2, r3
 8001074:	2102      	movs	r1, #2
 8001076:	4870      	ldr	r0, [pc, #448]	; (8001238 <_accel+0x274>)
 8001078:	f7ff fef0 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_ACDXR, 0x64))) // Change acc data rate
 800107c:	2164      	movs	r1, #100	; 0x64
 800107e:	200c      	movs	r0, #12
 8001080:	f002 faa2 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800108a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800108e:	2b00      	cmp	r3, #0
 8001090:	d006      	beq.n	80010a0 <_accel+0xdc>
    error_handler("VRWr", VREG_ACDXR, ucRetStat);     // error display
 8001092:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001096:	461a      	mov	r2, r3
 8001098:	210c      	movs	r1, #12
 800109a:	4867      	ldr	r0, [pc, #412]	; (8001238 <_accel+0x274>)
 800109c:	f7ff fede 	bl	8000e5c <error_handler>

  dMult = ret_exponent(ACCEL_VREG_OFFSET);            // Get unit exponent for this sensor's data
 80010a0:	2000      	movs	r0, #0
 80010a2:	f001 fda1 	bl	8002be8 <ret_exponent>
 80010a6:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    
    // get acc readings
    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ACXD, &wdata)))  // Read data from the accelerometer datax register
 80010aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ae:	4619      	mov	r1, r3
 80010b0:	2016      	movs	r0, #22
 80010b2:	f002 fa1f 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80010bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <_accel+0x10e>
      error_handler("VRRd", VREG_ACXD, ucRetStat);  // error display
 80010c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010c8:	461a      	mov	r2, r3
 80010ca:	2116      	movs	r1, #22
 80010cc:	485b      	ldr	r0, [pc, #364]	; (800123c <_accel+0x278>)
 80010ce:	f7ff fec5 	bl	8000e5c <error_handler>

    dDataX = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 80010d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa24 	bl	8000524 <__aeabi_i2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80010e4:	f7ff fa88 	bl	80005f8 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ACYD, &wdata)))  // Read data from the accelerometer datay register
 80010f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f4:	4619      	mov	r1, r3
 80010f6:	2017      	movs	r0, #23
 80010f8:	f002 f9fc 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001102:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001106:	2b00      	cmp	r3, #0
 8001108:	d006      	beq.n	8001118 <_accel+0x154>
      error_handler("VRRd", VREG_ACYD, ucRetStat);  // error display
 800110a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800110e:	461a      	mov	r2, r3
 8001110:	2117      	movs	r1, #23
 8001112:	484a      	ldr	r0, [pc, #296]	; (800123c <_accel+0x278>)
 8001114:	f7ff fea2 	bl	8000e5c <error_handler>

    dDataY = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800111a:	b21b      	sxth	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa01 	bl	8000524 <__aeabi_i2d>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800112a:	f7ff fa65 	bl	80005f8 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ACZD, &wdata)))  // Read data from the accelerometer dataz register
 8001136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800113a:	4619      	mov	r1, r3
 800113c:	2018      	movs	r0, #24
 800113e:	f002 f9d9 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001142:	4603      	mov	r3, r0
 8001144:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001148:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <_accel+0x19a>
      error_handler("VRRd", VREG_ACZD, ucRetStat);  // error display
 8001150:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001154:	461a      	mov	r2, r3
 8001156:	2118      	movs	r1, #24
 8001158:	4838      	ldr	r0, [pc, #224]	; (800123c <_accel+0x278>)
 800115a:	f7ff fe7f 	bl	8000e5c <error_handler>

    dDataZ = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 800115e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001160:	b21b      	sxth	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9de 	bl	8000524 <__aeabi_i2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001170:	f7ff fa42 	bl	80005f8 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

    if (prev_dat[0] != dDataX || prev_dat[1] != dDataY || prev_dat[2] != dDataZ) // Ensure that this data has not yet been displayed
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <_accel+0x27c>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001186:	f7ff fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d013      	beq.n	80011b8 <_accel+0x1f4>
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <_accel+0x27c>)
 8001192:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001196:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800119a:	f7ff fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d009      	beq.n	80011b8 <_accel+0x1f4>
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <_accel+0x27c>)
 80011a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011aa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011ae:	f7ff fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10e      	bne.n	80011d6 <_accel+0x212>
    {
      prev_dat[0] = dDataX;                       // Store the current data values for later reference
 80011b8:	4921      	ldr	r1, [pc, #132]	; (8001240 <_accel+0x27c>)
 80011ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011be:	e9c1 2300 	strd	r2, r3, [r1]
      prev_dat[1] = dDataY;
 80011c2:	491f      	ldr	r1, [pc, #124]	; (8001240 <_accel+0x27c>)
 80011c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80011c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
      prev_dat[2] = dDataZ;
 80011cc:	491c      	ldr	r1, [pc, #112]	; (8001240 <_accel+0x27c>)
 80011ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80011d2:	e9c1 2304 	strd	r2, r3, [r1, #16]

    //if (flag)
    //{
     // flag = 0;
      //Disable the Accelerometer on exit
      if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 80011d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011da:	4619      	mov	r1, r3
 80011dc:	2000      	movs	r0, #0
 80011de:	f002 f989 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80011e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d115      	bne.n	800121c <_accel+0x258>
      {
        if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata & ~VREG_SHC_ACC_EN))) // Disable the accelerometer (clear the ACC_EN bit)
 80011f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f2:	f023 0310 	bic.w	r3, r3, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	2000      	movs	r0, #0
 80011fa:	f002 f9e5 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 80011fe:	4603      	mov	r3, r0
 8001200:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001204:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00e      	beq.n	800122a <_accel+0x266>
          error_handler("VRWr", VREG_SHC, ucRetStat); // error display
 800120c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001210:	461a      	mov	r2, r3
 8001212:	2100      	movs	r1, #0
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <_accel+0x274>)
 8001216:	f7ff fe21 	bl	8000e5c <error_handler>
      }
      else
        error_handler("VRRd", VREG_SHC, ucRetStat);   // error display
    //}
}
 800121a:	e006      	b.n	800122a <_accel+0x266>
        error_handler("VRRd", VREG_SHC, ucRetStat);   // error display
 800121c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001220:	461a      	mov	r2, r3
 8001222:	2100      	movs	r1, #0
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <_accel+0x278>)
 8001226:	f7ff fe19 	bl	8000e5c <error_handler>
}
 800122a:	bf00      	nop
 800122c:	3778      	adds	r7, #120	; 0x78
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	3ff00000 	.word	0x3ff00000
 8001238:	0800c338 	.word	0x0800c338
 800123c:	0800c340 	.word	0x0800c340
 8001240:	200000a0 	.word	0x200000a0

08001244 <_compass>:
      else
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
    //}
}

void _compass() {
 8001244:	b580      	push	{r7, lr}
 8001246:	b09e      	sub	sp, #120	; 0x78
 8001248:	af00      	add	r7, sp, #0
  UINT8 ucRetStat;                                                // return status value
  UINT16 wdata;                                                   // pre-exponent-scaled data
  double dDataX = 0, dDataY = 0, dDataZ = 0, dDataW = 0;          // Data field variables
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  double dMult = 1;                                               // Multiplier for data fields : sets them to appropriate order of magnitude
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <_compass+0x1a8>)
 8001280:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  char _x[15], _y[15], _z[15], _w[15];

  // Enable the Compass
  // To support multi-threaded applications, Read-Modify-Write the VREG :
  if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 8001284:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001288:	4619      	mov	r1, r3
 800128a:	2000      	movs	r0, #0
 800128c:	f002 f932 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001290:	4603      	mov	r3, r0
 8001292:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001296:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800129a:	2b00      	cmp	r3, #0
 800129c:	d115      	bne.n	80012ca <_compass+0x86>
  {
    if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata | VREG_SHC_CMP_EN))) // Enable the compass (CMP_EN)
 800129e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a4:	4619      	mov	r1, r3
 80012a6:	2000      	movs	r0, #0
 80012a8:	f002 f98e 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80012b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00e      	beq.n	80012d8 <_compass+0x94>
      error_handler("VRWr", VREG_SHC, ucRetStat);  // error display
 80012ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012be:	461a      	mov	r2, r3
 80012c0:	2100      	movs	r1, #0
 80012c2:	484b      	ldr	r0, [pc, #300]	; (80013f0 <_compass+0x1ac>)
 80012c4:	f7ff fdca 	bl	8000e5c <error_handler>
 80012c8:	e006      	b.n	80012d8 <_compass+0x94>
  }
  else
    error_handler("VRRd", VREG_SHC, ucRetStat);       // error display
 80012ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012ce:	461a      	mov	r2, r3
 80012d0:	2100      	movs	r1, #0
 80012d2:	4848      	ldr	r0, [pc, #288]	; (80013f4 <_compass+0x1b0>)
 80012d4:	f7ff fdc2 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_CMSEN, 0x01)))   // Change CMP sensitivity
 80012d8:	2101      	movs	r1, #1
 80012da:	2004      	movs	r0, #4
 80012dc:	f002 f974 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80012e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <_compass+0xb8>
    error_handler("VRWr", VREG_CMSEN, ucRetStat);     // error display
 80012ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012f2:	461a      	mov	r2, r3
 80012f4:	2104      	movs	r1, #4
 80012f6:	483e      	ldr	r0, [pc, #248]	; (80013f0 <_compass+0x1ac>)
 80012f8:	f7ff fdb0 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_CMDR, 0x64)))    // Change CMP data rate
 80012fc:	2164      	movs	r1, #100	; 0x64
 80012fe:	200e      	movs	r0, #14
 8001300:	f002 f962 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001304:	4603      	mov	r3, r0
 8001306:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800130a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <_compass+0xdc>
    error_handler("VRWr", VREG_CMDR, ucRetStat);      // error display
 8001312:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001316:	461a      	mov	r2, r3
 8001318:	210e      	movs	r1, #14
 800131a:	4835      	ldr	r0, [pc, #212]	; (80013f0 <_compass+0x1ac>)
 800131c:	f7ff fd9e 	bl	8000e5c <error_handler>

  dMult = ret_exponent(CMP_VREG_OFFSET);              // Get unit exponent for this sensor's data
 8001320:	2002      	movs	r0, #2
 8001322:	f001 fc61 	bl	8002be8 <ret_exponent>
 8001326:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_CMD, &wdata))) // Read data from the compass data register
 800132a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800132e:	4619      	mov	r1, r3
 8001330:	2022      	movs	r0, #34	; 0x22
 8001332:	f002 f8df 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001336:	4603      	mov	r3, r0
 8001338:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800133c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <_compass+0x10e>
      error_handler("VRRd", VREG_CMD, ucRetStat);   // error display
 8001344:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001348:	461a      	mov	r2, r3
 800134a:	2122      	movs	r1, #34	; 0x22
 800134c:	4829      	ldr	r0, [pc, #164]	; (80013f4 <_compass+0x1b0>)
 800134e:	f7ff fd85 	bl	8000e5c <error_handler>

    dDataX = (int16_t)wdata * dMult;                    // Note: for the compass there is only one data field to be retrieved
 8001352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001354:	b21b      	sxth	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f8e4 	bl	8000524 <__aeabi_i2d>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001364:	f7ff f948 	bl	80005f8 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    if (prev_dat[0] != dDataX)                      // Ensure that this data has not yet been displayed on LCD
 8001370:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <_compass+0x1b4>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800137a:	f7ff fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d104      	bne.n	800138e <_compass+0x14a>
    {
      prev_dat[0] = dDataX;                       // Store the current data value for later reference
 8001384:	491c      	ldr	r1, [pc, #112]	; (80013f8 <_compass+0x1b4>)
 8001386:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800138a:	e9c1 2300 	strd	r2, r3, [r1]

   // if (flag)
    //{
    //  flag = 0;
      //Disable the Compass on exit
      if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 800138e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001392:	4619      	mov	r1, r3
 8001394:	2000      	movs	r0, #0
 8001396:	f002 f8ad 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80013a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d115      	bne.n	80013d4 <_compass+0x190>
      {
        if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata & ~VREG_SHC_CMP_EN))) // Disable the compass (clear the CMP_EN bit)
 80013a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013ae:	4619      	mov	r1, r3
 80013b0:	2000      	movs	r0, #0
 80013b2:	f002 f909 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80013bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00e      	beq.n	80013e2 <_compass+0x19e>
          error_handler("VRWr", VREG_SHC, ucRetStat);      // error display
 80013c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013c8:	461a      	mov	r2, r3
 80013ca:	2100      	movs	r1, #0
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <_compass+0x1ac>)
 80013ce:	f7ff fd45 	bl	8000e5c <error_handler>
      }
      else
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
    //}
}
 80013d2:	e006      	b.n	80013e2 <_compass+0x19e>
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
 80013d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013d8:	461a      	mov	r2, r3
 80013da:	2100      	movs	r1, #0
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <_compass+0x1b0>)
 80013de:	f7ff fd3d 	bl	8000e5c <error_handler>
}
 80013e2:	bf00      	nop
 80013e4:	3778      	adds	r7, #120	; 0x78
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	3ff00000 	.word	0x3ff00000
 80013f0:	0800c338 	.word	0x0800c338
 80013f4:	0800c340 	.word	0x0800c340
 80013f8:	200000a0 	.word	0x200000a0

080013fc <_orient>:

void _orient() {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b09e      	sub	sp, #120	; 0x78
 8001400:	af00      	add	r7, sp, #0
  UINT8 ucRetStat;                                                // return status value
  UINT16 wdata;                                                   // pre-exponent-scaled data
  double dDataX = 0, dDataY = 0, dDataZ = 0, dDataW = 0;          // Data field variables
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  double dMult = 1;                                               // Multiplier for data fields : sets them to appropriate order of magnitude
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4ba6      	ldr	r3, [pc, #664]	; (80016d0 <_orient+0x2d4>)
 8001438:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  char _x[15], _y[15], _z[15], _w[15];

  // Enable the Orientation sensor
  // To support multi-threaded applications, Read-Modify-Write the VREG:
  if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 800143c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001440:	4619      	mov	r1, r3
 8001442:	2000      	movs	r0, #0
 8001444:	f002 f856 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800144e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001452:	2b00      	cmp	r3, #0
 8001454:	d115      	bne.n	8001482 <_orient+0x86>
  {
    if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata | VREG_SHC_ORI_EN))) // Enable the orientation (ORI_EN)
 8001456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	4619      	mov	r1, r3
 800145e:	2000      	movs	r0, #0
 8001460:	f002 f8b2 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001464:	4603      	mov	r3, r0
 8001466:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800146a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00e      	beq.n	8001490 <_orient+0x94>
      error_handler("VRWr", VREG_SHC, ucRetStat);  // error display
 8001472:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001476:	461a      	mov	r2, r3
 8001478:	2100      	movs	r1, #0
 800147a:	4896      	ldr	r0, [pc, #600]	; (80016d4 <_orient+0x2d8>)
 800147c:	f7ff fcee 	bl	8000e5c <error_handler>
 8001480:	e006      	b.n	8001490 <_orient+0x94>
  }
  else
    error_handler("VRRd", VREG_SHC, ucRetStat);       // error display
 8001482:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001486:	461a      	mov	r2, r3
 8001488:	2100      	movs	r1, #0
 800148a:	4893      	ldr	r0, [pc, #588]	; (80016d8 <_orient+0x2dc>)
 800148c:	f7ff fce6 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_ORSEN, 0xC8)))    // Change ORI sensitivity
 8001490:	21c8      	movs	r1, #200	; 0xc8
 8001492:	2005      	movs	r0, #5
 8001494:	f002 f898 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001498:	4603      	mov	r3, r0
 800149a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800149e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <_orient+0xb8>
    error_handler("VRWr", VREG_ORSEN, ucRetStat);     // error display
 80014a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014aa:	461a      	mov	r2, r3
 80014ac:	2105      	movs	r1, #5
 80014ae:	4889      	ldr	r0, [pc, #548]	; (80016d4 <_orient+0x2d8>)
 80014b0:	f7ff fcd4 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_ORDR, 0x32)))     // Change ORI data rate
 80014b4:	2132      	movs	r1, #50	; 0x32
 80014b6:	200f      	movs	r0, #15
 80014b8:	f002 f886 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 80014bc:	4603      	mov	r3, r0
 80014be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80014c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <_orient+0xdc>
    error_handler("VRWr", VREG_ORDR, ucRetStat);      // error display
 80014ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014ce:	461a      	mov	r2, r3
 80014d0:	210f      	movs	r1, #15
 80014d2:	4880      	ldr	r0, [pc, #512]	; (80016d4 <_orient+0x2d8>)
 80014d4:	f7ff fcc2 	bl	8000e5c <error_handler>

  dMult = ret_exponent(ORI_VREG_OFFSET);              // Get unit exponent for this sensor's data
 80014d8:	2003      	movs	r0, #3
 80014da:	f001 fb85 	bl	8002be8 <ret_exponent>
 80014de:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ORXD, &wdata))) // Read data from the orientation sensor datax register
 80014e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014e6:	4619      	mov	r1, r3
 80014e8:	2029      	movs	r0, #41	; 0x29
 80014ea:	f002 f803 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80014f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <_orient+0x10e>
      error_handler("VRRd", VREG_ORXD, ucRetStat);  // error display
 80014fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001500:	461a      	mov	r2, r3
 8001502:	2129      	movs	r1, #41	; 0x29
 8001504:	4874      	ldr	r0, [pc, #464]	; (80016d8 <_orient+0x2dc>)
 8001506:	f7ff fca9 	bl	8000e5c <error_handler>

    dDataX = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 800150a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800150c:	b21b      	sxth	r3, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f808 	bl	8000524 <__aeabi_i2d>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800151c:	f7ff f86c 	bl	80005f8 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ORYD, &wdata))) // Read data from the orientation sensor datay register
 8001528:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800152c:	4619      	mov	r1, r3
 800152e:	202a      	movs	r0, #42	; 0x2a
 8001530:	f001 ffe0 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001534:	4603      	mov	r3, r0
 8001536:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800153a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800153e:	2b00      	cmp	r3, #0
 8001540:	d006      	beq.n	8001550 <_orient+0x154>
      error_handler("VRRd", VREG_ORYD, ucRetStat);  // error display
 8001542:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001546:	461a      	mov	r2, r3
 8001548:	212a      	movs	r1, #42	; 0x2a
 800154a:	4863      	ldr	r0, [pc, #396]	; (80016d8 <_orient+0x2dc>)
 800154c:	f7ff fc86 	bl	8000e5c <error_handler>

    dDataY = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001552:	b21b      	sxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffe5 	bl	8000524 <__aeabi_i2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001562:	f7ff f849 	bl	80005f8 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ORZD, &wdata))) // Read data from the orientation sensor dataz register
 800156e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001572:	4619      	mov	r1, r3
 8001574:	202b      	movs	r0, #43	; 0x2b
 8001576:	f001 ffbd 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 800157a:	4603      	mov	r3, r0
 800157c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001580:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <_orient+0x19a>
      error_handler("VRRd", VREG_ORZD, ucRetStat);  // error display
 8001588:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800158c:	461a      	mov	r2, r3
 800158e:	212b      	movs	r1, #43	; 0x2b
 8001590:	4851      	ldr	r0, [pc, #324]	; (80016d8 <_orient+0x2dc>)
 8001592:	f7ff fc63 	bl	8000e5c <error_handler>

    dDataZ = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001598:	b21b      	sxth	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffc2 	bl	8000524 <__aeabi_i2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80015a8:	f7ff f826 	bl	80005f8 <__aeabi_dmul>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ORWD, &wdata)))  // Read data from the orientation sensor dataw register
 80015b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015b8:	4619      	mov	r1, r3
 80015ba:	202c      	movs	r0, #44	; 0x2c
 80015bc:	f001 ff9a 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80015c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <_orient+0x1e0>
      error_handler("VRRd", VREG_ORWD, ucRetStat);  //error display
 80015ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015d2:	461a      	mov	r2, r3
 80015d4:	212c      	movs	r1, #44	; 0x2c
 80015d6:	4840      	ldr	r0, [pc, #256]	; (80016d8 <_orient+0x2dc>)
 80015d8:	f7ff fc40 	bl	8000e5c <error_handler>

    dDataW = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 80015dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff9f 	bl	8000524 <__aeabi_i2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80015ee:	f7ff f803 	bl	80005f8 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    if (prev_dat[0] != dDataX || prev_dat[1] != dDataY || prev_dat[2] != dDataZ || prev_dat[3] != dDataW) // Ensure that this data has not yet been displayed
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <_orient+0x2e0>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001604:	f7ff fa60 	bl	8000ac8 <__aeabi_dcmpeq>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d01d      	beq.n	800164a <_orient+0x24e>
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <_orient+0x2e0>)
 8001610:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001614:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001618:	f7ff fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d013      	beq.n	800164a <_orient+0x24e>
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <_orient+0x2e0>)
 8001624:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001628:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800162c:	f7ff fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d009      	beq.n	800164a <_orient+0x24e>
 8001636:	4b29      	ldr	r3, [pc, #164]	; (80016dc <_orient+0x2e0>)
 8001638:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800163c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001640:	f7ff fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d113      	bne.n	8001672 <_orient+0x276>
    {
      prev_dat[0] = dDataX;                       // Store the current data values for later reference
 800164a:	4924      	ldr	r1, [pc, #144]	; (80016dc <_orient+0x2e0>)
 800164c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001650:	e9c1 2300 	strd	r2, r3, [r1]
      prev_dat[1] = dDataY;
 8001654:	4921      	ldr	r1, [pc, #132]	; (80016dc <_orient+0x2e0>)
 8001656:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800165a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      prev_dat[2] = dDataZ;
 800165e:	491f      	ldr	r1, [pc, #124]	; (80016dc <_orient+0x2e0>)
 8001660:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001664:	e9c1 2304 	strd	r2, r3, [r1, #16]
      prev_dat[3] = dDataW;
 8001668:	491c      	ldr	r1, [pc, #112]	; (80016dc <_orient+0x2e0>)
 800166a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800166e:	e9c1 2306 	strd	r2, r3, [r1, #24]

    //if (flag)
    //{
     // flag = 0;
      //Disable the orientation sensor on exit
      if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 8001672:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001676:	4619      	mov	r1, r3
 8001678:	2000      	movs	r0, #0
 800167a:	f001 ff3b 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 800167e:	4603      	mov	r3, r0
 8001680:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001684:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001688:	2b00      	cmp	r3, #0
 800168a:	d115      	bne.n	80016b8 <_orient+0x2bc>
      {
        if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata & ~VREG_SHC_ORI_EN))) // Disable the orientation sensor (clear the ORI_EN bit)
 800168c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800168e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001692:	4619      	mov	r1, r3
 8001694:	2000      	movs	r0, #0
 8001696:	f001 ff97 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 800169a:	4603      	mov	r3, r0
 800169c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80016a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00e      	beq.n	80016c6 <_orient+0x2ca>
          error_handler("VRWr", VREG_SHC, ucRetStat);      // error display
 80016a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016ac:	461a      	mov	r2, r3
 80016ae:	2100      	movs	r1, #0
 80016b0:	4808      	ldr	r0, [pc, #32]	; (80016d4 <_orient+0x2d8>)
 80016b2:	f7ff fbd3 	bl	8000e5c <error_handler>
      }
      else
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
    //}
}
 80016b6:	e006      	b.n	80016c6 <_orient+0x2ca>
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
 80016b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016bc:	461a      	mov	r2, r3
 80016be:	2100      	movs	r1, #0
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <_orient+0x2dc>)
 80016c2:	f7ff fbcb 	bl	8000e5c <error_handler>
}
 80016c6:	bf00      	nop
 80016c8:	3778      	adds	r7, #120	; 0x78
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	3ff00000 	.word	0x3ff00000
 80016d4:	0800c338 	.word	0x0800c338
 80016d8:	0800c340 	.word	0x0800c340
 80016dc:	200000a0 	.word	0x200000a0

080016e0 <_inclin>:

void _inclin() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b09e      	sub	sp, #120	; 0x78
 80016e4:	af00      	add	r7, sp, #0
  UINT8 ucRetStat;                                                // return status value
  UINT16 wdata;                                                   // pre-exponent-scaled data
  double dDataX = 0, dDataY = 0, dDataZ = 0, dDataW = 0;          // Data field variables
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  double dMult = 1;                                               // Multiplier for data fields : sets them to appropriate order of magnitude
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b8d      	ldr	r3, [pc, #564]	; (8001950 <_inclin+0x270>)
 800171c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  char _x[15], _y[15], _z[15], _w[15];

  // Enable the Inclinometer
  // To support multi-threaded applications, Read-Modify-Write the VREG:
  if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 8001720:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001724:	4619      	mov	r1, r3
 8001726:	2000      	movs	r0, #0
 8001728:	f001 fee4 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001732:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001736:	2b00      	cmp	r3, #0
 8001738:	d115      	bne.n	8001766 <_inclin+0x86>
  {
    if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata | VREG_SHC_INC_EN))) // Enable the Inclinometer (INC_EN)
 800173a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	4619      	mov	r1, r3
 8001742:	2000      	movs	r0, #0
 8001744:	f001 ff40 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001748:	4603      	mov	r3, r0
 800174a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800174e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00e      	beq.n	8001774 <_inclin+0x94>
      error_handler("VRWr", VREG_SHC, ucRetStat);  // error display
 8001756:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800175a:	461a      	mov	r2, r3
 800175c:	2100      	movs	r1, #0
 800175e:	487d      	ldr	r0, [pc, #500]	; (8001954 <_inclin+0x274>)
 8001760:	f7ff fb7c 	bl	8000e5c <error_handler>
 8001764:	e006      	b.n	8001774 <_inclin+0x94>
  }
  else
    error_handler("VRRd", VREG_SHC, ucRetStat);       // error display
 8001766:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800176a:	461a      	mov	r2, r3
 800176c:	2100      	movs	r1, #0
 800176e:	487a      	ldr	r0, [pc, #488]	; (8001958 <_inclin+0x278>)
 8001770:	f7ff fb74 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_INSEN, 0x01)))    // Change sensitivity
 8001774:	2101      	movs	r1, #1
 8001776:	2006      	movs	r0, #6
 8001778:	f001 ff26 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 800177c:	4603      	mov	r3, r0
 800177e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001782:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001786:	2b00      	cmp	r3, #0
 8001788:	d006      	beq.n	8001798 <_inclin+0xb8>
    error_handler("VRWr", VREG_INSEN, ucRetStat);     // error display
 800178a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800178e:	461a      	mov	r2, r3
 8001790:	2106      	movs	r1, #6
 8001792:	4870      	ldr	r0, [pc, #448]	; (8001954 <_inclin+0x274>)
 8001794:	f7ff fb62 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_INDR, 0x32)))    // Change data rate
 8001798:	2132      	movs	r1, #50	; 0x32
 800179a:	2010      	movs	r0, #16
 800179c:	f001 ff14 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80017a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <_inclin+0xdc>
    error_handler("VRWr", VREG_INDR, ucRetStat);      // error display
 80017ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017b2:	461a      	mov	r2, r3
 80017b4:	2110      	movs	r1, #16
 80017b6:	4867      	ldr	r0, [pc, #412]	; (8001954 <_inclin+0x274>)
 80017b8:	f7ff fb50 	bl	8000e5c <error_handler>

  dMult = ret_exponent(INCL_VREG_OFFSET);             // Get unit exponent for this sensor's data
 80017bc:	2004      	movs	r0, #4
 80017be:	f001 fa13 	bl	8002be8 <ret_exponent>
 80017c2:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_INXD, &wdata))) // Read data from the inclinometer datax register
 80017c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ca:	4619      	mov	r1, r3
 80017cc:	202d      	movs	r0, #45	; 0x2d
 80017ce:	f001 fe91 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80017d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <_inclin+0x10e>
      error_handler("VRRd", VREG_INXD, ucRetStat);  // error display
 80017e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017e4:	461a      	mov	r2, r3
 80017e6:	212d      	movs	r1, #45	; 0x2d
 80017e8:	485b      	ldr	r0, [pc, #364]	; (8001958 <_inclin+0x278>)
 80017ea:	f7ff fb37 	bl	8000e5c <error_handler>

    dDataX = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 80017ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe96 	bl	8000524 <__aeabi_i2d>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001800:	f7fe fefa 	bl	80005f8 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_INYD, &wdata)))  // Read data from the inclinometer datay register
 800180c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001810:	4619      	mov	r1, r3
 8001812:	202e      	movs	r0, #46	; 0x2e
 8001814:	f001 fe6e 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001818:	4603      	mov	r3, r0
 800181a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800181e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <_inclin+0x154>
      error_handler("VRRd", VREG_INYD, ucRetStat);  // error display
 8001826:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800182a:	461a      	mov	r2, r3
 800182c:	212e      	movs	r1, #46	; 0x2e
 800182e:	484a      	ldr	r0, [pc, #296]	; (8001958 <_inclin+0x278>)
 8001830:	f7ff fb14 	bl	8000e5c <error_handler>

    dDataY = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001836:	b21b      	sxth	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe73 	bl	8000524 <__aeabi_i2d>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001846:	f7fe fed7 	bl	80005f8 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_INZD, &wdata)))  // Read data from the inclinometer dataz register
 8001852:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001856:	4619      	mov	r1, r3
 8001858:	202f      	movs	r0, #47	; 0x2f
 800185a:	f001 fe4b 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 800185e:	4603      	mov	r3, r0
 8001860:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001864:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <_inclin+0x19a>
      error_handler("VRRd", VREG_INZD, ucRetStat);  // error display
 800186c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001870:	461a      	mov	r2, r3
 8001872:	212f      	movs	r1, #47	; 0x2f
 8001874:	4838      	ldr	r0, [pc, #224]	; (8001958 <_inclin+0x278>)
 8001876:	f7ff faf1 	bl	8000e5c <error_handler>

    dDataZ = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 800187a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800187c:	b21b      	sxth	r3, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe50 	bl	8000524 <__aeabi_i2d>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800188c:	f7fe feb4 	bl	80005f8 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

    if (prev_dat[0] != dDataX || prev_dat[1] != dDataY || prev_dat[2] != dDataZ) // Ensure that this data has not yet been displayed
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <_inclin+0x27c>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80018a2:	f7ff f911 	bl	8000ac8 <__aeabi_dcmpeq>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d013      	beq.n	80018d4 <_inclin+0x1f4>
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <_inclin+0x27c>)
 80018ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80018b6:	f7ff f907 	bl	8000ac8 <__aeabi_dcmpeq>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d009      	beq.n	80018d4 <_inclin+0x1f4>
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <_inclin+0x27c>)
 80018c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018c6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018ca:	f7ff f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10e      	bne.n	80018f2 <_inclin+0x212>
    {
      prev_dat[0] = dDataX;                       // Store the current data values for later reference
 80018d4:	4921      	ldr	r1, [pc, #132]	; (800195c <_inclin+0x27c>)
 80018d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018da:	e9c1 2300 	strd	r2, r3, [r1]
      prev_dat[1] = dDataY;
 80018de:	491f      	ldr	r1, [pc, #124]	; (800195c <_inclin+0x27c>)
 80018e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80018e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      prev_dat[2] = dDataZ;
 80018e8:	491c      	ldr	r1, [pc, #112]	; (800195c <_inclin+0x27c>)
 80018ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018ee:	e9c1 2304 	strd	r2, r3, [r1, #16]

    //if (flag)
    //{
      //flag = 0;
      // Disable the Inclinometer on exit
      if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 80018f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018f6:	4619      	mov	r1, r3
 80018f8:	2000      	movs	r0, #0
 80018fa:	f001 fdfb 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 80018fe:	4603      	mov	r3, r0
 8001900:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001904:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001908:	2b00      	cmp	r3, #0
 800190a:	d115      	bne.n	8001938 <_inclin+0x258>
      {
        if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata & ~VREG_SHC_INC_EN))) // Disable the Inclinometer (clear the INC_EN bit)
 800190c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001912:	4619      	mov	r1, r3
 8001914:	2000      	movs	r0, #0
 8001916:	f001 fe57 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 800191a:	4603      	mov	r3, r0
 800191c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001920:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00e      	beq.n	8001946 <_inclin+0x266>
          error_handler("VRWr", VREG_SHC, ucRetStat);      // error display
 8001928:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800192c:	461a      	mov	r2, r3
 800192e:	2100      	movs	r1, #0
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <_inclin+0x274>)
 8001932:	f7ff fa93 	bl	8000e5c <error_handler>
      }
      else
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
    //}
}
 8001936:	e006      	b.n	8001946 <_inclin+0x266>
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
 8001938:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800193c:	461a      	mov	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <_inclin+0x278>)
 8001942:	f7ff fa8b 	bl	8000e5c <error_handler>
}
 8001946:	bf00      	nop
 8001948:	3778      	adds	r7, #120	; 0x78
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	3ff00000 	.word	0x3ff00000
 8001954:	0800c338 	.word	0x0800c338
 8001958:	0800c340 	.word	0x0800c340
 800195c:	200000a0 	.word	0x200000a0

08001960 <_rawAccel>:

  char _x[11], _y[11], _z[11], _w[11];

void _rawAccel() {
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	; 0x38
 8001964:	af00      	add	r7, sp, #0
  UINT8 ucRetStat;                                                // return status value
  UINT16 wdata;                                                   // pre-exponent-scaled data
  double dDataX = 0, dDataY = 0, dDataZ = 0, dDataW = 0;          // Data field variables
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double dMult = 1;                                               // Multiplier for data fields : sets them to appropriate order of magnitude
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b86      	ldr	r3, [pc, #536]	; (8001bb4 <_rawAccel+0x254>)
 800199c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    //LATG.B0 = !LATG.B0;

  // Enable the Raw Accelerometer
  // To support multi-threaded applications, Read-Modify-Write the VREG:
  if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	2000      	movs	r0, #0
 80019a6:	f001 fda5 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d112      	bne.n	80019da <_rawAccel+0x7a>
  {
    if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata | VREG_SHC_RAWACC_EN | VREG_SHC_ACC_EN))) // Enable the raw accelerometer (RAWACC_EN)& corresponding ACCEL sensor
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f443 6301 	orr.w	r3, r3, #2064	; 0x810
 80019ba:	4619      	mov	r1, r3
 80019bc:	2000      	movs	r0, #0
 80019be:	f001 fe03 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 80019c2:	4603      	mov	r3, r0
 80019c4:	73fb      	strb	r3, [r7, #15]
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00c      	beq.n	80019e6 <_rawAccel+0x86>
                                                       //rev 0.10 spec : 'for any raw sensor to be enabled properly, the corresponding
                                                       //sensors must also be enabled. For RAW ACCEL corresponding sensor : ACCEL

      error_handler("VRWr", VREG_SHC, ucRetStat);  // error display
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	461a      	mov	r2, r3
 80019d0:	2100      	movs	r1, #0
 80019d2:	4879      	ldr	r0, [pc, #484]	; (8001bb8 <_rawAccel+0x258>)
 80019d4:	f7ff fa42 	bl	8000e5c <error_handler>
 80019d8:	e005      	b.n	80019e6 <_rawAccel+0x86>
  }
  else  {
    error_handler("VRRd", VREG_SHC, ucRetStat);       // error display
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	461a      	mov	r2, r3
 80019de:	2100      	movs	r1, #0
 80019e0:	4876      	ldr	r0, [pc, #472]	; (8001bbc <_rawAccel+0x25c>)
 80019e2:	f7ff fa3b 	bl	8000e5c <error_handler>
  }

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_RACSEN, RAW_SENSITIVITY_MIN))) // Set Raw Acc (and corresponding sensor (Acc)) sensitivity to "0" to
 80019e6:	2100      	movs	r1, #0
 80019e8:	2009      	movs	r0, #9
 80019ea:	f001 fded 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 80019ee:	4603      	mov	r3, r0
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <_rawAccel+0xa4>
                                        //achieve the desired data rate for raw sensors (see spec).
    error_handler("VRWr", VREG_RACSEN, ucRetStat);    // error display
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	461a      	mov	r2, r3
 80019fc:	2109      	movs	r1, #9
 80019fe:	486e      	ldr	r0, [pc, #440]	; (8001bb8 <_rawAccel+0x258>)
 8001a00:	f7ff fa2c 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_ACSEN, RAW_SENSITIVITY_MIN))) // Set Acc sensitivity to "0" to achieve the desired data rates for raw sensors.
 8001a04:	2100      	movs	r1, #0
 8001a06:	2002      	movs	r0, #2
 8001a08:	f001 fdde 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <_rawAccel+0xc2>
    error_handler("VRWr", VREG_ACSEN, ucRetStat);    // error display
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	4866      	ldr	r0, [pc, #408]	; (8001bb8 <_rawAccel+0x258>)
 8001a1e:	f7ff fa1d 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_RACDR, RAW_DATA_RATE))) // Change Raw Acc data rate
 8001a22:	2164      	movs	r1, #100	; 0x64
 8001a24:	2013      	movs	r0, #19
 8001a26:	f001 fdcf 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <_rawAccel+0xe0>
    error_handler("VRWr", VREG_RACDR, ucRetStat);     //error display
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	461a      	mov	r2, r3
 8001a38:	2113      	movs	r1, #19
 8001a3a:	485f      	ldr	r0, [pc, #380]	; (8001bb8 <_rawAccel+0x258>)
 8001a3c:	f7ff fa0e 	bl	8000e5c <error_handler>

  dMult = ret_exponent(RAW_ACC_VREG_OFFSET);          // Get unit exponent for this sensor's data
 8001a40:	2007      	movs	r0, #7
 8001a42:	f001 f8d1 	bl	8002be8 <ret_exponent>
 8001a46:	ed87 0b04 	vstr	d0, [r7, #16]

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_RACXD, &wdata)))  // Read data from the raw accelerometer datax register
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	2019      	movs	r0, #25
 8001a52:	f001 fd4f 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001a56:	4603      	mov	r3, r0
 8001a58:	73fb      	strb	r3, [r7, #15]
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <_rawAccel+0x10c>
      error_handler("VRRd", VREG_RACXD, ucRetStat); // error display
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	461a      	mov	r2, r3
 8001a64:	2119      	movs	r1, #25
 8001a66:	4855      	ldr	r0, [pc, #340]	; (8001bbc <_rawAccel+0x25c>)
 8001a68:	f7ff f9f8 	bl	8000e5c <error_handler>

    dDataX = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd57 	bl	8000524 <__aeabi_i2d>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a7e:	f7fe fdbb 	bl	80005f8 <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_RACYD, &wdata))) // Read data from the raw accelerometer datay register
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	4619      	mov	r1, r3
 8001a90:	201a      	movs	r0, #26
 8001a92:	f001 fd2f 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001a96:	4603      	mov	r3, r0
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <_rawAccel+0x14c>
      error_handler("VRRd", VREG_RACYD, ucRetStat); // error display
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	211a      	movs	r1, #26
 8001aa6:	4845      	ldr	r0, [pc, #276]	; (8001bbc <_rawAccel+0x25c>)
 8001aa8:	f7ff f9d8 	bl	8000e5c <error_handler>

    dDataY = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd37 	bl	8000524 <__aeabi_i2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001abe:	f7fe fd9b 	bl	80005f8 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_RACZD, &wdata)))  // Read data from the raw accelerometer dataz register
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	201b      	movs	r0, #27
 8001ad2:	f001 fd0f 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <_rawAccel+0x18c>
      error_handler("VRRd", VREG_RACZD, ucRetStat); // error display
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	211b      	movs	r1, #27
 8001ae6:	4835      	ldr	r0, [pc, #212]	; (8001bbc <_rawAccel+0x25c>)
 8001ae8:	f7ff f9b8 	bl	8000e5c <error_handler>

    dDataZ = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd17 	bl	8000524 <__aeabi_i2d>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001afe:	f7fe fd7b 	bl	80005f8 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (prev_dat[0] != dDataX || prev_dat[1] != dDataY || prev_dat[2] != dDataZ) // Ensure that this data has not yet been displayed
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <_rawAccel+0x260>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b14:	f7fe ffd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d013      	beq.n	8001b46 <_rawAccel+0x1e6>
 8001b1e:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <_rawAccel+0x260>)
 8001b20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b28:	f7fe ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d009      	beq.n	8001b46 <_rawAccel+0x1e6>
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <_rawAccel+0x260>)
 8001b34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b3c:	f7fe ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10e      	bne.n	8001b64 <_rawAccel+0x204>
    {
      prev_dat[0] = dDataX;                           // Store the current data values for later reference
 8001b46:	491e      	ldr	r1, [pc, #120]	; (8001bc0 <_rawAccel+0x260>)
 8001b48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b4c:	e9c1 2300 	strd	r2, r3, [r1]
      prev_dat[1] = dDataY;
 8001b50:	491b      	ldr	r1, [pc, #108]	; (8001bc0 <_rawAccel+0x260>)
 8001b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b56:	e9c1 2302 	strd	r2, r3, [r1, #8]
      prev_dat[2] = dDataZ;
 8001b5a:	4919      	ldr	r1, [pc, #100]	; (8001bc0 <_rawAccel+0x260>)
 8001b5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b60:	e9c1 2304 	strd	r2, r3, [r1, #16]

    //if (flag)
    //{
      //flag = 0;
      // Disable the Raw Accelerometer & corresponding ACCEL sensor on exit
      if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f001 fcc3 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d112      	bne.n	8001b9e <_rawAccel+0x23e>
      {
        if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata & ~(VREG_SHC_RAWACC_EN | VREG_SHC_ACC_EN)))) // Disable the raw accelerometer (clear the RAWACC_EN bit) & corresponding ACC_EN
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f423 6301 	bic.w	r3, r3, #2064	; 0x810
 8001b7e:	4619      	mov	r1, r3
 8001b80:	2000      	movs	r0, #0
 8001b82:	f001 fd21 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00c      	beq.n	8001baa <_rawAccel+0x24a>
          error_handler("VRWr", VREG_SHC, ucRetStat);      // error display
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	461a      	mov	r2, r3
 8001b94:	2100      	movs	r1, #0
 8001b96:	4808      	ldr	r0, [pc, #32]	; (8001bb8 <_rawAccel+0x258>)
 8001b98:	f7ff f960 	bl	8000e5c <error_handler>
      }
      else
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
    //}
}
 8001b9c:	e005      	b.n	8001baa <_rawAccel+0x24a>
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4805      	ldr	r0, [pc, #20]	; (8001bbc <_rawAccel+0x25c>)
 8001ba6:	f7ff f959 	bl	8000e5c <error_handler>
}
 8001baa:	bf00      	nop
 8001bac:	3738      	adds	r7, #56	; 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	3ff00000 	.word	0x3ff00000
 8001bb8:	0800c338 	.word	0x0800c338
 8001bbc:	0800c340 	.word	0x0800c340
 8001bc0:	200000a0 	.word	0x200000a0

08001bc4 <_rawMagnet>:

void _rawMagnet() {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b09e      	sub	sp, #120	; 0x78
 8001bc8:	af00      	add	r7, sp, #0
  UINT8 ucRetStat;                                                // return status value
  UINT16 wdata;                                                   // pre-exponent-scaled data
  double dDataX = 0, dDataY = 0, dDataZ = 0, dDataW = 0;          // Data field variables
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  double dMult = 1;                                               // Multiplier for data fields : sets them to appropriate order of magnitude
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b96      	ldr	r3, [pc, #600]	; (8001e58 <_rawMagnet+0x294>)
 8001c00:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  char _x[15], _y[15], _z[15], _w[15];

  // Enable the Raw Magnometer
  // To support multi-threaded applications, Read-Modify-Write the VREG :
  if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 8001c04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c08:	4619      	mov	r1, r3
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f001 fc72 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001c16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d115      	bne.n	8001c4a <_rawMagnet+0x86>
  {
    if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata | VREG_SHC_RAWMAG_EN | VREG_SHC_CMP_EN))) // Enable the  Raw Magnometer (RAWMAG_EN) & corresponding CMP sensor
 8001c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c20:	f443 5382 	orr.w	r3, r3, #4160	; 0x1040
 8001c24:	4619      	mov	r1, r3
 8001c26:	2000      	movs	r0, #0
 8001c28:	f001 fcce 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001c32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00e      	beq.n	8001c58 <_rawMagnet+0x94>
                                                       //rev 0.10 spec: 'for any raw sensor to be enabled properly, the corresponding
                                                       //sensors must also be enabled. For RAW MAG corresponding sensor : CMP
      error_handler("VRWr", VREG_SHC, ucRetStat);  // error display
 8001c3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2100      	movs	r1, #0
 8001c42:	4886      	ldr	r0, [pc, #536]	; (8001e5c <_rawMagnet+0x298>)
 8001c44:	f7ff f90a 	bl	8000e5c <error_handler>
 8001c48:	e006      	b.n	8001c58 <_rawMagnet+0x94>
  }
  else
    error_handler("VRRd", VREG_SHC, ucRetStat);       // error display
 8001c4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2100      	movs	r1, #0
 8001c52:	4883      	ldr	r0, [pc, #524]	; (8001e60 <_rawMagnet+0x29c>)
 8001c54:	f7ff f902 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_RMGSEN, RAW_SENSITIVITY_MIN)))  // Set Raw Acc (and corresponding sensor (Cmp)) sensitivity to "0" to
 8001c58:	2100      	movs	r1, #0
 8001c5a:	200a      	movs	r0, #10
 8001c5c:	f001 fcb4 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001c66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d006      	beq.n	8001c7c <_rawMagnet+0xb8>
                                         //achieve the desired data rate for raw sensors (see spec).
    error_handler("VRWr", VREG_RMGSEN, ucRetStat);    // error display
 8001c6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c72:	461a      	mov	r2, r3
 8001c74:	210a      	movs	r1, #10
 8001c76:	4879      	ldr	r0, [pc, #484]	; (8001e5c <_rawMagnet+0x298>)
 8001c78:	f7ff f8f0 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_CMSEN, RAW_SENSITIVITY_MIN))) // Set Cmp sensitivity to "0" to achieve the desired data rates for raw sensors.
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2004      	movs	r0, #4
 8001c80:	f001 fca2 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001c8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <_rawMagnet+0xdc>
    error_handler("VRWr", VREG_CMSEN, ucRetStat);    // error display
 8001c92:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c96:	461a      	mov	r2, r3
 8001c98:	2104      	movs	r1, #4
 8001c9a:	4870      	ldr	r0, [pc, #448]	; (8001e5c <_rawMagnet+0x298>)
 8001c9c:	f7ff f8de 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_RMGDR, RAW_DATA_RATE)))  // Change data rate
 8001ca0:	2164      	movs	r1, #100	; 0x64
 8001ca2:	2014      	movs	r0, #20
 8001ca4:	f001 fc90 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001cae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <_rawMagnet+0x100>
    error_handler("VRWr", VREG_RMGDR, ucRetStat);     // error display
 8001cb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2114      	movs	r1, #20
 8001cbe:	4867      	ldr	r0, [pc, #412]	; (8001e5c <_rawMagnet+0x298>)
 8001cc0:	f7ff f8cc 	bl	8000e5c <error_handler>

  dMult = ret_exponent(RAW_MAG_VREG_OFFSET);          // Get unit exponent for this sensor's data
 8001cc4:	2008      	movs	r0, #8
 8001cc6:	f000 ff8f 	bl	8002be8 <ret_exponent>
 8001cca:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_RMGXD, &wdata)))  // Read data from the raw magnometer datax register
 8001cce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	2026      	movs	r0, #38	; 0x26
 8001cd6:	f001 fc0d 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001ce0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <_rawMagnet+0x132>
      error_handler("VRRd", VREG_RMGXD, ucRetStat); // error display
 8001ce8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cec:	461a      	mov	r2, r3
 8001cee:	2126      	movs	r1, #38	; 0x26
 8001cf0:	485b      	ldr	r0, [pc, #364]	; (8001e60 <_rawMagnet+0x29c>)
 8001cf2:	f7ff f8b3 	bl	8000e5c <error_handler>

    dDataX = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc12 	bl	8000524 <__aeabi_i2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d08:	f7fe fc76 	bl	80005f8 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_RMGYD, &wdata)))  // Read data from the raw magnometer datay register
 8001d14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d18:	4619      	mov	r1, r3
 8001d1a:	2027      	movs	r0, #39	; 0x27
 8001d1c:	f001 fbea 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001d26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d006      	beq.n	8001d3c <_rawMagnet+0x178>
      error_handler("VRRd", VREG_RMGYD, ucRetStat); // error display
 8001d2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d32:	461a      	mov	r2, r3
 8001d34:	2127      	movs	r1, #39	; 0x27
 8001d36:	484a      	ldr	r0, [pc, #296]	; (8001e60 <_rawMagnet+0x29c>)
 8001d38:	f7ff f890 	bl	8000e5c <error_handler>

    dDataY = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fbef 	bl	8000524 <__aeabi_i2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d4e:	f7fe fc53 	bl	80005f8 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_RMGZD, &wdata)))  // Read data from the raw magnometer dataz register
 8001d5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d5e:	4619      	mov	r1, r3
 8001d60:	2028      	movs	r0, #40	; 0x28
 8001d62:	f001 fbc7 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001d6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <_rawMagnet+0x1be>
      error_handler("VRRd", VREG_RMGZD, ucRetStat); // error display
 8001d74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2128      	movs	r1, #40	; 0x28
 8001d7c:	4838      	ldr	r0, [pc, #224]	; (8001e60 <_rawMagnet+0x29c>)
 8001d7e:	f7ff f86d 	bl	8000e5c <error_handler>

    dDataZ = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbcc 	bl	8000524 <__aeabi_i2d>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d94:	f7fe fc30 	bl	80005f8 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

    if (prev_dat[0] != dDataX || prev_dat[1] != dDataY || prev_dat[2] != dDataZ) // Ensure that this data has not yet been displayed
 8001da0:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <_rawMagnet+0x2a0>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001daa:	f7fe fe8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d013      	beq.n	8001ddc <_rawMagnet+0x218>
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <_rawMagnet+0x2a0>)
 8001db6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001dba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001dbe:	f7fe fe83 	bl	8000ac8 <__aeabi_dcmpeq>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d009      	beq.n	8001ddc <_rawMagnet+0x218>
 8001dc8:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <_rawMagnet+0x2a0>)
 8001dca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001dce:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001dd2:	f7fe fe79 	bl	8000ac8 <__aeabi_dcmpeq>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10e      	bne.n	8001dfa <_rawMagnet+0x236>
    {
      prev_dat[0] = dDataX;                       // Store the current data values for later reference
 8001ddc:	4921      	ldr	r1, [pc, #132]	; (8001e64 <_rawMagnet+0x2a0>)
 8001dde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001de2:	e9c1 2300 	strd	r2, r3, [r1]
      prev_dat[1] = dDataY;
 8001de6:	491f      	ldr	r1, [pc, #124]	; (8001e64 <_rawMagnet+0x2a0>)
 8001de8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001dec:	e9c1 2302 	strd	r2, r3, [r1, #8]
      prev_dat[2] = dDataZ;
 8001df0:	491c      	ldr	r1, [pc, #112]	; (8001e64 <_rawMagnet+0x2a0>)
 8001df2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001df6:	e9c1 2304 	strd	r2, r3, [r1, #16]

    //if (flag)
    //{
      //flag = 0;
      //Disable the Raw Magnometer on exit
      if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 8001dfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dfe:	4619      	mov	r1, r3
 8001e00:	2000      	movs	r0, #0
 8001e02:	f001 fb77 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001e0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d115      	bne.n	8001e40 <_rawMagnet+0x27c>
      {
        if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata & ~(VREG_SHC_RAWMAG_EN | VREG_SHC_CMP_EN)))) // Disable the Raw Magnometer (clear the RAWMAG_EN bit) & corresponding CMP_EN
 8001e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e16:	f423 5382 	bic.w	r3, r3, #4160	; 0x1040
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f001 fbd3 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001e28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00e      	beq.n	8001e4e <_rawMagnet+0x28a>
          error_handler("VRWr", VREG_SHC, ucRetStat);      // error display
 8001e30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e34:	461a      	mov	r2, r3
 8001e36:	2100      	movs	r1, #0
 8001e38:	4808      	ldr	r0, [pc, #32]	; (8001e5c <_rawMagnet+0x298>)
 8001e3a:	f7ff f80f 	bl	8000e5c <error_handler>
      }
      else
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
    //}
}
 8001e3e:	e006      	b.n	8001e4e <_rawMagnet+0x28a>
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
 8001e40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e44:	461a      	mov	r2, r3
 8001e46:	2100      	movs	r1, #0
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <_rawMagnet+0x29c>)
 8001e4a:	f7ff f807 	bl	8000e5c <error_handler>
}
 8001e4e:	bf00      	nop
 8001e50:	3778      	adds	r7, #120	; 0x78
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	3ff00000 	.word	0x3ff00000
 8001e5c:	0800c338 	.word	0x0800c338
 8001e60:	0800c340 	.word	0x0800c340
 8001e64:	200000a0 	.word	0x200000a0

08001e68 <_rawGyro>:

void _rawGyro() {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b09e      	sub	sp, #120	; 0x78
 8001e6c:	af00      	add	r7, sp, #0
  UINT8 ucRetStat;                                                // return status value
  UINT16 wdata;                                                   // pre-exponent-scaled data
  double dDataX = 0, dDataY = 0, dDataZ = 0, dDataW = 0;          // Data field variables
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  double dMult = 1;                                               // Multiplier for data fields : sets them to appropriate order of magnitude
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b98      	ldr	r3, [pc, #608]	; (8002104 <_rawGyro+0x29c>)
 8001ea4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  char _x[15], _y[15], _z[15], _w[15];

  // Enable the Raw Gyrometer
  // To support multi-threaded applications, Read-Modify-Write the VREG:
  if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 8001ea8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001eac:	4619      	mov	r1, r3
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f001 fb20 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001eba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d117      	bne.n	8001ef2 <_rawGyro+0x8a>
  {
    if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata | VREG_SHC_RAWGYR_EN | VREG_SHC_GYRO_EN))) // Enable the Raw Gyrometer (GYR_EN) & corresponding GYRO sensor
 8001ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ec8:	f043 0320 	orr.w	r3, r3, #32
 8001ecc:	4619      	mov	r1, r3
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f001 fb7a 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001eda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00e      	beq.n	8001f00 <_rawGyro+0x98>
                                                        //rev 0.10 spec: 'for any raw sensor to be enabled properly, the corresponding
                                                        //sensors must also be enabled. For RAW GYRO corresponding sensor : GYRO
      error_handler("VRWr", VREG_SHC, ucRetStat);  // error display
 8001ee2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4887      	ldr	r0, [pc, #540]	; (8002108 <_rawGyro+0x2a0>)
 8001eec:	f7fe ffb6 	bl	8000e5c <error_handler>
 8001ef0:	e006      	b.n	8001f00 <_rawGyro+0x98>
  }
  else
    error_handler("VRRd", VREG_SHC, ucRetStat);       // error display
 8001ef2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4884      	ldr	r0, [pc, #528]	; (800210c <_rawGyro+0x2a4>)
 8001efc:	f7fe ffae 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_RGYSEN, RAW_SENSITIVITY_MIN))) // Set Raw Gyro (and corresponding sensor (Gyro)) sensitivity to "0" to
 8001f00:	2100      	movs	r1, #0
 8001f02:	200b      	movs	r0, #11
 8001f04:	f001 fb60 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001f0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d006      	beq.n	8001f24 <_rawGyro+0xbc>
                                        //achieve the desired data rate for raw sensors (see spec).
    error_handler("VRWr", VREG_RACSEN, ucRetStat);    // error display
 8001f16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2109      	movs	r1, #9
 8001f1e:	487a      	ldr	r0, [pc, #488]	; (8002108 <_rawGyro+0x2a0>)
 8001f20:	f7fe ff9c 	bl	8000e5c <error_handler>

  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_GYSEN, RAW_SENSITIVITY_MIN))) // Set Gyro sensitivity to "0" to achieve the desired data rates for raw sensors.
 8001f24:	2100      	movs	r1, #0
 8001f26:	2003      	movs	r0, #3
 8001f28:	f001 fb4e 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001f32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <_rawGyro+0xe0>
    error_handler("VRWr", VREG_GYSEN, ucRetStat);    // error display
 8001f3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2103      	movs	r1, #3
 8001f42:	4871      	ldr	r0, [pc, #452]	; (8002108 <_rawGyro+0x2a0>)
 8001f44:	f7fe ff8a 	bl	8000e5c <error_handler>


  if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_RGYDR, RAW_DATA_RATE)))  // Change data rate
 8001f48:	2164      	movs	r1, #100	; 0x64
 8001f4a:	2015      	movs	r0, #21
 8001f4c:	f001 fb3c 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001f56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d006      	beq.n	8001f6c <_rawGyro+0x104>
    error_handler("VRRd", VREG_RGYDR, ucRetStat);     // error display
 8001f5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f62:	461a      	mov	r2, r3
 8001f64:	2115      	movs	r1, #21
 8001f66:	4869      	ldr	r0, [pc, #420]	; (800210c <_rawGyro+0x2a4>)
 8001f68:	f7fe ff78 	bl	8000e5c <error_handler>

  dMult = ret_exponent(RAW_GYR_VREG_OFFSET);          // Get unit exponent for this sensor's data
 8001f6c:	2009      	movs	r0, #9
 8001f6e:	f000 fe3b 	bl	8002be8 <ret_exponent>
 8001f72:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_RGYXD, &wdata))) // Read data from the raw gyrometer datax register
 8001f76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	201f      	movs	r0, #31
 8001f7e:	f001 fab9 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001f88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <_rawGyro+0x136>
      error_handler("VRRd", VREG_RGYXD, ucRetStat); // error display
 8001f90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f94:	461a      	mov	r2, r3
 8001f96:	211f      	movs	r1, #31
 8001f98:	485c      	ldr	r0, [pc, #368]	; (800210c <_rawGyro+0x2a4>)
 8001f9a:	f7fe ff5f 	bl	8000e5c <error_handler>

    dDataX = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fabe 	bl	8000524 <__aeabi_i2d>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001fb0:	f7fe fb22 	bl	80005f8 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_RGYYD, &wdata))) // Read data from the raw gyrometer datay register
 8001fbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2020      	movs	r0, #32
 8001fc4:	f001 fa96 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001fce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <_rawGyro+0x17c>
      error_handler("VRRd", VREG_RGYYD, ucRetStat); // error display
 8001fd6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2120      	movs	r1, #32
 8001fde:	484b      	ldr	r0, [pc, #300]	; (800210c <_rawGyro+0x2a4>)
 8001fe0:	f7fe ff3c 	bl	8000e5c <error_handler>

    dDataY = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 8001fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fa9b 	bl	8000524 <__aeabi_i2d>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ff6:	f7fe faff 	bl	80005f8 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

    if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_RGYZD, &wdata))) // Read data from the raw gyrometer dataz register
 8002002:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002006:	4619      	mov	r1, r3
 8002008:	2021      	movs	r0, #33	; 0x21
 800200a:	f001 fa73 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 800200e:	4603      	mov	r3, r0
 8002010:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002014:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <_rawGyro+0x1c2>
      error_handler("VRRd", VREG_RGYZD, ucRetStat); // error display
 800201c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002020:	461a      	mov	r2, r3
 8002022:	2121      	movs	r1, #33	; 0x21
 8002024:	4839      	ldr	r0, [pc, #228]	; (800210c <_rawGyro+0x2a4>)
 8002026:	f7fe ff19 	bl	8000e5c <error_handler>

    dDataZ = (int16_t)wdata * dMult;                    // Multiply this by the exponent scaler to get floating point value
 800202a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202c:	b21b      	sxth	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fa78 	bl	8000524 <__aeabi_i2d>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800203c:	f7fe fadc 	bl	80005f8 <__aeabi_dmul>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

    if (prev_dat[0] != dDataX || prev_dat[1] != dDataY || prev_dat[2] != dDataZ) // Ensure that this data has not yet been displayed
 8002048:	4b31      	ldr	r3, [pc, #196]	; (8002110 <_rawGyro+0x2a8>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002052:	f7fe fd39 	bl	8000ac8 <__aeabi_dcmpeq>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <_rawGyro+0x21c>
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <_rawGyro+0x2a8>)
 800205e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002062:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002066:	f7fe fd2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <_rawGyro+0x21c>
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <_rawGyro+0x2a8>)
 8002072:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002076:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800207a:	f7fe fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10e      	bne.n	80020a2 <_rawGyro+0x23a>
    {
      prev_dat[0] = dDataX;                       // Store the current data values for later reference
 8002084:	4922      	ldr	r1, [pc, #136]	; (8002110 <_rawGyro+0x2a8>)
 8002086:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800208a:	e9c1 2300 	strd	r2, r3, [r1]
      prev_dat[1] = dDataY;
 800208e:	4920      	ldr	r1, [pc, #128]	; (8002110 <_rawGyro+0x2a8>)
 8002090:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002094:	e9c1 2302 	strd	r2, r3, [r1, #8]
      prev_dat[2] = dDataZ;
 8002098:	491d      	ldr	r1, [pc, #116]	; (8002110 <_rawGyro+0x2a8>)
 800209a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800209e:	e9c1 2304 	strd	r2, r3, [r1, #16]

    //if (flag)
    //{
      //flag = 0;
      //Disable the Raw Gyro on exit
      if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS)  // Read data from the Sensor Hub Configuration register
 80020a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020a6:	4619      	mov	r1, r3
 80020a8:	2000      	movs	r0, #0
 80020aa:	f001 fa23 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80020b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d117      	bne.n	80020ec <_rawGyro+0x284>
      {
        if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata & ~(VREG_SHC_RAWGYR_EN | VREG_SHC_GYRO_EN)))) // Disable the raw gyro (clear the GYR_EN bit) & corresponding GYRO_EN
 80020bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020c2:	f023 0320 	bic.w	r3, r3, #32
 80020c6:	4619      	mov	r1, r3
 80020c8:	2000      	movs	r0, #0
 80020ca:	f001 fa7d 	bl	80035c8 <HOST_SF_LIB_VREG_write>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80020d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00e      	beq.n	80020fa <_rawGyro+0x292>
          error_handler("VRWr", VREG_SHC, ucRetStat);      //error display
 80020dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020e0:	461a      	mov	r2, r3
 80020e2:	2100      	movs	r1, #0
 80020e4:	4808      	ldr	r0, [pc, #32]	; (8002108 <_rawGyro+0x2a0>)
 80020e6:	f7fe feb9 	bl	8000e5c <error_handler>
      }
      else
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
    //}
}
 80020ea:	e006      	b.n	80020fa <_rawGyro+0x292>
        error_handler("VRRd", VREG_SHC, ucRetStat); // error display
 80020ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020f0:	461a      	mov	r2, r3
 80020f2:	2100      	movs	r1, #0
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <_rawGyro+0x2a4>)
 80020f6:	f7fe feb1 	bl	8000e5c <error_handler>
}
 80020fa:	bf00      	nop
 80020fc:	3778      	adds	r7, #120	; 0x78
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	3ff00000 	.word	0x3ff00000
 8002108:	0800c338 	.word	0x0800c338
 800210c:	0800c340 	.word	0x0800c340
 8002110:	200000a0 	.word	0x200000a0

08002114 <hid_i2c_descriptor_handler>:
* @note        Retrieve either the descriptor or report tables from the SSC7150 device Note: call GET_HID_DESC 1st
* @param ucCmd_req command to execute (GET_HID_DESC/GET_RPT_DESC)
* @return completion_status 0=SUCCESS, 0x10=ID_FAIL, 0x11=HID_DESC_FAIL, 0x12=RPT_DESC_FAIL, 0x14=REP_PARS_FAIL
*/
UINT16 hid_i2c_descriptor_handler(UINT8 ucCmd_req)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b090      	sub	sp, #64	; 0x40
 8002118:	af02      	add	r7, sp, #8
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
    UINT8 ucRet = FALSE;
 800211e:	2300      	movs	r3, #0
 8002120:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    UINT8 ucTx_data[BUF_40];                                        // buffer for general writes to i2c slave

    
    switch(ucCmd_req)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d003      	beq.n	8002132 <hid_i2c_descriptor_handler+0x1e>
 800212a:	2b02      	cmp	r3, #2
 800212c:	f000 8095 	beq.w	800225a <hid_i2c_descriptor_handler+0x146>
 8002130:	e0ba      	b.n	80022a8 <hid_i2c_descriptor_handler+0x194>
    {  
        case GET_HID_DESC:                                          //read the HID Config Descriptor from SSC7150
            ucTx_data[0] = HID_DESC_CMD_LSB;                        // HID descriptor table request is 0x00 01
 8002132:	2301      	movs	r3, #1
 8002134:	733b      	strb	r3, [r7, #12]
            ucTx_data[1] = HID_DESC_CMD_MSB;
 8002136:	2300      	movs	r3, #0
 8002138:	737b      	strb	r3, [r7, #13]

            ucRet = i2c_cmd_WrRd ( WR_RD,                           //read the HID Config Descriptor from SSC7150
 800213a:	f107 020c 	add.w	r2, r7, #12
 800213e:	2300      	movs	r3, #0
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	4b5c      	ldr	r3, [pc, #368]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	231e      	movs	r3, #30
 8002148:	2102      	movs	r1, #2
 800214a:	2003      	movs	r0, #3
 800214c:	f7fe feae 	bl	8000eac <i2c_cmd_WrRd>
 8002150:	4603      	mov	r3, r0
 8002152:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                DESC_CMD_LEN,                       //num of cmd bytes
                                ucTx_data,                          //cmd buf 
                                HID_CNFG_LEN,                       //num of bytes to read
                                HID_DESC,                           //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly
            if (ucRet)
 8002156:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <hid_i2c_descriptor_handler+0x4e>
                return HID_DESC_FAIL;                               //read HID Config Descriptor failed
 800215e:	2311      	movs	r3, #17
 8002160:	e0a3      	b.n	80022aa <hid_i2c_descriptor_handler+0x196>
            
            HID_FIELD.wHIDDescLen = ( (HID_DESC[1] << BYTE_SHIFT) | HID_DESC[0] );  // As an error check, parse out descriptor table length
 8002162:	4b54      	ldr	r3, [pc, #336]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 800216a:	7812      	ldrb	r2, [r2, #0]
 800216c:	4313      	orrs	r3, r2
 800216e:	461a      	mov	r2, r3
 8002170:	4b51      	ldr	r3, [pc, #324]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 8002172:	601a      	str	r2, [r3, #0]
                
            if (HID_FIELD.wHIDDescLen != HID_CNFG_LEN)              // If descriptor table length != 30 there is a problem with the transmission
 8002174:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b1e      	cmp	r3, #30
 800217a:	d001      	beq.n	8002180 <hid_i2c_descriptor_handler+0x6c>
                return HID_DESC_FAIL;
 800217c:	2311      	movs	r3, #17
 800217e:	e094      	b.n	80022aa <hid_i2c_descriptor_handler+0x196>
                
            HID_FIELD.wRepDescLen = ( (HID_DESC[5] << BYTE_SHIFT) | HID_DESC[4] );  // Parse out report descriptor length and store in appropriate variable
 8002180:	4b4c      	ldr	r3, [pc, #304]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 8002182:	795b      	ldrb	r3, [r3, #5]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	4a4b      	ldr	r2, [pc, #300]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 8002188:	7912      	ldrb	r2, [r2, #4]
 800218a:	4313      	orrs	r3, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 8002190:	605a      	str	r2, [r3, #4]
                
            if ( !HID_FIELD.wRepDescLen || HID_FIELD.wRepDescLen == 0xFFFF || (HID_FIELD.wRepDescLen > HID_RPT_LEN) ) // Check to see if the report descriptor size is valid
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <hid_i2c_descriptor_handler+0x9e>
 800219a:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d005      	beq.n	80021b2 <hid_i2c_descriptor_handler+0x9e>
 80021a6:	4b44      	ldr	r3, [pc, #272]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f640 52ac 	movw	r2, #3500	; 0xdac
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <hid_i2c_descriptor_handler+0xa2>
                return HID_DESC_FAIL;
 80021b2:	2311      	movs	r3, #17
 80021b4:	e079      	b.n	80022aa <hid_i2c_descriptor_handler+0x196>
                
            HID_FIELD.wRepDescReg = ( (HID_DESC[6] << BYTE_SHIFT) | HID_DESC[7] ); // Parse out report descriptor register and store in appropriate variable
 80021b6:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 80021b8:	799b      	ldrb	r3, [r3, #6]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	4a3d      	ldr	r2, [pc, #244]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 80021be:	79d2      	ldrb	r2, [r2, #7]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 80021c6:	609a      	str	r2, [r3, #8]

            HID_FIELD.wCmdReg = ( (HID_DESC[17] << BYTE_SHIFT) | HID_DESC[16] ); // Parse out command register and store in appropriate variable
 80021c8:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 80021ca:	7c5b      	ldrb	r3, [r3, #17]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	4a39      	ldr	r2, [pc, #228]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 80021d0:	7c12      	ldrb	r2, [r2, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 80021d8:	611a      	str	r2, [r3, #16]

            HID_FIELD.wDatReg = ( (HID_DESC[19] << BYTE_SHIFT) | HID_DESC[18] ); // Parse out data register and store in appropriate variable
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 80021dc:	7cdb      	ldrb	r3, [r3, #19]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 80021e2:	7c92      	ldrb	r2, [r2, #18]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 80021ea:	615a      	str	r2, [r3, #20]

            if ( !( HID_FIELD.wVenID = ( (HID_DESC[21] << BYTE_SHIFT) | HID_DESC[20] )) ) // Parse out vendor ID and store in appropriate variable
 80021ec:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 80021ee:	7d5b      	ldrb	r3, [r3, #21]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	4a30      	ldr	r2, [pc, #192]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 80021f4:	7d12      	ldrb	r2, [r2, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b2f      	ldr	r3, [pc, #188]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 80021fc:	619a      	str	r2, [r3, #24]
 80021fe:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <hid_i2c_descriptor_handler+0xf6>
                return ID_FAIL;
 8002206:	2310      	movs	r3, #16
 8002208:	e04f      	b.n	80022aa <hid_i2c_descriptor_handler+0x196>

            if ( !( HID_FIELD.wProdID = ( (HID_DESC[23] << BYTE_SHIFT) | HID_DESC[22] )) ) // Parse out product ID and store in appropriate variable
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 800220c:	7ddb      	ldrb	r3, [r3, #23]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 8002212:	7d92      	ldrb	r2, [r2, #22]
 8002214:	4313      	orrs	r3, r2
 8002216:	461a      	mov	r2, r3
 8002218:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 800221a:	61da      	str	r2, [r3, #28]
 800221c:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <hid_i2c_descriptor_handler+0x114>
                return ID_FAIL;
 8002224:	2310      	movs	r3, #16
 8002226:	e040      	b.n	80022aa <hid_i2c_descriptor_handler+0x196>
                
            HID_FIELD.wVerID = ( (HID_DESC[25] << BYTE_SHIFT) | HID_DESC[24] ); // Parse out version ID and store in appropriate variable
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 800222a:	7e5b      	ldrb	r3, [r3, #25]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	4a21      	ldr	r2, [pc, #132]	; (80022b4 <hid_i2c_descriptor_handler+0x1a0>)
 8002230:	7e12      	ldrb	r2, [r2, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	461a      	mov	r2, r3
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 8002238:	621a      	str	r2, [r3, #32]
             
            _VREGS.IDs.PID = HID_FIELD.wProdID;                      // Update virtual register fields
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a1f      	ldr	r2, [pc, #124]	; (80022bc <hid_i2c_descriptor_handler+0x1a8>)
 8002240:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
            _VREGS.IDs.VID = HID_FIELD.wVenID;
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4a1c      	ldr	r2, [pc, #112]	; (80022bc <hid_i2c_descriptor_handler+0x1a8>)
 800224a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
            _VREGS.IDs.DID = HID_FIELD.wVerID;
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <hid_i2c_descriptor_handler+0x1a8>)
 8002254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

            break;
 8002258:	e026      	b.n	80022a8 <hid_i2c_descriptor_handler+0x194>

        case GET_RPT_DESC:                                          //read HID Report Descriptor table from SSC7150
            
            ucTx_data[0] = (HID_FIELD.wRepDescReg >> BYTE_SHIFT);   // Report table request is 0x02 00
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b2db      	uxtb	r3, r3
 8002262:	733b      	strb	r3, [r7, #12]
            ucTx_data[1] = HID_FIELD.wRepDescReg;
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	737b      	strb	r3, [r7, #13]

            ucRet = i2c_cmd_WrRd (WR_RD,                            //read the HID Report Descriptor from SSC7150
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <hid_i2c_descriptor_handler+0x1a4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f107 020c 	add.w	r2, r7, #12
 8002274:	2100      	movs	r1, #0
 8002276:	9101      	str	r1, [sp, #4]
 8002278:	4911      	ldr	r1, [pc, #68]	; (80022c0 <hid_i2c_descriptor_handler+0x1ac>)
 800227a:	9100      	str	r1, [sp, #0]
 800227c:	2102      	movs	r1, #2
 800227e:	2003      	movs	r0, #3
 8002280:	f7fe fe14 	bl	8000eac <i2c_cmd_WrRd>
 8002284:	4603      	mov	r3, r0
 8002286:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                DESC_CMD_LEN,                       //num of cmd bytes
                                ucTx_data,                          //cmd buf
                                HID_FIELD.wRepDescLen,              //num of bytes to read
                                RPT_DESC,                           //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly
            if (ucRet)
 800228a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <hid_i2c_descriptor_handler+0x182>
                return RPT_DESC_FAIL;                               // Attempt to acquire the report descriptor table from the HID device
 8002292:	2312      	movs	r3, #18
 8002294:	e009      	b.n	80022aa <hid_i2c_descriptor_handler+0x196>
            
            if (report_parse(RPT_DESC))                             // Parse the descriptor for sensor information
 8002296:	480a      	ldr	r0, [pc, #40]	; (80022c0 <hid_i2c_descriptor_handler+0x1ac>)
 8002298:	f000 f9ec 	bl	8002674 <report_parse>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <hid_i2c_descriptor_handler+0x192>
                return REP_PARS_FAIL;  
 80022a2:	2314      	movs	r3, #20
 80022a4:	e001      	b.n	80022aa <hid_i2c_descriptor_handler+0x196>
            
            break;
 80022a6:	bf00      	nop
    }

    return SUCCESS;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3738      	adds	r7, #56	; 0x38
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000018c 	.word	0x2000018c
 80022b8:	20000168 	.word	0x20000168
 80022bc:	20000f5c 	.word	0x20000f5c
 80022c0:	200001ac 	.word	0x200001ac

080022c4 <hid_i2c_cmd_process>:
* @param ucCmd_req command 
* @param ucReport_id sensor id 
* @return completion_status 0=SUCCESS, failcode: 0x16=GET_FEAT_FAIL, 0x17=SET_FEAT_FAIL, 0x18=RESET_FAIL, 0x19=SET_RPT_FAIL, 0x1A=POWER_ON_FAIL, 0x1B=SLEEP_CMD_FAIL, 0x1C=HID_GET_RPT_INPT_FAIL, 0x1D=HID_GET_RPT_FEAT_FAIL 
*/
UINT8 hid_i2c_cmd_process(UINT8 *ucCmdDatbuf, UINT8 ucCmd_req, UINT8 ucReport_id)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b092      	sub	sp, #72	; 0x48
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
 80022d0:	4613      	mov	r3, r2
 80022d2:	70bb      	strb	r3, [r7, #2]
    UINT8 ucRetStat;
    UINT8 ucTx_data[BUF_40];                   
    UINT8 ucSensPtr, ucTmpPtr;
    UINT8 ucCmdBufMaxSize = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    UINT16 usTimeout;                           
    UINT16 *usVREGSptr = (UINT16 *)&_VREGS;                          // Pointer to individual virtual registers; initialized to start of _VREGS struct
 80022da:	4b77      	ldr	r3, [pc, #476]	; (80024b8 <hid_i2c_cmd_process+0x1f4>)
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34

    
    switch(ucCmd_req)
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	f200 81b0 	bhi.w	8002648 <hid_i2c_cmd_process+0x384>
 80022e8:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <hid_i2c_cmd_process+0x2c>)
 80022ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ee:	bf00      	nop
 80022f0:	0800230d 	.word	0x0800230d
 80022f4:	080023db 	.word	0x080023db
 80022f8:	0800241f 	.word	0x0800241f
 80022fc:	08002463 	.word	0x08002463
 8002300:	0800247f 	.word	0x0800247f
 8002304:	08002649 	.word	0x08002649
 8002308:	08002615 	.word	0x08002615
    {
        
        case RESET_DEV_CMD:                                         //HID Reset command                      
            ucTx_data[0] = HID_FIELD.wCmdReg;                       //command field bytes from HID config table                    
 800230c:	4b6b      	ldr	r3, [pc, #428]	; (80024bc <hid_i2c_cmd_process+0x1f8>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	723b      	strb	r3, [r7, #8]
            ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);       
 8002314:	4b69      	ldr	r3, [pc, #420]	; (80024bc <hid_i2c_cmd_process+0x1f8>)
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	b2db      	uxtb	r3, r3
 800231c:	727b      	strb	r3, [r7, #9]
            ucTx_data[2] = RESET_CMD_LSB;                           //HID Reset command opcode low byte              
 800231e:	2300      	movs	r3, #0
 8002320:	72bb      	strb	r3, [r7, #10]
            ucTx_data[3] = RESET_CMD_MSB;                           //HID Reset command opcode high byte
 8002322:	2301      	movs	r3, #1
 8002324:	72fb      	strb	r3, [r7, #11]

            // send the reset command to SSC7150
            ucRetStat = i2c_cmd_WrRd (WRITE,                        //WRITE command packet to SSC7150 
 8002326:	f107 0208 	add.w	r2, r7, #8
 800232a:	2300      	movs	r3, #0
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2300      	movs	r3, #0
 8002334:	2104      	movs	r1, #4
 8002336:	2001      	movs	r0, #1
 8002338:	f7fe fdb8 	bl	8000eac <i2c_cmd_WrRd>
 800233c:	4603      	mov	r3, r0
 800233e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                                ucTx_data,                          //cmd buf 
                                0,                                  //num of bytes to read             
                                ucCmdDatbuf,                        //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly
            
            if (ucRetStat != SUCCESS)
 8002342:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <hid_i2c_cmd_process+0x8a>
                return RESET_FAIL;
 800234a:	2318      	movs	r3, #24
 800234c:	e186      	b.n	800265c <hid_i2c_cmd_process+0x398>

            TIMER_1MS_FLG = 0;                                      // Prepare timer1 for counting
 800234e:	4b5c      	ldr	r3, [pc, #368]	; (80024c0 <hid_i2c_cmd_process+0x1fc>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
            usTimeout = TIMEOUT_5SEC;                               // 5 sec (as per HID spec) timeout for reset command 
 8002354:	f241 3388 	movw	r3, #5000	; 0x1388
 8002358:	63bb      	str	r3, [r7, #56]	; 0x38
            while (usTimeout)                                       // wait up to API spec timeout to respond with EC_DATA avail interrupt   
 800235a:	e00f      	b.n	800237c <hid_i2c_cmd_process+0xb8>
            {    
                if (EC_DATA_AVAIL)                                  // EC interrupt asserted (data is available)
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <hid_i2c_cmd_process+0x200>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10e      	bne.n	8002384 <hid_i2c_cmd_process+0xc0>
                    break; 
                                        
                if (TIMER_1MS_FLG)
 8002366:	4b56      	ldr	r3, [pc, #344]	; (80024c0 <hid_i2c_cmd_process+0x1fc>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <hid_i2c_cmd_process+0xb8>
                { 
                    TIMER_1MS_FLG = 0;
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <hid_i2c_cmd_process+0x1fc>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
                    usTimeout--;                                    // 1 msec expired, reduce counter
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	3b01      	subs	r3, #1
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
            while (usTimeout)                                       // wait up to API spec timeout to respond with EC_DATA avail interrupt   
 800237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ec      	bne.n	800235c <hid_i2c_cmd_process+0x98>
 8002382:	e000      	b.n	8002386 <hid_i2c_cmd_process+0xc2>
                    break; 
 8002384:	bf00      	nop
                }
            }

            if (!usTimeout) 
 8002386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <hid_i2c_cmd_process+0xcc>
                return RESET_FAIL;                                  // timeout occured without device responding with interrupt
 800238c:	2318      	movs	r3, #24
 800238e:	e165      	b.n	800265c <hid_i2c_cmd_process+0x398>
                
            ucRetStat = i2c_cmd_WrRd (READ,                         // EC_DATA_AVAIL flag was set indicating SSC7150 has data available to be read in response to the RESET CMD
 8002390:	f107 0208 	add.w	r2, r7, #8
 8002394:	2300      	movs	r3, #0
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2302      	movs	r3, #2
 800239e:	2100      	movs	r1, #0
 80023a0:	2002      	movs	r0, #2
 80023a2:	f7fe fd83 	bl	8000eac <i2c_cmd_WrRd>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                                    ucTx_data,                      //cmd buf
                                    2,                              //num of bytes to read
                                    ucCmdDatbuf,                    //recv buf 
                                    FALSE);                         //flag indicating that we specified the number of bytes to read explicitly
                
            if (ucRetStat != SUCCESS)
 80023ac:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <hid_i2c_cmd_process+0xf4>
                return RESET_FAIL; 
 80023b4:	2318      	movs	r3, #24
 80023b6:	e151      	b.n	800265c <hid_i2c_cmd_process+0x398>
            
            if (ucCmdDatbuf[0] != 0 && ucCmdDatbuf[1] != 0)         // expect 1st two bytes of data packet from SSC7150 in response to RESET command to be "00 00"
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <hid_i2c_cmd_process+0x10a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3301      	adds	r3, #1
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <hid_i2c_cmd_process+0x10a>
                return RESET_FAIL;                                  // invalid data found
 80023ca:	2318      	movs	r3, #24
 80023cc:	e146      	b.n	800265c <hid_i2c_cmd_process+0x398>
 
            _VREGS.SHC.reset = VREG_RESET_SUCCESS;                   // Clear the reset VREG to indicate successful 
 80023ce:	4a3a      	ldr	r2, [pc, #232]	; (80024b8 <hid_i2c_cmd_process+0x1f4>)
 80023d0:	7813      	ldrb	r3, [r2, #0]
 80023d2:	f36f 03c3 	bfc	r3, #3, #1
 80023d6:	7013      	strb	r3, [r2, #0]
                   
            break;
 80023d8:	e13f      	b.n	800265a <hid_i2c_cmd_process+0x396>


        case POWER_ON:      
            ucTx_data[0] = HID_FIELD.wCmdReg;                       //command field bytes from HID config table 
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <hid_i2c_cmd_process+0x1f8>)
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	723b      	strb	r3, [r7, #8]
            ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);                              
 80023e2:	4b36      	ldr	r3, [pc, #216]	; (80024bc <hid_i2c_cmd_process+0x1f8>)
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	727b      	strb	r3, [r7, #9]
            ucTx_data[2] = POWER_CMD_LSB;                           //HID Power command opcode low  byte for POWER Device ON
 80023ec:	2300      	movs	r3, #0
 80023ee:	72bb      	strb	r3, [r7, #10]
            ucTx_data[3] = POWER_CMD_MSB;                           //HID Power command opcode high byte
 80023f0:	2308      	movs	r3, #8
 80023f2:	72fb      	strb	r3, [r7, #11]

            ucRetStat = i2c_cmd_WrRd (WRITE,                        // Issue power on command to SSC7150
 80023f4:	f107 0208 	add.w	r2, r7, #8
 80023f8:	2300      	movs	r3, #0
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2300      	movs	r3, #0
 8002402:	2104      	movs	r1, #4
 8002404:	2001      	movs	r0, #1
 8002406:	f7fe fd51 	bl	8000eac <i2c_cmd_WrRd>
 800240a:	4603      	mov	r3, r0
 800240c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                                ucTx_data,                          //cmd buf
                                0,                                  //num of bytes to read
                                ucCmdDatbuf,                        //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly

            if (ucRetStat != SUCCESS)
 8002410:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 8119 	beq.w	800264c <hid_i2c_cmd_process+0x388>
                return POWER_ON_FAIL;                               // command failed
 800241a:	231a      	movs	r3, #26
 800241c:	e11e      	b.n	800265c <hid_i2c_cmd_process+0x398>
            break;


        case SLEEP:         

            ucTx_data[0] = HID_FIELD.wCmdReg;                       //command field bytes from HID config table
 800241e:	4b27      	ldr	r3, [pc, #156]	; (80024bc <hid_i2c_cmd_process+0x1f8>)
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	723b      	strb	r3, [r7, #8]
            ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);            
 8002426:	4b25      	ldr	r3, [pc, #148]	; (80024bc <hid_i2c_cmd_process+0x1f8>)
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	b2db      	uxtb	r3, r3
 800242e:	727b      	strb	r3, [r7, #9]
            ucTx_data[2] = SLEEP_ON_LSB;                            //HID Power command opcode low byte for Device SLEEP
 8002430:	2301      	movs	r3, #1
 8002432:	72bb      	strb	r3, [r7, #10]
            ucTx_data[3] = POWER_CMD_MSB;                           //HID Power command opcode high byte
 8002434:	2308      	movs	r3, #8
 8002436:	72fb      	strb	r3, [r7, #11]

            ucRetStat = i2c_cmd_WrRd (WRITE,                        // Issue sleep command to SSC7150
 8002438:	f107 0208 	add.w	r2, r7, #8
 800243c:	2300      	movs	r3, #0
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2300      	movs	r3, #0
 8002446:	2104      	movs	r1, #4
 8002448:	2001      	movs	r0, #1
 800244a:	f7fe fd2f 	bl	8000eac <i2c_cmd_WrRd>
 800244e:	4603      	mov	r3, r0
 8002450:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                                ucTx_data,                          //cmd buf 
                                0,                                  //num of bytes to read
                                ucCmdDatbuf,                        //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly

            if (ucRetStat != SUCCESS)
 8002454:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80f9 	beq.w	8002650 <hid_i2c_cmd_process+0x38c>
                return SLEEP_CMD_FAIL;                              // command failed         
 800245e:	231b      	movs	r3, #27
 8002460:	e0fc      	b.n	800265c <hid_i2c_cmd_process+0x398>
            
            break;

        case HID_GET_RPT_INPT:
                        
            ucCmdDatbuf[0] = ucReport_id;                           //the HOST_SF_LIB_HID_Get_Report expects the sensor id in byte[0] of passed buffer
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	78ba      	ldrb	r2, [r7, #2]
 8002466:	701a      	strb	r2, [r3, #0]
                        
            if ( HOST_SF_LIB_HID_Get_Report(GET_RRT_INPT, ucCmdDatbuf, 0) )
 8002468:	2200      	movs	r2, #0
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	2010      	movs	r0, #16
 800246e:	f000 fca5 	bl	8002dbc <HOST_SF_LIB_HID_Get_Report>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80ed 	beq.w	8002654 <hid_i2c_cmd_process+0x390>
                return HID_GET_RPT_FEAT_FAIL;                       // command failed
 800247a:	231d      	movs	r3, #29
 800247c:	e0ee      	b.n	800265c <hid_i2c_cmd_process+0x398>
            break;


        case HID_GET_RPT_FEAT:

            ucCmdDatbuf[0] = ucReport_id;                           //the HOST_SF_LIB_HID_Get_Report expects the sensor id in byte[0] of passed buffer
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	78ba      	ldrb	r2, [r7, #2]
 8002482:	701a      	strb	r2, [r3, #0]
                        
            if ( HOST_SF_LIB_HID_Get_Report(GET_RPT_FEAT, ucCmdDatbuf, 0) )
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	2030      	movs	r0, #48	; 0x30
 800248a:	f000 fc97 	bl	8002dbc <HOST_SF_LIB_HID_Get_Report>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <hid_i2c_cmd_process+0x1d4>
                return HID_GET_RPT_FEAT_FAIL;                       // command failed
 8002494:	231d      	movs	r3, #29
 8002496:	e0e1      	b.n	800265c <hid_i2c_cmd_process+0x398>

            if ((ucCmdDatbuf[2] == 0) || (ucCmdDatbuf[2] > NUM_SENS) ) // check for valid ID range in feature report
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3302      	adds	r3, #2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <hid_i2c_cmd_process+0x1e8>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3302      	adds	r3, #2
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d901      	bls.n	80024b0 <hid_i2c_cmd_process+0x1ec>
                return HID_GET_RPT_FEAT_FAIL;                       // invalid reportID
 80024ac:	231d      	movs	r3, #29
 80024ae:	e0d5      	b.n	800265c <hid_i2c_cmd_process+0x398>
                       
            //now parse the parameters in returned report feature based on offsets derived earlier from parsing the HID Report Descriptor
            for (ucSensPtr = 0; ucSensPtr < NUM_SENS; ucSensPtr++)  // traverse through the sensor list looking for matching sesnor id
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80024b6:	e0a5      	b.n	8002604 <hid_i2c_cmd_process+0x340>
 80024b8:	20000f5c 	.word	0x20000f5c
 80024bc:	20000168 	.word	0x20000168
 80024c0:	20000094 	.word	0x20000094
 80024c4:	20000095 	.word	0x20000095
            {          
                if (SENSOR[ucSensPtr].id == ucReport_id)
 80024c8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80024cc:	4965      	ldr	r1, [pc, #404]	; (8002664 <hid_i2c_cmd_process+0x3a0>)
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	440b      	add	r3, r1
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	78ba      	ldrb	r2, [r7, #2]
 80024da:	429a      	cmp	r2, r3
 80024dc:	f040 808d 	bne.w	80025fa <hid_i2c_cmd_process+0x336>
                {        
                    usVREGSptr = &_VREGS.sensitivity.ACSEN + ucSensPtr; // Set pointer to appropriate sensitivity register (as offset from accelerometer sensitivity VREG02)
 80024e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4a60      	ldr	r2, [pc, #384]	; (8002668 <hid_i2c_cmd_process+0x3a4>)
 80024e8:	4413      	add	r3, r2
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
                    
                    //retrieve offset pointer to sensitivty parameters for this sensor device (from the Report Descriptor table). Add offset to initial pointer for the actual desired "ACSEN" data within the feature report packet and store this value in VREG register 
                    *usVREGSptr = ( (ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset + GF_SENS_OFFSET_MSB] << BYTE_SHIFT) | ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset + GF_SENS_OFFSET_LSB]); // Use info about offsets to set _VREGS to appropriate data
 80024ec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80024f0:	495c      	ldr	r1, [pc, #368]	; (8002664 <hid_i2c_cmd_process+0x3a0>)
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	3303      	adds	r3, #3
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	3307      	adds	r3, #7
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	0219      	lsls	r1, r3, #8
 8002508:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800250c:	4855      	ldr	r0, [pc, #340]	; (8002664 <hid_i2c_cmd_process+0x3a0>)
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	4403      	add	r3, r0
 8002516:	3303      	adds	r3, #3
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	3306      	adds	r3, #6
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	430b      	orrs	r3, r1
 8002524:	461a      	mov	r2, r3
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	601a      	str	r2, [r3, #0]
                    
                    usVREGSptr = &_VREGS.data_rt.ACDXR + ucSensPtr;  // Set pointer to appropriate data rate register
 800252a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4a4e      	ldr	r2, [pc, #312]	; (800266c <hid_i2c_cmd_process+0x3a8>)
 8002532:	4413      	add	r3, r2
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
                    
                    *usVREGSptr = ((ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset + GF_DATR_OFFSET_MSB] << BYTE_SHIFT) | ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset + GF_DATR_OFFSET_LSB]); //point to appropriate data fields within the feature report and store in VREG reg
 8002536:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800253a:	494a      	ldr	r1, [pc, #296]	; (8002664 <hid_i2c_cmd_process+0x3a0>)
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	440b      	add	r3, r1
 8002544:	3302      	adds	r3, #2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	3304      	adds	r3, #4
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	0219      	lsls	r1, r3, #8
 8002552:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002556:	4843      	ldr	r0, [pc, #268]	; (8002664 <hid_i2c_cmd_process+0x3a0>)
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	4403      	add	r3, r0
 8002560:	3302      	adds	r3, #2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	3303      	adds	r3, #3
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	430b      	orrs	r3, r1
 800256e:	461a      	mov	r2, r3
 8002570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002572:	601a      	str	r2, [r3, #0]

                    usVREGSptr = (UINT16 *)&(_VREGS.expo.exp1);      //point to appropriate data fields within the feature report and store in VREG reg  NOTE: each exponent VREG holds 4 devices' 4bit exponent value fields
 8002574:	4b3e      	ldr	r3, [pc, #248]	; (8002670 <hid_i2c_cmd_process+0x3ac>)
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
                    if (ucSensPtr > 3)                              // sensor indexes from 4 to 7 = sensors that have unit exponents in the 2nd exponent register (VREG37)
 8002578:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800257c:	2b03      	cmp	r3, #3
 800257e:	d902      	bls.n	8002586 <hid_i2c_cmd_process+0x2c2>
                        usVREGSptr++;                               // Increment ptr to VREG exponent register to be searched
 8002580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002582:	3304      	adds	r3, #4
 8002584:	637b      	str	r3, [r7, #52]	; 0x34

                    if (ucSensPtr > 7)                              // sensor indexes > 7 = sensors that have unit exponents in the 3rd exponent register (VREG38)
 8002586:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800258a:	2b07      	cmp	r3, #7
 800258c:	d902      	bls.n	8002594 <hid_i2c_cmd_process+0x2d0>
                        usVREGSptr++;                               // Increment ptr to VREG exponent register to be searched
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	3304      	adds	r3, #4
 8002592:	637b      	str	r3, [r7, #52]	; 0x34

                    ucTmpPtr= ucSensPtr % 4;                        // Find the appropriate offset for this sensor's unit exponent
 8002594:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

                    *usVREGSptr &= ~(0xF << (4*ucTmpPtr));          // Clear unit exponent data   
 80025a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80025a8:	0092      	lsls	r2, r2, #2
 80025aa:	210f      	movs	r1, #15
 80025ac:	fa01 f202 	lsl.w	r2, r1, r2
 80025b0:	43d2      	mvns	r2, r2
 80025b2:	401a      	ands	r2, r3
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	601a      	str	r2, [r3, #0]

                    if (SENSOR[ucSensPtr].DatExp)
 80025b8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80025bc:	4929      	ldr	r1, [pc, #164]	; (8002664 <hid_i2c_cmd_process+0x3a0>)
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	440b      	add	r3, r1
 80025c6:	3306      	adds	r3, #6
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d020      	beq.n	8002610 <hid_i2c_cmd_process+0x34c>
                    {
                       *usVREGSptr |= (SENSOR[ucSensPtr].DatExp << (4*ucTmpPtr));  // Set the unit exponent data to the appropriate VREG  
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d0:	6819      	ldr	r1, [r3, #0]
 80025d2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80025d6:	4823      	ldr	r0, [pc, #140]	; (8002664 <hid_i2c_cmd_process+0x3a0>)
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	4403      	add	r3, r0
 80025e0:	3306      	adds	r3, #6
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	ea41 0203 	orr.w	r2, r1, r3
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	601a      	str	r2, [r3, #0]
                    }

                    break;              
 80025f8:	e00a      	b.n	8002610 <hid_i2c_cmd_process+0x34c>
            for (ucSensPtr = 0; ucSensPtr < NUM_SENS; ucSensPtr++)  // traverse through the sensor list looking for matching sesnor id
 80025fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025fe:	3301      	adds	r3, #1
 8002600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002604:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002608:	2b0b      	cmp	r3, #11
 800260a:	f67f af5d 	bls.w	80024c8 <hid_i2c_cmd_process+0x204>
                }   
            }                        

            break;
 800260e:	e024      	b.n	800265a <hid_i2c_cmd_process+0x396>
                    break;              
 8002610:	bf00      	nop
            break;
 8002612:	e022      	b.n	800265a <hid_i2c_cmd_process+0x396>
     
        case HID_SET_RPT_FEAT:
            //for non-Vendor commands, the sensor id is NOT passed in byte[0] to 'HOST_SF_LIB_HID_Set_Report'
            ucCmdBufMaxSize = ucCmdDatbuf[RPT_SIZE_LSB];            //get size of GetReportFeature Packet
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            
            if ((ucCmdBufMaxSize == 0) || (ucCmdBufMaxSize == 0xFF)) //is the size reasonable?
 800261c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <hid_i2c_cmd_process+0x368>
 8002624:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002628:	2bff      	cmp	r3, #255	; 0xff
 800262a:	d101      	bne.n	8002630 <hid_i2c_cmd_process+0x36c>
                return SET_FEAT_FAIL;
 800262c:	2317      	movs	r3, #23
 800262e:	e015      	b.n	800265c <hid_i2c_cmd_process+0x398>
                                        
            if ( HOST_SF_LIB_HID_Set_Report(SET_RPT_FEAT, ucCmdDatbuf, ucCmdBufMaxSize) )
 8002630:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002634:	461a      	mov	r2, r3
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	2030      	movs	r0, #48	; 0x30
 800263a:	f000 fb3f 	bl	8002cbc <HOST_SF_LIB_HID_Set_Report>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <hid_i2c_cmd_process+0x394>
                return SET_FEAT_FAIL;                               // command failed
 8002644:	2317      	movs	r3, #23
 8002646:	e009      	b.n	800265c <hid_i2c_cmd_process+0x398>

            break;

        default:
            break;
 8002648:	bf00      	nop
 800264a:	e006      	b.n	800265a <hid_i2c_cmd_process+0x396>
            break;
 800264c:	bf00      	nop
 800264e:	e004      	b.n	800265a <hid_i2c_cmd_process+0x396>
            break;
 8002650:	bf00      	nop
 8002652:	e002      	b.n	800265a <hid_i2c_cmd_process+0x396>
            break;
 8002654:	bf00      	nop
 8002656:	e000      	b.n	800265a <hid_i2c_cmd_process+0x396>
            break;
 8002658:	bf00      	nop
    }

    return SUCCESS;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3740      	adds	r7, #64	; 0x40
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	200000c0 	.word	0x200000c0
 8002668:	20000f64 	.word	0x20000f64
 800266c:	20000f8c 	.word	0x20000f8c
 8002670:	20001040 	.word	0x20001040

08002674 <report_parse>:
* @note        Parse data retrieved from SSC7150 HID Report Descriptor, calls and populate required local structs
* @param *ucBuf Buffer holding the report descriptor table
* @return completion_status 0=SUCCESS, failcodes: 0x14=REP_PARS_FAIL, 0x15=NO_EOC_FAIL 
*/
UINT8 report_parse(UINT8 *ucBuf)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
    UINT8 *ucBptr = ucBuf;                                          // HID Descriptor byte pointer
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	617b      	str	r3, [r7, #20]
    UINT8 *ucStrt = ucBptr;                                         // Pointer to hold start address for later reference
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	60fb      	str	r3, [r7, #12]
    UINT8 ucSensptr = 0;                                            // sensor number variable for struct array traverse
 8002684:	2300      	movs	r3, #0
 8002686:	74fb      	strb	r3, [r7, #19]
    UINT8 ucUsageOffset;                                            // offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data
    BOOL bFlag = FALSE;                                             // Flag variable to notify that desired fields have been reached
 8002688:	2300      	movs	r3, #0
 800268a:	747b      	strb	r3, [r7, #17]

   

    memset(TEMP_SF, 0xFF, sizeof(TEMP_SF));                         // Set all of the structs in the TEMP array to 0xFF so we can know if a sensor wasn't found in the report
 800268c:	2254      	movs	r2, #84	; 0x54
 800268e:	21ff      	movs	r1, #255	; 0xff
 8002690:	489a      	ldr	r0, [pc, #616]	; (80028fc <report_parse+0x288>)
 8002692:	f008 fa3d 	bl	800ab10 <memset>
    
    while( (ucBptr - ucStrt) <= HID_FIELD.wRepDescLen )             // Continue looping until end of report
 8002696:	e196      	b.n	80029c6 <report_parse+0x352>
    {
        if ( *ucBptr == HID_COLLECTION )                            // Look for HID_COLLECTION(Physical) which should be start of REPORT ID (sensor device) info in report descriptor table  
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2ba1      	cmp	r3, #161	; 0xa1
 800269e:	d12e      	bne.n	80026fe <report_parse+0x8a>
        {
            ucBptr++;                                               // Increment the pointer to look at the next byte
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
            
            if ( *(ucBptr++) == HID_PHYSICAL && *(ucBptr++) == HID_REPORT_ID ) // Check if the next two bytes meet the next required identifier needs   
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	617a      	str	r2, [r7, #20]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d125      	bne.n	80026fe <report_parse+0x8a>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	617a      	str	r2, [r7, #20]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b85      	cmp	r3, #133	; 0x85
 80026bc:	d11f      	bne.n	80026fe <report_parse+0x8a>
            {
                ucUsageOffset = 0;                                  // clear offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data                                    
 80026be:	2300      	movs	r3, #0
 80026c0:	74bb      	strb	r3, [r7, #18]
                TEMP_SF[ucSensptr].id = *ucBptr;                    // Store first sensor device ID number in out temp struct
 80026c2:	7cfa      	ldrb	r2, [r7, #19]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	7818      	ldrb	r0, [r3, #0]
 80026c8:	498c      	ldr	r1, [pc, #560]	; (80028fc <report_parse+0x288>)
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	4602      	mov	r2, r0
 80026d4:	701a      	strb	r2, [r3, #0]
                
                while(*(ucBptr++) != HID_USAGE_SENSOR_TYPE);        // Parse until sensor type indicator found  (in HID table: HID_USAGE_SENSOR_TYPE_MOTION_ACCELEROMETER_3D)
 80026d6:	bf00      	nop
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	617a      	str	r2, [r7, #20]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b09      	cmp	r3, #9
 80026e2:	d1f9      	bne.n	80026d8 <report_parse+0x64>
                
                TEMP_SF[ucSensptr].type = *ucBptr;                  // Store sensor type in struct      
 80026e4:	7cfa      	ldrb	r2, [r7, #19]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	7818      	ldrb	r0, [r3, #0]
 80026ea:	4984      	ldr	r1, [pc, #528]	; (80028fc <report_parse+0x288>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	3301      	adds	r3, #1
 80026f6:	4602      	mov	r2, r0
 80026f8:	701a      	strb	r2, [r3, #0]
                bFlag = TRUE;                                       // Set the flag to show we are in a field of data that we desire
 80026fa:	2301      	movs	r3, #1
 80026fc:	747b      	strb	r3, [r7, #17]
            }
        }
        
        if ( *ucBptr == HID_END_COLLECTION )                        // Look for end of this sensor's collection 
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2bc0      	cmp	r3, #192	; 0xc0
 8002704:	d12f      	bne.n	8002766 <report_parse+0xf2>
        {
            ucBptr++;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
            
            if( *ucBptr == HID_END_COLLECTION ) 
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2bc0      	cmp	r3, #192	; 0xc0
 8002712:	f000 8162 	beq.w	80029da <report_parse+0x366>
                break;                                              // end of the report has occurred
            
            else if(*(ucBptr++) == HID_REPORT_ID)                   // Next report ID has been found
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	617a      	str	r2, [r7, #20]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b85      	cmp	r3, #133	; 0x85
 8002720:	d121      	bne.n	8002766 <report_parse+0xf2>
            {   
                ucUsageOffset = 0;                                  // clear offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data
 8002722:	2300      	movs	r3, #0
 8002724:	74bb      	strb	r3, [r7, #18]
                TEMP_SF[ucSensptr].id = *ucBptr;                    // Store location of sensor ID within the HID Report in struct
 8002726:	7cfa      	ldrb	r2, [r7, #19]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	7818      	ldrb	r0, [r3, #0]
 800272c:	4973      	ldr	r1, [pc, #460]	; (80028fc <report_parse+0x288>)
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	440b      	add	r3, r1
 8002736:	4602      	mov	r2, r0
 8002738:	701a      	strb	r2, [r3, #0]
                
                while(*(ucBptr++) != HID_USAGE_SENSOR_TYPE);        // Look for sensor type identifier (ie HID_USAGE_SENSOR_TYPE_MOTION_ACCELEROMETER_3D)
 800273a:	bf00      	nop
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	617a      	str	r2, [r7, #20]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b09      	cmp	r3, #9
 8002746:	d1f9      	bne.n	800273c <report_parse+0xc8>
                
                TEMP_SF[ucSensptr].type = *(ucBptr++);              // Store location of sensor type within the HID Report in struct   
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	617a      	str	r2, [r7, #20]
 800274e:	7cfa      	ldrb	r2, [r7, #19]
 8002750:	7818      	ldrb	r0, [r3, #0]
 8002752:	496a      	ldr	r1, [pc, #424]	; (80028fc <report_parse+0x288>)
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	440b      	add	r3, r1
 800275c:	3301      	adds	r3, #1
 800275e:	4602      	mov	r2, r0
 8002760:	701a      	strb	r2, [r3, #0]
                bFlag = TRUE;                                       // Set the flag to show we are in a field of data that we desire
 8002762:	2301      	movs	r3, #1
 8002764:	747b      	strb	r3, [r7, #17]
            }
        }

        if (bFlag)                                                  // Check if we should proceed parsing within the HID_USAGE_SENSOR_Properties or simply continue incrementing until a new ID is found
 8002766:	7c7b      	ldrb	r3, [r7, #17]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8129 	beq.w	80029c0 <report_parse+0x34c>
        {
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant features HID_USAGE_SENSOR_Properties
 800276e:	e0b8      	b.n	80028e2 <report_parse+0x26e>
            {
                if (*ucBptr == HID_USAGE_SENSOR_PROPERTY)             
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b0a      	cmp	r3, #10
 8002776:	f040 80b1 	bne.w	80028dc <report_parse+0x268>
                {
                    ucBptr++;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3301      	adds	r3, #1
 800277e:	617b      	str	r3, [r7, #20]
                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_CONN_TYPE) // Seach for sensor connection type and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b09      	cmp	r3, #9
 8002786:	d10b      	bne.n	80027a0 <report_parse+0x12c>
                    {
                        ucBptr++;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3301      	adds	r3, #1
 800278c:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE (0x0A,0x09,0x03) 
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	617a      	str	r2, [r7, #20]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d102      	bne.n	80027a0 <report_parse+0x12c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 800279a:	7cbb      	ldrb	r3, [r7, #18]
 800279c:	3301      	adds	r3, #1
 800279e:	74bb      	strb	r3, [r7, #18]
                    }
                    
                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_RPT_STATE)  // Search for reporting state and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b16      	cmp	r3, #22
 80027a6:	d10b      	bne.n	80027c0 <report_parse+0x14c>
                    {
                        ucBptr++;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3301      	adds	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL (0x0A,0x0E,0x03) 
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	617a      	str	r2, [r7, #20]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d102      	bne.n	80027c0 <report_parse+0x14c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80027ba:	7cbb      	ldrb	r3, [r7, #18]
 80027bc:	3301      	adds	r3, #1
 80027be:	74bb      	strb	r3, [r7, #18]
                    }

                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_PWR_STATE)  // Search for power state and increment offset variable because this field is undesired  (in HID table : HID_USAGE_SENSOR_PROPERTY_POWER_STATE)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b19      	cmp	r3, #25
 80027c6:	d10b      	bne.n	80027e0 <report_parse+0x16c>
                    {
                        ucBptr++;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3301      	adds	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_POWER_STATE (0x0A,0x19,0x03) 
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	617a      	str	r2, [r7, #20]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d102      	bne.n	80027e0 <report_parse+0x16c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80027da:	7cbb      	ldrb	r3, [r7, #18]
 80027dc:	3301      	adds	r3, #1
 80027de:	74bb      	strb	r3, [r7, #18]
                     }

                    if (*ucBptr == HID_USAGE_SENSOR_STATE_1)        // Search for sensor state and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_STATE)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10b      	bne.n	8002800 <report_parse+0x18c>
                    {
                        ucBptr++;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3301      	adds	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x02)                    // last parameter of HID_USAGE_SENSOR_STATE (0x0A,0x01,0x02) 
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	617a      	str	r2, [r7, #20]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d102      	bne.n	8002800 <report_parse+0x18c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80027fa:	7cbb      	ldrb	r3, [r7, #18]
 80027fc:	3301      	adds	r3, #1
 80027fe:	74bb      	strb	r3, [r7, #18]
                     }

                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_RPT_INT)  // Search for reporting interval. We desire this value so store it in our struct and then increment the offset  (in HID table:HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b0e      	cmp	r3, #14
 8002806:	d113      	bne.n	8002830 <report_parse+0x1bc>
                    {
                        ucBptr++;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3301      	adds	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL (0x0A,0x0E,0x03)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	617a      	str	r2, [r7, #20]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d10a      	bne.n	8002830 <report_parse+0x1bc>
                            TEMP_SF[ucSensptr].DatRtOffset = ucUsageOffset++; //save & increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 800281a:	7cba      	ldrb	r2, [r7, #18]
 800281c:	1c53      	adds	r3, r2, #1
 800281e:	74bb      	strb	r3, [r7, #18]
 8002820:	7cf9      	ldrb	r1, [r7, #19]
 8002822:	4836      	ldr	r0, [pc, #216]	; (80028fc <report_parse+0x288>)
 8002824:	460b      	mov	r3, r1
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	1a5b      	subs	r3, r3, r1
 800282a:	4403      	add	r3, r0
 800282c:	3302      	adds	r3, #2
 800282e:	701a      	strb	r2, [r3, #0]
                    }

                    ucBptr++;                                       //increment position ptr
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3301      	adds	r3, #1
 8002834:	617b      	str	r3, [r7, #20]

                    // NOTE: There is a different identifier for RAW data and that is why two identifiers are checked for here
                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_ACCU) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_ACCU) )  // Search for sensor accuracy & increment offset variable because this field is undesired (in HID table:HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_ACCURACY))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b44      	cmp	r3, #68	; 0x44
 800283c:	d003      	beq.n	8002846 <report_parse+0x1d2>
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b45      	cmp	r3, #69	; 0x45
 8002844:	d102      	bne.n	800284c <report_parse+0x1d8>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8002846:	7cbb      	ldrb	r3, [r7, #18]
 8002848:	3301      	adds	r3, #1
 800284a:	74bb      	strb	r3, [r7, #18]

                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_RES) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_RES) )    // Search for sensor resolution and increment offset variable because this field is undesired (in HID table: HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_RESOLUTION))
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b54      	cmp	r3, #84	; 0x54
 8002852:	d003      	beq.n	800285c <report_parse+0x1e8>
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b55      	cmp	r3, #85	; 0x55
 800285a:	d102      	bne.n	8002862 <report_parse+0x1ee>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 800285c:	7cbb      	ldrb	r3, [r7, #18]
 800285e:	3301      	adds	r3, #1
 8002860:	74bb      	strb	r3, [r7, #18]

                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_MOD_SENS) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_SENS) )  // Search for sensor sensitivity (HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_CHANGE_SENSITIVITY_ABS))
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b14      	cmp	r3, #20
 8002868:	d003      	beq.n	8002872 <report_parse+0x1fe>
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b15      	cmp	r3, #21
 8002870:	d11d      	bne.n	80028ae <report_parse+0x23a>
                    {
                        TEMP_SF[ucSensptr].SensOffset = ucUsageOffset++; //save & increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)                         
 8002872:	7cba      	ldrb	r2, [r7, #18]
 8002874:	1c53      	adds	r3, r2, #1
 8002876:	74bb      	strb	r3, [r7, #18]
 8002878:	7cf9      	ldrb	r1, [r7, #19]
 800287a:	4820      	ldr	r0, [pc, #128]	; (80028fc <report_parse+0x288>)
 800287c:	460b      	mov	r3, r1
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	1a5b      	subs	r3, r3, r1
 8002882:	4403      	add	r3, r0
 8002884:	3303      	adds	r3, #3
 8002886:	701a      	strb	r2, [r3, #0]
                        
                        while(*(ucBptr++) != HID_UNIT_EXP);         // Increment until exponent value of the data is found
 8002888:	bf00      	nop
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	617a      	str	r2, [r7, #20]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b55      	cmp	r3, #85	; 0x55
 8002894:	d1f9      	bne.n	800288a <report_parse+0x216>
                        
                        TEMP_SF[ucSensptr].SensExp = *ucBptr;       // Store this value in the temp struct
 8002896:	7cfa      	ldrb	r2, [r7, #19]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	7818      	ldrb	r0, [r3, #0]
 800289c:	4917      	ldr	r1, [pc, #92]	; (80028fc <report_parse+0x288>)
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	440b      	add	r3, r1
 80028a6:	3304      	adds	r3, #4
 80028a8:	4602      	mov	r2, r0
 80028aa:	701a      	strb	r2, [r3, #0]
                            break;
 80028ac:	e022      	b.n	80028f4 <report_parse+0x280>
                    }

                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_MOD_MAX) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_MAX) )   // Search for sensor MAX val and increment offset variable because this field is undesired HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_MAX)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b24      	cmp	r3, #36	; 0x24
 80028b4:	d003      	beq.n	80028be <report_parse+0x24a>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b25      	cmp	r3, #37	; 0x25
 80028bc:	d102      	bne.n	80028c4 <report_parse+0x250>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80028be:	7cbb      	ldrb	r3, [r7, #18]
 80028c0:	3301      	adds	r3, #1
 80028c2:	74bb      	strb	r3, [r7, #18]
                    
                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_MOD_MIN)  || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_MIN) )  // Search for sensor MIN val and increment offset variable because this field is undesired HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_MIN)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b34      	cmp	r3, #52	; 0x34
 80028ca:	d003      	beq.n	80028d4 <report_parse+0x260>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b35      	cmp	r3, #53	; 0x35
 80028d2:	d106      	bne.n	80028e2 <report_parse+0x26e>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80028d4:	7cbb      	ldrb	r3, [r7, #18]
 80028d6:	3301      	adds	r3, #1
 80028d8:	74bb      	strb	r3, [r7, #18]
 80028da:	e002      	b.n	80028e2 <report_parse+0x26e>
                }
                
                else ucBptr++;                                      // If a new identifier has not yet been reached, continue traversing report descriptor 
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3301      	adds	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant features HID_USAGE_SENSOR_Properties
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <report_parse+0x28c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	f67f af3e 	bls.w	8002770 <report_parse+0xfc>
            }
            
            ucUsageOffset = 0;                                      //reset HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80028f4:	2300      	movs	r3, #0
 80028f6:	74bb      	strb	r3, [r7, #18]
            
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant input features
 80028f8:	e054      	b.n	80029a4 <report_parse+0x330>
 80028fa:	bf00      	nop
 80028fc:	20000114 	.word	0x20000114
 8002900:	20000168 	.word	0x20000168
            {
                if(*ucBptr == HID_USAGE_SENSOR_)                         
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b0a      	cmp	r3, #10
 800290a:	d148      	bne.n	800299e <report_parse+0x32a>
                {
                    ucBptr++;                                       // Continue to next byte
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3301      	adds	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
                    
                    if (*ucBptr == HID_USAGE_SENSOR_STATE_1)                  
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d10b      	bne.n	8002932 <report_parse+0x2be>
                    {
                        ucBptr++;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
                        if(*(ucBptr++) == HID_USAGE_SENSOR_STATE_2) // Search for HID usage sensor state and increment offset variable because this field is undesired
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	617a      	str	r2, [r7, #20]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d102      	bne.n	8002932 <report_parse+0x2be>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 800292c:	7cbb      	ldrb	r3, [r7, #18]
 800292e:	3301      	adds	r3, #1
 8002930:	74bb      	strb	r3, [r7, #18]
                    }

                    if (*ucBptr == HID_USAGE_SENSOR_EVENT_1)               
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d134      	bne.n	80029a4 <report_parse+0x330>
                    {
                        ucBptr++;                                   // Continue to next byte
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == HID_USAGE_SENSOR_EVENT_2)   // Search for HID usage sensor event and increment the offset variable
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	617a      	str	r2, [r7, #20]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d12b      	bne.n	80029a4 <report_parse+0x330>
                        {    
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 800294c:	7cbb      	ldrb	r3, [r7, #18]
 800294e:	3301      	adds	r3, #1
 8002950:	74bb      	strb	r3, [r7, #18]
                            while(*(ucBptr++) != HID_END_COLLECTION); // end of the sensor event field signifies the start of desired input data
 8002952:	bf00      	nop
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	617a      	str	r2, [r7, #20]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2bc0      	cmp	r3, #192	; 0xc0
 800295e:	d1f9      	bne.n	8002954 <report_parse+0x2e0>
                            
                            TEMP_SF[ucSensptr].DatOffset = ucUsageOffset + 3; //save HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data) NOTE: offset an additional 3 for extra data received on GPIO interrupt
 8002960:	7cfa      	ldrb	r2, [r7, #19]
 8002962:	7cbb      	ldrb	r3, [r7, #18]
 8002964:	3303      	adds	r3, #3
 8002966:	b2d8      	uxtb	r0, r3
 8002968:	4999      	ldr	r1, [pc, #612]	; (8002bd0 <report_parse+0x55c>)
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	440b      	add	r3, r1
 8002972:	3305      	adds	r3, #5
 8002974:	4602      	mov	r2, r0
 8002976:	701a      	strb	r2, [r3, #0]
                            
                            while(*(ucBptr++) != HID_UNIT_EXP);     // Search for, and store, the unit exponent value for the input data
 8002978:	bf00      	nop
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	617a      	str	r2, [r7, #20]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b55      	cmp	r3, #85	; 0x55
 8002984:	d1f9      	bne.n	800297a <report_parse+0x306>
                            
                            TEMP_SF[ucSensptr].DatExp = *ucBptr;
 8002986:	7cfa      	ldrb	r2, [r7, #19]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	7818      	ldrb	r0, [r3, #0]
 800298c:	4990      	ldr	r1, [pc, #576]	; (8002bd0 <report_parse+0x55c>)
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	440b      	add	r3, r1
 8002996:	3306      	adds	r3, #6
 8002998:	4602      	mov	r2, r0
 800299a:	701a      	strb	r2, [r3, #0]
                            
                            break;
 800299c:	e00a      	b.n	80029b4 <report_parse+0x340>
                        }
                    }
                }
                else ucBptr++;                                      // If desired identifiers haven't been reached, continue traversing HID Report Descriptor
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant input features
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	4b89      	ldr	r3, [pc, #548]	; (8002bd4 <report_parse+0x560>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d9a7      	bls.n	8002904 <report_parse+0x290>
            }
            
            bFlag = FALSE;                                          // Reset the flag to 0 to show that we are done with descriptor data from this report ID
 80029b4:	2300      	movs	r3, #0
 80029b6:	747b      	strb	r3, [r7, #17]
            ucSensptr++;                                            // Increment to the next sensor in the struct array of sensors
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	3301      	adds	r3, #1
 80029bc:	74fb      	strb	r3, [r7, #19]
 80029be:	e002      	b.n	80029c6 <report_parse+0x352>
        }

        else ucBptr++;                                              // If desired identifiers haven't been reached, continue traversing HID Report Descriptor
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3301      	adds	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
    while( (ucBptr - ucStrt) <= HID_FIELD.wRepDescLen )             // Continue looping until end of report
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <report_parse+0x560>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	f67f ae60 	bls.w	8002698 <report_parse+0x24>
 80029d8:	e000      	b.n	80029dc <report_parse+0x368>
                break;                                              // end of the report has occurred
 80029da:	bf00      	nop
    }

    if ((ucBptr - ucStrt) > (HID_FIELD.wRepDescLen + 1))            // Sanity check to ensure the loop exited at the end of the report descriptor
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b7b      	ldr	r3, [pc, #492]	; (8002bd4 <report_parse+0x560>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	3301      	adds	r3, #1
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d901      	bls.n	80029f2 <report_parse+0x37e>
        return NO_EOC_FAIL;
 80029ee:	2315      	movs	r3, #21
 80029f0:	e0e9      	b.n	8002bc6 <report_parse+0x552>

    for(ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)           // Sanity check to see if the desired fields were parsed correctly
 80029f2:	2300      	movs	r3, #0
 80029f4:	74fb      	strb	r3, [r7, #19]
 80029f6:	e01a      	b.n	8002a2e <report_parse+0x3ba>
    {
        if (TEMP_SF[ucSensptr].id == 0xFF)                          // If the ID == 0xFF it means that the sensor isn't present in the device
 80029f8:	7cfa      	ldrb	r2, [r7, #19]
 80029fa:	4975      	ldr	r1, [pc, #468]	; (8002bd0 <report_parse+0x55c>)
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	440b      	add	r3, r1
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2bff      	cmp	r3, #255	; 0xff
 8002a08:	d00d      	beq.n	8002a26 <report_parse+0x3b2>
            continue;
        if (TEMP_SF[ucSensptr].id != (ucSensptr+1))                 // Make sure every filled struct has a valid sensor ID
 8002a0a:	7cfa      	ldrb	r2, [r7, #19]
 8002a0c:	4970      	ldr	r1, [pc, #448]	; (8002bd0 <report_parse+0x55c>)
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	440b      	add	r3, r1
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d002      	beq.n	8002a28 <report_parse+0x3b4>
             return REP_PARS_FAIL; 
 8002a22:	2314      	movs	r3, #20
 8002a24:	e0cf      	b.n	8002bc6 <report_parse+0x552>
            continue;
 8002a26:	bf00      	nop
    for(ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)           // Sanity check to see if the desired fields were parsed correctly
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	74fb      	strb	r3, [r7, #19]
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	2b0b      	cmp	r3, #11
 8002a32:	d9e1      	bls.n	80029f8 <report_parse+0x384>
    }

    memset(&SENSOR, 0xFF, sizeof(SENSOR));                          // Init & Rearrange structs into order compatible with _VREGS structure            
 8002a34:	2254      	movs	r2, #84	; 0x54
 8002a36:	21ff      	movs	r1, #255	; 0xff
 8002a38:	4867      	ldr	r0, [pc, #412]	; (8002bd8 <report_parse+0x564>)
 8002a3a:	f008 f869 	bl	800ab10 <memset>

    for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)          // go through the entire sensor list looking for sensor types
 8002a3e:	2300      	movs	r3, #0
 8002a40:	74fb      	strb	r3, [r7, #19]
 8002a42:	e0bb      	b.n	8002bbc <report_parse+0x548>
    {
        if (TEMP_SF[ucSensptr].type == ACCEL_SENSOR_TYPE)           // Sensor type identifier for accelerometer
 8002a44:	7cfa      	ldrb	r2, [r7, #19]
 8002a46:	4962      	ldr	r1, [pc, #392]	; (8002bd0 <report_parse+0x55c>)
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3301      	adds	r3, #1
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b73      	cmp	r3, #115	; 0x73
 8002a56:	d112      	bne.n	8002a7e <report_parse+0x40a>
        {
            SENSOR[ACCEL_VREG_OFFSET] = TEMP_SF[ucSensptr];         // Store this struct as the first in the new order
 8002a58:	7cfa      	ldrb	r2, [r7, #19]
 8002a5a:	485f      	ldr	r0, [pc, #380]	; (8002bd8 <report_parse+0x564>)
 8002a5c:	495c      	ldr	r1, [pc, #368]	; (8002bd0 <report_parse+0x55c>)
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	18ca      	adds	r2, r1, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	6810      	ldr	r0, [r2, #0]
 8002a6a:	6018      	str	r0, [r3, #0]
 8002a6c:	8891      	ldrh	r1, [r2, #4]
 8002a6e:	7992      	ldrb	r2, [r2, #6]
 8002a70:	8099      	strh	r1, [r3, #4]
 8002a72:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.accel = TRUE;                                  // VREG01 accelerometer available bit(0) set
 8002a74:	4a59      	ldr	r2, [pc, #356]	; (8002bdc <report_parse+0x568>)
 8002a76:	7913      	ldrb	r3, [r2, #4]
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == GYRO_SENSOR_TYPE)            // Sensor type identifier for gyrometer
 8002a7e:	7cfa      	ldrb	r2, [r7, #19]
 8002a80:	4953      	ldr	r1, [pc, #332]	; (8002bd0 <report_parse+0x55c>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	440b      	add	r3, r1
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b76      	cmp	r3, #118	; 0x76
 8002a90:	d112      	bne.n	8002ab8 <report_parse+0x444>
        {
            SENSOR[GYRO_VREG_OFFSET] = TEMP_SF[ucSensptr];          // Store this struct as the second in the new order
 8002a92:	7cfa      	ldrb	r2, [r7, #19]
 8002a94:	4950      	ldr	r1, [pc, #320]	; (8002bd8 <report_parse+0x564>)
 8002a96:	484e      	ldr	r0, [pc, #312]	; (8002bd0 <report_parse+0x55c>)
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	18c2      	adds	r2, r0, r3
 8002aa0:	1dcb      	adds	r3, r1, #7
 8002aa2:	6811      	ldr	r1, [r2, #0]
 8002aa4:	6019      	str	r1, [r3, #0]
 8002aa6:	8891      	ldrh	r1, [r2, #4]
 8002aa8:	7992      	ldrb	r2, [r2, #6]
 8002aaa:	8099      	strh	r1, [r3, #4]
 8002aac:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.gyro = TRUE;                                   // VREG01 gyrometer available bit(1) set
 8002aae:	4a4b      	ldr	r2, [pc, #300]	; (8002bdc <report_parse+0x568>)
 8002ab0:	7913      	ldrb	r3, [r2, #4]
 8002ab2:	f043 0302 	orr.w	r3, r3, #2
 8002ab6:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == CMP_SENSOR_TYPE)             // Sensor type identifier for compass
 8002ab8:	7cfa      	ldrb	r2, [r7, #19]
 8002aba:	4945      	ldr	r1, [pc, #276]	; (8002bd0 <report_parse+0x55c>)
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b83      	cmp	r3, #131	; 0x83
 8002aca:	d113      	bne.n	8002af4 <report_parse+0x480>
        {
            SENSOR[CMP_VREG_OFFSET] = TEMP_SF[ucSensptr];           // Store this struct as the third in the new order
 8002acc:	7cfa      	ldrb	r2, [r7, #19]
 8002ace:	4942      	ldr	r1, [pc, #264]	; (8002bd8 <report_parse+0x564>)
 8002ad0:	483f      	ldr	r0, [pc, #252]	; (8002bd0 <report_parse+0x55c>)
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	18c2      	adds	r2, r0, r3
 8002ada:	f101 030e 	add.w	r3, r1, #14
 8002ade:	6811      	ldr	r1, [r2, #0]
 8002ae0:	6019      	str	r1, [r3, #0]
 8002ae2:	8891      	ldrh	r1, [r2, #4]
 8002ae4:	7992      	ldrb	r2, [r2, #6]
 8002ae6:	8099      	strh	r1, [r3, #4]
 8002ae8:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.cmp = TRUE;                                    // VREG01 compass available bit(2) set
 8002aea:	4a3c      	ldr	r2, [pc, #240]	; (8002bdc <report_parse+0x568>)
 8002aec:	7913      	ldrb	r3, [r2, #4]
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == ORI_SENSOR_TYPE)             // Sensor type identifier for orientation sensor
 8002af4:	7cfa      	ldrb	r2, [r7, #19]
 8002af6:	4936      	ldr	r1, [pc, #216]	; (8002bd0 <report_parse+0x55c>)
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	3301      	adds	r3, #1
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b8a      	cmp	r3, #138	; 0x8a
 8002b06:	d113      	bne.n	8002b30 <report_parse+0x4bc>
        {
            SENSOR[ORI_VREG_OFFSET] = TEMP_SF[ucSensptr];           // Store this struct as the fourth in the new order
 8002b08:	7cfa      	ldrb	r2, [r7, #19]
 8002b0a:	4933      	ldr	r1, [pc, #204]	; (8002bd8 <report_parse+0x564>)
 8002b0c:	4830      	ldr	r0, [pc, #192]	; (8002bd0 <report_parse+0x55c>)
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	18c2      	adds	r2, r0, r3
 8002b16:	f101 0315 	add.w	r3, r1, #21
 8002b1a:	6811      	ldr	r1, [r2, #0]
 8002b1c:	6019      	str	r1, [r3, #0]
 8002b1e:	8891      	ldrh	r1, [r2, #4]
 8002b20:	7992      	ldrb	r2, [r2, #6]
 8002b22:	8099      	strh	r1, [r3, #4]
 8002b24:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.ori = TRUE;                                    // VREG01 orientation available bit(3) set
 8002b26:	4a2d      	ldr	r2, [pc, #180]	; (8002bdc <report_parse+0x568>)
 8002b28:	7913      	ldrb	r3, [r2, #4]
 8002b2a:	f043 0308 	orr.w	r3, r3, #8
 8002b2e:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == INCL_SENSOR_TYPE)            // Sensor type identifier for inclinometer
 8002b30:	7cfa      	ldrb	r2, [r7, #19]
 8002b32:	4927      	ldr	r1, [pc, #156]	; (8002bd0 <report_parse+0x55c>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b86      	cmp	r3, #134	; 0x86
 8002b42:	d113      	bne.n	8002b6c <report_parse+0x4f8>
        {
            SENSOR[INCL_VREG_OFFSET] = TEMP_SF[ucSensptr];          // Store this struct as the fifth in the new order
 8002b44:	7cfa      	ldrb	r2, [r7, #19]
 8002b46:	4924      	ldr	r1, [pc, #144]	; (8002bd8 <report_parse+0x564>)
 8002b48:	4821      	ldr	r0, [pc, #132]	; (8002bd0 <report_parse+0x55c>)
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	18c2      	adds	r2, r0, r3
 8002b52:	f101 031c 	add.w	r3, r1, #28
 8002b56:	6810      	ldr	r0, [r2, #0]
 8002b58:	6018      	str	r0, [r3, #0]
 8002b5a:	8891      	ldrh	r1, [r2, #4]
 8002b5c:	7992      	ldrb	r2, [r2, #6]
 8002b5e:	8099      	strh	r1, [r3, #4]
 8002b60:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.incl = TRUE;                                   // VREG01 gyrometer available bit(4) set
 8002b62:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <report_parse+0x568>)
 8002b64:	7913      	ldrb	r3, [r2, #4]
 8002b66:	f043 0310 	orr.w	r3, r3, #16
 8002b6a:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == RAW_SENSOR_TYPE)             // Sensor type identifier for raw data
 8002b6c:	7cfa      	ldrb	r2, [r7, #19]
 8002b6e:	4918      	ldr	r1, [pc, #96]	; (8002bd0 <report_parse+0x55c>)
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	3301      	adds	r3, #1
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2be1      	cmp	r3, #225	; 0xe1
 8002b7e:	d11a      	bne.n	8002bb6 <report_parse+0x542>
        {                                                           // NOTE: there is no VREG01 bit for raw sensors available 
            SENSOR[RAW_VREG_OFFSET+RAW_SENSOR_CNT] = TEMP_SF[ucSensptr]; // Store this struct as the 8th/9th/10th in the new order
 8002b80:	7cfa      	ldrb	r2, [r7, #19]
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <report_parse+0x56c>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	1dd9      	adds	r1, r3, #7
 8002b88:	4813      	ldr	r0, [pc, #76]	; (8002bd8 <report_parse+0x564>)
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1a5b      	subs	r3, r3, r1
 8002b90:	4418      	add	r0, r3
 8002b92:	490f      	ldr	r1, [pc, #60]	; (8002bd0 <report_parse+0x55c>)
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	18ca      	adds	r2, r1, r3
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	6811      	ldr	r1, [r2, #0]
 8002ba0:	6019      	str	r1, [r3, #0]
 8002ba2:	8891      	ldrh	r1, [r2, #4]
 8002ba4:	7992      	ldrb	r2, [r2, #6]
 8002ba6:	8099      	strh	r1, [r3, #4]
 8002ba8:	719a      	strb	r2, [r3, #6]
            RAW_SENSOR_CNT++;                                       // NOTE: pre-production SSC7150 F/W only enumerates 1 RAW sensor, so keep running count
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <report_parse+0x56c>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <report_parse+0x56c>)
 8002bb4:	701a      	strb	r2, [r3, #0]
    for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)          // go through the entire sensor list looking for sensor types
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	74fb      	strb	r3, [r7, #19]
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b0b      	cmp	r3, #11
 8002bc0:	f67f af40 	bls.w	8002a44 <report_parse+0x3d0>
        }     
    }
    
    return SUCCESS;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000114 	.word	0x20000114
 8002bd4:	20000168 	.word	0x20000168
 8002bd8:	200000c0 	.word	0x200000c0
 8002bdc:	20000f5c 	.word	0x20000f5c
 8002be0:	20000f58 	.word	0x20000f58
 8002be4:	00000000 	.word	0x00000000

08002be8 <ret_exponent>:
* @note        Returns the exponent scaler for a requested data field
* @param ucAdj_SensN sensor num of interest
* @return dMult multiplier value
*/ 
double ret_exponent (UINT8 ucAdj_SensN)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
    UINT8 ucVreg_ptr = VREG_EXP1;                                   // VREG36 is start of exponent values
 8002bf2:	2339      	movs	r3, #57	; 0x39
 8002bf4:	77fb      	strb	r3, [r7, #31]
    UINT8 ucRet;                                                    // Function status variable
    double dMult = 1;                                               // Unit exponent scaler to be returned
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <ret_exponent+0xd0>)
 8002bfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    UINT16 wExpo;                                                   // 'Buffer' to hold the exponent register's contents
    UINT8 ucTemp_expo = 0;                                          // Variable to hold the 4 bit exponent value
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]


    if (ucAdj_SensN > 3)                                            // sensor indexes from 4 to 7 = sensors that have unit exponents in the 2nd exponent register (VREG37)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d902      	bls.n	8002c10 <ret_exponent+0x28>
        ucVreg_ptr++;                                               // Increment ptr to VREG exponent register to be searched
 8002c0a:	7ffb      	ldrb	r3, [r7, #31]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	77fb      	strb	r3, [r7, #31]

    if (ucAdj_SensN > 7)                                            // sensor indexes > 7 = sensors that have unit exponents in the 3rd exponent register (VREG38)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	2b07      	cmp	r3, #7
 8002c14:	d902      	bls.n	8002c1c <ret_exponent+0x34>
        ucVreg_ptr++;                                               // Increment ptr to VREG exponent register to be searched
 8002c16:	7ffb      	ldrb	r3, [r7, #31]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	77fb      	strb	r3, [r7, #31]
      
    ucAdj_SensN= ucAdj_SensN % 4;                                   // Find the appropriate offset for this sensor's unit exponent
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	71fb      	strb	r3, [r7, #7]


    ucRet = HOST_SF_LIB_VREG_read (ucVreg_ptr, &wExpo);             // Read this sesnor's data unit exponent value from the VREG
 8002c24:	f107 0208 	add.w	r2, r7, #8
 8002c28:	7ffb      	ldrb	r3, [r7, #31]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fc61 	bl	80034f4 <HOST_SF_LIB_VREG_read>
 8002c32:	4603      	mov	r3, r0
 8002c34:	73bb      	strb	r3, [r7, #14]
    
    ucTemp_expo = (UINT8)((wExpo >> (4 * ucAdj_SensN)) & 0xF);       // get the 4 exp bits for desired sensor
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	73fb      	strb	r3, [r7, #15]

    if (ucTemp_expo >= 0 && ucTemp_expo <= 7)                        // These values are all positive exponents
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b07      	cmp	r3, #7
 8002c4c:	d80d      	bhi.n	8002c6a <ret_exponent+0x82>
        dMult = pow(10, ucTemp_expo);
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc57 	bl	8000504 <__aeabi_ui2d>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	ec43 2b11 	vmov	d1, r2, r3
 8002c5e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8002cb0 <ret_exponent+0xc8>
 8002c62:	f008 fc25 	bl	800b4b0 <pow>
 8002c66:	ed87 0b04 	vstr	d0, [r7, #16]

    if(ucTemp_expo >= 8 && ucTemp_expo <= 0x0F)                      // These values are all negative exponents (ie. to right of decimal place)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	d914      	bls.n	8002c9a <ret_exponent+0xb2>
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b0f      	cmp	r3, #15
 8002c74:	d811      	bhi.n	8002c9a <ret_exponent+0xb2>
        dMult = pow(10, (int16_t)(-16 + ucTemp_expo));
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b10      	subs	r3, #16
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	b21b      	sxth	r3, r3
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fc4f 	bl	8000524 <__aeabi_i2d>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	ec43 2b11 	vmov	d1, r2, r3
 8002c8e:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8002cb0 <ret_exponent+0xc8>
 8002c92:	f008 fc0d 	bl	800b4b0 <pow>
 8002c96:	ed87 0b04 	vstr	d0, [r7, #16]

    return dMult;                                                    //return Unit exponent scaler
 8002c9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c9e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ca6:	eef0 0a67 	vmov.f32	s1, s15
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	00000000 	.word	0x00000000
 8002cb4:	40240000 	.word	0x40240000
 8002cb8:	3ff00000 	.word	0x3ff00000

08002cbc <HOST_SF_LIB_HID_Set_Report>:
* @param ReportBuffer pointer to data that needs to be sent to the device
* @param size specifies the size, in bytes,of the report buffer 
* @return completion_status 0=SUCCESS, failcode: 0x19=SET_RPT_FAIL
*/
UINT8 HOST_SF_LIB_HID_Set_Report(UINT8 type, UINT8 *ReportBuffer, UINT8 size)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0ac      	sub	sp, #176	; 0xb0
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	6039      	str	r1, [r7, #0]
 8002cc6:	71fb      	strb	r3, [r7, #7]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	71bb      	strb	r3, [r7, #6]
    UINT8 ucTx_data[BUF_150];
    UINT8 ucRetStat;
    UINT8 ucCmdBytePtr;
    BOOL bVendorCmd = FALSE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

    if (size <= 0 || size >= (BUF_150 - RPT_LEN))
 8002cd2:	79bb      	ldrb	r3, [r7, #6]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <HOST_SF_LIB_HID_Set_Report+0x22>
 8002cd8:	79bb      	ldrb	r3, [r7, #6]
 8002cda:	2b8f      	cmp	r3, #143	; 0x8f
 8002cdc:	d901      	bls.n	8002ce2 <HOST_SF_LIB_HID_Set_Report+0x26>
        return SET_RPT_FAIL;
 8002cde:	2319      	movs	r3, #25
 8002ce0:	e066      	b.n	8002db0 <HOST_SF_LIB_HID_Set_Report+0xf4>
    
    if (ReportBuffer[0] == FLASH_UPDATE_RPT_ID)                     // the flash update (Vendor) commands have a different format
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b0e      	cmp	r3, #14
 8002ce8:	d102      	bne.n	8002cf0 <HOST_SF_LIB_HID_Set_Report+0x34>
        bVendorCmd = TRUE;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
    
    ucTx_data[0] = HID_FIELD.wCmdReg;                               //command field bytes from HID config table
 8002cf0:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	733b      	strb	r3, [r7, #12]
    ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);               // Command register MSB
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	737b      	strb	r3, [r7, #13]
    if (bVendorCmd)
 8002d02:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <HOST_SF_LIB_HID_Set_Report+0x5c>
        ucTx_data[2] = type | ReportBuffer[0];                      // HID Set command opcode low byte which includes the sensor's ReportID, high byte report type
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	73bb      	strb	r3, [r7, #14]
 8002d16:	e006      	b.n	8002d26 <HOST_SF_LIB_HID_Set_Report+0x6a>
    else
        ucTx_data[2] = type | ReportBuffer[2];
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	73bb      	strb	r3, [r7, #14]
    ucTx_data[3] = SET_OPCODE;                                      // HID SetReport command opcode high byte
 8002d26:	2303      	movs	r3, #3
 8002d28:	73fb      	strb	r3, [r7, #15]
    ucTx_data[4] = HID_FIELD.wDatReg;                               //data field bytes from HID config table
 8002d2a:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	743b      	strb	r3, [r7, #16]
    ucTx_data[5] = (HID_FIELD.wDatReg >> BYTE_SHIFT);
 8002d32:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	747b      	strb	r3, [r7, #17]

    ucCmdBytePtr = RPT_LEN;
 8002d3c:	2306      	movs	r3, #6
 8002d3e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
    if (bVendorCmd)                                                 // flash update (vendor) commands have a different format
 8002d42:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HOST_SF_LIB_HID_Set_Report+0x96>
        ReportBuffer++;                                             //skips 1st byte of input buffer
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	e012      	b.n	8002d78 <HOST_SF_LIB_HID_Set_Report+0xbc>
    else size++;
 8002d52:	79bb      	ldrb	r3, [r7, #6]
 8002d54:	3301      	adds	r3, #1
 8002d56:	71bb      	strb	r3, [r7, #6]

    while (size--)
 8002d58:	e00e      	b.n	8002d78 <HOST_SF_LIB_HID_Set_Report+0xbc>
    {
        ucTx_data[ucCmdBytePtr++] = *(ReportBuffer++);              // Append input to the command
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	603a      	str	r2, [r7, #0]
 8002d60:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8002d64:	1c51      	adds	r1, r2, #1
 8002d66:	f887 10a7 	strb.w	r1, [r7, #167]	; 0xa7
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	f101 03a8 	add.w	r3, r1, #168	; 0xa8
 8002d72:	443b      	add	r3, r7
 8002d74:	f803 2c9c 	strb.w	r2, [r3, #-156]
    while (size--)
 8002d78:	79bb      	ldrb	r3, [r7, #6]
 8002d7a:	1e5a      	subs	r2, r3, #1
 8002d7c:	71ba      	strb	r2, [r7, #6]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1eb      	bne.n	8002d5a <HOST_SF_LIB_HID_Set_Report+0x9e>
    }

    ucRetStat = i2c_cmd_WrRd (WRITE,                                //issue SetReportOutput command to SSC7150
 8002d82:	f107 020c 	add.w	r2, r7, #12
 8002d86:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	2300      	movs	r3, #0
 8002d94:	2001      	movs	r0, #1
 8002d96:	f7fe f889 	bl	8000eac <i2c_cmd_WrRd>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
                        ucTx_data,                                  //cmd buf
                        0,                                          //num of bytes to read initially
                        0,                                          //recv buf
                        FALSE);                                     //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

    if (ucRetStat != SUCCESS)
 8002da0:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HOST_SF_LIB_HID_Set_Report+0xf0>
    {
        return SET_RPT_FAIL;
 8002da8:	2319      	movs	r3, #25
 8002daa:	e001      	b.n	8002db0 <HOST_SF_LIB_HID_Set_Report+0xf4>
    }

    return ucRetStat;
 8002dac:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	37a8      	adds	r7, #168	; 0xa8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000168 	.word	0x20000168

08002dbc <HOST_SF_LIB_HID_Get_Report>:
* @param ReportBuffer pointer towhich the feature report data is read into 
* @param size specifies the size, in bytes, of the report buffer 
* @return completion_status 0=I2C_SUCCESS, failcode: 0x1C=HID_GET_RPT_INPT_FAIL,0x1D=HID_GET_RPT_FEAT_FAIL
*/
UINT8 HOST_SF_LIB_HID_Get_Report(UINT8 type, UINT8* ReportBuffer, UINT8 size)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b0aa      	sub	sp, #168	; 0xa8
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	71bb      	strb	r3, [r7, #6]
    UINT8 ucTx_data[BUF_150];
    UINT8 ucRetStat;
    UINT8 ucCmdBytePtr;

    ucTx_data[0] = HID_FIELD.wCmdReg;                               //command field bytes from HID config table
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	723b      	strb	r3, [r7, #8]
    ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);               // Command register MSB
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	727b      	strb	r3, [r7, #9]
    ucTx_data[2] = type | ReportBuffer[0];                          // HID Get command opcode low byte which includes the sensor's ReportID, high byte report type
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	72bb      	strb	r3, [r7, #10]
    ucTx_data[3] = GET_RPT_CMD_MSB;                                 // HID GetReport command opcode high byte
 8002dea:	2302      	movs	r3, #2
 8002dec:	72fb      	strb	r3, [r7, #11]
    ucTx_data[4] = HID_FIELD.wDatReg;                               //data field bytes from HID config table
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	733b      	strb	r3, [r7, #12]
    ucTx_data[5] = (HID_FIELD.wDatReg >> BYTE_SHIFT);
 8002df6:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	737b      	strb	r3, [r7, #13]

    ucCmdBytePtr = RPT_LEN;
 8002e00:	2306      	movs	r3, #6
 8002e02:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    ucRetStat = i2c_cmd_WrRd (WR_RD,                                 //issue SetReportOutput command to SSC7150
 8002e06:	f107 0208 	add.w	r2, r7, #8
 8002e0a:	f897 109f 	ldrb.w	r1, [r7, #159]	; 0x9f
 8002e0e:	2301      	movs	r3, #1
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2303      	movs	r3, #3
 8002e18:	2003      	movs	r0, #3
 8002e1a:	f7fe f847 	bl	8000eac <i2c_cmd_WrRd>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
                        ucTx_data,                                  //cmd buf
                        BYTE_ADJ_VAL,                               //num of bytes to read initially
                        ReportBuffer,                               //recv buf
                        TRUE);                                      //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

    if (ucRetStat != SUCCESS)
 8002e24:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d006      	beq.n	8002e3a <HOST_SF_LIB_HID_Get_Report+0x7e>
    {
        if (type == GET_RPT_FEAT)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	2b30      	cmp	r3, #48	; 0x30
 8002e30:	d101      	bne.n	8002e36 <HOST_SF_LIB_HID_Get_Report+0x7a>
            return HID_GET_RPT_FEAT_FAIL;
 8002e32:	231d      	movs	r3, #29
 8002e34:	e003      	b.n	8002e3e <HOST_SF_LIB_HID_Get_Report+0x82>
        else
            return HID_GET_RPT_INPT_FAIL;
 8002e36:	231c      	movs	r3, #28
 8002e38:	e001      	b.n	8002e3e <HOST_SF_LIB_HID_Get_Report+0x82>
    }

    return ucRetStat;
 8002e3a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002e3e:	4618      	mov	r0, r3
 8002e40:	37a0      	adds	r7, #160	; 0xa0
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000168 	.word	0x20000168

08002e4c <Wake_signal>:
* @note        assert wake signal on RE9, wait 1 ms, deassert
* @param
* @return
*/
void Wake_signal()
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //assert wake signal
 8002e50:	2200      	movs	r2, #0
 8002e52:	2101      	movs	r1, #1
 8002e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e58:	f001 ff70 	bl	8004d3c <HAL_GPIO_WritePin>
    osDelay(2000); //spec says 3�s assertion, let's use ms delay and wait ~2 ms
 8002e5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e60:	f005 f97c 	bl	800815c <osDelay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);  //de-assert wake signal
 8002e64:	2201      	movs	r2, #1
 8002e66:	2101      	movs	r1, #1
 8002e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6c:	f001 ff66 	bl	8004d3c <HAL_GPIO_WritePin>
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <VREG_init>:
* @note        Inits VREG registers, get HID config & report descriptor tables, retrieves all device features
* @param 
* @return error status 0=SUCCESS, failcodes: 0x11=HID_DESC_FAIL, 0x12=RPT_DESC_FAIL, 0x18=RESET_FAIL 
*/ 
UINT8 VREG_init() 
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08c      	sub	sp, #48	; 0x30
 8002e78:	af00      	add	r7, sp, #0
    UINT8 ucBuf[BUF_40];                                           
    UINT8 ucSensor_num;
    
        
    memset(&_VREGS, 0x00, sizeof(_VREGS));                            // Initialize VREG registers 
 8002e7a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4841      	ldr	r0, [pc, #260]	; (8002f88 <VREG_init+0x114>)
 8002e82:	f007 fe45 	bl	800ab10 <memset>

    
    if ( hid_i2c_descriptor_handler(GET_HID_DESC) )                 // get HID descriptor from SSC7150
 8002e86:	2001      	movs	r0, #1
 8002e88:	f7ff f944 	bl	8002114 <hid_i2c_descriptor_handler>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <VREG_init+0x30>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // update status register (VREG 0x3F) for failure to get HID descriptor
 8002e92:	4a3d      	ldr	r2, [pc, #244]	; (8002f88 <VREG_init+0x114>)
 8002e94:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8002e98:	f043 0318 	orr.w	r3, r3, #24
 8002e9c:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return HID_DESC_FAIL;
 8002ea0:	2311      	movs	r3, #17
 8002ea2:	e06c      	b.n	8002f7e <VREG_init+0x10a>
    }        
    
    hid_i2c_cmd_process(ucBuf, POWER_ON, ARB_ID);                   // Issue HID Power ON command to SSC7150 (NOTE: 'ucBuf' and 'ARB_ID' are don't cares for POWER_ON command)
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fa0a 	bl	80022c4 <hid_i2c_cmd_process>
    
    _VREGS.SHC.reset = VREG_RESET_INIT;                              //set the SHC reset bit to indicate this operation has not yet completed successfully
 8002eb0:	4a35      	ldr	r2, [pc, #212]	; (8002f88 <VREG_init+0x114>)
 8002eb2:	7813      	ldrb	r3, [r2, #0]
 8002eb4:	f043 0308 	orr.w	r3, r3, #8
 8002eb8:	7013      	strb	r3, [r2, #0]
    if ( hid_i2c_cmd_process (ucBuf, RESET_DEV_CMD, ARB_ID) )       // Issue HID Reset command  (NOTE: 'ucBuf' and 'ARB_ID' are don't cares for RESET_REG command)
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff f9ff 	bl	80022c4 <hid_i2c_cmd_process>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <VREG_init+0x6a>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // If HID Reset fails, update status register (VREG 0x3F)
 8002ecc:	4a2e      	ldr	r2, [pc, #184]	; (8002f88 <VREG_init+0x114>)
 8002ece:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8002ed2:	f043 0318 	orr.w	r3, r3, #24
 8002ed6:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return RESET_FAIL;
 8002eda:	2318      	movs	r3, #24
 8002edc:	e04f      	b.n	8002f7e <VREG_init+0x10a>
    }    
    
    if ( hid_i2c_descriptor_handler(GET_RPT_DESC) )                 // Get HID Report descriptor from SSC7150 
 8002ede:	2002      	movs	r0, #2
 8002ee0:	f7ff f918 	bl	8002114 <hid_i2c_descriptor_handler>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <VREG_init+0x88>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // HID report descriptor error, update status register (VREG 0x3F)
 8002eea:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <VREG_init+0x114>)
 8002eec:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8002ef0:	f043 0318 	orr.w	r3, r3, #24
 8002ef4:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return RPT_DESC_FAIL;
 8002ef8:	2312      	movs	r3, #18
 8002efa:	e040      	b.n	8002f7e <VREG_init+0x10a>
    }       
    
    for (ucSensor_num = 0; ucSensor_num <= NUM_SENS; ucSensor_num++) //go through the sensor list but only GetFeatureReport for valid ids   
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002f02:	e025      	b.n	8002f50 <VREG_init+0xdc>
    {
        if (SENSOR[ucSensor_num].id != 0xFF && SENSOR[ucSensor_num].id != 0)
 8002f04:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002f08:	4920      	ldr	r1, [pc, #128]	; (8002f8c <VREG_init+0x118>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	440b      	add	r3, r1
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2bff      	cmp	r3, #255	; 0xff
 8002f16:	d016      	beq.n	8002f46 <VREG_init+0xd2>
 8002f18:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002f1c:	491b      	ldr	r1, [pc, #108]	; (8002f8c <VREG_init+0x118>)
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	440b      	add	r3, r1
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00c      	beq.n	8002f46 <VREG_init+0xd2>
        {
            hid_i2c_cmd_process(ucBuf, HID_GET_RPT_FEAT, SENSOR[ucSensor_num].id);  // Get feature report for all valid sensors and update _VREGS register
 8002f2c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002f30:	4916      	ldr	r1, [pc, #88]	; (8002f8c <VREG_init+0x118>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	440b      	add	r3, r1
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	1d3b      	adds	r3, r7, #4
 8002f3e:	2105      	movs	r1, #5
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f9bf 	bl	80022c4 <hid_i2c_cmd_process>
    for (ucSensor_num = 0; ucSensor_num <= NUM_SENS; ucSensor_num++) //go through the sensor list but only GetFeatureReport for valid ids   
 8002f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	d9d5      	bls.n	8002f04 <VREG_init+0x90>
        }
    }

    
    _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_SUCCESS;          // HID startup successful, update status register (VREG 0x3F) 
 8002f58:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <VREG_init+0x114>)
 8002f5a:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8002f5e:	2101      	movs	r1, #1
 8002f60:	f361 03c4 	bfi	r3, r1, #3, #2
 8002f64:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108

    _VREGS.SHC.SHwake = TRUE;                                        // HID device is now awake and ready for operation
 8002f68:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <VREG_init+0x114>)
 8002f6a:	7813      	ldrb	r3, [r2, #0]
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	7013      	strb	r3, [r2, #0]
    _VREGS.SHC.SHstart = TRUE;
 8002f72:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <VREG_init+0x114>)
 8002f74:	7813      	ldrb	r3, [r2, #0]
 8002f76:	f043 0304 	orr.w	r3, r3, #4
 8002f7a:	7013      	strb	r3, [r2, #0]

    return SUCCESS;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3730      	adds	r7, #48	; 0x30
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000f5c 	.word	0x20000f5c
 8002f8c:	200000c0 	.word	0x200000c0

08002f90 <set_state_data>:
* @note        Set and confirm new features for a device 
* @param GET_SET_PARAMS structure containing  power state (=2: FULL, =3: LOW),sensor ID, New data rate,New sensitivity
* @return error status 0=SUCCESS, failcodes: 0x17=SET_FEAT_FAIL 
*/ 
UINT8 set_state_data(GET_SET_PARAMS SET_PARAMS)    
{
 8002f90:	b084      	sub	sp, #16
 8002f92:	b5b0      	push	{r4, r5, r7, lr}
 8002f94:	b096      	sub	sp, #88	; 0x58
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    UINT8 ucGetFeatBuf[BUF_40];                                     // GetFeature report buffer
    UINT8 ucSetFeatBuf[BUF_40];                                     // SetFeature report buffer
    UINT8 ucRetryCnt, ucGSptr, ucBufSize;


    if ( hid_i2c_cmd_process(ucGetFeatBuf, HID_GET_RPT_FEAT, SET_PARAMS.ucid) ) // Issue a get report feature command and store the get features in ucGetFeatBuf
 8002fa0:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8002fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa8:	2105      	movs	r1, #5
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f98a 	bl	80022c4 <hid_i2c_cmd_process>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <set_state_data+0x2a>
        return SET_FEAT_FAIL;  
 8002fb6:	2317      	movs	r3, #23
 8002fb8:	e073      	b.n	80030a2 <set_state_data+0x112>
    
    memcpy(&ucSetFeatBuf, &ucGetFeatBuf, BUF_40);                   // Copy GetFeatBuff to bufs to use for set feature command
 8002fba:	1d3c      	adds	r4, r7, #4
 8002fbc:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8002fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fc8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002fcc:	e884 0003 	stmia.w	r4, {r0, r1}

    // Modify fields that we would like to set in bufs (sensor state, power state, data rate, sensitivity)
    ucSetFeatBuf[RPT_REPORT_STATE] = HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_ALL_EVENTS_ENUM;   
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	723b      	strb	r3, [r7, #8]
    ucSetFeatBuf[RPT_PWR_STATE] = SET_PARAMS.ucPowerState;          //update the Power state parameter
 8002fd4:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002fd8:	727b      	strb	r3, [r7, #9]

    if (SET_PARAMS.bDataRateValid)                                  // update data rate value?
 8002fda:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <set_state_data+0x60>
    {
        ucSetFeatBuf[RPT_REPORT_INTVAL_LSB] = (UINT8) SET_PARAMS.usDataRateVal; //update 16 bit data rate value
 8002fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	72fb      	strb	r3, [r7, #11]
        ucSetFeatBuf[RPT_REPORT_INTVAL_MSB] = (UINT8) (SET_PARAMS.usDataRateVal >> BYTE_SHIFT);
 8002fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	733b      	strb	r3, [r7, #12]
    }
    
    if (SET_PARAMS.bSensitivityValid)                               // update sensitivity value?
 8002ff0:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <set_state_data+0x76>
    {
        ucSetFeatBuf[RPT_CHG_SENS_LSB] = (UINT8) SET_PARAMS.usSensitivityVal; //update 16 bit sensitivity value
 8002ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	747b      	strb	r3, [r7, #17]
        ucSetFeatBuf[RPT_CHG_SENS_MSB] = (UINT8) (SET_PARAMS.usSensitivityVal >> BYTE_SHIFT);
 8002ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	b2db      	uxtb	r3, r3
 8003004:	74bb      	strb	r3, [r7, #18]
    }

    for (ucRetryCnt = 0; ucRetryCnt < MAX_RETRIES; ucRetryCnt++)    // API spec requires 3 attempts at setting new features. 
 8003006:	2300      	movs	r3, #0
 8003008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800300c:	e03c      	b.n	8003088 <set_state_data+0xf8>
    {
        hid_i2c_cmd_process(ucSetFeatBuf, HID_SET_RPT_FEAT, SET_PARAMS.ucid);  // Send HID_SetFeature command to SSC7150 to update new features to the device
 800300e:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	2107      	movs	r1, #7
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff f954 	bl	80022c4 <hid_i2c_cmd_process>
        hid_i2c_cmd_process(ucGetFeatBuf, HID_GET_RPT_FEAT, SET_PARAMS.ucid);  // Send HID_GetFeature command to SSC7150 to check if new feature request to device were updated
 800301c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8003020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003024:	2105      	movs	r1, #5
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f94c 	bl	80022c4 <hid_i2c_cmd_process>
        
        ucBufSize = ucGetFeatBuf[RPT_SIZE_LSB];                     // size (in bytes) of packet is in 1st byte
 800302c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003030:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        for (ucGSptr = 0; ucGSptr < ucBufSize; ucGSptr++)           // Check to see if the features have been updated
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800303a:	e012      	b.n	8003062 <set_state_data+0xd2>
        {
            if ( ucGetFeatBuf[ucGSptr] != ucSetFeatBuf[ucGSptr] ) 
 800303c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003040:	3358      	adds	r3, #88	; 0x58
 8003042:	443b      	add	r3, r7
 8003044:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8003048:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800304c:	3358      	adds	r3, #88	; 0x58
 800304e:	443b      	add	r3, r7
 8003050:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8003054:	429a      	cmp	r2, r3
 8003056:	d10b      	bne.n	8003070 <set_state_data+0xe0>
        for (ucGSptr = 0; ucGSptr < ucBufSize; ucGSptr++)           // Check to see if the features have been updated
 8003058:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800305c:	3301      	adds	r3, #1
 800305e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003062:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003066:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800306a:	429a      	cmp	r2, r3
 800306c:	d3e6      	bcc.n	800303c <set_state_data+0xac>
 800306e:	e000      	b.n	8003072 <set_state_data+0xe2>
                break;                                              //no they weren't, try again
 8003070:	bf00      	nop
        }

        if ( ucGSptr == ucBufSize )                                 //that's the whole packet, ALL data matches
 8003072:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003076:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800307a:	429a      	cmp	r2, r3
 800307c:	d009      	beq.n	8003092 <set_state_data+0x102>
    for (ucRetryCnt = 0; ucRetryCnt < MAX_RETRIES; ucRetryCnt++)    // API spec requires 3 attempts at setting new features. 
 800307e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003082:	3301      	adds	r3, #1
 8003084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800308c:	2b02      	cmp	r3, #2
 800308e:	d9be      	bls.n	800300e <set_state_data+0x7e>
 8003090:	e000      	b.n	8003094 <set_state_data+0x104>
            break;                                                  //we're done
 8003092:	bf00      	nop
    }

    if (ucRetryCnt == MAX_RETRIES)
 8003094:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003098:	2b03      	cmp	r3, #3
 800309a:	d101      	bne.n	80030a0 <set_state_data+0x110>
        return SET_FEAT_FAIL;                                       // Return error code
 800309c:	2317      	movs	r3, #23
 800309e:	e000      	b.n	80030a2 <set_state_data+0x112>
    
    else return SUCCESS;                                            // Return successful
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3758      	adds	r7, #88	; 0x58
 80030a6:	46bd      	mov	sp, r7
 80030a8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80030ac:	b004      	add	sp, #16
 80030ae:	4770      	bx	lr

080030b0 <parse_update_VREG_data>:
* @param ucSensorNum Sensor data struct checked for unit exponent value
* @param ucInpRep Pointer to input report data buffer
* @return 
*/ 
void parse_update_VREG_data (UINT8 ucSensorNum, UINT8 *ucInpRep)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	71fb      	strb	r3, [r7, #7]

    switch (ucSensorNum)                                            //update VREG data registers with their respective data.
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	2b09      	cmp	r3, #9
 80030c0:	f200 820d 	bhi.w	80034de <parse_update_VREG_data+0x42e>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <parse_update_VREG_data+0x1c>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	080030f5 	.word	0x080030f5
 80030d0:	0800315d 	.word	0x0800315d
 80030d4:	080031c5 	.word	0x080031c5
 80030d8:	080031eb 	.word	0x080031eb
 80030dc:	0800327d 	.word	0x0800327d
 80030e0:	080034df 	.word	0x080034df
 80030e4:	080034df 	.word	0x080034df
 80030e8:	080032f7 	.word	0x080032f7
 80030ec:	08003375 	.word	0x08003375
 80030f0:	08003467 	.word	0x08003467
    {     
        case ACCEL_VREG_OFFSET:                                     // Accelerometer data has been read
 
            _VREGS._data.ACXD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset]);    // parse data from data offset found in report descriptor
 80030f4:	4b9d      	ldr	r3, [pc, #628]	; (800336c <parse_update_VREG_data+0x2bc>)
 80030f6:	795b      	ldrb	r3, [r3, #5]
 80030f8:	3301      	adds	r3, #1
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	4413      	add	r3, r2
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	4a9a      	ldr	r2, [pc, #616]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003104:	7952      	ldrb	r2, [r2, #5]
 8003106:	4611      	mov	r1, r2
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	440a      	add	r2, r1
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4b97      	ldr	r3, [pc, #604]	; (8003370 <parse_update_VREG_data+0x2c0>)
 8003114:	659a      	str	r2, [r3, #88]	; 0x58
            _VREGS._data.ACYD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 2]);
 8003116:	4b95      	ldr	r3, [pc, #596]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003118:	795b      	ldrb	r3, [r3, #5]
 800311a:	3303      	adds	r3, #3
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	4413      	add	r3, r2
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	4a91      	ldr	r2, [pc, #580]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003126:	7952      	ldrb	r2, [r2, #5]
 8003128:	3202      	adds	r2, #2
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	440a      	add	r2, r1
 800312e:	7812      	ldrb	r2, [r2, #0]
 8003130:	4313      	orrs	r3, r2
 8003132:	461a      	mov	r2, r3
 8003134:	4b8e      	ldr	r3, [pc, #568]	; (8003370 <parse_update_VREG_data+0x2c0>)
 8003136:	65da      	str	r2, [r3, #92]	; 0x5c
            _VREGS._data.ACZD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 4]);
 8003138:	4b8c      	ldr	r3, [pc, #560]	; (800336c <parse_update_VREG_data+0x2bc>)
 800313a:	795b      	ldrb	r3, [r3, #5]
 800313c:	3305      	adds	r3, #5
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	4413      	add	r3, r2
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	021b      	lsls	r3, r3, #8
 8003146:	4a89      	ldr	r2, [pc, #548]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003148:	7952      	ldrb	r2, [r2, #5]
 800314a:	3204      	adds	r2, #4
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	440a      	add	r2, r1
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	461a      	mov	r2, r3
 8003156:	4b86      	ldr	r3, [pc, #536]	; (8003370 <parse_update_VREG_data+0x2c0>)
 8003158:	661a      	str	r2, [r3, #96]	; 0x60
            break;
 800315a:	e1c1      	b.n	80034e0 <parse_update_VREG_data+0x430>

        case GYRO_VREG_OFFSET:                                      // Gyrometer data has been read
 
            _VREGS._data.GYXD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset]);
 800315c:	4b83      	ldr	r3, [pc, #524]	; (800336c <parse_update_VREG_data+0x2bc>)
 800315e:	7b1b      	ldrb	r3, [r3, #12]
 8003160:	3301      	adds	r3, #1
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	4413      	add	r3, r2
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	4a80      	ldr	r2, [pc, #512]	; (800336c <parse_update_VREG_data+0x2bc>)
 800316c:	7b12      	ldrb	r2, [r2, #12]
 800316e:	4611      	mov	r1, r2
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	440a      	add	r2, r1
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	461a      	mov	r2, r3
 800317a:	4b7d      	ldr	r3, [pc, #500]	; (8003370 <parse_update_VREG_data+0x2c0>)
 800317c:	671a      	str	r2, [r3, #112]	; 0x70
            _VREGS._data.GYYD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 2]);
 800317e:	4b7b      	ldr	r3, [pc, #492]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003180:	7b1b      	ldrb	r3, [r3, #12]
 8003182:	3303      	adds	r3, #3
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	4413      	add	r3, r2
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	4a77      	ldr	r2, [pc, #476]	; (800336c <parse_update_VREG_data+0x2bc>)
 800318e:	7b12      	ldrb	r2, [r2, #12]
 8003190:	3202      	adds	r2, #2
 8003192:	6839      	ldr	r1, [r7, #0]
 8003194:	440a      	add	r2, r1
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	4313      	orrs	r3, r2
 800319a:	461a      	mov	r2, r3
 800319c:	4b74      	ldr	r3, [pc, #464]	; (8003370 <parse_update_VREG_data+0x2c0>)
 800319e:	675a      	str	r2, [r3, #116]	; 0x74
            _VREGS._data.GYZD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 4]);
 80031a0:	4b72      	ldr	r3, [pc, #456]	; (800336c <parse_update_VREG_data+0x2bc>)
 80031a2:	7b1b      	ldrb	r3, [r3, #12]
 80031a4:	3305      	adds	r3, #5
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	4413      	add	r3, r2
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	4a6f      	ldr	r2, [pc, #444]	; (800336c <parse_update_VREG_data+0x2bc>)
 80031b0:	7b12      	ldrb	r2, [r2, #12]
 80031b2:	3204      	adds	r2, #4
 80031b4:	6839      	ldr	r1, [r7, #0]
 80031b6:	440a      	add	r2, r1
 80031b8:	7812      	ldrb	r2, [r2, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	461a      	mov	r2, r3
 80031be:	4b6c      	ldr	r3, [pc, #432]	; (8003370 <parse_update_VREG_data+0x2c0>)
 80031c0:	679a      	str	r2, [r3, #120]	; 0x78
            break;
 80031c2:	e18d      	b.n	80034e0 <parse_update_VREG_data+0x430>

        case CMP_VREG_OFFSET:                                       // Compass data has been read
  
            _VREGS._data.CMD = ((ucInpRep[SENSOR[CMP_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[CMP_VREG_OFFSET].DatOffset]);
 80031c4:	4b69      	ldr	r3, [pc, #420]	; (800336c <parse_update_VREG_data+0x2bc>)
 80031c6:	7cdb      	ldrb	r3, [r3, #19]
 80031c8:	3301      	adds	r3, #1
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	4413      	add	r3, r2
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	4a66      	ldr	r2, [pc, #408]	; (800336c <parse_update_VREG_data+0x2bc>)
 80031d4:	7cd2      	ldrb	r2, [r2, #19]
 80031d6:	4611      	mov	r1, r2
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	440a      	add	r2, r1
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b63      	ldr	r3, [pc, #396]	; (8003370 <parse_update_VREG_data+0x2c0>)
 80031e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            break;
 80031e8:	e17a      	b.n	80034e0 <parse_update_VREG_data+0x430>
        
        case ORI_VREG_OFFSET:                                       // Orientation data has been read

            _VREGS._data.ORXD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset]);
 80031ea:	4b60      	ldr	r3, [pc, #384]	; (800336c <parse_update_VREG_data+0x2bc>)
 80031ec:	7e9b      	ldrb	r3, [r3, #26]
 80031ee:	3301      	adds	r3, #1
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	4a5c      	ldr	r2, [pc, #368]	; (800336c <parse_update_VREG_data+0x2bc>)
 80031fa:	7e92      	ldrb	r2, [r2, #26]
 80031fc:	4611      	mov	r1, r2
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	440a      	add	r2, r1
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	4313      	orrs	r3, r2
 8003206:	461a      	mov	r2, r3
 8003208:	4b59      	ldr	r3, [pc, #356]	; (8003370 <parse_update_VREG_data+0x2c0>)
 800320a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            _VREGS._data.ORYD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 2]);
 800320e:	4b57      	ldr	r3, [pc, #348]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003210:	7e9b      	ldrb	r3, [r3, #26]
 8003212:	3303      	adds	r3, #3
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	4413      	add	r3, r2
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	4a53      	ldr	r2, [pc, #332]	; (800336c <parse_update_VREG_data+0x2bc>)
 800321e:	7e92      	ldrb	r2, [r2, #26]
 8003220:	3202      	adds	r2, #2
 8003222:	6839      	ldr	r1, [r7, #0]
 8003224:	440a      	add	r2, r1
 8003226:	7812      	ldrb	r2, [r2, #0]
 8003228:	4313      	orrs	r3, r2
 800322a:	461a      	mov	r2, r3
 800322c:	4b50      	ldr	r3, [pc, #320]	; (8003370 <parse_update_VREG_data+0x2c0>)
 800322e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            _VREGS._data.ORZD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 4]);
 8003232:	4b4e      	ldr	r3, [pc, #312]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003234:	7e9b      	ldrb	r3, [r3, #26]
 8003236:	3305      	adds	r3, #5
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	4413      	add	r3, r2
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	4a4a      	ldr	r2, [pc, #296]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003242:	7e92      	ldrb	r2, [r2, #26]
 8003244:	3204      	adds	r2, #4
 8003246:	6839      	ldr	r1, [r7, #0]
 8003248:	440a      	add	r2, r1
 800324a:	7812      	ldrb	r2, [r2, #0]
 800324c:	4313      	orrs	r3, r2
 800324e:	461a      	mov	r2, r3
 8003250:	4b47      	ldr	r3, [pc, #284]	; (8003370 <parse_update_VREG_data+0x2c0>)
 8003252:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
            _VREGS._data.ORWD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 7] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 6]);
 8003256:	4b45      	ldr	r3, [pc, #276]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003258:	7e9b      	ldrb	r3, [r3, #26]
 800325a:	3307      	adds	r3, #7
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	4413      	add	r3, r2
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	4a41      	ldr	r2, [pc, #260]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003266:	7e92      	ldrb	r2, [r2, #26]
 8003268:	3206      	adds	r2, #6
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	440a      	add	r2, r1
 800326e:	7812      	ldrb	r2, [r2, #0]
 8003270:	4313      	orrs	r3, r2
 8003272:	461a      	mov	r2, r3
 8003274:	4b3e      	ldr	r3, [pc, #248]	; (8003370 <parse_update_VREG_data+0x2c0>)
 8003276:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            break;
 800327a:	e131      	b.n	80034e0 <parse_update_VREG_data+0x430>
       
        case INCL_VREG_OFFSET:                                      // Inclinometer data has been read

            _VREGS._data.INXD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset]);
 800327c:	4b3b      	ldr	r3, [pc, #236]	; (800336c <parse_update_VREG_data+0x2bc>)
 800327e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003282:	3301      	adds	r3, #1
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	4a37      	ldr	r2, [pc, #220]	; (800336c <parse_update_VREG_data+0x2bc>)
 800328e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003292:	4611      	mov	r1, r2
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	440a      	add	r2, r1
 8003298:	7812      	ldrb	r2, [r2, #0]
 800329a:	4313      	orrs	r3, r2
 800329c:	461a      	mov	r2, r3
 800329e:	4b34      	ldr	r3, [pc, #208]	; (8003370 <parse_update_VREG_data+0x2c0>)
 80032a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            _VREGS._data.INYD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 2]);
 80032a4:	4b31      	ldr	r3, [pc, #196]	; (800336c <parse_update_VREG_data+0x2bc>)
 80032a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032aa:	3303      	adds	r3, #3
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	4a2d      	ldr	r2, [pc, #180]	; (800336c <parse_update_VREG_data+0x2bc>)
 80032b6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80032ba:	3202      	adds	r2, #2
 80032bc:	6839      	ldr	r1, [r7, #0]
 80032be:	440a      	add	r2, r1
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <parse_update_VREG_data+0x2c0>)
 80032c8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
            _VREGS._data.INZD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 4]);
 80032cc:	4b27      	ldr	r3, [pc, #156]	; (800336c <parse_update_VREG_data+0x2bc>)
 80032ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032d2:	3305      	adds	r3, #5
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	4a23      	ldr	r2, [pc, #140]	; (800336c <parse_update_VREG_data+0x2bc>)
 80032de:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80032e2:	3204      	adds	r2, #4
 80032e4:	6839      	ldr	r1, [r7, #0]
 80032e6:	440a      	add	r2, r1
 80032e8:	7812      	ldrb	r2, [r2, #0]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <parse_update_VREG_data+0x2c0>)
 80032f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
            break;
 80032f4:	e0f4      	b.n	80034e0 <parse_update_VREG_data+0x430>

        case RAW_ACC_VREG_OFFSET:                                   // Raw data has been read
            
            _VREGS._data.RACXD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset]);
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <parse_update_VREG_data+0x2bc>)
 80032f8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80032fc:	3301      	adds	r3, #1
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	4413      	add	r3, r2
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	4a19      	ldr	r2, [pc, #100]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003308:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800330c:	4611      	mov	r1, r2
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	440a      	add	r2, r1
 8003312:	7812      	ldrb	r2, [r2, #0]
 8003314:	4313      	orrs	r3, r2
 8003316:	461a      	mov	r2, r3
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <parse_update_VREG_data+0x2c0>)
 800331a:	665a      	str	r2, [r3, #100]	; 0x64
            _VREGS._data.RACYD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 2]);
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <parse_update_VREG_data+0x2bc>)
 800331e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003322:	3303      	adds	r3, #3
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	4413      	add	r3, r2
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	4a0f      	ldr	r2, [pc, #60]	; (800336c <parse_update_VREG_data+0x2bc>)
 800332e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8003332:	3202      	adds	r2, #2
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	440a      	add	r2, r1
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	461a      	mov	r2, r3
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <parse_update_VREG_data+0x2c0>)
 8003340:	669a      	str	r2, [r3, #104]	; 0x68
            _VREGS._data.RACZD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 4]);
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003344:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003348:	3305      	adds	r3, #5
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	4413      	add	r3, r2
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	4a06      	ldr	r2, [pc, #24]	; (800336c <parse_update_VREG_data+0x2bc>)
 8003354:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8003358:	3204      	adds	r2, #4
 800335a:	6839      	ldr	r1, [r7, #0]
 800335c:	440a      	add	r2, r1
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	4313      	orrs	r3, r2
 8003362:	461a      	mov	r2, r3
 8003364:	4b02      	ldr	r3, [pc, #8]	; (8003370 <parse_update_VREG_data+0x2c0>)
 8003366:	66da      	str	r2, [r3, #108]	; 0x6c
            break;
 8003368:	e0ba      	b.n	80034e0 <parse_update_VREG_data+0x430>
 800336a:	bf00      	nop
 800336c:	200000c0 	.word	0x200000c0
 8003370:	20000f5c 	.word	0x20000f5c
       
        case RAW_MAG_VREG_OFFSET:                                   // Raw MAG data has been read
            
            _VREGS._data.MGFXD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset]);
 8003374:	4b5d      	ldr	r3, [pc, #372]	; (80034ec <parse_update_VREG_data+0x43c>)
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337a:	3301      	adds	r3, #1
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	4413      	add	r3, r2
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	4a59      	ldr	r2, [pc, #356]	; (80034ec <parse_update_VREG_data+0x43c>)
 8003386:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800338a:	4611      	mov	r1, r2
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	440a      	add	r2, r1
 8003390:	7812      	ldrb	r2, [r2, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4b56      	ldr	r3, [pc, #344]	; (80034f0 <parse_update_VREG_data+0x440>)
 8003398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            _VREGS._data.MGFYD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 2]);
 800339c:	4b53      	ldr	r3, [pc, #332]	; (80034ec <parse_update_VREG_data+0x43c>)
 800339e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a2:	3303      	adds	r3, #3
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	4a4f      	ldr	r2, [pc, #316]	; (80034ec <parse_update_VREG_data+0x43c>)
 80033ae:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80033b2:	3202      	adds	r2, #2
 80033b4:	6839      	ldr	r1, [r7, #0]
 80033b6:	440a      	add	r2, r1
 80033b8:	7812      	ldrb	r2, [r2, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	461a      	mov	r2, r3
 80033be:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <parse_update_VREG_data+0x440>)
 80033c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            _VREGS._data.MGFZD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 4]);
 80033c4:	4b49      	ldr	r3, [pc, #292]	; (80034ec <parse_update_VREG_data+0x43c>)
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	3305      	adds	r3, #5
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	4a45      	ldr	r2, [pc, #276]	; (80034ec <parse_update_VREG_data+0x43c>)
 80033d6:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80033da:	3204      	adds	r2, #4
 80033dc:	6839      	ldr	r1, [r7, #0]
 80033de:	440a      	add	r2, r1
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b42      	ldr	r3, [pc, #264]	; (80034f0 <parse_update_VREG_data+0x440>)
 80033e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            _VREGS._data.RMGXD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 7] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 6]);
 80033ec:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <parse_update_VREG_data+0x43c>)
 80033ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f2:	3307      	adds	r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	4a3b      	ldr	r2, [pc, #236]	; (80034ec <parse_update_VREG_data+0x43c>)
 80033fe:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8003402:	3206      	adds	r2, #6
 8003404:	6839      	ldr	r1, [r7, #0]
 8003406:	440a      	add	r2, r1
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	461a      	mov	r2, r3
 800340e:	4b38      	ldr	r3, [pc, #224]	; (80034f0 <parse_update_VREG_data+0x440>)
 8003410:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            _VREGS._data.RMGYD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 9] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 8]);
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <parse_update_VREG_data+0x43c>)
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	3309      	adds	r3, #9
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	4413      	add	r3, r2
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	4a31      	ldr	r2, [pc, #196]	; (80034ec <parse_update_VREG_data+0x43c>)
 8003426:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800342a:	3208      	adds	r2, #8
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	440a      	add	r2, r1
 8003430:	7812      	ldrb	r2, [r2, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	461a      	mov	r2, r3
 8003436:	4b2e      	ldr	r3, [pc, #184]	; (80034f0 <parse_update_VREG_data+0x440>)
 8003438:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            _VREGS._data.RMGZD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 11] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 10]);
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <parse_update_VREG_data+0x43c>)
 800343e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003442:	330b      	adds	r3, #11
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	4413      	add	r3, r2
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	4a27      	ldr	r2, [pc, #156]	; (80034ec <parse_update_VREG_data+0x43c>)
 800344e:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8003452:	320a      	adds	r2, #10
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	440a      	add	r2, r1
 8003458:	7812      	ldrb	r2, [r2, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	461a      	mov	r2, r3
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <parse_update_VREG_data+0x440>)
 8003460:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            break;
 8003464:	e03c      	b.n	80034e0 <parse_update_VREG_data+0x430>
        
        case RAW_GYR_VREG_OFFSET:                                   // Raw GYRO data has been read
            
            _VREGS._data.RGYXD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset]);
 8003466:	4b21      	ldr	r3, [pc, #132]	; (80034ec <parse_update_VREG_data+0x43c>)
 8003468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800346c:	3301      	adds	r3, #1
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4413      	add	r3, r2
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <parse_update_VREG_data+0x43c>)
 8003478:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800347c:	4611      	mov	r1, r2
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	440a      	add	r2, r1
 8003482:	7812      	ldrb	r2, [r2, #0]
 8003484:	4313      	orrs	r3, r2
 8003486:	461a      	mov	r2, r3
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <parse_update_VREG_data+0x440>)
 800348a:	67da      	str	r2, [r3, #124]	; 0x7c
            _VREGS._data.RGYYD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 2]);
 800348c:	4b17      	ldr	r3, [pc, #92]	; (80034ec <parse_update_VREG_data+0x43c>)
 800348e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003492:	3303      	adds	r3, #3
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	4413      	add	r3, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	4a13      	ldr	r2, [pc, #76]	; (80034ec <parse_update_VREG_data+0x43c>)
 800349e:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 80034a2:	3202      	adds	r2, #2
 80034a4:	6839      	ldr	r1, [r7, #0]
 80034a6:	440a      	add	r2, r1
 80034a8:	7812      	ldrb	r2, [r2, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <parse_update_VREG_data+0x440>)
 80034b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            _VREGS._data.RGYZD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 4]);
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <parse_update_VREG_data+0x43c>)
 80034b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ba:	3305      	adds	r3, #5
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	4413      	add	r3, r2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	4a09      	ldr	r2, [pc, #36]	; (80034ec <parse_update_VREG_data+0x43c>)
 80034c6:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 80034ca:	3204      	adds	r2, #4
 80034cc:	6839      	ldr	r1, [r7, #0]
 80034ce:	440a      	add	r2, r1
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <parse_update_VREG_data+0x440>)
 80034d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
 80034dc:	e000      	b.n	80034e0 <parse_update_VREG_data+0x430>

        default:
            break;
 80034de:	bf00      	nop
    }
    return;
 80034e0:	bf00      	nop
}
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	200000c0 	.word	0x200000c0
 80034f0:	20000f5c 	.word	0x20000f5c

080034f4 <HOST_SF_LIB_VREG_read>:
* @param ucRegOffset VREG register of interest
* @param usData Ptr for 16 bit value
* @return completion status 0=SUCCESS, failcodes: 0x31=HID_INT_FAIL, 0x33=VREG_OFFSET_ERR,  
*/ 
UINT8 HOST_SF_LIB_VREG_read(UINT8 ucRegOffset, UINT16 *usData)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b090      	sub	sp, #64	; 0x40
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	4603      	mov	r3, r0
 80034fc:	6039      	str	r1, [r7, #0]
 80034fe:	71fb      	strb	r3, [r7, #7]
    UINT8 ucRet = FALSE;
 8003500:	2300      	movs	r3, #0
 8003502:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    UINT8 ucRx_data[BUF_40];
    UINT8 ucSensorNum;
    UINT16 *usRegPtr;                                               // Pointer to individual register

    if (ucRegOffset > VREG_MAX_OFFSET)                              //make sure this is within the VREG register set 
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	2b3f      	cmp	r3, #63	; 0x3f
 800350a:	d901      	bls.n	8003510 <HOST_SF_LIB_VREG_read+0x1c>
        return VREG_OFFSET_ERR;
 800350c:	2333      	movs	r3, #51	; 0x33
 800350e:	e050      	b.n	80035b2 <HOST_SF_LIB_VREG_read+0xbe>

    usRegPtr = (UINT16 *)&_VREGS.SHC;                                // Set the pointer to SHC (VREG00 register)
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HOST_SF_LIB_VREG_read+0xc8>)
 8003512:	633b      	str	r3, [r7, #48]	; 0x30

    if (EC_DATA_AVAIL)                                              //SSC7150 sensor has data available for us to read
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HOST_SF_LIB_VREG_read+0xcc>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d03f      	beq.n	800359e <HOST_SF_LIB_VREG_read+0xaa>
    {       
        ucRet = i2c_cmd_WrRd (READ,                                  // Read the data from the SSC7150
 800351e:	2301      	movs	r3, #1
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	f107 0308 	add.w	r3, r7, #8
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2303      	movs	r3, #3
 800352a:	2200      	movs	r2, #0
 800352c:	2100      	movs	r1, #0
 800352e:	2002      	movs	r0, #2
 8003530:	f7fd fcbc 	bl	8000eac <i2c_cmd_WrRd>
 8003534:	4603      	mov	r3, r0
 8003536:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                            0,                                      //num of cmd bytes
                            0,                                      //cmd buf (ignored)
                            BYTE_ADJ_VAL,                           //num of bytes to read
                            ucRx_data,                              //recv buf 
                            TRUE);                                  //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"
        if (ucRet) 
 800353a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HOST_SF_LIB_VREG_read+0x52>
            return HID_INT_FAIL;
 8003542:	2331      	movs	r3, #49	; 0x31
 8003544:	e035      	b.n	80035b2 <HOST_SF_LIB_VREG_read+0xbe>

        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data 
 8003546:	2300      	movs	r3, #0
 8003548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800354c:	e023      	b.n	8003596 <HOST_SF_LIB_VREG_read+0xa2>
        {              
            if (ucRx_data[2] == SENSOR[ucSensorNum].id)          //1st two bytes of read data packet hold size of packet, then data begins at byte 2
 800354e:	7ab9      	ldrb	r1, [r7, #10]
 8003550:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003554:	481b      	ldr	r0, [pc, #108]	; (80035c4 <HOST_SF_LIB_VREG_read+0xd0>)
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	4403      	add	r3, r0
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	4299      	cmp	r1, r3
 8003562:	d113      	bne.n	800358c <HOST_SF_LIB_VREG_read+0x98>
            {
                if (*usRegPtr & (1 << (ucSensorNum + VREG_SHC_ACC_EN_VAL))) // If the incoming data belongs to an enabled sensor (in SHC (VREGS00))
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800356c:	3204      	adds	r2, #4
 800356e:	2101      	movs	r1, #1
 8003570:	fa01 f202 	lsl.w	r2, r1, r2
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HOST_SF_LIB_VREG_read+0x98>
                {
                    parse_update_VREG_data(ucSensorNum, ucRx_data); //store data in appropriate VREG data registers
 800357a:	f107 0208 	add.w	r2, r7, #8
 800357e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fd93 	bl	80030b0 <parse_update_VREG_data>
                    break;                                          //found correct enabled sensor, no reason to look further
 800358a:	e008      	b.n	800359e <HOST_SF_LIB_VREG_read+0xaa>
        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data 
 800358c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003590:	3301      	adds	r3, #1
 8003592:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800359a:	2b0b      	cmp	r3, #11
 800359c:	d9d7      	bls.n	800354e <HOST_SF_LIB_VREG_read+0x5a>
                }
            }            
        }   
    }

    usRegPtr += (UINT16) ucRegOffset;                               //point to VREG specified by input parameter 'ucRegOffset'
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a4:	4413      	add	r3, r2
 80035a6:	633b      	str	r3, [r7, #48]	; 0x30
    *usData = *usRegPtr;                                            //return the register contents specified by the read command
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	601a      	str	r2, [r3, #0]
    return SUCCESS;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3738      	adds	r7, #56	; 0x38
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000f5c 	.word	0x20000f5c
 80035c0:	20000095 	.word	0x20000095
 80035c4:	200000c0 	.word	0x200000c0

080035c8 <HOST_SF_LIB_VREG_write>:
* @param ucRegOffset VREG register of interest
* @param usData Data to be written to device
* @return completion status 0=SUCCESS, failcodes: 0x32=VREG_ACCESS_ERR, 0x33=VREG_OFFSET_ERR, 0x31=HID_INT_FAIL, 0x17=SET_FEAT_FAIL, 0x18=RESET_FAIL, 0x1E=WAKE_CMD_FAIL, 0x1B=SLEEP_CMD_FAIL 
*/ 
UINT8 HOST_SF_LIB_VREG_write(UINT8 ucRegOffset, UINT16 usData)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b094      	sub	sp, #80	; 0x50
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
    UINT8 ucRet = FALSE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    UINT16 *usRegPtr, *usStat_ptr, *usSHC_ptr;                      // Pointer to individual register
    UINT16 usMask;
    UINT8 ucRx_data[BUF_40];                                        // local buffer for i2c comm
    UINT8 ucId = 0xFF;
 80035da:	23ff      	movs	r3, #255	; 0xff
 80035dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    UINT8 ucBitOffset, ucAdjustedPtr, ucSensorNum, usTmpStatptr, ucTmpStatVal, ucTmpPtr;


    if (ucRegOffset > VREG_MAX_OFFSET)                              //make sure this is within the VREG register set 
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	2b3f      	cmp	r3, #63	; 0x3f
 80035e4:	d901      	bls.n	80035ea <HOST_SF_LIB_VREG_write+0x22>
        return VREG_OFFSET_ERR;
 80035e6:	2333      	movs	r3, #51	; 0x33
 80035e8:	e3a9      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>

    if ( (ucRegOffset == VREG_SL || (ucRegOffset >= VREG_ACXD && ucRegOffset <= VREG_EXPCSS3) ) ) // If the requested register is READ ONLY, return an error
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d005      	beq.n	80035fc <HOST_SF_LIB_VREG_write+0x34>
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	2b15      	cmp	r3, #21
 80035f4:	d904      	bls.n	8003600 <HOST_SF_LIB_VREG_write+0x38>
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	2b3e      	cmp	r3, #62	; 0x3e
 80035fa:	d801      	bhi.n	8003600 <HOST_SF_LIB_VREG_write+0x38>
         return VREG_ACCESS_ERR;
 80035fc:	2332      	movs	r3, #50	; 0x32
 80035fe:	e39e      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>

    usSHC_ptr = (UINT16 *)&_VREGS.SHC;                               // Set pointers to SHC (VREG00 register)
 8003600:	4ba9      	ldr	r3, [pc, #676]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003602:	63bb      	str	r3, [r7, #56]	; 0x38
  
    usPREV_SHC_STATE = *usSHC_ptr;                                  //save previous state of SHC VREG contents for comparison 
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4aa8      	ldr	r2, [pc, #672]	; (80038ac <HOST_SF_LIB_VREG_write+0x2e4>)
 800360a:	6013      	str	r3, [r2, #0]

    usRegPtr = usSHC_ptr + (UINT16)ucRegOffset;                     //point to VREG specified by input parameter 'ucRegOffset'
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003612:	4413      	add	r3, r2
 8003614:	637b      	str	r3, [r7, #52]	; 0x34

    if (_VREGS.SHC.SHstart)                                          // this bit set during VREG_init and after RESET (no user access to this bit)
 8003616:	4ba4      	ldr	r3, [pc, #656]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8346 	beq.w	8003cb2 <HOST_SF_LIB_VREG_write+0x6ea>
    { 
        SET_PARAMS.ucPowerState = FULL_POWER;                       //initialize parameters for SetFeature call (NOTE: set to LOW_POWER when disabling sensor)
 8003626:	4ba2      	ldr	r3, [pc, #648]	; (80038b0 <HOST_SF_LIB_VREG_write+0x2e8>)
 8003628:	2202      	movs	r2, #2
 800362a:	705a      	strb	r2, [r3, #1]
        SET_PARAMS.bSensitivityValid = FALSE;
 800362c:	4ba0      	ldr	r3, [pc, #640]	; (80038b0 <HOST_SF_LIB_VREG_write+0x2e8>)
 800362e:	2200      	movs	r2, #0
 8003630:	721a      	strb	r2, [r3, #8]
        SET_PARAMS.bDataRateValid = FALSE;
 8003632:	4b9f      	ldr	r3, [pc, #636]	; (80038b0 <HOST_SF_LIB_VREG_write+0x2e8>)
 8003634:	2200      	movs	r2, #0
 8003636:	741a      	strb	r2, [r3, #16]
        
        if (ucRegOffset == VREG_SHC)                                // If the command will be written to the SHC register
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f040 819b 	bne.w	8003976 <HOST_SF_LIB_VREG_write+0x3ae>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Set the status register pointer to the first status register
 8003640:	4b9c      	ldr	r3, [pc, #624]	; (80038b4 <HOST_SF_LIB_VREG_write+0x2ec>)
 8003642:	647b      	str	r3, [r7, #68]	; 0x44

       /*****************RESET COMMAND********************/
            if (usData & VREG_SHC_RST_BIT)                          // Reset bit has been set
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d02a      	beq.n	80036a4 <HOST_SF_LIB_VREG_write+0xdc>
            {
                if (!hid_i2c_cmd_process(0, RESET_DEV_CMD, ARB_ID)) // Issue the reset command (parameters 1 and 3 are not used)
 800364e:	2201      	movs	r2, #1
 8003650:	2101      	movs	r1, #1
 8003652:	2000      	movs	r0, #0
 8003654:	f7fe fe36 	bl	80022c4 <hid_i2c_cmd_process>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d119      	bne.n	8003692 <HOST_SF_LIB_VREG_write+0xca>
                {
                    memset(&_VREGS, 0x00, sizeof(_VREGS));            // Initialize VREG registers to POR values
 800365e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8003662:	2100      	movs	r1, #0
 8003664:	4890      	ldr	r0, [pc, #576]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003666:	f007 fa53 	bl	800ab10 <memset>
                    _VREGS.stat.stat4.ResetStatus = VREG_RST_CMD_SUCCESS; // Status update to notify command set succesful
 800366a:	4a8f      	ldr	r2, [pc, #572]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 800366c:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8003670:	2101      	movs	r1, #1
 8003672:	f361 1346 	bfi	r3, r1, #5, #2
 8003676:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
                    _VREGS.SHC.SHstart = TRUE;
 800367a:	4a8b      	ldr	r2, [pc, #556]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 800367c:	7813      	ldrb	r3, [r2, #0]
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	7013      	strb	r3, [r2, #0]
                    _VREGS.SHC.SHwake = TRUE;
 8003684:	4a88      	ldr	r2, [pc, #544]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003686:	7813      	ldrb	r3, [r2, #0]
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	7013      	strb	r3, [r2, #0]
                    return SUCCESS;                                 //return success (all VREG bits have been reset to POR values)
 800368e:	2300      	movs	r3, #0
 8003690:	e355      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>
                }
                else
                {
                    _VREGS.stat.stat4.ResetStatus = VREG_RESET_CMD_FAIL; // Status update to notify command set error occurred
 8003692:	4a85      	ldr	r2, [pc, #532]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003694:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8003698:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800369c:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
                    return RESET_FAIL;
 80036a0:	2318      	movs	r3, #24
 80036a2:	e34c      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>
                }
            }

       /*****************WAKE COMMAND********************/
            if (usData & VREG_SHC_WAKE_BIT)                         // wake bit set?
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d032      	beq.n	8003714 <HOST_SF_LIB_VREG_write+0x14c>
            {
                if ((usPREV_SHC_STATE & VREG_SHC_WAKE_BIT) == 0)    // this bit was not previously set, issue wake command
 80036ae:	4b7f      	ldr	r3, [pc, #508]	; (80038ac <HOST_SF_LIB_VREG_write+0x2e4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d12c      	bne.n	8003714 <HOST_SF_LIB_VREG_write+0x14c>
                {
                    Wake_signal();                                   //assert wake signal (1 ms toggle of RE9 signal to SSC150)
 80036ba:	f7ff fbc7 	bl	8002e4c <Wake_signal>

                    HAL_Delay(12);                                      //wait 12 ms (11 ms min per spec) after wake signal and before sending POWER_ON command to SSC7150
 80036be:	200c      	movs	r0, #12
 80036c0:	f001 f8b4 	bl	800482c <HAL_Delay>
                                        
                    if (!hid_i2c_cmd_process(0, POWER_ON, ARB_ID))  // Issue the wake command (parameters 1 and 3 are not used)
 80036c4:	2201      	movs	r2, #1
 80036c6:	2102      	movs	r1, #2
 80036c8:	2000      	movs	r0, #0
 80036ca:	f7fe fdfb 	bl	80022c4 <hid_i2c_cmd_process>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d115      	bne.n	8003700 <HOST_SF_LIB_VREG_write+0x138>
                    {
                        _VREGS.SHC.sleep = FALSE;                    //clear the sleep bit as per API spec
 80036d4:	4a74      	ldr	r2, [pc, #464]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 80036d6:	7813      	ldrb	r3, [r2, #0]
 80036d8:	f36f 0341 	bfc	r3, #1, #1
 80036dc:	7013      	strb	r3, [r2, #0]
                        _VREGS.SHC.SHwake = TRUE;
 80036de:	4a72      	ldr	r2, [pc, #456]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 80036e0:	7813      	ldrb	r3, [r2, #0]
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	7013      	strb	r3, [r2, #0]
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_WAKE_SUCCESS; // Status update to notify command set succesful
 80036e8:	4a6f      	ldr	r2, [pc, #444]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 80036ea:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 80036ee:	2102      	movs	r1, #2
 80036f0:	f361 13c9 	bfi	r3, r1, #7, #3
 80036f4:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                                                
                        //spec says must wait a minimum of 30 ms before next command to SSC7150, so let's wait here...
                        HAL_Delay(31);                                  //dDlay_ms 31 ms (30 ms min per spec)
 80036f8:	201f      	movs	r0, #31
 80036fa:	f001 f897 	bl	800482c <HAL_Delay>
 80036fe:	e009      	b.n	8003714 <HOST_SF_LIB_VREG_write+0x14c>
                    }
                    else
                    {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_WAKE_FAIL; // Status update to notify command set error occurred
 8003700:	4a69      	ldr	r2, [pc, #420]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003702:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 8003706:	2106      	movs	r1, #6
 8003708:	f361 13c9 	bfi	r3, r1, #7, #3
 800370c:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        return WAKE_CMD_FAIL;
 8003710:	231e      	movs	r3, #30
 8003712:	e314      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>
                    }
                }
            }
            
            /*****************SLEEP COMMAND********************/
            if (usData & VREG_SHC_SLP_BIT)                          //sleep bit set?
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03a      	beq.n	8003794 <HOST_SF_LIB_VREG_write+0x1cc>
            {
                //check if any sensors are enabled, if they are then CLEAR SHC Sleep bit and return without setting status bit as per API spec
                if ( (usData & ~(VREG_SHC_SLP_BIT | VREG_SHC_START_BIT) ) > (VREG_SHC_SLP_BIT | VREG_SHC_START_BIT | VREG_SHC_WAKE_BIT) )
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f023 0306 	bic.w	r3, r3, #6
 8003724:	2b07      	cmp	r3, #7
 8003726:	d906      	bls.n	8003736 <HOST_SF_LIB_VREG_write+0x16e>
                {
                    _VREGS.SHC.sleep = FALSE;
 8003728:	4a5f      	ldr	r2, [pc, #380]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 800372a:	7813      	ldrb	r3, [r2, #0]
 800372c:	f36f 0341 	bfc	r3, #1, #1
 8003730:	7013      	strb	r3, [r2, #0]
                    return SUCCESS;                                 //although the sleep command wasn't issued, don't return any error because user shouldn't issue sleep with any sensors enabled
 8003732:	2300      	movs	r3, #0
 8003734:	e303      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>
                }

                if ((usPREV_SHC_STATE & VREG_SHC_SLP_BIT) == 0)     // this bit was not previously set, issue sleep command
 8003736:	4b5d      	ldr	r3, [pc, #372]	; (80038ac <HOST_SF_LIB_VREG_write+0x2e4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d128      	bne.n	8003794 <HOST_SF_LIB_VREG_write+0x1cc>
                {
                    if (!hid_i2c_cmd_process(0, SLEEP, ARB_ID))     // Issue the sleep command (parameters 1 and 3 are not used)
 8003742:	2201      	movs	r2, #1
 8003744:	2103      	movs	r1, #3
 8003746:	2000      	movs	r0, #0
 8003748:	f7fe fdbc 	bl	80022c4 <hid_i2c_cmd_process>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d116      	bne.n	8003780 <HOST_SF_LIB_VREG_write+0x1b8>
                    {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_SLEEP_SUCCESS; // Status update to notify command set succesful
 8003752:	4a55      	ldr	r2, [pc, #340]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003754:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 8003758:	2101      	movs	r1, #1
 800375a:	f361 13c9 	bfi	r3, r1, #7, #3
 800375e:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        _VREGS.SHC.sleep = TRUE;                     // Set SHC (VREG00) to show SSC7150 device is asleep   
 8003762:	4a51      	ldr	r2, [pc, #324]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003764:	7813      	ldrb	r3, [r2, #0]
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	7013      	strb	r3, [r2, #0]
                        _VREGS.SHC.SHwake = FALSE;                   // Clear SHC (VREG00) bit that shows device is not awake
 800376c:	4a4e      	ldr	r2, [pc, #312]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 800376e:	7813      	ldrb	r3, [r2, #0]
 8003770:	f36f 0300 	bfc	r3, #0, #1
 8003774:	7013      	strb	r3, [r2, #0]
                        
                        //spec says must wait a minimum of 70 ms before wake command, so let's wait here...
                        HAL_Delay(71);                                  //dDlay_ms 71 ms (70 ms min per spec)
 8003776:	2047      	movs	r0, #71	; 0x47
 8003778:	f001 f858 	bl	800482c <HAL_Delay>
                                                
                        return SUCCESS;                             // no need to continue checking (since we already checked if any sensors were enabled) and we won't wake & sleep at the same time
 800377c:	2300      	movs	r3, #0
 800377e:	e2de      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>
                   }
                   else
                   {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_SLEEP_FAIL;  // Status update to notify command set error occurred
 8003780:	4a49      	ldr	r2, [pc, #292]	; (80038a8 <HOST_SF_LIB_VREG_write+0x2e0>)
 8003782:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 8003786:	2105      	movs	r1, #5
 8003788:	f361 13c9 	bfi	r3, r1, #7, #3
 800378c:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        return SLEEP_CMD_FAIL;
 8003790:	231b      	movs	r3, #27
 8003792:	e2d4      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>
                   }
                }
            }

        /*****************ENABLE SENSOR COMMANDS********************/
            ucTmpStatVal = 0;                                       //initialize for the case of disabling ALL sensors
 8003794:	2300      	movs	r3, #0
 8003796:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            
            for (ucBitOffset = VREG_SHC_ACC_EN_VAL; ucBitOffset <= VREG_SHC_RAWGYR_EN_VAL; ucBitOffset++) // Runs through bits relevant to sensor enable/disable (in VREG00) and executes command
 800379a:	2304      	movs	r3, #4
 800379c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80037a0:	e0de      	b.n	8003960 <HOST_SF_LIB_VREG_write+0x398>
            {
                ucAdjustedPtr = ucBitOffset;
 80037a2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80037a6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            
                if (ucBitOffset == VREG_SHC_RAWMAG_EN_VAL)          // bit 12 in VREG00 corresponds to Raw Mag. This is bit0 of VREG3D (Stat2)
 80037aa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d102      	bne.n	80037b8 <HOST_SF_LIB_VREG_write+0x1f0>
                    usStat_ptr++;                                   //  so we need to increment the status reg pointer
 80037b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b4:	3304      	adds	r3, #4
 80037b6:	647b      	str	r3, [r7, #68]	; 0x44
            
                if ( ((1 << ucBitOffset) & usData) || (usPREV_SHC_STATE & (1 << ucBitOffset)) ) //is enable bit set now OR was it previously set?
 80037b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80037bc:	2201      	movs	r2, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <HOST_SF_LIB_VREG_write+0x21c>
 80037cc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80037d0:	2201      	movs	r2, #1
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b34      	ldr	r3, [pc, #208]	; (80038ac <HOST_SF_LIB_VREG_write+0x2e4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80b9 	beq.w	8003956 <HOST_SF_LIB_VREG_write+0x38e>
                {

                    usTmpStatptr = ucBitOffset;                     // do some pre-calculation for sensor stat bit position
 80037e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80037e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

                    if (usTmpStatptr >= VREG_SHC_RAWMAG_EN_VAL)     // Set appropriate offset if the sensor falls in stat2
 80037ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80037f0:	2b0b      	cmp	r3, #11
 80037f2:	d904      	bls.n	80037fe <HOST_SF_LIB_VREG_write+0x236>
                        usTmpStatptr = ucBitOffset - 8;
 80037f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80037f8:	3b08      	subs	r3, #8
 80037fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    ucTmpStatVal = VREG_ENABLE_SUCCESS;             // success status value for VREG status reg
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


                    if ((1 << ucBitOffset) & usData)                // this sensor's enable bit is set
 8003804:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003808:	2201      	movs	r2, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	461a      	mov	r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d051      	beq.n	80038bc <HOST_SF_LIB_VREG_write+0x2f4>
                    {
                        if ((usPREV_SHC_STATE & (1 << ucBitOffset)) == 0) // this bit was not previously set, need to set this sensor to FULL_POWER      
 8003818:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800381c:	2201      	movs	r2, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	461a      	mov	r2, r3
 8003824:	4b21      	ldr	r3, [pc, #132]	; (80038ac <HOST_SF_LIB_VREG_write+0x2e4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 8093 	bne.w	8003956 <HOST_SF_LIB_VREG_write+0x38e>
                        {                           
                            SET_PARAMS.ucid = SENSOR[ucAdjustedPtr - VREG_SHC_ACC_EN_VAL].id;
 8003830:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003834:	1f1a      	subs	r2, r3, #4
 8003836:	4920      	ldr	r1, [pc, #128]	; (80038b8 <HOST_SF_LIB_VREG_write+0x2f0>)
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	440b      	add	r3, r1
 8003840:	781a      	ldrb	r2, [r3, #0]
 8003842:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <HOST_SF_LIB_VREG_write+0x2e8>)
 8003844:	701a      	strb	r2, [r3, #0]
                            
                            if (set_state_data(SET_PARAMS))         // Set this sensor to FULL POWER
 8003846:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <HOST_SF_LIB_VREG_write+0x2e8>)
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	9200      	str	r2, [sp, #0]
 800384c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800384e:	f7ff fb9f 	bl	8002f90 <set_state_data>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HOST_SF_LIB_VREG_write+0x296>
                                ucTmpStatVal = VREG_ENA_DIS_FAIL;   // Error occurred, write an error code to the sensor status register
 8003858:	2303      	movs	r3, #3
 800385a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                            *usStat_ptr &= ~(STATUS1_MASK << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); //clear stat bits before updating
 800385e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003866:	3a04      	subs	r2, #4
 8003868:	0052      	lsls	r2, r2, #1
 800386a:	2103      	movs	r1, #3
 800386c:	fa01 f202 	lsl.w	r2, r1, r2
 8003870:	43d2      	mvns	r2, r2
 8003872:	401a      	ands	r2, r3
 8003874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003876:	601a      	str	r2, [r3, #0]
                            *usStat_ptr |= (ucTmpStatVal << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL)));  // Write applicable status value to VREG status register
 8003878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8003880:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003884:	3a04      	subs	r2, #4
 8003886:	0052      	lsls	r2, r2, #1
 8003888:	fa01 f202 	lsl.w	r2, r1, r2
 800388c:	431a      	orrs	r2, r3
 800388e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003890:	601a      	str	r2, [r3, #0]
                            *usSHC_ptr |= (1 << ucBitOffset);       // Set the sensor enable bit in VREG00          
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800389a:	2101      	movs	r1, #1
 800389c:	fa01 f202 	lsl.w	r2, r1, r2
 80038a0:	431a      	orrs	r2, r3
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e056      	b.n	8003956 <HOST_SF_LIB_VREG_write+0x38e>
 80038a8:	20000f5c 	.word	0x20000f5c
 80038ac:	2000107c 	.word	0x2000107c
 80038b0:	20001068 	.word	0x20001068
 80038b4:	20001058 	.word	0x20001058
 80038b8:	200000c0 	.word	0x200000c0
                        }
                        //else if this sensor's enable bit was previously set, no need to do anything 
                    }

                    else if (usPREV_SHC_STATE & (1 << ucBitOffset)) // this sensor's enable bit is not set now, but it was enabled previously, send LOW POWER command 
 80038bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80038c0:	2201      	movs	r2, #1
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	4bac      	ldr	r3, [pc, #688]	; (8003b7c <HOST_SF_LIB_VREG_write+0x5b4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d041      	beq.n	8003956 <HOST_SF_LIB_VREG_write+0x38e>
                    {
                        ucTmpStatVal = VREG_DISABLE_SUCCESS;        //successful disable status value
 80038d2:	2302      	movs	r3, #2
 80038d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                        SET_PARAMS.ucid = SENSOR[ucAdjustedPtr - VREG_SHC_ACC_EN_VAL].id;
 80038d8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80038dc:	1f1a      	subs	r2, r3, #4
 80038de:	49a8      	ldr	r1, [pc, #672]	; (8003b80 <HOST_SF_LIB_VREG_write+0x5b8>)
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	4ba6      	ldr	r3, [pc, #664]	; (8003b84 <HOST_SF_LIB_VREG_write+0x5bc>)
 80038ec:	701a      	strb	r2, [r3, #0]
                        SET_PARAMS.ucPowerState = LOW_POWER;        //set sensor to LOW POWER
 80038ee:	4ba5      	ldr	r3, [pc, #660]	; (8003b84 <HOST_SF_LIB_VREG_write+0x5bc>)
 80038f0:	2203      	movs	r2, #3
 80038f2:	705a      	strb	r2, [r3, #1]
                        if (set_state_data(SET_PARAMS))             // Sensor should be disabled
 80038f4:	4ba3      	ldr	r3, [pc, #652]	; (8003b84 <HOST_SF_LIB_VREG_write+0x5bc>)
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	9200      	str	r2, [sp, #0]
 80038fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038fc:	f7ff fb48 	bl	8002f90 <set_state_data>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HOST_SF_LIB_VREG_write+0x344>
                            ucTmpStatVal = VREG_ENA_DIS_FAIL;       // Error occurred, write an error code to the sensor status register
 8003906:	2303      	movs	r3, #3
 8003908:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                        *usStat_ptr &= ~(STATUS1_MASK << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); //clear stat bits before updating
 800390c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003914:	3a04      	subs	r2, #4
 8003916:	0052      	lsls	r2, r2, #1
 8003918:	2103      	movs	r1, #3
 800391a:	fa01 f202 	lsl.w	r2, r1, r2
 800391e:	43d2      	mvns	r2, r2
 8003920:	401a      	ands	r2, r3
 8003922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003924:	601a      	str	r2, [r3, #0]
                        *usStat_ptr |= (ucTmpStatVal << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); // Write appropriate status value to the status register
 8003926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 800392e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003932:	3a04      	subs	r2, #4
 8003934:	0052      	lsls	r2, r2, #1
 8003936:	fa01 f202 	lsl.w	r2, r1, r2
 800393a:	431a      	orrs	r2, r3
 800393c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393e:	601a      	str	r2, [r3, #0]
                        *usSHC_ptr &= ~(1 << ucBitOffset);          // Clear the sensor enable bit in VREG00        
 8003940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f202 	lsl.w	r2, r1, r2
 800394e:	43d2      	mvns	r2, r2
 8003950:	401a      	ands	r2, r3
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	601a      	str	r2, [r3, #0]
            for (ucBitOffset = VREG_SHC_ACC_EN_VAL; ucBitOffset <= VREG_SHC_RAWGYR_EN_VAL; ucBitOffset++) // Runs through bits relevant to sensor enable/disable (in VREG00) and executes command
 8003956:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800395a:	3301      	adds	r3, #1
 800395c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8003960:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003964:	2b0d      	cmp	r3, #13
 8003966:	f67f af1c 	bls.w	80037a2 <HOST_SF_LIB_VREG_write+0x1da>
                    }
                }
            }
            
            if (ucTmpStatVal == VREG_ENA_DIS_FAIL) 
 800396a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800396e:	2b03      	cmp	r3, #3
 8003970:	d101      	bne.n	8003976 <HOST_SF_LIB_VREG_write+0x3ae>
                return SET_FEAT_FAIL;
 8003972:	2317      	movs	r3, #23
 8003974:	e1e3      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>
        }   //end of SHC register

    /*****************SENSITIVITY-CHANGE COMMAND********************/
        if (ucRegOffset >= VREG_ACSEN && ucRegOffset <= VREG_RGYSEN) // data will be written to VREG sensitivity register
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	2b01      	cmp	r3, #1
 800397a:	f240 80a1 	bls.w	8003ac0 <HOST_SF_LIB_VREG_write+0x4f8>
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	2b0b      	cmp	r3, #11
 8003982:	f200 809d 	bhi.w	8003ac0 <HOST_SF_LIB_VREG_write+0x4f8>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Reset the status register pointer to the first status register (VREG3C)
 8003986:	4b80      	ldr	r3, [pc, #512]	; (8003b88 <HOST_SF_LIB_VREG_write+0x5c0>)
 8003988:	647b      	str	r3, [r7, #68]	; 0x44
            usStat_ptr++;                                           // Increment to status register (VREG3D) for change in sensitivity (CS) stat bits
 800398a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398c:	3304      	adds	r3, #4
 800398e:	647b      	str	r3, [r7, #68]	; 0x44
        
            for (ucTmpPtr = VREG_ACSEN; ucTmpPtr <= VREG_RGYSEN; ucTmpPtr++) // Loop through the VREG sensitivity registers
 8003990:	2302      	movs	r3, #2
 8003992:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003996:	e024      	b.n	80039e2 <HOST_SF_LIB_VREG_write+0x41a>
            {
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 8003998:	79fa      	ldrb	r2, [r7, #7]
 800399a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800399e:	429a      	cmp	r2, r3
 80039a0:	d11a      	bne.n	80039d8 <HOST_SF_LIB_VREG_write+0x410>
                    (*usSHC_ptr & (1 << (ucTmpPtr + VREG_ACSEN))) )
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80039aa:	3202      	adds	r2, #2
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	4013      	ands	r3, r2
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00f      	beq.n	80039d8 <HOST_SF_LIB_VREG_write+0x410>
                {
                    ucAdjustedPtr = ucTmpPtr - VREG_ACSEN;          //offset from first sensitivity VREG
 80039b8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80039bc:	3b02      	subs	r3, #2
 80039be:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                    
                    ucId = SENSOR[ucAdjustedPtr].id;                // Set variable equal to id of current sensor
 80039c2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80039c6:	496e      	ldr	r1, [pc, #440]	; (8003b80 <HOST_SF_LIB_VREG_write+0x5b8>)
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	440b      	add	r3, r1
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                    break;
 80039d6:	e008      	b.n	80039ea <HOST_SF_LIB_VREG_write+0x422>
            for (ucTmpPtr = VREG_ACSEN; ucTmpPtr <= VREG_RGYSEN; ucTmpPtr++) // Loop through the VREG sensitivity registers
 80039d8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80039dc:	3301      	adds	r3, #1
 80039de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80039e2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80039e6:	2b0b      	cmp	r3, #11
 80039e8:	d9d6      	bls.n	8003998 <HOST_SF_LIB_VREG_write+0x3d0>
                }
            }
            
            if ((ucTmpPtr - VREG_ACSEN) < 4)                        // Sensitivity status of accel, gyro, compass, and orientation, are in VREG 0x3D (3-bits each) starting at bit 4
 80039ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d809      	bhi.n	8003a06 <HOST_SF_LIB_VREG_write+0x43e>
                ucAdjustedPtr = (3*ucAdjustedPtr) + 4;              // calculate proper ptr value
 80039f2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80039f6:	461a      	mov	r2, r3
 80039f8:	0052      	lsls	r2, r2, #1
 80039fa:	4413      	add	r3, r2
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	3304      	adds	r3, #4
 8003a00:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003a04:	e01a      	b.n	8003a3c <HOST_SF_LIB_VREG_write+0x474>
                    
            else if ((ucTmpPtr - VREG_ACSEN) >= 4 && (ucTmpPtr - VREG_ACSEN) < 9) //Sensitivity status of inclinometer, 2 reserved sensors, raw accelerometr, and raw manometer are in VREG 0x3E
 8003a06:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	d910      	bls.n	8003a30 <HOST_SF_LIB_VREG_write+0x468>
 8003a0e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003a12:	2b0a      	cmp	r3, #10
 8003a14:	d80c      	bhi.n	8003a30 <HOST_SF_LIB_VREG_write+0x468>
            {
                usStat_ptr++;                                       // point to next VREG status register (VREG3E)
 8003a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a18:	3304      	adds	r3, #4
 8003a1a:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 3 * (-(4 - (ucTmpPtr - VREG_ACSEN))); // calculate proper ptr value
 8003a1c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003a20:	461a      	mov	r2, r3
 8003a22:	0052      	lsls	r2, r2, #1
 8003a24:	4413      	add	r3, r2
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	3b12      	subs	r3, #18
 8003a2a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003a2e:	e005      	b.n	8003a3c <HOST_SF_LIB_VREG_write+0x474>
            }

            else                                                    
            {                                                       // Last sensor (raw gyrometer) is in VREG 0x3F
                usStat_ptr += 2;                                    // pointer to last VREG status register
 8003a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a32:	3308      	adds	r3, #8
 8003a34:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            SET_PARAMS.ucid = ucId;
 8003a3c:	4a51      	ldr	r2, [pc, #324]	; (8003b84 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003a3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003a42:	7013      	strb	r3, [r2, #0]
            SET_PARAMS.bSensitivityValid = TRUE;                    //update with valid sensitivity value
 8003a44:	4b4f      	ldr	r3, [pc, #316]	; (8003b84 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	721a      	strb	r2, [r3, #8]
            SET_PARAMS.usSensitivityVal = usData;
 8003a4a:	4a4e      	ldr	r2, [pc, #312]	; (8003b84 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6053      	str	r3, [r2, #4]
 
            if (set_state_data(SET_PARAMS))                         // If sensor is enabled, sensitivity register will be written to
 8003a50:	4b4c      	ldr	r3, [pc, #304]	; (8003b84 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	9200      	str	r2, [sp, #0]
 8003a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a58:	f7ff fa9a 	bl	8002f90 <set_state_data>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d016      	beq.n	8003a90 <HOST_SF_LIB_VREG_write+0x4c8>
            {
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them 
 8003a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003a6a:	2107      	movs	r1, #7
 8003a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a70:	43d2      	mvns	r2, r2
 8003a72:	401a      	ands	r2, r3
 8003a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a76:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_SENS_FAIL << ucAdjustedPtr);   // Set status bits with Update Sensitivity error (one-shot status that is only valid immediately after a VREGWrite to Sensitivity update because it is shared with Data Rate update)
 8003a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003a80:	2105      	movs	r1, #5
 8003a82:	fa01 f202 	lsl.w	r2, r1, r2
 8003a86:	431a      	orrs	r2, r3
 8003a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8a:	601a      	str	r2, [r3, #0]
                return SET_FEAT_FAIL;
 8003a8c:	2317      	movs	r3, #23
 8003a8e:	e156      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>
            }
            
            else
            {
                *usRegPtr = usData;                                 // write succesful, update new sensitivity value in sensitivity register
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	601a      	str	r2, [r3, #0]
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them            
 8003a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003a9e:	2107      	movs	r1, #7
 8003aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa4:	43d2      	mvns	r2, r2
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aaa:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_SENS_SUCCESS << ucAdjustedPtr); // set status bits with Update Sensitivity Success status (one-shot status that is only valid immediately after a VREGWrite to Sensitivity update because it is shared with Data Rate update)
 8003aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aba:	431a      	orrs	r2, r3
 8003abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003abe:	601a      	str	r2, [r3, #0]
            }
        }                                                           //end of SENSITIVITY command
    
    /*****************DATA-RATE-CHANGE COMMAND********************/
        if (ucRegOffset >= VREG_ACDXR && ucRegOffset <= VREG_RGYDR) // data will be written to VREG data rate register
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	2b0b      	cmp	r3, #11
 8003ac4:	f240 80aa 	bls.w	8003c1c <HOST_SF_LIB_VREG_write+0x654>
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	2b15      	cmp	r3, #21
 8003acc:	f200 80a6 	bhi.w	8003c1c <HOST_SF_LIB_VREG_write+0x654>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Set the status register pointer to the first status register
 8003ad0:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HOST_SF_LIB_VREG_write+0x5c0>)
 8003ad2:	647b      	str	r3, [r7, #68]	; 0x44
            usStat_ptr++;                                           // Increment to status register (VREG3D) for data rate stat bits
 8003ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	647b      	str	r3, [r7, #68]	; 0x44

            for(ucTmpPtr = VREG_ACDXR; ucTmpPtr <= VREG_RGYDR; ucTmpPtr++) // Loop through VREG data rate registers
 8003ada:	230c      	movs	r3, #12
 8003adc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003ae0:	e024      	b.n	8003b2c <HOST_SF_LIB_VREG_write+0x564>
            {
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 8003ae2:	79fa      	ldrb	r2, [r7, #7]
 8003ae4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d11a      	bne.n	8003b22 <HOST_SF_LIB_VREG_write+0x55a>
                    (*usSHC_ptr & (1 << (ucTmpPtr - 8))) )
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003af4:	3a08      	subs	r2, #8
 8003af6:	2101      	movs	r1, #1
 8003af8:	fa01 f202 	lsl.w	r2, r1, r2
 8003afc:	4013      	ands	r3, r2
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00f      	beq.n	8003b22 <HOST_SF_LIB_VREG_write+0x55a>
                {
                    ucAdjustedPtr = ucTmpPtr - VREG_ACDXR;          //offset from first data rate VREG
 8003b02:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003b06:	3b0c      	subs	r3, #12
 8003b08:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                    

                    ucId = SENSOR[ucAdjustedPtr].id;                // Set variable equal to id of current sensor
 8003b0c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003b10:	491b      	ldr	r1, [pc, #108]	; (8003b80 <HOST_SF_LIB_VREG_write+0x5b8>)
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	440b      	add	r3, r1
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                    break;
 8003b20:	e008      	b.n	8003b34 <HOST_SF_LIB_VREG_write+0x56c>
            for(ucTmpPtr = VREG_ACDXR; ucTmpPtr <= VREG_RGYDR; ucTmpPtr++) // Loop through VREG data rate registers
 8003b22:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003b26:	3301      	adds	r3, #1
 8003b28:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003b2c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003b30:	2b15      	cmp	r3, #21
 8003b32:	d9d6      	bls.n	8003ae2 <HOST_SF_LIB_VREG_write+0x51a>
                }
            }
            
            if ((ucTmpPtr - VREG_ACDXR) < 4)                        // Data rate status of accel, gyro, compass, and orientation, are in VREG 0x3D (3-bits each) starting at bit 4
 8003b34:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003b38:	2b0f      	cmp	r3, #15
 8003b3a:	d809      	bhi.n	8003b50 <HOST_SF_LIB_VREG_write+0x588>
                ucAdjustedPtr = (3*ucAdjustedPtr) + 4;              // calculate proper ptr value
 8003b3c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003b40:	461a      	mov	r2, r3
 8003b42:	0052      	lsls	r2, r2, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3304      	adds	r3, #4
 8003b4a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003b4e:	e023      	b.n	8003b98 <HOST_SF_LIB_VREG_write+0x5d0>
                
            else if ((ucTmpPtr - VREG_ACDXR) >= 4 && (ucTmpPtr - VREG_ACDXR) < 9) //Data rate status of inclinometer, 2 reserved sensors, raw accelerometr, and raw manometer are found in VREG 0x3E
 8003b50:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003b54:	2b0f      	cmp	r3, #15
 8003b56:	d919      	bls.n	8003b8c <HOST_SF_LIB_VREG_write+0x5c4>
 8003b58:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003b5c:	2b14      	cmp	r3, #20
 8003b5e:	d815      	bhi.n	8003b8c <HOST_SF_LIB_VREG_write+0x5c4>
            {
                usStat_ptr++;                                       // point to next VREG status register
 8003b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b62:	3304      	adds	r3, #4
 8003b64:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 3 * (-(4 - (ucTmpPtr - VREG_ACDXR))); // calculate proper ptr value
 8003b66:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	0052      	lsls	r2, r2, #1
 8003b6e:	4413      	add	r3, r2
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	3b30      	subs	r3, #48	; 0x30
 8003b74:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003b78:	e00e      	b.n	8003b98 <HOST_SF_LIB_VREG_write+0x5d0>
 8003b7a:	bf00      	nop
 8003b7c:	2000107c 	.word	0x2000107c
 8003b80:	200000c0 	.word	0x200000c0
 8003b84:	20001068 	.word	0x20001068
 8003b88:	20001058 	.word	0x20001058
            }
              
            else            
            {                                                       // Last sensor (raw gyrometer) is in VREG 0x3F
                usStat_ptr += 2;                                    // pointer to last VREG status register
 8003b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8e:	3308      	adds	r3, #8
 8003b90:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }
                
            SET_PARAMS.ucid = ucId;
 8003b98:	4a6b      	ldr	r2, [pc, #428]	; (8003d48 <HOST_SF_LIB_VREG_write+0x780>)
 8003b9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003b9e:	7013      	strb	r3, [r2, #0]
            SET_PARAMS.bDataRateValid = TRUE;                       //update sensor with valid data rate value
 8003ba0:	4b69      	ldr	r3, [pc, #420]	; (8003d48 <HOST_SF_LIB_VREG_write+0x780>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	741a      	strb	r2, [r3, #16]
            SET_PARAMS.usDataRateVal = usData;
 8003ba6:	4a68      	ldr	r2, [pc, #416]	; (8003d48 <HOST_SF_LIB_VREG_write+0x780>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	60d3      	str	r3, [r2, #12]
            
            if (set_state_data(SET_PARAMS))                         // If sensor is enabled, data rate register will be written to
 8003bac:	4b66      	ldr	r3, [pc, #408]	; (8003d48 <HOST_SF_LIB_VREG_write+0x780>)
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	9200      	str	r2, [sp, #0]
 8003bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bb4:	f7ff f9ec 	bl	8002f90 <set_state_data>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HOST_SF_LIB_VREG_write+0x624>
            {
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them   
 8003bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003bc6:	2107      	movs	r1, #7
 8003bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bcc:	43d2      	mvns	r2, r2
 8003bce:	401a      	ands	r2, r3
 8003bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd2:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_DATARATE_FAIL << ucAdjustedPtr); // Update status bits with error (one-shot status that is only valid immediately after a VREGWrite to Data Rate update because it is shared with Sensitivity update)
 8003bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003bdc:	2106      	movs	r1, #6
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	431a      	orrs	r2, r3
 8003be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be6:	601a      	str	r2, [r3, #0]
                return SET_FEAT_FAIL;
 8003be8:	2317      	movs	r3, #23
 8003bea:	e0a8      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>
            }
            
            else
            {
                *usRegPtr = usData;                                 // write succesful, update new sensitivity value in sensitivity register
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	601a      	str	r2, [r3, #0]
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them    
 8003bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003bfa:	2107      	movs	r1, #7
 8003bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003c00:	43d2      	mvns	r2, r2
 8003c02:	401a      	ands	r2, r3
 8003c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c06:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_DATARATE_SUCCESS << ucAdjustedPtr); // Update status bits with success status (one-shot status that is only valid immediately after a VREGWrite to Data Rate update because it is shared with Sensitivity update)
 8003c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003c10:	2102      	movs	r1, #2
 8003c12:	fa01 f202 	lsl.w	r2, r1, r2
 8003c16:	431a      	orrs	r2, r3
 8003c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1a:	601a      	str	r2, [r3, #0]
            }
        }                                                           //end of DATA_RATE command

    /*****************STATUS-BIT-CLEAR COMMAND********************/
        if (ucRegOffset >= VREG_STAT1 && ucRegOffset <= VREG_STAT4) // offset is in status registers field
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c20:	d947      	bls.n	8003cb2 <HOST_SF_LIB_VREG_write+0x6ea>
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	2b42      	cmp	r3, #66	; 0x42
 8003c26:	d844      	bhi.n	8003cb2 <HOST_SF_LIB_VREG_write+0x6ea>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Reset the status register pointer to the first status register
 8003c28:	4b48      	ldr	r3, [pc, #288]	; (8003d4c <HOST_SF_LIB_VREG_write+0x784>)
 8003c2a:	647b      	str	r3, [r7, #68]	; 0x44
                
            for (ucTmpPtr = 0; ucTmpPtr < 8; ucTmpPtr++)            //validate current status field = enable_disable_failed
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003c32:	e03a      	b.n	8003caa <HOST_SF_LIB_VREG_write+0x6e2>
            {
                usMask = (VREG_ENA_DIS_FAIL << (ucTmpPtr * 2) );    //mask individual sensor status fields
 8003c34:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	633b      	str	r3, [r7, #48]	; 0x30
                if ( ( usData & usMask) == 0 )                      //clear these stat bits from input data if valid fields exist in status register
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d129      	bne.n	8003ca0 <HOST_SF_LIB_VREG_write+0x6d8>
                {
                    if ( ucRegOffset == VREG_STAT1)                 //all 8 sensor status fields are valid for possilbe update
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	2b3f      	cmp	r3, #63	; 0x3f
 8003c50:	d10e      	bne.n	8003c70 <HOST_SF_LIB_VREG_write+0x6a8>
                    {
                        if (( *usStat_ptr & usMask) == usMask )     //valid status field contents
 8003c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	4013      	ands	r3, r2
 8003c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d11f      	bne.n	8003ca0 <HOST_SF_LIB_VREG_write+0x6d8>
                        {
                            *usStat_ptr &= ~usMask;                 //clear these two bits of status field preserving the rest of the register
 8003c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	43db      	mvns	r3, r3
 8003c68:	401a      	ands	r2, r3
 8003c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e017      	b.n	8003ca0 <HOST_SF_LIB_VREG_write+0x6d8>
                        }
                    }
                    else if ((ucRegOffset == VREG_STAT2) && (ucTmpPtr < 2)) // only 1st two status fields of VREG_STAT2 are valid for possible update
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d114      	bne.n	8003ca0 <HOST_SF_LIB_VREG_write+0x6d8>
 8003c76:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d810      	bhi.n	8003ca0 <HOST_SF_LIB_VREG_write+0x6d8>
                    {
                        if (( *(usStat_ptr+1) & usMask) == usMask ) //valid status field contents
 8003c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c80:	3304      	adds	r3, #4
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	4013      	ands	r3, r2
 8003c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d108      	bne.n	8003ca0 <HOST_SF_LIB_VREG_write+0x6d8>
                        {
                            *(usStat_ptr+1) &= ~usMask;             //clear these two bits of status field preserving the rest of the register
 8003c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c90:	3304      	adds	r3, #4
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	43da      	mvns	r2, r3
 8003c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
            for (ucTmpPtr = 0; ucTmpPtr < 8; ucTmpPtr++)            //validate current status field = enable_disable_failed
 8003ca0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003caa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003cae:	2b07      	cmp	r3, #7
 8003cb0:	d9c0      	bls.n	8003c34 <HOST_SF_LIB_VREG_write+0x66c>
                }
            }
        }
    }

    if (EC_DATA_AVAIL)                                              // Check if the device has new data
 8003cb2:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <HOST_SF_LIB_VREG_write+0x788>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d03f      	beq.n	8003d3c <HOST_SF_LIB_VREG_write+0x774>
    {                                                              
         ucRet = i2c_cmd_WrRd (READ,                                // Read the data from the SSC7150
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	f107 0308 	add.w	r3, r7, #8
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2100      	movs	r1, #0
 8003ccc:	2002      	movs	r0, #2
 8003cce:	f7fd f8ed 	bl	8000eac <i2c_cmd_WrRd>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                            0,                                      //cmd buf (ignored)
                            BYTE_ADJ_VAL,                           //num of bytes to read
                            ucRx_data,                              //recv buf 
                            TRUE);                                  //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

       if (ucRet) 
 8003cd8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HOST_SF_LIB_VREG_write+0x71c>
           return HID_INT_FAIL;
 8003ce0:	2331      	movs	r3, #49	; 0x31
 8003ce2:	e02c      	b.n	8003d3e <HOST_SF_LIB_VREG_write+0x776>

        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8003cea:	e023      	b.n	8003d34 <HOST_SF_LIB_VREG_write+0x76c>
        {          
            if (ucRx_data[2] == SENSOR[ucSensorNum].id)           //1st two bytes of read data packet hold size of packet, then data begins at byte 2
 8003cec:	7ab9      	ldrb	r1, [r7, #10]
 8003cee:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003cf2:	4818      	ldr	r0, [pc, #96]	; (8003d54 <HOST_SF_LIB_VREG_write+0x78c>)
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	4403      	add	r3, r0
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	d113      	bne.n	8003d2a <HOST_SF_LIB_VREG_write+0x762>
            {
                if (*usSHC_ptr & (1 << (ucTmpPtr + VREG_SHC_ACC_EN_VAL))) // If the incoming data belongs to an enabled sensor, store it in VREG data registers
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d0a:	3204      	adds	r2, #4
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HOST_SF_LIB_VREG_write+0x762>
                { 
                    parse_update_VREG_data(ucSensorNum, ucRx_data);
 8003d18:	f107 0208 	add.w	r2, r7, #8
 8003d1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff f9c4 	bl	80030b0 <parse_update_VREG_data>
                    break;
 8003d28:	e008      	b.n	8003d3c <HOST_SF_LIB_VREG_write+0x774>
        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data
 8003d2a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003d2e:	3301      	adds	r3, #1
 8003d30:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8003d34:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003d38:	2b0b      	cmp	r3, #11
 8003d3a:	d9d7      	bls.n	8003cec <HOST_SF_LIB_VREG_write+0x724>
                }
            }
        }
    }
    
    return SUCCESS;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3748      	adds	r7, #72	; 0x48
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20001068 	.word	0x20001068
 8003d4c:	20001058 	.word	0x20001058
 8003d50:	20000095 	.word	0x20000095
 8003d54:	200000c0 	.word	0x200000c0

08003d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d5c:	f000 fd2d 	bl	80047ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d60:	f000 f83a 	bl	8003dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d64:	f000 f9aa 	bl	80040bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003d68:	f000 f978 	bl	800405c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003d6c:	f000 f896 	bl	8003e9c <MX_I2C1_Init>
  MX_TIM2_Init();
 8003d70:	f000 f8d4 	bl	8003f1c <MX_TIM2_Init>
  MX_TIM15_Init();
 8003d74:	f000 f920 	bl	8003fb8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003d78:	f004 f914 	bl	8007fa4 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of inputTask */
  inputTaskHandle = osThreadNew(StartInputTask, NULL, &inputTask_attributes);
 8003d7c:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <main+0x5c>)
 8003d7e:	2100      	movs	r1, #0
 8003d80:	480d      	ldr	r0, [pc, #52]	; (8003db8 <main+0x60>)
 8003d82:	f004 f959 	bl	8008038 <osThreadNew>
 8003d86:	4603      	mov	r3, r0
 8003d88:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <main+0x64>)
 8003d8a:	6013      	str	r3, [r2, #0]

  /* creation of processTask */
  processTaskHandle = osThreadNew(StartProcessTask, NULL, &processTask_attributes);
 8003d8c:	4a0c      	ldr	r2, [pc, #48]	; (8003dc0 <main+0x68>)
 8003d8e:	2100      	movs	r1, #0
 8003d90:	480c      	ldr	r0, [pc, #48]	; (8003dc4 <main+0x6c>)
 8003d92:	f004 f951 	bl	8008038 <osThreadNew>
 8003d96:	4603      	mov	r3, r0
 8003d98:	4a0b      	ldr	r2, [pc, #44]	; (8003dc8 <main+0x70>)
 8003d9a:	6013      	str	r3, [r2, #0]

  /* creation of outputTask */
  outputTaskHandle = osThreadNew(StartOutputTask, NULL, &outputTask_attributes);
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <main+0x74>)
 8003d9e:	2100      	movs	r1, #0
 8003da0:	480b      	ldr	r0, [pc, #44]	; (8003dd0 <main+0x78>)
 8003da2:	f004 f949 	bl	8008038 <osThreadNew>
 8003da6:	4603      	mov	r3, r0
 8003da8:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <main+0x7c>)
 8003daa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003dac:	f004 f91e 	bl	8007fec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003db0:	e7fe      	b.n	8003db0 <main+0x58>
 8003db2:	bf00      	nop
 8003db4:	0800c3a0 	.word	0x0800c3a0
 8003db8:	08004205 	.word	0x08004205
 8003dbc:	200011f0 	.word	0x200011f0
 8003dc0:	0800c3c4 	.word	0x0800c3c4
 8003dc4:	08004275 	.word	0x08004275
 8003dc8:	200011f4 	.word	0x200011f4
 8003dcc:	0800c3e8 	.word	0x0800c3e8
 8003dd0:	08004287 	.word	0x08004287
 8003dd4:	200011f8 	.word	0x200011f8

08003dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b096      	sub	sp, #88	; 0x58
 8003ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dde:	f107 0314 	add.w	r3, r7, #20
 8003de2:	2244      	movs	r2, #68	; 0x44
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f006 fe92 	bl	800ab10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dec:	463b      	mov	r3, r7
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003dfa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003dfe:	f001 fda9 	bl	8005954 <HAL_PWREx_ControlVoltageScaling>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003e08:	f000 fa7a 	bl	8004300 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003e0c:	f001 fd84 	bl	8005918 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003e10:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <SystemClock_Config+0xc0>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	4a20      	ldr	r2, [pc, #128]	; (8003e98 <SystemClock_Config+0xc0>)
 8003e18:	f023 0318 	bic.w	r3, r3, #24
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003e20:	2314      	movs	r3, #20
 8003e22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003e24:	2301      	movs	r3, #1
 8003e26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003e30:	2360      	movs	r3, #96	; 0x60
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e34:	2302      	movs	r3, #2
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003e40:	2328      	movs	r3, #40	; 0x28
 8003e42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003e44:	2307      	movs	r3, #7
 8003e46:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e50:	f107 0314 	add.w	r3, r7, #20
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 fdd3 	bl	8005a00 <HAL_RCC_OscConfig>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003e60:	f000 fa4e 	bl	8004300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e64:	230f      	movs	r3, #15
 8003e66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003e78:	463b      	mov	r3, r7
 8003e7a:	2104      	movs	r1, #4
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f002 f9d3 	bl	8006228 <HAL_RCC_ClockConfig>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003e88:	f000 fa3a 	bl	8004300 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003e8c:	f002 fe18 	bl	8006ac0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003e90:	bf00      	nop
 8003e92:	3758      	adds	r7, #88	; 0x58
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000

08003e9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	; (8003f14 <MX_I2C1_Init+0x78>)
 8003ea4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <MX_I2C1_Init+0x7c>)
 8003eaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003eac:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003eb2:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003eb8:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ebe:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ec4:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003eca:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ed6:	480e      	ldr	r0, [pc, #56]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003ed8:	f000 ff7a 	bl	8004dd0 <HAL_I2C_Init>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ee2:	f000 fa0d 	bl	8004300 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4809      	ldr	r0, [pc, #36]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003eea:	f001 fc7d 	bl	80057e8 <HAL_I2CEx_ConfigAnalogFilter>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ef4:	f000 fa04 	bl	8004300 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4805      	ldr	r0, [pc, #20]	; (8003f10 <MX_I2C1_Init+0x74>)
 8003efc:	f001 fcbf 	bl	800587e <HAL_I2CEx_ConfigDigitalFilter>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003f06:	f000 f9fb 	bl	8004300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20001080 	.word	0x20001080
 8003f14:	40005400 	.word	0x40005400
 8003f18:	00702991 	.word	0x00702991

08003f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f22:	f107 0310 	add.w	r3, r7, #16
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f30:	1d3b      	adds	r3, r7, #4
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	605a      	str	r2, [r3, #4]
 8003f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003f42:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000000;
 8003f4e:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f50:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <MX_TIM2_Init+0x98>)
 8003f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f54:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f60:	4813      	ldr	r0, [pc, #76]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f62:	f002 feaf 	bl	8006cc4 <HAL_TIM_Base_Init>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003f6c:	f000 f9c8 	bl	8004300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f76:	f107 0310 	add.w	r3, r7, #16
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	480c      	ldr	r0, [pc, #48]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f7e:	f003 f89b 	bl	80070b8 <HAL_TIM_ConfigClockSource>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003f88:	f000 f9ba 	bl	8004300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	4805      	ldr	r0, [pc, #20]	; (8003fb0 <MX_TIM2_Init+0x94>)
 8003f9a:	f003 fa7d 	bl	8007498 <HAL_TIMEx_MasterConfigSynchronization>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003fa4:	f000 f9ac 	bl	8004300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003fa8:	bf00      	nop
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200010d4 	.word	0x200010d4
 8003fb4:	04c4b400 	.word	0x04c4b400

08003fb8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fbe:	f107 0310 	add.w	r3, r7, #16
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003fd6:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <MX_TIM15_Init+0x9c>)
 8003fd8:	4a1f      	ldr	r2, [pc, #124]	; (8004058 <MX_TIM15_Init+0xa0>)
 8003fda:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <MX_TIM15_Init+0x9c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <MX_TIM15_Init+0x9c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 40000;
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <MX_TIM15_Init+0x9c>)
 8003fea:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003fee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <MX_TIM15_Init+0x9c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003ff6:	4b17      	ldr	r3, [pc, #92]	; (8004054 <MX_TIM15_Init+0x9c>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ffc:	4b15      	ldr	r3, [pc, #84]	; (8004054 <MX_TIM15_Init+0x9c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004002:	4814      	ldr	r0, [pc, #80]	; (8004054 <MX_TIM15_Init+0x9c>)
 8004004:	f002 fe5e 	bl	8006cc4 <HAL_TIM_Base_Init>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800400e:	f000 f977 	bl	8004300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004016:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004018:	f107 0310 	add.w	r3, r7, #16
 800401c:	4619      	mov	r1, r3
 800401e:	480d      	ldr	r0, [pc, #52]	; (8004054 <MX_TIM15_Init+0x9c>)
 8004020:	f003 f84a 	bl	80070b8 <HAL_TIM_ConfigClockSource>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800402a:	f000 f969 	bl	8004300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800402e:	2300      	movs	r3, #0
 8004030:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4806      	ldr	r0, [pc, #24]	; (8004054 <MX_TIM15_Init+0x9c>)
 800403c:	f003 fa2c 	bl	8007498 <HAL_TIMEx_MasterConfigSynchronization>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8004046:	f000 f95b 	bl	8004300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800404a:	bf00      	nop
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20001120 	.word	0x20001120
 8004058:	40014000 	.word	0x40014000

0800405c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004060:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <MX_USART2_UART_Init+0x58>)
 8004062:	4a15      	ldr	r2, [pc, #84]	; (80040b8 <MX_USART2_UART_Init+0x5c>)
 8004064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004066:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <MX_USART2_UART_Init+0x58>)
 8004068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800406c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <MX_USART2_UART_Init+0x58>)
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <MX_USART2_UART_Init+0x58>)
 8004076:	2200      	movs	r2, #0
 8004078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800407a:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <MX_USART2_UART_Init+0x58>)
 800407c:	2200      	movs	r2, #0
 800407e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <MX_USART2_UART_Init+0x58>)
 8004082:	220c      	movs	r2, #12
 8004084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <MX_USART2_UART_Init+0x58>)
 8004088:	2200      	movs	r2, #0
 800408a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <MX_USART2_UART_Init+0x58>)
 800408e:	2200      	movs	r2, #0
 8004090:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <MX_USART2_UART_Init+0x58>)
 8004094:	2200      	movs	r2, #0
 8004096:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <MX_USART2_UART_Init+0x58>)
 800409a:	2200      	movs	r2, #0
 800409c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800409e:	4805      	ldr	r0, [pc, #20]	; (80040b4 <MX_USART2_UART_Init+0x58>)
 80040a0:	f003 fa7e 	bl	80075a0 <HAL_UART_Init>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80040aa:	f000 f929 	bl	8004300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000116c 	.word	0x2000116c
 80040b8:	40004400 	.word	0x40004400

080040bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c2:	f107 030c 	add.w	r3, r7, #12
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	609a      	str	r2, [r3, #8]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040d2:	4b34      	ldr	r3, [pc, #208]	; (80041a4 <MX_GPIO_Init+0xe8>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	4a33      	ldr	r2, [pc, #204]	; (80041a4 <MX_GPIO_Init+0xe8>)
 80040d8:	f043 0304 	orr.w	r3, r3, #4
 80040dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040de:	4b31      	ldr	r3, [pc, #196]	; (80041a4 <MX_GPIO_Init+0xe8>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ea:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <MX_GPIO_Init+0xe8>)
 80040ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ee:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <MX_GPIO_Init+0xe8>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040f6:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <MX_GPIO_Init+0xe8>)
 80040f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004102:	4b28      	ldr	r3, [pc, #160]	; (80041a4 <MX_GPIO_Init+0xe8>)
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	4a27      	ldr	r2, [pc, #156]	; (80041a4 <MX_GPIO_Init+0xe8>)
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800410e:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <MX_GPIO_Init+0xe8>)
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTION_CLICK_WAKE_Pin|RGB_LED_GREEN_Pin, GPIO_PIN_RESET);
 800411a:	2200      	movs	r2, #0
 800411c:	f240 1101 	movw	r1, #257	; 0x101
 8004120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004124:	f000 fe0a 	bl	8004d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004128:	2200      	movs	r2, #0
 800412a:	2108      	movs	r1, #8
 800412c:	481e      	ldr	r0, [pc, #120]	; (80041a8 <MX_GPIO_Init+0xec>)
 800412e:	f000 fe05 	bl	8004d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTION_CLICK_WAKE_Pin RGB_LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MOTION_CLICK_WAKE_Pin|RGB_LED_GREEN_Pin;
 8004132:	f240 1301 	movw	r3, #257	; 0x101
 8004136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004138:	2301      	movs	r3, #1
 800413a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	4619      	mov	r1, r3
 800414a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800414e:	f000 fc73 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTION_CLICK_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = MOTION_CLICK_INTERRUPT_Pin;
 8004152:	2308      	movs	r3, #8
 8004154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004156:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800415a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800415c:	2301      	movs	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTION_CLICK_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8004160:	f107 030c 	add.w	r3, r7, #12
 8004164:	4619      	mov	r1, r3
 8004166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800416a:	f000 fc65 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800416e:	2308      	movs	r3, #8
 8004170:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004172:	2301      	movs	r3, #1
 8004174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800417e:	f107 030c 	add.w	r3, r7, #12
 8004182:	4619      	mov	r1, r3
 8004184:	4808      	ldr	r0, [pc, #32]	; (80041a8 <MX_GPIO_Init+0xec>)
 8004186:	f000 fc57 	bl	8004a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800418a:	2200      	movs	r2, #0
 800418c:	2105      	movs	r1, #5
 800418e:	2009      	movs	r0, #9
 8004190:	f000 fc28 	bl	80049e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004194:	2009      	movs	r0, #9
 8004196:	f000 fc41 	bl	8004a1c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800419a:	bf00      	nop
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40021000 	.word	0x40021000
 80041a8:	48000400 	.word	0x48000400

080041ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	80fb      	strh	r3, [r7, #6]
  // Check if the interrupt comes from PA3
  if (GPIO_Pin == GPIO_PIN_3)
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d11c      	bne.n	80041f6 <HAL_GPIO_EXTI_Callback+0x4a>
  {
    // Toggle the LED

    GPIO_PinState PinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80041bc:	2108      	movs	r1, #8
 80041be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041c2:	f000 fda3 	bl	8004d0c <HAL_GPIO_ReadPin>
 80041c6:	4603      	mov	r3, r0
 80041c8:	73fb      	strb	r3, [r7, #15]

        if (PinState == GPIO_PIN_SET) {
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d109      	bne.n	80041e4 <HAL_GPIO_EXTI_Callback+0x38>
          // If the pin is set, the interrupt was caused by a rising edge
        	EC_DATA_AVAIL = TRUE;
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_GPIO_EXTI_Callback+0x54>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80041d6:	2201      	movs	r2, #1
 80041d8:	2120      	movs	r1, #32
 80041da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041de:	f000 fdad 	bl	8004d3c <HAL_GPIO_WritePin>
        	EC_DATA_AVAIL = FALSE;
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
        }

  }
}
 80041e2:	e008      	b.n	80041f6 <HAL_GPIO_EXTI_Callback+0x4a>
        	EC_DATA_AVAIL = FALSE;
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <HAL_GPIO_EXTI_Callback+0x54>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80041ea:	2201      	movs	r2, #1
 80041ec:	2120      	movs	r1, #32
 80041ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041f2:	f000 fda3 	bl	8004d3c <HAL_GPIO_WritePin>
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000095 	.word	0x20000095

08004204 <StartInputTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInputTask */
void StartInputTask(void *argument)
{
 8004204:	b5b0      	push	{r4, r5, r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

		/* TODO: REWRITE FOR OUR CONTROLLER and delete unnecessary stuff */

		Wake_signal();
 800420c:	f7fe fe1e 	bl	8002e4c <Wake_signal>
	  result = VREG_init();                // Initialize VREG registers
 8004210:	f7fe fe30 	bl	8002e74 <VREG_init>
 8004214:	4603      	mov	r3, r0
 8004216:	461a      	mov	r2, r3
 8004218:	4b13      	ldr	r3, [pc, #76]	; (8004268 <StartInputTask+0x64>)
 800421a:	701a      	strb	r2, [r3, #0]


	  /* function pointer to functions getting specific sensor data */
	  void (*fp_SensorDatas[])() = {
 800421c:	4b13      	ldr	r3, [pc, #76]	; (800426c <StartInputTask+0x68>)
 800421e:	f107 0408 	add.w	r4, r7, #8
 8004222:	461d      	mov	r5, r3
 8004224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004228:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800422c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	      _rawAccel, _rawGyro, _rawMagnet, _accel, _compass, _inclin, _orient
	  };

	  /* Infinite loop */
	  for (size_t i = 0; ; ++i)
 8004230:	2300      	movs	r3, #0
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
	  {
	      (*fp_SensorDatas[i%7])();  // Note: array has 7 elements, not 8
 8004234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004236:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <StartInputTask+0x6c>)
 8004238:	fba3 2301 	umull	r2, r3, r3, r1
 800423c:	1aca      	subs	r2, r1, r3
 800423e:	0852      	lsrs	r2, r2, #1
 8004240:	4413      	add	r3, r2
 8004242:	089a      	lsrs	r2, r3, #2
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	1aca      	subs	r2, r1, r3
 800424c:	0093      	lsls	r3, r2, #2
 800424e:	3328      	adds	r3, #40	; 0x28
 8004250:	443b      	add	r3, r7
 8004252:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004256:	4798      	blx	r3
	      osDelay(3000);
 8004258:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800425c:	f003 ff7e 	bl	800815c <osDelay>
	  for (size_t i = 0; ; ++i)
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	3301      	adds	r3, #1
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
	      (*fp_SensorDatas[i%7])();  // Note: array has 7 elements, not 8
 8004266:	e7e5      	b.n	8004234 <StartInputTask+0x30>
 8004268:	200011fc 	.word	0x200011fc
 800426c:	0800c36c 	.word	0x0800c36c
 8004270:	24924925 	.word	0x24924925

08004274 <StartProcessTask>:
	 * @param argument: Not used
	 * @retval None
	 */
/* USER CODE END Header_StartProcessTask */
void StartProcessTask(void *argument)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessTask */
		/* Infinite loop */
		for (;;) {
			osDelay(1000);
 800427c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004280:	f003 ff6c 	bl	800815c <osDelay>
 8004284:	e7fa      	b.n	800427c <StartProcessTask+0x8>

08004286 <StartOutputTask>:
	 * @param argument: Not used
	 * @retval None
	 */
/* USER CODE END Header_StartOutputTask */
void StartOutputTask(void *argument)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOutputTask */

		/* Infinite loop */
		for (;;) {

			osDelay(1000);
 800428e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004292:	f003 ff63 	bl	800815c <osDelay>
 8004296:	e7fa      	b.n	800428e <StartOutputTask+0x8>

08004298 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80042aa:	f000 fa9f 	bl	80047ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM2)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d10e      	bne.n	80042d6 <HAL_TIM_PeriodElapsedCallback+0x3e>
   {
 	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80042b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042c0:	f000 fd54 	bl	8004d6c <HAL_GPIO_TogglePin>

 	 I2C_TIMEOUT_1MS_CNTR++;
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80042d0:	701a      	strb	r2, [r3, #0]

 	  if (I2C_TIMEOUT_1MS_CNTR >= I2_TIMEOUT_PERIOD)
 80042d2:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 	      StopI2CTimer();                                               // turn off timer
 	      error_handler("i2c ",0, I2C_TIMEOUT_ERR);                     // displays to LCD and uart **does not return***
 	  }
   }

  if(htim->Instance == TIM15) {
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a07      	ldr	r2, [pc, #28]	; (80042f8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d102      	bne.n	80042e6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	  TIMER_1MS_FLG = 1;
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40014400 	.word	0x40014400
 80042f4:	20000098 	.word	0x20000098
 80042f8:	40014000 	.word	0x40014000
 80042fc:	20000094 	.word	0x20000094

08004300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004304:	b672      	cpsid	i
}
 8004306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8004308:	e7fe      	b.n	8004308 <Error_Handler+0x8>
	...

0800430c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <HAL_MspInit+0x4c>)
 8004314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004316:	4a10      	ldr	r2, [pc, #64]	; (8004358 <HAL_MspInit+0x4c>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6613      	str	r3, [r2, #96]	; 0x60
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <HAL_MspInit+0x4c>)
 8004320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_MspInit+0x4c>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432e:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <HAL_MspInit+0x4c>)
 8004330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004334:	6593      	str	r3, [r2, #88]	; 0x58
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <HAL_MspInit+0x4c>)
 8004338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004342:	2200      	movs	r2, #0
 8004344:	210f      	movs	r1, #15
 8004346:	f06f 0001 	mvn.w	r0, #1
 800434a:	f000 fb4b 	bl	80049e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000

0800435c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b09e      	sub	sp, #120	; 0x78
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004374:	f107 0310 	add.w	r3, r7, #16
 8004378:	2254      	movs	r2, #84	; 0x54
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f006 fbc7 	bl	800ab10 <memset>
  if(hi2c->Instance==I2C1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a22      	ldr	r2, [pc, #136]	; (8004410 <HAL_I2C_MspInit+0xb4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d13d      	bne.n	8004408 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800438c:	2340      	movs	r3, #64	; 0x40
 800438e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004390:	2300      	movs	r3, #0
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004394:	f107 0310 	add.w	r3, r7, #16
 8004398:	4618      	mov	r0, r3
 800439a:	f002 f99b 	bl	80066d4 <HAL_RCCEx_PeriphCLKConfig>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80043a4:	f7ff ffac 	bl	8004300 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_I2C_MspInit+0xb8>)
 80043aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ac:	4a19      	ldr	r2, [pc, #100]	; (8004414 <HAL_I2C_MspInit+0xb8>)
 80043ae:	f043 0302 	orr.w	r3, r3, #2
 80043b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <HAL_I2C_MspInit+0xb8>)
 80043b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043c0:	23c0      	movs	r3, #192	; 0xc0
 80043c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043c4:	2312      	movs	r3, #18
 80043c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043cc:	2303      	movs	r3, #3
 80043ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80043d0:	2304      	movs	r3, #4
 80043d2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80043d8:	4619      	mov	r1, r3
 80043da:	480f      	ldr	r0, [pc, #60]	; (8004418 <HAL_I2C_MspInit+0xbc>)
 80043dc:	f000 fb2c 	bl	8004a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <HAL_I2C_MspInit+0xb8>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	4a0b      	ldr	r2, [pc, #44]	; (8004414 <HAL_I2C_MspInit+0xb8>)
 80043e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043ea:	6593      	str	r3, [r2, #88]	; 0x58
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_I2C_MspInit+0xb8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80043f8:	2200      	movs	r2, #0
 80043fa:	2105      	movs	r1, #5
 80043fc:	201f      	movs	r0, #31
 80043fe:	f000 faf1 	bl	80049e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004402:	201f      	movs	r0, #31
 8004404:	f000 fb0a 	bl	8004a1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004408:	bf00      	nop
 800440a:	3778      	adds	r7, #120	; 0x78
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40005400 	.word	0x40005400
 8004414:	40021000 	.word	0x40021000
 8004418:	48000400 	.word	0x48000400

0800441c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442c:	d114      	bne.n	8004458 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800442e:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	4a18      	ldr	r2, [pc, #96]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	6593      	str	r3, [r2, #88]	; 0x58
 800443a:	4b16      	ldr	r3, [pc, #88]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004446:	2200      	movs	r2, #0
 8004448:	2105      	movs	r1, #5
 800444a:	201c      	movs	r0, #28
 800444c:	f000 faca 	bl	80049e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004450:	201c      	movs	r0, #28
 8004452:	f000 fae3 	bl	8004a1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004456:	e018      	b.n	800448a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0e      	ldr	r2, [pc, #56]	; (8004498 <HAL_TIM_Base_MspInit+0x7c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d113      	bne.n	800448a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 8004464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004466:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446c:	6613      	str	r3, [r2, #96]	; 0x60
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 8004470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 800447a:	2200      	movs	r2, #0
 800447c:	2105      	movs	r1, #5
 800447e:	2018      	movs	r0, #24
 8004480:	f000 fab0 	bl	80049e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004484:	2018      	movs	r0, #24
 8004486:	f000 fac9 	bl	8004a1c <HAL_NVIC_EnableIRQ>
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000
 8004498:	40014000 	.word	0x40014000

0800449c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b09e      	sub	sp, #120	; 0x78
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044b4:	f107 0310 	add.w	r3, r7, #16
 80044b8:	2254      	movs	r2, #84	; 0x54
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f006 fb27 	bl	800ab10 <memset>
  if(huart->Instance==USART2)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a28      	ldr	r2, [pc, #160]	; (8004568 <HAL_UART_MspInit+0xcc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d148      	bne.n	800455e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80044cc:	2302      	movs	r3, #2
 80044ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80044d0:	2300      	movs	r3, #0
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044d4:	f107 0310 	add.w	r3, r7, #16
 80044d8:	4618      	mov	r0, r3
 80044da:	f002 f8fb 	bl	80066d4 <HAL_RCCEx_PeriphCLKConfig>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80044e4:	f7ff ff0c 	bl	8004300 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044e8:	4b20      	ldr	r3, [pc, #128]	; (800456c <HAL_UART_MspInit+0xd0>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	4a1f      	ldr	r2, [pc, #124]	; (800456c <HAL_UART_MspInit+0xd0>)
 80044ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f2:	6593      	str	r3, [r2, #88]	; 0x58
 80044f4:	4b1d      	ldr	r3, [pc, #116]	; (800456c <HAL_UART_MspInit+0xd0>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004500:	4b1a      	ldr	r3, [pc, #104]	; (800456c <HAL_UART_MspInit+0xd0>)
 8004502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004504:	4a19      	ldr	r2, [pc, #100]	; (800456c <HAL_UART_MspInit+0xd0>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800450c:	4b17      	ldr	r3, [pc, #92]	; (800456c <HAL_UART_MspInit+0xd0>)
 800450e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004518:	2304      	movs	r3, #4
 800451a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451c:	2302      	movs	r3, #2
 800451e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	2300      	movs	r3, #0
 8004522:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004524:	2303      	movs	r3, #3
 8004526:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004528:	2307      	movs	r3, #7
 800452a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800452c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004530:	4619      	mov	r1, r3
 8004532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004536:	f000 fa7f 	bl	8004a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800453a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004540:	2302      	movs	r3, #2
 8004542:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004548:	2303      	movs	r3, #3
 800454a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800454c:	2303      	movs	r3, #3
 800454e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004550:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004554:	4619      	mov	r1, r3
 8004556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800455a:	f000 fa6d 	bl	8004a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800455e:	bf00      	nop
 8004560:	3778      	adds	r7, #120	; 0x78
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40004400 	.word	0x40004400
 800456c:	40021000 	.word	0x40021000

08004570 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	; 0x30
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800457e:	4b2e      	ldr	r3, [pc, #184]	; (8004638 <HAL_InitTick+0xc8>)
 8004580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004582:	4a2d      	ldr	r2, [pc, #180]	; (8004638 <HAL_InitTick+0xc8>)
 8004584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004588:	6613      	str	r3, [r2, #96]	; 0x60
 800458a:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <HAL_InitTick+0xc8>)
 800458c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004596:	f107 020c 	add.w	r2, r7, #12
 800459a:	f107 0310 	add.w	r3, r7, #16
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f002 f805 	bl	80065b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80045a6:	f001 ffed 	bl	8006584 <HAL_RCC_GetPCLK2Freq>
 80045aa:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	4a23      	ldr	r2, [pc, #140]	; (800463c <HAL_InitTick+0xcc>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	0c9b      	lsrs	r3, r3, #18
 80045b6:	3b01      	subs	r3, #1
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80045ba:	4b21      	ldr	r3, [pc, #132]	; (8004640 <HAL_InitTick+0xd0>)
 80045bc:	4a21      	ldr	r2, [pc, #132]	; (8004644 <HAL_InitTick+0xd4>)
 80045be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80045c0:	4b1f      	ldr	r3, [pc, #124]	; (8004640 <HAL_InitTick+0xd0>)
 80045c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045c6:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80045c8:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <HAL_InitTick+0xd0>)
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80045ce:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <HAL_InitTick+0xd0>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <HAL_InitTick+0xd0>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045da:	4b19      	ldr	r3, [pc, #100]	; (8004640 <HAL_InitTick+0xd0>)
 80045dc:	2200      	movs	r2, #0
 80045de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 80045e0:	4817      	ldr	r0, [pc, #92]	; (8004640 <HAL_InitTick+0xd0>)
 80045e2:	f002 fb6f 	bl	8006cc4 <HAL_TIM_Base_Init>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80045ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d11b      	bne.n	800462c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 80045f4:	4812      	ldr	r0, [pc, #72]	; (8004640 <HAL_InitTick+0xd0>)
 80045f6:	f002 fbbd 	bl	8006d74 <HAL_TIM_Base_Start_IT>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004600:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004604:	2b00      	cmp	r3, #0
 8004606:	d111      	bne.n	800462c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004608:	2019      	movs	r0, #25
 800460a:	f000 fa07 	bl	8004a1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b0f      	cmp	r3, #15
 8004612:	d808      	bhi.n	8004626 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8004614:	2200      	movs	r2, #0
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	2019      	movs	r0, #25
 800461a:	f000 f9e3 	bl	80049e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800461e:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <HAL_InitTick+0xd8>)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	e002      	b.n	800462c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800462c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004630:	4618      	mov	r0, r3
 8004632:	3730      	adds	r7, #48	; 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40021000 	.word	0x40021000
 800463c:	431bde83 	.word	0x431bde83
 8004640:	20001200 	.word	0x20001200
 8004644:	40014400 	.word	0x40014400
 8004648:	20000004 	.word	0x20000004

0800464c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004650:	e7fe      	b.n	8004650 <NMI_Handler+0x4>

08004652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004656:	e7fe      	b.n	8004656 <HardFault_Handler+0x4>

08004658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800465c:	e7fe      	b.n	800465c <MemManage_Handler+0x4>

0800465e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004662:	e7fe      	b.n	8004662 <BusFault_Handler+0x4>

08004664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004668:	e7fe      	b.n	8004668 <UsageFault_Handler+0x4>

0800466a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800466a:	b480      	push	{r7}
 800466c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800466e:	bf00      	nop
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MOTION_CLICK_INTERRUPT_Pin);
 800467c:	2008      	movs	r0, #8
 800467e:	f000 fb8f 	bl	8004da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800468c:	4802      	ldr	r0, [pc, #8]	; (8004698 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800468e:	f002 fbf4 	bl	8006e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20001120 	.word	0x20001120

0800469c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80046a0:	4802      	ldr	r0, [pc, #8]	; (80046ac <TIM1_UP_TIM16_IRQHandler+0x10>)
 80046a2:	f002 fbea 	bl	8006e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20001200 	.word	0x20001200

080046b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046b4:	4802      	ldr	r0, [pc, #8]	; (80046c0 <TIM2_IRQHandler+0x10>)
 80046b6:	f002 fbe0 	bl	8006e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	200010d4 	.word	0x200010d4

080046c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80046c8:	4802      	ldr	r0, [pc, #8]	; (80046d4 <I2C1_EV_IRQHandler+0x10>)
 80046ca:	f000 fdfb 	bl	80052c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20001080 	.word	0x20001080

080046d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046e0:	4a14      	ldr	r2, [pc, #80]	; (8004734 <_sbrk+0x5c>)
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <_sbrk+0x60>)
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046ec:	4b13      	ldr	r3, [pc, #76]	; (800473c <_sbrk+0x64>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <_sbrk+0x64>)
 80046f6:	4a12      	ldr	r2, [pc, #72]	; (8004740 <_sbrk+0x68>)
 80046f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <_sbrk+0x64>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	429a      	cmp	r2, r3
 8004706:	d207      	bcs.n	8004718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004708:	f006 f9c8 	bl	800aa9c <__errno>
 800470c:	4603      	mov	r3, r0
 800470e:	220c      	movs	r2, #12
 8004710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004716:	e009      	b.n	800472c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004718:	4b08      	ldr	r3, [pc, #32]	; (800473c <_sbrk+0x64>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800471e:	4b07      	ldr	r3, [pc, #28]	; (800473c <_sbrk+0x64>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	4a05      	ldr	r2, [pc, #20]	; (800473c <_sbrk+0x64>)
 8004728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800472a:	68fb      	ldr	r3, [r7, #12]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20010000 	.word	0x20010000
 8004738:	00000400 	.word	0x00000400
 800473c:	2000124c 	.word	0x2000124c
 8004740:	200037e8 	.word	0x200037e8

08004744 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <SystemInit+0x20>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	4a05      	ldr	r2, [pc, #20]	; (8004764 <SystemInit+0x20>)
 8004750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004758:	bf00      	nop
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800476c:	f7ff ffea 	bl	8004744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004770:	480c      	ldr	r0, [pc, #48]	; (80047a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004772:	490d      	ldr	r1, [pc, #52]	; (80047a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004774:	4a0d      	ldr	r2, [pc, #52]	; (80047ac <LoopForever+0xe>)
  movs r3, #0
 8004776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004778:	e002      	b.n	8004780 <LoopCopyDataInit>

0800477a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800477a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800477c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800477e:	3304      	adds	r3, #4

08004780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004784:	d3f9      	bcc.n	800477a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004786:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004788:	4c0a      	ldr	r4, [pc, #40]	; (80047b4 <LoopForever+0x16>)
  movs r3, #0
 800478a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800478c:	e001      	b.n	8004792 <LoopFillZerobss>

0800478e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800478e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004790:	3204      	adds	r2, #4

08004792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004794:	d3fb      	bcc.n	800478e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004796:	f006 f987 	bl	800aaa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800479a:	f7ff fadd 	bl	8003d58 <main>

0800479e <LoopForever>:

LoopForever:
    b LoopForever
 800479e:	e7fe      	b.n	800479e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80047a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80047a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047a8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80047ac:	0800c528 	.word	0x0800c528
  ldr r2, =_sbss
 80047b0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80047b4:	200037e4 	.word	0x200037e4

080047b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047b8:	e7fe      	b.n	80047b8 <ADC1_IRQHandler>

080047ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047c4:	2003      	movs	r0, #3
 80047c6:	f000 f902 	bl	80049ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047ca:	200f      	movs	r0, #15
 80047cc:	f7ff fed0 	bl	8004570 <HAL_InitTick>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	71fb      	strb	r3, [r7, #7]
 80047da:	e001      	b.n	80047e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047dc:	f7ff fd96 	bl	800430c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047e0:	79fb      	ldrb	r3, [r7, #7]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_IncTick+0x20>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_IncTick+0x24>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4413      	add	r3, r2
 80047fc:	4a04      	ldr	r2, [pc, #16]	; (8004810 <HAL_IncTick+0x24>)
 80047fe:	6013      	str	r3, [r2, #0]
}
 8004800:	bf00      	nop
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20000008 	.word	0x20000008
 8004810:	20001250 	.word	0x20001250

08004814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return uwTick;
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_GetTick+0x14>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20001250 	.word	0x20001250

0800482c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004834:	f7ff ffee 	bl	8004814 <HAL_GetTick>
 8004838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004844:	d005      	beq.n	8004852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <HAL_Delay+0x44>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004852:	bf00      	nop
 8004854:	f7ff ffde 	bl	8004814 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	429a      	cmp	r2, r3
 8004862:	d8f7      	bhi.n	8004854 <HAL_Delay+0x28>
  {
  }
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000008 	.word	0x20000008

08004874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004890:	4013      	ands	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800489c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048a6:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <__NVIC_SetPriorityGrouping+0x44>)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	60d3      	str	r3, [r2, #12]
}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <__NVIC_GetPriorityGrouping+0x18>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	0a1b      	lsrs	r3, r3, #8
 80048c6:	f003 0307 	and.w	r3, r3, #7
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	e000ed00 	.word	0xe000ed00

080048d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	db0b      	blt.n	8004902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	f003 021f 	and.w	r2, r3, #31
 80048f0:	4907      	ldr	r1, [pc, #28]	; (8004910 <__NVIC_EnableIRQ+0x38>)
 80048f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	2001      	movs	r0, #1
 80048fa:	fa00 f202 	lsl.w	r2, r0, r2
 80048fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	e000e100 	.word	0xe000e100

08004914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	6039      	str	r1, [r7, #0]
 800491e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004924:	2b00      	cmp	r3, #0
 8004926:	db0a      	blt.n	800493e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	b2da      	uxtb	r2, r3
 800492c:	490c      	ldr	r1, [pc, #48]	; (8004960 <__NVIC_SetPriority+0x4c>)
 800492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004932:	0112      	lsls	r2, r2, #4
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	440b      	add	r3, r1
 8004938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800493c:	e00a      	b.n	8004954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4908      	ldr	r1, [pc, #32]	; (8004964 <__NVIC_SetPriority+0x50>)
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	3b04      	subs	r3, #4
 800494c:	0112      	lsls	r2, r2, #4
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	440b      	add	r3, r1
 8004952:	761a      	strb	r2, [r3, #24]
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	e000e100 	.word	0xe000e100
 8004964:	e000ed00 	.word	0xe000ed00

08004968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004968:	b480      	push	{r7}
 800496a:	b089      	sub	sp, #36	; 0x24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f1c3 0307 	rsb	r3, r3, #7
 8004982:	2b04      	cmp	r3, #4
 8004984:	bf28      	it	cs
 8004986:	2304      	movcs	r3, #4
 8004988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3304      	adds	r3, #4
 800498e:	2b06      	cmp	r3, #6
 8004990:	d902      	bls.n	8004998 <NVIC_EncodePriority+0x30>
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3b03      	subs	r3, #3
 8004996:	e000      	b.n	800499a <NVIC_EncodePriority+0x32>
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800499c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43da      	mvns	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	401a      	ands	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ba:	43d9      	mvns	r1, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c0:	4313      	orrs	r3, r2
         );
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3724      	adds	r7, #36	; 0x24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff ff4c 	bl	8004874 <__NVIC_SetPriorityGrouping>
}
 80049dc:	bf00      	nop
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049f6:	f7ff ff61 	bl	80048bc <__NVIC_GetPriorityGrouping>
 80049fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	6978      	ldr	r0, [r7, #20]
 8004a02:	f7ff ffb1 	bl	8004968 <NVIC_EncodePriority>
 8004a06:	4602      	mov	r2, r0
 8004a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff ff80 	bl	8004914 <__NVIC_SetPriority>
}
 8004a14:	bf00      	nop
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff ff54 	bl	80048d8 <__NVIC_EnableIRQ>
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a46:	e148      	b.n	8004cda <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	4013      	ands	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 813a 	beq.w	8004cd4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d005      	beq.n	8004a78 <HAL_GPIO_Init+0x40>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d130      	bne.n	8004ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	2203      	movs	r2, #3
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004aae:	2201      	movs	r2, #1
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4013      	ands	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	f003 0201 	and.w	r2, r3, #1
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d017      	beq.n	8004b16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	2203      	movs	r2, #3
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4013      	ands	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d123      	bne.n	8004b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	08da      	lsrs	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3208      	adds	r2, #8
 8004b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	220f      	movs	r2, #15
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	08da      	lsrs	r2, r3, #3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3208      	adds	r2, #8
 8004b64:	6939      	ldr	r1, [r7, #16]
 8004b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	2203      	movs	r2, #3
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 0203 	and.w	r2, r3, #3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8094 	beq.w	8004cd4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bac:	4b52      	ldr	r3, [pc, #328]	; (8004cf8 <HAL_GPIO_Init+0x2c0>)
 8004bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb0:	4a51      	ldr	r2, [pc, #324]	; (8004cf8 <HAL_GPIO_Init+0x2c0>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	6613      	str	r3, [r2, #96]	; 0x60
 8004bb8:	4b4f      	ldr	r3, [pc, #316]	; (8004cf8 <HAL_GPIO_Init+0x2c0>)
 8004bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004bc4:	4a4d      	ldr	r2, [pc, #308]	; (8004cfc <HAL_GPIO_Init+0x2c4>)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	089b      	lsrs	r3, r3, #2
 8004bca:	3302      	adds	r3, #2
 8004bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	220f      	movs	r2, #15
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4013      	ands	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bee:	d00d      	beq.n	8004c0c <HAL_GPIO_Init+0x1d4>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a43      	ldr	r2, [pc, #268]	; (8004d00 <HAL_GPIO_Init+0x2c8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <HAL_GPIO_Init+0x1d0>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a42      	ldr	r2, [pc, #264]	; (8004d04 <HAL_GPIO_Init+0x2cc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d101      	bne.n	8004c04 <HAL_GPIO_Init+0x1cc>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e004      	b.n	8004c0e <HAL_GPIO_Init+0x1d6>
 8004c04:	2307      	movs	r3, #7
 8004c06:	e002      	b.n	8004c0e <HAL_GPIO_Init+0x1d6>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <HAL_GPIO_Init+0x1d6>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	f002 0203 	and.w	r2, r2, #3
 8004c14:	0092      	lsls	r2, r2, #2
 8004c16:	4093      	lsls	r3, r2
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c1e:	4937      	ldr	r1, [pc, #220]	; (8004cfc <HAL_GPIO_Init+0x2c4>)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	089b      	lsrs	r3, r3, #2
 8004c24:	3302      	adds	r3, #2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c2c:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <HAL_GPIO_Init+0x2d0>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c50:	4a2d      	ldr	r2, [pc, #180]	; (8004d08 <HAL_GPIO_Init+0x2d0>)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c56:	4b2c      	ldr	r3, [pc, #176]	; (8004d08 <HAL_GPIO_Init+0x2d0>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c7a:	4a23      	ldr	r2, [pc, #140]	; (8004d08 <HAL_GPIO_Init+0x2d0>)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c80:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <HAL_GPIO_Init+0x2d0>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ca4:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_GPIO_Init+0x2d0>)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004caa:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <HAL_GPIO_Init+0x2d0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cce:	4a0e      	ldr	r2, [pc, #56]	; (8004d08 <HAL_GPIO_Init+0x2d0>)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f47f aeaf 	bne.w	8004a48 <HAL_GPIO_Init+0x10>
  }
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	48000400 	.word	0x48000400
 8004d04:	48000800 	.word	0x48000800
 8004d08:	40010400 	.word	0x40010400

08004d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	887b      	ldrh	r3, [r7, #2]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
 8004d28:	e001      	b.n	8004d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	807b      	strh	r3, [r7, #2]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d4c:	787b      	ldrb	r3, [r7, #1]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d52:	887a      	ldrh	r2, [r7, #2]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d58:	e002      	b.n	8004d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d5a:	887a      	ldrh	r2, [r7, #2]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4013      	ands	r3, r2
 8004d84:	041a      	lsls	r2, r3, #16
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	43d9      	mvns	r1, r3
 8004d8a:	887b      	ldrh	r3, [r7, #2]
 8004d8c:	400b      	ands	r3, r1
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	619a      	str	r2, [r3, #24]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004daa:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004db6:	4a05      	ldr	r2, [pc, #20]	; (8004dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004db8:	88fb      	ldrh	r3, [r7, #6]
 8004dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff f9f4 	bl	80041ac <HAL_GPIO_EXTI_Callback>
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40010400 	.word	0x40010400

08004dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e081      	b.n	8004ee6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fab0 	bl	800435c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2224      	movs	r2, #36	; 0x24
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d107      	bne.n	8004e4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	e006      	b.n	8004e58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d104      	bne.n	8004e6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69d9      	ldr	r1, [r3, #28]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1a      	ldr	r2, [r3, #32]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	461a      	mov	r2, r3
 8004efc:	460b      	mov	r3, r1
 8004efe:	817b      	strh	r3, [r7, #10]
 8004f00:	4613      	mov	r3, r2
 8004f02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	f040 80da 	bne.w	80050c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_I2C_Master_Transmit+0x30>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e0d3      	b.n	80050c8 <HAL_I2C_Master_Transmit+0x1d8>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f28:	f7ff fc74 	bl	8004814 <HAL_GetTick>
 8004f2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2319      	movs	r3, #25
 8004f34:	2201      	movs	r2, #1
 8004f36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fa00 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e0be      	b.n	80050c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2221      	movs	r2, #33	; 0x21
 8004f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2210      	movs	r2, #16
 8004f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	893a      	ldrh	r2, [r7, #8]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2bff      	cmp	r3, #255	; 0xff
 8004f7a:	d90e      	bls.n	8004f9a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	22ff      	movs	r2, #255	; 0xff
 8004f80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	8979      	ldrh	r1, [r7, #10]
 8004f8a:	4b51      	ldr	r3, [pc, #324]	; (80050d0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fbf6 	bl	8005784 <I2C_TransferConfig>
 8004f98:	e06c      	b.n	8005074 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	8979      	ldrh	r1, [r7, #10]
 8004fac:	4b48      	ldr	r3, [pc, #288]	; (80050d0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fbe5 	bl	8005784 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004fba:	e05b      	b.n	8005074 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	6a39      	ldr	r1, [r7, #32]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f9fd 	bl	80053c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e07b      	b.n	80050c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d034      	beq.n	8005074 <HAL_I2C_Master_Transmit+0x184>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500e:	2b00      	cmp	r3, #0
 8005010:	d130      	bne.n	8005074 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	2200      	movs	r2, #0
 800501a:	2180      	movs	r1, #128	; 0x80
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f98f 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e04d      	b.n	80050c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	2bff      	cmp	r3, #255	; 0xff
 8005034:	d90e      	bls.n	8005054 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	22ff      	movs	r2, #255	; 0xff
 800503a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	b2da      	uxtb	r2, r3
 8005042:	8979      	ldrh	r1, [r7, #10]
 8005044:	2300      	movs	r3, #0
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fb99 	bl	8005784 <I2C_TransferConfig>
 8005052:	e00f      	b.n	8005074 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005062:	b2da      	uxtb	r2, r3
 8005064:	8979      	ldrh	r1, [r7, #10]
 8005066:	2300      	movs	r3, #0
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fb88 	bl	8005784 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d19e      	bne.n	8004fbc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	6a39      	ldr	r1, [r7, #32]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f9dc 	bl	8005440 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e01a      	b.n	80050c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2220      	movs	r2, #32
 8005098:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6859      	ldr	r1, [r3, #4]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80050a6:	400b      	ands	r3, r1
 80050a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e000      	b.n	80050c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
  }
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	80002000 	.word	0x80002000
 80050d4:	fe00e800 	.word	0xfe00e800

080050d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	461a      	mov	r2, r3
 80050e4:	460b      	mov	r3, r1
 80050e6:	817b      	strh	r3, [r7, #10]
 80050e8:	4613      	mov	r3, r2
 80050ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	f040 80db 	bne.w	80052b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_I2C_Master_Receive+0x30>
 8005104:	2302      	movs	r3, #2
 8005106:	e0d4      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005110:	f7ff fb80 	bl	8004814 <HAL_GetTick>
 8005114:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	2319      	movs	r3, #25
 800511c:	2201      	movs	r2, #1
 800511e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f90c 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e0bf      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2222      	movs	r2, #34	; 0x22
 8005136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2210      	movs	r2, #16
 800513e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	893a      	ldrh	r2, [r7, #8]
 8005152:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	2bff      	cmp	r3, #255	; 0xff
 8005162:	d90e      	bls.n	8005182 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	22ff      	movs	r2, #255	; 0xff
 8005168:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516e:	b2da      	uxtb	r2, r3
 8005170:	8979      	ldrh	r1, [r7, #10]
 8005172:	4b52      	ldr	r3, [pc, #328]	; (80052bc <HAL_I2C_Master_Receive+0x1e4>)
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fb02 	bl	8005784 <I2C_TransferConfig>
 8005180:	e06d      	b.n	800525e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	b2da      	uxtb	r2, r3
 8005192:	8979      	ldrh	r1, [r7, #10]
 8005194:	4b49      	ldr	r3, [pc, #292]	; (80052bc <HAL_I2C_Master_Receive+0x1e4>)
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 faf1 	bl	8005784 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80051a2:	e05c      	b.n	800525e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	6a39      	ldr	r1, [r7, #32]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f985 	bl	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e07c      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d034      	beq.n	800525e <HAL_I2C_Master_Receive+0x186>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d130      	bne.n	800525e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2200      	movs	r2, #0
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f89a 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e04d      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521a:	b29b      	uxth	r3, r3
 800521c:	2bff      	cmp	r3, #255	; 0xff
 800521e:	d90e      	bls.n	800523e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	22ff      	movs	r2, #255	; 0xff
 8005224:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522a:	b2da      	uxtb	r2, r3
 800522c:	8979      	ldrh	r1, [r7, #10]
 800522e:	2300      	movs	r3, #0
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 faa4 	bl	8005784 <I2C_TransferConfig>
 800523c:	e00f      	b.n	800525e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524c:	b2da      	uxtb	r2, r3
 800524e:	8979      	ldrh	r1, [r7, #10]
 8005250:	2300      	movs	r3, #0
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fa93 	bl	8005784 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d19d      	bne.n	80051a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	6a39      	ldr	r1, [r7, #32]
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f8e7 	bl	8005440 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e01a      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2220      	movs	r2, #32
 8005282:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <HAL_I2C_Master_Receive+0x1e8>)
 8005290:	400b      	ands	r3, r1
 8005292:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e000      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	80002400 	.word	0x80002400
 80052c0:	fe00e800 	.word	0xfe00e800

080052c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	68f9      	ldr	r1, [r7, #12]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	4798      	blx	r3
  }
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d103      	bne.n	8005316 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2200      	movs	r2, #0
 8005314:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b01      	cmp	r3, #1
 8005322:	d007      	beq.n	8005334 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	619a      	str	r2, [r3, #24]
  }
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005350:	e022      	b.n	8005398 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005358:	d01e      	beq.n	8005398 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535a:	f7ff fa5b 	bl	8004814 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d302      	bcc.n	8005370 <I2C_WaitOnFlagUntilTimeout+0x30>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d113      	bne.n	8005398 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e00f      	b.n	80053b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4013      	ands	r3, r2
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d0cd      	beq.n	8005352 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053cc:	e02c      	b.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f8ea 	bl	80055ac <I2C_IsErrorOccurred>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e02a      	b.n	8005438 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e8:	d01e      	beq.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7ff fa13 	bl	8004814 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d113      	bne.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e007      	b.n	8005438 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b02      	cmp	r3, #2
 8005434:	d1cb      	bne.n	80053ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800544c:	e028      	b.n	80054a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f8aa 	bl	80055ac <I2C_IsErrorOccurred>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e026      	b.n	80054b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7ff f9d7 	bl	8004814 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d113      	bne.n	80054a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e007      	b.n	80054b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d1cf      	bne.n	800544e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054c4:	e064      	b.n	8005590 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 f86e 	bl	80055ac <I2C_IsErrorOccurred>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e062      	b.n	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d138      	bne.n	800555a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d105      	bne.n	8005502 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e04e      	b.n	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b10      	cmp	r3, #16
 800550e:	d107      	bne.n	8005520 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2210      	movs	r2, #16
 8005516:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2204      	movs	r2, #4
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
 800551e:	e002      	b.n	8005526 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2220      	movs	r2, #32
 800552c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6859      	ldr	r1, [r3, #4]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800553a:	400b      	ands	r3, r1
 800553c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e022      	b.n	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555a:	f7ff f95b 	bl	8004814 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	429a      	cmp	r2, r3
 8005568:	d302      	bcc.n	8005570 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10f      	bne.n	8005590 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005574:	f043 0220 	orr.w	r2, r3, #32
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e007      	b.n	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b04      	cmp	r3, #4
 800559c:	d193      	bne.n	80054c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	fe00e800 	.word	0xfe00e800

080055ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	; 0x28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d075      	beq.n	80056c4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2210      	movs	r2, #16
 80055de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055e0:	e056      	b.n	8005690 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e8:	d052      	beq.n	8005690 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055ea:	f7ff f913 	bl	8004814 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <I2C_IsErrorOccurred+0x54>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d147      	bne.n	8005690 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800560a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005612:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800561e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005622:	d12e      	bne.n	8005682 <I2C_IsErrorOccurred+0xd6>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800562a:	d02a      	beq.n	8005682 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800562c:	7cfb      	ldrb	r3, [r7, #19]
 800562e:	2b20      	cmp	r3, #32
 8005630:	d027      	beq.n	8005682 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005640:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005642:	f7ff f8e7 	bl	8004814 <HAL_GetTick>
 8005646:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005648:	e01b      	b.n	8005682 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800564a:	f7ff f8e3 	bl	8004814 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b19      	cmp	r3, #25
 8005656:	d914      	bls.n	8005682 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	f043 0220 	orr.w	r2, r3, #32
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b20      	cmp	r3, #32
 800568e:	d1dc      	bne.n	800564a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b20      	cmp	r3, #32
 800569c:	d003      	beq.n	80056a6 <I2C_IsErrorOccurred+0xfa>
 800569e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d09d      	beq.n	80055e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d103      	bne.n	80056b6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2220      	movs	r2, #32
 80056b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	f043 0304 	orr.w	r3, r3, #4
 80056bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00b      	beq.n	8005710 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	f043 0308 	orr.w	r3, r3, #8
 80056fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005708:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	f043 0302 	orr.w	r3, r3, #2
 8005720:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800572a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01c      	beq.n	8005774 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff fddc 	bl	80052f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6859      	ldr	r1, [r3, #4]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <I2C_IsErrorOccurred+0x1d4>)
 800574c:	400b      	ands	r3, r1
 800574e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	431a      	orrs	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005778:	4618      	mov	r0, r3
 800577a:	3728      	adds	r7, #40	; 0x28
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	fe00e800 	.word	0xfe00e800

08005784 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	460b      	mov	r3, r1
 8005790:	817b      	strh	r3, [r7, #10]
 8005792:	4613      	mov	r3, r2
 8005794:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800579c:	7a7b      	ldrb	r3, [r7, #9]
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	0d5b      	lsrs	r3, r3, #21
 80057be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <I2C_TransferConfig+0x60>)
 80057c4:	430b      	orrs	r3, r1
 80057c6:	43db      	mvns	r3, r3
 80057c8:	ea02 0103 	and.w	r1, r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	03ff63ff 	.word	0x03ff63ff

080057e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d138      	bne.n	8005870 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005808:	2302      	movs	r3, #2
 800580a:	e032      	b.n	8005872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2224      	movs	r2, #36	; 0x24
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800583a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6819      	ldr	r1, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	e000      	b.n	8005872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b20      	cmp	r3, #32
 8005892:	d139      	bne.n	8005908 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800589e:	2302      	movs	r3, #2
 80058a0:	e033      	b.n	800590a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2224      	movs	r2, #36	; 0x24
 80058ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0201 	bic.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	e000      	b.n	800590a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
  }
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a04      	ldr	r2, [pc, #16]	; (8005934 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005926:	6013      	str	r3, [r2, #0]
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40007000 	.word	0x40007000

08005938 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <HAL_PWREx_GetVoltageRange+0x18>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005944:	4618      	mov	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40007000 	.word	0x40007000

08005954 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005962:	d130      	bne.n	80059c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005964:	4b23      	ldr	r3, [pc, #140]	; (80059f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800596c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005970:	d038      	beq.n	80059e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005972:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800597a:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800597c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005980:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005982:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2232      	movs	r2, #50	; 0x32
 8005988:	fb02 f303 	mul.w	r3, r2, r3
 800598c:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	0c9b      	lsrs	r3, r3, #18
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005998:	e002      	b.n	80059a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3b01      	subs	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059a0:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ac:	d102      	bne.n	80059b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1f2      	bne.n	800599a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059b4:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c0:	d110      	bne.n	80059e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e00f      	b.n	80059e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d2:	d007      	beq.n	80059e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059d4:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059dc:	4a05      	ldr	r2, [pc, #20]	; (80059f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40007000 	.word	0x40007000
 80059f8:	20000000 	.word	0x20000000
 80059fc:	431bde83 	.word	0x431bde83

08005a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f000 bc02 	b.w	8006218 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a14:	4b96      	ldr	r3, [pc, #600]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 030c 	and.w	r3, r3, #12
 8005a1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a1e:	4b94      	ldr	r3, [pc, #592]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80e4 	beq.w	8005bfe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <HAL_RCC_OscConfig+0x4c>
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b0c      	cmp	r3, #12
 8005a40:	f040 808b 	bne.w	8005b5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	f040 8087 	bne.w	8005b5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a4c:	4b88      	ldr	r3, [pc, #544]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_OscConfig+0x64>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e3d9      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1a      	ldr	r2, [r3, #32]
 8005a68:	4b81      	ldr	r3, [pc, #516]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d004      	beq.n	8005a7e <HAL_RCC_OscConfig+0x7e>
 8005a74:	4b7e      	ldr	r3, [pc, #504]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a7c:	e005      	b.n	8005a8a <HAL_RCC_OscConfig+0x8a>
 8005a7e:	4b7c      	ldr	r3, [pc, #496]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d223      	bcs.n	8005ad6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fdbe 	bl	8006614 <RCC_SetFlashLatencyFromMSIRange>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e3ba      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aa2:	4b73      	ldr	r3, [pc, #460]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a72      	ldr	r2, [pc, #456]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005aa8:	f043 0308 	orr.w	r3, r3, #8
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	4b70      	ldr	r3, [pc, #448]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	496d      	ldr	r1, [pc, #436]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ac0:	4b6b      	ldr	r3, [pc, #428]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	4968      	ldr	r1, [pc, #416]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	604b      	str	r3, [r1, #4]
 8005ad4:	e025      	b.n	8005b22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ad6:	4b66      	ldr	r3, [pc, #408]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a65      	ldr	r2, [pc, #404]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005adc:	f043 0308 	orr.w	r3, r3, #8
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	4b63      	ldr	r3, [pc, #396]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	4960      	ldr	r1, [pc, #384]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005af4:	4b5e      	ldr	r3, [pc, #376]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	495b      	ldr	r1, [pc, #364]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d109      	bne.n	8005b22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fd7e 	bl	8006614 <RCC_SetFlashLatencyFromMSIRange>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e37a      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b22:	f000 fc81 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 8005b26:	4602      	mov	r2, r0
 8005b28:	4b51      	ldr	r3, [pc, #324]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	4950      	ldr	r1, [pc, #320]	; (8005c74 <HAL_RCC_OscConfig+0x274>)
 8005b34:	5ccb      	ldrb	r3, [r1, r3]
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3e:	4a4e      	ldr	r2, [pc, #312]	; (8005c78 <HAL_RCC_OscConfig+0x278>)
 8005b40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b42:	4b4e      	ldr	r3, [pc, #312]	; (8005c7c <HAL_RCC_OscConfig+0x27c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe fd12 	bl	8004570 <HAL_InitTick>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d052      	beq.n	8005bfc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	e35e      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d032      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b62:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a42      	ldr	r2, [pc, #264]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b6e:	f7fe fe51 	bl	8004814 <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b76:	f7fe fe4d 	bl	8004814 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e347      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b88:	4b39      	ldr	r3, [pc, #228]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f0      	beq.n	8005b76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b94:	4b36      	ldr	r3, [pc, #216]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a35      	ldr	r2, [pc, #212]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005b9a:	f043 0308 	orr.w	r3, r3, #8
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	4b33      	ldr	r3, [pc, #204]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	4930      	ldr	r1, [pc, #192]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bb2:	4b2f      	ldr	r3, [pc, #188]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	492b      	ldr	r1, [pc, #172]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	604b      	str	r3, [r1, #4]
 8005bc6:	e01a      	b.n	8005bfe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005bc8:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a28      	ldr	r2, [pc, #160]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005bce:	f023 0301 	bic.w	r3, r3, #1
 8005bd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005bd4:	f7fe fe1e 	bl	8004814 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bdc:	f7fe fe1a 	bl	8004814 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e314      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bee:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1f0      	bne.n	8005bdc <HAL_RCC_OscConfig+0x1dc>
 8005bfa:	e000      	b.n	8005bfe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005bfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d073      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d005      	beq.n	8005c1c <HAL_RCC_OscConfig+0x21c>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b0c      	cmp	r3, #12
 8005c14:	d10e      	bne.n	8005c34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d10b      	bne.n	8005c34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c1c:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d063      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x2f0>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d15f      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e2f1      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3c:	d106      	bne.n	8005c4c <HAL_RCC_OscConfig+0x24c>
 8005c3e:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a0b      	ldr	r2, [pc, #44]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	e025      	b.n	8005c98 <HAL_RCC_OscConfig+0x298>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c54:	d114      	bne.n	8005c80 <HAL_RCC_OscConfig+0x280>
 8005c56:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a05      	ldr	r2, [pc, #20]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a02      	ldr	r2, [pc, #8]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	e013      	b.n	8005c98 <HAL_RCC_OscConfig+0x298>
 8005c70:	40021000 	.word	0x40021000
 8005c74:	0800c40c 	.word	0x0800c40c
 8005c78:	20000000 	.word	0x20000000
 8005c7c:	20000004 	.word	0x20000004
 8005c80:	4ba0      	ldr	r3, [pc, #640]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a9f      	ldr	r2, [pc, #636]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	4b9d      	ldr	r3, [pc, #628]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a9c      	ldr	r2, [pc, #624]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d013      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca0:	f7fe fdb8 	bl	8004814 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca8:	f7fe fdb4 	bl	8004814 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b64      	cmp	r3, #100	; 0x64
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e2ae      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cba:	4b92      	ldr	r3, [pc, #584]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x2a8>
 8005cc6:	e014      	b.n	8005cf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fe fda4 	bl	8004814 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cd0:	f7fe fda0 	bl	8004814 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b64      	cmp	r3, #100	; 0x64
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e29a      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ce2:	4b88      	ldr	r3, [pc, #544]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1f0      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x2d0>
 8005cee:	e000      	b.n	8005cf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d060      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_OscConfig+0x310>
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	2b0c      	cmp	r3, #12
 8005d08:	d119      	bne.n	8005d3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d116      	bne.n	8005d3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d10:	4b7c      	ldr	r3, [pc, #496]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_RCC_OscConfig+0x328>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e277      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d28:	4b76      	ldr	r3, [pc, #472]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	061b      	lsls	r3, r3, #24
 8005d36:	4973      	ldr	r1, [pc, #460]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d3c:	e040      	b.n	8005dc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d023      	beq.n	8005d8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d46:	4b6f      	ldr	r3, [pc, #444]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a6e      	ldr	r2, [pc, #440]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d52:	f7fe fd5f 	bl	8004814 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d5a:	f7fe fd5b 	bl	8004814 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e255      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d6c:	4b65      	ldr	r3, [pc, #404]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d78:	4b62      	ldr	r3, [pc, #392]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	061b      	lsls	r3, r3, #24
 8005d86:	495f      	ldr	r1, [pc, #380]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	604b      	str	r3, [r1, #4]
 8005d8c:	e018      	b.n	8005dc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d8e:	4b5d      	ldr	r3, [pc, #372]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a5c      	ldr	r2, [pc, #368]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9a:	f7fe fd3b 	bl	8004814 <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005da2:	f7fe fd37 	bl	8004814 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e231      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005db4:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1f0      	bne.n	8005da2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d03c      	beq.n	8005e46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01c      	beq.n	8005e0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dd4:	4b4b      	ldr	r3, [pc, #300]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dda:	4a4a      	ldr	r2, [pc, #296]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005ddc:	f043 0301 	orr.w	r3, r3, #1
 8005de0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de4:	f7fe fd16 	bl	8004814 <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dec:	f7fe fd12 	bl	8004814 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e20c      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dfe:	4b41      	ldr	r3, [pc, #260]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0ef      	beq.n	8005dec <HAL_RCC_OscConfig+0x3ec>
 8005e0c:	e01b      	b.n	8005e46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e14:	4a3b      	ldr	r2, [pc, #236]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1e:	f7fe fcf9 	bl	8004814 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e26:	f7fe fcf5 	bl	8004814 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e1ef      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e38:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1ef      	bne.n	8005e26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80a6 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e54:	2300      	movs	r3, #0
 8005e56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005e58:	4b2a      	ldr	r3, [pc, #168]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10d      	bne.n	8005e80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e64:	4b27      	ldr	r3, [pc, #156]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e68:	4a26      	ldr	r2, [pc, #152]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e70:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e80:	4b21      	ldr	r3, [pc, #132]	; (8005f08 <HAL_RCC_OscConfig+0x508>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d118      	bne.n	8005ebe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e8c:	4b1e      	ldr	r3, [pc, #120]	; (8005f08 <HAL_RCC_OscConfig+0x508>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a1d      	ldr	r2, [pc, #116]	; (8005f08 <HAL_RCC_OscConfig+0x508>)
 8005e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e98:	f7fe fcbc 	bl	8004814 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea0:	f7fe fcb8 	bl	8004814 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e1b2      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eb2:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <HAL_RCC_OscConfig+0x508>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d108      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x4d8>
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ecc:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ed6:	e029      	b.n	8005f2c <HAL_RCC_OscConfig+0x52c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2b05      	cmp	r3, #5
 8005ede:	d115      	bne.n	8005f0c <HAL_RCC_OscConfig+0x50c>
 8005ee0:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee6:	4a07      	ldr	r2, [pc, #28]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005ee8:	f043 0304 	orr.w	r3, r3, #4
 8005eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ef0:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef6:	4a03      	ldr	r2, [pc, #12]	; (8005f04 <HAL_RCC_OscConfig+0x504>)
 8005ef8:	f043 0301 	orr.w	r3, r3, #1
 8005efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f00:	e014      	b.n	8005f2c <HAL_RCC_OscConfig+0x52c>
 8005f02:	bf00      	nop
 8005f04:	40021000 	.word	0x40021000
 8005f08:	40007000 	.word	0x40007000
 8005f0c:	4b9a      	ldr	r3, [pc, #616]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f12:	4a99      	ldr	r2, [pc, #612]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005f14:	f023 0301 	bic.w	r3, r3, #1
 8005f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f1c:	4b96      	ldr	r3, [pc, #600]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f22:	4a95      	ldr	r2, [pc, #596]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005f24:	f023 0304 	bic.w	r3, r3, #4
 8005f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d016      	beq.n	8005f62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f34:	f7fe fc6e 	bl	8004814 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f3a:	e00a      	b.n	8005f52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3c:	f7fe fc6a 	bl	8004814 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e162      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f52:	4b89      	ldr	r3, [pc, #548]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0ed      	beq.n	8005f3c <HAL_RCC_OscConfig+0x53c>
 8005f60:	e015      	b.n	8005f8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f62:	f7fe fc57 	bl	8004814 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f68:	e00a      	b.n	8005f80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6a:	f7fe fc53 	bl	8004814 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e14b      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f80:	4b7d      	ldr	r3, [pc, #500]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1ed      	bne.n	8005f6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f8e:	7ffb      	ldrb	r3, [r7, #31]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d105      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f94:	4b78      	ldr	r3, [pc, #480]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f98:	4a77      	ldr	r2, [pc, #476]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d03c      	beq.n	8006026 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01c      	beq.n	8005fee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fb4:	4b70      	ldr	r3, [pc, #448]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fba:	4a6f      	ldr	r2, [pc, #444]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005fbc:	f043 0301 	orr.w	r3, r3, #1
 8005fc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc4:	f7fe fc26 	bl	8004814 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fcc:	f7fe fc22 	bl	8004814 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e11c      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fde:	4b66      	ldr	r3, [pc, #408]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0ef      	beq.n	8005fcc <HAL_RCC_OscConfig+0x5cc>
 8005fec:	e01b      	b.n	8006026 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fee:	4b62      	ldr	r3, [pc, #392]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ff4:	4a60      	ldr	r2, [pc, #384]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8005ff6:	f023 0301 	bic.w	r3, r3, #1
 8005ffa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffe:	f7fe fc09 	bl	8004814 <HAL_GetTick>
 8006002:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006004:	e008      	b.n	8006018 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006006:	f7fe fc05 	bl	8004814 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d901      	bls.n	8006018 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e0ff      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006018:	4b57      	ldr	r3, [pc, #348]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 800601a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1ef      	bne.n	8006006 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 80f3 	beq.w	8006216 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006034:	2b02      	cmp	r3, #2
 8006036:	f040 80c9 	bne.w	80061cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800603a:	4b4f      	ldr	r3, [pc, #316]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f003 0203 	and.w	r2, r3, #3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	429a      	cmp	r2, r3
 800604c:	d12c      	bne.n	80060a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006058:	3b01      	subs	r3, #1
 800605a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800605c:	429a      	cmp	r2, r3
 800605e:	d123      	bne.n	80060a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800606c:	429a      	cmp	r2, r3
 800606e:	d11b      	bne.n	80060a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800607c:	429a      	cmp	r2, r3
 800607e:	d113      	bne.n	80060a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608a:	085b      	lsrs	r3, r3, #1
 800608c:	3b01      	subs	r3, #1
 800608e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006090:	429a      	cmp	r2, r3
 8006092:	d109      	bne.n	80060a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	3b01      	subs	r3, #1
 80060a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d06b      	beq.n	8006180 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b0c      	cmp	r3, #12
 80060ac:	d062      	beq.n	8006174 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80060ae:	4b32      	ldr	r3, [pc, #200]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e0ac      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80060be:	4b2e      	ldr	r3, [pc, #184]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2d      	ldr	r2, [pc, #180]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 80060c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060ca:	f7fe fba3 	bl	8004814 <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d2:	f7fe fb9f 	bl	8004814 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e099      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060e4:	4b24      	ldr	r3, [pc, #144]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f0      	bne.n	80060d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060f0:	4b21      	ldr	r3, [pc, #132]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	4b21      	ldr	r3, [pc, #132]	; (800617c <HAL_RCC_OscConfig+0x77c>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006100:	3a01      	subs	r2, #1
 8006102:	0112      	lsls	r2, r2, #4
 8006104:	4311      	orrs	r1, r2
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800610a:	0212      	lsls	r2, r2, #8
 800610c:	4311      	orrs	r1, r2
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006112:	0852      	lsrs	r2, r2, #1
 8006114:	3a01      	subs	r2, #1
 8006116:	0552      	lsls	r2, r2, #21
 8006118:	4311      	orrs	r1, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800611e:	0852      	lsrs	r2, r2, #1
 8006120:	3a01      	subs	r2, #1
 8006122:	0652      	lsls	r2, r2, #25
 8006124:	4311      	orrs	r1, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800612a:	06d2      	lsls	r2, r2, #27
 800612c:	430a      	orrs	r2, r1
 800612e:	4912      	ldr	r1, [pc, #72]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8006130:	4313      	orrs	r3, r2
 8006132:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006134:	4b10      	ldr	r3, [pc, #64]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a0f      	ldr	r2, [pc, #60]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 800613a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800613e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006140:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	4a0c      	ldr	r2, [pc, #48]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8006146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800614a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800614c:	f7fe fb62 	bl	8004814 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006154:	f7fe fb5e 	bl	8004814 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e058      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006166:	4b04      	ldr	r3, [pc, #16]	; (8006178 <HAL_RCC_OscConfig+0x778>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f0      	beq.n	8006154 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006172:	e050      	b.n	8006216 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e04f      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
 8006178:	40021000 	.word	0x40021000
 800617c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006180:	4b27      	ldr	r3, [pc, #156]	; (8006220 <HAL_RCC_OscConfig+0x820>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d144      	bne.n	8006216 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800618c:	4b24      	ldr	r3, [pc, #144]	; (8006220 <HAL_RCC_OscConfig+0x820>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a23      	ldr	r2, [pc, #140]	; (8006220 <HAL_RCC_OscConfig+0x820>)
 8006192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006196:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006198:	4b21      	ldr	r3, [pc, #132]	; (8006220 <HAL_RCC_OscConfig+0x820>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	4a20      	ldr	r2, [pc, #128]	; (8006220 <HAL_RCC_OscConfig+0x820>)
 800619e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061a4:	f7fe fb36 	bl	8004814 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ac:	f7fe fb32 	bl	8004814 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e02c      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061be:	4b18      	ldr	r3, [pc, #96]	; (8006220 <HAL_RCC_OscConfig+0x820>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0f0      	beq.n	80061ac <HAL_RCC_OscConfig+0x7ac>
 80061ca:	e024      	b.n	8006216 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2b0c      	cmp	r3, #12
 80061d0:	d01f      	beq.n	8006212 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061d2:	4b13      	ldr	r3, [pc, #76]	; (8006220 <HAL_RCC_OscConfig+0x820>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a12      	ldr	r2, [pc, #72]	; (8006220 <HAL_RCC_OscConfig+0x820>)
 80061d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061de:	f7fe fb19 	bl	8004814 <HAL_GetTick>
 80061e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061e4:	e008      	b.n	80061f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e6:	f7fe fb15 	bl	8004814 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d901      	bls.n	80061f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e00f      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <HAL_RCC_OscConfig+0x820>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1f0      	bne.n	80061e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006204:	4b06      	ldr	r3, [pc, #24]	; (8006220 <HAL_RCC_OscConfig+0x820>)
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	4905      	ldr	r1, [pc, #20]	; (8006220 <HAL_RCC_OscConfig+0x820>)
 800620a:	4b06      	ldr	r3, [pc, #24]	; (8006224 <HAL_RCC_OscConfig+0x824>)
 800620c:	4013      	ands	r3, r2
 800620e:	60cb      	str	r3, [r1, #12]
 8006210:	e001      	b.n	8006216 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3720      	adds	r7, #32
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40021000 	.word	0x40021000
 8006224:	feeefffc 	.word	0xfeeefffc

08006228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0e7      	b.n	800640c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800623c:	4b75      	ldr	r3, [pc, #468]	; (8006414 <HAL_RCC_ClockConfig+0x1ec>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d910      	bls.n	800626c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624a:	4b72      	ldr	r3, [pc, #456]	; (8006414 <HAL_RCC_ClockConfig+0x1ec>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f023 0207 	bic.w	r2, r3, #7
 8006252:	4970      	ldr	r1, [pc, #448]	; (8006414 <HAL_RCC_ClockConfig+0x1ec>)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	4313      	orrs	r3, r2
 8006258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800625a:	4b6e      	ldr	r3, [pc, #440]	; (8006414 <HAL_RCC_ClockConfig+0x1ec>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d001      	beq.n	800626c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0cf      	b.n	800640c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d010      	beq.n	800629a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	4b66      	ldr	r3, [pc, #408]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006284:	429a      	cmp	r2, r3
 8006286:	d908      	bls.n	800629a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006288:	4b63      	ldr	r3, [pc, #396]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	4960      	ldr	r1, [pc, #384]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 8006296:	4313      	orrs	r3, r2
 8006298:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d04c      	beq.n	8006340 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d107      	bne.n	80062be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ae:	4b5a      	ldr	r3, [pc, #360]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d121      	bne.n	80062fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e0a6      	b.n	800640c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d107      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062c6:	4b54      	ldr	r3, [pc, #336]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d115      	bne.n	80062fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e09a      	b.n	800640c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d107      	bne.n	80062ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062de:	4b4e      	ldr	r3, [pc, #312]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e08e      	b.n	800640c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062ee:	4b4a      	ldr	r3, [pc, #296]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e086      	b.n	800640c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062fe:	4b46      	ldr	r3, [pc, #280]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f023 0203 	bic.w	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4943      	ldr	r1, [pc, #268]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 800630c:	4313      	orrs	r3, r2
 800630e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006310:	f7fe fa80 	bl	8004814 <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006316:	e00a      	b.n	800632e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006318:	f7fe fa7c 	bl	8004814 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f241 3288 	movw	r2, #5000	; 0x1388
 8006326:	4293      	cmp	r3, r2
 8006328:	d901      	bls.n	800632e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e06e      	b.n	800640c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632e:	4b3a      	ldr	r3, [pc, #232]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 020c 	and.w	r2, r3, #12
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	429a      	cmp	r2, r3
 800633e:	d1eb      	bne.n	8006318 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d010      	beq.n	800636e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	4b31      	ldr	r3, [pc, #196]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006358:	429a      	cmp	r2, r3
 800635a:	d208      	bcs.n	800636e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800635c:	4b2e      	ldr	r3, [pc, #184]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	492b      	ldr	r1, [pc, #172]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 800636a:	4313      	orrs	r3, r2
 800636c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800636e:	4b29      	ldr	r3, [pc, #164]	; (8006414 <HAL_RCC_ClockConfig+0x1ec>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d210      	bcs.n	800639e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800637c:	4b25      	ldr	r3, [pc, #148]	; (8006414 <HAL_RCC_ClockConfig+0x1ec>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f023 0207 	bic.w	r2, r3, #7
 8006384:	4923      	ldr	r1, [pc, #140]	; (8006414 <HAL_RCC_ClockConfig+0x1ec>)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	4313      	orrs	r3, r2
 800638a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800638c:	4b21      	ldr	r3, [pc, #132]	; (8006414 <HAL_RCC_ClockConfig+0x1ec>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0307 	and.w	r3, r3, #7
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d001      	beq.n	800639e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e036      	b.n	800640c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d008      	beq.n	80063bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063aa:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	4918      	ldr	r1, [pc, #96]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063c8:	4b13      	ldr	r3, [pc, #76]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	4910      	ldr	r1, [pc, #64]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063dc:	f000 f824 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 80063e0:	4602      	mov	r2, r0
 80063e2:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <HAL_RCC_ClockConfig+0x1f0>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	091b      	lsrs	r3, r3, #4
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	490b      	ldr	r1, [pc, #44]	; (800641c <HAL_RCC_ClockConfig+0x1f4>)
 80063ee:	5ccb      	ldrb	r3, [r1, r3]
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	fa22 f303 	lsr.w	r3, r2, r3
 80063f8:	4a09      	ldr	r2, [pc, #36]	; (8006420 <HAL_RCC_ClockConfig+0x1f8>)
 80063fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80063fc:	4b09      	ldr	r3, [pc, #36]	; (8006424 <HAL_RCC_ClockConfig+0x1fc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe f8b5 	bl	8004570 <HAL_InitTick>
 8006406:	4603      	mov	r3, r0
 8006408:	72fb      	strb	r3, [r7, #11]

  return status;
 800640a:	7afb      	ldrb	r3, [r7, #11]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40022000 	.word	0x40022000
 8006418:	40021000 	.word	0x40021000
 800641c:	0800c40c 	.word	0x0800c40c
 8006420:	20000000 	.word	0x20000000
 8006424:	20000004 	.word	0x20000004

08006428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006428:	b480      	push	{r7}
 800642a:	b089      	sub	sp, #36	; 0x24
 800642c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	2300      	movs	r3, #0
 8006434:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006436:	4b3e      	ldr	r3, [pc, #248]	; (8006530 <HAL_RCC_GetSysClockFreq+0x108>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 030c 	and.w	r3, r3, #12
 800643e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006440:	4b3b      	ldr	r3, [pc, #236]	; (8006530 <HAL_RCC_GetSysClockFreq+0x108>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0x34>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2b0c      	cmp	r3, #12
 8006454:	d121      	bne.n	800649a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d11e      	bne.n	800649a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800645c:	4b34      	ldr	r3, [pc, #208]	; (8006530 <HAL_RCC_GetSysClockFreq+0x108>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b00      	cmp	r3, #0
 8006466:	d107      	bne.n	8006478 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006468:	4b31      	ldr	r3, [pc, #196]	; (8006530 <HAL_RCC_GetSysClockFreq+0x108>)
 800646a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800646e:	0a1b      	lsrs	r3, r3, #8
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	e005      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006478:	4b2d      	ldr	r3, [pc, #180]	; (8006530 <HAL_RCC_GetSysClockFreq+0x108>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006484:	4a2b      	ldr	r2, [pc, #172]	; (8006534 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800648c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10d      	bne.n	80064b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006498:	e00a      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b04      	cmp	r3, #4
 800649e:	d102      	bne.n	80064a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064a0:	4b25      	ldr	r3, [pc, #148]	; (8006538 <HAL_RCC_GetSysClockFreq+0x110>)
 80064a2:	61bb      	str	r3, [r7, #24]
 80064a4:	e004      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d101      	bne.n	80064b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064ac:	4b23      	ldr	r3, [pc, #140]	; (800653c <HAL_RCC_GetSysClockFreq+0x114>)
 80064ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	2b0c      	cmp	r3, #12
 80064b4:	d134      	bne.n	8006520 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064b6:	4b1e      	ldr	r3, [pc, #120]	; (8006530 <HAL_RCC_GetSysClockFreq+0x108>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d003      	beq.n	80064ce <HAL_RCC_GetSysClockFreq+0xa6>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d003      	beq.n	80064d4 <HAL_RCC_GetSysClockFreq+0xac>
 80064cc:	e005      	b.n	80064da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80064ce:	4b1a      	ldr	r3, [pc, #104]	; (8006538 <HAL_RCC_GetSysClockFreq+0x110>)
 80064d0:	617b      	str	r3, [r7, #20]
      break;
 80064d2:	e005      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064d4:	4b19      	ldr	r3, [pc, #100]	; (800653c <HAL_RCC_GetSysClockFreq+0x114>)
 80064d6:	617b      	str	r3, [r7, #20]
      break;
 80064d8:	e002      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	617b      	str	r3, [r7, #20]
      break;
 80064de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064e0:	4b13      	ldr	r3, [pc, #76]	; (8006530 <HAL_RCC_GetSysClockFreq+0x108>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	091b      	lsrs	r3, r3, #4
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	3301      	adds	r3, #1
 80064ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80064ee:	4b10      	ldr	r3, [pc, #64]	; (8006530 <HAL_RCC_GetSysClockFreq+0x108>)
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	0a1b      	lsrs	r3, r3, #8
 80064f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	fb03 f202 	mul.w	r2, r3, r2
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	fbb2 f3f3 	udiv	r3, r2, r3
 8006504:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006506:	4b0a      	ldr	r3, [pc, #40]	; (8006530 <HAL_RCC_GetSysClockFreq+0x108>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	0e5b      	lsrs	r3, r3, #25
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	3301      	adds	r3, #1
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	fbb2 f3f3 	udiv	r3, r2, r3
 800651e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006520:	69bb      	ldr	r3, [r7, #24]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3724      	adds	r7, #36	; 0x24
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40021000 	.word	0x40021000
 8006534:	0800c424 	.word	0x0800c424
 8006538:	00f42400 	.word	0x00f42400
 800653c:	007a1200 	.word	0x007a1200

08006540 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006544:	4b03      	ldr	r3, [pc, #12]	; (8006554 <HAL_RCC_GetHCLKFreq+0x14>)
 8006546:	681b      	ldr	r3, [r3, #0]
}
 8006548:	4618      	mov	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000000 	.word	0x20000000

08006558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800655c:	f7ff fff0 	bl	8006540 <HAL_RCC_GetHCLKFreq>
 8006560:	4602      	mov	r2, r0
 8006562:	4b06      	ldr	r3, [pc, #24]	; (800657c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	0a1b      	lsrs	r3, r3, #8
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	4904      	ldr	r1, [pc, #16]	; (8006580 <HAL_RCC_GetPCLK1Freq+0x28>)
 800656e:	5ccb      	ldrb	r3, [r1, r3]
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006578:	4618      	mov	r0, r3
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40021000 	.word	0x40021000
 8006580:	0800c41c 	.word	0x0800c41c

08006584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006588:	f7ff ffda 	bl	8006540 <HAL_RCC_GetHCLKFreq>
 800658c:	4602      	mov	r2, r0
 800658e:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	0adb      	lsrs	r3, r3, #11
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	4904      	ldr	r1, [pc, #16]	; (80065ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800659a:	5ccb      	ldrb	r3, [r1, r3]
 800659c:	f003 031f 	and.w	r3, r3, #31
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40021000 	.word	0x40021000
 80065ac:	0800c41c 	.word	0x0800c41c

080065b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	220f      	movs	r2, #15
 80065be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80065c0:	4b12      	ldr	r3, [pc, #72]	; (800660c <HAL_RCC_GetClockConfig+0x5c>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0203 	and.w	r2, r3, #3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80065cc:	4b0f      	ldr	r3, [pc, #60]	; (800660c <HAL_RCC_GetClockConfig+0x5c>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <HAL_RCC_GetClockConfig+0x5c>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80065e4:	4b09      	ldr	r3, [pc, #36]	; (800660c <HAL_RCC_GetClockConfig+0x5c>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	08db      	lsrs	r3, r3, #3
 80065ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80065f2:	4b07      	ldr	r3, [pc, #28]	; (8006610 <HAL_RCC_GetClockConfig+0x60>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0207 	and.w	r2, r3, #7
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	601a      	str	r2, [r3, #0]
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40021000 	.word	0x40021000
 8006610:	40022000 	.word	0x40022000

08006614 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006620:	4b2a      	ldr	r3, [pc, #168]	; (80066cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800662c:	f7ff f984 	bl	8005938 <HAL_PWREx_GetVoltageRange>
 8006630:	6178      	str	r0, [r7, #20]
 8006632:	e014      	b.n	800665e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006634:	4b25      	ldr	r3, [pc, #148]	; (80066cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006638:	4a24      	ldr	r2, [pc, #144]	; (80066cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800663a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663e:	6593      	str	r3, [r2, #88]	; 0x58
 8006640:	4b22      	ldr	r3, [pc, #136]	; (80066cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800664c:	f7ff f974 	bl	8005938 <HAL_PWREx_GetVoltageRange>
 8006650:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006652:	4b1e      	ldr	r3, [pc, #120]	; (80066cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006656:	4a1d      	ldr	r2, [pc, #116]	; (80066cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800665c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006664:	d10b      	bne.n	800667e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b80      	cmp	r3, #128	; 0x80
 800666a:	d919      	bls.n	80066a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2ba0      	cmp	r3, #160	; 0xa0
 8006670:	d902      	bls.n	8006678 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006672:	2302      	movs	r3, #2
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	e013      	b.n	80066a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006678:	2301      	movs	r3, #1
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	e010      	b.n	80066a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d902      	bls.n	800668a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006684:	2303      	movs	r3, #3
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	e00a      	b.n	80066a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b80      	cmp	r3, #128	; 0x80
 800668e:	d102      	bne.n	8006696 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006690:	2302      	movs	r3, #2
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	e004      	b.n	80066a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b70      	cmp	r3, #112	; 0x70
 800669a:	d101      	bne.n	80066a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800669c:	2301      	movs	r3, #1
 800669e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f023 0207 	bic.w	r2, r3, #7
 80066a8:	4909      	ldr	r1, [pc, #36]	; (80066d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80066b0:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d001      	beq.n	80066c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e000      	b.n	80066c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40021000 	.word	0x40021000
 80066d0:	40022000 	.word	0x40022000

080066d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066dc:	2300      	movs	r3, #0
 80066de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066e0:	2300      	movs	r3, #0
 80066e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d031      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80066f8:	d01a      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80066fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80066fe:	d814      	bhi.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006704:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006708:	d10f      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800670a:	4b5d      	ldr	r3, [pc, #372]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	4a5c      	ldr	r2, [pc, #368]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006714:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006716:	e00c      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3304      	adds	r3, #4
 800671c:	2100      	movs	r1, #0
 800671e:	4618      	mov	r0, r3
 8006720:	f000 f9de 	bl	8006ae0 <RCCEx_PLLSAI1_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006728:	e003      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	74fb      	strb	r3, [r7, #19]
      break;
 800672e:	e000      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10b      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006738:	4b51      	ldr	r3, [pc, #324]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006746:	494e      	ldr	r1, [pc, #312]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006748:	4313      	orrs	r3, r2
 800674a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800674e:	e001      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006750:	7cfb      	ldrb	r3, [r7, #19]
 8006752:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 809e 	beq.w	800689e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006762:	2300      	movs	r3, #0
 8006764:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006766:	4b46      	ldr	r3, [pc, #280]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006776:	2300      	movs	r3, #0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00d      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800677c:	4b40      	ldr	r3, [pc, #256]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800677e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006780:	4a3f      	ldr	r2, [pc, #252]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006786:	6593      	str	r3, [r2, #88]	; 0x58
 8006788:	4b3d      	ldr	r3, [pc, #244]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800678a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006794:	2301      	movs	r3, #1
 8006796:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006798:	4b3a      	ldr	r3, [pc, #232]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a39      	ldr	r2, [pc, #228]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800679e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067a4:	f7fe f836 	bl	8004814 <HAL_GetTick>
 80067a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80067aa:	e009      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ac:	f7fe f832 	bl	8004814 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d902      	bls.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	74fb      	strb	r3, [r7, #19]
        break;
 80067be:	e005      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80067c0:	4b30      	ldr	r3, [pc, #192]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0ef      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80067cc:	7cfb      	ldrb	r3, [r7, #19]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d15a      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067d2:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01e      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d019      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067fa:	4b21      	ldr	r3, [pc, #132]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006800:	4a1f      	ldr	r2, [pc, #124]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800680a:	4b1d      	ldr	r3, [pc, #116]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800680c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006810:	4a1b      	ldr	r2, [pc, #108]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800681a:	4a19      	ldr	r2, [pc, #100]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d016      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682c:	f7fd fff2 	bl	8004814 <HAL_GetTick>
 8006830:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006832:	e00b      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006834:	f7fd ffee 	bl	8004814 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006842:	4293      	cmp	r3, r2
 8006844:	d902      	bls.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	74fb      	strb	r3, [r7, #19]
            break;
 800684a:	e006      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800684c:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800684e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0ec      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800685a:	7cfb      	ldrb	r3, [r7, #19]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10b      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006866:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686e:	4904      	ldr	r1, [pc, #16]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006876:	e009      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006878:	7cfb      	ldrb	r3, [r7, #19]
 800687a:	74bb      	strb	r3, [r7, #18]
 800687c:	e006      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800687e:	bf00      	nop
 8006880:	40021000 	.word	0x40021000
 8006884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006888:	7cfb      	ldrb	r3, [r7, #19]
 800688a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800688c:	7c7b      	ldrb	r3, [r7, #17]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d105      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006892:	4b8a      	ldr	r3, [pc, #552]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006896:	4a89      	ldr	r2, [pc, #548]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800689c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068aa:	4b84      	ldr	r3, [pc, #528]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b0:	f023 0203 	bic.w	r2, r3, #3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	4980      	ldr	r1, [pc, #512]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068cc:	4b7b      	ldr	r3, [pc, #492]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d2:	f023 020c 	bic.w	r2, r3, #12
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	4978      	ldr	r1, [pc, #480]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068ee:	4b73      	ldr	r3, [pc, #460]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	496f      	ldr	r1, [pc, #444]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006910:	4b6a      	ldr	r3, [pc, #424]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006916:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691e:	4967      	ldr	r1, [pc, #412]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006920:	4313      	orrs	r3, r2
 8006922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006932:	4b62      	ldr	r3, [pc, #392]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	495e      	ldr	r1, [pc, #376]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006954:	4b59      	ldr	r3, [pc, #356]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	4956      	ldr	r1, [pc, #344]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006976:	4b51      	ldr	r3, [pc, #324]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	494d      	ldr	r1, [pc, #308]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d028      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006998:	4b48      	ldr	r3, [pc, #288]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	4945      	ldr	r1, [pc, #276]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069b6:	d106      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b8:	4b40      	ldr	r3, [pc, #256]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4a3f      	ldr	r2, [pc, #252]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069c2:	60d3      	str	r3, [r2, #12]
 80069c4:	e011      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069ce:	d10c      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3304      	adds	r3, #4
 80069d4:	2101      	movs	r1, #1
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f882 	bl	8006ae0 <RCCEx_PLLSAI1_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80069e0:	7cfb      	ldrb	r3, [r7, #19]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80069e6:	7cfb      	ldrb	r3, [r7, #19]
 80069e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d028      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069f6:	4b31      	ldr	r3, [pc, #196]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a04:	492d      	ldr	r1, [pc, #180]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a14:	d106      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a16:	4b29      	ldr	r3, [pc, #164]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	4a28      	ldr	r2, [pc, #160]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a20:	60d3      	str	r3, [r2, #12]
 8006a22:	e011      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3304      	adds	r3, #4
 8006a32:	2101      	movs	r1, #1
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 f853 	bl	8006ae0 <RCCEx_PLLSAI1_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a3e:	7cfb      	ldrb	r3, [r7, #19]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006a44:	7cfb      	ldrb	r3, [r7, #19]
 8006a46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01c      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a54:	4b19      	ldr	r3, [pc, #100]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a62:	4916      	ldr	r1, [pc, #88]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a72:	d10c      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3304      	adds	r3, #4
 8006a78:	2102      	movs	r1, #2
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 f830 	bl	8006ae0 <RCCEx_PLLSAI1_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a84:	7cfb      	ldrb	r3, [r7, #19]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006a8a:	7cfb      	ldrb	r3, [r7, #19]
 8006a8c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a9a:	4b08      	ldr	r3, [pc, #32]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa8:	4904      	ldr	r1, [pc, #16]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006ab0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40021000 	.word	0x40021000

08006ac0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a04      	ldr	r2, [pc, #16]	; (8006adc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006aca:	f043 0304 	orr.w	r3, r3, #4
 8006ace:	6013      	str	r3, [r2, #0]
}
 8006ad0:	bf00      	nop
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40021000 	.word	0x40021000

08006ae0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006aee:	4b74      	ldr	r3, [pc, #464]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d018      	beq.n	8006b2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006afa:	4b71      	ldr	r3, [pc, #452]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f003 0203 	and.w	r2, r3, #3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d10d      	bne.n	8006b26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
       ||
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b12:	4b6b      	ldr	r3, [pc, #428]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	091b      	lsrs	r3, r3, #4
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
       ||
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d047      	beq.n	8006bb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	73fb      	strb	r3, [r7, #15]
 8006b2a:	e044      	b.n	8006bb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d018      	beq.n	8006b66 <RCCEx_PLLSAI1_Config+0x86>
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d825      	bhi.n	8006b84 <RCCEx_PLLSAI1_Config+0xa4>
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d002      	beq.n	8006b42 <RCCEx_PLLSAI1_Config+0x62>
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d009      	beq.n	8006b54 <RCCEx_PLLSAI1_Config+0x74>
 8006b40:	e020      	b.n	8006b84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b42:	4b5f      	ldr	r3, [pc, #380]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d11d      	bne.n	8006b8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b52:	e01a      	b.n	8006b8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b54:	4b5a      	ldr	r3, [pc, #360]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d116      	bne.n	8006b8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b64:	e013      	b.n	8006b8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b66:	4b56      	ldr	r3, [pc, #344]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10f      	bne.n	8006b92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b72:	4b53      	ldr	r3, [pc, #332]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b82:	e006      	b.n	8006b92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	73fb      	strb	r3, [r7, #15]
      break;
 8006b88:	e004      	b.n	8006b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b8a:	bf00      	nop
 8006b8c:	e002      	b.n	8006b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b8e:	bf00      	nop
 8006b90:	e000      	b.n	8006b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b92:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10d      	bne.n	8006bb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b9a:	4b49      	ldr	r3, [pc, #292]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6819      	ldr	r1, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	4943      	ldr	r1, [pc, #268]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d17c      	bne.n	8006cb6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006bbc:	4b40      	ldr	r3, [pc, #256]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a3f      	ldr	r2, [pc, #252]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc8:	f7fd fe24 	bl	8004814 <HAL_GetTick>
 8006bcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006bce:	e009      	b.n	8006be4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bd0:	f7fd fe20 	bl	8004814 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d902      	bls.n	8006be4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	73fb      	strb	r3, [r7, #15]
        break;
 8006be2:	e005      	b.n	8006bf0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006be4:	4b36      	ldr	r3, [pc, #216]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1ef      	bne.n	8006bd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d15f      	bne.n	8006cb6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d110      	bne.n	8006c1e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bfc:	4b30      	ldr	r3, [pc, #192]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006c04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6892      	ldr	r2, [r2, #8]
 8006c0c:	0211      	lsls	r1, r2, #8
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	68d2      	ldr	r2, [r2, #12]
 8006c12:	06d2      	lsls	r2, r2, #27
 8006c14:	430a      	orrs	r2, r1
 8006c16:	492a      	ldr	r1, [pc, #168]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	610b      	str	r3, [r1, #16]
 8006c1c:	e027      	b.n	8006c6e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d112      	bne.n	8006c4a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c24:	4b26      	ldr	r3, [pc, #152]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006c2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6892      	ldr	r2, [r2, #8]
 8006c34:	0211      	lsls	r1, r2, #8
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	6912      	ldr	r2, [r2, #16]
 8006c3a:	0852      	lsrs	r2, r2, #1
 8006c3c:	3a01      	subs	r2, #1
 8006c3e:	0552      	lsls	r2, r2, #21
 8006c40:	430a      	orrs	r2, r1
 8006c42:	491f      	ldr	r1, [pc, #124]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	610b      	str	r3, [r1, #16]
 8006c48:	e011      	b.n	8006c6e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c4a:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006c52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6892      	ldr	r2, [r2, #8]
 8006c5a:	0211      	lsls	r1, r2, #8
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6952      	ldr	r2, [r2, #20]
 8006c60:	0852      	lsrs	r2, r2, #1
 8006c62:	3a01      	subs	r2, #1
 8006c64:	0652      	lsls	r2, r2, #25
 8006c66:	430a      	orrs	r2, r1
 8006c68:	4915      	ldr	r1, [pc, #84]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c6e:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a13      	ldr	r2, [pc, #76]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7a:	f7fd fdcb 	bl	8004814 <HAL_GetTick>
 8006c7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c80:	e009      	b.n	8006c96 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c82:	f7fd fdc7 	bl	8004814 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d902      	bls.n	8006c96 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	73fb      	strb	r3, [r7, #15]
          break;
 8006c94:	e005      	b.n	8006ca2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c96:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0ef      	beq.n	8006c82 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	4903      	ldr	r1, [pc, #12]	; (8006cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	40021000 	.word	0x40021000

08006cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e049      	b.n	8006d6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fd fb96 	bl	800441c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f000 faca 	bl	800729c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d001      	beq.n	8006d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e03b      	b.n	8006e04 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a19      	ldr	r2, [pc, #100]	; (8006e10 <HAL_TIM_Base_Start_IT+0x9c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <HAL_TIM_Base_Start_IT+0x4e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db6:	d004      	beq.n	8006dc2 <HAL_TIM_Base_Start_IT+0x4e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <HAL_TIM_Base_Start_IT+0xa0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d115      	bne.n	8006dee <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <HAL_TIM_Base_Start_IT+0xa4>)
 8006dca:	4013      	ands	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b06      	cmp	r3, #6
 8006dd2:	d015      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x8c>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dda:	d011      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dec:	e008      	b.n	8006e00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0201 	orr.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e000      	b.n	8006e02 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	40012c00 	.word	0x40012c00
 8006e14:	40014000 	.word	0x40014000
 8006e18:	00010007 	.word	0x00010007

08006e1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0201 	bic.w	r2, r2, #1
 8006e32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6a1a      	ldr	r2, [r3, #32]
 8006e3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10f      	bne.n	8006e64 <HAL_TIM_Base_Stop_IT+0x48>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6a1a      	ldr	r2, [r3, #32]
 8006e4a:	f240 4344 	movw	r3, #1092	; 0x444
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d107      	bne.n	8006e64 <HAL_TIM_Base_Stop_IT+0x48>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0201 	bic.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d122      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d11b      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f06f 0202 	mvn.w	r2, #2
 8006ea6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f9ce 	bl	800725e <HAL_TIM_IC_CaptureCallback>
 8006ec2:	e005      	b.n	8006ed0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f9c0 	bl	800724a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f9d1 	bl	8007272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d122      	bne.n	8006f2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d11b      	bne.n	8006f2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f06f 0204 	mvn.w	r2, #4
 8006efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f9a4 	bl	800725e <HAL_TIM_IC_CaptureCallback>
 8006f16:	e005      	b.n	8006f24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f996 	bl	800724a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f9a7 	bl	8007272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f003 0308 	and.w	r3, r3, #8
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d122      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d11b      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f06f 0208 	mvn.w	r2, #8
 8006f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2204      	movs	r2, #4
 8006f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f97a 	bl	800725e <HAL_TIM_IC_CaptureCallback>
 8006f6a:	e005      	b.n	8006f78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f96c 	bl	800724a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f97d 	bl	8007272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b10      	cmp	r3, #16
 8006f8a:	d122      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d11b      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f06f 0210 	mvn.w	r2, #16
 8006fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f950 	bl	800725e <HAL_TIM_IC_CaptureCallback>
 8006fbe:	e005      	b.n	8006fcc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f942 	bl	800724a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f953 	bl	8007272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d10e      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d107      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f06f 0201 	mvn.w	r2, #1
 8006ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fd f94d 	bl	8004298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007008:	2b80      	cmp	r3, #128	; 0x80
 800700a:	d10e      	bne.n	800702a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	2b80      	cmp	r3, #128	; 0x80
 8007018:	d107      	bne.n	800702a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 faa7 	bl	8007578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007038:	d10e      	bne.n	8007058 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007044:	2b80      	cmp	r3, #128	; 0x80
 8007046:	d107      	bne.n	8007058 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa9a 	bl	800758c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007062:	2b40      	cmp	r3, #64	; 0x40
 8007064:	d10e      	bne.n	8007084 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d107      	bne.n	8007084 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800707c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f901 	bl	8007286 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b20      	cmp	r3, #32
 8007090:	d10e      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b20      	cmp	r3, #32
 800709e:	d107      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f06f 0220 	mvn.w	r2, #32
 80070a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa5a 	bl	8007564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_TIM_ConfigClockSource+0x1c>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e0b6      	b.n	8007242 <HAL_TIM_ConfigClockSource+0x18a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007110:	d03e      	beq.n	8007190 <HAL_TIM_ConfigClockSource+0xd8>
 8007112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007116:	f200 8087 	bhi.w	8007228 <HAL_TIM_ConfigClockSource+0x170>
 800711a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711e:	f000 8086 	beq.w	800722e <HAL_TIM_ConfigClockSource+0x176>
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007126:	d87f      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007128:	2b70      	cmp	r3, #112	; 0x70
 800712a:	d01a      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0xaa>
 800712c:	2b70      	cmp	r3, #112	; 0x70
 800712e:	d87b      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007130:	2b60      	cmp	r3, #96	; 0x60
 8007132:	d050      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x11e>
 8007134:	2b60      	cmp	r3, #96	; 0x60
 8007136:	d877      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007138:	2b50      	cmp	r3, #80	; 0x50
 800713a:	d03c      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0xfe>
 800713c:	2b50      	cmp	r3, #80	; 0x50
 800713e:	d873      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d058      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x13e>
 8007144:	2b40      	cmp	r3, #64	; 0x40
 8007146:	d86f      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007148:	2b30      	cmp	r3, #48	; 0x30
 800714a:	d064      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15e>
 800714c:	2b30      	cmp	r3, #48	; 0x30
 800714e:	d86b      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007150:	2b20      	cmp	r3, #32
 8007152:	d060      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15e>
 8007154:	2b20      	cmp	r3, #32
 8007156:	d867      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d05c      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15e>
 800715c:	2b10      	cmp	r3, #16
 800715e:	d05a      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15e>
 8007160:	e062      	b.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6899      	ldr	r1, [r3, #8]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f000 f971 	bl	8007458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	609a      	str	r2, [r3, #8]
      break;
 800718e:	e04f      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	6899      	ldr	r1, [r3, #8]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f000 f95a 	bl	8007458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071b2:	609a      	str	r2, [r3, #8]
      break;
 80071b4:	e03c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	6859      	ldr	r1, [r3, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f000 f8ce 	bl	8007364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2150      	movs	r1, #80	; 0x50
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 f927 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 80071d4:	e02c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6859      	ldr	r1, [r3, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f000 f8ed 	bl	80073c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2160      	movs	r1, #96	; 0x60
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 f917 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 80071f4:	e01c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	461a      	mov	r2, r3
 8007204:	f000 f8ae 	bl	8007364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2140      	movs	r1, #64	; 0x40
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f907 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 8007214:	e00c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4619      	mov	r1, r3
 8007220:	4610      	mov	r0, r2
 8007222:	f000 f8fe 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 8007226:	e003      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	73fb      	strb	r3, [r7, #15]
      break;
 800722c:	e000      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800722e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a2a      	ldr	r2, [pc, #168]	; (8007358 <TIM_Base_SetConfig+0xbc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d003      	beq.n	80072bc <TIM_Base_SetConfig+0x20>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ba:	d108      	bne.n	80072ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a21      	ldr	r2, [pc, #132]	; (8007358 <TIM_Base_SetConfig+0xbc>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00b      	beq.n	80072ee <TIM_Base_SetConfig+0x52>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072dc:	d007      	beq.n	80072ee <TIM_Base_SetConfig+0x52>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a1e      	ldr	r2, [pc, #120]	; (800735c <TIM_Base_SetConfig+0xc0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d003      	beq.n	80072ee <TIM_Base_SetConfig+0x52>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a1d      	ldr	r2, [pc, #116]	; (8007360 <TIM_Base_SetConfig+0xc4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d108      	bne.n	8007300 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a0c      	ldr	r2, [pc, #48]	; (8007358 <TIM_Base_SetConfig+0xbc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d007      	beq.n	800733c <TIM_Base_SetConfig+0xa0>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a0b      	ldr	r2, [pc, #44]	; (800735c <TIM_Base_SetConfig+0xc0>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_Base_SetConfig+0xa0>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a0a      	ldr	r2, [pc, #40]	; (8007360 <TIM_Base_SetConfig+0xc4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d103      	bne.n	8007344 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	691a      	ldr	r2, [r3, #16]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	615a      	str	r2, [r3, #20]
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40012c00 	.word	0x40012c00
 800735c:	40014000 	.word	0x40014000
 8007360:	40014400 	.word	0x40014400

08007364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	f023 0201 	bic.w	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800738e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	4313      	orrs	r3, r2
 8007398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f023 030a 	bic.w	r3, r3, #10
 80073a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	bf00      	nop
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b087      	sub	sp, #28
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f023 0210 	bic.w	r2, r3, #16
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	031b      	lsls	r3, r3, #12
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	4313      	orrs	r3, r2
 8007408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	621a      	str	r2, [r3, #32]
}
 8007416:	bf00      	nop
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007422:	b480      	push	{r7}
 8007424:	b085      	sub	sp, #20
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	f043 0307 	orr.w	r3, r3, #7
 8007444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	609a      	str	r2, [r3, #8]
}
 800744c:	bf00      	nop
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	021a      	lsls	r2, r3, #8
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	431a      	orrs	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4313      	orrs	r3, r2
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	609a      	str	r2, [r3, #8]
}
 800748c:	bf00      	nop
 800748e:	371c      	adds	r7, #28
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e04f      	b.n	8007550 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a21      	ldr	r2, [pc, #132]	; (800755c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d108      	bne.n	80074ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a14      	ldr	r2, [pc, #80]	; (800755c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d009      	beq.n	8007524 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007518:	d004      	beq.n	8007524 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a10      	ldr	r2, [pc, #64]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d10c      	bne.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800752a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	4313      	orrs	r3, r2
 8007534:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	40012c00 	.word	0x40012c00
 8007560:	40014000 	.word	0x40014000

08007564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e040      	b.n	8007634 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d106      	bne.n	80075c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7fc ff6a 	bl	800449c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2224      	movs	r2, #36	; 0x24
 80075cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0201 	bic.w	r2, r2, #1
 80075dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f8c0 	bl	8007764 <UART_SetConfig>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e022      	b.n	8007634 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fae0 	bl	8007bbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800760a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800761a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0201 	orr.w	r2, r2, #1
 800762a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fb67 	bl	8007d00 <UART_CheckIdleState>
 8007632:	4603      	mov	r3, r0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08a      	sub	sp, #40	; 0x28
 8007640:	af02      	add	r7, sp, #8
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	4613      	mov	r3, r2
 800764a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007650:	2b20      	cmp	r3, #32
 8007652:	f040 8082 	bne.w	800775a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <HAL_UART_Transmit+0x26>
 800765c:	88fb      	ldrh	r3, [r7, #6]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e07a      	b.n	800775c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <HAL_UART_Transmit+0x38>
 8007670:	2302      	movs	r3, #2
 8007672:	e073      	b.n	800775c <HAL_UART_Transmit+0x120>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2221      	movs	r2, #33	; 0x21
 8007688:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800768a:	f7fd f8c3 	bl	8004814 <HAL_GetTick>
 800768e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	88fa      	ldrh	r2, [r7, #6]
 8007694:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	88fa      	ldrh	r2, [r7, #6]
 800769c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a8:	d108      	bne.n	80076bc <HAL_UART_Transmit+0x80>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d104      	bne.n	80076bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	61bb      	str	r3, [r7, #24]
 80076ba:	e003      	b.n	80076c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80076cc:	e02d      	b.n	800772a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2200      	movs	r2, #0
 80076d6:	2180      	movs	r1, #128	; 0x80
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fb5a 	bl	8007d92 <UART_WaitOnFlagUntilTimeout>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e039      	b.n	800775c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10b      	bne.n	8007706 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	881a      	ldrh	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076fa:	b292      	uxth	r2, r2
 80076fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	3302      	adds	r3, #2
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	e008      	b.n	8007718 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	781a      	ldrb	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	b292      	uxth	r2, r2
 8007710:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	3301      	adds	r3, #1
 8007716:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800771e:	b29b      	uxth	r3, r3
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1cb      	bne.n	80076ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2200      	movs	r2, #0
 800773e:	2140      	movs	r1, #64	; 0x40
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 fb26 	bl	8007d92 <UART_WaitOnFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e005      	b.n	800775c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2220      	movs	r2, #32
 8007754:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	e000      	b.n	800775c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800775a:	2302      	movs	r3, #2
  }
}
 800775c:	4618      	mov	r0, r3
 800775e:	3720      	adds	r7, #32
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007768:	b08a      	sub	sp, #40	; 0x28
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	431a      	orrs	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	431a      	orrs	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	4313      	orrs	r3, r2
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	4bb4      	ldr	r3, [pc, #720]	; (8007a64 <UART_SetConfig+0x300>)
 8007794:	4013      	ands	r3, r2
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	6812      	ldr	r2, [r2, #0]
 800779a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800779c:	430b      	orrs	r3, r1
 800779e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4aa9      	ldr	r2, [pc, #676]	; (8007a68 <UART_SetConfig+0x304>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077cc:	4313      	orrs	r3, r2
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e0:	430a      	orrs	r2, r1
 80077e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4aa0      	ldr	r2, [pc, #640]	; (8007a6c <UART_SetConfig+0x308>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d126      	bne.n	800783c <UART_SetConfig+0xd8>
 80077ee:	4ba0      	ldr	r3, [pc, #640]	; (8007a70 <UART_SetConfig+0x30c>)
 80077f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f4:	f003 0303 	and.w	r3, r3, #3
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d81b      	bhi.n	8007834 <UART_SetConfig+0xd0>
 80077fc:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <UART_SetConfig+0xa0>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	08007815 	.word	0x08007815
 8007808:	08007825 	.word	0x08007825
 800780c:	0800781d 	.word	0x0800781d
 8007810:	0800782d 	.word	0x0800782d
 8007814:	2301      	movs	r3, #1
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781a:	e080      	b.n	800791e <UART_SetConfig+0x1ba>
 800781c:	2302      	movs	r3, #2
 800781e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007822:	e07c      	b.n	800791e <UART_SetConfig+0x1ba>
 8007824:	2304      	movs	r3, #4
 8007826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782a:	e078      	b.n	800791e <UART_SetConfig+0x1ba>
 800782c:	2308      	movs	r3, #8
 800782e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007832:	e074      	b.n	800791e <UART_SetConfig+0x1ba>
 8007834:	2310      	movs	r3, #16
 8007836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800783a:	e070      	b.n	800791e <UART_SetConfig+0x1ba>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a8c      	ldr	r2, [pc, #560]	; (8007a74 <UART_SetConfig+0x310>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d138      	bne.n	80078b8 <UART_SetConfig+0x154>
 8007846:	4b8a      	ldr	r3, [pc, #552]	; (8007a70 <UART_SetConfig+0x30c>)
 8007848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784c:	f003 030c 	and.w	r3, r3, #12
 8007850:	2b0c      	cmp	r3, #12
 8007852:	d82d      	bhi.n	80078b0 <UART_SetConfig+0x14c>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <UART_SetConfig+0xf8>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	08007891 	.word	0x08007891
 8007860:	080078b1 	.word	0x080078b1
 8007864:	080078b1 	.word	0x080078b1
 8007868:	080078b1 	.word	0x080078b1
 800786c:	080078a1 	.word	0x080078a1
 8007870:	080078b1 	.word	0x080078b1
 8007874:	080078b1 	.word	0x080078b1
 8007878:	080078b1 	.word	0x080078b1
 800787c:	08007899 	.word	0x08007899
 8007880:	080078b1 	.word	0x080078b1
 8007884:	080078b1 	.word	0x080078b1
 8007888:	080078b1 	.word	0x080078b1
 800788c:	080078a9 	.word	0x080078a9
 8007890:	2300      	movs	r3, #0
 8007892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007896:	e042      	b.n	800791e <UART_SetConfig+0x1ba>
 8007898:	2302      	movs	r3, #2
 800789a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800789e:	e03e      	b.n	800791e <UART_SetConfig+0x1ba>
 80078a0:	2304      	movs	r3, #4
 80078a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a6:	e03a      	b.n	800791e <UART_SetConfig+0x1ba>
 80078a8:	2308      	movs	r3, #8
 80078aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ae:	e036      	b.n	800791e <UART_SetConfig+0x1ba>
 80078b0:	2310      	movs	r3, #16
 80078b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b6:	e032      	b.n	800791e <UART_SetConfig+0x1ba>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a6a      	ldr	r2, [pc, #424]	; (8007a68 <UART_SetConfig+0x304>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d12a      	bne.n	8007918 <UART_SetConfig+0x1b4>
 80078c2:	4b6b      	ldr	r3, [pc, #428]	; (8007a70 <UART_SetConfig+0x30c>)
 80078c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078d0:	d01a      	beq.n	8007908 <UART_SetConfig+0x1a4>
 80078d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078d6:	d81b      	bhi.n	8007910 <UART_SetConfig+0x1ac>
 80078d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078dc:	d00c      	beq.n	80078f8 <UART_SetConfig+0x194>
 80078de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e2:	d815      	bhi.n	8007910 <UART_SetConfig+0x1ac>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <UART_SetConfig+0x18c>
 80078e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ec:	d008      	beq.n	8007900 <UART_SetConfig+0x19c>
 80078ee:	e00f      	b.n	8007910 <UART_SetConfig+0x1ac>
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078f6:	e012      	b.n	800791e <UART_SetConfig+0x1ba>
 80078f8:	2302      	movs	r3, #2
 80078fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078fe:	e00e      	b.n	800791e <UART_SetConfig+0x1ba>
 8007900:	2304      	movs	r3, #4
 8007902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007906:	e00a      	b.n	800791e <UART_SetConfig+0x1ba>
 8007908:	2308      	movs	r3, #8
 800790a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800790e:	e006      	b.n	800791e <UART_SetConfig+0x1ba>
 8007910:	2310      	movs	r3, #16
 8007912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007916:	e002      	b.n	800791e <UART_SetConfig+0x1ba>
 8007918:	2310      	movs	r3, #16
 800791a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a51      	ldr	r2, [pc, #324]	; (8007a68 <UART_SetConfig+0x304>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d17a      	bne.n	8007a1e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007928:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800792c:	2b08      	cmp	r3, #8
 800792e:	d824      	bhi.n	800797a <UART_SetConfig+0x216>
 8007930:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <UART_SetConfig+0x1d4>)
 8007932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007936:	bf00      	nop
 8007938:	0800795d 	.word	0x0800795d
 800793c:	0800797b 	.word	0x0800797b
 8007940:	08007965 	.word	0x08007965
 8007944:	0800797b 	.word	0x0800797b
 8007948:	0800796b 	.word	0x0800796b
 800794c:	0800797b 	.word	0x0800797b
 8007950:	0800797b 	.word	0x0800797b
 8007954:	0800797b 	.word	0x0800797b
 8007958:	08007973 	.word	0x08007973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800795c:	f7fe fdfc 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 8007960:	61f8      	str	r0, [r7, #28]
        break;
 8007962:	e010      	b.n	8007986 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007964:	4b44      	ldr	r3, [pc, #272]	; (8007a78 <UART_SetConfig+0x314>)
 8007966:	61fb      	str	r3, [r7, #28]
        break;
 8007968:	e00d      	b.n	8007986 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800796a:	f7fe fd5d 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 800796e:	61f8      	str	r0, [r7, #28]
        break;
 8007970:	e009      	b.n	8007986 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007976:	61fb      	str	r3, [r7, #28]
        break;
 8007978:	e005      	b.n	8007986 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007984:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8107 	beq.w	8007b9c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	4613      	mov	r3, r2
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	4413      	add	r3, r2
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	429a      	cmp	r2, r3
 800799c:	d305      	bcc.n	80079aa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d903      	bls.n	80079b2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079b0:	e0f4      	b.n	8007b9c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	2200      	movs	r2, #0
 80079b6:	461c      	mov	r4, r3
 80079b8:	4615      	mov	r5, r2
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	022b      	lsls	r3, r5, #8
 80079c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80079c8:	0222      	lsls	r2, r4, #8
 80079ca:	68f9      	ldr	r1, [r7, #12]
 80079cc:	6849      	ldr	r1, [r1, #4]
 80079ce:	0849      	lsrs	r1, r1, #1
 80079d0:	2000      	movs	r0, #0
 80079d2:	4688      	mov	r8, r1
 80079d4:	4681      	mov	r9, r0
 80079d6:	eb12 0a08 	adds.w	sl, r2, r8
 80079da:	eb43 0b09 	adc.w	fp, r3, r9
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ec:	4650      	mov	r0, sl
 80079ee:	4659      	mov	r1, fp
 80079f0:	f7f9 f8b2 	bl	8000b58 <__aeabi_uldivmod>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4613      	mov	r3, r2
 80079fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a02:	d308      	bcc.n	8007a16 <UART_SetConfig+0x2b2>
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0a:	d204      	bcs.n	8007a16 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	60da      	str	r2, [r3, #12]
 8007a14:	e0c2      	b.n	8007b9c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a1c:	e0be      	b.n	8007b9c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a26:	d16a      	bne.n	8007afe <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007a28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d834      	bhi.n	8007a9a <UART_SetConfig+0x336>
 8007a30:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <UART_SetConfig+0x2d4>)
 8007a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a36:	bf00      	nop
 8007a38:	08007a5d 	.word	0x08007a5d
 8007a3c:	08007a7d 	.word	0x08007a7d
 8007a40:	08007a85 	.word	0x08007a85
 8007a44:	08007a9b 	.word	0x08007a9b
 8007a48:	08007a8b 	.word	0x08007a8b
 8007a4c:	08007a9b 	.word	0x08007a9b
 8007a50:	08007a9b 	.word	0x08007a9b
 8007a54:	08007a9b 	.word	0x08007a9b
 8007a58:	08007a93 	.word	0x08007a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a5c:	f7fe fd7c 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 8007a60:	61f8      	str	r0, [r7, #28]
        break;
 8007a62:	e020      	b.n	8007aa6 <UART_SetConfig+0x342>
 8007a64:	efff69f3 	.word	0xefff69f3
 8007a68:	40008000 	.word	0x40008000
 8007a6c:	40013800 	.word	0x40013800
 8007a70:	40021000 	.word	0x40021000
 8007a74:	40004400 	.word	0x40004400
 8007a78:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a7c:	f7fe fd82 	bl	8006584 <HAL_RCC_GetPCLK2Freq>
 8007a80:	61f8      	str	r0, [r7, #28]
        break;
 8007a82:	e010      	b.n	8007aa6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a84:	4b4c      	ldr	r3, [pc, #304]	; (8007bb8 <UART_SetConfig+0x454>)
 8007a86:	61fb      	str	r3, [r7, #28]
        break;
 8007a88:	e00d      	b.n	8007aa6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a8a:	f7fe fccd 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 8007a8e:	61f8      	str	r0, [r7, #28]
        break;
 8007a90:	e009      	b.n	8007aa6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a96:	61fb      	str	r3, [r7, #28]
        break;
 8007a98:	e005      	b.n	8007aa6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007aa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d077      	beq.n	8007b9c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	005a      	lsls	r2, r3, #1
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	085b      	lsrs	r3, r3, #1
 8007ab6:	441a      	add	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	2b0f      	cmp	r3, #15
 8007ac6:	d916      	bls.n	8007af6 <UART_SetConfig+0x392>
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ace:	d212      	bcs.n	8007af6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f023 030f 	bic.w	r3, r3, #15
 8007ad8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	085b      	lsrs	r3, r3, #1
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f003 0307 	and.w	r3, r3, #7
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	8afb      	ldrh	r3, [r7, #22]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	8afa      	ldrh	r2, [r7, #22]
 8007af2:	60da      	str	r2, [r3, #12]
 8007af4:	e052      	b.n	8007b9c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007afc:	e04e      	b.n	8007b9c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007afe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b02:	2b08      	cmp	r3, #8
 8007b04:	d827      	bhi.n	8007b56 <UART_SetConfig+0x3f2>
 8007b06:	a201      	add	r2, pc, #4	; (adr r2, 8007b0c <UART_SetConfig+0x3a8>)
 8007b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0c:	08007b31 	.word	0x08007b31
 8007b10:	08007b39 	.word	0x08007b39
 8007b14:	08007b41 	.word	0x08007b41
 8007b18:	08007b57 	.word	0x08007b57
 8007b1c:	08007b47 	.word	0x08007b47
 8007b20:	08007b57 	.word	0x08007b57
 8007b24:	08007b57 	.word	0x08007b57
 8007b28:	08007b57 	.word	0x08007b57
 8007b2c:	08007b4f 	.word	0x08007b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b30:	f7fe fd12 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 8007b34:	61f8      	str	r0, [r7, #28]
        break;
 8007b36:	e014      	b.n	8007b62 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b38:	f7fe fd24 	bl	8006584 <HAL_RCC_GetPCLK2Freq>
 8007b3c:	61f8      	str	r0, [r7, #28]
        break;
 8007b3e:	e010      	b.n	8007b62 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b40:	4b1d      	ldr	r3, [pc, #116]	; (8007bb8 <UART_SetConfig+0x454>)
 8007b42:	61fb      	str	r3, [r7, #28]
        break;
 8007b44:	e00d      	b.n	8007b62 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b46:	f7fe fc6f 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 8007b4a:	61f8      	str	r0, [r7, #28]
        break;
 8007b4c:	e009      	b.n	8007b62 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b52:	61fb      	str	r3, [r7, #28]
        break;
 8007b54:	e005      	b.n	8007b62 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b60:	bf00      	nop
    }

    if (pclk != 0U)
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d019      	beq.n	8007b9c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	085a      	lsrs	r2, r3, #1
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	441a      	add	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	2b0f      	cmp	r3, #15
 8007b80:	d909      	bls.n	8007b96 <UART_SetConfig+0x432>
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b88:	d205      	bcs.n	8007b96 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60da      	str	r2, [r3, #12]
 8007b94:	e002      	b.n	8007b9c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007ba8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3728      	adds	r7, #40	; 0x28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bb6:	bf00      	nop
 8007bb8:	00f42400 	.word	0x00f42400

08007bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	f003 0310 	and.w	r3, r3, #16
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	f003 0320 	and.w	r3, r3, #32
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d01a      	beq.n	8007cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cba:	d10a      	bne.n	8007cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	605a      	str	r2, [r3, #4]
  }
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af02      	add	r7, sp, #8
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d10:	f7fc fd80 	bl	8004814 <HAL_GetTick>
 8007d14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d10e      	bne.n	8007d42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f82d 	bl	8007d92 <UART_WaitOnFlagUntilTimeout>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e023      	b.n	8007d8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d10e      	bne.n	8007d6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f817 	bl	8007d92 <UART_WaitOnFlagUntilTimeout>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e00d      	b.n	8007d8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2220      	movs	r2, #32
 8007d78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b09c      	sub	sp, #112	; 0x70
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	603b      	str	r3, [r7, #0]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007da2:	e0a5      	b.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007daa:	f000 80a1 	beq.w	8007ef0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dae:	f7fc fd31 	bl	8004814 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d302      	bcc.n	8007dc4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d13e      	bne.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007de4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007de8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e6      	bne.n	8007dc4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3308      	adds	r3, #8
 8007e14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e16:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e5      	bne.n	8007df6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2220      	movs	r2, #32
 8007e34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e067      	b.n	8007f12 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d04f      	beq.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e5e:	d147      	bne.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e68:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e88:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e6      	bne.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f023 0301 	bic.w	r3, r3, #1
 8007eb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3308      	adds	r3, #8
 8007eba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ebc:	623a      	str	r2, [r7, #32]
 8007ebe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	69f9      	ldr	r1, [r7, #28]
 8007ec2:	6a3a      	ldr	r2, [r7, #32]
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e5      	bne.n	8007e9c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e010      	b.n	8007f12 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	69da      	ldr	r2, [r3, #28]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	bf0c      	ite	eq
 8007f00:	2301      	moveq	r3, #1
 8007f02:	2300      	movne	r3, #0
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	f43f af4a 	beq.w	8007da4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3770      	adds	r7, #112	; 0x70
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <__NVIC_SetPriority>:
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4603      	mov	r3, r0
 8007f24:	6039      	str	r1, [r7, #0]
 8007f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	db0a      	blt.n	8007f46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	490c      	ldr	r1, [pc, #48]	; (8007f68 <__NVIC_SetPriority+0x4c>)
 8007f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f3a:	0112      	lsls	r2, r2, #4
 8007f3c:	b2d2      	uxtb	r2, r2
 8007f3e:	440b      	add	r3, r1
 8007f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f44:	e00a      	b.n	8007f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	4908      	ldr	r1, [pc, #32]	; (8007f6c <__NVIC_SetPriority+0x50>)
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	3b04      	subs	r3, #4
 8007f54:	0112      	lsls	r2, r2, #4
 8007f56:	b2d2      	uxtb	r2, r2
 8007f58:	440b      	add	r3, r1
 8007f5a:	761a      	strb	r2, [r3, #24]
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	e000e100 	.word	0xe000e100
 8007f6c:	e000ed00 	.word	0xe000ed00

08007f70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <SysTick_Handler+0x1c>)
 8007f76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f78:	f001 fd28 	bl	80099cc <xTaskGetSchedulerState>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d001      	beq.n	8007f86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f82:	f002 fb11 	bl	800a5a8 <xPortSysTickHandler>
  }
}
 8007f86:	bf00      	nop
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	e000e010 	.word	0xe000e010

08007f90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f94:	2100      	movs	r1, #0
 8007f96:	f06f 0004 	mvn.w	r0, #4
 8007f9a:	f7ff ffbf 	bl	8007f1c <__NVIC_SetPriority>
#endif
}
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007faa:	f3ef 8305 	mrs	r3, IPSR
 8007fae:	603b      	str	r3, [r7, #0]
  return(result);
 8007fb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007fb6:	f06f 0305 	mvn.w	r3, #5
 8007fba:	607b      	str	r3, [r7, #4]
 8007fbc:	e00c      	b.n	8007fd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007fbe:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <osKernelInitialize+0x44>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d105      	bne.n	8007fd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007fc6:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <osKernelInitialize+0x44>)
 8007fc8:	2201      	movs	r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	607b      	str	r3, [r7, #4]
 8007fd0:	e002      	b.n	8007fd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fd8:	687b      	ldr	r3, [r7, #4]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	20001254 	.word	0x20001254

08007fec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ff2:	f3ef 8305 	mrs	r3, IPSR
 8007ff6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ff8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007ffe:	f06f 0305 	mvn.w	r3, #5
 8008002:	607b      	str	r3, [r7, #4]
 8008004:	e010      	b.n	8008028 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008006:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <osKernelStart+0x48>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d109      	bne.n	8008022 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800800e:	f7ff ffbf 	bl	8007f90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008012:	4b08      	ldr	r3, [pc, #32]	; (8008034 <osKernelStart+0x48>)
 8008014:	2202      	movs	r2, #2
 8008016:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008018:	f001 f87c 	bl	8009114 <vTaskStartScheduler>
      stat = osOK;
 800801c:	2300      	movs	r3, #0
 800801e:	607b      	str	r3, [r7, #4]
 8008020:	e002      	b.n	8008028 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008026:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008028:	687b      	ldr	r3, [r7, #4]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20001254 	.word	0x20001254

08008038 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008038:	b580      	push	{r7, lr}
 800803a:	b08e      	sub	sp, #56	; 0x38
 800803c:	af04      	add	r7, sp, #16
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008044:	2300      	movs	r3, #0
 8008046:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008048:	f3ef 8305 	mrs	r3, IPSR
 800804c:	617b      	str	r3, [r7, #20]
  return(result);
 800804e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008050:	2b00      	cmp	r3, #0
 8008052:	d17e      	bne.n	8008152 <osThreadNew+0x11a>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d07b      	beq.n	8008152 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800805a:	2380      	movs	r3, #128	; 0x80
 800805c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800805e:	2318      	movs	r3, #24
 8008060:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800806a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d045      	beq.n	80080fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <osThreadNew+0x48>
        name = attr->name;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d008      	beq.n	80080a6 <osThreadNew+0x6e>
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	2b38      	cmp	r3, #56	; 0x38
 8008098:	d805      	bhi.n	80080a6 <osThreadNew+0x6e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <osThreadNew+0x72>
        return (NULL);
 80080a6:	2300      	movs	r3, #0
 80080a8:	e054      	b.n	8008154 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	089b      	lsrs	r3, r3, #2
 80080b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00e      	beq.n	80080e0 <osThreadNew+0xa8>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	2bbb      	cmp	r3, #187	; 0xbb
 80080c8:	d90a      	bls.n	80080e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d006      	beq.n	80080e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <osThreadNew+0xa8>
        mem = 1;
 80080da:	2301      	movs	r3, #1
 80080dc:	61bb      	str	r3, [r7, #24]
 80080de:	e010      	b.n	8008102 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10c      	bne.n	8008102 <osThreadNew+0xca>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d108      	bne.n	8008102 <osThreadNew+0xca>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <osThreadNew+0xca>
          mem = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	61bb      	str	r3, [r7, #24]
 80080fc:	e001      	b.n	8008102 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d110      	bne.n	800812a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008110:	9202      	str	r2, [sp, #8]
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	6a3a      	ldr	r2, [r7, #32]
 800811c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fe0c 	bl	8008d3c <xTaskCreateStatic>
 8008124:	4603      	mov	r3, r0
 8008126:	613b      	str	r3, [r7, #16]
 8008128:	e013      	b.n	8008152 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d110      	bne.n	8008152 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	b29a      	uxth	r2, r3
 8008134:	f107 0310 	add.w	r3, r7, #16
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 fe57 	bl	8008df6 <xTaskCreate>
 8008148:	4603      	mov	r3, r0
 800814a:	2b01      	cmp	r3, #1
 800814c:	d001      	beq.n	8008152 <osThreadNew+0x11a>
            hTask = NULL;
 800814e:	2300      	movs	r3, #0
 8008150:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008152:	693b      	ldr	r3, [r7, #16]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3728      	adds	r7, #40	; 0x28
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008164:	f3ef 8305 	mrs	r3, IPSR
 8008168:	60bb      	str	r3, [r7, #8]
  return(result);
 800816a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <osDelay+0x1c>
    stat = osErrorISR;
 8008170:	f06f 0305 	mvn.w	r3, #5
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	e007      	b.n	8008188 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 ff92 	bl	80090ac <vTaskDelay>
    }
  }

  return (stat);
 8008188:	68fb      	ldr	r3, [r7, #12]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a07      	ldr	r2, [pc, #28]	; (80081c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80081a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4a06      	ldr	r2, [pc, #24]	; (80081c4 <vApplicationGetIdleTaskMemory+0x30>)
 80081aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2280      	movs	r2, #128	; 0x80
 80081b0:	601a      	str	r2, [r3, #0]
}
 80081b2:	bf00      	nop
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20001258 	.word	0x20001258
 80081c4:	20001314 	.word	0x20001314

080081c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4a07      	ldr	r2, [pc, #28]	; (80081f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80081d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	4a06      	ldr	r2, [pc, #24]	; (80081f8 <vApplicationGetTimerTaskMemory+0x30>)
 80081de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081e6:	601a      	str	r2, [r3, #0]
}
 80081e8:	bf00      	nop
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	20001514 	.word	0x20001514
 80081f8:	200015d0 	.word	0x200015d0

080081fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f103 0208 	add.w	r2, r3, #8
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008214:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f103 0208 	add.w	r2, r3, #8
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f103 0208 	add.w	r2, r3, #8
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800824a:	bf00      	nop
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	601a      	str	r2, [r3, #0]
}
 8008292:	bf00      	nop
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082b4:	d103      	bne.n	80082be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	e00c      	b.n	80082d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3308      	adds	r3, #8
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	e002      	b.n	80082cc <vListInsert+0x2e>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d2f6      	bcs.n	80082c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	601a      	str	r2, [r3, #0]
}
 8008304:	bf00      	nop
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6892      	ldr	r2, [r2, #8]
 8008326:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6852      	ldr	r2, [r2, #4]
 8008330:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	429a      	cmp	r2, r3
 800833a:	d103      	bne.n	8008344 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	1e5a      	subs	r2, r3, #1
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800838e:	f002 f879 	bl	800a484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800839e:	fb01 f303 	mul.w	r3, r1, r3
 80083a2:	441a      	add	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083be:	3b01      	subs	r3, #1
 80083c0:	68f9      	ldr	r1, [r7, #12]
 80083c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	441a      	add	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	22ff      	movs	r2, #255	; 0xff
 80083d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	22ff      	movs	r2, #255	; 0xff
 80083da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d114      	bne.n	800840e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01a      	beq.n	8008422 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3310      	adds	r3, #16
 80083f0:	4618      	mov	r0, r3
 80083f2:	f001 f929 	bl	8009648 <xTaskRemoveFromEventList>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d012      	beq.n	8008422 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083fc:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <xQueueGenericReset+0xcc>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	e009      	b.n	8008422 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3310      	adds	r3, #16
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff fef2 	bl	80081fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3324      	adds	r3, #36	; 0x24
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff feed 	bl	80081fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008422:	f002 f85f 	bl	800a4e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008426:	2301      	movs	r3, #1
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	e000ed04 	.word	0xe000ed04

08008434 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08e      	sub	sp, #56	; 0x38
 8008438:	af02      	add	r7, sp, #8
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800845a:	bf00      	nop
 800845c:	e7fe      	b.n	800845c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <xQueueGenericCreateStatic+0x52>
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <xQueueGenericCreateStatic+0x56>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <xQueueGenericCreateStatic+0x58>
 800848a:	2300      	movs	r3, #0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	623b      	str	r3, [r7, #32]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d102      	bne.n	80084b2 <xQueueGenericCreateStatic+0x7e>
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <xQueueGenericCreateStatic+0x82>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e000      	b.n	80084b8 <xQueueGenericCreateStatic+0x84>
 80084b6:	2300      	movs	r3, #0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10a      	bne.n	80084d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	61fb      	str	r3, [r7, #28]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084d2:	2350      	movs	r3, #80	; 0x50
 80084d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b50      	cmp	r3, #80	; 0x50
 80084da:	d00a      	beq.n	80084f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	61bb      	str	r3, [r7, #24]
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00d      	beq.n	800851a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008506:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	4613      	mov	r3, r2
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 f805 	bl	8008524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800851c:	4618      	mov	r0, r3
 800851e:	3730      	adds	r7, #48	; 0x30
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d103      	bne.n	8008540 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	e002      	b.n	8008546 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008552:	2101      	movs	r1, #1
 8008554:	69b8      	ldr	r0, [r7, #24]
 8008556:	f7ff ff05 	bl	8008364 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	78fa      	ldrb	r2, [r7, #3]
 800855e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08e      	sub	sp, #56	; 0x38
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800857a:	2300      	movs	r3, #0
 800857c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <xQueueGenericSend+0x32>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d103      	bne.n	80085ac <xQueueGenericSend+0x40>
 80085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <xQueueGenericSend+0x44>
 80085ac:	2301      	movs	r3, #1
 80085ae:	e000      	b.n	80085b2 <xQueueGenericSend+0x46>
 80085b0:	2300      	movs	r3, #0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10a      	bne.n	80085cc <xQueueGenericSend+0x60>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085c8:	bf00      	nop
 80085ca:	e7fe      	b.n	80085ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d103      	bne.n	80085da <xQueueGenericSend+0x6e>
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <xQueueGenericSend+0x72>
 80085da:	2301      	movs	r3, #1
 80085dc:	e000      	b.n	80085e0 <xQueueGenericSend+0x74>
 80085de:	2300      	movs	r3, #0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <xQueueGenericSend+0x8e>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	623b      	str	r3, [r7, #32]
}
 80085f6:	bf00      	nop
 80085f8:	e7fe      	b.n	80085f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085fa:	f001 f9e7 	bl	80099cc <xTaskGetSchedulerState>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d102      	bne.n	800860a <xQueueGenericSend+0x9e>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <xQueueGenericSend+0xa2>
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <xQueueGenericSend+0xa4>
 800860e:	2300      	movs	r3, #0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10a      	bne.n	800862a <xQueueGenericSend+0xbe>
	__asm volatile
 8008614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	61fb      	str	r3, [r7, #28]
}
 8008626:	bf00      	nop
 8008628:	e7fe      	b.n	8008628 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800862a:	f001 ff2b 	bl	800a484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008636:	429a      	cmp	r2, r3
 8008638:	d302      	bcc.n	8008640 <xQueueGenericSend+0xd4>
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b02      	cmp	r3, #2
 800863e:	d129      	bne.n	8008694 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008646:	f000 fa0b 	bl	8008a60 <prvCopyDataToQueue>
 800864a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	d010      	beq.n	8008676 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	3324      	adds	r3, #36	; 0x24
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fff5 	bl	8009648 <xTaskRemoveFromEventList>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d013      	beq.n	800868c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008664:	4b3f      	ldr	r3, [pc, #252]	; (8008764 <xQueueGenericSend+0x1f8>)
 8008666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	e00a      	b.n	800868c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008678:	2b00      	cmp	r3, #0
 800867a:	d007      	beq.n	800868c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800867c:	4b39      	ldr	r3, [pc, #228]	; (8008764 <xQueueGenericSend+0x1f8>)
 800867e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800868c:	f001 ff2a 	bl	800a4e4 <vPortExitCritical>
				return pdPASS;
 8008690:	2301      	movs	r3, #1
 8008692:	e063      	b.n	800875c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d103      	bne.n	80086a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800869a:	f001 ff23 	bl	800a4e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	e05c      	b.n	800875c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d106      	bne.n	80086b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086a8:	f107 0314 	add.w	r3, r7, #20
 80086ac:	4618      	mov	r0, r3
 80086ae:	f001 f82f 	bl	8009710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086b2:	2301      	movs	r3, #1
 80086b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086b6:	f001 ff15 	bl	800a4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086ba:	f000 fd9b 	bl	80091f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086be:	f001 fee1 	bl	800a484 <vPortEnterCritical>
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086c8:	b25b      	sxtb	r3, r3
 80086ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ce:	d103      	bne.n	80086d8 <xQueueGenericSend+0x16c>
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086de:	b25b      	sxtb	r3, r3
 80086e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086e4:	d103      	bne.n	80086ee <xQueueGenericSend+0x182>
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086ee:	f001 fef9 	bl	800a4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086f2:	1d3a      	adds	r2, r7, #4
 80086f4:	f107 0314 	add.w	r3, r7, #20
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 f81e 	bl	800973c <xTaskCheckForTimeOut>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d124      	bne.n	8008750 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008708:	f000 faa2 	bl	8008c50 <prvIsQueueFull>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d018      	beq.n	8008744 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008714:	3310      	adds	r3, #16
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f000 ff44 	bl	80095a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008722:	f000 fa2d 	bl	8008b80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008726:	f000 fd73 	bl	8009210 <xTaskResumeAll>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	f47f af7c 	bne.w	800862a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008732:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <xQueueGenericSend+0x1f8>)
 8008734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	e772      	b.n	800862a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008746:	f000 fa1b 	bl	8008b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800874a:	f000 fd61 	bl	8009210 <xTaskResumeAll>
 800874e:	e76c      	b.n	800862a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008752:	f000 fa15 	bl	8008b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008756:	f000 fd5b 	bl	8009210 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800875a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800875c:	4618      	mov	r0, r3
 800875e:	3738      	adds	r7, #56	; 0x38
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	e000ed04 	.word	0xe000ed04

08008768 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b090      	sub	sp, #64	; 0x40
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d103      	bne.n	80087a4 <xQueueGenericSendFromISR+0x3c>
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <xQueueGenericSendFromISR+0x40>
 80087a4:	2301      	movs	r3, #1
 80087a6:	e000      	b.n	80087aa <xQueueGenericSendFromISR+0x42>
 80087a8:	2300      	movs	r3, #0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d103      	bne.n	80087d2 <xQueueGenericSendFromISR+0x6a>
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <xQueueGenericSendFromISR+0x6e>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <xQueueGenericSendFromISR+0x70>
 80087d6:	2300      	movs	r3, #0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	623b      	str	r3, [r7, #32]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087f2:	f001 ff29 	bl	800a648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087f6:	f3ef 8211 	mrs	r2, BASEPRI
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	61fa      	str	r2, [r7, #28]
 800880c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800880e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008810:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881a:	429a      	cmp	r2, r3
 800881c:	d302      	bcc.n	8008824 <xQueueGenericSendFromISR+0xbc>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d12f      	bne.n	8008884 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800882a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800882e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008832:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	68b9      	ldr	r1, [r7, #8]
 8008838:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800883a:	f000 f911 	bl	8008a60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800883e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008846:	d112      	bne.n	800886e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	2b00      	cmp	r3, #0
 800884e:	d016      	beq.n	800887e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	3324      	adds	r3, #36	; 0x24
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fef7 	bl	8009648 <xTaskRemoveFromEventList>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00e      	beq.n	800887e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00b      	beq.n	800887e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	e007      	b.n	800887e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800886e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008872:	3301      	adds	r3, #1
 8008874:	b2db      	uxtb	r3, r3
 8008876:	b25a      	sxtb	r2, r3
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800887e:	2301      	movs	r3, #1
 8008880:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008882:	e001      	b.n	8008888 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008884:	2300      	movs	r3, #0
 8008886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008892:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008896:	4618      	mov	r0, r3
 8008898:	3740      	adds	r7, #64	; 0x40
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08c      	sub	sp, #48	; 0x30
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80088ac:	2300      	movs	r3, #0
 80088ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <xQueueReceive+0x30>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	623b      	str	r3, [r7, #32]
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <xQueueReceive+0x3e>
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <xQueueReceive+0x42>
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <xQueueReceive+0x44>
 80088e2:	2300      	movs	r3, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10a      	bne.n	80088fe <xQueueReceive+0x5e>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	61fb      	str	r3, [r7, #28]
}
 80088fa:	bf00      	nop
 80088fc:	e7fe      	b.n	80088fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088fe:	f001 f865 	bl	80099cc <xTaskGetSchedulerState>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d102      	bne.n	800890e <xQueueReceive+0x6e>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <xQueueReceive+0x72>
 800890e:	2301      	movs	r3, #1
 8008910:	e000      	b.n	8008914 <xQueueReceive+0x74>
 8008912:	2300      	movs	r3, #0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <xQueueReceive+0x8e>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	61bb      	str	r3, [r7, #24]
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800892e:	f001 fda9 	bl	800a484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01f      	beq.n	800897e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800893e:	68b9      	ldr	r1, [r7, #8]
 8008940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008942:	f000 f8f7 	bl	8008b34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	1e5a      	subs	r2, r3, #1
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00f      	beq.n	8008976 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	3310      	adds	r3, #16
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fe74 	bl	8009648 <xTaskRemoveFromEventList>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d007      	beq.n	8008976 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008966:	4b3d      	ldr	r3, [pc, #244]	; (8008a5c <xQueueReceive+0x1bc>)
 8008968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008976:	f001 fdb5 	bl	800a4e4 <vPortExitCritical>
				return pdPASS;
 800897a:	2301      	movs	r3, #1
 800897c:	e069      	b.n	8008a52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d103      	bne.n	800898c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008984:	f001 fdae 	bl	800a4e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008988:	2300      	movs	r3, #0
 800898a:	e062      	b.n	8008a52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898e:	2b00      	cmp	r3, #0
 8008990:	d106      	bne.n	80089a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008992:	f107 0310 	add.w	r3, r7, #16
 8008996:	4618      	mov	r0, r3
 8008998:	f000 feba 	bl	8009710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800899c:	2301      	movs	r3, #1
 800899e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089a0:	f001 fda0 	bl	800a4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089a4:	f000 fc26 	bl	80091f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089a8:	f001 fd6c 	bl	800a484 <vPortEnterCritical>
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089b2:	b25b      	sxtb	r3, r3
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089b8:	d103      	bne.n	80089c2 <xQueueReceive+0x122>
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089c8:	b25b      	sxtb	r3, r3
 80089ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ce:	d103      	bne.n	80089d8 <xQueueReceive+0x138>
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089d8:	f001 fd84 	bl	800a4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089dc:	1d3a      	adds	r2, r7, #4
 80089de:	f107 0310 	add.w	r3, r7, #16
 80089e2:	4611      	mov	r1, r2
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 fea9 	bl	800973c <xTaskCheckForTimeOut>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d123      	bne.n	8008a38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089f2:	f000 f917 	bl	8008c24 <prvIsQueueEmpty>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d017      	beq.n	8008a2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	3324      	adds	r3, #36	; 0x24
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	4611      	mov	r1, r2
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fdcf 	bl	80095a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a0c:	f000 f8b8 	bl	8008b80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a10:	f000 fbfe 	bl	8009210 <xTaskResumeAll>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d189      	bne.n	800892e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a1a:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <xQueueReceive+0x1bc>)
 8008a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	e780      	b.n	800892e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a2e:	f000 f8a7 	bl	8008b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a32:	f000 fbed 	bl	8009210 <xTaskResumeAll>
 8008a36:	e77a      	b.n	800892e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a3a:	f000 f8a1 	bl	8008b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a3e:	f000 fbe7 	bl	8009210 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a44:	f000 f8ee 	bl	8008c24 <prvIsQueueEmpty>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f43f af6f 	beq.w	800892e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3730      	adds	r7, #48	; 0x30
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	e000ed04 	.word	0xe000ed04

08008a60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10d      	bne.n	8008a9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d14d      	bne.n	8008b22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 ffbc 	bl	8009a08 <xTaskPriorityDisinherit>
 8008a90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	609a      	str	r2, [r3, #8]
 8008a98:	e043      	b.n	8008b22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d119      	bne.n	8008ad4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6858      	ldr	r0, [r3, #4]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	f002 f822 	bl	800aaf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab8:	441a      	add	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d32b      	bcc.n	8008b22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	605a      	str	r2, [r3, #4]
 8008ad2:	e026      	b.n	8008b22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	68d8      	ldr	r0, [r3, #12]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008adc:	461a      	mov	r2, r3
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	f002 f808 	bl	800aaf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	425b      	negs	r3, r3
 8008aee:	441a      	add	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	68da      	ldr	r2, [r3, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d207      	bcs.n	8008b10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b08:	425b      	negs	r3, r3
 8008b0a:	441a      	add	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d105      	bne.n	8008b22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b2a:	697b      	ldr	r3, [r7, #20]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d018      	beq.n	8008b78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68da      	ldr	r2, [r3, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	441a      	add	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68da      	ldr	r2, [r3, #12]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d303      	bcc.n	8008b68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68d9      	ldr	r1, [r3, #12]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b70:	461a      	mov	r2, r3
 8008b72:	6838      	ldr	r0, [r7, #0]
 8008b74:	f001 ffbe 	bl	800aaf4 <memcpy>
	}
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b88:	f001 fc7c 	bl	800a484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b94:	e011      	b.n	8008bba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d012      	beq.n	8008bc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3324      	adds	r3, #36	; 0x24
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fd50 	bl	8009648 <xTaskRemoveFromEventList>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bae:	f000 fe27 	bl	8009800 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dce9      	bgt.n	8008b96 <prvUnlockQueue+0x16>
 8008bc2:	e000      	b.n	8008bc6 <prvUnlockQueue+0x46>
					break;
 8008bc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	22ff      	movs	r2, #255	; 0xff
 8008bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008bce:	f001 fc89 	bl	800a4e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bd2:	f001 fc57 	bl	800a484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bde:	e011      	b.n	8008c04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d012      	beq.n	8008c0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3310      	adds	r3, #16
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fd2b 	bl	8009648 <xTaskRemoveFromEventList>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008bf8:	f000 fe02 	bl	8009800 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	dce9      	bgt.n	8008be0 <prvUnlockQueue+0x60>
 8008c0c:	e000      	b.n	8008c10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	22ff      	movs	r2, #255	; 0xff
 8008c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c18:	f001 fc64 	bl	800a4e4 <vPortExitCritical>
}
 8008c1c:	bf00      	nop
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c2c:	f001 fc2a 	bl	800a484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e001      	b.n	8008c42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c42:	f001 fc4f 	bl	800a4e4 <vPortExitCritical>

	return xReturn;
 8008c46:	68fb      	ldr	r3, [r7, #12]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c58:	f001 fc14 	bl	800a484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d102      	bne.n	8008c6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	e001      	b.n	8008c72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c72:	f001 fc37 	bl	800a4e4 <vPortExitCritical>

	return xReturn;
 8008c76:	68fb      	ldr	r3, [r7, #12]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	e014      	b.n	8008cba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c90:	4a0f      	ldr	r2, [pc, #60]	; (8008cd0 <vQueueAddToRegistry+0x50>)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10b      	bne.n	8008cb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c9c:	490c      	ldr	r1, [pc, #48]	; (8008cd0 <vQueueAddToRegistry+0x50>)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ca6:	4a0a      	ldr	r2, [pc, #40]	; (8008cd0 <vQueueAddToRegistry+0x50>)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	4413      	add	r3, r2
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008cb2:	e006      	b.n	8008cc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b07      	cmp	r3, #7
 8008cbe:	d9e7      	bls.n	8008c90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008cc0:	bf00      	nop
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	200019d0 	.word	0x200019d0

08008cd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ce4:	f001 fbce 	bl	800a484 <vPortEnterCritical>
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cee:	b25b      	sxtb	r3, r3
 8008cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cf4:	d103      	bne.n	8008cfe <vQueueWaitForMessageRestricted+0x2a>
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d04:	b25b      	sxtb	r3, r3
 8008d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d0a:	d103      	bne.n	8008d14 <vQueueWaitForMessageRestricted+0x40>
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d14:	f001 fbe6 	bl	800a4e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d106      	bne.n	8008d2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	3324      	adds	r3, #36	; 0x24
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	68b9      	ldr	r1, [r7, #8]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 fc61 	bl	80095f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d2e:	6978      	ldr	r0, [r7, #20]
 8008d30:	f7ff ff26 	bl	8008b80 <prvUnlockQueue>
	}
 8008d34:	bf00      	nop
 8008d36:	3718      	adds	r7, #24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08e      	sub	sp, #56	; 0x38
 8008d40:	af04      	add	r7, sp, #16
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	623b      	str	r3, [r7, #32]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10a      	bne.n	8008d82 <xTaskCreateStatic+0x46>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	61fb      	str	r3, [r7, #28]
}
 8008d7e:	bf00      	nop
 8008d80:	e7fe      	b.n	8008d80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d82:	23bc      	movs	r3, #188	; 0xbc
 8008d84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	2bbc      	cmp	r3, #188	; 0xbc
 8008d8a:	d00a      	beq.n	8008da2 <xTaskCreateStatic+0x66>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	61bb      	str	r3, [r7, #24]
}
 8008d9e:	bf00      	nop
 8008da0:	e7fe      	b.n	8008da0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008da2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d01e      	beq.n	8008de8 <xTaskCreateStatic+0xac>
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01b      	beq.n	8008de8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	9303      	str	r3, [sp, #12]
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	9302      	str	r3, [sp, #8]
 8008dca:	f107 0314 	add.w	r3, r7, #20
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 f850 	bl	8008e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008de2:	f000 f8f3 	bl	8008fcc <prvAddNewTaskToReadyList>
 8008de6:	e001      	b.n	8008dec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008de8:	2300      	movs	r3, #0
 8008dea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008dec:	697b      	ldr	r3, [r7, #20]
	}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3728      	adds	r7, #40	; 0x28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b08c      	sub	sp, #48	; 0x30
 8008dfa:	af04      	add	r7, sp, #16
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	603b      	str	r3, [r7, #0]
 8008e02:	4613      	mov	r3, r2
 8008e04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e06:	88fb      	ldrh	r3, [r7, #6]
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f001 fc5c 	bl	800a6c8 <pvPortMalloc>
 8008e10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00e      	beq.n	8008e36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e18:	20bc      	movs	r0, #188	; 0xbc
 8008e1a:	f001 fc55 	bl	800a6c8 <pvPortMalloc>
 8008e1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8008e2c:	e005      	b.n	8008e3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e2e:	6978      	ldr	r0, [r7, #20]
 8008e30:	f001 fd16 	bl	800a860 <vPortFree>
 8008e34:	e001      	b.n	8008e3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d017      	beq.n	8008e70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e48:	88fa      	ldrh	r2, [r7, #6]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9303      	str	r3, [sp, #12]
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	9302      	str	r3, [sp, #8]
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 f80e 	bl	8008e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e64:	69f8      	ldr	r0, [r7, #28]
 8008e66:	f000 f8b1 	bl	8008fcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	e002      	b.n	8008e76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e76:	69bb      	ldr	r3, [r7, #24]
	}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3720      	adds	r7, #32
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	461a      	mov	r2, r3
 8008e98:	21a5      	movs	r1, #165	; 0xa5
 8008e9a:	f001 fe39 	bl	800ab10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	f023 0307 	bic.w	r3, r3, #7
 8008eb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	617b      	str	r3, [r7, #20]
}
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d01f      	beq.n	8008f1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61fb      	str	r3, [r7, #28]
 8008ee2:	e012      	b.n	8008f0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	4413      	add	r3, r2
 8008eea:	7819      	ldrb	r1, [r3, #0]
 8008eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	3334      	adds	r3, #52	; 0x34
 8008ef4:	460a      	mov	r2, r1
 8008ef6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	4413      	add	r3, r2
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d006      	beq.n	8008f12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	3301      	adds	r3, #1
 8008f08:	61fb      	str	r3, [r7, #28]
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	2b0f      	cmp	r3, #15
 8008f0e:	d9e9      	bls.n	8008ee4 <prvInitialiseNewTask+0x64>
 8008f10:	e000      	b.n	8008f14 <prvInitialiseNewTask+0x94>
			{
				break;
 8008f12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f1c:	e003      	b.n	8008f26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	2b37      	cmp	r3, #55	; 0x37
 8008f2a:	d901      	bls.n	8008f30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f2c:	2337      	movs	r3, #55	; 0x37
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	2200      	movs	r2, #0
 8008f40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	3304      	adds	r3, #4
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff f978 	bl	800823c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4e:	3318      	adds	r3, #24
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7ff f973 	bl	800823c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	3354      	adds	r3, #84	; 0x54
 8008f80:	2260      	movs	r2, #96	; 0x60
 8008f82:	2100      	movs	r1, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f001 fdc3 	bl	800ab10 <memset>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8c:	4a0c      	ldr	r2, [pc, #48]	; (8008fc0 <prvInitialiseNewTask+0x140>)
 8008f8e:	659a      	str	r2, [r3, #88]	; 0x58
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	4a0c      	ldr	r2, [pc, #48]	; (8008fc4 <prvInitialiseNewTask+0x144>)
 8008f94:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	4a0b      	ldr	r2, [pc, #44]	; (8008fc8 <prvInitialiseNewTask+0x148>)
 8008f9a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	68f9      	ldr	r1, [r7, #12]
 8008fa0:	69b8      	ldr	r0, [r7, #24]
 8008fa2:	f001 f941 	bl	800a228 <pxPortInitialiseStack>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fb8:	bf00      	nop
 8008fba:	3720      	adds	r7, #32
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	0800c474 	.word	0x0800c474
 8008fc4:	0800c494 	.word	0x0800c494
 8008fc8:	0800c454 	.word	0x0800c454

08008fcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fd4:	f001 fa56 	bl	800a484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fd8:	4b2d      	ldr	r3, [pc, #180]	; (8009090 <prvAddNewTaskToReadyList+0xc4>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	4a2c      	ldr	r2, [pc, #176]	; (8009090 <prvAddNewTaskToReadyList+0xc4>)
 8008fe0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fe2:	4b2c      	ldr	r3, [pc, #176]	; (8009094 <prvAddNewTaskToReadyList+0xc8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d109      	bne.n	8008ffe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fea:	4a2a      	ldr	r2, [pc, #168]	; (8009094 <prvAddNewTaskToReadyList+0xc8>)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ff0:	4b27      	ldr	r3, [pc, #156]	; (8009090 <prvAddNewTaskToReadyList+0xc4>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d110      	bne.n	800901a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ff8:	f000 fc26 	bl	8009848 <prvInitialiseTaskLists>
 8008ffc:	e00d      	b.n	800901a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ffe:	4b26      	ldr	r3, [pc, #152]	; (8009098 <prvAddNewTaskToReadyList+0xcc>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009006:	4b23      	ldr	r3, [pc, #140]	; (8009094 <prvAddNewTaskToReadyList+0xc8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	429a      	cmp	r2, r3
 8009012:	d802      	bhi.n	800901a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009014:	4a1f      	ldr	r2, [pc, #124]	; (8009094 <prvAddNewTaskToReadyList+0xc8>)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800901a:	4b20      	ldr	r3, [pc, #128]	; (800909c <prvAddNewTaskToReadyList+0xd0>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3301      	adds	r3, #1
 8009020:	4a1e      	ldr	r2, [pc, #120]	; (800909c <prvAddNewTaskToReadyList+0xd0>)
 8009022:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009024:	4b1d      	ldr	r3, [pc, #116]	; (800909c <prvAddNewTaskToReadyList+0xd0>)
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009030:	4b1b      	ldr	r3, [pc, #108]	; (80090a0 <prvAddNewTaskToReadyList+0xd4>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	d903      	bls.n	8009040 <prvAddNewTaskToReadyList+0x74>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903c:	4a18      	ldr	r2, [pc, #96]	; (80090a0 <prvAddNewTaskToReadyList+0xd4>)
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009044:	4613      	mov	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4a15      	ldr	r2, [pc, #84]	; (80090a4 <prvAddNewTaskToReadyList+0xd8>)
 800904e:	441a      	add	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3304      	adds	r3, #4
 8009054:	4619      	mov	r1, r3
 8009056:	4610      	mov	r0, r2
 8009058:	f7ff f8fd 	bl	8008256 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800905c:	f001 fa42 	bl	800a4e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009060:	4b0d      	ldr	r3, [pc, #52]	; (8009098 <prvAddNewTaskToReadyList+0xcc>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00e      	beq.n	8009086 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009068:	4b0a      	ldr	r3, [pc, #40]	; (8009094 <prvAddNewTaskToReadyList+0xc8>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009072:	429a      	cmp	r2, r3
 8009074:	d207      	bcs.n	8009086 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009076:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <prvAddNewTaskToReadyList+0xdc>)
 8009078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009086:	bf00      	nop
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20001ee4 	.word	0x20001ee4
 8009094:	20001a10 	.word	0x20001a10
 8009098:	20001ef0 	.word	0x20001ef0
 800909c:	20001f00 	.word	0x20001f00
 80090a0:	20001eec 	.word	0x20001eec
 80090a4:	20001a14 	.word	0x20001a14
 80090a8:	e000ed04 	.word	0xe000ed04

080090ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090b4:	2300      	movs	r3, #0
 80090b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d017      	beq.n	80090ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090be:	4b13      	ldr	r3, [pc, #76]	; (800910c <vTaskDelay+0x60>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00a      	beq.n	80090dc <vTaskDelay+0x30>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	60bb      	str	r3, [r7, #8]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090dc:	f000 f88a 	bl	80091f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090e0:	2100      	movs	r1, #0
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fcfe 	bl	8009ae4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090e8:	f000 f892 	bl	8009210 <xTaskResumeAll>
 80090ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d107      	bne.n	8009104 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80090f4:	4b06      	ldr	r3, [pc, #24]	; (8009110 <vTaskDelay+0x64>)
 80090f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009104:	bf00      	nop
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20001f0c 	.word	0x20001f0c
 8009110:	e000ed04 	.word	0xe000ed04

08009114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08a      	sub	sp, #40	; 0x28
 8009118:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800911e:	2300      	movs	r3, #0
 8009120:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009122:	463a      	mov	r2, r7
 8009124:	1d39      	adds	r1, r7, #4
 8009126:	f107 0308 	add.w	r3, r7, #8
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff f832 	bl	8008194 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	9202      	str	r2, [sp, #8]
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	2300      	movs	r3, #0
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	2300      	movs	r3, #0
 8009140:	460a      	mov	r2, r1
 8009142:	4924      	ldr	r1, [pc, #144]	; (80091d4 <vTaskStartScheduler+0xc0>)
 8009144:	4824      	ldr	r0, [pc, #144]	; (80091d8 <vTaskStartScheduler+0xc4>)
 8009146:	f7ff fdf9 	bl	8008d3c <xTaskCreateStatic>
 800914a:	4603      	mov	r3, r0
 800914c:	4a23      	ldr	r2, [pc, #140]	; (80091dc <vTaskStartScheduler+0xc8>)
 800914e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009150:	4b22      	ldr	r3, [pc, #136]	; (80091dc <vTaskStartScheduler+0xc8>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009158:	2301      	movs	r3, #1
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e001      	b.n	8009162 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800915e:	2300      	movs	r3, #0
 8009160:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d102      	bne.n	800916e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009168:	f000 fd10 	bl	8009b8c <xTimerCreateTimerTask>
 800916c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d11b      	bne.n	80091ac <vTaskStartScheduler+0x98>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	613b      	str	r3, [r7, #16]
}
 8009186:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009188:	4b15      	ldr	r3, [pc, #84]	; (80091e0 <vTaskStartScheduler+0xcc>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3354      	adds	r3, #84	; 0x54
 800918e:	4a15      	ldr	r2, [pc, #84]	; (80091e4 <vTaskStartScheduler+0xd0>)
 8009190:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009192:	4b15      	ldr	r3, [pc, #84]	; (80091e8 <vTaskStartScheduler+0xd4>)
 8009194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009198:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800919a:	4b14      	ldr	r3, [pc, #80]	; (80091ec <vTaskStartScheduler+0xd8>)
 800919c:	2201      	movs	r2, #1
 800919e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091a0:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <vTaskStartScheduler+0xdc>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091a6:	f001 f8cb 	bl	800a340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091aa:	e00e      	b.n	80091ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091b2:	d10a      	bne.n	80091ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	60fb      	str	r3, [r7, #12]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <vTaskStartScheduler+0xb4>
}
 80091ca:	bf00      	nop
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	0800c388 	.word	0x0800c388
 80091d8:	08009819 	.word	0x08009819
 80091dc:	20001f08 	.word	0x20001f08
 80091e0:	20001a10 	.word	0x20001a10
 80091e4:	20000010 	.word	0x20000010
 80091e8:	20001f04 	.word	0x20001f04
 80091ec:	20001ef0 	.word	0x20001ef0
 80091f0:	20001ee8 	.word	0x20001ee8

080091f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091f8:	4b04      	ldr	r3, [pc, #16]	; (800920c <vTaskSuspendAll+0x18>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3301      	adds	r3, #1
 80091fe:	4a03      	ldr	r2, [pc, #12]	; (800920c <vTaskSuspendAll+0x18>)
 8009200:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009202:	bf00      	nop
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	20001f0c 	.word	0x20001f0c

08009210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009216:	2300      	movs	r3, #0
 8009218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800921a:	2300      	movs	r3, #0
 800921c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800921e:	4b42      	ldr	r3, [pc, #264]	; (8009328 <xTaskResumeAll+0x118>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10a      	bne.n	800923c <xTaskResumeAll+0x2c>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	603b      	str	r3, [r7, #0]
}
 8009238:	bf00      	nop
 800923a:	e7fe      	b.n	800923a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800923c:	f001 f922 	bl	800a484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009240:	4b39      	ldr	r3, [pc, #228]	; (8009328 <xTaskResumeAll+0x118>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3b01      	subs	r3, #1
 8009246:	4a38      	ldr	r2, [pc, #224]	; (8009328 <xTaskResumeAll+0x118>)
 8009248:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800924a:	4b37      	ldr	r3, [pc, #220]	; (8009328 <xTaskResumeAll+0x118>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d162      	bne.n	8009318 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009252:	4b36      	ldr	r3, [pc, #216]	; (800932c <xTaskResumeAll+0x11c>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d05e      	beq.n	8009318 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800925a:	e02f      	b.n	80092bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800925c:	4b34      	ldr	r3, [pc, #208]	; (8009330 <xTaskResumeAll+0x120>)
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3318      	adds	r3, #24
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff f851 	bl	8008310 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3304      	adds	r3, #4
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff f84c 	bl	8008310 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	4b2d      	ldr	r3, [pc, #180]	; (8009334 <xTaskResumeAll+0x124>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	d903      	bls.n	800928c <xTaskResumeAll+0x7c>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	4a2a      	ldr	r2, [pc, #168]	; (8009334 <xTaskResumeAll+0x124>)
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009290:	4613      	mov	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4a27      	ldr	r2, [pc, #156]	; (8009338 <xTaskResumeAll+0x128>)
 800929a:	441a      	add	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3304      	adds	r3, #4
 80092a0:	4619      	mov	r1, r3
 80092a2:	4610      	mov	r0, r2
 80092a4:	f7fe ffd7 	bl	8008256 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ac:	4b23      	ldr	r3, [pc, #140]	; (800933c <xTaskResumeAll+0x12c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d302      	bcc.n	80092bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80092b6:	4b22      	ldr	r3, [pc, #136]	; (8009340 <xTaskResumeAll+0x130>)
 80092b8:	2201      	movs	r2, #1
 80092ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092bc:	4b1c      	ldr	r3, [pc, #112]	; (8009330 <xTaskResumeAll+0x120>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1cb      	bne.n	800925c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092ca:	f000 fb5f 	bl	800998c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092ce:	4b1d      	ldr	r3, [pc, #116]	; (8009344 <xTaskResumeAll+0x134>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d010      	beq.n	80092fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092da:	f000 f847 	bl	800936c <xTaskIncrementTick>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092e4:	4b16      	ldr	r3, [pc, #88]	; (8009340 <xTaskResumeAll+0x130>)
 80092e6:	2201      	movs	r2, #1
 80092e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1f1      	bne.n	80092da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80092f6:	4b13      	ldr	r3, [pc, #76]	; (8009344 <xTaskResumeAll+0x134>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092fc:	4b10      	ldr	r3, [pc, #64]	; (8009340 <xTaskResumeAll+0x130>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d009      	beq.n	8009318 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009304:	2301      	movs	r3, #1
 8009306:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009308:	4b0f      	ldr	r3, [pc, #60]	; (8009348 <xTaskResumeAll+0x138>)
 800930a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009318:	f001 f8e4 	bl	800a4e4 <vPortExitCritical>

	return xAlreadyYielded;
 800931c:	68bb      	ldr	r3, [r7, #8]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20001f0c 	.word	0x20001f0c
 800932c:	20001ee4 	.word	0x20001ee4
 8009330:	20001ea4 	.word	0x20001ea4
 8009334:	20001eec 	.word	0x20001eec
 8009338:	20001a14 	.word	0x20001a14
 800933c:	20001a10 	.word	0x20001a10
 8009340:	20001ef8 	.word	0x20001ef8
 8009344:	20001ef4 	.word	0x20001ef4
 8009348:	e000ed04 	.word	0xe000ed04

0800934c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009352:	4b05      	ldr	r3, [pc, #20]	; (8009368 <xTaskGetTickCount+0x1c>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009358:	687b      	ldr	r3, [r7, #4]
}
 800935a:	4618      	mov	r0, r3
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	20001ee8 	.word	0x20001ee8

0800936c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009372:	2300      	movs	r3, #0
 8009374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009376:	4b4f      	ldr	r3, [pc, #316]	; (80094b4 <xTaskIncrementTick+0x148>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	f040 808f 	bne.w	800949e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009380:	4b4d      	ldr	r3, [pc, #308]	; (80094b8 <xTaskIncrementTick+0x14c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3301      	adds	r3, #1
 8009386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009388:	4a4b      	ldr	r2, [pc, #300]	; (80094b8 <xTaskIncrementTick+0x14c>)
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d120      	bne.n	80093d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009394:	4b49      	ldr	r3, [pc, #292]	; (80094bc <xTaskIncrementTick+0x150>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00a      	beq.n	80093b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	603b      	str	r3, [r7, #0]
}
 80093b0:	bf00      	nop
 80093b2:	e7fe      	b.n	80093b2 <xTaskIncrementTick+0x46>
 80093b4:	4b41      	ldr	r3, [pc, #260]	; (80094bc <xTaskIncrementTick+0x150>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60fb      	str	r3, [r7, #12]
 80093ba:	4b41      	ldr	r3, [pc, #260]	; (80094c0 <xTaskIncrementTick+0x154>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a3f      	ldr	r2, [pc, #252]	; (80094bc <xTaskIncrementTick+0x150>)
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	4a3f      	ldr	r2, [pc, #252]	; (80094c0 <xTaskIncrementTick+0x154>)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	4b3e      	ldr	r3, [pc, #248]	; (80094c4 <xTaskIncrementTick+0x158>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3301      	adds	r3, #1
 80093ce:	4a3d      	ldr	r2, [pc, #244]	; (80094c4 <xTaskIncrementTick+0x158>)
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	f000 fadb 	bl	800998c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093d6:	4b3c      	ldr	r3, [pc, #240]	; (80094c8 <xTaskIncrementTick+0x15c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d349      	bcc.n	8009474 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093e0:	4b36      	ldr	r3, [pc, #216]	; (80094bc <xTaskIncrementTick+0x150>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d104      	bne.n	80093f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ea:	4b37      	ldr	r3, [pc, #220]	; (80094c8 <xTaskIncrementTick+0x15c>)
 80093ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093f0:	601a      	str	r2, [r3, #0]
					break;
 80093f2:	e03f      	b.n	8009474 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f4:	4b31      	ldr	r3, [pc, #196]	; (80094bc <xTaskIncrementTick+0x150>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	429a      	cmp	r2, r3
 800940a:	d203      	bcs.n	8009414 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800940c:	4a2e      	ldr	r2, [pc, #184]	; (80094c8 <xTaskIncrementTick+0x15c>)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009412:	e02f      	b.n	8009474 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	3304      	adds	r3, #4
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe ff79 	bl	8008310 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009422:	2b00      	cmp	r3, #0
 8009424:	d004      	beq.n	8009430 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	3318      	adds	r3, #24
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe ff70 	bl	8008310 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009434:	4b25      	ldr	r3, [pc, #148]	; (80094cc <xTaskIncrementTick+0x160>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	429a      	cmp	r2, r3
 800943a:	d903      	bls.n	8009444 <xTaskIncrementTick+0xd8>
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009440:	4a22      	ldr	r2, [pc, #136]	; (80094cc <xTaskIncrementTick+0x160>)
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009448:	4613      	mov	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	4413      	add	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4a1f      	ldr	r2, [pc, #124]	; (80094d0 <xTaskIncrementTick+0x164>)
 8009452:	441a      	add	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	3304      	adds	r3, #4
 8009458:	4619      	mov	r1, r3
 800945a:	4610      	mov	r0, r2
 800945c:	f7fe fefb 	bl	8008256 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009464:	4b1b      	ldr	r3, [pc, #108]	; (80094d4 <xTaskIncrementTick+0x168>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	429a      	cmp	r2, r3
 800946c:	d3b8      	bcc.n	80093e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800946e:	2301      	movs	r3, #1
 8009470:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009472:	e7b5      	b.n	80093e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009474:	4b17      	ldr	r3, [pc, #92]	; (80094d4 <xTaskIncrementTick+0x168>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947a:	4915      	ldr	r1, [pc, #84]	; (80094d0 <xTaskIncrementTick+0x164>)
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d901      	bls.n	8009490 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800948c:	2301      	movs	r3, #1
 800948e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009490:	4b11      	ldr	r3, [pc, #68]	; (80094d8 <xTaskIncrementTick+0x16c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009498:	2301      	movs	r3, #1
 800949a:	617b      	str	r3, [r7, #20]
 800949c:	e004      	b.n	80094a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800949e:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <xTaskIncrementTick+0x170>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3301      	adds	r3, #1
 80094a4:	4a0d      	ldr	r2, [pc, #52]	; (80094dc <xTaskIncrementTick+0x170>)
 80094a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094a8:	697b      	ldr	r3, [r7, #20]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	20001f0c 	.word	0x20001f0c
 80094b8:	20001ee8 	.word	0x20001ee8
 80094bc:	20001e9c 	.word	0x20001e9c
 80094c0:	20001ea0 	.word	0x20001ea0
 80094c4:	20001efc 	.word	0x20001efc
 80094c8:	20001f04 	.word	0x20001f04
 80094cc:	20001eec 	.word	0x20001eec
 80094d0:	20001a14 	.word	0x20001a14
 80094d4:	20001a10 	.word	0x20001a10
 80094d8:	20001ef8 	.word	0x20001ef8
 80094dc:	20001ef4 	.word	0x20001ef4

080094e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094e6:	4b2a      	ldr	r3, [pc, #168]	; (8009590 <vTaskSwitchContext+0xb0>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d003      	beq.n	80094f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094ee:	4b29      	ldr	r3, [pc, #164]	; (8009594 <vTaskSwitchContext+0xb4>)
 80094f0:	2201      	movs	r2, #1
 80094f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094f4:	e046      	b.n	8009584 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80094f6:	4b27      	ldr	r3, [pc, #156]	; (8009594 <vTaskSwitchContext+0xb4>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094fc:	4b26      	ldr	r3, [pc, #152]	; (8009598 <vTaskSwitchContext+0xb8>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	60fb      	str	r3, [r7, #12]
 8009502:	e010      	b.n	8009526 <vTaskSwitchContext+0x46>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10a      	bne.n	8009520 <vTaskSwitchContext+0x40>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	607b      	str	r3, [r7, #4]
}
 800951c:	bf00      	nop
 800951e:	e7fe      	b.n	800951e <vTaskSwitchContext+0x3e>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	3b01      	subs	r3, #1
 8009524:	60fb      	str	r3, [r7, #12]
 8009526:	491d      	ldr	r1, [pc, #116]	; (800959c <vTaskSwitchContext+0xbc>)
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0e4      	beq.n	8009504 <vTaskSwitchContext+0x24>
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4a15      	ldr	r2, [pc, #84]	; (800959c <vTaskSwitchContext+0xbc>)
 8009546:	4413      	add	r3, r2
 8009548:	60bb      	str	r3, [r7, #8]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	605a      	str	r2, [r3, #4]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	3308      	adds	r3, #8
 800955c:	429a      	cmp	r2, r3
 800955e:	d104      	bne.n	800956a <vTaskSwitchContext+0x8a>
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	685a      	ldr	r2, [r3, #4]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	605a      	str	r2, [r3, #4]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	4a0b      	ldr	r2, [pc, #44]	; (80095a0 <vTaskSwitchContext+0xc0>)
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	4a08      	ldr	r2, [pc, #32]	; (8009598 <vTaskSwitchContext+0xb8>)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800957a:	4b09      	ldr	r3, [pc, #36]	; (80095a0 <vTaskSwitchContext+0xc0>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3354      	adds	r3, #84	; 0x54
 8009580:	4a08      	ldr	r2, [pc, #32]	; (80095a4 <vTaskSwitchContext+0xc4>)
 8009582:	6013      	str	r3, [r2, #0]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	20001f0c 	.word	0x20001f0c
 8009594:	20001ef8 	.word	0x20001ef8
 8009598:	20001eec 	.word	0x20001eec
 800959c:	20001a14 	.word	0x20001a14
 80095a0:	20001a10 	.word	0x20001a10
 80095a4:	20000010 	.word	0x20000010

080095a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	60fb      	str	r3, [r7, #12]
}
 80095ca:	bf00      	nop
 80095cc:	e7fe      	b.n	80095cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095ce:	4b07      	ldr	r3, [pc, #28]	; (80095ec <vTaskPlaceOnEventList+0x44>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3318      	adds	r3, #24
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7fe fe61 	bl	800829e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095dc:	2101      	movs	r1, #1
 80095de:	6838      	ldr	r0, [r7, #0]
 80095e0:	f000 fa80 	bl	8009ae4 <prvAddCurrentTaskToDelayedList>
}
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	20001a10 	.word	0x20001a10

080095f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10a      	bne.n	8009618 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	617b      	str	r3, [r7, #20]
}
 8009614:	bf00      	nop
 8009616:	e7fe      	b.n	8009616 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009618:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <vTaskPlaceOnEventListRestricted+0x54>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3318      	adds	r3, #24
 800961e:	4619      	mov	r1, r3
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7fe fe18 	bl	8008256 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800962c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009630:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	68b8      	ldr	r0, [r7, #8]
 8009636:	f000 fa55 	bl	8009ae4 <prvAddCurrentTaskToDelayedList>
	}
 800963a:	bf00      	nop
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20001a10 	.word	0x20001a10

08009648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	60fb      	str	r3, [r7, #12]
}
 8009670:	bf00      	nop
 8009672:	e7fe      	b.n	8009672 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	3318      	adds	r3, #24
 8009678:	4618      	mov	r0, r3
 800967a:	f7fe fe49 	bl	8008310 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800967e:	4b1e      	ldr	r3, [pc, #120]	; (80096f8 <xTaskRemoveFromEventList+0xb0>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d11d      	bne.n	80096c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	3304      	adds	r3, #4
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fe40 	bl	8008310 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009694:	4b19      	ldr	r3, [pc, #100]	; (80096fc <xTaskRemoveFromEventList+0xb4>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d903      	bls.n	80096a4 <xTaskRemoveFromEventList+0x5c>
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	4a16      	ldr	r2, [pc, #88]	; (80096fc <xTaskRemoveFromEventList+0xb4>)
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4a13      	ldr	r2, [pc, #76]	; (8009700 <xTaskRemoveFromEventList+0xb8>)
 80096b2:	441a      	add	r2, r3
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4619      	mov	r1, r3
 80096ba:	4610      	mov	r0, r2
 80096bc:	f7fe fdcb 	bl	8008256 <vListInsertEnd>
 80096c0:	e005      	b.n	80096ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	3318      	adds	r3, #24
 80096c6:	4619      	mov	r1, r3
 80096c8:	480e      	ldr	r0, [pc, #56]	; (8009704 <xTaskRemoveFromEventList+0xbc>)
 80096ca:	f7fe fdc4 	bl	8008256 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d2:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <xTaskRemoveFromEventList+0xc0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d8:	429a      	cmp	r2, r3
 80096da:	d905      	bls.n	80096e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096dc:	2301      	movs	r3, #1
 80096de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096e0:	4b0a      	ldr	r3, [pc, #40]	; (800970c <xTaskRemoveFromEventList+0xc4>)
 80096e2:	2201      	movs	r2, #1
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	e001      	b.n	80096ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80096e8:	2300      	movs	r3, #0
 80096ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80096ec:	697b      	ldr	r3, [r7, #20]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20001f0c 	.word	0x20001f0c
 80096fc:	20001eec 	.word	0x20001eec
 8009700:	20001a14 	.word	0x20001a14
 8009704:	20001ea4 	.word	0x20001ea4
 8009708:	20001a10 	.word	0x20001a10
 800970c:	20001ef8 	.word	0x20001ef8

08009710 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009718:	4b06      	ldr	r3, [pc, #24]	; (8009734 <vTaskInternalSetTimeOutState+0x24>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009720:	4b05      	ldr	r3, [pc, #20]	; (8009738 <vTaskInternalSetTimeOutState+0x28>)
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	605a      	str	r2, [r3, #4]
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	20001efc 	.word	0x20001efc
 8009738:	20001ee8 	.word	0x20001ee8

0800973c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b088      	sub	sp, #32
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	613b      	str	r3, [r7, #16]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10a      	bne.n	800977e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	60fb      	str	r3, [r7, #12]
}
 800977a:	bf00      	nop
 800977c:	e7fe      	b.n	800977c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800977e:	f000 fe81 	bl	800a484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009782:	4b1d      	ldr	r3, [pc, #116]	; (80097f8 <xTaskCheckForTimeOut+0xbc>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800979a:	d102      	bne.n	80097a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800979c:	2300      	movs	r3, #0
 800979e:	61fb      	str	r3, [r7, #28]
 80097a0:	e023      	b.n	80097ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	4b15      	ldr	r3, [pc, #84]	; (80097fc <xTaskCheckForTimeOut+0xc0>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d007      	beq.n	80097be <xTaskCheckForTimeOut+0x82>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d302      	bcc.n	80097be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097b8:	2301      	movs	r3, #1
 80097ba:	61fb      	str	r3, [r7, #28]
 80097bc:	e015      	b.n	80097ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d20b      	bcs.n	80097e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	1ad2      	subs	r2, r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff ff9b 	bl	8009710 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097da:	2300      	movs	r3, #0
 80097dc:	61fb      	str	r3, [r7, #28]
 80097de:	e004      	b.n	80097ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2200      	movs	r2, #0
 80097e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097e6:	2301      	movs	r3, #1
 80097e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097ea:	f000 fe7b 	bl	800a4e4 <vPortExitCritical>

	return xReturn;
 80097ee:	69fb      	ldr	r3, [r7, #28]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3720      	adds	r7, #32
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	20001ee8 	.word	0x20001ee8
 80097fc:	20001efc 	.word	0x20001efc

08009800 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009800:	b480      	push	{r7}
 8009802:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009804:	4b03      	ldr	r3, [pc, #12]	; (8009814 <vTaskMissedYield+0x14>)
 8009806:	2201      	movs	r2, #1
 8009808:	601a      	str	r2, [r3, #0]
}
 800980a:	bf00      	nop
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	20001ef8 	.word	0x20001ef8

08009818 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009820:	f000 f852 	bl	80098c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009824:	4b06      	ldr	r3, [pc, #24]	; (8009840 <prvIdleTask+0x28>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d9f9      	bls.n	8009820 <prvIdleTask+0x8>
			{
				taskYIELD();
 800982c:	4b05      	ldr	r3, [pc, #20]	; (8009844 <prvIdleTask+0x2c>)
 800982e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800983c:	e7f0      	b.n	8009820 <prvIdleTask+0x8>
 800983e:	bf00      	nop
 8009840:	20001a14 	.word	0x20001a14
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800984e:	2300      	movs	r3, #0
 8009850:	607b      	str	r3, [r7, #4]
 8009852:	e00c      	b.n	800986e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	4613      	mov	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4a12      	ldr	r2, [pc, #72]	; (80098a8 <prvInitialiseTaskLists+0x60>)
 8009860:	4413      	add	r3, r2
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe fcca 	bl	80081fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3301      	adds	r3, #1
 800986c:	607b      	str	r3, [r7, #4]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b37      	cmp	r3, #55	; 0x37
 8009872:	d9ef      	bls.n	8009854 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009874:	480d      	ldr	r0, [pc, #52]	; (80098ac <prvInitialiseTaskLists+0x64>)
 8009876:	f7fe fcc1 	bl	80081fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800987a:	480d      	ldr	r0, [pc, #52]	; (80098b0 <prvInitialiseTaskLists+0x68>)
 800987c:	f7fe fcbe 	bl	80081fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009880:	480c      	ldr	r0, [pc, #48]	; (80098b4 <prvInitialiseTaskLists+0x6c>)
 8009882:	f7fe fcbb 	bl	80081fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009886:	480c      	ldr	r0, [pc, #48]	; (80098b8 <prvInitialiseTaskLists+0x70>)
 8009888:	f7fe fcb8 	bl	80081fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800988c:	480b      	ldr	r0, [pc, #44]	; (80098bc <prvInitialiseTaskLists+0x74>)
 800988e:	f7fe fcb5 	bl	80081fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009892:	4b0b      	ldr	r3, [pc, #44]	; (80098c0 <prvInitialiseTaskLists+0x78>)
 8009894:	4a05      	ldr	r2, [pc, #20]	; (80098ac <prvInitialiseTaskLists+0x64>)
 8009896:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009898:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <prvInitialiseTaskLists+0x7c>)
 800989a:	4a05      	ldr	r2, [pc, #20]	; (80098b0 <prvInitialiseTaskLists+0x68>)
 800989c:	601a      	str	r2, [r3, #0]
}
 800989e:	bf00      	nop
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20001a14 	.word	0x20001a14
 80098ac:	20001e74 	.word	0x20001e74
 80098b0:	20001e88 	.word	0x20001e88
 80098b4:	20001ea4 	.word	0x20001ea4
 80098b8:	20001eb8 	.word	0x20001eb8
 80098bc:	20001ed0 	.word	0x20001ed0
 80098c0:	20001e9c 	.word	0x20001e9c
 80098c4:	20001ea0 	.word	0x20001ea0

080098c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098ce:	e019      	b.n	8009904 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098d0:	f000 fdd8 	bl	800a484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d4:	4b10      	ldr	r3, [pc, #64]	; (8009918 <prvCheckTasksWaitingTermination+0x50>)
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	3304      	adds	r3, #4
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe fd15 	bl	8008310 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098e6:	4b0d      	ldr	r3, [pc, #52]	; (800991c <prvCheckTasksWaitingTermination+0x54>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3b01      	subs	r3, #1
 80098ec:	4a0b      	ldr	r2, [pc, #44]	; (800991c <prvCheckTasksWaitingTermination+0x54>)
 80098ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098f0:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <prvCheckTasksWaitingTermination+0x58>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	4a0a      	ldr	r2, [pc, #40]	; (8009920 <prvCheckTasksWaitingTermination+0x58>)
 80098f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098fa:	f000 fdf3 	bl	800a4e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f810 	bl	8009924 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009904:	4b06      	ldr	r3, [pc, #24]	; (8009920 <prvCheckTasksWaitingTermination+0x58>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1e1      	bne.n	80098d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800990c:	bf00      	nop
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20001eb8 	.word	0x20001eb8
 800991c:	20001ee4 	.word	0x20001ee4
 8009920:	20001ecc 	.word	0x20001ecc

08009924 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3354      	adds	r3, #84	; 0x54
 8009930:	4618      	mov	r0, r3
 8009932:	f001 f997 	bl	800ac64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800993c:	2b00      	cmp	r3, #0
 800993e:	d108      	bne.n	8009952 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009944:	4618      	mov	r0, r3
 8009946:	f000 ff8b 	bl	800a860 <vPortFree>
				vPortFree( pxTCB );
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 ff88 	bl	800a860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009950:	e018      	b.n	8009984 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009958:	2b01      	cmp	r3, #1
 800995a:	d103      	bne.n	8009964 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 ff7f 	bl	800a860 <vPortFree>
	}
 8009962:	e00f      	b.n	8009984 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800996a:	2b02      	cmp	r3, #2
 800996c:	d00a      	beq.n	8009984 <prvDeleteTCB+0x60>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	60fb      	str	r3, [r7, #12]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <prvDeleteTCB+0x5e>
	}
 8009984:	bf00      	nop
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009992:	4b0c      	ldr	r3, [pc, #48]	; (80099c4 <prvResetNextTaskUnblockTime+0x38>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d104      	bne.n	80099a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800999c:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <prvResetNextTaskUnblockTime+0x3c>)
 800999e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099a4:	e008      	b.n	80099b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a6:	4b07      	ldr	r3, [pc, #28]	; (80099c4 <prvResetNextTaskUnblockTime+0x38>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	4a04      	ldr	r2, [pc, #16]	; (80099c8 <prvResetNextTaskUnblockTime+0x3c>)
 80099b6:	6013      	str	r3, [r2, #0]
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	20001e9c 	.word	0x20001e9c
 80099c8:	20001f04 	.word	0x20001f04

080099cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099d2:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <xTaskGetSchedulerState+0x34>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d102      	bne.n	80099e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099da:	2301      	movs	r3, #1
 80099dc:	607b      	str	r3, [r7, #4]
 80099de:	e008      	b.n	80099f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099e0:	4b08      	ldr	r3, [pc, #32]	; (8009a04 <xTaskGetSchedulerState+0x38>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d102      	bne.n	80099ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099e8:	2302      	movs	r3, #2
 80099ea:	607b      	str	r3, [r7, #4]
 80099ec:	e001      	b.n	80099f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099ee:	2300      	movs	r3, #0
 80099f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099f2:	687b      	ldr	r3, [r7, #4]
	}
 80099f4:	4618      	mov	r0, r3
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	20001ef0 	.word	0x20001ef0
 8009a04:	20001f0c 	.word	0x20001f0c

08009a08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a14:	2300      	movs	r3, #0
 8009a16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d056      	beq.n	8009acc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a1e:	4b2e      	ldr	r3, [pc, #184]	; (8009ad8 <xTaskPriorityDisinherit+0xd0>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d00a      	beq.n	8009a3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	60fb      	str	r3, [r7, #12]
}
 8009a3a:	bf00      	nop
 8009a3c:	e7fe      	b.n	8009a3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10a      	bne.n	8009a5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	60bb      	str	r3, [r7, #8]
}
 8009a58:	bf00      	nop
 8009a5a:	e7fe      	b.n	8009a5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a60:	1e5a      	subs	r2, r3, #1
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d02c      	beq.n	8009acc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d128      	bne.n	8009acc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fe fc46 	bl	8008310 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a9c:	4b0f      	ldr	r3, [pc, #60]	; (8009adc <xTaskPriorityDisinherit+0xd4>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d903      	bls.n	8009aac <xTaskPriorityDisinherit+0xa4>
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa8:	4a0c      	ldr	r2, [pc, #48]	; (8009adc <xTaskPriorityDisinherit+0xd4>)
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4a09      	ldr	r2, [pc, #36]	; (8009ae0 <xTaskPriorityDisinherit+0xd8>)
 8009aba:	441a      	add	r2, r3
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	f7fe fbc7 	bl	8008256 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009acc:	697b      	ldr	r3, [r7, #20]
	}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20001a10 	.word	0x20001a10
 8009adc:	20001eec 	.word	0x20001eec
 8009ae0:	20001a14 	.word	0x20001a14

08009ae4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009aee:	4b21      	ldr	r3, [pc, #132]	; (8009b74 <prvAddCurrentTaskToDelayedList+0x90>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009af4:	4b20      	ldr	r3, [pc, #128]	; (8009b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe fc08 	bl	8008310 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b06:	d10a      	bne.n	8009b1e <prvAddCurrentTaskToDelayedList+0x3a>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d007      	beq.n	8009b1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b0e:	4b1a      	ldr	r3, [pc, #104]	; (8009b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3304      	adds	r3, #4
 8009b14:	4619      	mov	r1, r3
 8009b16:	4819      	ldr	r0, [pc, #100]	; (8009b7c <prvAddCurrentTaskToDelayedList+0x98>)
 8009b18:	f7fe fb9d 	bl	8008256 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b1c:	e026      	b.n	8009b6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4413      	add	r3, r2
 8009b24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b26:	4b14      	ldr	r3, [pc, #80]	; (8009b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d209      	bcs.n	8009b4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b36:	4b12      	ldr	r3, [pc, #72]	; (8009b80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	4b0f      	ldr	r3, [pc, #60]	; (8009b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4619      	mov	r1, r3
 8009b42:	4610      	mov	r0, r2
 8009b44:	f7fe fbab 	bl	800829e <vListInsert>
}
 8009b48:	e010      	b.n	8009b6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b4a:	4b0e      	ldr	r3, [pc, #56]	; (8009b84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	4b0a      	ldr	r3, [pc, #40]	; (8009b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f7fe fba1 	bl	800829e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d202      	bcs.n	8009b6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b66:	4a08      	ldr	r2, [pc, #32]	; (8009b88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	6013      	str	r3, [r2, #0]
}
 8009b6c:	bf00      	nop
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	20001ee8 	.word	0x20001ee8
 8009b78:	20001a10 	.word	0x20001a10
 8009b7c:	20001ed0 	.word	0x20001ed0
 8009b80:	20001ea0 	.word	0x20001ea0
 8009b84:	20001e9c 	.word	0x20001e9c
 8009b88:	20001f04 	.word	0x20001f04

08009b8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08a      	sub	sp, #40	; 0x28
 8009b90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b96:	f000 fb07 	bl	800a1a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b9a:	4b1c      	ldr	r3, [pc, #112]	; (8009c0c <xTimerCreateTimerTask+0x80>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d021      	beq.n	8009be6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009baa:	1d3a      	adds	r2, r7, #4
 8009bac:	f107 0108 	add.w	r1, r7, #8
 8009bb0:	f107 030c 	add.w	r3, r7, #12
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fe fb07 	bl	80081c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	9202      	str	r2, [sp, #8]
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	460a      	mov	r2, r1
 8009bcc:	4910      	ldr	r1, [pc, #64]	; (8009c10 <xTimerCreateTimerTask+0x84>)
 8009bce:	4811      	ldr	r0, [pc, #68]	; (8009c14 <xTimerCreateTimerTask+0x88>)
 8009bd0:	f7ff f8b4 	bl	8008d3c <xTaskCreateStatic>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	4a10      	ldr	r2, [pc, #64]	; (8009c18 <xTimerCreateTimerTask+0x8c>)
 8009bd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009bda:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <xTimerCreateTimerTask+0x8c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009be2:	2301      	movs	r3, #1
 8009be4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10a      	bne.n	8009c02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	613b      	str	r3, [r7, #16]
}
 8009bfe:	bf00      	nop
 8009c00:	e7fe      	b.n	8009c00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c02:	697b      	ldr	r3, [r7, #20]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20001f40 	.word	0x20001f40
 8009c10:	0800c390 	.word	0x0800c390
 8009c14:	08009d51 	.word	0x08009d51
 8009c18:	20001f44 	.word	0x20001f44

08009c1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08a      	sub	sp, #40	; 0x28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
 8009c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10a      	bne.n	8009c4a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	623b      	str	r3, [r7, #32]
}
 8009c46:	bf00      	nop
 8009c48:	e7fe      	b.n	8009c48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c4a:	4b1a      	ldr	r3, [pc, #104]	; (8009cb4 <xTimerGenericCommand+0x98>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d02a      	beq.n	8009ca8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2b05      	cmp	r3, #5
 8009c62:	dc18      	bgt.n	8009c96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c64:	f7ff feb2 	bl	80099cc <xTaskGetSchedulerState>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d109      	bne.n	8009c82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c6e:	4b11      	ldr	r3, [pc, #68]	; (8009cb4 <xTimerGenericCommand+0x98>)
 8009c70:	6818      	ldr	r0, [r3, #0]
 8009c72:	f107 0110 	add.w	r1, r7, #16
 8009c76:	2300      	movs	r3, #0
 8009c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c7a:	f7fe fc77 	bl	800856c <xQueueGenericSend>
 8009c7e:	6278      	str	r0, [r7, #36]	; 0x24
 8009c80:	e012      	b.n	8009ca8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c82:	4b0c      	ldr	r3, [pc, #48]	; (8009cb4 <xTimerGenericCommand+0x98>)
 8009c84:	6818      	ldr	r0, [r3, #0]
 8009c86:	f107 0110 	add.w	r1, r7, #16
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f7fe fc6d 	bl	800856c <xQueueGenericSend>
 8009c92:	6278      	str	r0, [r7, #36]	; 0x24
 8009c94:	e008      	b.n	8009ca8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c96:	4b07      	ldr	r3, [pc, #28]	; (8009cb4 <xTimerGenericCommand+0x98>)
 8009c98:	6818      	ldr	r0, [r3, #0]
 8009c9a:	f107 0110 	add.w	r1, r7, #16
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	f7fe fd61 	bl	8008768 <xQueueGenericSendFromISR>
 8009ca6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3728      	adds	r7, #40	; 0x28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20001f40 	.word	0x20001f40

08009cb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b088      	sub	sp, #32
 8009cbc:	af02      	add	r7, sp, #8
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cc2:	4b22      	ldr	r3, [pc, #136]	; (8009d4c <prvProcessExpiredTimer+0x94>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fe fb1d 	bl	8008310 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cdc:	f003 0304 	and.w	r3, r3, #4
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d022      	beq.n	8009d2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	699a      	ldr	r2, [r3, #24]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	18d1      	adds	r1, r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	6978      	ldr	r0, [r7, #20]
 8009cf2:	f000 f8d1 	bl	8009e98 <prvInsertTimerInActiveList>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01f      	beq.n	8009d3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	2300      	movs	r3, #0
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	2100      	movs	r1, #0
 8009d06:	6978      	ldr	r0, [r7, #20]
 8009d08:	f7ff ff88 	bl	8009c1c <xTimerGenericCommand>
 8009d0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d113      	bne.n	8009d3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	60fb      	str	r3, [r7, #12]
}
 8009d26:	bf00      	nop
 8009d28:	e7fe      	b.n	8009d28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d30:	f023 0301 	bic.w	r3, r3, #1
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	6a1b      	ldr	r3, [r3, #32]
 8009d40:	6978      	ldr	r0, [r7, #20]
 8009d42:	4798      	blx	r3
}
 8009d44:	bf00      	nop
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	20001f38 	.word	0x20001f38

08009d50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d58:	f107 0308 	add.w	r3, r7, #8
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 f857 	bl	8009e10 <prvGetNextExpireTime>
 8009d62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	4619      	mov	r1, r3
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 f803 	bl	8009d74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d6e:	f000 f8d5 	bl	8009f1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d72:	e7f1      	b.n	8009d58 <prvTimerTask+0x8>

08009d74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d7e:	f7ff fa39 	bl	80091f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d82:	f107 0308 	add.w	r3, r7, #8
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 f866 	bl	8009e58 <prvSampleTimeNow>
 8009d8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d130      	bne.n	8009df6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10a      	bne.n	8009db0 <prvProcessTimerOrBlockTask+0x3c>
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d806      	bhi.n	8009db0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009da2:	f7ff fa35 	bl	8009210 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7ff ff85 	bl	8009cb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009dae:	e024      	b.n	8009dfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d008      	beq.n	8009dc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009db6:	4b13      	ldr	r3, [pc, #76]	; (8009e04 <prvProcessTimerOrBlockTask+0x90>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <prvProcessTimerOrBlockTask+0x50>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e000      	b.n	8009dc6 <prvProcessTimerOrBlockTask+0x52>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009dc8:	4b0f      	ldr	r3, [pc, #60]	; (8009e08 <prvProcessTimerOrBlockTask+0x94>)
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	f7fe ff7d 	bl	8008cd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009dda:	f7ff fa19 	bl	8009210 <xTaskResumeAll>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009de4:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <prvProcessTimerOrBlockTask+0x98>)
 8009de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dea:	601a      	str	r2, [r3, #0]
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	f3bf 8f6f 	isb	sy
}
 8009df4:	e001      	b.n	8009dfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009df6:	f7ff fa0b 	bl	8009210 <xTaskResumeAll>
}
 8009dfa:	bf00      	nop
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20001f3c 	.word	0x20001f3c
 8009e08:	20001f40 	.word	0x20001f40
 8009e0c:	e000ed04 	.word	0xe000ed04

08009e10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e18:	4b0e      	ldr	r3, [pc, #56]	; (8009e54 <prvGetNextExpireTime+0x44>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <prvGetNextExpireTime+0x16>
 8009e22:	2201      	movs	r2, #1
 8009e24:	e000      	b.n	8009e28 <prvGetNextExpireTime+0x18>
 8009e26:	2200      	movs	r2, #0
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d105      	bne.n	8009e40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e34:	4b07      	ldr	r3, [pc, #28]	; (8009e54 <prvGetNextExpireTime+0x44>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	60fb      	str	r3, [r7, #12]
 8009e3e:	e001      	b.n	8009e44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e44:	68fb      	ldr	r3, [r7, #12]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20001f38 	.word	0x20001f38

08009e58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e60:	f7ff fa74 	bl	800934c <xTaskGetTickCount>
 8009e64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e66:	4b0b      	ldr	r3, [pc, #44]	; (8009e94 <prvSampleTimeNow+0x3c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d205      	bcs.n	8009e7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e70:	f000 f936 	bl	800a0e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	601a      	str	r2, [r3, #0]
 8009e7a:	e002      	b.n	8009e82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e82:	4a04      	ldr	r2, [pc, #16]	; (8009e94 <prvSampleTimeNow+0x3c>)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e88:	68fb      	ldr	r3, [r7, #12]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20001f48 	.word	0x20001f48

08009e98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d812      	bhi.n	8009ee4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	1ad2      	subs	r2, r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d302      	bcc.n	8009ed2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	617b      	str	r3, [r7, #20]
 8009ed0:	e01b      	b.n	8009f0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ed2:	4b10      	ldr	r3, [pc, #64]	; (8009f14 <prvInsertTimerInActiveList+0x7c>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	4619      	mov	r1, r3
 8009edc:	4610      	mov	r0, r2
 8009ede:	f7fe f9de 	bl	800829e <vListInsert>
 8009ee2:	e012      	b.n	8009f0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d206      	bcs.n	8009efa <prvInsertTimerInActiveList+0x62>
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d302      	bcc.n	8009efa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	e007      	b.n	8009f0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009efa:	4b07      	ldr	r3, [pc, #28]	; (8009f18 <prvInsertTimerInActiveList+0x80>)
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3304      	adds	r3, #4
 8009f02:	4619      	mov	r1, r3
 8009f04:	4610      	mov	r0, r2
 8009f06:	f7fe f9ca 	bl	800829e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f0a:	697b      	ldr	r3, [r7, #20]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	20001f3c 	.word	0x20001f3c
 8009f18:	20001f38 	.word	0x20001f38

08009f1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08e      	sub	sp, #56	; 0x38
 8009f20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f22:	e0ca      	b.n	800a0ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	da18      	bge.n	8009f5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f2a:	1d3b      	adds	r3, r7, #4
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10a      	bne.n	8009f4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	61fb      	str	r3, [r7, #28]
}
 8009f48:	bf00      	nop
 8009f4a:	e7fe      	b.n	8009f4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f52:	6850      	ldr	r0, [r2, #4]
 8009f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f56:	6892      	ldr	r2, [r2, #8]
 8009f58:	4611      	mov	r1, r2
 8009f5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f2c0 80aa 	blt.w	800a0b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d004      	beq.n	8009f7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f72:	3304      	adds	r3, #4
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe f9cb 	bl	8008310 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f7a:	463b      	mov	r3, r7
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7ff ff6b 	bl	8009e58 <prvSampleTimeNow>
 8009f82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b09      	cmp	r3, #9
 8009f88:	f200 8097 	bhi.w	800a0ba <prvProcessReceivedCommands+0x19e>
 8009f8c:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <prvProcessReceivedCommands+0x78>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fbd 	.word	0x08009fbd
 8009f98:	08009fbd 	.word	0x08009fbd
 8009f9c:	08009fbd 	.word	0x08009fbd
 8009fa0:	0800a031 	.word	0x0800a031
 8009fa4:	0800a045 	.word	0x0800a045
 8009fa8:	0800a08f 	.word	0x0800a08f
 8009fac:	08009fbd 	.word	0x08009fbd
 8009fb0:	08009fbd 	.word	0x08009fbd
 8009fb4:	0800a031 	.word	0x0800a031
 8009fb8:	0800a045 	.word	0x0800a045
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fc2:	f043 0301 	orr.w	r3, r3, #1
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	18d1      	adds	r1, r2, r3
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fdc:	f7ff ff5c 	bl	8009e98 <prvInsertTimerInActiveList>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d069      	beq.n	800a0ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ff4:	f003 0304 	and.w	r3, r3, #4
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d05e      	beq.n	800a0ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	699b      	ldr	r3, [r3, #24]
 800a002:	441a      	add	r2, r3
 800a004:	2300      	movs	r3, #0
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	2300      	movs	r3, #0
 800a00a:	2100      	movs	r1, #0
 800a00c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a00e:	f7ff fe05 	bl	8009c1c <xTimerGenericCommand>
 800a012:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d14f      	bne.n	800a0ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	61bb      	str	r3, [r7, #24]
}
 800a02c:	bf00      	nop
 800a02e:	e7fe      	b.n	800a02e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a036:	f023 0301 	bic.w	r3, r3, #1
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a042:	e03a      	b.n	800a0ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a04a:	f043 0301 	orr.w	r3, r3, #1
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10a      	bne.n	800a07a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a068:	f383 8811 	msr	BASEPRI, r3
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	617b      	str	r3, [r7, #20]
}
 800a076:	bf00      	nop
 800a078:	e7fe      	b.n	800a078 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	699a      	ldr	r2, [r3, #24]
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	18d1      	adds	r1, r2, r3
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a088:	f7ff ff06 	bl	8009e98 <prvInsertTimerInActiveList>
					break;
 800a08c:	e015      	b.n	800a0ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d103      	bne.n	800a0a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a09c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a09e:	f000 fbdf 	bl	800a860 <vPortFree>
 800a0a2:	e00a      	b.n	800a0ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0aa:	f023 0301 	bic.w	r3, r3, #1
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a0b6:	e000      	b.n	800a0ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a0b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0ba:	4b08      	ldr	r3, [pc, #32]	; (800a0dc <prvProcessReceivedCommands+0x1c0>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	1d39      	adds	r1, r7, #4
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fe fbec 	bl	80088a0 <xQueueReceive>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f47f af2a 	bne.w	8009f24 <prvProcessReceivedCommands+0x8>
	}
}
 800a0d0:	bf00      	nop
 800a0d2:	bf00      	nop
 800a0d4:	3730      	adds	r7, #48	; 0x30
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20001f40 	.word	0x20001f40

0800a0e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0e6:	e048      	b.n	800a17a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0e8:	4b2d      	ldr	r3, [pc, #180]	; (800a1a0 <prvSwitchTimerLists+0xc0>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0f2:	4b2b      	ldr	r3, [pc, #172]	; (800a1a0 <prvSwitchTimerLists+0xc0>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	3304      	adds	r3, #4
 800a100:	4618      	mov	r0, r3
 800a102:	f7fe f905 	bl	8008310 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d02e      	beq.n	800a17a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	4413      	add	r3, r2
 800a124:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d90e      	bls.n	800a14c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a13a:	4b19      	ldr	r3, [pc, #100]	; (800a1a0 <prvSwitchTimerLists+0xc0>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3304      	adds	r3, #4
 800a142:	4619      	mov	r1, r3
 800a144:	4610      	mov	r0, r2
 800a146:	f7fe f8aa 	bl	800829e <vListInsert>
 800a14a:	e016      	b.n	800a17a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a14c:	2300      	movs	r3, #0
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	2300      	movs	r3, #0
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	2100      	movs	r1, #0
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f7ff fd60 	bl	8009c1c <xTimerGenericCommand>
 800a15c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10a      	bne.n	800a17a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	603b      	str	r3, [r7, #0]
}
 800a176:	bf00      	nop
 800a178:	e7fe      	b.n	800a178 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a17a:	4b09      	ldr	r3, [pc, #36]	; (800a1a0 <prvSwitchTimerLists+0xc0>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1b1      	bne.n	800a0e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a184:	4b06      	ldr	r3, [pc, #24]	; (800a1a0 <prvSwitchTimerLists+0xc0>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a18a:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <prvSwitchTimerLists+0xc4>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a04      	ldr	r2, [pc, #16]	; (800a1a0 <prvSwitchTimerLists+0xc0>)
 800a190:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a192:	4a04      	ldr	r2, [pc, #16]	; (800a1a4 <prvSwitchTimerLists+0xc4>)
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	6013      	str	r3, [r2, #0]
}
 800a198:	bf00      	nop
 800a19a:	3718      	adds	r7, #24
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	20001f38 	.word	0x20001f38
 800a1a4:	20001f3c 	.word	0x20001f3c

0800a1a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a1ae:	f000 f969 	bl	800a484 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a1b2:	4b15      	ldr	r3, [pc, #84]	; (800a208 <prvCheckForValidListAndQueue+0x60>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d120      	bne.n	800a1fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a1ba:	4814      	ldr	r0, [pc, #80]	; (800a20c <prvCheckForValidListAndQueue+0x64>)
 800a1bc:	f7fe f81e 	bl	80081fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a1c0:	4813      	ldr	r0, [pc, #76]	; (800a210 <prvCheckForValidListAndQueue+0x68>)
 800a1c2:	f7fe f81b 	bl	80081fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a1c6:	4b13      	ldr	r3, [pc, #76]	; (800a214 <prvCheckForValidListAndQueue+0x6c>)
 800a1c8:	4a10      	ldr	r2, [pc, #64]	; (800a20c <prvCheckForValidListAndQueue+0x64>)
 800a1ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1cc:	4b12      	ldr	r3, [pc, #72]	; (800a218 <prvCheckForValidListAndQueue+0x70>)
 800a1ce:	4a10      	ldr	r2, [pc, #64]	; (800a210 <prvCheckForValidListAndQueue+0x68>)
 800a1d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	4b11      	ldr	r3, [pc, #68]	; (800a21c <prvCheckForValidListAndQueue+0x74>)
 800a1d8:	4a11      	ldr	r2, [pc, #68]	; (800a220 <prvCheckForValidListAndQueue+0x78>)
 800a1da:	2110      	movs	r1, #16
 800a1dc:	200a      	movs	r0, #10
 800a1de:	f7fe f929 	bl	8008434 <xQueueGenericCreateStatic>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	4a08      	ldr	r2, [pc, #32]	; (800a208 <prvCheckForValidListAndQueue+0x60>)
 800a1e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1e8:	4b07      	ldr	r3, [pc, #28]	; (800a208 <prvCheckForValidListAndQueue+0x60>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d005      	beq.n	800a1fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1f0:	4b05      	ldr	r3, [pc, #20]	; (800a208 <prvCheckForValidListAndQueue+0x60>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	490b      	ldr	r1, [pc, #44]	; (800a224 <prvCheckForValidListAndQueue+0x7c>)
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe fd42 	bl	8008c80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1fc:	f000 f972 	bl	800a4e4 <vPortExitCritical>
}
 800a200:	bf00      	nop
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20001f40 	.word	0x20001f40
 800a20c:	20001f10 	.word	0x20001f10
 800a210:	20001f24 	.word	0x20001f24
 800a214:	20001f38 	.word	0x20001f38
 800a218:	20001f3c 	.word	0x20001f3c
 800a21c:	20001fec 	.word	0x20001fec
 800a220:	20001f4c 	.word	0x20001f4c
 800a224:	0800c398 	.word	0x0800c398

0800a228 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3b04      	subs	r3, #4
 800a238:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3b04      	subs	r3, #4
 800a246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	f023 0201 	bic.w	r2, r3, #1
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	3b04      	subs	r3, #4
 800a256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a258:	4a0c      	ldr	r2, [pc, #48]	; (800a28c <pxPortInitialiseStack+0x64>)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3b14      	subs	r3, #20
 800a262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3b04      	subs	r3, #4
 800a26e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f06f 0202 	mvn.w	r2, #2
 800a276:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3b20      	subs	r3, #32
 800a27c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a27e:	68fb      	ldr	r3, [r7, #12]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	0800a291 	.word	0x0800a291

0800a290 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a29a:	4b12      	ldr	r3, [pc, #72]	; (800a2e4 <prvTaskExitError+0x54>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2a2:	d00a      	beq.n	800a2ba <prvTaskExitError+0x2a>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	60fb      	str	r3, [r7, #12]
}
 800a2b6:	bf00      	nop
 800a2b8:	e7fe      	b.n	800a2b8 <prvTaskExitError+0x28>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	60bb      	str	r3, [r7, #8]
}
 800a2cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a2ce:	bf00      	nop
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0fc      	beq.n	800a2d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2d6:	bf00      	nop
 800a2d8:	bf00      	nop
 800a2da:	3714      	adds	r7, #20
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr
 800a2e4:	2000000c 	.word	0x2000000c
	...

0800a2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2f0:	4b07      	ldr	r3, [pc, #28]	; (800a310 <pxCurrentTCBConst2>)
 800a2f2:	6819      	ldr	r1, [r3, #0]
 800a2f4:	6808      	ldr	r0, [r1, #0]
 800a2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fa:	f380 8809 	msr	PSP, r0
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f04f 0000 	mov.w	r0, #0
 800a306:	f380 8811 	msr	BASEPRI, r0
 800a30a:	4770      	bx	lr
 800a30c:	f3af 8000 	nop.w

0800a310 <pxCurrentTCBConst2>:
 800a310:	20001a10 	.word	0x20001a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop

0800a318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a318:	4808      	ldr	r0, [pc, #32]	; (800a33c <prvPortStartFirstTask+0x24>)
 800a31a:	6800      	ldr	r0, [r0, #0]
 800a31c:	6800      	ldr	r0, [r0, #0]
 800a31e:	f380 8808 	msr	MSP, r0
 800a322:	f04f 0000 	mov.w	r0, #0
 800a326:	f380 8814 	msr	CONTROL, r0
 800a32a:	b662      	cpsie	i
 800a32c:	b661      	cpsie	f
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	df00      	svc	0
 800a338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a33a:	bf00      	nop
 800a33c:	e000ed08 	.word	0xe000ed08

0800a340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a346:	4b46      	ldr	r3, [pc, #280]	; (800a460 <xPortStartScheduler+0x120>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a46      	ldr	r2, [pc, #280]	; (800a464 <xPortStartScheduler+0x124>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d10a      	bne.n	800a366 <xPortStartScheduler+0x26>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	613b      	str	r3, [r7, #16]
}
 800a362:	bf00      	nop
 800a364:	e7fe      	b.n	800a364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a366:	4b3e      	ldr	r3, [pc, #248]	; (800a460 <xPortStartScheduler+0x120>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a3f      	ldr	r2, [pc, #252]	; (800a468 <xPortStartScheduler+0x128>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d10a      	bne.n	800a386 <xPortStartScheduler+0x46>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	60fb      	str	r3, [r7, #12]
}
 800a382:	bf00      	nop
 800a384:	e7fe      	b.n	800a384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a386:	4b39      	ldr	r3, [pc, #228]	; (800a46c <xPortStartScheduler+0x12c>)
 800a388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	22ff      	movs	r2, #255	; 0xff
 800a396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3a0:	78fb      	ldrb	r3, [r7, #3]
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	4b31      	ldr	r3, [pc, #196]	; (800a470 <xPortStartScheduler+0x130>)
 800a3ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3ae:	4b31      	ldr	r3, [pc, #196]	; (800a474 <xPortStartScheduler+0x134>)
 800a3b0:	2207      	movs	r2, #7
 800a3b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3b4:	e009      	b.n	800a3ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a3b6:	4b2f      	ldr	r3, [pc, #188]	; (800a474 <xPortStartScheduler+0x134>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	4a2d      	ldr	r2, [pc, #180]	; (800a474 <xPortStartScheduler+0x134>)
 800a3be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3c0:	78fb      	ldrb	r3, [r7, #3]
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3ca:	78fb      	ldrb	r3, [r7, #3]
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3d2:	2b80      	cmp	r3, #128	; 0x80
 800a3d4:	d0ef      	beq.n	800a3b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3d6:	4b27      	ldr	r3, [pc, #156]	; (800a474 <xPortStartScheduler+0x134>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f1c3 0307 	rsb	r3, r3, #7
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	d00a      	beq.n	800a3f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	60bb      	str	r3, [r7, #8]
}
 800a3f4:	bf00      	nop
 800a3f6:	e7fe      	b.n	800a3f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3f8:	4b1e      	ldr	r3, [pc, #120]	; (800a474 <xPortStartScheduler+0x134>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	021b      	lsls	r3, r3, #8
 800a3fe:	4a1d      	ldr	r2, [pc, #116]	; (800a474 <xPortStartScheduler+0x134>)
 800a400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a402:	4b1c      	ldr	r3, [pc, #112]	; (800a474 <xPortStartScheduler+0x134>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a40a:	4a1a      	ldr	r2, [pc, #104]	; (800a474 <xPortStartScheduler+0x134>)
 800a40c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	b2da      	uxtb	r2, r3
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a416:	4b18      	ldr	r3, [pc, #96]	; (800a478 <xPortStartScheduler+0x138>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a17      	ldr	r2, [pc, #92]	; (800a478 <xPortStartScheduler+0x138>)
 800a41c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a422:	4b15      	ldr	r3, [pc, #84]	; (800a478 <xPortStartScheduler+0x138>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a14      	ldr	r2, [pc, #80]	; (800a478 <xPortStartScheduler+0x138>)
 800a428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a42c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a42e:	f000 f8dd 	bl	800a5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a432:	4b12      	ldr	r3, [pc, #72]	; (800a47c <xPortStartScheduler+0x13c>)
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a438:	f000 f8fc 	bl	800a634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a43c:	4b10      	ldr	r3, [pc, #64]	; (800a480 <xPortStartScheduler+0x140>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a0f      	ldr	r2, [pc, #60]	; (800a480 <xPortStartScheduler+0x140>)
 800a442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a448:	f7ff ff66 	bl	800a318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a44c:	f7ff f848 	bl	80094e0 <vTaskSwitchContext>
	prvTaskExitError();
 800a450:	f7ff ff1e 	bl	800a290 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	e000ed00 	.word	0xe000ed00
 800a464:	410fc271 	.word	0x410fc271
 800a468:	410fc270 	.word	0x410fc270
 800a46c:	e000e400 	.word	0xe000e400
 800a470:	2000203c 	.word	0x2000203c
 800a474:	20002040 	.word	0x20002040
 800a478:	e000ed20 	.word	0xe000ed20
 800a47c:	2000000c 	.word	0x2000000c
 800a480:	e000ef34 	.word	0xe000ef34

0800a484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	607b      	str	r3, [r7, #4]
}
 800a49c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a49e:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <vPortEnterCritical+0x58>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	4a0d      	ldr	r2, [pc, #52]	; (800a4dc <vPortEnterCritical+0x58>)
 800a4a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4a8:	4b0c      	ldr	r3, [pc, #48]	; (800a4dc <vPortEnterCritical+0x58>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d10f      	bne.n	800a4d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4b0:	4b0b      	ldr	r3, [pc, #44]	; (800a4e0 <vPortEnterCritical+0x5c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	603b      	str	r3, [r7, #0]
}
 800a4cc:	bf00      	nop
 800a4ce:	e7fe      	b.n	800a4ce <vPortEnterCritical+0x4a>
	}
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	2000000c 	.word	0x2000000c
 800a4e0:	e000ed04 	.word	0xe000ed04

0800a4e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4ea:	4b12      	ldr	r3, [pc, #72]	; (800a534 <vPortExitCritical+0x50>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10a      	bne.n	800a508 <vPortExitCritical+0x24>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	607b      	str	r3, [r7, #4]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a508:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <vPortExitCritical+0x50>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3b01      	subs	r3, #1
 800a50e:	4a09      	ldr	r2, [pc, #36]	; (800a534 <vPortExitCritical+0x50>)
 800a510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a512:	4b08      	ldr	r3, [pc, #32]	; (800a534 <vPortExitCritical+0x50>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d105      	bne.n	800a526 <vPortExitCritical+0x42>
 800a51a:	2300      	movs	r3, #0
 800a51c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	f383 8811 	msr	BASEPRI, r3
}
 800a524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a526:	bf00      	nop
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	2000000c 	.word	0x2000000c
	...

0800a540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a540:	f3ef 8009 	mrs	r0, PSP
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	4b15      	ldr	r3, [pc, #84]	; (800a5a0 <pxCurrentTCBConst>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	f01e 0f10 	tst.w	lr, #16
 800a550:	bf08      	it	eq
 800a552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55a:	6010      	str	r0, [r2, #0]
 800a55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a564:	f380 8811 	msr	BASEPRI, r0
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f7fe ffb6 	bl	80094e0 <vTaskSwitchContext>
 800a574:	f04f 0000 	mov.w	r0, #0
 800a578:	f380 8811 	msr	BASEPRI, r0
 800a57c:	bc09      	pop	{r0, r3}
 800a57e:	6819      	ldr	r1, [r3, #0]
 800a580:	6808      	ldr	r0, [r1, #0]
 800a582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a586:	f01e 0f10 	tst.w	lr, #16
 800a58a:	bf08      	it	eq
 800a58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a590:	f380 8809 	msr	PSP, r0
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	f3af 8000 	nop.w

0800a5a0 <pxCurrentTCBConst>:
 800a5a0:	20001a10 	.word	0x20001a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop

0800a5a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	607b      	str	r3, [r7, #4]
}
 800a5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5c2:	f7fe fed3 	bl	800936c <xTaskIncrementTick>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5cc:	4b06      	ldr	r3, [pc, #24]	; (800a5e8 <xPortSysTickHandler+0x40>)
 800a5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	f383 8811 	msr	BASEPRI, r3
}
 800a5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	e000ed04 	.word	0xe000ed04

0800a5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5f0:	4b0b      	ldr	r3, [pc, #44]	; (800a620 <vPortSetupTimerInterrupt+0x34>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5f6:	4b0b      	ldr	r3, [pc, #44]	; (800a624 <vPortSetupTimerInterrupt+0x38>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <vPortSetupTimerInterrupt+0x3c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a0a      	ldr	r2, [pc, #40]	; (800a62c <vPortSetupTimerInterrupt+0x40>)
 800a602:	fba2 2303 	umull	r2, r3, r2, r3
 800a606:	099b      	lsrs	r3, r3, #6
 800a608:	4a09      	ldr	r2, [pc, #36]	; (800a630 <vPortSetupTimerInterrupt+0x44>)
 800a60a:	3b01      	subs	r3, #1
 800a60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a60e:	4b04      	ldr	r3, [pc, #16]	; (800a620 <vPortSetupTimerInterrupt+0x34>)
 800a610:	2207      	movs	r2, #7
 800a612:	601a      	str	r2, [r3, #0]
}
 800a614:	bf00      	nop
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	e000e010 	.word	0xe000e010
 800a624:	e000e018 	.word	0xe000e018
 800a628:	20000000 	.word	0x20000000
 800a62c:	10624dd3 	.word	0x10624dd3
 800a630:	e000e014 	.word	0xe000e014

0800a634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a644 <vPortEnableVFP+0x10>
 800a638:	6801      	ldr	r1, [r0, #0]
 800a63a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a63e:	6001      	str	r1, [r0, #0]
 800a640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a642:	bf00      	nop
 800a644:	e000ed88 	.word	0xe000ed88

0800a648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a64e:	f3ef 8305 	mrs	r3, IPSR
 800a652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2b0f      	cmp	r3, #15
 800a658:	d914      	bls.n	800a684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a65a:	4a17      	ldr	r2, [pc, #92]	; (800a6b8 <vPortValidateInterruptPriority+0x70>)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4413      	add	r3, r2
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a664:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <vPortValidateInterruptPriority+0x74>)
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	7afa      	ldrb	r2, [r7, #11]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d20a      	bcs.n	800a684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	607b      	str	r3, [r7, #4]
}
 800a680:	bf00      	nop
 800a682:	e7fe      	b.n	800a682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a684:	4b0e      	ldr	r3, [pc, #56]	; (800a6c0 <vPortValidateInterruptPriority+0x78>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a68c:	4b0d      	ldr	r3, [pc, #52]	; (800a6c4 <vPortValidateInterruptPriority+0x7c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	429a      	cmp	r2, r3
 800a692:	d90a      	bls.n	800a6aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	603b      	str	r3, [r7, #0]
}
 800a6a6:	bf00      	nop
 800a6a8:	e7fe      	b.n	800a6a8 <vPortValidateInterruptPriority+0x60>
	}
 800a6aa:	bf00      	nop
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	e000e3f0 	.word	0xe000e3f0
 800a6bc:	2000203c 	.word	0x2000203c
 800a6c0:	e000ed0c 	.word	0xe000ed0c
 800a6c4:	20002040 	.word	0x20002040

0800a6c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08a      	sub	sp, #40	; 0x28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6d4:	f7fe fd8e 	bl	80091f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6d8:	4b5b      	ldr	r3, [pc, #364]	; (800a848 <pvPortMalloc+0x180>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6e0:	f000 f920 	bl	800a924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6e4:	4b59      	ldr	r3, [pc, #356]	; (800a84c <pvPortMalloc+0x184>)
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f040 8093 	bne.w	800a818 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d01d      	beq.n	800a734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a6f8:	2208      	movs	r2, #8
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f003 0307 	and.w	r3, r3, #7
 800a706:	2b00      	cmp	r3, #0
 800a708:	d014      	beq.n	800a734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f023 0307 	bic.w	r3, r3, #7
 800a710:	3308      	adds	r3, #8
 800a712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f003 0307 	and.w	r3, r3, #7
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00a      	beq.n	800a734 <pvPortMalloc+0x6c>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	617b      	str	r3, [r7, #20]
}
 800a730:	bf00      	nop
 800a732:	e7fe      	b.n	800a732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d06e      	beq.n	800a818 <pvPortMalloc+0x150>
 800a73a:	4b45      	ldr	r3, [pc, #276]	; (800a850 <pvPortMalloc+0x188>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	429a      	cmp	r2, r3
 800a742:	d869      	bhi.n	800a818 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a744:	4b43      	ldr	r3, [pc, #268]	; (800a854 <pvPortMalloc+0x18c>)
 800a746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a748:	4b42      	ldr	r3, [pc, #264]	; (800a854 <pvPortMalloc+0x18c>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a74e:	e004      	b.n	800a75a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	429a      	cmp	r2, r3
 800a762:	d903      	bls.n	800a76c <pvPortMalloc+0xa4>
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1f1      	bne.n	800a750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a76c:	4b36      	ldr	r3, [pc, #216]	; (800a848 <pvPortMalloc+0x180>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a772:	429a      	cmp	r2, r3
 800a774:	d050      	beq.n	800a818 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a776:	6a3b      	ldr	r3, [r7, #32]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2208      	movs	r2, #8
 800a77c:	4413      	add	r3, r2
 800a77e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	6a3b      	ldr	r3, [r7, #32]
 800a786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	2308      	movs	r3, #8
 800a792:	005b      	lsls	r3, r3, #1
 800a794:	429a      	cmp	r2, r3
 800a796:	d91f      	bls.n	800a7d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4413      	add	r3, r2
 800a79e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00a      	beq.n	800a7c0 <pvPortMalloc+0xf8>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	613b      	str	r3, [r7, #16]
}
 800a7bc:	bf00      	nop
 800a7be:	e7fe      	b.n	800a7be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	1ad2      	subs	r2, r2, r3
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7d2:	69b8      	ldr	r0, [r7, #24]
 800a7d4:	f000 f908 	bl	800a9e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7d8:	4b1d      	ldr	r3, [pc, #116]	; (800a850 <pvPortMalloc+0x188>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	4a1b      	ldr	r2, [pc, #108]	; (800a850 <pvPortMalloc+0x188>)
 800a7e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7e6:	4b1a      	ldr	r3, [pc, #104]	; (800a850 <pvPortMalloc+0x188>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	4b1b      	ldr	r3, [pc, #108]	; (800a858 <pvPortMalloc+0x190>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d203      	bcs.n	800a7fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7f2:	4b17      	ldr	r3, [pc, #92]	; (800a850 <pvPortMalloc+0x188>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a18      	ldr	r2, [pc, #96]	; (800a858 <pvPortMalloc+0x190>)
 800a7f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	4b13      	ldr	r3, [pc, #76]	; (800a84c <pvPortMalloc+0x184>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	431a      	orrs	r2, r3
 800a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80a:	2200      	movs	r2, #0
 800a80c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a80e:	4b13      	ldr	r3, [pc, #76]	; (800a85c <pvPortMalloc+0x194>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3301      	adds	r3, #1
 800a814:	4a11      	ldr	r2, [pc, #68]	; (800a85c <pvPortMalloc+0x194>)
 800a816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a818:	f7fe fcfa 	bl	8009210 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	f003 0307 	and.w	r3, r3, #7
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00a      	beq.n	800a83c <pvPortMalloc+0x174>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	60fb      	str	r3, [r7, #12]
}
 800a838:	bf00      	nop
 800a83a:	e7fe      	b.n	800a83a <pvPortMalloc+0x172>
	return pvReturn;
 800a83c:	69fb      	ldr	r3, [r7, #28]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3728      	adds	r7, #40	; 0x28
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	200037bc 	.word	0x200037bc
 800a84c:	200037d0 	.word	0x200037d0
 800a850:	200037c0 	.word	0x200037c0
 800a854:	200037b4 	.word	0x200037b4
 800a858:	200037c4 	.word	0x200037c4
 800a85c:	200037c8 	.word	0x200037c8

0800a860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d04d      	beq.n	800a90e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a872:	2308      	movs	r3, #8
 800a874:	425b      	negs	r3, r3
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	4413      	add	r3, r2
 800a87a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	4b24      	ldr	r3, [pc, #144]	; (800a918 <vPortFree+0xb8>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4013      	ands	r3, r2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10a      	bne.n	800a8a4 <vPortFree+0x44>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	60fb      	str	r3, [r7, #12]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00a      	beq.n	800a8c2 <vPortFree+0x62>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	60bb      	str	r3, [r7, #8]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	4b14      	ldr	r3, [pc, #80]	; (800a918 <vPortFree+0xb8>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d01e      	beq.n	800a90e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d11a      	bne.n	800a90e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	4b0e      	ldr	r3, [pc, #56]	; (800a918 <vPortFree+0xb8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	43db      	mvns	r3, r3
 800a8e2:	401a      	ands	r2, r3
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8e8:	f7fe fc84 	bl	80091f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <vPortFree+0xbc>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	4a09      	ldr	r2, [pc, #36]	; (800a91c <vPortFree+0xbc>)
 800a8f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8fa:	6938      	ldr	r0, [r7, #16]
 800a8fc:	f000 f874 	bl	800a9e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <vPortFree+0xc0>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3301      	adds	r3, #1
 800a906:	4a06      	ldr	r2, [pc, #24]	; (800a920 <vPortFree+0xc0>)
 800a908:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a90a:	f7fe fc81 	bl	8009210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a90e:	bf00      	nop
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	200037d0 	.word	0x200037d0
 800a91c:	200037c0 	.word	0x200037c0
 800a920:	200037cc 	.word	0x200037cc

0800a924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a92a:	f241 7370 	movw	r3, #6000	; 0x1770
 800a92e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a930:	4b27      	ldr	r3, [pc, #156]	; (800a9d0 <prvHeapInit+0xac>)
 800a932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00c      	beq.n	800a958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3307      	adds	r3, #7
 800a942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f023 0307 	bic.w	r3, r3, #7
 800a94a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	4a1f      	ldr	r2, [pc, #124]	; (800a9d0 <prvHeapInit+0xac>)
 800a954:	4413      	add	r3, r2
 800a956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a95c:	4a1d      	ldr	r2, [pc, #116]	; (800a9d4 <prvHeapInit+0xb0>)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a962:	4b1c      	ldr	r3, [pc, #112]	; (800a9d4 <prvHeapInit+0xb0>)
 800a964:	2200      	movs	r2, #0
 800a966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	4413      	add	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a970:	2208      	movs	r2, #8
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	1a9b      	subs	r3, r3, r2
 800a976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f023 0307 	bic.w	r3, r3, #7
 800a97e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4a15      	ldr	r2, [pc, #84]	; (800a9d8 <prvHeapInit+0xb4>)
 800a984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a986:	4b14      	ldr	r3, [pc, #80]	; (800a9d8 <prvHeapInit+0xb4>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2200      	movs	r2, #0
 800a98c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a98e:	4b12      	ldr	r3, [pc, #72]	; (800a9d8 <prvHeapInit+0xb4>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	1ad2      	subs	r2, r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9a4:	4b0c      	ldr	r3, [pc, #48]	; (800a9d8 <prvHeapInit+0xb4>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	4a0a      	ldr	r2, [pc, #40]	; (800a9dc <prvHeapInit+0xb8>)
 800a9b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	4a09      	ldr	r2, [pc, #36]	; (800a9e0 <prvHeapInit+0xbc>)
 800a9ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9bc:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <prvHeapInit+0xc0>)
 800a9be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9c2:	601a      	str	r2, [r3, #0]
}
 800a9c4:	bf00      	nop
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	20002044 	.word	0x20002044
 800a9d4:	200037b4 	.word	0x200037b4
 800a9d8:	200037bc 	.word	0x200037bc
 800a9dc:	200037c4 	.word	0x200037c4
 800a9e0:	200037c0 	.word	0x200037c0
 800a9e4:	200037d0 	.word	0x200037d0

0800a9e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9f0:	4b28      	ldr	r3, [pc, #160]	; (800aa94 <prvInsertBlockIntoFreeList+0xac>)
 800a9f2:	60fb      	str	r3, [r7, #12]
 800a9f4:	e002      	b.n	800a9fc <prvInsertBlockIntoFreeList+0x14>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d8f7      	bhi.n	800a9f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	4413      	add	r3, r2
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d108      	bne.n	800aa2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	441a      	add	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	441a      	add	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d118      	bne.n	800aa70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	4b15      	ldr	r3, [pc, #84]	; (800aa98 <prvInsertBlockIntoFreeList+0xb0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d00d      	beq.n	800aa66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	441a      	add	r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	e008      	b.n	800aa78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa66:	4b0c      	ldr	r3, [pc, #48]	; (800aa98 <prvInsertBlockIntoFreeList+0xb0>)
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	601a      	str	r2, [r3, #0]
 800aa6e:	e003      	b.n	800aa78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d002      	beq.n	800aa86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa86:	bf00      	nop
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	200037b4 	.word	0x200037b4
 800aa98:	200037bc 	.word	0x200037bc

0800aa9c <__errno>:
 800aa9c:	4b01      	ldr	r3, [pc, #4]	; (800aaa4 <__errno+0x8>)
 800aa9e:	6818      	ldr	r0, [r3, #0]
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20000010 	.word	0x20000010

0800aaa8 <__libc_init_array>:
 800aaa8:	b570      	push	{r4, r5, r6, lr}
 800aaaa:	4d0d      	ldr	r5, [pc, #52]	; (800aae0 <__libc_init_array+0x38>)
 800aaac:	4c0d      	ldr	r4, [pc, #52]	; (800aae4 <__libc_init_array+0x3c>)
 800aaae:	1b64      	subs	r4, r4, r5
 800aab0:	10a4      	asrs	r4, r4, #2
 800aab2:	2600      	movs	r6, #0
 800aab4:	42a6      	cmp	r6, r4
 800aab6:	d109      	bne.n	800aacc <__libc_init_array+0x24>
 800aab8:	4d0b      	ldr	r5, [pc, #44]	; (800aae8 <__libc_init_array+0x40>)
 800aaba:	4c0c      	ldr	r4, [pc, #48]	; (800aaec <__libc_init_array+0x44>)
 800aabc:	f001 fc12 	bl	800c2e4 <_init>
 800aac0:	1b64      	subs	r4, r4, r5
 800aac2:	10a4      	asrs	r4, r4, #2
 800aac4:	2600      	movs	r6, #0
 800aac6:	42a6      	cmp	r6, r4
 800aac8:	d105      	bne.n	800aad6 <__libc_init_array+0x2e>
 800aaca:	bd70      	pop	{r4, r5, r6, pc}
 800aacc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad0:	4798      	blx	r3
 800aad2:	3601      	adds	r6, #1
 800aad4:	e7ee      	b.n	800aab4 <__libc_init_array+0xc>
 800aad6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aada:	4798      	blx	r3
 800aadc:	3601      	adds	r6, #1
 800aade:	e7f2      	b.n	800aac6 <__libc_init_array+0x1e>
 800aae0:	0800c520 	.word	0x0800c520
 800aae4:	0800c520 	.word	0x0800c520
 800aae8:	0800c520 	.word	0x0800c520
 800aaec:	0800c524 	.word	0x0800c524

0800aaf0 <__retarget_lock_acquire_recursive>:
 800aaf0:	4770      	bx	lr

0800aaf2 <__retarget_lock_release_recursive>:
 800aaf2:	4770      	bx	lr

0800aaf4 <memcpy>:
 800aaf4:	440a      	add	r2, r1
 800aaf6:	4291      	cmp	r1, r2
 800aaf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aafc:	d100      	bne.n	800ab00 <memcpy+0xc>
 800aafe:	4770      	bx	lr
 800ab00:	b510      	push	{r4, lr}
 800ab02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab0a:	4291      	cmp	r1, r2
 800ab0c:	d1f9      	bne.n	800ab02 <memcpy+0xe>
 800ab0e:	bd10      	pop	{r4, pc}

0800ab10 <memset>:
 800ab10:	4402      	add	r2, r0
 800ab12:	4603      	mov	r3, r0
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d100      	bne.n	800ab1a <memset+0xa>
 800ab18:	4770      	bx	lr
 800ab1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab1e:	e7f9      	b.n	800ab14 <memset+0x4>

0800ab20 <sbrk_aligned>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	4e0e      	ldr	r6, [pc, #56]	; (800ab5c <sbrk_aligned+0x3c>)
 800ab24:	460c      	mov	r4, r1
 800ab26:	6831      	ldr	r1, [r6, #0]
 800ab28:	4605      	mov	r5, r0
 800ab2a:	b911      	cbnz	r1, 800ab32 <sbrk_aligned+0x12>
 800ab2c:	f000 f8f6 	bl	800ad1c <_sbrk_r>
 800ab30:	6030      	str	r0, [r6, #0]
 800ab32:	4621      	mov	r1, r4
 800ab34:	4628      	mov	r0, r5
 800ab36:	f000 f8f1 	bl	800ad1c <_sbrk_r>
 800ab3a:	1c43      	adds	r3, r0, #1
 800ab3c:	d00a      	beq.n	800ab54 <sbrk_aligned+0x34>
 800ab3e:	1cc4      	adds	r4, r0, #3
 800ab40:	f024 0403 	bic.w	r4, r4, #3
 800ab44:	42a0      	cmp	r0, r4
 800ab46:	d007      	beq.n	800ab58 <sbrk_aligned+0x38>
 800ab48:	1a21      	subs	r1, r4, r0
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	f000 f8e6 	bl	800ad1c <_sbrk_r>
 800ab50:	3001      	adds	r0, #1
 800ab52:	d101      	bne.n	800ab58 <sbrk_aligned+0x38>
 800ab54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ab58:	4620      	mov	r0, r4
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}
 800ab5c:	200037dc 	.word	0x200037dc

0800ab60 <_malloc_r>:
 800ab60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab64:	1ccd      	adds	r5, r1, #3
 800ab66:	f025 0503 	bic.w	r5, r5, #3
 800ab6a:	3508      	adds	r5, #8
 800ab6c:	2d0c      	cmp	r5, #12
 800ab6e:	bf38      	it	cc
 800ab70:	250c      	movcc	r5, #12
 800ab72:	2d00      	cmp	r5, #0
 800ab74:	4607      	mov	r7, r0
 800ab76:	db01      	blt.n	800ab7c <_malloc_r+0x1c>
 800ab78:	42a9      	cmp	r1, r5
 800ab7a:	d905      	bls.n	800ab88 <_malloc_r+0x28>
 800ab7c:	230c      	movs	r3, #12
 800ab7e:	603b      	str	r3, [r7, #0]
 800ab80:	2600      	movs	r6, #0
 800ab82:	4630      	mov	r0, r6
 800ab84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab88:	4e2e      	ldr	r6, [pc, #184]	; (800ac44 <_malloc_r+0xe4>)
 800ab8a:	f000 f8f7 	bl	800ad7c <__malloc_lock>
 800ab8e:	6833      	ldr	r3, [r6, #0]
 800ab90:	461c      	mov	r4, r3
 800ab92:	bb34      	cbnz	r4, 800abe2 <_malloc_r+0x82>
 800ab94:	4629      	mov	r1, r5
 800ab96:	4638      	mov	r0, r7
 800ab98:	f7ff ffc2 	bl	800ab20 <sbrk_aligned>
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	4604      	mov	r4, r0
 800aba0:	d14d      	bne.n	800ac3e <_malloc_r+0xde>
 800aba2:	6834      	ldr	r4, [r6, #0]
 800aba4:	4626      	mov	r6, r4
 800aba6:	2e00      	cmp	r6, #0
 800aba8:	d140      	bne.n	800ac2c <_malloc_r+0xcc>
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	4631      	mov	r1, r6
 800abae:	4638      	mov	r0, r7
 800abb0:	eb04 0803 	add.w	r8, r4, r3
 800abb4:	f000 f8b2 	bl	800ad1c <_sbrk_r>
 800abb8:	4580      	cmp	r8, r0
 800abba:	d13a      	bne.n	800ac32 <_malloc_r+0xd2>
 800abbc:	6821      	ldr	r1, [r4, #0]
 800abbe:	3503      	adds	r5, #3
 800abc0:	1a6d      	subs	r5, r5, r1
 800abc2:	f025 0503 	bic.w	r5, r5, #3
 800abc6:	3508      	adds	r5, #8
 800abc8:	2d0c      	cmp	r5, #12
 800abca:	bf38      	it	cc
 800abcc:	250c      	movcc	r5, #12
 800abce:	4629      	mov	r1, r5
 800abd0:	4638      	mov	r0, r7
 800abd2:	f7ff ffa5 	bl	800ab20 <sbrk_aligned>
 800abd6:	3001      	adds	r0, #1
 800abd8:	d02b      	beq.n	800ac32 <_malloc_r+0xd2>
 800abda:	6823      	ldr	r3, [r4, #0]
 800abdc:	442b      	add	r3, r5
 800abde:	6023      	str	r3, [r4, #0]
 800abe0:	e00e      	b.n	800ac00 <_malloc_r+0xa0>
 800abe2:	6822      	ldr	r2, [r4, #0]
 800abe4:	1b52      	subs	r2, r2, r5
 800abe6:	d41e      	bmi.n	800ac26 <_malloc_r+0xc6>
 800abe8:	2a0b      	cmp	r2, #11
 800abea:	d916      	bls.n	800ac1a <_malloc_r+0xba>
 800abec:	1961      	adds	r1, r4, r5
 800abee:	42a3      	cmp	r3, r4
 800abf0:	6025      	str	r5, [r4, #0]
 800abf2:	bf18      	it	ne
 800abf4:	6059      	strne	r1, [r3, #4]
 800abf6:	6863      	ldr	r3, [r4, #4]
 800abf8:	bf08      	it	eq
 800abfa:	6031      	streq	r1, [r6, #0]
 800abfc:	5162      	str	r2, [r4, r5]
 800abfe:	604b      	str	r3, [r1, #4]
 800ac00:	4638      	mov	r0, r7
 800ac02:	f104 060b 	add.w	r6, r4, #11
 800ac06:	f000 f8bf 	bl	800ad88 <__malloc_unlock>
 800ac0a:	f026 0607 	bic.w	r6, r6, #7
 800ac0e:	1d23      	adds	r3, r4, #4
 800ac10:	1af2      	subs	r2, r6, r3
 800ac12:	d0b6      	beq.n	800ab82 <_malloc_r+0x22>
 800ac14:	1b9b      	subs	r3, r3, r6
 800ac16:	50a3      	str	r3, [r4, r2]
 800ac18:	e7b3      	b.n	800ab82 <_malloc_r+0x22>
 800ac1a:	6862      	ldr	r2, [r4, #4]
 800ac1c:	42a3      	cmp	r3, r4
 800ac1e:	bf0c      	ite	eq
 800ac20:	6032      	streq	r2, [r6, #0]
 800ac22:	605a      	strne	r2, [r3, #4]
 800ac24:	e7ec      	b.n	800ac00 <_malloc_r+0xa0>
 800ac26:	4623      	mov	r3, r4
 800ac28:	6864      	ldr	r4, [r4, #4]
 800ac2a:	e7b2      	b.n	800ab92 <_malloc_r+0x32>
 800ac2c:	4634      	mov	r4, r6
 800ac2e:	6876      	ldr	r6, [r6, #4]
 800ac30:	e7b9      	b.n	800aba6 <_malloc_r+0x46>
 800ac32:	230c      	movs	r3, #12
 800ac34:	603b      	str	r3, [r7, #0]
 800ac36:	4638      	mov	r0, r7
 800ac38:	f000 f8a6 	bl	800ad88 <__malloc_unlock>
 800ac3c:	e7a1      	b.n	800ab82 <_malloc_r+0x22>
 800ac3e:	6025      	str	r5, [r4, #0]
 800ac40:	e7de      	b.n	800ac00 <_malloc_r+0xa0>
 800ac42:	bf00      	nop
 800ac44:	200037d8 	.word	0x200037d8

0800ac48 <cleanup_glue>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	6809      	ldr	r1, [r1, #0]
 800ac4e:	4605      	mov	r5, r0
 800ac50:	b109      	cbz	r1, 800ac56 <cleanup_glue+0xe>
 800ac52:	f7ff fff9 	bl	800ac48 <cleanup_glue>
 800ac56:	4621      	mov	r1, r4
 800ac58:	4628      	mov	r0, r5
 800ac5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac5e:	f000 b899 	b.w	800ad94 <_free_r>
	...

0800ac64 <_reclaim_reent>:
 800ac64:	4b2c      	ldr	r3, [pc, #176]	; (800ad18 <_reclaim_reent+0xb4>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4283      	cmp	r3, r0
 800ac6a:	b570      	push	{r4, r5, r6, lr}
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	d051      	beq.n	800ad14 <_reclaim_reent+0xb0>
 800ac70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ac72:	b143      	cbz	r3, 800ac86 <_reclaim_reent+0x22>
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d14a      	bne.n	800ad10 <_reclaim_reent+0xac>
 800ac7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac7c:	6819      	ldr	r1, [r3, #0]
 800ac7e:	b111      	cbz	r1, 800ac86 <_reclaim_reent+0x22>
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 f887 	bl	800ad94 <_free_r>
 800ac86:	6961      	ldr	r1, [r4, #20]
 800ac88:	b111      	cbz	r1, 800ac90 <_reclaim_reent+0x2c>
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f000 f882 	bl	800ad94 <_free_r>
 800ac90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ac92:	b111      	cbz	r1, 800ac9a <_reclaim_reent+0x36>
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 f87d 	bl	800ad94 <_free_r>
 800ac9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ac9c:	b111      	cbz	r1, 800aca4 <_reclaim_reent+0x40>
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f000 f878 	bl	800ad94 <_free_r>
 800aca4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aca6:	b111      	cbz	r1, 800acae <_reclaim_reent+0x4a>
 800aca8:	4620      	mov	r0, r4
 800acaa:	f000 f873 	bl	800ad94 <_free_r>
 800acae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800acb0:	b111      	cbz	r1, 800acb8 <_reclaim_reent+0x54>
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 f86e 	bl	800ad94 <_free_r>
 800acb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800acba:	b111      	cbz	r1, 800acc2 <_reclaim_reent+0x5e>
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 f869 	bl	800ad94 <_free_r>
 800acc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800acc4:	b111      	cbz	r1, 800accc <_reclaim_reent+0x68>
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 f864 	bl	800ad94 <_free_r>
 800accc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acce:	b111      	cbz	r1, 800acd6 <_reclaim_reent+0x72>
 800acd0:	4620      	mov	r0, r4
 800acd2:	f000 f85f 	bl	800ad94 <_free_r>
 800acd6:	69a3      	ldr	r3, [r4, #24]
 800acd8:	b1e3      	cbz	r3, 800ad14 <_reclaim_reent+0xb0>
 800acda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800acdc:	4620      	mov	r0, r4
 800acde:	4798      	blx	r3
 800ace0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ace2:	b1b9      	cbz	r1, 800ad14 <_reclaim_reent+0xb0>
 800ace4:	4620      	mov	r0, r4
 800ace6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800acea:	f7ff bfad 	b.w	800ac48 <cleanup_glue>
 800acee:	5949      	ldr	r1, [r1, r5]
 800acf0:	b941      	cbnz	r1, 800ad04 <_reclaim_reent+0xa0>
 800acf2:	3504      	adds	r5, #4
 800acf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acf6:	2d80      	cmp	r5, #128	; 0x80
 800acf8:	68d9      	ldr	r1, [r3, #12]
 800acfa:	d1f8      	bne.n	800acee <_reclaim_reent+0x8a>
 800acfc:	4620      	mov	r0, r4
 800acfe:	f000 f849 	bl	800ad94 <_free_r>
 800ad02:	e7ba      	b.n	800ac7a <_reclaim_reent+0x16>
 800ad04:	680e      	ldr	r6, [r1, #0]
 800ad06:	4620      	mov	r0, r4
 800ad08:	f000 f844 	bl	800ad94 <_free_r>
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	e7ef      	b.n	800acf0 <_reclaim_reent+0x8c>
 800ad10:	2500      	movs	r5, #0
 800ad12:	e7ef      	b.n	800acf4 <_reclaim_reent+0x90>
 800ad14:	bd70      	pop	{r4, r5, r6, pc}
 800ad16:	bf00      	nop
 800ad18:	20000010 	.word	0x20000010

0800ad1c <_sbrk_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4d06      	ldr	r5, [pc, #24]	; (800ad38 <_sbrk_r+0x1c>)
 800ad20:	2300      	movs	r3, #0
 800ad22:	4604      	mov	r4, r0
 800ad24:	4608      	mov	r0, r1
 800ad26:	602b      	str	r3, [r5, #0]
 800ad28:	f7f9 fcd6 	bl	80046d8 <_sbrk>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_sbrk_r+0x1a>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_sbrk_r+0x1a>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	200037e0 	.word	0x200037e0

0800ad3c <siprintf>:
 800ad3c:	b40e      	push	{r1, r2, r3}
 800ad3e:	b500      	push	{lr}
 800ad40:	b09c      	sub	sp, #112	; 0x70
 800ad42:	ab1d      	add	r3, sp, #116	; 0x74
 800ad44:	9002      	str	r0, [sp, #8]
 800ad46:	9006      	str	r0, [sp, #24]
 800ad48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad4c:	4809      	ldr	r0, [pc, #36]	; (800ad74 <siprintf+0x38>)
 800ad4e:	9107      	str	r1, [sp, #28]
 800ad50:	9104      	str	r1, [sp, #16]
 800ad52:	4909      	ldr	r1, [pc, #36]	; (800ad78 <siprintf+0x3c>)
 800ad54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad58:	9105      	str	r1, [sp, #20]
 800ad5a:	6800      	ldr	r0, [r0, #0]
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	a902      	add	r1, sp, #8
 800ad60:	f000 f8c0 	bl	800aee4 <_svfiprintf_r>
 800ad64:	9b02      	ldr	r3, [sp, #8]
 800ad66:	2200      	movs	r2, #0
 800ad68:	701a      	strb	r2, [r3, #0]
 800ad6a:	b01c      	add	sp, #112	; 0x70
 800ad6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad70:	b003      	add	sp, #12
 800ad72:	4770      	bx	lr
 800ad74:	20000010 	.word	0x20000010
 800ad78:	ffff0208 	.word	0xffff0208

0800ad7c <__malloc_lock>:
 800ad7c:	4801      	ldr	r0, [pc, #4]	; (800ad84 <__malloc_lock+0x8>)
 800ad7e:	f7ff beb7 	b.w	800aaf0 <__retarget_lock_acquire_recursive>
 800ad82:	bf00      	nop
 800ad84:	200037d4 	.word	0x200037d4

0800ad88 <__malloc_unlock>:
 800ad88:	4801      	ldr	r0, [pc, #4]	; (800ad90 <__malloc_unlock+0x8>)
 800ad8a:	f7ff beb2 	b.w	800aaf2 <__retarget_lock_release_recursive>
 800ad8e:	bf00      	nop
 800ad90:	200037d4 	.word	0x200037d4

0800ad94 <_free_r>:
 800ad94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad96:	2900      	cmp	r1, #0
 800ad98:	d044      	beq.n	800ae24 <_free_r+0x90>
 800ad9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad9e:	9001      	str	r0, [sp, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f1a1 0404 	sub.w	r4, r1, #4
 800ada6:	bfb8      	it	lt
 800ada8:	18e4      	addlt	r4, r4, r3
 800adaa:	f7ff ffe7 	bl	800ad7c <__malloc_lock>
 800adae:	4a1e      	ldr	r2, [pc, #120]	; (800ae28 <_free_r+0x94>)
 800adb0:	9801      	ldr	r0, [sp, #4]
 800adb2:	6813      	ldr	r3, [r2, #0]
 800adb4:	b933      	cbnz	r3, 800adc4 <_free_r+0x30>
 800adb6:	6063      	str	r3, [r4, #4]
 800adb8:	6014      	str	r4, [r2, #0]
 800adba:	b003      	add	sp, #12
 800adbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adc0:	f7ff bfe2 	b.w	800ad88 <__malloc_unlock>
 800adc4:	42a3      	cmp	r3, r4
 800adc6:	d908      	bls.n	800adda <_free_r+0x46>
 800adc8:	6825      	ldr	r5, [r4, #0]
 800adca:	1961      	adds	r1, r4, r5
 800adcc:	428b      	cmp	r3, r1
 800adce:	bf01      	itttt	eq
 800add0:	6819      	ldreq	r1, [r3, #0]
 800add2:	685b      	ldreq	r3, [r3, #4]
 800add4:	1949      	addeq	r1, r1, r5
 800add6:	6021      	streq	r1, [r4, #0]
 800add8:	e7ed      	b.n	800adb6 <_free_r+0x22>
 800adda:	461a      	mov	r2, r3
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	b10b      	cbz	r3, 800ade4 <_free_r+0x50>
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	d9fa      	bls.n	800adda <_free_r+0x46>
 800ade4:	6811      	ldr	r1, [r2, #0]
 800ade6:	1855      	adds	r5, r2, r1
 800ade8:	42a5      	cmp	r5, r4
 800adea:	d10b      	bne.n	800ae04 <_free_r+0x70>
 800adec:	6824      	ldr	r4, [r4, #0]
 800adee:	4421      	add	r1, r4
 800adf0:	1854      	adds	r4, r2, r1
 800adf2:	42a3      	cmp	r3, r4
 800adf4:	6011      	str	r1, [r2, #0]
 800adf6:	d1e0      	bne.n	800adba <_free_r+0x26>
 800adf8:	681c      	ldr	r4, [r3, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	6053      	str	r3, [r2, #4]
 800adfe:	4421      	add	r1, r4
 800ae00:	6011      	str	r1, [r2, #0]
 800ae02:	e7da      	b.n	800adba <_free_r+0x26>
 800ae04:	d902      	bls.n	800ae0c <_free_r+0x78>
 800ae06:	230c      	movs	r3, #12
 800ae08:	6003      	str	r3, [r0, #0]
 800ae0a:	e7d6      	b.n	800adba <_free_r+0x26>
 800ae0c:	6825      	ldr	r5, [r4, #0]
 800ae0e:	1961      	adds	r1, r4, r5
 800ae10:	428b      	cmp	r3, r1
 800ae12:	bf04      	itt	eq
 800ae14:	6819      	ldreq	r1, [r3, #0]
 800ae16:	685b      	ldreq	r3, [r3, #4]
 800ae18:	6063      	str	r3, [r4, #4]
 800ae1a:	bf04      	itt	eq
 800ae1c:	1949      	addeq	r1, r1, r5
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	6054      	str	r4, [r2, #4]
 800ae22:	e7ca      	b.n	800adba <_free_r+0x26>
 800ae24:	b003      	add	sp, #12
 800ae26:	bd30      	pop	{r4, r5, pc}
 800ae28:	200037d8 	.word	0x200037d8

0800ae2c <__ssputs_r>:
 800ae2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae30:	688e      	ldr	r6, [r1, #8]
 800ae32:	429e      	cmp	r6, r3
 800ae34:	4682      	mov	sl, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	4690      	mov	r8, r2
 800ae3a:	461f      	mov	r7, r3
 800ae3c:	d838      	bhi.n	800aeb0 <__ssputs_r+0x84>
 800ae3e:	898a      	ldrh	r2, [r1, #12]
 800ae40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae44:	d032      	beq.n	800aeac <__ssputs_r+0x80>
 800ae46:	6825      	ldr	r5, [r4, #0]
 800ae48:	6909      	ldr	r1, [r1, #16]
 800ae4a:	eba5 0901 	sub.w	r9, r5, r1
 800ae4e:	6965      	ldr	r5, [r4, #20]
 800ae50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae58:	3301      	adds	r3, #1
 800ae5a:	444b      	add	r3, r9
 800ae5c:	106d      	asrs	r5, r5, #1
 800ae5e:	429d      	cmp	r5, r3
 800ae60:	bf38      	it	cc
 800ae62:	461d      	movcc	r5, r3
 800ae64:	0553      	lsls	r3, r2, #21
 800ae66:	d531      	bpl.n	800aecc <__ssputs_r+0xa0>
 800ae68:	4629      	mov	r1, r5
 800ae6a:	f7ff fe79 	bl	800ab60 <_malloc_r>
 800ae6e:	4606      	mov	r6, r0
 800ae70:	b950      	cbnz	r0, 800ae88 <__ssputs_r+0x5c>
 800ae72:	230c      	movs	r3, #12
 800ae74:	f8ca 3000 	str.w	r3, [sl]
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae7e:	81a3      	strh	r3, [r4, #12]
 800ae80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae88:	6921      	ldr	r1, [r4, #16]
 800ae8a:	464a      	mov	r2, r9
 800ae8c:	f7ff fe32 	bl	800aaf4 <memcpy>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae9a:	81a3      	strh	r3, [r4, #12]
 800ae9c:	6126      	str	r6, [r4, #16]
 800ae9e:	6165      	str	r5, [r4, #20]
 800aea0:	444e      	add	r6, r9
 800aea2:	eba5 0509 	sub.w	r5, r5, r9
 800aea6:	6026      	str	r6, [r4, #0]
 800aea8:	60a5      	str	r5, [r4, #8]
 800aeaa:	463e      	mov	r6, r7
 800aeac:	42be      	cmp	r6, r7
 800aeae:	d900      	bls.n	800aeb2 <__ssputs_r+0x86>
 800aeb0:	463e      	mov	r6, r7
 800aeb2:	6820      	ldr	r0, [r4, #0]
 800aeb4:	4632      	mov	r2, r6
 800aeb6:	4641      	mov	r1, r8
 800aeb8:	f000 faa8 	bl	800b40c <memmove>
 800aebc:	68a3      	ldr	r3, [r4, #8]
 800aebe:	1b9b      	subs	r3, r3, r6
 800aec0:	60a3      	str	r3, [r4, #8]
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	4433      	add	r3, r6
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	2000      	movs	r0, #0
 800aeca:	e7db      	b.n	800ae84 <__ssputs_r+0x58>
 800aecc:	462a      	mov	r2, r5
 800aece:	f000 fab7 	bl	800b440 <_realloc_r>
 800aed2:	4606      	mov	r6, r0
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d1e1      	bne.n	800ae9c <__ssputs_r+0x70>
 800aed8:	6921      	ldr	r1, [r4, #16]
 800aeda:	4650      	mov	r0, sl
 800aedc:	f7ff ff5a 	bl	800ad94 <_free_r>
 800aee0:	e7c7      	b.n	800ae72 <__ssputs_r+0x46>
	...

0800aee4 <_svfiprintf_r>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	4698      	mov	r8, r3
 800aeea:	898b      	ldrh	r3, [r1, #12]
 800aeec:	061b      	lsls	r3, r3, #24
 800aeee:	b09d      	sub	sp, #116	; 0x74
 800aef0:	4607      	mov	r7, r0
 800aef2:	460d      	mov	r5, r1
 800aef4:	4614      	mov	r4, r2
 800aef6:	d50e      	bpl.n	800af16 <_svfiprintf_r+0x32>
 800aef8:	690b      	ldr	r3, [r1, #16]
 800aefa:	b963      	cbnz	r3, 800af16 <_svfiprintf_r+0x32>
 800aefc:	2140      	movs	r1, #64	; 0x40
 800aefe:	f7ff fe2f 	bl	800ab60 <_malloc_r>
 800af02:	6028      	str	r0, [r5, #0]
 800af04:	6128      	str	r0, [r5, #16]
 800af06:	b920      	cbnz	r0, 800af12 <_svfiprintf_r+0x2e>
 800af08:	230c      	movs	r3, #12
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af10:	e0d1      	b.n	800b0b6 <_svfiprintf_r+0x1d2>
 800af12:	2340      	movs	r3, #64	; 0x40
 800af14:	616b      	str	r3, [r5, #20]
 800af16:	2300      	movs	r3, #0
 800af18:	9309      	str	r3, [sp, #36]	; 0x24
 800af1a:	2320      	movs	r3, #32
 800af1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af20:	f8cd 800c 	str.w	r8, [sp, #12]
 800af24:	2330      	movs	r3, #48	; 0x30
 800af26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0d0 <_svfiprintf_r+0x1ec>
 800af2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af2e:	f04f 0901 	mov.w	r9, #1
 800af32:	4623      	mov	r3, r4
 800af34:	469a      	mov	sl, r3
 800af36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af3a:	b10a      	cbz	r2, 800af40 <_svfiprintf_r+0x5c>
 800af3c:	2a25      	cmp	r2, #37	; 0x25
 800af3e:	d1f9      	bne.n	800af34 <_svfiprintf_r+0x50>
 800af40:	ebba 0b04 	subs.w	fp, sl, r4
 800af44:	d00b      	beq.n	800af5e <_svfiprintf_r+0x7a>
 800af46:	465b      	mov	r3, fp
 800af48:	4622      	mov	r2, r4
 800af4a:	4629      	mov	r1, r5
 800af4c:	4638      	mov	r0, r7
 800af4e:	f7ff ff6d 	bl	800ae2c <__ssputs_r>
 800af52:	3001      	adds	r0, #1
 800af54:	f000 80aa 	beq.w	800b0ac <_svfiprintf_r+0x1c8>
 800af58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af5a:	445a      	add	r2, fp
 800af5c:	9209      	str	r2, [sp, #36]	; 0x24
 800af5e:	f89a 3000 	ldrb.w	r3, [sl]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 80a2 	beq.w	800b0ac <_svfiprintf_r+0x1c8>
 800af68:	2300      	movs	r3, #0
 800af6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af72:	f10a 0a01 	add.w	sl, sl, #1
 800af76:	9304      	str	r3, [sp, #16]
 800af78:	9307      	str	r3, [sp, #28]
 800af7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af7e:	931a      	str	r3, [sp, #104]	; 0x68
 800af80:	4654      	mov	r4, sl
 800af82:	2205      	movs	r2, #5
 800af84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af88:	4851      	ldr	r0, [pc, #324]	; (800b0d0 <_svfiprintf_r+0x1ec>)
 800af8a:	f7f5 f929 	bl	80001e0 <memchr>
 800af8e:	9a04      	ldr	r2, [sp, #16]
 800af90:	b9d8      	cbnz	r0, 800afca <_svfiprintf_r+0xe6>
 800af92:	06d0      	lsls	r0, r2, #27
 800af94:	bf44      	itt	mi
 800af96:	2320      	movmi	r3, #32
 800af98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af9c:	0711      	lsls	r1, r2, #28
 800af9e:	bf44      	itt	mi
 800afa0:	232b      	movmi	r3, #43	; 0x2b
 800afa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afa6:	f89a 3000 	ldrb.w	r3, [sl]
 800afaa:	2b2a      	cmp	r3, #42	; 0x2a
 800afac:	d015      	beq.n	800afda <_svfiprintf_r+0xf6>
 800afae:	9a07      	ldr	r2, [sp, #28]
 800afb0:	4654      	mov	r4, sl
 800afb2:	2000      	movs	r0, #0
 800afb4:	f04f 0c0a 	mov.w	ip, #10
 800afb8:	4621      	mov	r1, r4
 800afba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afbe:	3b30      	subs	r3, #48	; 0x30
 800afc0:	2b09      	cmp	r3, #9
 800afc2:	d94e      	bls.n	800b062 <_svfiprintf_r+0x17e>
 800afc4:	b1b0      	cbz	r0, 800aff4 <_svfiprintf_r+0x110>
 800afc6:	9207      	str	r2, [sp, #28]
 800afc8:	e014      	b.n	800aff4 <_svfiprintf_r+0x110>
 800afca:	eba0 0308 	sub.w	r3, r0, r8
 800afce:	fa09 f303 	lsl.w	r3, r9, r3
 800afd2:	4313      	orrs	r3, r2
 800afd4:	9304      	str	r3, [sp, #16]
 800afd6:	46a2      	mov	sl, r4
 800afd8:	e7d2      	b.n	800af80 <_svfiprintf_r+0x9c>
 800afda:	9b03      	ldr	r3, [sp, #12]
 800afdc:	1d19      	adds	r1, r3, #4
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	9103      	str	r1, [sp, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	bfbb      	ittet	lt
 800afe6:	425b      	neglt	r3, r3
 800afe8:	f042 0202 	orrlt.w	r2, r2, #2
 800afec:	9307      	strge	r3, [sp, #28]
 800afee:	9307      	strlt	r3, [sp, #28]
 800aff0:	bfb8      	it	lt
 800aff2:	9204      	strlt	r2, [sp, #16]
 800aff4:	7823      	ldrb	r3, [r4, #0]
 800aff6:	2b2e      	cmp	r3, #46	; 0x2e
 800aff8:	d10c      	bne.n	800b014 <_svfiprintf_r+0x130>
 800affa:	7863      	ldrb	r3, [r4, #1]
 800affc:	2b2a      	cmp	r3, #42	; 0x2a
 800affe:	d135      	bne.n	800b06c <_svfiprintf_r+0x188>
 800b000:	9b03      	ldr	r3, [sp, #12]
 800b002:	1d1a      	adds	r2, r3, #4
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	9203      	str	r2, [sp, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	bfb8      	it	lt
 800b00c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b010:	3402      	adds	r4, #2
 800b012:	9305      	str	r3, [sp, #20]
 800b014:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b0e0 <_svfiprintf_r+0x1fc>
 800b018:	7821      	ldrb	r1, [r4, #0]
 800b01a:	2203      	movs	r2, #3
 800b01c:	4650      	mov	r0, sl
 800b01e:	f7f5 f8df 	bl	80001e0 <memchr>
 800b022:	b140      	cbz	r0, 800b036 <_svfiprintf_r+0x152>
 800b024:	2340      	movs	r3, #64	; 0x40
 800b026:	eba0 000a 	sub.w	r0, r0, sl
 800b02a:	fa03 f000 	lsl.w	r0, r3, r0
 800b02e:	9b04      	ldr	r3, [sp, #16]
 800b030:	4303      	orrs	r3, r0
 800b032:	3401      	adds	r4, #1
 800b034:	9304      	str	r3, [sp, #16]
 800b036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03a:	4826      	ldr	r0, [pc, #152]	; (800b0d4 <_svfiprintf_r+0x1f0>)
 800b03c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b040:	2206      	movs	r2, #6
 800b042:	f7f5 f8cd 	bl	80001e0 <memchr>
 800b046:	2800      	cmp	r0, #0
 800b048:	d038      	beq.n	800b0bc <_svfiprintf_r+0x1d8>
 800b04a:	4b23      	ldr	r3, [pc, #140]	; (800b0d8 <_svfiprintf_r+0x1f4>)
 800b04c:	bb1b      	cbnz	r3, 800b096 <_svfiprintf_r+0x1b2>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	3307      	adds	r3, #7
 800b052:	f023 0307 	bic.w	r3, r3, #7
 800b056:	3308      	adds	r3, #8
 800b058:	9303      	str	r3, [sp, #12]
 800b05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05c:	4433      	add	r3, r6
 800b05e:	9309      	str	r3, [sp, #36]	; 0x24
 800b060:	e767      	b.n	800af32 <_svfiprintf_r+0x4e>
 800b062:	fb0c 3202 	mla	r2, ip, r2, r3
 800b066:	460c      	mov	r4, r1
 800b068:	2001      	movs	r0, #1
 800b06a:	e7a5      	b.n	800afb8 <_svfiprintf_r+0xd4>
 800b06c:	2300      	movs	r3, #0
 800b06e:	3401      	adds	r4, #1
 800b070:	9305      	str	r3, [sp, #20]
 800b072:	4619      	mov	r1, r3
 800b074:	f04f 0c0a 	mov.w	ip, #10
 800b078:	4620      	mov	r0, r4
 800b07a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b07e:	3a30      	subs	r2, #48	; 0x30
 800b080:	2a09      	cmp	r2, #9
 800b082:	d903      	bls.n	800b08c <_svfiprintf_r+0x1a8>
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0c5      	beq.n	800b014 <_svfiprintf_r+0x130>
 800b088:	9105      	str	r1, [sp, #20]
 800b08a:	e7c3      	b.n	800b014 <_svfiprintf_r+0x130>
 800b08c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b090:	4604      	mov	r4, r0
 800b092:	2301      	movs	r3, #1
 800b094:	e7f0      	b.n	800b078 <_svfiprintf_r+0x194>
 800b096:	ab03      	add	r3, sp, #12
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	462a      	mov	r2, r5
 800b09c:	4b0f      	ldr	r3, [pc, #60]	; (800b0dc <_svfiprintf_r+0x1f8>)
 800b09e:	a904      	add	r1, sp, #16
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	f3af 8000 	nop.w
 800b0a6:	1c42      	adds	r2, r0, #1
 800b0a8:	4606      	mov	r6, r0
 800b0aa:	d1d6      	bne.n	800b05a <_svfiprintf_r+0x176>
 800b0ac:	89ab      	ldrh	r3, [r5, #12]
 800b0ae:	065b      	lsls	r3, r3, #25
 800b0b0:	f53f af2c 	bmi.w	800af0c <_svfiprintf_r+0x28>
 800b0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0b6:	b01d      	add	sp, #116	; 0x74
 800b0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0bc:	ab03      	add	r3, sp, #12
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	462a      	mov	r2, r5
 800b0c2:	4b06      	ldr	r3, [pc, #24]	; (800b0dc <_svfiprintf_r+0x1f8>)
 800b0c4:	a904      	add	r1, sp, #16
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	f000 f87a 	bl	800b1c0 <_printf_i>
 800b0cc:	e7eb      	b.n	800b0a6 <_svfiprintf_r+0x1c2>
 800b0ce:	bf00      	nop
 800b0d0:	0800c4b4 	.word	0x0800c4b4
 800b0d4:	0800c4be 	.word	0x0800c4be
 800b0d8:	00000000 	.word	0x00000000
 800b0dc:	0800ae2d 	.word	0x0800ae2d
 800b0e0:	0800c4ba 	.word	0x0800c4ba

0800b0e4 <_printf_common>:
 800b0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e8:	4616      	mov	r6, r2
 800b0ea:	4699      	mov	r9, r3
 800b0ec:	688a      	ldr	r2, [r1, #8]
 800b0ee:	690b      	ldr	r3, [r1, #16]
 800b0f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	bfb8      	it	lt
 800b0f8:	4613      	movlt	r3, r2
 800b0fa:	6033      	str	r3, [r6, #0]
 800b0fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b100:	4607      	mov	r7, r0
 800b102:	460c      	mov	r4, r1
 800b104:	b10a      	cbz	r2, 800b10a <_printf_common+0x26>
 800b106:	3301      	adds	r3, #1
 800b108:	6033      	str	r3, [r6, #0]
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	0699      	lsls	r1, r3, #26
 800b10e:	bf42      	ittt	mi
 800b110:	6833      	ldrmi	r3, [r6, #0]
 800b112:	3302      	addmi	r3, #2
 800b114:	6033      	strmi	r3, [r6, #0]
 800b116:	6825      	ldr	r5, [r4, #0]
 800b118:	f015 0506 	ands.w	r5, r5, #6
 800b11c:	d106      	bne.n	800b12c <_printf_common+0x48>
 800b11e:	f104 0a19 	add.w	sl, r4, #25
 800b122:	68e3      	ldr	r3, [r4, #12]
 800b124:	6832      	ldr	r2, [r6, #0]
 800b126:	1a9b      	subs	r3, r3, r2
 800b128:	42ab      	cmp	r3, r5
 800b12a:	dc26      	bgt.n	800b17a <_printf_common+0x96>
 800b12c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b130:	1e13      	subs	r3, r2, #0
 800b132:	6822      	ldr	r2, [r4, #0]
 800b134:	bf18      	it	ne
 800b136:	2301      	movne	r3, #1
 800b138:	0692      	lsls	r2, r2, #26
 800b13a:	d42b      	bmi.n	800b194 <_printf_common+0xb0>
 800b13c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b140:	4649      	mov	r1, r9
 800b142:	4638      	mov	r0, r7
 800b144:	47c0      	blx	r8
 800b146:	3001      	adds	r0, #1
 800b148:	d01e      	beq.n	800b188 <_printf_common+0xa4>
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	68e5      	ldr	r5, [r4, #12]
 800b14e:	6832      	ldr	r2, [r6, #0]
 800b150:	f003 0306 	and.w	r3, r3, #6
 800b154:	2b04      	cmp	r3, #4
 800b156:	bf08      	it	eq
 800b158:	1aad      	subeq	r5, r5, r2
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	6922      	ldr	r2, [r4, #16]
 800b15e:	bf0c      	ite	eq
 800b160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b164:	2500      	movne	r5, #0
 800b166:	4293      	cmp	r3, r2
 800b168:	bfc4      	itt	gt
 800b16a:	1a9b      	subgt	r3, r3, r2
 800b16c:	18ed      	addgt	r5, r5, r3
 800b16e:	2600      	movs	r6, #0
 800b170:	341a      	adds	r4, #26
 800b172:	42b5      	cmp	r5, r6
 800b174:	d11a      	bne.n	800b1ac <_printf_common+0xc8>
 800b176:	2000      	movs	r0, #0
 800b178:	e008      	b.n	800b18c <_printf_common+0xa8>
 800b17a:	2301      	movs	r3, #1
 800b17c:	4652      	mov	r2, sl
 800b17e:	4649      	mov	r1, r9
 800b180:	4638      	mov	r0, r7
 800b182:	47c0      	blx	r8
 800b184:	3001      	adds	r0, #1
 800b186:	d103      	bne.n	800b190 <_printf_common+0xac>
 800b188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b190:	3501      	adds	r5, #1
 800b192:	e7c6      	b.n	800b122 <_printf_common+0x3e>
 800b194:	18e1      	adds	r1, r4, r3
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	2030      	movs	r0, #48	; 0x30
 800b19a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b19e:	4422      	add	r2, r4
 800b1a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1a8:	3302      	adds	r3, #2
 800b1aa:	e7c7      	b.n	800b13c <_printf_common+0x58>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	47c0      	blx	r8
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	d0e6      	beq.n	800b188 <_printf_common+0xa4>
 800b1ba:	3601      	adds	r6, #1
 800b1bc:	e7d9      	b.n	800b172 <_printf_common+0x8e>
	...

0800b1c0 <_printf_i>:
 800b1c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c4:	7e0f      	ldrb	r7, [r1, #24]
 800b1c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1c8:	2f78      	cmp	r7, #120	; 0x78
 800b1ca:	4691      	mov	r9, r2
 800b1cc:	4680      	mov	r8, r0
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	469a      	mov	sl, r3
 800b1d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1d6:	d807      	bhi.n	800b1e8 <_printf_i+0x28>
 800b1d8:	2f62      	cmp	r7, #98	; 0x62
 800b1da:	d80a      	bhi.n	800b1f2 <_printf_i+0x32>
 800b1dc:	2f00      	cmp	r7, #0
 800b1de:	f000 80d8 	beq.w	800b392 <_printf_i+0x1d2>
 800b1e2:	2f58      	cmp	r7, #88	; 0x58
 800b1e4:	f000 80a3 	beq.w	800b32e <_printf_i+0x16e>
 800b1e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1f0:	e03a      	b.n	800b268 <_printf_i+0xa8>
 800b1f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1f6:	2b15      	cmp	r3, #21
 800b1f8:	d8f6      	bhi.n	800b1e8 <_printf_i+0x28>
 800b1fa:	a101      	add	r1, pc, #4	; (adr r1, 800b200 <_printf_i+0x40>)
 800b1fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b200:	0800b259 	.word	0x0800b259
 800b204:	0800b26d 	.word	0x0800b26d
 800b208:	0800b1e9 	.word	0x0800b1e9
 800b20c:	0800b1e9 	.word	0x0800b1e9
 800b210:	0800b1e9 	.word	0x0800b1e9
 800b214:	0800b1e9 	.word	0x0800b1e9
 800b218:	0800b26d 	.word	0x0800b26d
 800b21c:	0800b1e9 	.word	0x0800b1e9
 800b220:	0800b1e9 	.word	0x0800b1e9
 800b224:	0800b1e9 	.word	0x0800b1e9
 800b228:	0800b1e9 	.word	0x0800b1e9
 800b22c:	0800b379 	.word	0x0800b379
 800b230:	0800b29d 	.word	0x0800b29d
 800b234:	0800b35b 	.word	0x0800b35b
 800b238:	0800b1e9 	.word	0x0800b1e9
 800b23c:	0800b1e9 	.word	0x0800b1e9
 800b240:	0800b39b 	.word	0x0800b39b
 800b244:	0800b1e9 	.word	0x0800b1e9
 800b248:	0800b29d 	.word	0x0800b29d
 800b24c:	0800b1e9 	.word	0x0800b1e9
 800b250:	0800b1e9 	.word	0x0800b1e9
 800b254:	0800b363 	.word	0x0800b363
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	1d1a      	adds	r2, r3, #4
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	602a      	str	r2, [r5, #0]
 800b260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b268:	2301      	movs	r3, #1
 800b26a:	e0a3      	b.n	800b3b4 <_printf_i+0x1f4>
 800b26c:	6820      	ldr	r0, [r4, #0]
 800b26e:	6829      	ldr	r1, [r5, #0]
 800b270:	0606      	lsls	r6, r0, #24
 800b272:	f101 0304 	add.w	r3, r1, #4
 800b276:	d50a      	bpl.n	800b28e <_printf_i+0xce>
 800b278:	680e      	ldr	r6, [r1, #0]
 800b27a:	602b      	str	r3, [r5, #0]
 800b27c:	2e00      	cmp	r6, #0
 800b27e:	da03      	bge.n	800b288 <_printf_i+0xc8>
 800b280:	232d      	movs	r3, #45	; 0x2d
 800b282:	4276      	negs	r6, r6
 800b284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b288:	485e      	ldr	r0, [pc, #376]	; (800b404 <_printf_i+0x244>)
 800b28a:	230a      	movs	r3, #10
 800b28c:	e019      	b.n	800b2c2 <_printf_i+0x102>
 800b28e:	680e      	ldr	r6, [r1, #0]
 800b290:	602b      	str	r3, [r5, #0]
 800b292:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b296:	bf18      	it	ne
 800b298:	b236      	sxthne	r6, r6
 800b29a:	e7ef      	b.n	800b27c <_printf_i+0xbc>
 800b29c:	682b      	ldr	r3, [r5, #0]
 800b29e:	6820      	ldr	r0, [r4, #0]
 800b2a0:	1d19      	adds	r1, r3, #4
 800b2a2:	6029      	str	r1, [r5, #0]
 800b2a4:	0601      	lsls	r1, r0, #24
 800b2a6:	d501      	bpl.n	800b2ac <_printf_i+0xec>
 800b2a8:	681e      	ldr	r6, [r3, #0]
 800b2aa:	e002      	b.n	800b2b2 <_printf_i+0xf2>
 800b2ac:	0646      	lsls	r6, r0, #25
 800b2ae:	d5fb      	bpl.n	800b2a8 <_printf_i+0xe8>
 800b2b0:	881e      	ldrh	r6, [r3, #0]
 800b2b2:	4854      	ldr	r0, [pc, #336]	; (800b404 <_printf_i+0x244>)
 800b2b4:	2f6f      	cmp	r7, #111	; 0x6f
 800b2b6:	bf0c      	ite	eq
 800b2b8:	2308      	moveq	r3, #8
 800b2ba:	230a      	movne	r3, #10
 800b2bc:	2100      	movs	r1, #0
 800b2be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2c2:	6865      	ldr	r5, [r4, #4]
 800b2c4:	60a5      	str	r5, [r4, #8]
 800b2c6:	2d00      	cmp	r5, #0
 800b2c8:	bfa2      	ittt	ge
 800b2ca:	6821      	ldrge	r1, [r4, #0]
 800b2cc:	f021 0104 	bicge.w	r1, r1, #4
 800b2d0:	6021      	strge	r1, [r4, #0]
 800b2d2:	b90e      	cbnz	r6, 800b2d8 <_printf_i+0x118>
 800b2d4:	2d00      	cmp	r5, #0
 800b2d6:	d04d      	beq.n	800b374 <_printf_i+0x1b4>
 800b2d8:	4615      	mov	r5, r2
 800b2da:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2de:	fb03 6711 	mls	r7, r3, r1, r6
 800b2e2:	5dc7      	ldrb	r7, [r0, r7]
 800b2e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2e8:	4637      	mov	r7, r6
 800b2ea:	42bb      	cmp	r3, r7
 800b2ec:	460e      	mov	r6, r1
 800b2ee:	d9f4      	bls.n	800b2da <_printf_i+0x11a>
 800b2f0:	2b08      	cmp	r3, #8
 800b2f2:	d10b      	bne.n	800b30c <_printf_i+0x14c>
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	07de      	lsls	r6, r3, #31
 800b2f8:	d508      	bpl.n	800b30c <_printf_i+0x14c>
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	6861      	ldr	r1, [r4, #4]
 800b2fe:	4299      	cmp	r1, r3
 800b300:	bfde      	ittt	le
 800b302:	2330      	movle	r3, #48	; 0x30
 800b304:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b308:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b30c:	1b52      	subs	r2, r2, r5
 800b30e:	6122      	str	r2, [r4, #16]
 800b310:	f8cd a000 	str.w	sl, [sp]
 800b314:	464b      	mov	r3, r9
 800b316:	aa03      	add	r2, sp, #12
 800b318:	4621      	mov	r1, r4
 800b31a:	4640      	mov	r0, r8
 800b31c:	f7ff fee2 	bl	800b0e4 <_printf_common>
 800b320:	3001      	adds	r0, #1
 800b322:	d14c      	bne.n	800b3be <_printf_i+0x1fe>
 800b324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b328:	b004      	add	sp, #16
 800b32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b32e:	4835      	ldr	r0, [pc, #212]	; (800b404 <_printf_i+0x244>)
 800b330:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b334:	6829      	ldr	r1, [r5, #0]
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	f851 6b04 	ldr.w	r6, [r1], #4
 800b33c:	6029      	str	r1, [r5, #0]
 800b33e:	061d      	lsls	r5, r3, #24
 800b340:	d514      	bpl.n	800b36c <_printf_i+0x1ac>
 800b342:	07df      	lsls	r7, r3, #31
 800b344:	bf44      	itt	mi
 800b346:	f043 0320 	orrmi.w	r3, r3, #32
 800b34a:	6023      	strmi	r3, [r4, #0]
 800b34c:	b91e      	cbnz	r6, 800b356 <_printf_i+0x196>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	f023 0320 	bic.w	r3, r3, #32
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	2310      	movs	r3, #16
 800b358:	e7b0      	b.n	800b2bc <_printf_i+0xfc>
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	f043 0320 	orr.w	r3, r3, #32
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	2378      	movs	r3, #120	; 0x78
 800b364:	4828      	ldr	r0, [pc, #160]	; (800b408 <_printf_i+0x248>)
 800b366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b36a:	e7e3      	b.n	800b334 <_printf_i+0x174>
 800b36c:	0659      	lsls	r1, r3, #25
 800b36e:	bf48      	it	mi
 800b370:	b2b6      	uxthmi	r6, r6
 800b372:	e7e6      	b.n	800b342 <_printf_i+0x182>
 800b374:	4615      	mov	r5, r2
 800b376:	e7bb      	b.n	800b2f0 <_printf_i+0x130>
 800b378:	682b      	ldr	r3, [r5, #0]
 800b37a:	6826      	ldr	r6, [r4, #0]
 800b37c:	6961      	ldr	r1, [r4, #20]
 800b37e:	1d18      	adds	r0, r3, #4
 800b380:	6028      	str	r0, [r5, #0]
 800b382:	0635      	lsls	r5, r6, #24
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	d501      	bpl.n	800b38c <_printf_i+0x1cc>
 800b388:	6019      	str	r1, [r3, #0]
 800b38a:	e002      	b.n	800b392 <_printf_i+0x1d2>
 800b38c:	0670      	lsls	r0, r6, #25
 800b38e:	d5fb      	bpl.n	800b388 <_printf_i+0x1c8>
 800b390:	8019      	strh	r1, [r3, #0]
 800b392:	2300      	movs	r3, #0
 800b394:	6123      	str	r3, [r4, #16]
 800b396:	4615      	mov	r5, r2
 800b398:	e7ba      	b.n	800b310 <_printf_i+0x150>
 800b39a:	682b      	ldr	r3, [r5, #0]
 800b39c:	1d1a      	adds	r2, r3, #4
 800b39e:	602a      	str	r2, [r5, #0]
 800b3a0:	681d      	ldr	r5, [r3, #0]
 800b3a2:	6862      	ldr	r2, [r4, #4]
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	f7f4 ff1a 	bl	80001e0 <memchr>
 800b3ac:	b108      	cbz	r0, 800b3b2 <_printf_i+0x1f2>
 800b3ae:	1b40      	subs	r0, r0, r5
 800b3b0:	6060      	str	r0, [r4, #4]
 800b3b2:	6863      	ldr	r3, [r4, #4]
 800b3b4:	6123      	str	r3, [r4, #16]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3bc:	e7a8      	b.n	800b310 <_printf_i+0x150>
 800b3be:	6923      	ldr	r3, [r4, #16]
 800b3c0:	462a      	mov	r2, r5
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	47d0      	blx	sl
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	d0ab      	beq.n	800b324 <_printf_i+0x164>
 800b3cc:	6823      	ldr	r3, [r4, #0]
 800b3ce:	079b      	lsls	r3, r3, #30
 800b3d0:	d413      	bmi.n	800b3fa <_printf_i+0x23a>
 800b3d2:	68e0      	ldr	r0, [r4, #12]
 800b3d4:	9b03      	ldr	r3, [sp, #12]
 800b3d6:	4298      	cmp	r0, r3
 800b3d8:	bfb8      	it	lt
 800b3da:	4618      	movlt	r0, r3
 800b3dc:	e7a4      	b.n	800b328 <_printf_i+0x168>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	4649      	mov	r1, r9
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	47d0      	blx	sl
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	d09b      	beq.n	800b324 <_printf_i+0x164>
 800b3ec:	3501      	adds	r5, #1
 800b3ee:	68e3      	ldr	r3, [r4, #12]
 800b3f0:	9903      	ldr	r1, [sp, #12]
 800b3f2:	1a5b      	subs	r3, r3, r1
 800b3f4:	42ab      	cmp	r3, r5
 800b3f6:	dcf2      	bgt.n	800b3de <_printf_i+0x21e>
 800b3f8:	e7eb      	b.n	800b3d2 <_printf_i+0x212>
 800b3fa:	2500      	movs	r5, #0
 800b3fc:	f104 0619 	add.w	r6, r4, #25
 800b400:	e7f5      	b.n	800b3ee <_printf_i+0x22e>
 800b402:	bf00      	nop
 800b404:	0800c4c5 	.word	0x0800c4c5
 800b408:	0800c4d6 	.word	0x0800c4d6

0800b40c <memmove>:
 800b40c:	4288      	cmp	r0, r1
 800b40e:	b510      	push	{r4, lr}
 800b410:	eb01 0402 	add.w	r4, r1, r2
 800b414:	d902      	bls.n	800b41c <memmove+0x10>
 800b416:	4284      	cmp	r4, r0
 800b418:	4623      	mov	r3, r4
 800b41a:	d807      	bhi.n	800b42c <memmove+0x20>
 800b41c:	1e43      	subs	r3, r0, #1
 800b41e:	42a1      	cmp	r1, r4
 800b420:	d008      	beq.n	800b434 <memmove+0x28>
 800b422:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b42a:	e7f8      	b.n	800b41e <memmove+0x12>
 800b42c:	4402      	add	r2, r0
 800b42e:	4601      	mov	r1, r0
 800b430:	428a      	cmp	r2, r1
 800b432:	d100      	bne.n	800b436 <memmove+0x2a>
 800b434:	bd10      	pop	{r4, pc}
 800b436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b43a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b43e:	e7f7      	b.n	800b430 <memmove+0x24>

0800b440 <_realloc_r>:
 800b440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b444:	4680      	mov	r8, r0
 800b446:	4614      	mov	r4, r2
 800b448:	460e      	mov	r6, r1
 800b44a:	b921      	cbnz	r1, 800b456 <_realloc_r+0x16>
 800b44c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b450:	4611      	mov	r1, r2
 800b452:	f7ff bb85 	b.w	800ab60 <_malloc_r>
 800b456:	b92a      	cbnz	r2, 800b464 <_realloc_r+0x24>
 800b458:	f7ff fc9c 	bl	800ad94 <_free_r>
 800b45c:	4625      	mov	r5, r4
 800b45e:	4628      	mov	r0, r5
 800b460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b464:	f000 f81b 	bl	800b49e <_malloc_usable_size_r>
 800b468:	4284      	cmp	r4, r0
 800b46a:	4607      	mov	r7, r0
 800b46c:	d802      	bhi.n	800b474 <_realloc_r+0x34>
 800b46e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b472:	d812      	bhi.n	800b49a <_realloc_r+0x5a>
 800b474:	4621      	mov	r1, r4
 800b476:	4640      	mov	r0, r8
 800b478:	f7ff fb72 	bl	800ab60 <_malloc_r>
 800b47c:	4605      	mov	r5, r0
 800b47e:	2800      	cmp	r0, #0
 800b480:	d0ed      	beq.n	800b45e <_realloc_r+0x1e>
 800b482:	42bc      	cmp	r4, r7
 800b484:	4622      	mov	r2, r4
 800b486:	4631      	mov	r1, r6
 800b488:	bf28      	it	cs
 800b48a:	463a      	movcs	r2, r7
 800b48c:	f7ff fb32 	bl	800aaf4 <memcpy>
 800b490:	4631      	mov	r1, r6
 800b492:	4640      	mov	r0, r8
 800b494:	f7ff fc7e 	bl	800ad94 <_free_r>
 800b498:	e7e1      	b.n	800b45e <_realloc_r+0x1e>
 800b49a:	4635      	mov	r5, r6
 800b49c:	e7df      	b.n	800b45e <_realloc_r+0x1e>

0800b49e <_malloc_usable_size_r>:
 800b49e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4a2:	1f18      	subs	r0, r3, #4
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	bfbc      	itt	lt
 800b4a8:	580b      	ldrlt	r3, [r1, r0]
 800b4aa:	18c0      	addlt	r0, r0, r3
 800b4ac:	4770      	bx	lr
	...

0800b4b0 <pow>:
 800b4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b2:	ed2d 8b02 	vpush	{d8}
 800b4b6:	eeb0 8a40 	vmov.f32	s16, s0
 800b4ba:	eef0 8a60 	vmov.f32	s17, s1
 800b4be:	ec55 4b11 	vmov	r4, r5, d1
 800b4c2:	f000 f865 	bl	800b590 <__ieee754_pow>
 800b4c6:	4622      	mov	r2, r4
 800b4c8:	462b      	mov	r3, r5
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	ec57 6b10 	vmov	r6, r7, d0
 800b4d2:	f7f5 fb2b 	bl	8000b2c <__aeabi_dcmpun>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d13b      	bne.n	800b552 <pow+0xa2>
 800b4da:	ec51 0b18 	vmov	r0, r1, d8
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	f7f5 faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4e6:	b1b8      	cbz	r0, 800b518 <pow+0x68>
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	f7f5 faea 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d146      	bne.n	800b586 <pow+0xd6>
 800b4f8:	ec45 4b10 	vmov	d0, r4, r5
 800b4fc:	f000 fe61 	bl	800c1c2 <finite>
 800b500:	b338      	cbz	r0, 800b552 <pow+0xa2>
 800b502:	2200      	movs	r2, #0
 800b504:	2300      	movs	r3, #0
 800b506:	4620      	mov	r0, r4
 800b508:	4629      	mov	r1, r5
 800b50a:	f7f5 fae7 	bl	8000adc <__aeabi_dcmplt>
 800b50e:	b300      	cbz	r0, 800b552 <pow+0xa2>
 800b510:	f7ff fac4 	bl	800aa9c <__errno>
 800b514:	2322      	movs	r3, #34	; 0x22
 800b516:	e01b      	b.n	800b550 <pow+0xa0>
 800b518:	ec47 6b10 	vmov	d0, r6, r7
 800b51c:	f000 fe51 	bl	800c1c2 <finite>
 800b520:	b9e0      	cbnz	r0, 800b55c <pow+0xac>
 800b522:	eeb0 0a48 	vmov.f32	s0, s16
 800b526:	eef0 0a68 	vmov.f32	s1, s17
 800b52a:	f000 fe4a 	bl	800c1c2 <finite>
 800b52e:	b1a8      	cbz	r0, 800b55c <pow+0xac>
 800b530:	ec45 4b10 	vmov	d0, r4, r5
 800b534:	f000 fe45 	bl	800c1c2 <finite>
 800b538:	b180      	cbz	r0, 800b55c <pow+0xac>
 800b53a:	4632      	mov	r2, r6
 800b53c:	463b      	mov	r3, r7
 800b53e:	4630      	mov	r0, r6
 800b540:	4639      	mov	r1, r7
 800b542:	f7f5 faf3 	bl	8000b2c <__aeabi_dcmpun>
 800b546:	2800      	cmp	r0, #0
 800b548:	d0e2      	beq.n	800b510 <pow+0x60>
 800b54a:	f7ff faa7 	bl	800aa9c <__errno>
 800b54e:	2321      	movs	r3, #33	; 0x21
 800b550:	6003      	str	r3, [r0, #0]
 800b552:	ecbd 8b02 	vpop	{d8}
 800b556:	ec47 6b10 	vmov	d0, r6, r7
 800b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55c:	2200      	movs	r2, #0
 800b55e:	2300      	movs	r3, #0
 800b560:	4630      	mov	r0, r6
 800b562:	4639      	mov	r1, r7
 800b564:	f7f5 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d0f2      	beq.n	800b552 <pow+0xa2>
 800b56c:	eeb0 0a48 	vmov.f32	s0, s16
 800b570:	eef0 0a68 	vmov.f32	s1, s17
 800b574:	f000 fe25 	bl	800c1c2 <finite>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d0ea      	beq.n	800b552 <pow+0xa2>
 800b57c:	ec45 4b10 	vmov	d0, r4, r5
 800b580:	f000 fe1f 	bl	800c1c2 <finite>
 800b584:	e7c3      	b.n	800b50e <pow+0x5e>
 800b586:	4f01      	ldr	r7, [pc, #4]	; (800b58c <pow+0xdc>)
 800b588:	2600      	movs	r6, #0
 800b58a:	e7e2      	b.n	800b552 <pow+0xa2>
 800b58c:	3ff00000 	.word	0x3ff00000

0800b590 <__ieee754_pow>:
 800b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b594:	ed2d 8b06 	vpush	{d8-d10}
 800b598:	b089      	sub	sp, #36	; 0x24
 800b59a:	ed8d 1b00 	vstr	d1, [sp]
 800b59e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b5a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b5a6:	ea58 0102 	orrs.w	r1, r8, r2
 800b5aa:	ec57 6b10 	vmov	r6, r7, d0
 800b5ae:	d115      	bne.n	800b5dc <__ieee754_pow+0x4c>
 800b5b0:	19b3      	adds	r3, r6, r6
 800b5b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b5b6:	4152      	adcs	r2, r2
 800b5b8:	4299      	cmp	r1, r3
 800b5ba:	4b89      	ldr	r3, [pc, #548]	; (800b7e0 <__ieee754_pow+0x250>)
 800b5bc:	4193      	sbcs	r3, r2
 800b5be:	f080 84d2 	bcs.w	800bf66 <__ieee754_pow+0x9d6>
 800b5c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	f7f4 fe5f 	bl	800028c <__adddf3>
 800b5ce:	ec41 0b10 	vmov	d0, r0, r1
 800b5d2:	b009      	add	sp, #36	; 0x24
 800b5d4:	ecbd 8b06 	vpop	{d8-d10}
 800b5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5dc:	4b81      	ldr	r3, [pc, #516]	; (800b7e4 <__ieee754_pow+0x254>)
 800b5de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b5e2:	429c      	cmp	r4, r3
 800b5e4:	ee10 aa10 	vmov	sl, s0
 800b5e8:	463d      	mov	r5, r7
 800b5ea:	dc06      	bgt.n	800b5fa <__ieee754_pow+0x6a>
 800b5ec:	d101      	bne.n	800b5f2 <__ieee754_pow+0x62>
 800b5ee:	2e00      	cmp	r6, #0
 800b5f0:	d1e7      	bne.n	800b5c2 <__ieee754_pow+0x32>
 800b5f2:	4598      	cmp	r8, r3
 800b5f4:	dc01      	bgt.n	800b5fa <__ieee754_pow+0x6a>
 800b5f6:	d10f      	bne.n	800b618 <__ieee754_pow+0x88>
 800b5f8:	b172      	cbz	r2, 800b618 <__ieee754_pow+0x88>
 800b5fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b5fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b602:	ea55 050a 	orrs.w	r5, r5, sl
 800b606:	d1dc      	bne.n	800b5c2 <__ieee754_pow+0x32>
 800b608:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b60c:	18db      	adds	r3, r3, r3
 800b60e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b612:	4152      	adcs	r2, r2
 800b614:	429d      	cmp	r5, r3
 800b616:	e7d0      	b.n	800b5ba <__ieee754_pow+0x2a>
 800b618:	2d00      	cmp	r5, #0
 800b61a:	da3b      	bge.n	800b694 <__ieee754_pow+0x104>
 800b61c:	4b72      	ldr	r3, [pc, #456]	; (800b7e8 <__ieee754_pow+0x258>)
 800b61e:	4598      	cmp	r8, r3
 800b620:	dc51      	bgt.n	800b6c6 <__ieee754_pow+0x136>
 800b622:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b626:	4598      	cmp	r8, r3
 800b628:	f340 84ac 	ble.w	800bf84 <__ieee754_pow+0x9f4>
 800b62c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b630:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b634:	2b14      	cmp	r3, #20
 800b636:	dd0f      	ble.n	800b658 <__ieee754_pow+0xc8>
 800b638:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b63c:	fa22 f103 	lsr.w	r1, r2, r3
 800b640:	fa01 f303 	lsl.w	r3, r1, r3
 800b644:	4293      	cmp	r3, r2
 800b646:	f040 849d 	bne.w	800bf84 <__ieee754_pow+0x9f4>
 800b64a:	f001 0101 	and.w	r1, r1, #1
 800b64e:	f1c1 0302 	rsb	r3, r1, #2
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	b182      	cbz	r2, 800b678 <__ieee754_pow+0xe8>
 800b656:	e05f      	b.n	800b718 <__ieee754_pow+0x188>
 800b658:	2a00      	cmp	r2, #0
 800b65a:	d15b      	bne.n	800b714 <__ieee754_pow+0x184>
 800b65c:	f1c3 0314 	rsb	r3, r3, #20
 800b660:	fa48 f103 	asr.w	r1, r8, r3
 800b664:	fa01 f303 	lsl.w	r3, r1, r3
 800b668:	4543      	cmp	r3, r8
 800b66a:	f040 8488 	bne.w	800bf7e <__ieee754_pow+0x9ee>
 800b66e:	f001 0101 	and.w	r1, r1, #1
 800b672:	f1c1 0302 	rsb	r3, r1, #2
 800b676:	9304      	str	r3, [sp, #16]
 800b678:	4b5c      	ldr	r3, [pc, #368]	; (800b7ec <__ieee754_pow+0x25c>)
 800b67a:	4598      	cmp	r8, r3
 800b67c:	d132      	bne.n	800b6e4 <__ieee754_pow+0x154>
 800b67e:	f1b9 0f00 	cmp.w	r9, #0
 800b682:	f280 8478 	bge.w	800bf76 <__ieee754_pow+0x9e6>
 800b686:	4959      	ldr	r1, [pc, #356]	; (800b7ec <__ieee754_pow+0x25c>)
 800b688:	4632      	mov	r2, r6
 800b68a:	463b      	mov	r3, r7
 800b68c:	2000      	movs	r0, #0
 800b68e:	f7f5 f8dd 	bl	800084c <__aeabi_ddiv>
 800b692:	e79c      	b.n	800b5ce <__ieee754_pow+0x3e>
 800b694:	2300      	movs	r3, #0
 800b696:	9304      	str	r3, [sp, #16]
 800b698:	2a00      	cmp	r2, #0
 800b69a:	d13d      	bne.n	800b718 <__ieee754_pow+0x188>
 800b69c:	4b51      	ldr	r3, [pc, #324]	; (800b7e4 <__ieee754_pow+0x254>)
 800b69e:	4598      	cmp	r8, r3
 800b6a0:	d1ea      	bne.n	800b678 <__ieee754_pow+0xe8>
 800b6a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b6a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b6aa:	ea53 030a 	orrs.w	r3, r3, sl
 800b6ae:	f000 845a 	beq.w	800bf66 <__ieee754_pow+0x9d6>
 800b6b2:	4b4f      	ldr	r3, [pc, #316]	; (800b7f0 <__ieee754_pow+0x260>)
 800b6b4:	429c      	cmp	r4, r3
 800b6b6:	dd08      	ble.n	800b6ca <__ieee754_pow+0x13a>
 800b6b8:	f1b9 0f00 	cmp.w	r9, #0
 800b6bc:	f2c0 8457 	blt.w	800bf6e <__ieee754_pow+0x9de>
 800b6c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6c4:	e783      	b.n	800b5ce <__ieee754_pow+0x3e>
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	e7e5      	b.n	800b696 <__ieee754_pow+0x106>
 800b6ca:	f1b9 0f00 	cmp.w	r9, #0
 800b6ce:	f04f 0000 	mov.w	r0, #0
 800b6d2:	f04f 0100 	mov.w	r1, #0
 800b6d6:	f6bf af7a 	bge.w	800b5ce <__ieee754_pow+0x3e>
 800b6da:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b6de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b6e2:	e774      	b.n	800b5ce <__ieee754_pow+0x3e>
 800b6e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b6e8:	d106      	bne.n	800b6f8 <__ieee754_pow+0x168>
 800b6ea:	4632      	mov	r2, r6
 800b6ec:	463b      	mov	r3, r7
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	f7f4 ff81 	bl	80005f8 <__aeabi_dmul>
 800b6f6:	e76a      	b.n	800b5ce <__ieee754_pow+0x3e>
 800b6f8:	4b3e      	ldr	r3, [pc, #248]	; (800b7f4 <__ieee754_pow+0x264>)
 800b6fa:	4599      	cmp	r9, r3
 800b6fc:	d10c      	bne.n	800b718 <__ieee754_pow+0x188>
 800b6fe:	2d00      	cmp	r5, #0
 800b700:	db0a      	blt.n	800b718 <__ieee754_pow+0x188>
 800b702:	ec47 6b10 	vmov	d0, r6, r7
 800b706:	b009      	add	sp, #36	; 0x24
 800b708:	ecbd 8b06 	vpop	{d8-d10}
 800b70c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b710:	f000 bc6c 	b.w	800bfec <__ieee754_sqrt>
 800b714:	2300      	movs	r3, #0
 800b716:	9304      	str	r3, [sp, #16]
 800b718:	ec47 6b10 	vmov	d0, r6, r7
 800b71c:	f000 fd48 	bl	800c1b0 <fabs>
 800b720:	ec51 0b10 	vmov	r0, r1, d0
 800b724:	f1ba 0f00 	cmp.w	sl, #0
 800b728:	d129      	bne.n	800b77e <__ieee754_pow+0x1ee>
 800b72a:	b124      	cbz	r4, 800b736 <__ieee754_pow+0x1a6>
 800b72c:	4b2f      	ldr	r3, [pc, #188]	; (800b7ec <__ieee754_pow+0x25c>)
 800b72e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b732:	429a      	cmp	r2, r3
 800b734:	d123      	bne.n	800b77e <__ieee754_pow+0x1ee>
 800b736:	f1b9 0f00 	cmp.w	r9, #0
 800b73a:	da05      	bge.n	800b748 <__ieee754_pow+0x1b8>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	2000      	movs	r0, #0
 800b742:	492a      	ldr	r1, [pc, #168]	; (800b7ec <__ieee754_pow+0x25c>)
 800b744:	f7f5 f882 	bl	800084c <__aeabi_ddiv>
 800b748:	2d00      	cmp	r5, #0
 800b74a:	f6bf af40 	bge.w	800b5ce <__ieee754_pow+0x3e>
 800b74e:	9b04      	ldr	r3, [sp, #16]
 800b750:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b754:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b758:	4323      	orrs	r3, r4
 800b75a:	d108      	bne.n	800b76e <__ieee754_pow+0x1de>
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	4610      	mov	r0, r2
 800b762:	4619      	mov	r1, r3
 800b764:	f7f4 fd90 	bl	8000288 <__aeabi_dsub>
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	e78f      	b.n	800b68e <__ieee754_pow+0xfe>
 800b76e:	9b04      	ldr	r3, [sp, #16]
 800b770:	2b01      	cmp	r3, #1
 800b772:	f47f af2c 	bne.w	800b5ce <__ieee754_pow+0x3e>
 800b776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b77a:	4619      	mov	r1, r3
 800b77c:	e727      	b.n	800b5ce <__ieee754_pow+0x3e>
 800b77e:	0feb      	lsrs	r3, r5, #31
 800b780:	3b01      	subs	r3, #1
 800b782:	9306      	str	r3, [sp, #24]
 800b784:	9a06      	ldr	r2, [sp, #24]
 800b786:	9b04      	ldr	r3, [sp, #16]
 800b788:	4313      	orrs	r3, r2
 800b78a:	d102      	bne.n	800b792 <__ieee754_pow+0x202>
 800b78c:	4632      	mov	r2, r6
 800b78e:	463b      	mov	r3, r7
 800b790:	e7e6      	b.n	800b760 <__ieee754_pow+0x1d0>
 800b792:	4b19      	ldr	r3, [pc, #100]	; (800b7f8 <__ieee754_pow+0x268>)
 800b794:	4598      	cmp	r8, r3
 800b796:	f340 80fb 	ble.w	800b990 <__ieee754_pow+0x400>
 800b79a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b79e:	4598      	cmp	r8, r3
 800b7a0:	4b13      	ldr	r3, [pc, #76]	; (800b7f0 <__ieee754_pow+0x260>)
 800b7a2:	dd0c      	ble.n	800b7be <__ieee754_pow+0x22e>
 800b7a4:	429c      	cmp	r4, r3
 800b7a6:	dc0f      	bgt.n	800b7c8 <__ieee754_pow+0x238>
 800b7a8:	f1b9 0f00 	cmp.w	r9, #0
 800b7ac:	da0f      	bge.n	800b7ce <__ieee754_pow+0x23e>
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	b009      	add	sp, #36	; 0x24
 800b7b2:	ecbd 8b06 	vpop	{d8-d10}
 800b7b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	f000 bcf0 	b.w	800c19e <__math_oflow>
 800b7be:	429c      	cmp	r4, r3
 800b7c0:	dbf2      	blt.n	800b7a8 <__ieee754_pow+0x218>
 800b7c2:	4b0a      	ldr	r3, [pc, #40]	; (800b7ec <__ieee754_pow+0x25c>)
 800b7c4:	429c      	cmp	r4, r3
 800b7c6:	dd19      	ble.n	800b7fc <__ieee754_pow+0x26c>
 800b7c8:	f1b9 0f00 	cmp.w	r9, #0
 800b7cc:	dcef      	bgt.n	800b7ae <__ieee754_pow+0x21e>
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	b009      	add	sp, #36	; 0x24
 800b7d2:	ecbd 8b06 	vpop	{d8-d10}
 800b7d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7da:	f000 bcd7 	b.w	800c18c <__math_uflow>
 800b7de:	bf00      	nop
 800b7e0:	fff00000 	.word	0xfff00000
 800b7e4:	7ff00000 	.word	0x7ff00000
 800b7e8:	433fffff 	.word	0x433fffff
 800b7ec:	3ff00000 	.word	0x3ff00000
 800b7f0:	3fefffff 	.word	0x3fefffff
 800b7f4:	3fe00000 	.word	0x3fe00000
 800b7f8:	41e00000 	.word	0x41e00000
 800b7fc:	4b60      	ldr	r3, [pc, #384]	; (800b980 <__ieee754_pow+0x3f0>)
 800b7fe:	2200      	movs	r2, #0
 800b800:	f7f4 fd42 	bl	8000288 <__aeabi_dsub>
 800b804:	a354      	add	r3, pc, #336	; (adr r3, 800b958 <__ieee754_pow+0x3c8>)
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	4604      	mov	r4, r0
 800b80c:	460d      	mov	r5, r1
 800b80e:	f7f4 fef3 	bl	80005f8 <__aeabi_dmul>
 800b812:	a353      	add	r3, pc, #332	; (adr r3, 800b960 <__ieee754_pow+0x3d0>)
 800b814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b818:	4606      	mov	r6, r0
 800b81a:	460f      	mov	r7, r1
 800b81c:	4620      	mov	r0, r4
 800b81e:	4629      	mov	r1, r5
 800b820:	f7f4 feea 	bl	80005f8 <__aeabi_dmul>
 800b824:	4b57      	ldr	r3, [pc, #348]	; (800b984 <__ieee754_pow+0x3f4>)
 800b826:	4682      	mov	sl, r0
 800b828:	468b      	mov	fp, r1
 800b82a:	2200      	movs	r2, #0
 800b82c:	4620      	mov	r0, r4
 800b82e:	4629      	mov	r1, r5
 800b830:	f7f4 fee2 	bl	80005f8 <__aeabi_dmul>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	a14b      	add	r1, pc, #300	; (adr r1, 800b968 <__ieee754_pow+0x3d8>)
 800b83a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b83e:	f7f4 fd23 	bl	8000288 <__aeabi_dsub>
 800b842:	4622      	mov	r2, r4
 800b844:	462b      	mov	r3, r5
 800b846:	f7f4 fed7 	bl	80005f8 <__aeabi_dmul>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	2000      	movs	r0, #0
 800b850:	494d      	ldr	r1, [pc, #308]	; (800b988 <__ieee754_pow+0x3f8>)
 800b852:	f7f4 fd19 	bl	8000288 <__aeabi_dsub>
 800b856:	4622      	mov	r2, r4
 800b858:	4680      	mov	r8, r0
 800b85a:	4689      	mov	r9, r1
 800b85c:	462b      	mov	r3, r5
 800b85e:	4620      	mov	r0, r4
 800b860:	4629      	mov	r1, r5
 800b862:	f7f4 fec9 	bl	80005f8 <__aeabi_dmul>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	4640      	mov	r0, r8
 800b86c:	4649      	mov	r1, r9
 800b86e:	f7f4 fec3 	bl	80005f8 <__aeabi_dmul>
 800b872:	a33f      	add	r3, pc, #252	; (adr r3, 800b970 <__ieee754_pow+0x3e0>)
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f7f4 febe 	bl	80005f8 <__aeabi_dmul>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	4650      	mov	r0, sl
 800b882:	4659      	mov	r1, fp
 800b884:	f7f4 fd00 	bl	8000288 <__aeabi_dsub>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4680      	mov	r8, r0
 800b88e:	4689      	mov	r9, r1
 800b890:	4630      	mov	r0, r6
 800b892:	4639      	mov	r1, r7
 800b894:	f7f4 fcfa 	bl	800028c <__adddf3>
 800b898:	2000      	movs	r0, #0
 800b89a:	4632      	mov	r2, r6
 800b89c:	463b      	mov	r3, r7
 800b89e:	4604      	mov	r4, r0
 800b8a0:	460d      	mov	r5, r1
 800b8a2:	f7f4 fcf1 	bl	8000288 <__aeabi_dsub>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	4649      	mov	r1, r9
 800b8ae:	f7f4 fceb 	bl	8000288 <__aeabi_dsub>
 800b8b2:	9b04      	ldr	r3, [sp, #16]
 800b8b4:	9a06      	ldr	r2, [sp, #24]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	4682      	mov	sl, r0
 800b8bc:	468b      	mov	fp, r1
 800b8be:	f040 81e7 	bne.w	800bc90 <__ieee754_pow+0x700>
 800b8c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b978 <__ieee754_pow+0x3e8>
 800b8c6:	eeb0 8a47 	vmov.f32	s16, s14
 800b8ca:	eef0 8a67 	vmov.f32	s17, s15
 800b8ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b8d2:	2600      	movs	r6, #0
 800b8d4:	4632      	mov	r2, r6
 800b8d6:	463b      	mov	r3, r7
 800b8d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8dc:	f7f4 fcd4 	bl	8000288 <__aeabi_dsub>
 800b8e0:	4622      	mov	r2, r4
 800b8e2:	462b      	mov	r3, r5
 800b8e4:	f7f4 fe88 	bl	80005f8 <__aeabi_dmul>
 800b8e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	4689      	mov	r9, r1
 800b8f0:	4650      	mov	r0, sl
 800b8f2:	4659      	mov	r1, fp
 800b8f4:	f7f4 fe80 	bl	80005f8 <__aeabi_dmul>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4640      	mov	r0, r8
 800b8fe:	4649      	mov	r1, r9
 800b900:	f7f4 fcc4 	bl	800028c <__adddf3>
 800b904:	4632      	mov	r2, r6
 800b906:	463b      	mov	r3, r7
 800b908:	4680      	mov	r8, r0
 800b90a:	4689      	mov	r9, r1
 800b90c:	4620      	mov	r0, r4
 800b90e:	4629      	mov	r1, r5
 800b910:	f7f4 fe72 	bl	80005f8 <__aeabi_dmul>
 800b914:	460b      	mov	r3, r1
 800b916:	4604      	mov	r4, r0
 800b918:	460d      	mov	r5, r1
 800b91a:	4602      	mov	r2, r0
 800b91c:	4649      	mov	r1, r9
 800b91e:	4640      	mov	r0, r8
 800b920:	f7f4 fcb4 	bl	800028c <__adddf3>
 800b924:	4b19      	ldr	r3, [pc, #100]	; (800b98c <__ieee754_pow+0x3fc>)
 800b926:	4299      	cmp	r1, r3
 800b928:	ec45 4b19 	vmov	d9, r4, r5
 800b92c:	4606      	mov	r6, r0
 800b92e:	460f      	mov	r7, r1
 800b930:	468b      	mov	fp, r1
 800b932:	f340 82f1 	ble.w	800bf18 <__ieee754_pow+0x988>
 800b936:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b93a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b93e:	4303      	orrs	r3, r0
 800b940:	f000 81e4 	beq.w	800bd0c <__ieee754_pow+0x77c>
 800b944:	ec51 0b18 	vmov	r0, r1, d8
 800b948:	2200      	movs	r2, #0
 800b94a:	2300      	movs	r3, #0
 800b94c:	f7f5 f8c6 	bl	8000adc <__aeabi_dcmplt>
 800b950:	3800      	subs	r0, #0
 800b952:	bf18      	it	ne
 800b954:	2001      	movne	r0, #1
 800b956:	e72b      	b.n	800b7b0 <__ieee754_pow+0x220>
 800b958:	60000000 	.word	0x60000000
 800b95c:	3ff71547 	.word	0x3ff71547
 800b960:	f85ddf44 	.word	0xf85ddf44
 800b964:	3e54ae0b 	.word	0x3e54ae0b
 800b968:	55555555 	.word	0x55555555
 800b96c:	3fd55555 	.word	0x3fd55555
 800b970:	652b82fe 	.word	0x652b82fe
 800b974:	3ff71547 	.word	0x3ff71547
 800b978:	00000000 	.word	0x00000000
 800b97c:	bff00000 	.word	0xbff00000
 800b980:	3ff00000 	.word	0x3ff00000
 800b984:	3fd00000 	.word	0x3fd00000
 800b988:	3fe00000 	.word	0x3fe00000
 800b98c:	408fffff 	.word	0x408fffff
 800b990:	4bd5      	ldr	r3, [pc, #852]	; (800bce8 <__ieee754_pow+0x758>)
 800b992:	402b      	ands	r3, r5
 800b994:	2200      	movs	r2, #0
 800b996:	b92b      	cbnz	r3, 800b9a4 <__ieee754_pow+0x414>
 800b998:	4bd4      	ldr	r3, [pc, #848]	; (800bcec <__ieee754_pow+0x75c>)
 800b99a:	f7f4 fe2d 	bl	80005f8 <__aeabi_dmul>
 800b99e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	1523      	asrs	r3, r4, #20
 800b9a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b9aa:	4413      	add	r3, r2
 800b9ac:	9305      	str	r3, [sp, #20]
 800b9ae:	4bd0      	ldr	r3, [pc, #832]	; (800bcf0 <__ieee754_pow+0x760>)
 800b9b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b9b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b9b8:	429c      	cmp	r4, r3
 800b9ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b9be:	dd08      	ble.n	800b9d2 <__ieee754_pow+0x442>
 800b9c0:	4bcc      	ldr	r3, [pc, #816]	; (800bcf4 <__ieee754_pow+0x764>)
 800b9c2:	429c      	cmp	r4, r3
 800b9c4:	f340 8162 	ble.w	800bc8c <__ieee754_pow+0x6fc>
 800b9c8:	9b05      	ldr	r3, [sp, #20]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	9305      	str	r3, [sp, #20]
 800b9ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b9d2:	2400      	movs	r4, #0
 800b9d4:	00e3      	lsls	r3, r4, #3
 800b9d6:	9307      	str	r3, [sp, #28]
 800b9d8:	4bc7      	ldr	r3, [pc, #796]	; (800bcf8 <__ieee754_pow+0x768>)
 800b9da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9de:	ed93 7b00 	vldr	d7, [r3]
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	ec53 2b17 	vmov	r2, r3, d7
 800b9e8:	eeb0 9a47 	vmov.f32	s18, s14
 800b9ec:	eef0 9a67 	vmov.f32	s19, s15
 800b9f0:	4682      	mov	sl, r0
 800b9f2:	f7f4 fc49 	bl	8000288 <__aeabi_dsub>
 800b9f6:	4652      	mov	r2, sl
 800b9f8:	4606      	mov	r6, r0
 800b9fa:	460f      	mov	r7, r1
 800b9fc:	462b      	mov	r3, r5
 800b9fe:	ec51 0b19 	vmov	r0, r1, d9
 800ba02:	f7f4 fc43 	bl	800028c <__adddf3>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	49bb      	ldr	r1, [pc, #748]	; (800bcfc <__ieee754_pow+0x76c>)
 800ba0e:	f7f4 ff1d 	bl	800084c <__aeabi_ddiv>
 800ba12:	ec41 0b1a 	vmov	d10, r0, r1
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	f7f4 fdeb 	bl	80005f8 <__aeabi_dmul>
 800ba22:	2300      	movs	r3, #0
 800ba24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba28:	9302      	str	r3, [sp, #8]
 800ba2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ba2e:	46ab      	mov	fp, r5
 800ba30:	106d      	asrs	r5, r5, #1
 800ba32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ba36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ba3a:	ec41 0b18 	vmov	d8, r0, r1
 800ba3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ba42:	2200      	movs	r2, #0
 800ba44:	4640      	mov	r0, r8
 800ba46:	4649      	mov	r1, r9
 800ba48:	4614      	mov	r4, r2
 800ba4a:	461d      	mov	r5, r3
 800ba4c:	f7f4 fdd4 	bl	80005f8 <__aeabi_dmul>
 800ba50:	4602      	mov	r2, r0
 800ba52:	460b      	mov	r3, r1
 800ba54:	4630      	mov	r0, r6
 800ba56:	4639      	mov	r1, r7
 800ba58:	f7f4 fc16 	bl	8000288 <__aeabi_dsub>
 800ba5c:	ec53 2b19 	vmov	r2, r3, d9
 800ba60:	4606      	mov	r6, r0
 800ba62:	460f      	mov	r7, r1
 800ba64:	4620      	mov	r0, r4
 800ba66:	4629      	mov	r1, r5
 800ba68:	f7f4 fc0e 	bl	8000288 <__aeabi_dsub>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	4650      	mov	r0, sl
 800ba72:	4659      	mov	r1, fp
 800ba74:	f7f4 fc08 	bl	8000288 <__aeabi_dsub>
 800ba78:	4642      	mov	r2, r8
 800ba7a:	464b      	mov	r3, r9
 800ba7c:	f7f4 fdbc 	bl	80005f8 <__aeabi_dmul>
 800ba80:	4602      	mov	r2, r0
 800ba82:	460b      	mov	r3, r1
 800ba84:	4630      	mov	r0, r6
 800ba86:	4639      	mov	r1, r7
 800ba88:	f7f4 fbfe 	bl	8000288 <__aeabi_dsub>
 800ba8c:	ec53 2b1a 	vmov	r2, r3, d10
 800ba90:	f7f4 fdb2 	bl	80005f8 <__aeabi_dmul>
 800ba94:	ec53 2b18 	vmov	r2, r3, d8
 800ba98:	ec41 0b19 	vmov	d9, r0, r1
 800ba9c:	ec51 0b18 	vmov	r0, r1, d8
 800baa0:	f7f4 fdaa 	bl	80005f8 <__aeabi_dmul>
 800baa4:	a37c      	add	r3, pc, #496	; (adr r3, 800bc98 <__ieee754_pow+0x708>)
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	4604      	mov	r4, r0
 800baac:	460d      	mov	r5, r1
 800baae:	f7f4 fda3 	bl	80005f8 <__aeabi_dmul>
 800bab2:	a37b      	add	r3, pc, #492	; (adr r3, 800bca0 <__ieee754_pow+0x710>)
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	f7f4 fbe8 	bl	800028c <__adddf3>
 800babc:	4622      	mov	r2, r4
 800babe:	462b      	mov	r3, r5
 800bac0:	f7f4 fd9a 	bl	80005f8 <__aeabi_dmul>
 800bac4:	a378      	add	r3, pc, #480	; (adr r3, 800bca8 <__ieee754_pow+0x718>)
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	f7f4 fbdf 	bl	800028c <__adddf3>
 800bace:	4622      	mov	r2, r4
 800bad0:	462b      	mov	r3, r5
 800bad2:	f7f4 fd91 	bl	80005f8 <__aeabi_dmul>
 800bad6:	a376      	add	r3, pc, #472	; (adr r3, 800bcb0 <__ieee754_pow+0x720>)
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	f7f4 fbd6 	bl	800028c <__adddf3>
 800bae0:	4622      	mov	r2, r4
 800bae2:	462b      	mov	r3, r5
 800bae4:	f7f4 fd88 	bl	80005f8 <__aeabi_dmul>
 800bae8:	a373      	add	r3, pc, #460	; (adr r3, 800bcb8 <__ieee754_pow+0x728>)
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	f7f4 fbcd 	bl	800028c <__adddf3>
 800baf2:	4622      	mov	r2, r4
 800baf4:	462b      	mov	r3, r5
 800baf6:	f7f4 fd7f 	bl	80005f8 <__aeabi_dmul>
 800bafa:	a371      	add	r3, pc, #452	; (adr r3, 800bcc0 <__ieee754_pow+0x730>)
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	f7f4 fbc4 	bl	800028c <__adddf3>
 800bb04:	4622      	mov	r2, r4
 800bb06:	4606      	mov	r6, r0
 800bb08:	460f      	mov	r7, r1
 800bb0a:	462b      	mov	r3, r5
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	4629      	mov	r1, r5
 800bb10:	f7f4 fd72 	bl	80005f8 <__aeabi_dmul>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4630      	mov	r0, r6
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	f7f4 fd6c 	bl	80005f8 <__aeabi_dmul>
 800bb20:	4642      	mov	r2, r8
 800bb22:	4604      	mov	r4, r0
 800bb24:	460d      	mov	r5, r1
 800bb26:	464b      	mov	r3, r9
 800bb28:	ec51 0b18 	vmov	r0, r1, d8
 800bb2c:	f7f4 fbae 	bl	800028c <__adddf3>
 800bb30:	ec53 2b19 	vmov	r2, r3, d9
 800bb34:	f7f4 fd60 	bl	80005f8 <__aeabi_dmul>
 800bb38:	4622      	mov	r2, r4
 800bb3a:	462b      	mov	r3, r5
 800bb3c:	f7f4 fba6 	bl	800028c <__adddf3>
 800bb40:	4642      	mov	r2, r8
 800bb42:	4682      	mov	sl, r0
 800bb44:	468b      	mov	fp, r1
 800bb46:	464b      	mov	r3, r9
 800bb48:	4640      	mov	r0, r8
 800bb4a:	4649      	mov	r1, r9
 800bb4c:	f7f4 fd54 	bl	80005f8 <__aeabi_dmul>
 800bb50:	4b6b      	ldr	r3, [pc, #428]	; (800bd00 <__ieee754_pow+0x770>)
 800bb52:	2200      	movs	r2, #0
 800bb54:	4606      	mov	r6, r0
 800bb56:	460f      	mov	r7, r1
 800bb58:	f7f4 fb98 	bl	800028c <__adddf3>
 800bb5c:	4652      	mov	r2, sl
 800bb5e:	465b      	mov	r3, fp
 800bb60:	f7f4 fb94 	bl	800028c <__adddf3>
 800bb64:	2000      	movs	r0, #0
 800bb66:	4604      	mov	r4, r0
 800bb68:	460d      	mov	r5, r1
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4640      	mov	r0, r8
 800bb70:	4649      	mov	r1, r9
 800bb72:	f7f4 fd41 	bl	80005f8 <__aeabi_dmul>
 800bb76:	4b62      	ldr	r3, [pc, #392]	; (800bd00 <__ieee754_pow+0x770>)
 800bb78:	4680      	mov	r8, r0
 800bb7a:	4689      	mov	r9, r1
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	4620      	mov	r0, r4
 800bb80:	4629      	mov	r1, r5
 800bb82:	f7f4 fb81 	bl	8000288 <__aeabi_dsub>
 800bb86:	4632      	mov	r2, r6
 800bb88:	463b      	mov	r3, r7
 800bb8a:	f7f4 fb7d 	bl	8000288 <__aeabi_dsub>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	460b      	mov	r3, r1
 800bb92:	4650      	mov	r0, sl
 800bb94:	4659      	mov	r1, fp
 800bb96:	f7f4 fb77 	bl	8000288 <__aeabi_dsub>
 800bb9a:	ec53 2b18 	vmov	r2, r3, d8
 800bb9e:	f7f4 fd2b 	bl	80005f8 <__aeabi_dmul>
 800bba2:	4622      	mov	r2, r4
 800bba4:	4606      	mov	r6, r0
 800bba6:	460f      	mov	r7, r1
 800bba8:	462b      	mov	r3, r5
 800bbaa:	ec51 0b19 	vmov	r0, r1, d9
 800bbae:	f7f4 fd23 	bl	80005f8 <__aeabi_dmul>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	4639      	mov	r1, r7
 800bbba:	f7f4 fb67 	bl	800028c <__adddf3>
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	460f      	mov	r7, r1
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4640      	mov	r0, r8
 800bbc8:	4649      	mov	r1, r9
 800bbca:	f7f4 fb5f 	bl	800028c <__adddf3>
 800bbce:	a33e      	add	r3, pc, #248	; (adr r3, 800bcc8 <__ieee754_pow+0x738>)
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	460d      	mov	r5, r1
 800bbda:	f7f4 fd0d 	bl	80005f8 <__aeabi_dmul>
 800bbde:	4642      	mov	r2, r8
 800bbe0:	ec41 0b18 	vmov	d8, r0, r1
 800bbe4:	464b      	mov	r3, r9
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	4629      	mov	r1, r5
 800bbea:	f7f4 fb4d 	bl	8000288 <__aeabi_dsub>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	4639      	mov	r1, r7
 800bbf6:	f7f4 fb47 	bl	8000288 <__aeabi_dsub>
 800bbfa:	a335      	add	r3, pc, #212	; (adr r3, 800bcd0 <__ieee754_pow+0x740>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	f7f4 fcfa 	bl	80005f8 <__aeabi_dmul>
 800bc04:	a334      	add	r3, pc, #208	; (adr r3, 800bcd8 <__ieee754_pow+0x748>)
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	460f      	mov	r7, r1
 800bc0e:	4620      	mov	r0, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	f7f4 fcf1 	bl	80005f8 <__aeabi_dmul>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	4639      	mov	r1, r7
 800bc1e:	f7f4 fb35 	bl	800028c <__adddf3>
 800bc22:	9a07      	ldr	r2, [sp, #28]
 800bc24:	4b37      	ldr	r3, [pc, #220]	; (800bd04 <__ieee754_pow+0x774>)
 800bc26:	4413      	add	r3, r2
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	f7f4 fb2e 	bl	800028c <__adddf3>
 800bc30:	4682      	mov	sl, r0
 800bc32:	9805      	ldr	r0, [sp, #20]
 800bc34:	468b      	mov	fp, r1
 800bc36:	f7f4 fc75 	bl	8000524 <__aeabi_i2d>
 800bc3a:	9a07      	ldr	r2, [sp, #28]
 800bc3c:	4b32      	ldr	r3, [pc, #200]	; (800bd08 <__ieee754_pow+0x778>)
 800bc3e:	4413      	add	r3, r2
 800bc40:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc44:	4606      	mov	r6, r0
 800bc46:	460f      	mov	r7, r1
 800bc48:	4652      	mov	r2, sl
 800bc4a:	465b      	mov	r3, fp
 800bc4c:	ec51 0b18 	vmov	r0, r1, d8
 800bc50:	f7f4 fb1c 	bl	800028c <__adddf3>
 800bc54:	4642      	mov	r2, r8
 800bc56:	464b      	mov	r3, r9
 800bc58:	f7f4 fb18 	bl	800028c <__adddf3>
 800bc5c:	4632      	mov	r2, r6
 800bc5e:	463b      	mov	r3, r7
 800bc60:	f7f4 fb14 	bl	800028c <__adddf3>
 800bc64:	2000      	movs	r0, #0
 800bc66:	4632      	mov	r2, r6
 800bc68:	463b      	mov	r3, r7
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	460d      	mov	r5, r1
 800bc6e:	f7f4 fb0b 	bl	8000288 <__aeabi_dsub>
 800bc72:	4642      	mov	r2, r8
 800bc74:	464b      	mov	r3, r9
 800bc76:	f7f4 fb07 	bl	8000288 <__aeabi_dsub>
 800bc7a:	ec53 2b18 	vmov	r2, r3, d8
 800bc7e:	f7f4 fb03 	bl	8000288 <__aeabi_dsub>
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	4650      	mov	r0, sl
 800bc88:	4659      	mov	r1, fp
 800bc8a:	e610      	b.n	800b8ae <__ieee754_pow+0x31e>
 800bc8c:	2401      	movs	r4, #1
 800bc8e:	e6a1      	b.n	800b9d4 <__ieee754_pow+0x444>
 800bc90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bce0 <__ieee754_pow+0x750>
 800bc94:	e617      	b.n	800b8c6 <__ieee754_pow+0x336>
 800bc96:	bf00      	nop
 800bc98:	4a454eef 	.word	0x4a454eef
 800bc9c:	3fca7e28 	.word	0x3fca7e28
 800bca0:	93c9db65 	.word	0x93c9db65
 800bca4:	3fcd864a 	.word	0x3fcd864a
 800bca8:	a91d4101 	.word	0xa91d4101
 800bcac:	3fd17460 	.word	0x3fd17460
 800bcb0:	518f264d 	.word	0x518f264d
 800bcb4:	3fd55555 	.word	0x3fd55555
 800bcb8:	db6fabff 	.word	0xdb6fabff
 800bcbc:	3fdb6db6 	.word	0x3fdb6db6
 800bcc0:	33333303 	.word	0x33333303
 800bcc4:	3fe33333 	.word	0x3fe33333
 800bcc8:	e0000000 	.word	0xe0000000
 800bccc:	3feec709 	.word	0x3feec709
 800bcd0:	dc3a03fd 	.word	0xdc3a03fd
 800bcd4:	3feec709 	.word	0x3feec709
 800bcd8:	145b01f5 	.word	0x145b01f5
 800bcdc:	be3e2fe0 	.word	0xbe3e2fe0
 800bce0:	00000000 	.word	0x00000000
 800bce4:	3ff00000 	.word	0x3ff00000
 800bce8:	7ff00000 	.word	0x7ff00000
 800bcec:	43400000 	.word	0x43400000
 800bcf0:	0003988e 	.word	0x0003988e
 800bcf4:	000bb679 	.word	0x000bb679
 800bcf8:	0800c4e8 	.word	0x0800c4e8
 800bcfc:	3ff00000 	.word	0x3ff00000
 800bd00:	40080000 	.word	0x40080000
 800bd04:	0800c508 	.word	0x0800c508
 800bd08:	0800c4f8 	.word	0x0800c4f8
 800bd0c:	a3b5      	add	r3, pc, #724	; (adr r3, 800bfe4 <__ieee754_pow+0xa54>)
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	4640      	mov	r0, r8
 800bd14:	4649      	mov	r1, r9
 800bd16:	f7f4 fab9 	bl	800028c <__adddf3>
 800bd1a:	4622      	mov	r2, r4
 800bd1c:	ec41 0b1a 	vmov	d10, r0, r1
 800bd20:	462b      	mov	r3, r5
 800bd22:	4630      	mov	r0, r6
 800bd24:	4639      	mov	r1, r7
 800bd26:	f7f4 faaf 	bl	8000288 <__aeabi_dsub>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	ec51 0b1a 	vmov	r0, r1, d10
 800bd32:	f7f4 fef1 	bl	8000b18 <__aeabi_dcmpgt>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	f47f ae04 	bne.w	800b944 <__ieee754_pow+0x3b4>
 800bd3c:	4aa4      	ldr	r2, [pc, #656]	; (800bfd0 <__ieee754_pow+0xa40>)
 800bd3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd42:	4293      	cmp	r3, r2
 800bd44:	f340 8108 	ble.w	800bf58 <__ieee754_pow+0x9c8>
 800bd48:	151b      	asrs	r3, r3, #20
 800bd4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bd4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bd52:	fa4a f303 	asr.w	r3, sl, r3
 800bd56:	445b      	add	r3, fp
 800bd58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bd5c:	4e9d      	ldr	r6, [pc, #628]	; (800bfd4 <__ieee754_pow+0xa44>)
 800bd5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bd62:	4116      	asrs	r6, r2
 800bd64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bd68:	2000      	movs	r0, #0
 800bd6a:	ea23 0106 	bic.w	r1, r3, r6
 800bd6e:	f1c2 0214 	rsb	r2, r2, #20
 800bd72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bd76:	fa4a fa02 	asr.w	sl, sl, r2
 800bd7a:	f1bb 0f00 	cmp.w	fp, #0
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	4620      	mov	r0, r4
 800bd84:	4629      	mov	r1, r5
 800bd86:	bfb8      	it	lt
 800bd88:	f1ca 0a00 	rsblt	sl, sl, #0
 800bd8c:	f7f4 fa7c 	bl	8000288 <__aeabi_dsub>
 800bd90:	ec41 0b19 	vmov	d9, r0, r1
 800bd94:	4642      	mov	r2, r8
 800bd96:	464b      	mov	r3, r9
 800bd98:	ec51 0b19 	vmov	r0, r1, d9
 800bd9c:	f7f4 fa76 	bl	800028c <__adddf3>
 800bda0:	a37b      	add	r3, pc, #492	; (adr r3, 800bf90 <__ieee754_pow+0xa00>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	2000      	movs	r0, #0
 800bda8:	4604      	mov	r4, r0
 800bdaa:	460d      	mov	r5, r1
 800bdac:	f7f4 fc24 	bl	80005f8 <__aeabi_dmul>
 800bdb0:	ec53 2b19 	vmov	r2, r3, d9
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	460f      	mov	r7, r1
 800bdb8:	4620      	mov	r0, r4
 800bdba:	4629      	mov	r1, r5
 800bdbc:	f7f4 fa64 	bl	8000288 <__aeabi_dsub>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4640      	mov	r0, r8
 800bdc6:	4649      	mov	r1, r9
 800bdc8:	f7f4 fa5e 	bl	8000288 <__aeabi_dsub>
 800bdcc:	a372      	add	r3, pc, #456	; (adr r3, 800bf98 <__ieee754_pow+0xa08>)
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f7f4 fc11 	bl	80005f8 <__aeabi_dmul>
 800bdd6:	a372      	add	r3, pc, #456	; (adr r3, 800bfa0 <__ieee754_pow+0xa10>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	4680      	mov	r8, r0
 800bdde:	4689      	mov	r9, r1
 800bde0:	4620      	mov	r0, r4
 800bde2:	4629      	mov	r1, r5
 800bde4:	f7f4 fc08 	bl	80005f8 <__aeabi_dmul>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4640      	mov	r0, r8
 800bdee:	4649      	mov	r1, r9
 800bdf0:	f7f4 fa4c 	bl	800028c <__adddf3>
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	460d      	mov	r5, r1
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	4639      	mov	r1, r7
 800be00:	f7f4 fa44 	bl	800028c <__adddf3>
 800be04:	4632      	mov	r2, r6
 800be06:	463b      	mov	r3, r7
 800be08:	4680      	mov	r8, r0
 800be0a:	4689      	mov	r9, r1
 800be0c:	f7f4 fa3c 	bl	8000288 <__aeabi_dsub>
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	4620      	mov	r0, r4
 800be16:	4629      	mov	r1, r5
 800be18:	f7f4 fa36 	bl	8000288 <__aeabi_dsub>
 800be1c:	4642      	mov	r2, r8
 800be1e:	4606      	mov	r6, r0
 800be20:	460f      	mov	r7, r1
 800be22:	464b      	mov	r3, r9
 800be24:	4640      	mov	r0, r8
 800be26:	4649      	mov	r1, r9
 800be28:	f7f4 fbe6 	bl	80005f8 <__aeabi_dmul>
 800be2c:	a35e      	add	r3, pc, #376	; (adr r3, 800bfa8 <__ieee754_pow+0xa18>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	4604      	mov	r4, r0
 800be34:	460d      	mov	r5, r1
 800be36:	f7f4 fbdf 	bl	80005f8 <__aeabi_dmul>
 800be3a:	a35d      	add	r3, pc, #372	; (adr r3, 800bfb0 <__ieee754_pow+0xa20>)
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	f7f4 fa22 	bl	8000288 <__aeabi_dsub>
 800be44:	4622      	mov	r2, r4
 800be46:	462b      	mov	r3, r5
 800be48:	f7f4 fbd6 	bl	80005f8 <__aeabi_dmul>
 800be4c:	a35a      	add	r3, pc, #360	; (adr r3, 800bfb8 <__ieee754_pow+0xa28>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	f7f4 fa1b 	bl	800028c <__adddf3>
 800be56:	4622      	mov	r2, r4
 800be58:	462b      	mov	r3, r5
 800be5a:	f7f4 fbcd 	bl	80005f8 <__aeabi_dmul>
 800be5e:	a358      	add	r3, pc, #352	; (adr r3, 800bfc0 <__ieee754_pow+0xa30>)
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	f7f4 fa10 	bl	8000288 <__aeabi_dsub>
 800be68:	4622      	mov	r2, r4
 800be6a:	462b      	mov	r3, r5
 800be6c:	f7f4 fbc4 	bl	80005f8 <__aeabi_dmul>
 800be70:	a355      	add	r3, pc, #340	; (adr r3, 800bfc8 <__ieee754_pow+0xa38>)
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	f7f4 fa09 	bl	800028c <__adddf3>
 800be7a:	4622      	mov	r2, r4
 800be7c:	462b      	mov	r3, r5
 800be7e:	f7f4 fbbb 	bl	80005f8 <__aeabi_dmul>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	4640      	mov	r0, r8
 800be88:	4649      	mov	r1, r9
 800be8a:	f7f4 f9fd 	bl	8000288 <__aeabi_dsub>
 800be8e:	4604      	mov	r4, r0
 800be90:	460d      	mov	r5, r1
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4640      	mov	r0, r8
 800be98:	4649      	mov	r1, r9
 800be9a:	f7f4 fbad 	bl	80005f8 <__aeabi_dmul>
 800be9e:	2200      	movs	r2, #0
 800bea0:	ec41 0b19 	vmov	d9, r0, r1
 800bea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bea8:	4620      	mov	r0, r4
 800beaa:	4629      	mov	r1, r5
 800beac:	f7f4 f9ec 	bl	8000288 <__aeabi_dsub>
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	ec51 0b19 	vmov	r0, r1, d9
 800beb8:	f7f4 fcc8 	bl	800084c <__aeabi_ddiv>
 800bebc:	4632      	mov	r2, r6
 800bebe:	4604      	mov	r4, r0
 800bec0:	460d      	mov	r5, r1
 800bec2:	463b      	mov	r3, r7
 800bec4:	4640      	mov	r0, r8
 800bec6:	4649      	mov	r1, r9
 800bec8:	f7f4 fb96 	bl	80005f8 <__aeabi_dmul>
 800becc:	4632      	mov	r2, r6
 800bece:	463b      	mov	r3, r7
 800bed0:	f7f4 f9dc 	bl	800028c <__adddf3>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	4620      	mov	r0, r4
 800beda:	4629      	mov	r1, r5
 800bedc:	f7f4 f9d4 	bl	8000288 <__aeabi_dsub>
 800bee0:	4642      	mov	r2, r8
 800bee2:	464b      	mov	r3, r9
 800bee4:	f7f4 f9d0 	bl	8000288 <__aeabi_dsub>
 800bee8:	460b      	mov	r3, r1
 800beea:	4602      	mov	r2, r0
 800beec:	493a      	ldr	r1, [pc, #232]	; (800bfd8 <__ieee754_pow+0xa48>)
 800beee:	2000      	movs	r0, #0
 800bef0:	f7f4 f9ca 	bl	8000288 <__aeabi_dsub>
 800bef4:	ec41 0b10 	vmov	d0, r0, r1
 800bef8:	ee10 3a90 	vmov	r3, s1
 800befc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bf00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf04:	da2b      	bge.n	800bf5e <__ieee754_pow+0x9ce>
 800bf06:	4650      	mov	r0, sl
 800bf08:	f000 f966 	bl	800c1d8 <scalbn>
 800bf0c:	ec51 0b10 	vmov	r0, r1, d0
 800bf10:	ec53 2b18 	vmov	r2, r3, d8
 800bf14:	f7ff bbed 	b.w	800b6f2 <__ieee754_pow+0x162>
 800bf18:	4b30      	ldr	r3, [pc, #192]	; (800bfdc <__ieee754_pow+0xa4c>)
 800bf1a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bf1e:	429e      	cmp	r6, r3
 800bf20:	f77f af0c 	ble.w	800bd3c <__ieee754_pow+0x7ac>
 800bf24:	4b2e      	ldr	r3, [pc, #184]	; (800bfe0 <__ieee754_pow+0xa50>)
 800bf26:	440b      	add	r3, r1
 800bf28:	4303      	orrs	r3, r0
 800bf2a:	d009      	beq.n	800bf40 <__ieee754_pow+0x9b0>
 800bf2c:	ec51 0b18 	vmov	r0, r1, d8
 800bf30:	2200      	movs	r2, #0
 800bf32:	2300      	movs	r3, #0
 800bf34:	f7f4 fdd2 	bl	8000adc <__aeabi_dcmplt>
 800bf38:	3800      	subs	r0, #0
 800bf3a:	bf18      	it	ne
 800bf3c:	2001      	movne	r0, #1
 800bf3e:	e447      	b.n	800b7d0 <__ieee754_pow+0x240>
 800bf40:	4622      	mov	r2, r4
 800bf42:	462b      	mov	r3, r5
 800bf44:	f7f4 f9a0 	bl	8000288 <__aeabi_dsub>
 800bf48:	4642      	mov	r2, r8
 800bf4a:	464b      	mov	r3, r9
 800bf4c:	f7f4 fdda 	bl	8000b04 <__aeabi_dcmpge>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	f43f aef3 	beq.w	800bd3c <__ieee754_pow+0x7ac>
 800bf56:	e7e9      	b.n	800bf2c <__ieee754_pow+0x99c>
 800bf58:	f04f 0a00 	mov.w	sl, #0
 800bf5c:	e71a      	b.n	800bd94 <__ieee754_pow+0x804>
 800bf5e:	ec51 0b10 	vmov	r0, r1, d0
 800bf62:	4619      	mov	r1, r3
 800bf64:	e7d4      	b.n	800bf10 <__ieee754_pow+0x980>
 800bf66:	491c      	ldr	r1, [pc, #112]	; (800bfd8 <__ieee754_pow+0xa48>)
 800bf68:	2000      	movs	r0, #0
 800bf6a:	f7ff bb30 	b.w	800b5ce <__ieee754_pow+0x3e>
 800bf6e:	2000      	movs	r0, #0
 800bf70:	2100      	movs	r1, #0
 800bf72:	f7ff bb2c 	b.w	800b5ce <__ieee754_pow+0x3e>
 800bf76:	4630      	mov	r0, r6
 800bf78:	4639      	mov	r1, r7
 800bf7a:	f7ff bb28 	b.w	800b5ce <__ieee754_pow+0x3e>
 800bf7e:	9204      	str	r2, [sp, #16]
 800bf80:	f7ff bb7a 	b.w	800b678 <__ieee754_pow+0xe8>
 800bf84:	2300      	movs	r3, #0
 800bf86:	f7ff bb64 	b.w	800b652 <__ieee754_pow+0xc2>
 800bf8a:	bf00      	nop
 800bf8c:	f3af 8000 	nop.w
 800bf90:	00000000 	.word	0x00000000
 800bf94:	3fe62e43 	.word	0x3fe62e43
 800bf98:	fefa39ef 	.word	0xfefa39ef
 800bf9c:	3fe62e42 	.word	0x3fe62e42
 800bfa0:	0ca86c39 	.word	0x0ca86c39
 800bfa4:	be205c61 	.word	0xbe205c61
 800bfa8:	72bea4d0 	.word	0x72bea4d0
 800bfac:	3e663769 	.word	0x3e663769
 800bfb0:	c5d26bf1 	.word	0xc5d26bf1
 800bfb4:	3ebbbd41 	.word	0x3ebbbd41
 800bfb8:	af25de2c 	.word	0xaf25de2c
 800bfbc:	3f11566a 	.word	0x3f11566a
 800bfc0:	16bebd93 	.word	0x16bebd93
 800bfc4:	3f66c16c 	.word	0x3f66c16c
 800bfc8:	5555553e 	.word	0x5555553e
 800bfcc:	3fc55555 	.word	0x3fc55555
 800bfd0:	3fe00000 	.word	0x3fe00000
 800bfd4:	000fffff 	.word	0x000fffff
 800bfd8:	3ff00000 	.word	0x3ff00000
 800bfdc:	4090cbff 	.word	0x4090cbff
 800bfe0:	3f6f3400 	.word	0x3f6f3400
 800bfe4:	652b82fe 	.word	0x652b82fe
 800bfe8:	3c971547 	.word	0x3c971547

0800bfec <__ieee754_sqrt>:
 800bfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff0:	ec55 4b10 	vmov	r4, r5, d0
 800bff4:	4e55      	ldr	r6, [pc, #340]	; (800c14c <__ieee754_sqrt+0x160>)
 800bff6:	43ae      	bics	r6, r5
 800bff8:	ee10 0a10 	vmov	r0, s0
 800bffc:	ee10 3a10 	vmov	r3, s0
 800c000:	462a      	mov	r2, r5
 800c002:	4629      	mov	r1, r5
 800c004:	d110      	bne.n	800c028 <__ieee754_sqrt+0x3c>
 800c006:	ee10 2a10 	vmov	r2, s0
 800c00a:	462b      	mov	r3, r5
 800c00c:	f7f4 faf4 	bl	80005f8 <__aeabi_dmul>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4620      	mov	r0, r4
 800c016:	4629      	mov	r1, r5
 800c018:	f7f4 f938 	bl	800028c <__adddf3>
 800c01c:	4604      	mov	r4, r0
 800c01e:	460d      	mov	r5, r1
 800c020:	ec45 4b10 	vmov	d0, r4, r5
 800c024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c028:	2d00      	cmp	r5, #0
 800c02a:	dc10      	bgt.n	800c04e <__ieee754_sqrt+0x62>
 800c02c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c030:	4330      	orrs	r0, r6
 800c032:	d0f5      	beq.n	800c020 <__ieee754_sqrt+0x34>
 800c034:	b15d      	cbz	r5, 800c04e <__ieee754_sqrt+0x62>
 800c036:	ee10 2a10 	vmov	r2, s0
 800c03a:	462b      	mov	r3, r5
 800c03c:	ee10 0a10 	vmov	r0, s0
 800c040:	f7f4 f922 	bl	8000288 <__aeabi_dsub>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	f7f4 fc00 	bl	800084c <__aeabi_ddiv>
 800c04c:	e7e6      	b.n	800c01c <__ieee754_sqrt+0x30>
 800c04e:	1512      	asrs	r2, r2, #20
 800c050:	d074      	beq.n	800c13c <__ieee754_sqrt+0x150>
 800c052:	07d4      	lsls	r4, r2, #31
 800c054:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c058:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c05c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c060:	bf5e      	ittt	pl
 800c062:	0fda      	lsrpl	r2, r3, #31
 800c064:	005b      	lslpl	r3, r3, #1
 800c066:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c06a:	2400      	movs	r4, #0
 800c06c:	0fda      	lsrs	r2, r3, #31
 800c06e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c072:	107f      	asrs	r7, r7, #1
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	2516      	movs	r5, #22
 800c078:	4620      	mov	r0, r4
 800c07a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c07e:	1886      	adds	r6, r0, r2
 800c080:	428e      	cmp	r6, r1
 800c082:	bfde      	ittt	le
 800c084:	1b89      	suble	r1, r1, r6
 800c086:	18b0      	addle	r0, r6, r2
 800c088:	18a4      	addle	r4, r4, r2
 800c08a:	0049      	lsls	r1, r1, #1
 800c08c:	3d01      	subs	r5, #1
 800c08e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c092:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c096:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c09a:	d1f0      	bne.n	800c07e <__ieee754_sqrt+0x92>
 800c09c:	462a      	mov	r2, r5
 800c09e:	f04f 0e20 	mov.w	lr, #32
 800c0a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c0a6:	4281      	cmp	r1, r0
 800c0a8:	eb06 0c05 	add.w	ip, r6, r5
 800c0ac:	dc02      	bgt.n	800c0b4 <__ieee754_sqrt+0xc8>
 800c0ae:	d113      	bne.n	800c0d8 <__ieee754_sqrt+0xec>
 800c0b0:	459c      	cmp	ip, r3
 800c0b2:	d811      	bhi.n	800c0d8 <__ieee754_sqrt+0xec>
 800c0b4:	f1bc 0f00 	cmp.w	ip, #0
 800c0b8:	eb0c 0506 	add.w	r5, ip, r6
 800c0bc:	da43      	bge.n	800c146 <__ieee754_sqrt+0x15a>
 800c0be:	2d00      	cmp	r5, #0
 800c0c0:	db41      	blt.n	800c146 <__ieee754_sqrt+0x15a>
 800c0c2:	f100 0801 	add.w	r8, r0, #1
 800c0c6:	1a09      	subs	r1, r1, r0
 800c0c8:	459c      	cmp	ip, r3
 800c0ca:	bf88      	it	hi
 800c0cc:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800c0d0:	eba3 030c 	sub.w	r3, r3, ip
 800c0d4:	4432      	add	r2, r6
 800c0d6:	4640      	mov	r0, r8
 800c0d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c0dc:	f1be 0e01 	subs.w	lr, lr, #1
 800c0e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c0e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c0e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c0ec:	d1db      	bne.n	800c0a6 <__ieee754_sqrt+0xba>
 800c0ee:	430b      	orrs	r3, r1
 800c0f0:	d006      	beq.n	800c100 <__ieee754_sqrt+0x114>
 800c0f2:	1c50      	adds	r0, r2, #1
 800c0f4:	bf13      	iteet	ne
 800c0f6:	3201      	addne	r2, #1
 800c0f8:	3401      	addeq	r4, #1
 800c0fa:	4672      	moveq	r2, lr
 800c0fc:	f022 0201 	bicne.w	r2, r2, #1
 800c100:	1063      	asrs	r3, r4, #1
 800c102:	0852      	lsrs	r2, r2, #1
 800c104:	07e1      	lsls	r1, r4, #31
 800c106:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c10a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c10e:	bf48      	it	mi
 800c110:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c114:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c118:	4614      	mov	r4, r2
 800c11a:	e781      	b.n	800c020 <__ieee754_sqrt+0x34>
 800c11c:	0ad9      	lsrs	r1, r3, #11
 800c11e:	3815      	subs	r0, #21
 800c120:	055b      	lsls	r3, r3, #21
 800c122:	2900      	cmp	r1, #0
 800c124:	d0fa      	beq.n	800c11c <__ieee754_sqrt+0x130>
 800c126:	02cd      	lsls	r5, r1, #11
 800c128:	d50a      	bpl.n	800c140 <__ieee754_sqrt+0x154>
 800c12a:	f1c2 0420 	rsb	r4, r2, #32
 800c12e:	fa23 f404 	lsr.w	r4, r3, r4
 800c132:	1e55      	subs	r5, r2, #1
 800c134:	4093      	lsls	r3, r2
 800c136:	4321      	orrs	r1, r4
 800c138:	1b42      	subs	r2, r0, r5
 800c13a:	e78a      	b.n	800c052 <__ieee754_sqrt+0x66>
 800c13c:	4610      	mov	r0, r2
 800c13e:	e7f0      	b.n	800c122 <__ieee754_sqrt+0x136>
 800c140:	0049      	lsls	r1, r1, #1
 800c142:	3201      	adds	r2, #1
 800c144:	e7ef      	b.n	800c126 <__ieee754_sqrt+0x13a>
 800c146:	4680      	mov	r8, r0
 800c148:	e7bd      	b.n	800c0c6 <__ieee754_sqrt+0xda>
 800c14a:	bf00      	nop
 800c14c:	7ff00000 	.word	0x7ff00000

0800c150 <with_errno>:
 800c150:	b570      	push	{r4, r5, r6, lr}
 800c152:	4604      	mov	r4, r0
 800c154:	460d      	mov	r5, r1
 800c156:	4616      	mov	r6, r2
 800c158:	f7fe fca0 	bl	800aa9c <__errno>
 800c15c:	4629      	mov	r1, r5
 800c15e:	6006      	str	r6, [r0, #0]
 800c160:	4620      	mov	r0, r4
 800c162:	bd70      	pop	{r4, r5, r6, pc}

0800c164 <xflow>:
 800c164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c166:	4614      	mov	r4, r2
 800c168:	461d      	mov	r5, r3
 800c16a:	b108      	cbz	r0, 800c170 <xflow+0xc>
 800c16c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c170:	e9cd 2300 	strd	r2, r3, [sp]
 800c174:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c178:	4620      	mov	r0, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	f7f4 fa3c 	bl	80005f8 <__aeabi_dmul>
 800c180:	2222      	movs	r2, #34	; 0x22
 800c182:	b003      	add	sp, #12
 800c184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c188:	f7ff bfe2 	b.w	800c150 <with_errno>

0800c18c <__math_uflow>:
 800c18c:	b508      	push	{r3, lr}
 800c18e:	2200      	movs	r2, #0
 800c190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c194:	f7ff ffe6 	bl	800c164 <xflow>
 800c198:	ec41 0b10 	vmov	d0, r0, r1
 800c19c:	bd08      	pop	{r3, pc}

0800c19e <__math_oflow>:
 800c19e:	b508      	push	{r3, lr}
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c1a6:	f7ff ffdd 	bl	800c164 <xflow>
 800c1aa:	ec41 0b10 	vmov	d0, r0, r1
 800c1ae:	bd08      	pop	{r3, pc}

0800c1b0 <fabs>:
 800c1b0:	ec51 0b10 	vmov	r0, r1, d0
 800c1b4:	ee10 2a10 	vmov	r2, s0
 800c1b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1bc:	ec43 2b10 	vmov	d0, r2, r3
 800c1c0:	4770      	bx	lr

0800c1c2 <finite>:
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	ed8d 0b00 	vstr	d0, [sp]
 800c1c8:	9801      	ldr	r0, [sp, #4]
 800c1ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c1ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c1d2:	0fc0      	lsrs	r0, r0, #31
 800c1d4:	b002      	add	sp, #8
 800c1d6:	4770      	bx	lr

0800c1d8 <scalbn>:
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	ec55 4b10 	vmov	r4, r5, d0
 800c1de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c1e2:	4606      	mov	r6, r0
 800c1e4:	462b      	mov	r3, r5
 800c1e6:	b99a      	cbnz	r2, 800c210 <scalbn+0x38>
 800c1e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c1ec:	4323      	orrs	r3, r4
 800c1ee:	d036      	beq.n	800c25e <scalbn+0x86>
 800c1f0:	4b39      	ldr	r3, [pc, #228]	; (800c2d8 <scalbn+0x100>)
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	ee10 0a10 	vmov	r0, s0
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f7f4 f9fd 	bl	80005f8 <__aeabi_dmul>
 800c1fe:	4b37      	ldr	r3, [pc, #220]	; (800c2dc <scalbn+0x104>)
 800c200:	429e      	cmp	r6, r3
 800c202:	4604      	mov	r4, r0
 800c204:	460d      	mov	r5, r1
 800c206:	da10      	bge.n	800c22a <scalbn+0x52>
 800c208:	a32b      	add	r3, pc, #172	; (adr r3, 800c2b8 <scalbn+0xe0>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	e03a      	b.n	800c286 <scalbn+0xae>
 800c210:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c214:	428a      	cmp	r2, r1
 800c216:	d10c      	bne.n	800c232 <scalbn+0x5a>
 800c218:	ee10 2a10 	vmov	r2, s0
 800c21c:	4620      	mov	r0, r4
 800c21e:	4629      	mov	r1, r5
 800c220:	f7f4 f834 	bl	800028c <__adddf3>
 800c224:	4604      	mov	r4, r0
 800c226:	460d      	mov	r5, r1
 800c228:	e019      	b.n	800c25e <scalbn+0x86>
 800c22a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c22e:	460b      	mov	r3, r1
 800c230:	3a36      	subs	r2, #54	; 0x36
 800c232:	4432      	add	r2, r6
 800c234:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c238:	428a      	cmp	r2, r1
 800c23a:	dd08      	ble.n	800c24e <scalbn+0x76>
 800c23c:	2d00      	cmp	r5, #0
 800c23e:	a120      	add	r1, pc, #128	; (adr r1, 800c2c0 <scalbn+0xe8>)
 800c240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c244:	da1c      	bge.n	800c280 <scalbn+0xa8>
 800c246:	a120      	add	r1, pc, #128	; (adr r1, 800c2c8 <scalbn+0xf0>)
 800c248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c24c:	e018      	b.n	800c280 <scalbn+0xa8>
 800c24e:	2a00      	cmp	r2, #0
 800c250:	dd08      	ble.n	800c264 <scalbn+0x8c>
 800c252:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c256:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c25a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c25e:	ec45 4b10 	vmov	d0, r4, r5
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c268:	da19      	bge.n	800c29e <scalbn+0xc6>
 800c26a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c26e:	429e      	cmp	r6, r3
 800c270:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c274:	dd0a      	ble.n	800c28c <scalbn+0xb4>
 800c276:	a112      	add	r1, pc, #72	; (adr r1, 800c2c0 <scalbn+0xe8>)
 800c278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1e2      	bne.n	800c246 <scalbn+0x6e>
 800c280:	a30f      	add	r3, pc, #60	; (adr r3, 800c2c0 <scalbn+0xe8>)
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	f7f4 f9b7 	bl	80005f8 <__aeabi_dmul>
 800c28a:	e7cb      	b.n	800c224 <scalbn+0x4c>
 800c28c:	a10a      	add	r1, pc, #40	; (adr r1, 800c2b8 <scalbn+0xe0>)
 800c28e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d0b8      	beq.n	800c208 <scalbn+0x30>
 800c296:	a10e      	add	r1, pc, #56	; (adr r1, 800c2d0 <scalbn+0xf8>)
 800c298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c29c:	e7b4      	b.n	800c208 <scalbn+0x30>
 800c29e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2a2:	3236      	adds	r2, #54	; 0x36
 800c2a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c2a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	4b0c      	ldr	r3, [pc, #48]	; (800c2e0 <scalbn+0x108>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	e7e8      	b.n	800c286 <scalbn+0xae>
 800c2b4:	f3af 8000 	nop.w
 800c2b8:	c2f8f359 	.word	0xc2f8f359
 800c2bc:	01a56e1f 	.word	0x01a56e1f
 800c2c0:	8800759c 	.word	0x8800759c
 800c2c4:	7e37e43c 	.word	0x7e37e43c
 800c2c8:	8800759c 	.word	0x8800759c
 800c2cc:	fe37e43c 	.word	0xfe37e43c
 800c2d0:	c2f8f359 	.word	0xc2f8f359
 800c2d4:	81a56e1f 	.word	0x81a56e1f
 800c2d8:	43500000 	.word	0x43500000
 800c2dc:	ffff3cb0 	.word	0xffff3cb0
 800c2e0:	3c900000 	.word	0x3c900000

0800c2e4 <_init>:
 800c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e6:	bf00      	nop
 800c2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ea:	bc08      	pop	{r3}
 800c2ec:	469e      	mov	lr, r3
 800c2ee:	4770      	bx	lr

0800c2f0 <_fini>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	bf00      	nop
 800c2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2f6:	bc08      	pop	{r3}
 800c2f8:	469e      	mov	lr, r3
 800c2fa:	4770      	bx	lr
